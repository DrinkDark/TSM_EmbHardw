
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000116b4 memsz 0x000116b4 flags r-x
    LOAD off    0x000126d4 vaddr 0x000116d4 paddr 0x000132c0 align 2**12
         filesz 0x00001bec memsz 0x00001bec flags rw-
    LOAD off    0x00014eac vaddr 0x00014eac paddr 0x00014eac align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010cb8  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007d8  00010efc  00010efc  00011efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bec  000116d4  000132c0  000126d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00014eac  00014eac  00014eac  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  0001503c  0001503c  000142c0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000142c0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f50  00000000  00000000  000142e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002413f  00000000  00000000  00015238  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000093af  00000000  00000000  00039377  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b825  00000000  00000000  00042726  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002158  00000000  00000000  0004df4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000038e8  00000000  00000000  000500a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000178c0  00000000  00000000  0005398c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0006b24c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d8  00000000  00000000  0006b2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000705a6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000705a9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000705b5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000705b6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000705b7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000705bb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000705bf  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000705c3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000705cc  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000705d5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000705de  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000057  00000000  00000000  000705e9  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  00070640  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000723e4  00000000  00000000  00076118  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00010efc l    d  .rodata	00000000 .rodata
000116d4 l    d  .rwdata	00000000 .rwdata
00014eac l    d  .bss	00000000 .bss
0001503c l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/adrie/OneDrive/Documents/HES/Master/TSM_EmbHardw/Labo/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011422 l     O .rodata	00000010 zeroes.4404
0000499c l     F .text	000000bc __sbprintf
00011432 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004bac l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000066dc l     F .text	00000008 __fp_unlock
000066f0 l     F .text	0000019c __sinit.part.1
0000688c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00011bdc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00012020 l     O .rwdata	00000020 lc_ctype_charset
00012000 l     O .rwdata	00000020 lc_message_charset
00012040 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00011464 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009428 l     F .text	000000fc __sprint_r.part.0
00011598 l     O .rodata	00000010 blanks.4348
00011588 l     O .rodata	00000010 zeroes.4349
0000a9b4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e4bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e5c8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e5f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e6e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000e7c0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e8ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000ea80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000132b0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000ecfc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000ee30 l     F .text	00000034 alt_dev_reg
00012220 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f13c l     F .text	0000020c altera_avalon_jtag_uart_irq
0000f348 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000f980 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000fe30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000102a4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000103e4 l     F .text	0000003c alt_get_errno
00010420 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00014f10 g     O .bss	00000004 alt_instruction_exception_handler
00008ac0 g     F .text	00000074 _mprec_log10
00008bac g     F .text	0000008c __any_on
0000af50 g     F .text	00000054 _isatty_r
00011470 g     O .rodata	00000028 __mprec_tinytens
0000e9bc g     F .text	0000007c alt_main
000025c8 g     F .text	000000c0 _puts_r
00014f3c g     O .bss	00000100 alt_irq
0000afa4 g     F .text	00000060 _lseek_r
000113ce g     O .rodata	00000009 gy_array
000132c0 g       *ABS*	00000000 __flash_rwdata_start
0000cfe8 g     F .text	00000088 .hidden __eqdf2
0001503c g       *ABS*	00000000 __alt_heap_start
0000258c g     F .text	0000003c printf
0000b1bc g     F .text	0000009c _wcrtomb_r
000092e8 g     F .text	0000005c __sseek
00006a2c g     F .text	00000010 __sinit
0000b064 g     F .text	00000140 __swbuf_r
000074f4 g     F .text	0000007c _setlocale_r
00006894 g     F .text	00000068 __sfmoreglue
0000ea5c g     F .text	00000024 __malloc_unlock
00000a7c g     F .text	00000014 LCD_Write_Command
00014ebc g     O .bss	00000004 sobel_width
00014f00 g     O .bss	00000004 altera_avalon_timer_ts_freq
000079b8 g     F .text	0000015c memmove
00000a90 g     F .text	00000014 LCD_Write_Data
00006a14 g     F .text	00000018 _cleanup
00007c3c g     F .text	000000a8 _Balloc
0000d070 g     F .text	000000dc .hidden __gtdf2
000107dc g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000598 g     F .text	00000024 cam_get_xsize
0000aef4 g     F .text	0000005c _fstat_r
00014ee0 g     O .bss	00000004 errno
00009264 g     F .text	00000008 __seofread
00014ef4 g     O .bss	00000004 alt_argv
0001b280 g       *ABS*	00000000 _gp
0000eccc g     F .text	00000030 usleep
00000658 g     F .text	00000074 cam_set_image_pointer
000120a0 g     O .rwdata	00000180 alt_fd_list
00001b54 g     F .text	00000010 vga_set_pointer
00010800 g     F .text	00000090 alt_find_dev
00007870 g     F .text	00000148 memcpy
000066e4 g     F .text	0000000c _cleanup_r
0000e2d4 g     F .text	000000dc .hidden __floatsidf
00010368 g     F .text	0000007c alt_io_redirect
0000d14c g     F .text	000000f4 .hidden __ltdf2
00010efc g       *ABS*	00000000 __DTOR_END__
00002688 g     F .text	00000014 puts
00010acc g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000919c g     F .text	00000074 __fpclassifyd
00008a1c g     F .text	000000a4 __ratio
0000a998 g     F .text	0000001c __vfiprintf_internal
0000f540 g     F .text	0000021c altera_avalon_jtag_uart_read
00001d28 g     F .text	00000014 malloc
0000255c g     F .text	00000030 _printf_r
000008d0 g     F .text	00000008 get_grayscale_picture
00001c6c g     F .text	00000064 .hidden __udivsi3
00010f5c g     O .rodata	00000128 lens_roll_off_tbl
00000280 g     F .text	00000318 init_camera
0000e71c g     F .text	000000a4 isatty
000114c0 g     O .rodata	000000c8 __mprec_tens
00007570 g     F .text	0000000c __locale_charset
00010a3c g     F .text	00000090 alt_icache_flush
00014edc g     O .bss	00000004 __malloc_top_pad
00013290 g     O .rwdata	00000004 __mb_cur_max
000075a0 g     F .text	0000000c _localeconv_r
000015b0 g     F .text	00000100 sobel_x
00008048 g     F .text	0000003c __i2b
00006eb0 g     F .text	000004bc __sfvwrite_r
00000aa4 g     F .text	00000414 init_LCD
0000269c g     F .text	00000054 _sbrk_r
000005e0 g     F .text	00000078 cam_get_profiling
0000b004 g     F .text	00000060 _read_r
00014ec0 g     O .bss	00000004 sobel_result
000132a8 g     O .rwdata	00000004 alt_max_fd
0000abe8 g     F .text	000000f0 _fclose_r
000066ac g     F .text	00000030 fflush
00014ed8 g     O .bss	00000004 __malloc_max_sbrked_mem
00014eb4 g     O .bss	00000004 grayscale_array
0000be54 g     F .text	000008ac .hidden __adddf3
000005bc g     F .text	00000024 cam_get_ysize
000087c4 g     F .text	0000010c __b2d
0000b91c g     F .text	00000538 .hidden __umoddi3
0000e8e8 g     F .text	000000d4 lseek
00000998 g     F .text	0000008c i2c_short_read
00013288 g     O .rwdata	00000004 _global_impure_ptr
00008c38 g     F .text	00000564 _realloc_r
0001503c g       *ABS*	00000000 __bss_end
000101b4 g     F .text	000000f0 alt_iic_isr_register
000106d4 g     F .text	00000108 alt_tick
0000b3a4 g     F .text	00000578 .hidden __udivdi3
0000ae50 g     F .text	00000024 _fputwc_r
00011498 g     O .rodata	00000028 __mprec_bigtens
00007e2c g     F .text	00000104 __s2b
0000e3b0 g     F .text	000000a8 .hidden __floatunsidf
00008504 g     F .text	00000060 __mcmp
00006a4c g     F .text	00000018 __fp_lock_all
00010168 g     F .text	0000004c alt_ic_irq_enabled
00014eac g     O .bss	00000004 grayscape_height
00010638 g     F .text	0000009c alt_alarm_stop
00014f04 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012078 g     O .rwdata	00000028 alt_dev_null
00000f44 g     F .text	00000078 transfer_LCD_with_dma
0000fe10 g     F .text	00000020 alt_dcache_flush_all
00007f30 g     F .text	00000068 __hi0bits
0000e254 g     F .text	00000080 .hidden __fixdfsi
000132c0 g       *ABS*	00000000 __ram_rwdata_end
000132a0 g     O .rwdata	00000008 alt_dev_list
0000ed38 g     F .text	000000f8 write
0000fb6c g     F .text	00000020 alt_timestamp_freq
000116d4 g       *ABS*	00000000 __ram_rodata_end
0000e630 g     F .text	000000b0 fstat
0000d14c g     F .text	000000f4 .hidden __ledf2
0000827c g     F .text	00000140 __pow5mult
0000953c g     F .text	0000145c ___vfiprintf_internal_r
00014eec g     O .bss	00000004 __nlocale_changed
00001cd0 g     F .text	00000058 .hidden __umodsi3
00001b44 g     F .text	00000008 GetSobel_rgb
0001503c g       *ABS*	00000000 end
00001b4c g     F .text	00000008 GetSobelResult
000006f0 g     F .text	00000020 take_picture_blocking
00000750 g     F .text	00000014 DIPSW_get_value
00001928 g     F .text	00000168 sobel_y_with_rgb
0000f07c g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006e0 g     F .text	00000010 current_image_pointer
00010efc g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000f9f8 g     F .text	0000007c alt_avalon_timer_sc_init
0000e458 g     F .text	00000064 .hidden __clzsi2
0000f75c g     F .text	00000224 altera_avalon_jtag_uart_write
00006a3c g     F .text	00000004 __sfp_lock_acquire
0000778c g     F .text	000000e4 memchr
00002788 g     F .text	000021f8 ___vfprintf_internal_r
00006ba0 g     F .text	00000310 _free_r
0000757c g     F .text	00000010 __locale_mb_cur_max
0000182c g     F .text	000000fc sobel_y
00011084 g     O .rodata	00000140 noise_reduction_reg_settings_array
00010d48 g     F .text	00000180 __call_exitprocs
00014ee8 g     O .bss	00000004 __mlocale_changed
00013280 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00014f08 g     O .bss	00000004 _alt_tick_rate
000083bc g     F .text	00000148 __lshift
00014f0c g     O .bss	00000004 _alt_nticks
0000eabc g     F .text	000000fc read
0000ee9c g     F .text	0000007c alt_sys_init
000016b0 g     F .text	0000017c sobel_x_with_rgb
00010c30 g     F .text	00000118 __register_exitproc
00008084 g     F .text	000001f8 __multiply
0000f3e8 g     F .text	00000068 altera_avalon_jtag_uart_close
000116d4 g       *ABS*	00000000 __ram_rwdata_start
00010efc g       *ABS*	00000000 __ram_rodata_start
00014f14 g     O .bss	00000028 __malloc_current_mallinfo
000088d0 g     F .text	0000014c __d2b
00014ec4 g     O .bss	00000004 sobel_height
00000710 g     F .text	00000014 enable_continues_mode
0000ef18 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001410 g     F .text	000000e4 init_sobel_arrays
00010998 g     F .text	000000a4 alt_get_fd
0000fcb8 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000aad0 g     F .text	00000054 _close_r
00010bb4 g     F .text	0000007c memcmp
0000efd8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001503c g       *ABS*	00000000 __alt_stack_base
0000f028 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00004a58 g     F .text	00000154 __swsetup_r
0000c700 g     F .text	000008e8 .hidden __divdf3
000068fc g     F .text	00000118 __sfp
00008b34 g     F .text	00000078 __copybits
000117d4 g     O .rwdata	00000408 __malloc_av_
00006a48 g     F .text	00000004 __sinit_lock_release
0000d240 g     F .text	00000718 .hidden __muldf3
00009210 g     F .text	00000054 __sread
00010890 g     F .text	00000108 alt_find_file
0000fe6c g     F .text	000000a4 alt_dev_llist_insert
0000ea38 g     F .text	00000024 __malloc_lock
0000ec1c g     F .text	000000b0 sbrk
00006650 g     F .text	0000005c _fflush_r
0000ab24 g     F .text	000000c4 _calloc_r
000116d4 g     O .rwdata	00000100 .hidden __divsi3_table
00014eac g       *ABS*	00000000 __bss_start
00007b14 g     F .text	00000128 memset
00000fbc g     F .text	00000454 main
00014ef8 g     O .bss	00000004 alt_envp
00014ed4 g     O .bss	00000004 __malloc_max_total_mem
000008c0 g     F .text	00000008 get_grayscale_width
0000ef78 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000b1a4 g     F .text	00000018 __swbuf
00014ec8 g     O .bss	00000004 sobel_x_result
00009344 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000acd8 g     F .text	00000014 fclose
0000fa74 g     F .text	00000078 alt_timestamp_start
00004dac g     F .text	00001688 _dtoa_r
00001d50 g     F .text	0000080c _malloc_r
0000b318 g     F .text	00000030 __ascii_wctomb
000132ac g     O .rwdata	00000004 alt_errno
0000736c g     F .text	000000c4 _fwalk
00001b74 g     F .text	00000084 .hidden __divsi3
00006a7c g     F .text	00000124 _malloc_trim_r
00010efc g       *ABS*	00000000 __CTOR_END__
00014eb0 g     O .bss	00000004 grayscale_width
0000934c g     F .text	000000dc strcmp
00000eb8 g     F .text	0000008c transfer_LCD_no_dma
00010efc g       *ABS*	00000000 __flash_rodata_start
00010efc g       *ABS*	00000000 __DTOR_LIST__
0000cfe8 g     F .text	00000088 .hidden __nedf2
000111c4 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000ee64 g     F .text	00000038 alt_irq_init
0000ebb8 g     F .text	00000064 alt_release_fd
000008f0 g     F .text	000000a8 i2c_auto_detect
000115a8 g     O .rodata	00000100 .hidden __clz_tab
000006cc g     F .text	00000014 current_image_valid
00014ee4 g     O .bss	00000004 _PathLocale
000008d8 g     F .text	00000018 i2c_busy_wait
00010b68 g     F .text	00000014 atexit
0000aa70 g     F .text	00000060 _write_r
000075ac g     F .text	00000018 setlocale
0001328c g     O .rwdata	00000004 _impure_ptr
00014ef0 g     O .bss	00000004 alt_argc
00006434 g     F .text	0000021c __sflush_r
00014efc g     O .bss	00000004 altera_avalon_timer_ts_base
0000ff70 g     F .text	00000060 _do_dtors
00007598 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00008760 g     F .text	00000064 __ulp
00006a64 g     F .text	00000018 __fp_unlock_all
00013298 g     O .rwdata	00000008 alt_fs_list
00014ecc g     O .bss	00000004 sobel_y_result
00000a24 g     F .text	00000058 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00014eb8 g     O .bss	00000002 LCD_height
000075c4 g     F .text	0000000c localeconv
0000faec g     F .text	00000080 alt_timestamp
00001b64 g     F .text	00000010 vga_set_swap
00010004 g     F .text	00000050 alt_ic_isr_register
00001a90 g     F .text	000000b4 sobel_threshold
000132c0 g       *ABS*	00000000 _edata
0001503c g       *ABS*	00000000 _end
0000acec g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000f450 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000113d7 g     O .rodata	00000009 gx_array
000100dc g     F .text	0000008c alt_ic_irq_disable
0000926c g     F .text	0000007c __swrite
00013284 g     O .rwdata	00000004 __malloc_trim_threshold
00014eba g     O .bss	00000002 LCD_width
00000764 g     F .text	0000015c conv_grayscale
0000758c g     F .text	0000000c __locale_msgcharset
00010b7c g     F .text	00000038 exit
00007430 g     F .text	000000c4 _fwalk_reent
00008564 g     F .text	000001fc __mdiff
00001bf8 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006a40 g     F .text	00000004 __sfp_lock_release
000008c8 g     F .text	00000008 get_grayscale_height
00010ec8 g     F .text	00000034 _exit
000014f4 g     F .text	000000bc sobel_mac
0000fb8c g     F .text	0000012c alt_alarm_start
000075d0 g     F .text	000001bc __smakebuf_r
00014ed0 g     O .bss	00000004 sobel_rgb565
000026f0 g     F .text	00000098 strlen
000104e4 g     F .text	00000154 open
0000d070 g     F .text	000000dc .hidden __gedf2
00013294 g     O .rwdata	00000004 __wctomb
00009524 g     F .text	00000018 __sprint_r
0000ffd0 g     F .text	00000034 alt_icache_flush_all
000132b4 g     O .rwdata	00000004 alt_priority_mask
00010054 g     F .text	00000088 alt_ic_irq_enable
00004980 g     F .text	0000001c __vfprintf_internal
0000b348 g     F .text	0000005c _wctomb_r
0000d958 g     F .text	000008fc .hidden __subdf3
00007f98 g     F .text	000000b0 __lo0bits
000132b8 g     O .rwdata	00000008 alt_alarm_list
0000ff10 g     F .text	00000060 _do_ctors
0000b258 g     F .text	000000c0 wcrtomb
0000e4f8 g     F .text	000000d0 close
0000e828 g     F .text	00000084 alt_load
0000ae74 g     F .text	00000080 fputwc
00001d3c g     F .text	00000014 free
00006a44 g     F .text	00000004 __sinit_lock_acquire
00007d0c g     F .text	00000120 __multadd
00007ce4 g     F .text	00000028 _Bfree
00000724 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	1093cf04 	addi	r2,r2,20284
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	1093cf04 	addi	r2,r2,20284
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a72417 	ldw	r2,-25456(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a72417 	ldw	r2,-25456(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     250:	d6aca014 	ori	gp,gp,45696
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	1093ab14 	ori	r2,r2,20140

    movhi r3, %hi(__bss_end)
     25c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     260:	18d40f14 	ori	r3,r3,20540

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_data_end+0xff000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000e8280 	call	e828 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000e9bc0 	call	e9bc <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_data_end+0xff00027c>

00000280 <init_camera>:
     280:	00804034 	movhi	r2,256
     284:	10842744 	addi	r2,r2,4253
     288:	00c00084 	movi	r3,2
     28c:	10c00025 	stbio	r3,0(r2)
     290:	00804034 	movhi	r2,256
     294:	10841304 	addi	r2,r2,4172
     298:	00c00044 	movi	r3,1
     29c:	10c00025 	stbio	r3,0(r2)
     2a0:	008003f4 	movhi	r2,15
     2a4:	10909004 	addi	r2,r2,16960
     2a8:	0001883a 	nop
     2ac:	10bfffc4 	addi	r2,r2,-1
     2b0:	103ffd1e 	bne	r2,zero,2a8 <__alt_data_end+0xff0002a8>
     2b4:	00804034 	movhi	r2,256
     2b8:	10841304 	addi	r2,r2,4172
     2bc:	10000025 	stbio	zero,0(r2)
     2c0:	008003f4 	movhi	r2,15
     2c4:	10909004 	addi	r2,r2,16960
     2c8:	0001883a 	nop
     2cc:	10bfffc4 	addi	r2,r2,-1
     2d0:	103ffd1e 	bne	r2,zero,2c8 <__alt_data_end+0xff0002c8>
     2d4:	defffc04 	addi	sp,sp,-16
     2d8:	01800044 	movi	r6,1
     2dc:	014ce184 	movi	r5,13190
     2e0:	01001e04 	movi	r4,120
     2e4:	dfc00315 	stw	ra,12(sp)
     2e8:	dc800215 	stw	r18,8(sp)
     2ec:	dc400115 	stw	r17,4(sp)
     2f0:	dc000015 	stw	r16,0(sp)
     2f4:	0000a240 	call	a24 <i2c_short_write>
     2f8:	000d883a 	mov	r6,zero
     2fc:	014ce184 	movi	r5,13190
     300:	01001e04 	movi	r4,120
     304:	0000a240 	call	a24 <i2c_short_write>
     308:	008003f4 	movhi	r2,15
     30c:	10909004 	addi	r2,r2,16960
     310:	0001883a 	nop
     314:	10bfffc4 	addi	r2,r2,-1
     318:	103ffd1e 	bne	r2,zero,310 <__alt_data_end+0xff000310>
     31c:	01803104 	movi	r6,196
     320:	014c0684 	movi	r5,12314
     324:	01001e04 	movi	r4,120
     328:	0000a240 	call	a24 <i2c_short_write>
     32c:	01800204 	movi	r6,8
     330:	014c8084 	movi	r5,12802
     334:	01001e04 	movi	r4,120
     338:	0000a240 	call	a24 <i2c_short_write>
     33c:	0180c744 	movi	r6,797
     340:	014cfd04 	movi	r5,13300
     344:	01001e04 	movi	r4,120
     348:	0000a240 	call	a24 <i2c_short_write>
     34c:	008000b4 	movhi	r2,2
     350:	10a1a804 	addi	r2,r2,-31072
     354:	0001883a 	nop
     358:	10bfffc4 	addi	r2,r2,-1
     35c:	103ffd1e 	bne	r2,zero,354 <__alt_data_end+0xff000354>
     360:	01a3c254 	movui	r6,36617
     364:	014d0784 	movi	r5,13342
     368:	01001e04 	movi	r4,120
     36c:	0000a240 	call	a24 <i2c_short_write>
     370:	01805404 	movi	r6,336
     374:	014d0704 	movi	r5,13340
     378:	01001e04 	movi	r4,120
     37c:	0000a240 	call	a24 <i2c_short_write>
     380:	01a3c254 	movui	r6,36617
     384:	014d0784 	movi	r5,13342
     388:	01001e04 	movi	r4,120
     38c:	0000a240 	call	a24 <i2c_short_write>
     390:	008000b4 	movhi	r2,2
     394:	10a1a804 	addi	r2,r2,-31072
     398:	0001883a 	nop
     39c:	10bfffc4 	addi	r2,r2,-1
     3a0:	103ffd1e 	bne	r2,zero,398 <__alt_data_end+0xff000398>
     3a4:	04000074 	movhi	r16,1
     3a8:	84047104 	addi	r16,r16,4548
     3ac:	01a3c214 	movui	r6,36616
     3b0:	014d0784 	movi	r5,13342
     3b4:	01001e04 	movi	r4,120
     3b8:	0000a240 	call	a24 <i2c_short_write>
     3bc:	84400084 	addi	r17,r16,2
     3c0:	84804604 	addi	r18,r16,280
     3c4:	8980000b 	ldhu	r6,0(r17)
     3c8:	8140000b 	ldhu	r5,0(r16)
     3cc:	01001e04 	movi	r4,120
     3d0:	84000104 	addi	r16,r16,4
     3d4:	0000a240 	call	a24 <i2c_short_write>
     3d8:	8c400104 	addi	r17,r17,4
     3dc:	84bff91e 	bne	r16,r18,3c4 <__alt_data_end+0xff0003c4>
     3e0:	04000074 	movhi	r16,1
     3e4:	84042104 	addi	r16,r16,4228
     3e8:	84400084 	addi	r17,r16,2
     3ec:	84805004 	addi	r18,r16,320
     3f0:	8980000b 	ldhu	r6,0(r17)
     3f4:	8140000b 	ldhu	r5,0(r16)
     3f8:	01001e04 	movi	r4,120
     3fc:	84000104 	addi	r16,r16,4
     400:	0000a240 	call	a24 <i2c_short_write>
     404:	8c400104 	addi	r17,r17,4
     408:	943ff91e 	bne	r18,r16,3f0 <__alt_data_end+0xff0003f0>
     40c:	018164c4 	movi	r6,1427
     410:	014d6904 	movi	r5,13732
     414:	01001e04 	movi	r4,120
     418:	0000a240 	call	a24 <i2c_short_write>
     41c:	0189e644 	movi	r6,10137
     420:	014ce304 	movi	r5,13196
     424:	01001e04 	movi	r4,120
     428:	0000a240 	call	a24 <i2c_short_write>
     42c:	01991004 	movi	r6,25664
     430:	014ce404 	movi	r5,13200
     434:	01001e04 	movi	r4,120
     438:	0000a240 	call	a24 <i2c_short_write>
     43c:	008000b4 	movhi	r2,2
     440:	10a1a804 	addi	r2,r2,-31072
     444:	0001883a 	nop
     448:	10bfffc4 	addi	r2,r2,-1
     44c:	103ffd1e 	bne	r2,zero,444 <__alt_data_end+0xff000444>
     450:	0189e6c4 	movi	r6,10139
     454:	014ce304 	movi	r5,13196
     458:	01001e04 	movi	r4,120
     45c:	0000a240 	call	a24 <i2c_short_write>
     460:	01991004 	movi	r6,25664
     464:	014ce404 	movi	r5,13200
     468:	01001e04 	movi	r4,120
     46c:	0000a240 	call	a24 <i2c_short_write>
     470:	008000b4 	movhi	r2,2
     474:	10a1a804 	addi	r2,r2,-31072
     478:	0001883a 	nop
     47c:	10bfffc4 	addi	r2,r2,-1
     480:	103ffd1e 	bne	r2,zero,478 <__alt_data_end+0xff000478>
     484:	01a840d4 	movui	r6,41219
     488:	014ce304 	movi	r5,13196
     48c:	01001e04 	movi	r4,120
     490:	0000a240 	call	a24 <i2c_short_write>
     494:	01800144 	movi	r6,5
     498:	014ce404 	movi	r5,13200
     49c:	01001e04 	movi	r4,120
     4a0:	0000a240 	call	a24 <i2c_short_write>
     4a4:	008000b4 	movhi	r2,2
     4a8:	10a1a804 	addi	r2,r2,-31072
     4ac:	0001883a 	nop
     4b0:	10bfffc4 	addi	r2,r2,-1
     4b4:	103ffd1e 	bne	r2,zero,4ac <__alt_data_end+0xff0004ac>
     4b8:	01a840d4 	movui	r6,41219
     4bc:	014ce304 	movi	r5,13196
     4c0:	01001e04 	movi	r4,120
     4c4:	0000a240 	call	a24 <i2c_short_write>
     4c8:	01800184 	movi	r6,6
     4cc:	014ce404 	movi	r5,13200
     4d0:	01001e04 	movi	r4,120
     4d4:	0000a240 	call	a24 <i2c_short_write>
     4d8:	008000b4 	movhi	r2,2
     4dc:	10a1a804 	addi	r2,r2,-31072
     4e0:	0001883a 	nop
     4e4:	10bfffc4 	addi	r2,r2,-1
     4e8:	103ffd1e 	bne	r2,zero,4e0 <__alt_data_end+0xff0004e0>
     4ec:	04000074 	movhi	r16,1
     4f0:	8403d704 	addi	r16,r16,3932
     4f4:	84400084 	addi	r17,r16,2
     4f8:	84804a04 	addi	r18,r16,296
     4fc:	8980000b 	ldhu	r6,0(r17)
     500:	8140000b 	ldhu	r5,0(r16)
     504:	01001e04 	movi	r4,120
     508:	84000104 	addi	r16,r16,4
     50c:	0000a240 	call	a24 <i2c_short_write>
     510:	8c400104 	addi	r17,r17,4
     514:	943ff91e 	bne	r18,r16,4fc <__alt_data_end+0xff0004fc>
     518:	008003f4 	movhi	r2,15
     51c:	10909004 	addi	r2,r2,16960
     520:	0001883a 	nop
     524:	10bfffc4 	addi	r2,r2,-1
     528:	103ffd1e 	bne	r2,zero,520 <__alt_data_end+0xff000520>
     52c:	01800804 	movi	r6,32
     530:	014ccb84 	movi	r5,13102
     534:	01001e04 	movi	r4,120
     538:	0000a240 	call	a24 <i2c_short_write>
     53c:	008003f4 	movhi	r2,15
     540:	10909004 	addi	r2,r2,16960
     544:	0001883a 	nop
     548:	10bfffc4 	addi	r2,r2,-1
     54c:	103ffd1e 	bne	r2,zero,544 <__alt_data_end+0xff000544>
     550:	01800884 	movi	r6,34
     554:	014d0104 	movi	r5,13316
     558:	01001e04 	movi	r4,120
     55c:	0000a240 	call	a24 <i2c_short_write>
     560:	008003f4 	movhi	r2,15
     564:	10909004 	addi	r2,r2,16960
     568:	0001883a 	nop
     56c:	10bfffc4 	addi	r2,r2,-1
     570:	103ffd1e 	bne	r2,zero,568 <__alt_data_end+0xff000568>
     574:	018009c4 	movi	r6,39
     578:	014c1004 	movi	r5,12352
     57c:	01001e04 	movi	r4,120
     580:	dfc00317 	ldw	ra,12(sp)
     584:	dc800217 	ldw	r18,8(sp)
     588:	dc400117 	ldw	r17,4(sp)
     58c:	dc000017 	ldw	r16,0(sp)
     590:	dec00404 	addi	sp,sp,16
     594:	0000a241 	jmpi	a24 <i2c_short_write>

00000598 <cam_get_xsize>:
     598:	00c04034 	movhi	r3,256
     59c:	18c41304 	addi	r3,r3,4172
     5a0:	18800023 	ldbuio	r2,0(r3)
     5a4:	1080010c 	andi	r2,r2,4
     5a8:	103ffd26 	beq	r2,zero,5a0 <__alt_data_end+0xff0005a0>
     5ac:	00804034 	movhi	r2,256
     5b0:	10841004 	addi	r2,r2,4160
     5b4:	1080002b 	ldhuio	r2,0(r2)
     5b8:	f800283a 	ret

000005bc <cam_get_ysize>:
     5bc:	00c04034 	movhi	r3,256
     5c0:	18c41304 	addi	r3,r3,4172
     5c4:	18800023 	ldbuio	r2,0(r3)
     5c8:	1080010c 	andi	r2,r2,4
     5cc:	103ffd26 	beq	r2,zero,5c4 <__alt_data_end+0xff0005c4>
     5d0:	00804034 	movhi	r2,256
     5d4:	10841104 	addi	r2,r2,4164
     5d8:	1080002b 	ldhuio	r2,0(r2)
     5dc:	f800283a 	ret

000005e0 <cam_get_profiling>:
     5e0:	00c04034 	movhi	r3,256
     5e4:	18c41304 	addi	r3,r3,4172
     5e8:	18800023 	ldbuio	r2,0(r3)
     5ec:	1080010c 	andi	r2,r2,4
     5f0:	103ffd26 	beq	r2,zero,5e8 <__alt_data_end+0xff0005e8>
     5f4:	00804034 	movhi	r2,256
     5f8:	deffff04 	addi	sp,sp,-4
     5fc:	10841004 	addi	r2,r2,4160
     600:	dfc00015 	stw	ra,0(sp)
     604:	1140002b 	ldhuio	r5,0(r2)
     608:	01000074 	movhi	r4,1
     60c:	2103bf04 	addi	r4,r4,3836
     610:	297fffcc 	andi	r5,r5,65535
     614:	000258c0 	call	258c <printf>
     618:	00804034 	movhi	r2,256
     61c:	10841104 	addi	r2,r2,4164
     620:	1140002b 	ldhuio	r5,0(r2)
     624:	01000074 	movhi	r4,1
     628:	2103c704 	addi	r4,r4,3868
     62c:	297fffcc 	andi	r5,r5,65535
     630:	000258c0 	call	258c <printf>
     634:	00804034 	movhi	r2,256
     638:	10841204 	addi	r2,r2,4168
     63c:	1140002b 	ldhuio	r5,0(r2)
     640:	01000074 	movhi	r4,1
     644:	2103cf04 	addi	r4,r4,3900
     648:	297fffcc 	andi	r5,r5,65535
     64c:	dfc00017 	ldw	ra,0(sp)
     650:	dec00104 	addi	sp,sp,4
     654:	000258c1 	jmpi	258c <printf>

00000658 <cam_set_image_pointer>:
     658:	21003fcc 	andi	r4,r4,255
     65c:	2100201c 	xori	r4,r4,128
     660:	213fe004 	addi	r4,r4,-128
     664:	00800044 	movi	r2,1
     668:	20801226 	beq	r4,r2,6b4 <cam_set_image_pointer+0x5c>
     66c:	11000c0e 	bge	r2,r4,6a0 <cam_set_image_pointer+0x48>
     670:	00800084 	movi	r2,2
     674:	20800626 	beq	r4,r2,690 <cam_set_image_pointer+0x38>
     678:	008000c4 	movi	r2,3
     67c:	2080111e 	bne	r4,r2,6c4 <cam_set_image_pointer+0x6c>
     680:	00804034 	movhi	r2,256
     684:	10841704 	addi	r2,r2,4188
     688:	11400035 	stwio	r5,0(r2)
     68c:	f800283a 	ret
     690:	00804034 	movhi	r2,256
     694:	10841604 	addi	r2,r2,4184
     698:	11400035 	stwio	r5,0(r2)
     69c:	f800283a 	ret
     6a0:	2000091e 	bne	r4,zero,6c8 <cam_set_image_pointer+0x70>
     6a4:	00804034 	movhi	r2,256
     6a8:	10841404 	addi	r2,r2,4176
     6ac:	11400035 	stwio	r5,0(r2)
     6b0:	f800283a 	ret
     6b4:	00804034 	movhi	r2,256
     6b8:	10841504 	addi	r2,r2,4180
     6bc:	11400035 	stwio	r5,0(r2)
     6c0:	f800283a 	ret
     6c4:	f800283a 	ret
     6c8:	f800283a 	ret

000006cc <current_image_valid>:
     6cc:	00804034 	movhi	r2,256
     6d0:	10841304 	addi	r2,r2,4172
     6d4:	1080002b 	ldhuio	r2,0(r2)
     6d8:	1080800c 	andi	r2,r2,512
     6dc:	f800283a 	ret

000006e0 <current_image_pointer>:
     6e0:	00804034 	movhi	r2,256
     6e4:	10841404 	addi	r2,r2,4176
     6e8:	10800037 	ldwio	r2,0(r2)
     6ec:	f800283a 	ret

000006f0 <take_picture_blocking>:
     6f0:	00c04034 	movhi	r3,256
     6f4:	18c41304 	addi	r3,r3,4172
     6f8:	00800204 	movi	r2,8
     6fc:	1880002d 	sthio	r2,0(r3)
     700:	1880002b 	ldhuio	r2,0(r3)
     704:	1080020c 	andi	r2,r2,8
     708:	103ffd1e 	bne	r2,zero,700 <__alt_data_end+0xff000700>
     70c:	f800283a 	ret

00000710 <enable_continues_mode>:
     710:	00804034 	movhi	r2,256
     714:	10841304 	addi	r2,r2,4172
     718:	00c00404 	movi	r3,16
     71c:	10c0002d 	sthio	r3,0(r2)
     720:	f800283a 	ret

00000724 <new_image_available>:
     724:	00c04034 	movhi	r3,256
     728:	18c41304 	addi	r3,r3,4172
     72c:	1880002b 	ldhuio	r2,0(r3)
     730:	1080200c 	andi	r2,r2,128
     734:	1000021e 	bne	r2,zero,740 <new_image_available+0x1c>
     738:	0005883a 	mov	r2,zero
     73c:	f800283a 	ret
     740:	00804004 	movi	r2,256
     744:	1880002d 	sthio	r2,0(r3)
     748:	00800044 	movi	r2,1
     74c:	f800283a 	ret

00000750 <DIPSW_get_value>:
     750:	00804034 	movhi	r2,256
     754:	10842804 	addi	r2,r2,4256
     758:	10800023 	ldbuio	r2,0(r2)
     75c:	0084303a 	nor	r2,zero,r2
     760:	f800283a 	ret

00000764 <conv_grayscale>:
     764:	d0a70d17 	ldw	r2,-25548(gp)
     768:	defff404 	addi	sp,sp,-48
     76c:	dc400315 	stw	r17,12(sp)
     770:	dc000215 	stw	r16,8(sp)
     774:	dfc00b15 	stw	ra,44(sp)
     778:	df000a15 	stw	fp,40(sp)
     77c:	ddc00915 	stw	r23,36(sp)
     780:	dd800815 	stw	r22,32(sp)
     784:	dd400715 	stw	r21,28(sp)
     788:	dd000615 	stw	r20,24(sp)
     78c:	dcc00515 	stw	r19,20(sp)
     790:	dc800415 	stw	r18,16(sp)
     794:	d9800015 	stw	r6,0(sp)
     798:	d1670c15 	stw	r5,-25552(gp)
     79c:	d1a70b15 	stw	r6,-25556(gp)
     7a0:	2821883a 	mov	r16,r5
     7a4:	2023883a 	mov	r17,r4
     7a8:	10000226 	beq	r2,zero,7b4 <conv_grayscale+0x50>
     7ac:	1009883a 	mov	r4,r2
     7b0:	0001d3c0 	call	1d3c <free>
     7b4:	d8c00017 	ldw	r3,0(sp)
     7b8:	80c9383a 	mul	r4,r16,r3
     7bc:	0001d280 	call	1d28 <malloc>
     7c0:	d8c00017 	ldw	r3,0(sp)
     7c4:	d0a70d15 	stw	r2,-25548(gp)
     7c8:	00c0310e 	bge	zero,r3,890 <conv_grayscale+0x12c>
     7cc:	05000074 	movhi	r20,1
     7d0:	8407883a 	add	r3,r16,r16
     7d4:	a505b504 	addi	r20,r20,5844
     7d8:	d8c00115 	stw	r3,4(sp)
     7dc:	802f883a 	mov	r23,r16
     7e0:	0025883a 	mov	r18,zero
     7e4:	070003c4 	movi	fp,15
     7e8:	0400230e 	bge	zero,r16,878 <conv_grayscale+0x114>
     7ec:	bc2bc83a 	sub	r21,r23,r16
     7f0:	882d883a 	mov	r22,r17
     7f4:	00000506 	br	80c <conv_grayscale+0xa8>
     7f8:	10800003 	ldbu	r2,0(r2)
     7fc:	98800025 	stbio	r2,0(r19)
     800:	ad400044 	addi	r21,r21,1
     804:	b5800084 	addi	r22,r22,2
     808:	bd401b26 	beq	r23,r21,878 <conv_grayscale+0x114>
     80c:	b100000b 	ldhu	r4,0(r22)
     810:	01401904 	movi	r5,100
     814:	2006d2fa 	srli	r3,r4,11
     818:	2004d17a 	srli	r2,r4,5
     81c:	200890fa 	slli	r4,r4,3
     820:	180690fa 	slli	r3,r3,3
     824:	1085883a 	add	r2,r2,r2
     828:	1085883a 	add	r2,r2,r2
     82c:	10803fcc 	andi	r2,r2,255
     830:	18c00564 	muli	r3,r3,21
     834:	10801224 	muli	r2,r2,72
     838:	21003fcc 	andi	r4,r4,255
     83c:	210001e4 	muli	r4,r4,7
     840:	10c5883a 	add	r2,r2,r3
     844:	d0e70d17 	ldw	r3,-25548(gp)
     848:	2089883a 	add	r4,r4,r2
     84c:	2004913a 	slli	r2,r4,4
     850:	214eb03a 	or	r7,r4,r5
     854:	1d67883a 	add	r19,r3,r21
     858:	1144b03a 	or	r2,r2,r5
     85c:	1505883a 	add	r2,r2,r20
     860:	e1ffe52e 	bgeu	fp,r7,7f8 <__alt_data_end+0xff0007f8>
     864:	0001b740 	call	1b74 <__divsi3>
     868:	98800025 	stbio	r2,0(r19)
     86c:	ad400044 	addi	r21,r21,1
     870:	b5800084 	addi	r22,r22,2
     874:	bd7fe51e 	bne	r23,r21,80c <__alt_data_end+0xff00080c>
     878:	d8c00117 	ldw	r3,4(sp)
     87c:	94800044 	addi	r18,r18,1
     880:	bc2f883a 	add	r23,r23,r16
     884:	88e3883a 	add	r17,r17,r3
     888:	d8c00017 	ldw	r3,0(sp)
     88c:	1cbfd61e 	bne	r3,r18,7e8 <__alt_data_end+0xff0007e8>
     890:	dfc00b17 	ldw	ra,44(sp)
     894:	df000a17 	ldw	fp,40(sp)
     898:	ddc00917 	ldw	r23,36(sp)
     89c:	dd800817 	ldw	r22,32(sp)
     8a0:	dd400717 	ldw	r21,28(sp)
     8a4:	dd000617 	ldw	r20,24(sp)
     8a8:	dcc00517 	ldw	r19,20(sp)
     8ac:	dc800417 	ldw	r18,16(sp)
     8b0:	dc400317 	ldw	r17,12(sp)
     8b4:	dc000217 	ldw	r16,8(sp)
     8b8:	dec00c04 	addi	sp,sp,48
     8bc:	f800283a 	ret

000008c0 <get_grayscale_width>:
     8c0:	d0a70c17 	ldw	r2,-25552(gp)
     8c4:	f800283a 	ret

000008c8 <get_grayscale_height>:
     8c8:	d0a70b17 	ldw	r2,-25556(gp)
     8cc:	f800283a 	ret

000008d0 <get_grayscale_picture>:
     8d0:	d0a70d17 	ldw	r2,-25548(gp)
     8d4:	f800283a 	ret

000008d8 <i2c_busy_wait>:
     8d8:	00c04034 	movhi	r3,256
     8dc:	18c42704 	addi	r3,r3,4252
     8e0:	18800037 	ldwio	r2,0(r3)
     8e4:	108000cc 	andi	r2,r2,3
     8e8:	103ffd1e 	bne	r2,zero,8e0 <__alt_data_end+0xff0008e0>
     8ec:	f800283a 	ret

000008f0 <i2c_auto_detect>:
     8f0:	01004034 	movhi	r4,256
     8f4:	21042704 	addi	r4,r4,4252
     8f8:	00c04034 	movhi	r3,256
     8fc:	18c42704 	addi	r3,r3,4252
     900:	20800037 	ldwio	r2,0(r4)
     904:	108000cc 	andi	r2,r2,3
     908:	103ffb1e 	bne	r2,zero,8f8 <__alt_data_end+0xff0008f8>
     90c:	00800104 	movi	r2,4
     910:	18800035 	stwio	r2,0(r3)
     914:	18800037 	ldwio	r2,0(r3)
     918:	108000cc 	andi	r2,r2,3
     91c:	103ffd1e 	bne	r2,zero,914 <__alt_data_end+0xff000914>
     920:	00804034 	movhi	r2,256
     924:	defffc04 	addi	sp,sp,-16
     928:	10842504 	addi	r2,r2,4244
     92c:	dfc00315 	stw	ra,12(sp)
     930:	dc800215 	stw	r18,8(sp)
     934:	dc400115 	stw	r17,4(sp)
     938:	dc000015 	stw	r16,0(sp)
     93c:	14800037 	ldwio	r18,0(r2)
     940:	01000074 	movhi	r4,1
     944:	2104b704 	addi	r4,r4,4828
     948:	900b883a 	mov	r5,r18
     94c:	0021883a 	mov	r16,zero
     950:	000258c0 	call	258c <printf>
     954:	04800a0e 	bge	zero,r18,980 <i2c_auto_detect+0x90>
     958:	04404034 	movhi	r17,256
     95c:	8c442404 	addi	r17,r17,4240
     960:	8c000035 	stwio	r16,0(r17)
     964:	89800037 	ldwio	r6,0(r17)
     968:	01000074 	movhi	r4,1
     96c:	800b883a 	mov	r5,r16
     970:	2104c004 	addi	r4,r4,4864
     974:	84000044 	addi	r16,r16,1
     978:	000258c0 	call	258c <printf>
     97c:	943ff81e 	bne	r18,r16,960 <__alt_data_end+0xff000960>
     980:	dfc00317 	ldw	ra,12(sp)
     984:	dc800217 	ldw	r18,8(sp)
     988:	dc400117 	ldw	r17,4(sp)
     98c:	dc000017 	ldw	r16,0(sp)
     990:	dec00404 	addi	sp,sp,16
     994:	f800283a 	ret

00000998 <i2c_short_read>:
     998:	01804034 	movhi	r6,256
     99c:	31842704 	addi	r6,r6,4252
     9a0:	00c04034 	movhi	r3,256
     9a4:	18c42704 	addi	r3,r3,4252
     9a8:	30800037 	ldwio	r2,0(r6)
     9ac:	108000cc 	andi	r2,r2,3
     9b0:	103ffb1e 	bne	r2,zero,9a0 <__alt_data_end+0xff0009a0>
     9b4:	00804034 	movhi	r2,256
     9b8:	21003fcc 	andi	r4,r4,255
     9bc:	10842404 	addi	r2,r2,4240
     9c0:	11000025 	stbio	r4,0(r2)
     9c4:	00804034 	movhi	r2,256
     9c8:	10842504 	addi	r2,r2,4244
     9cc:	1140002d 	sthio	r5,0(r2)
     9d0:	008010c4 	movi	r2,67
     9d4:	18800025 	stbio	r2,0(r3)
     9d8:	180b883a 	mov	r5,r3
     9dc:	00c04034 	movhi	r3,256
     9e0:	18c42704 	addi	r3,r3,4252
     9e4:	28800037 	ldwio	r2,0(r5)
     9e8:	108000cc 	andi	r2,r2,3
     9ec:	103ffb1e 	bne	r2,zero,9dc <__alt_data_end+0xff0009dc>
     9f0:	00804034 	movhi	r2,256
     9f4:	21000044 	addi	r4,r4,1
     9f8:	10842404 	addi	r2,r2,4240
     9fc:	11000025 	stbio	r4,0(r2)
     a00:	00800884 	movi	r2,34
     a04:	18800025 	stbio	r2,0(r3)
     a08:	18800037 	ldwio	r2,0(r3)
     a0c:	108000cc 	andi	r2,r2,3
     a10:	103ffd1e 	bne	r2,zero,a08 <__alt_data_end+0xff000a08>
     a14:	00804034 	movhi	r2,256
     a18:	10842604 	addi	r2,r2,4248
     a1c:	10800037 	ldwio	r2,0(r2)
     a20:	f800283a 	ret

00000a24 <i2c_short_write>:
     a24:	01c04034 	movhi	r7,256
     a28:	39c42704 	addi	r7,r7,4252
     a2c:	00c04034 	movhi	r3,256
     a30:	18c42704 	addi	r3,r3,4252
     a34:	38800037 	ldwio	r2,0(r7)
     a38:	108000cc 	andi	r2,r2,3
     a3c:	103ffb1e 	bne	r2,zero,a2c <__alt_data_end+0xff000a2c>
     a40:	00804034 	movhi	r2,256
     a44:	10842404 	addi	r2,r2,4240
     a48:	11000025 	stbio	r4,0(r2)
     a4c:	00804034 	movhi	r2,256
     a50:	10842504 	addi	r2,r2,4244
     a54:	1140002d 	sthio	r5,0(r2)
     a58:	00804034 	movhi	r2,256
     a5c:	10842604 	addi	r2,r2,4248
     a60:	1180002d 	sthio	r6,0(r2)
     a64:	00801084 	movi	r2,66
     a68:	18800025 	stbio	r2,0(r3)
     a6c:	18800037 	ldwio	r2,0(r3)
     a70:	108000cc 	andi	r2,r2,3
     a74:	103ffd1e 	bne	r2,zero,a6c <__alt_data_end+0xff000a6c>
     a78:	f800283a 	ret

00000a7c <LCD_Write_Command>:
     a7c:	00804034 	movhi	r2,256
     a80:	10841804 	addi	r2,r2,4192
     a84:	1100002d 	sthio	r4,0(r2)
     a88:	01000284 	movi	r4,10
     a8c:	000eccc1 	jmpi	eccc <usleep>

00000a90 <LCD_Write_Data>:
     a90:	00804034 	movhi	r2,256
     a94:	10841904 	addi	r2,r2,4196
     a98:	1100002d 	sthio	r4,0(r2)
     a9c:	01000284 	movi	r4,10
     aa0:	000eccc1 	jmpi	eccc <usleep>

00000aa4 <init_LCD>:
     aa4:	defff704 	addi	sp,sp,-36
     aa8:	00804034 	movhi	r2,256
     aac:	dd400515 	stw	r21,20(sp)
     ab0:	dfc00815 	stw	ra,32(sp)
     ab4:	ddc00715 	stw	r23,28(sp)
     ab8:	dd800615 	stw	r22,24(sp)
     abc:	dd000415 	stw	r20,16(sp)
     ac0:	dcc00315 	stw	r19,12(sp)
     ac4:	dc800215 	stw	r18,8(sp)
     ac8:	dc400115 	stw	r17,4(sp)
     acc:	dc000015 	stw	r16,0(sp)
     ad0:	05400084 	movi	r21,2
     ad4:	10841a04 	addi	r2,r2,4200
     ad8:	1540002d 	sthio	r21,0(r2)
     adc:	04804034 	movhi	r18,256
     ae0:	94841804 	addi	r18,r18,4192
     ae4:	00800a04 	movi	r2,40
     ae8:	9080002d 	sthio	r2,0(r18)
     aec:	04000284 	movi	r16,10
     af0:	8009883a 	mov	r4,r16
     af4:	000eccc0 	call	eccc <usleep>
     af8:	05c00444 	movi	r23,17
     afc:	95c0002d 	sthio	r23,0(r18)
     b00:	8009883a 	mov	r4,r16
     b04:	04404034 	movhi	r17,256
     b08:	8c441904 	addi	r17,r17,4196
     b0c:	000eccc0 	call	eccc <usleep>
     b10:	0027883a 	mov	r19,zero
     b14:	8cc0002d 	sthio	r19,0(r17)
     b18:	8009883a 	mov	r4,r16
     b1c:	000eccc0 	call	eccc <usleep>
     b20:	008032c4 	movi	r2,203
     b24:	9080002d 	sthio	r2,0(r18)
     b28:	8009883a 	mov	r4,r16
     b2c:	000eccc0 	call	eccc <usleep>
     b30:	00800e44 	movi	r2,57
     b34:	8880002d 	sthio	r2,0(r17)
     b38:	8009883a 	mov	r4,r16
     b3c:	000eccc0 	call	eccc <usleep>
     b40:	00800b04 	movi	r2,44
     b44:	8880002d 	sthio	r2,0(r17)
     b48:	8009883a 	mov	r4,r16
     b4c:	000eccc0 	call	eccc <usleep>
     b50:	8cc0002d 	sthio	r19,0(r17)
     b54:	8009883a 	mov	r4,r16
     b58:	000eccc0 	call	eccc <usleep>
     b5c:	00800d04 	movi	r2,52
     b60:	8880002d 	sthio	r2,0(r17)
     b64:	8009883a 	mov	r4,r16
     b68:	000eccc0 	call	eccc <usleep>
     b6c:	8d40002d 	sthio	r21,0(r17)
     b70:	8009883a 	mov	r4,r16
     b74:	000eccc0 	call	eccc <usleep>
     b78:	008033c4 	movi	r2,207
     b7c:	9080002d 	sthio	r2,0(r18)
     b80:	8009883a 	mov	r4,r16
     b84:	000eccc0 	call	eccc <usleep>
     b88:	8cc0002d 	sthio	r19,0(r17)
     b8c:	8009883a 	mov	r4,r16
     b90:	000eccc0 	call	eccc <usleep>
     b94:	05802044 	movi	r22,129
     b98:	8d80002d 	sthio	r22,0(r17)
     b9c:	8009883a 	mov	r4,r16
     ba0:	000eccc0 	call	eccc <usleep>
     ba4:	00800c04 	movi	r2,48
     ba8:	8880002d 	sthio	r2,0(r17)
     bac:	8009883a 	mov	r4,r16
     bb0:	000eccc0 	call	eccc <usleep>
     bb4:	00803a04 	movi	r2,232
     bb8:	9080002d 	sthio	r2,0(r18)
     bbc:	8009883a 	mov	r4,r16
     bc0:	000eccc0 	call	eccc <usleep>
     bc4:	00802144 	movi	r2,133
     bc8:	8880002d 	sthio	r2,0(r17)
     bcc:	8009883a 	mov	r4,r16
     bd0:	000eccc0 	call	eccc <usleep>
     bd4:	05000044 	movi	r20,1
     bd8:	8d00002d 	sthio	r20,0(r17)
     bdc:	8009883a 	mov	r4,r16
     be0:	000eccc0 	call	eccc <usleep>
     be4:	00801e44 	movi	r2,121
     be8:	8880002d 	sthio	r2,0(r17)
     bec:	8009883a 	mov	r4,r16
     bf0:	000eccc0 	call	eccc <usleep>
     bf4:	00803a84 	movi	r2,234
     bf8:	9080002d 	sthio	r2,0(r18)
     bfc:	8009883a 	mov	r4,r16
     c00:	000eccc0 	call	eccc <usleep>
     c04:	8cc0002d 	sthio	r19,0(r17)
     c08:	8009883a 	mov	r4,r16
     c0c:	000eccc0 	call	eccc <usleep>
     c10:	8cc0002d 	sthio	r19,0(r17)
     c14:	8009883a 	mov	r4,r16
     c18:	000eccc0 	call	eccc <usleep>
     c1c:	00801904 	movi	r2,100
     c20:	8880002d 	sthio	r2,0(r17)
     c24:	8009883a 	mov	r4,r16
     c28:	000eccc0 	call	eccc <usleep>
     c2c:	008000c4 	movi	r2,3
     c30:	8880002d 	sthio	r2,0(r17)
     c34:	8009883a 	mov	r4,r16
     c38:	000eccc0 	call	eccc <usleep>
     c3c:	00800484 	movi	r2,18
     c40:	8880002d 	sthio	r2,0(r17)
     c44:	8009883a 	mov	r4,r16
     c48:	000eccc0 	call	eccc <usleep>
     c4c:	8d80002d 	sthio	r22,0(r17)
     c50:	8009883a 	mov	r4,r16
     c54:	000eccc0 	call	eccc <usleep>
     c58:	00803dc4 	movi	r2,247
     c5c:	9080002d 	sthio	r2,0(r18)
     c60:	8009883a 	mov	r4,r16
     c64:	000eccc0 	call	eccc <usleep>
     c68:	00800804 	movi	r2,32
     c6c:	8880002d 	sthio	r2,0(r17)
     c70:	8009883a 	mov	r4,r16
     c74:	000eccc0 	call	eccc <usleep>
     c78:	00803004 	movi	r2,192
     c7c:	9080002d 	sthio	r2,0(r18)
     c80:	8009883a 	mov	r4,r16
     c84:	000eccc0 	call	eccc <usleep>
     c88:	05800984 	movi	r22,38
     c8c:	8d80002d 	sthio	r22,0(r17)
     c90:	8009883a 	mov	r4,r16
     c94:	000eccc0 	call	eccc <usleep>
     c98:	00800104 	movi	r2,4
     c9c:	8880002d 	sthio	r2,0(r17)
     ca0:	8009883a 	mov	r4,r16
     ca4:	000eccc0 	call	eccc <usleep>
     ca8:	00803044 	movi	r2,193
     cac:	9080002d 	sthio	r2,0(r18)
     cb0:	8009883a 	mov	r4,r16
     cb4:	000eccc0 	call	eccc <usleep>
     cb8:	8dc0002d 	sthio	r23,0(r17)
     cbc:	8009883a 	mov	r4,r16
     cc0:	000eccc0 	call	eccc <usleep>
     cc4:	00803144 	movi	r2,197
     cc8:	9080002d 	sthio	r2,0(r18)
     ccc:	8009883a 	mov	r4,r16
     cd0:	000eccc0 	call	eccc <usleep>
     cd4:	00800d44 	movi	r2,53
     cd8:	8880002d 	sthio	r2,0(r17)
     cdc:	8009883a 	mov	r4,r16
     ce0:	000eccc0 	call	eccc <usleep>
     ce4:	00800f84 	movi	r2,62
     ce8:	8880002d 	sthio	r2,0(r17)
     cec:	8009883a 	mov	r4,r16
     cf0:	000eccc0 	call	eccc <usleep>
     cf4:	008031c4 	movi	r2,199
     cf8:	9080002d 	sthio	r2,0(r18)
     cfc:	8009883a 	mov	r4,r16
     d00:	000eccc0 	call	eccc <usleep>
     d04:	00802f84 	movi	r2,190
     d08:	8880002d 	sthio	r2,0(r17)
     d0c:	8009883a 	mov	r4,r16
     d10:	000eccc0 	call	eccc <usleep>
     d14:	00802c44 	movi	r2,177
     d18:	9080002d 	sthio	r2,0(r18)
     d1c:	8009883a 	mov	r4,r16
     d20:	000eccc0 	call	eccc <usleep>
     d24:	8cc0002d 	sthio	r19,0(r17)
     d28:	8009883a 	mov	r4,r16
     d2c:	000eccc0 	call	eccc <usleep>
     d30:	00800404 	movi	r2,16
     d34:	8880002d 	sthio	r2,0(r17)
     d38:	8009883a 	mov	r4,r16
     d3c:	000eccc0 	call	eccc <usleep>
     d40:	00800e84 	movi	r2,58
     d44:	9080002d 	sthio	r2,0(r18)
     d48:	8009883a 	mov	r4,r16
     d4c:	000eccc0 	call	eccc <usleep>
     d50:	00801544 	movi	r2,85
     d54:	8880002d 	sthio	r2,0(r17)
     d58:	8009883a 	mov	r4,r16
     d5c:	000eccc0 	call	eccc <usleep>
     d60:	00802d84 	movi	r2,182
     d64:	9080002d 	sthio	r2,0(r18)
     d68:	8009883a 	mov	r4,r16
     d6c:	000eccc0 	call	eccc <usleep>
     d70:	8c00002d 	sthio	r16,0(r17)
     d74:	8009883a 	mov	r4,r16
     d78:	000eccc0 	call	eccc <usleep>
     d7c:	00802884 	movi	r2,162
     d80:	8880002d 	sthio	r2,0(r17)
     d84:	8009883a 	mov	r4,r16
     d88:	000eccc0 	call	eccc <usleep>
     d8c:	00803c84 	movi	r2,242
     d90:	9080002d 	sthio	r2,0(r18)
     d94:	8009883a 	mov	r4,r16
     d98:	000eccc0 	call	eccc <usleep>
     d9c:	8d40002d 	sthio	r21,0(r17)
     da0:	8009883a 	mov	r4,r16
     da4:	000eccc0 	call	eccc <usleep>
     da8:	9580002d 	sthio	r22,0(r18)
     dac:	8009883a 	mov	r4,r16
     db0:	000eccc0 	call	eccc <usleep>
     db4:	8d00002d 	sthio	r20,0(r17)
     db8:	8009883a 	mov	r4,r16
     dbc:	000eccc0 	call	eccc <usleep>
     dc0:	00800d84 	movi	r2,54
     dc4:	9080002d 	sthio	r2,0(r18)
     dc8:	8009883a 	mov	r4,r16
     dcc:	000eccc0 	call	eccc <usleep>
     dd0:	8cc0002d 	sthio	r19,0(r17)
     dd4:	8009883a 	mov	r4,r16
     dd8:	000eccc0 	call	eccc <usleep>
     ddc:	00800a84 	movi	r2,42
     de0:	9080002d 	sthio	r2,0(r18)
     de4:	8009883a 	mov	r4,r16
     de8:	000eccc0 	call	eccc <usleep>
     dec:	8cc0002d 	sthio	r19,0(r17)
     df0:	8009883a 	mov	r4,r16
     df4:	000eccc0 	call	eccc <usleep>
     df8:	8cc0002d 	sthio	r19,0(r17)
     dfc:	8009883a 	mov	r4,r16
     e00:	000eccc0 	call	eccc <usleep>
     e04:	8cc0002d 	sthio	r19,0(r17)
     e08:	8009883a 	mov	r4,r16
     e0c:	000eccc0 	call	eccc <usleep>
     e10:	00803bc4 	movi	r2,239
     e14:	8880002d 	sthio	r2,0(r17)
     e18:	8009883a 	mov	r4,r16
     e1c:	000eccc0 	call	eccc <usleep>
     e20:	00800ac4 	movi	r2,43
     e24:	9080002d 	sthio	r2,0(r18)
     e28:	8009883a 	mov	r4,r16
     e2c:	000eccc0 	call	eccc <usleep>
     e30:	8cc0002d 	sthio	r19,0(r17)
     e34:	8009883a 	mov	r4,r16
     e38:	000eccc0 	call	eccc <usleep>
     e3c:	8cc0002d 	sthio	r19,0(r17)
     e40:	8009883a 	mov	r4,r16
     e44:	000eccc0 	call	eccc <usleep>
     e48:	8d00002d 	sthio	r20,0(r17)
     e4c:	8009883a 	mov	r4,r16
     e50:	000eccc0 	call	eccc <usleep>
     e54:	00800fc4 	movi	r2,63
     e58:	8880002d 	sthio	r2,0(r17)
     e5c:	8009883a 	mov	r4,r16
     e60:	000eccc0 	call	eccc <usleep>
     e64:	00c04034 	movhi	r3,256
     e68:	00803c04 	movi	r2,240
     e6c:	18c41d04 	addi	r3,r3,4212
     e70:	18800035 	stwio	r2,0(r3)
     e74:	d0a70e8d 	sth	r2,-25542(gp)
     e78:	00805004 	movi	r2,320
     e7c:	d0a70e0d 	sth	r2,-25544(gp)
     e80:	00800a44 	movi	r2,41
     e84:	9080002d 	sthio	r2,0(r18)
     e88:	8009883a 	mov	r4,r16
     e8c:	dfc00817 	ldw	ra,32(sp)
     e90:	ddc00717 	ldw	r23,28(sp)
     e94:	dd800617 	ldw	r22,24(sp)
     e98:	dd400517 	ldw	r21,20(sp)
     e9c:	dd000417 	ldw	r20,16(sp)
     ea0:	dcc00317 	ldw	r19,12(sp)
     ea4:	dc800217 	ldw	r18,8(sp)
     ea8:	dc400117 	ldw	r17,4(sp)
     eac:	dc000017 	ldw	r16,0(sp)
     eb0:	dec00904 	addi	sp,sp,36
     eb4:	000eccc1 	jmpi	eccc <usleep>

00000eb8 <transfer_LCD_no_dma>:
     eb8:	defffb04 	addi	sp,sp,-20
     ebc:	00804034 	movhi	r2,256
     ec0:	dc000015 	stw	r16,0(sp)
     ec4:	dfc00415 	stw	ra,16(sp)
     ec8:	dcc00315 	stw	r19,12(sp)
     ecc:	dc800215 	stw	r18,8(sp)
     ed0:	dc400115 	stw	r17,4(sp)
     ed4:	2021883a 	mov	r16,r4
     ed8:	10841e04 	addi	r2,r2,4216
     edc:	11400035 	stwio	r5,0(r2)
     ee0:	00804034 	movhi	r2,256
     ee4:	10841804 	addi	r2,r2,4192
     ee8:	00c00b04 	movi	r3,44
     eec:	10c0002d 	sthio	r3,0(r2)
     ef0:	29a5383a 	mul	r18,r5,r6
     ef4:	01000284 	movi	r4,10
     ef8:	000eccc0 	call	eccc <usleep>
     efc:	90000a26 	beq	r18,zero,f28 <transfer_LCD_no_dma+0x70>
     f00:	04c04034 	movhi	r19,256
     f04:	9cc41904 	addi	r19,r19,4196
     f08:	0023883a 	mov	r17,zero
     f0c:	8080000b 	ldhu	r2,0(r16)
     f10:	9880002d 	sthio	r2,0(r19)
     f14:	01000284 	movi	r4,10
     f18:	8c400044 	addi	r17,r17,1
     f1c:	000eccc0 	call	eccc <usleep>
     f20:	84000084 	addi	r16,r16,2
     f24:	8cbff91e 	bne	r17,r18,f0c <__alt_data_end+0xff000f0c>
     f28:	dfc00417 	ldw	ra,16(sp)
     f2c:	dcc00317 	ldw	r19,12(sp)
     f30:	dc800217 	ldw	r18,8(sp)
     f34:	dc400117 	ldw	r17,4(sp)
     f38:	dc000017 	ldw	r16,0(sp)
     f3c:	dec00504 	addi	sp,sp,20
     f40:	f800283a 	ret

00000f44 <transfer_LCD_with_dma>:
     f44:	d0a70e0b 	ldhu	r2,-25544(gp)
     f48:	3080010e 	bge	r6,r2,f50 <transfer_LCD_with_dma+0xc>
     f4c:	3005883a 	mov	r2,r6
     f50:	d0e70e8b 	ldhu	r3,-25542(gp)
     f54:	28c0010e 	bge	r5,r3,f5c <transfer_LCD_with_dma+0x18>
     f58:	2807883a 	mov	r3,r5
     f5c:	01804034 	movhi	r6,256
     f60:	31841e04 	addi	r6,r6,4216
     f64:	31400035 	stwio	r5,0(r6)
     f68:	01404034 	movhi	r5,256
     f6c:	29441b04 	addi	r5,r5,4204
     f70:	29000035 	stwio	r4,0(r5)
     f74:	18ffffcc 	andi	r3,r3,65535
     f78:	10bfffcc 	andi	r2,r2,65535
     f7c:	1885383a 	mul	r2,r3,r2
     f80:	00c04034 	movhi	r3,256
     f84:	18c41c04 	addi	r3,r3,4208
     f88:	18800035 	stwio	r2,0(r3)
     f8c:	39c03fcc 	andi	r7,r7,255
     f90:	39c0201c 	xori	r7,r7,128
     f94:	00804034 	movhi	r2,256
     f98:	39ffe004 	addi	r7,r7,-128
     f9c:	10841a04 	addi	r2,r2,4200
     fa0:	38000326 	beq	r7,zero,fb0 <transfer_LCD_with_dma+0x6c>
     fa4:	00c04404 	movi	r3,272
     fa8:	10c0002d 	sthio	r3,0(r2)
     fac:	f800283a 	ret
     fb0:	00c04004 	movi	r3,256
     fb4:	10c0002d 	sthio	r3,0(r2)
     fb8:	f800283a 	ret

00000fbc <main>:
     fbc:	defff604 	addi	sp,sp,-40
     fc0:	dfc00915 	stw	ra,36(sp)
     fc4:	dd400515 	stw	r21,20(sp)
     fc8:	dd000415 	stw	r20,16(sp)
     fcc:	dcc00315 	stw	r19,12(sp)
     fd0:	dc800215 	stw	r18,8(sp)
     fd4:	dc400115 	stw	r17,4(sp)
     fd8:	dc000015 	stw	r16,0(sp)
     fdc:	df000815 	stw	fp,32(sp)
     fe0:	ddc00715 	stw	r23,28(sp)
     fe4:	dd800615 	stw	r22,24(sp)
     fe8:	0000aa40 	call	aa4 <init_LCD>
     fec:	00002800 	call	280 <init_camera>
     ff0:	01000604 	movi	r4,24
     ff4:	0001b640 	call	1b64 <vga_set_swap>
     ff8:	000fa740 	call	fa74 <alt_timestamp_start>
     ffc:	01000074 	movhi	r4,1
    1000:	2104c904 	addi	r4,r4,4900
    1004:	00026880 	call	2688 <puts>
    1008:	00005e00 	call	5e0 <cam_get_profiling>
    100c:	00005980 	call	598 <cam_get_xsize>
    1010:	1021883a 	mov	r16,r2
    1014:	00005bc0 	call	5bc <cam_get_ysize>
    1018:	10bfffcc 	andi	r2,r2,65535
    101c:	813fffcc 	andi	r4,r16,65535
    1020:	2089383a 	mul	r4,r4,r2
    1024:	04800044 	movi	r18,1
    1028:	04e04414 	movui	r19,33040
    102c:	0001d280 	call	1d28 <malloc>
    1030:	102b883a 	mov	r21,r2
    1034:	00005980 	call	598 <cam_get_xsize>
    1038:	1021883a 	mov	r16,r2
    103c:	00005bc0 	call	5bc <cam_get_ysize>
    1040:	10bfffcc 	andi	r2,r2,65535
    1044:	813fffcc 	andi	r4,r16,65535
    1048:	2089383a 	mul	r4,r4,r2
    104c:	0001d280 	call	1d28 <malloc>
    1050:	1029883a 	mov	r20,r2
    1054:	00005980 	call	598 <cam_get_xsize>
    1058:	1021883a 	mov	r16,r2
    105c:	00005bc0 	call	5bc <cam_get_ysize>
    1060:	10bfffcc 	andi	r2,r2,65535
    1064:	813fffcc 	andi	r4,r16,65535
    1068:	2089383a 	mul	r4,r4,r2
    106c:	0001d280 	call	1d28 <malloc>
    1070:	1023883a 	mov	r17,r2
    1074:	00005980 	call	598 <cam_get_xsize>
    1078:	1021883a 	mov	r16,r2
    107c:	00005bc0 	call	5bc <cam_get_ysize>
    1080:	10bfffcc 	andi	r2,r2,65535
    1084:	813fffcc 	andi	r4,r16,65535
    1088:	2089383a 	mul	r4,r4,r2
    108c:	0001d280 	call	1d28 <malloc>
    1090:	a80b883a 	mov	r5,r21
    1094:	0009883a 	mov	r4,zero
    1098:	1021883a 	mov	r16,r2
    109c:	00006580 	call	658 <cam_set_image_pointer>
    10a0:	a00b883a 	mov	r5,r20
    10a4:	9009883a 	mov	r4,r18
    10a8:	00006580 	call	658 <cam_set_image_pointer>
    10ac:	880b883a 	mov	r5,r17
    10b0:	01000084 	movi	r4,2
    10b4:	00006580 	call	658 <cam_set_image_pointer>
    10b8:	800b883a 	mov	r5,r16
    10bc:	010000c4 	movi	r4,3
    10c0:	00006580 	call	658 <cam_set_image_pointer>
    10c4:	00007100 	call	710 <enable_continues_mode>
    10c8:	00005980 	call	598 <cam_get_xsize>
    10cc:	1021883a 	mov	r16,r2
    10d0:	00005bc0 	call	5bc <cam_get_ysize>
    10d4:	813fffcc 	andi	r4,r16,65535
    10d8:	2488d83a 	srl	r4,r4,r18
    10dc:	117fffcc 	andi	r5,r2,65535
    10e0:	00014100 	call	1410 <init_sobel_arrays>
    10e4:	00007240 	call	724 <new_image_available>
    10e8:	10803fcc 	andi	r2,r2,255
    10ec:	1080201c 	xori	r2,r2,128
    10f0:	10bfe004 	addi	r2,r2,-128
    10f4:	103ffb26 	beq	r2,zero,10e4 <__alt_data_end+0xff0010e4>
    10f8:	00006cc0 	call	6cc <current_image_valid>
    10fc:	10bfffcc 	andi	r2,r2,65535
    1100:	10a0001c 	xori	r2,r2,32768
    1104:	10a00004 	addi	r2,r2,-32768
    1108:	103ff626 	beq	r2,zero,10e4 <__alt_data_end+0xff0010e4>
    110c:	00007500 	call	750 <DIPSW_get_value>
    1110:	1021883a 	mov	r16,r2
    1114:	00006e00 	call	6e0 <current_image_pointer>
    1118:	1023883a 	mov	r17,r2
    111c:	808001cc 	andi	r2,r16,7
    1120:	14809a26 	beq	r2,r18,138c <main+0x3d0>
    1124:	10008726 	beq	r2,zero,1344 <main+0x388>
    1128:	00c00084 	movi	r3,2
    112c:	10c07926 	beq	r2,r3,1314 <main+0x358>
    1130:	00c000c4 	movi	r3,3
    1134:	10c0221e 	bne	r2,r3,11c0 <main+0x204>
    1138:	00005980 	call	598 <cam_get_xsize>
    113c:	1029883a 	mov	r20,r2
    1140:	00005bc0 	call	5bc <cam_get_ysize>
    1144:	a17fffcc 	andi	r5,r20,65535
    1148:	280ad07a 	srli	r5,r5,1
    114c:	8809883a 	mov	r4,r17
    1150:	11bfffcc 	andi	r6,r2,65535
    1154:	00007640 	call	764 <conv_grayscale>
    1158:	00008d00 	call	8d0 <get_grayscale_picture>
    115c:	1009883a 	mov	r4,r2
    1160:	1023883a 	mov	r17,r2
    1164:	00015b00 	call	15b0 <sobel_x>
    1168:	8809883a 	mov	r4,r17
    116c:	00019280 	call	1928 <sobel_y_with_rgb>
    1170:	0001b440 	call	1b44 <GetSobel_rgb>
    1174:	1029883a 	mov	r20,r2
    1178:	00005980 	call	598 <cam_get_xsize>
    117c:	1023883a 	mov	r17,r2
    1180:	00005bc0 	call	5bc <cam_get_ysize>
    1184:	897fffcc 	andi	r5,r17,65535
    1188:	280ad07a 	srli	r5,r5,1
    118c:	84003fcc 	andi	r16,r16,255
    1190:	8400201c 	xori	r16,r16,128
    1194:	000f883a 	mov	r7,zero
    1198:	11bfffcc 	andi	r6,r2,65535
    119c:	a4c9883a 	add	r4,r20,r19
    11a0:	843fe004 	addi	r16,r16,-128
    11a4:	0000f440 	call	f44 <transfer_LCD_with_dma>
    11a8:	803fce0e 	bge	r16,zero,10e4 <__alt_data_end+0xff0010e4>
    11ac:	01000204 	movi	r4,8
    11b0:	0001b640 	call	1b64 <vga_set_swap>
    11b4:	a009883a 	mov	r4,r20
    11b8:	0001b540 	call	1b54 <vga_set_pointer>
    11bc:	003fc906 	br	10e4 <__alt_data_end+0xff0010e4>
    11c0:	000faec0 	call	faec <alt_timestamp>
    11c4:	102d883a 	mov	r22,r2
    11c8:	00005980 	call	598 <cam_get_xsize>
    11cc:	1029883a 	mov	r20,r2
    11d0:	00005bc0 	call	5bc <cam_get_ysize>
    11d4:	a17fffcc 	andi	r5,r20,65535
    11d8:	280ad07a 	srli	r5,r5,1
    11dc:	11bfffcc 	andi	r6,r2,65535
    11e0:	8809883a 	mov	r4,r17
    11e4:	00007640 	call	764 <conv_grayscale>
    11e8:	00008d00 	call	8d0 <get_grayscale_picture>
    11ec:	102b883a 	mov	r21,r2
    11f0:	000faec0 	call	faec <alt_timestamp>
    11f4:	15adc83a 	sub	r22,r2,r22
    11f8:	b009883a 	mov	r4,r22
    11fc:	014000f4 	movhi	r5,3
    1200:	0001c6c0 	call	1c6c <__udivsi3>
    1204:	01000074 	movhi	r4,1
    1208:	100b883a 	mov	r5,r2
    120c:	2104ce04 	addi	r4,r4,4920
    1210:	000258c0 	call	258c <printf>
    1214:	000faec0 	call	faec <alt_timestamp>
    1218:	a809883a 	mov	r4,r21
    121c:	1029883a 	mov	r20,r2
    1220:	00015b00 	call	15b0 <sobel_x>
    1224:	000faec0 	call	faec <alt_timestamp>
    1228:	1529c83a 	sub	r20,r2,r20
    122c:	a009883a 	mov	r4,r20
    1230:	014000f4 	movhi	r5,3
    1234:	0001c6c0 	call	1c6c <__udivsi3>
    1238:	01000074 	movhi	r4,1
    123c:	100b883a 	mov	r5,r2
    1240:	2104d604 	addi	r4,r4,4952
    1244:	000258c0 	call	258c <printf>
    1248:	000faec0 	call	faec <alt_timestamp>
    124c:	a809883a 	mov	r4,r21
    1250:	1023883a 	mov	r17,r2
    1254:	000182c0 	call	182c <sobel_y>
    1258:	000faec0 	call	faec <alt_timestamp>
    125c:	1463c83a 	sub	r17,r2,r17
    1260:	8809883a 	mov	r4,r17
    1264:	014000f4 	movhi	r5,3
    1268:	0001c6c0 	call	1c6c <__udivsi3>
    126c:	01000074 	movhi	r4,1
    1270:	100b883a 	mov	r5,r2
    1274:	2104dd04 	addi	r4,r4,4980
    1278:	000258c0 	call	258c <printf>
    127c:	000faec0 	call	faec <alt_timestamp>
    1280:	01002004 	movi	r4,128
    1284:	102b883a 	mov	r21,r2
    1288:	0001a900 	call	1a90 <sobel_threshold>
    128c:	000faec0 	call	faec <alt_timestamp>
    1290:	156bc83a 	sub	r21,r2,r21
    1294:	a809883a 	mov	r4,r21
    1298:	014000f4 	movhi	r5,3
    129c:	0001c6c0 	call	1c6c <__udivsi3>
    12a0:	01000074 	movhi	r4,1
    12a4:	100b883a 	mov	r5,r2
    12a8:	2104e404 	addi	r4,r4,5008
    12ac:	000258c0 	call	258c <printf>
    12b0:	0001b4c0 	call	1b4c <GetSobelResult>
    12b4:	102f883a 	mov	r23,r2
    12b8:	00005980 	call	598 <cam_get_xsize>
    12bc:	1039883a 	mov	fp,r2
    12c0:	00005bc0 	call	5bc <cam_get_ysize>
    12c4:	e17fffcc 	andi	r5,fp,65535
    12c8:	280ad07a 	srli	r5,r5,1
    12cc:	84003fcc 	andi	r16,r16,255
    12d0:	8400201c 	xori	r16,r16,128
    12d4:	01c00044 	movi	r7,1
    12d8:	11bfffcc 	andi	r6,r2,65535
    12dc:	b9102204 	addi	r4,r23,16520
    12e0:	843fe004 	addi	r16,r16,-128
    12e4:	0000f440 	call	f44 <transfer_LCD_with_dma>
    12e8:	80004416 	blt	r16,zero,13fc <main+0x440>
    12ec:	b509883a 	add	r4,r22,r20
    12f0:	2449883a 	add	r4,r4,r17
    12f4:	2549883a 	add	r4,r4,r21
    12f8:	014000f4 	movhi	r5,3
    12fc:	0001c6c0 	call	1c6c <__udivsi3>
    1300:	01000074 	movhi	r4,1
    1304:	100b883a 	mov	r5,r2
    1308:	2104ed04 	addi	r4,r4,5044
    130c:	000258c0 	call	258c <printf>
    1310:	003f7406 	br	10e4 <__alt_data_end+0xff0010e4>
    1314:	00005980 	call	598 <cam_get_xsize>
    1318:	1029883a 	mov	r20,r2
    131c:	00005bc0 	call	5bc <cam_get_ysize>
    1320:	a17fffcc 	andi	r5,r20,65535
    1324:	280ad07a 	srli	r5,r5,1
    1328:	8809883a 	mov	r4,r17
    132c:	11bfffcc 	andi	r6,r2,65535
    1330:	00007640 	call	764 <conv_grayscale>
    1334:	00008d00 	call	8d0 <get_grayscale_picture>
    1338:	1009883a 	mov	r4,r2
    133c:	00016b00 	call	16b0 <sobel_x_with_rgb>
    1340:	003f8b06 	br	1170 <__alt_data_end+0xff001170>
    1344:	00005980 	call	598 <cam_get_xsize>
    1348:	1029883a 	mov	r20,r2
    134c:	00005bc0 	call	5bc <cam_get_ysize>
    1350:	a17fffcc 	andi	r5,r20,65535
    1354:	280ad07a 	srli	r5,r5,1
    1358:	84003fcc 	andi	r16,r16,255
    135c:	8400201c 	xori	r16,r16,128
    1360:	000f883a 	mov	r7,zero
    1364:	11bfffcc 	andi	r6,r2,65535
    1368:	8cc9883a 	add	r4,r17,r19
    136c:	843fe004 	addi	r16,r16,-128
    1370:	0000f440 	call	f44 <transfer_LCD_with_dma>
    1374:	803f5b0e 	bge	r16,zero,10e4 <__alt_data_end+0xff0010e4>
    1378:	01000204 	movi	r4,8
    137c:	0001b640 	call	1b64 <vga_set_swap>
    1380:	8809883a 	mov	r4,r17
    1384:	0001b540 	call	1b54 <vga_set_pointer>
    1388:	003f5606 	br	10e4 <__alt_data_end+0xff0010e4>
    138c:	00005980 	call	598 <cam_get_xsize>
    1390:	1029883a 	mov	r20,r2
    1394:	00005bc0 	call	5bc <cam_get_ysize>
    1398:	a17fffcc 	andi	r5,r20,65535
    139c:	280ad07a 	srli	r5,r5,1
    13a0:	8809883a 	mov	r4,r17
    13a4:	11bfffcc 	andi	r6,r2,65535
    13a8:	00007640 	call	764 <conv_grayscale>
    13ac:	00008d00 	call	8d0 <get_grayscale_picture>
    13b0:	1029883a 	mov	r20,r2
    13b4:	00005980 	call	598 <cam_get_xsize>
    13b8:	1023883a 	mov	r17,r2
    13bc:	00005bc0 	call	5bc <cam_get_ysize>
    13c0:	897fffcc 	andi	r5,r17,65535
    13c4:	280ad07a 	srli	r5,r5,1
    13c8:	84003fcc 	andi	r16,r16,255
    13cc:	8400201c 	xori	r16,r16,128
    13d0:	900f883a 	mov	r7,r18
    13d4:	11bfffcc 	andi	r6,r2,65535
    13d8:	a1102204 	addi	r4,r20,16520
    13dc:	843fe004 	addi	r16,r16,-128
    13e0:	0000f440 	call	f44 <transfer_LCD_with_dma>
    13e4:	803f3f0e 	bge	r16,zero,10e4 <__alt_data_end+0xff0010e4>
    13e8:	01000604 	movi	r4,24
    13ec:	0001b640 	call	1b64 <vga_set_swap>
    13f0:	a009883a 	mov	r4,r20
    13f4:	0001b540 	call	1b54 <vga_set_pointer>
    13f8:	003f3a06 	br	10e4 <__alt_data_end+0xff0010e4>
    13fc:	01000604 	movi	r4,24
    1400:	0001b640 	call	1b64 <vga_set_swap>
    1404:	b809883a 	mov	r4,r23
    1408:	0001b540 	call	1b54 <vga_set_pointer>
    140c:	003fb706 	br	12ec <__alt_data_end+0xff0012ec>

00001410 <init_sobel_arrays>:
    1410:	d0a71217 	ldw	r2,-25528(gp)
    1414:	defffd04 	addi	sp,sp,-12
    1418:	dc400115 	stw	r17,4(sp)
    141c:	dc000015 	stw	r16,0(sp)
    1420:	dfc00215 	stw	ra,8(sp)
    1424:	d1270f15 	stw	r4,-25540(gp)
    1428:	d1671115 	stw	r5,-25532(gp)
    142c:	2023883a 	mov	r17,r4
    1430:	2821883a 	mov	r16,r5
    1434:	10000226 	beq	r2,zero,1440 <init_sobel_arrays+0x30>
    1438:	1009883a 	mov	r4,r2
    143c:	0001d3c0 	call	1d3c <free>
    1440:	8c21383a 	mul	r16,r17,r16
    1444:	8423883a 	add	r17,r16,r16
    1448:	8809883a 	mov	r4,r17
    144c:	0001d280 	call	1d28 <malloc>
    1450:	d1271317 	ldw	r4,-25524(gp)
    1454:	d0a71215 	stw	r2,-25528(gp)
    1458:	20000126 	beq	r4,zero,1460 <init_sobel_arrays+0x50>
    145c:	0001d3c0 	call	1d3c <free>
    1460:	8809883a 	mov	r4,r17
    1464:	0001d280 	call	1d28 <malloc>
    1468:	d1271017 	ldw	r4,-25536(gp)
    146c:	d0a71315 	stw	r2,-25524(gp)
    1470:	20000126 	beq	r4,zero,1478 <init_sobel_arrays+0x68>
    1474:	0001d3c0 	call	1d3c <free>
    1478:	8009883a 	mov	r4,r16
    147c:	0001d280 	call	1d28 <malloc>
    1480:	d1271417 	ldw	r4,-25520(gp)
    1484:	d0a71015 	stw	r2,-25536(gp)
    1488:	20000126 	beq	r4,zero,1490 <init_sobel_arrays+0x80>
    148c:	0001d3c0 	call	1d3c <free>
    1490:	8809883a 	mov	r4,r17
    1494:	0001d280 	call	1d28 <malloc>
    1498:	d0a71415 	stw	r2,-25520(gp)
    149c:	0005883a 	mov	r2,zero
    14a0:	04000f0e 	bge	zero,r16,14e0 <init_sobel_arrays+0xd0>
    14a4:	d2271217 	ldw	r8,-25528(gp)
    14a8:	d1e71317 	ldw	r7,-25524(gp)
    14ac:	d1a71017 	ldw	r6,-25536(gp)
    14b0:	1087883a 	add	r3,r2,r2
    14b4:	40d1883a 	add	r8,r8,r3
    14b8:	4000000d 	sth	zero,0(r8)
    14bc:	38cf883a 	add	r7,r7,r3
    14c0:	308d883a 	add	r6,r6,r2
    14c4:	3800000d 	sth	zero,0(r7)
    14c8:	30000005 	stb	zero,0(r6)
    14cc:	d1a71417 	ldw	r6,-25520(gp)
    14d0:	10800044 	addi	r2,r2,1
    14d4:	30c7883a 	add	r3,r6,r3
    14d8:	1800000d 	sth	zero,0(r3)
    14dc:	80bff11e 	bne	r16,r2,14a4 <__alt_data_end+0xff0014a4>
    14e0:	dfc00217 	ldw	ra,8(sp)
    14e4:	dc400117 	ldw	r17,4(sp)
    14e8:	dc000017 	ldw	r16,0(sp)
    14ec:	dec00304 	addi	sp,sp,12
    14f0:	f800283a 	ret

000014f4 <sobel_mac>:
    14f4:	da800017 	ldw	r10,0(sp)
    14f8:	31bfffc4 	addi	r6,r6,-1
    14fc:	38c00047 	ldb	r3,1(r7)
    1500:	328d383a 	mul	r6,r6,r10
    1504:	3b8000c7 	ldb	r14,3(r7)
    1508:	3a000107 	ldb	r8,4(r7)
    150c:	5185883a 	add	r2,r10,r6
    1510:	2893883a 	add	r9,r5,r2
    1514:	314d883a 	add	r6,r6,r5
    1518:	218d883a 	add	r6,r4,r6
    151c:	2253883a 	add	r9,r4,r9
    1520:	33000003 	ldbu	r12,0(r6)
    1524:	5095883a 	add	r10,r10,r2
    1528:	48bfffc3 	ldbu	r2,-1(r9)
    152c:	5155883a 	add	r10,r10,r5
    1530:	4ac00003 	ldbu	r11,0(r9)
    1534:	229b883a 	add	r13,r4,r10
    1538:	49000043 	ldbu	r4,1(r9)
    153c:	3a800147 	ldb	r10,5(r7)
    1540:	139d383a 	mul	r14,r2,r14
    1544:	60d9383a 	mul	r12,r12,r3
    1548:	68800003 	ldbu	r2,0(r13)
    154c:	38c001c7 	ldb	r3,7(r7)
    1550:	5a17383a 	mul	r11,r11,r8
    1554:	33ffffc3 	ldbu	r15,-1(r6)
    1558:	3a000007 	ldb	r8,0(r7)
    155c:	2295383a 	mul	r10,r4,r10
    1560:	31000043 	ldbu	r4,1(r6)
    1564:	39800087 	ldb	r6,2(r7)
    1568:	730b883a 	add	r5,r14,r12
    156c:	10d3383a 	mul	r9,r2,r3
    1570:	6b3fffc3 	ldbu	r12,-1(r13)
    1574:	38c00187 	ldb	r3,6(r7)
    1578:	2acb883a 	add	r5,r5,r11
    157c:	7a11383a 	mul	r8,r15,r8
    1580:	6ac00043 	ldbu	r11,1(r13)
    1584:	39c00207 	ldb	r7,8(r7)
    1588:	2a8b883a 	add	r5,r5,r10
    158c:	2189383a 	mul	r4,r4,r6
    1590:	2a45883a 	add	r2,r5,r9
    1594:	60c7383a 	mul	r3,r12,r3
    1598:	1205883a 	add	r2,r2,r8
    159c:	59cb383a 	mul	r5,r11,r7
    15a0:	1105883a 	add	r2,r2,r4
    15a4:	10c5883a 	add	r2,r2,r3
    15a8:	1145883a 	add	r2,r2,r5
    15ac:	f800283a 	ret

000015b0 <sobel_x>:
    15b0:	defff904 	addi	sp,sp,-28
    15b4:	dc400115 	stw	r17,4(sp)
    15b8:	d4671117 	ldw	r17,-25532(gp)
    15bc:	dc000015 	stw	r16,0(sp)
    15c0:	dfc00615 	stw	ra,24(sp)
    15c4:	dd400515 	stw	r21,20(sp)
    15c8:	dd000415 	stw	r20,16(sp)
    15cc:	dcc00315 	stw	r19,12(sp)
    15d0:	dc800215 	stw	r18,8(sp)
    15d4:	04000084 	movi	r16,2
    15d8:	84402c0e 	bge	r16,r17,168c <sobel_x+0xdc>
    15dc:	d3670f17 	ldw	r13,-25540(gp)
    15e0:	d3a71217 	ldw	r14,-25528(gp)
    15e4:	8c7fffc4 	addi	r17,r17,-1
    15e8:	6b65883a 	add	r18,r13,r13
    15ec:	9405883a 	add	r2,r18,r16
    15f0:	2499883a 	add	r12,r4,r18
    15f4:	709d883a 	add	r14,r14,r2
    15f8:	03c00044 	movi	r15,1
    15fc:	6c27883a 	add	r19,r13,r16
    1600:	693f883a 	add	ra,r13,r4
    1604:	83401c0e 	bge	r16,r13,1678 <sobel_x+0xc8>
    1608:	f817883a 	mov	r11,ra
    160c:	22800084 	addi	r10,r4,2
    1610:	990d883a 	add	r6,r19,r4
    1614:	62400084 	addi	r9,r12,2
    1618:	7011883a 	mov	r8,r14
    161c:	600f883a 	mov	r7,r12
    1620:	4d000003 	ldbu	r20,0(r9)
    1624:	50c00003 	ldbu	r3,0(r10)
    1628:	59400003 	ldbu	r5,0(r11)
    162c:	30800003 	ldbu	r2,0(r6)
    1630:	1d07883a 	add	r3,r3,r20
    1634:	25400003 	ldbu	r21,0(r4)
    1638:	1947c83a 	sub	r3,r3,r5
    163c:	3d000003 	ldbu	r20,0(r7)
    1640:	194bc83a 	sub	r5,r3,r5
    1644:	1087883a 	add	r3,r2,r2
    1648:	28c7883a 	add	r3,r5,r3
    164c:	1d45c83a 	sub	r2,r3,r21
    1650:	1505c83a 	sub	r2,r2,r20
    1654:	4080000d 	sth	r2,0(r8)
    1658:	31800044 	addi	r6,r6,1
    165c:	21000044 	addi	r4,r4,1
    1660:	5ac00044 	addi	r11,r11,1
    1664:	52800044 	addi	r10,r10,1
    1668:	39c00044 	addi	r7,r7,1
    166c:	4a400044 	addi	r9,r9,1
    1670:	42000084 	addi	r8,r8,2
    1674:	61bfea1e 	bne	r12,r6,1620 <__alt_data_end+0xff001620>
    1678:	7bc00044 	addi	r15,r15,1
    167c:	f809883a 	mov	r4,ra
    1680:	6359883a 	add	r12,r12,r13
    1684:	749d883a 	add	r14,r14,r18
    1688:	7c7fdd1e 	bne	r15,r17,1600 <__alt_data_end+0xff001600>
    168c:	dfc00617 	ldw	ra,24(sp)
    1690:	dd400517 	ldw	r21,20(sp)
    1694:	dd000417 	ldw	r20,16(sp)
    1698:	dcc00317 	ldw	r19,12(sp)
    169c:	dc800217 	ldw	r18,8(sp)
    16a0:	dc400117 	ldw	r17,4(sp)
    16a4:	dc000017 	ldw	r16,0(sp)
    16a8:	dec00704 	addi	sp,sp,28
    16ac:	f800283a 	ret

000016b0 <sobel_x_with_rgb>:
    16b0:	defff504 	addi	sp,sp,-44
    16b4:	dd800715 	stw	r22,28(sp)
    16b8:	d5a71117 	ldw	r22,-25532(gp)
    16bc:	dfc00a15 	stw	ra,40(sp)
    16c0:	df000915 	stw	fp,36(sp)
    16c4:	ddc00815 	stw	r23,32(sp)
    16c8:	dd400615 	stw	r21,24(sp)
    16cc:	dd000515 	stw	r20,20(sp)
    16d0:	dcc00415 	stw	r19,16(sp)
    16d4:	dc800315 	stw	r18,12(sp)
    16d8:	dc400215 	stw	r17,8(sp)
    16dc:	dc000115 	stw	r16,4(sp)
    16e0:	b5bfffc4 	addi	r22,r22,-1
    16e4:	00800044 	movi	r2,1
    16e8:	1580440e 	bge	r2,r22,17fc <sobel_x_with_rgb+0x14c>
    16ec:	d7e70f17 	ldw	ra,-25540(gp)
    16f0:	d4a71217 	ldw	r18,-25528(gp)
    16f4:	d4671417 	ldw	r17,-25520(gp)
    16f8:	ffe9883a 	add	r20,ra,ra
    16fc:	a0800084 	addi	r2,r20,2
    1700:	04000084 	movi	r16,2
    1704:	90a5883a 	add	r18,r18,r2
    1708:	88a3883a 	add	r17,r17,r2
    170c:	fc05883a 	add	r2,ra,r16
    1710:	27df883a 	add	r15,r4,ra
    1714:	802f883a 	mov	r23,r16
    1718:	87f9c83a 	sub	fp,r16,ra
    171c:	d8800015 	stw	r2,0(sp)
    1720:	bfc02f0e 	bge	r23,ra,17e0 <sobel_x_with_rgb+0x130>
    1724:	d8800017 	ldw	r2,0(sp)
    1728:	7fe7883a 	add	r19,r15,ra
    172c:	802b883a 	mov	r21,r16
    1730:	7fdbc83a 	sub	r13,r15,ra
    1734:	e3cf883a 	add	r7,fp,r15
    1738:	7b000084 	addi	r12,r15,2
    173c:	9817883a 	mov	r11,r19
    1740:	13d5883a 	add	r10,r2,r15
    1744:	881d883a 	mov	r14,r17
    1748:	9013883a 	mov	r9,r18
    174c:	7811883a 	mov	r8,r15
    1750:	00000b06 	br	1780 <sobel_x_with_rgb+0xd0>
    1754:	180692fa 	slli	r3,r3,11
    1758:	70c0000d 	sth	r3,0(r14)
    175c:	39c00044 	addi	r7,r7,1
    1760:	6b400044 	addi	r13,r13,1
    1764:	42000044 	addi	r8,r8,1
    1768:	63000044 	addi	r12,r12,1
    176c:	5ac00044 	addi	r11,r11,1
    1770:	52800044 	addi	r10,r10,1
    1774:	4a400084 	addi	r9,r9,2
    1778:	73800084 	addi	r14,r14,2
    177c:	79c01a26 	beq	r15,r7,17e8 <sobel_x_with_rgb+0x138>
    1780:	50800003 	ldbu	r2,0(r10)
    1784:	39400003 	ldbu	r5,0(r7)
    1788:	41800003 	ldbu	r6,0(r8)
    178c:	60c00003 	ldbu	r3,0(r12)
    1790:	288b883a 	add	r5,r5,r2
    1794:	298bc83a 	sub	r5,r5,r6
    1798:	68800003 	ldbu	r2,0(r13)
    179c:	59000003 	ldbu	r4,0(r11)
    17a0:	298bc83a 	sub	r5,r5,r6
    17a4:	18c7883a 	add	r3,r3,r3
    17a8:	28c7883a 	add	r3,r5,r3
    17ac:	1887c83a 	sub	r3,r3,r2
    17b0:	1905c83a 	sub	r2,r3,r4
    17b4:	4880000d 	sth	r2,0(r9)
    17b8:	10bfffcc 	andi	r2,r2,65535
    17bc:	10a0001c 	xori	r2,r2,32768
    17c0:	10a00004 	addi	r2,r2,-32768
    17c4:	1007d0fa 	srai	r3,r2,3
    17c8:	103fe20e 	bge	r2,zero,1754 <__alt_data_end+0xff001754>
    17cc:	0085c83a 	sub	r2,zero,r2
    17d0:	1005d0ba 	srai	r2,r2,2
    17d4:	1004917a 	slli	r2,r2,5
    17d8:	7080000d 	sth	r2,0(r14)
    17dc:	003fdf06 	br	175c <__alt_data_end+0xff00175c>
    17e0:	802b883a 	mov	r21,r16
    17e4:	7fe7883a 	add	r19,r15,ra
    17e8:	84000044 	addi	r16,r16,1
    17ec:	981f883a 	mov	r15,r19
    17f0:	9525883a 	add	r18,r18,r20
    17f4:	8d23883a 	add	r17,r17,r20
    17f8:	adbfc916 	blt	r21,r22,1720 <__alt_data_end+0xff001720>
    17fc:	dfc00a17 	ldw	ra,40(sp)
    1800:	df000917 	ldw	fp,36(sp)
    1804:	ddc00817 	ldw	r23,32(sp)
    1808:	dd800717 	ldw	r22,28(sp)
    180c:	dd400617 	ldw	r21,24(sp)
    1810:	dd000517 	ldw	r20,20(sp)
    1814:	dcc00417 	ldw	r19,16(sp)
    1818:	dc800317 	ldw	r18,12(sp)
    181c:	dc400217 	ldw	r17,8(sp)
    1820:	dc000117 	ldw	r16,4(sp)
    1824:	dec00b04 	addi	sp,sp,44
    1828:	f800283a 	ret

0000182c <sobel_y>:
    182c:	defff904 	addi	sp,sp,-28
    1830:	dc800215 	stw	r18,8(sp)
    1834:	d4a71117 	ldw	r18,-25532(gp)
    1838:	dc400115 	stw	r17,4(sp)
    183c:	dfc00615 	stw	ra,24(sp)
    1840:	dd400515 	stw	r21,20(sp)
    1844:	dd000415 	stw	r20,16(sp)
    1848:	dcc00315 	stw	r19,12(sp)
    184c:	dc000015 	stw	r16,0(sp)
    1850:	04400084 	movi	r17,2
    1854:	8c802b0e 	bge	r17,r18,1904 <sobel_y+0xd8>
    1858:	d3e70f17 	ldw	r15,-25540(gp)
    185c:	d3a71317 	ldw	r14,-25524(gp)
    1860:	07c00044 	movi	ra,1
    1864:	7be1883a 	add	r16,r15,r15
    1868:	8467883a 	add	r19,r16,r17
    186c:	74dd883a 	add	r14,r14,r19
    1870:	94bfffc4 	addi	r18,r18,-1
    1874:	87e9883a 	add	r20,r16,ra
    1878:	8bc01e0e 	bge	r17,r15,18f4 <sobel_y+0xc8>
    187c:	810f883a 	add	r7,r16,r4
    1880:	23000044 	addi	r12,r4,1
    1884:	21800084 	addi	r6,r4,2
    1888:	a117883a 	add	r11,r20,r4
    188c:	9915883a 	add	r10,r19,r4
    1890:	3bdbc83a 	sub	r13,r7,r15
    1894:	7013883a 	mov	r9,r14
    1898:	2011883a 	mov	r8,r4
    189c:	31400003 	ldbu	r5,0(r6)
    18a0:	60800003 	ldbu	r2,0(r12)
    18a4:	40c00003 	ldbu	r3,0(r8)
    18a8:	5d400003 	ldbu	r21,0(r11)
    18ac:	31800044 	addi	r6,r6,1
    18b0:	1947883a 	add	r3,r3,r5
    18b4:	108b883a 	add	r5,r2,r2
    18b8:	1947883a 	add	r3,r3,r5
    18bc:	38800003 	ldbu	r2,0(r7)
    18c0:	51400003 	ldbu	r5,0(r10)
    18c4:	1d47c83a 	sub	r3,r3,r21
    18c8:	1d47c83a 	sub	r3,r3,r21
    18cc:	1885c83a 	sub	r2,r3,r2
    18d0:	1145c83a 	sub	r2,r2,r5
    18d4:	4880000d 	sth	r2,0(r9)
    18d8:	42000044 	addi	r8,r8,1
    18dc:	63000044 	addi	r12,r12,1
    18e0:	5ac00044 	addi	r11,r11,1
    18e4:	39c00044 	addi	r7,r7,1
    18e8:	52800044 	addi	r10,r10,1
    18ec:	4a400084 	addi	r9,r9,2
    18f0:	69bfea1e 	bne	r13,r6,189c <__alt_data_end+0xff00189c>
    18f4:	ffc00044 	addi	ra,ra,1
    18f8:	23c9883a 	add	r4,r4,r15
    18fc:	741d883a 	add	r14,r14,r16
    1900:	97ffdd1e 	bne	r18,ra,1878 <__alt_data_end+0xff001878>
    1904:	dfc00617 	ldw	ra,24(sp)
    1908:	dd400517 	ldw	r21,20(sp)
    190c:	dd000417 	ldw	r20,16(sp)
    1910:	dcc00317 	ldw	r19,12(sp)
    1914:	dc800217 	ldw	r18,8(sp)
    1918:	dc400117 	ldw	r17,4(sp)
    191c:	dc000017 	ldw	r16,0(sp)
    1920:	dec00704 	addi	sp,sp,28
    1924:	f800283a 	ret

00001928 <sobel_y_with_rgb>:
    1928:	defff604 	addi	sp,sp,-40
    192c:	dcc00315 	stw	r19,12(sp)
    1930:	d4e71117 	ldw	r19,-25532(gp)
    1934:	dfc00915 	stw	ra,36(sp)
    1938:	df000815 	stw	fp,32(sp)
    193c:	ddc00715 	stw	r23,28(sp)
    1940:	dd800615 	stw	r22,24(sp)
    1944:	dd400515 	stw	r21,20(sp)
    1948:	dd000415 	stw	r20,16(sp)
    194c:	dc800215 	stw	r18,8(sp)
    1950:	dc400115 	stw	r17,4(sp)
    1954:	dc000015 	stw	r16,0(sp)
    1958:	9cffffc4 	addi	r19,r19,-1
    195c:	00800044 	movi	r2,1
    1960:	14c03f0e 	bge	r2,r19,1a60 <sobel_y_with_rgb+0x138>
    1964:	d4670f17 	ldw	r17,-25540(gp)
    1968:	d4271317 	ldw	r16,-25524(gp)
    196c:	d7e71417 	ldw	ra,-25520(gp)
    1970:	8c5d883a 	add	r14,r17,r17
    1974:	75000084 	addi	r20,r14,2
    1978:	03c00084 	movi	r15,2
    197c:	8521883a 	add	r16,r16,r20
    1980:	fd3f883a 	add	ra,ra,r20
    1984:	782b883a 	mov	r21,r15
    1988:	70ad883a 	add	r22,r14,r2
    198c:	7825883a 	mov	r18,r15
    1990:	ac402e0e 	bge	r21,r17,1a4c <sobel_y_with_rgb+0x124>
    1994:	238d883a 	add	r6,r4,r14
    1998:	7825883a 	mov	r18,r15
    199c:	22c00044 	addi	r11,r4,1
    19a0:	22800084 	addi	r10,r4,2
    19a4:	b113883a 	add	r9,r22,r4
    19a8:	a10b883a 	add	r5,r20,r4
    19ac:	899b883a 	add	r13,r17,r6
    19b0:	f819883a 	mov	r12,ra
    19b4:	8011883a 	mov	r8,r16
    19b8:	200f883a 	mov	r7,r4
    19bc:	00000b06 	br	19ec <sobel_y_with_rgb+0xc4>
    19c0:	180692fa 	slli	r3,r3,11
    19c4:	60c0000d 	sth	r3,0(r12)
    19c8:	29400044 	addi	r5,r5,1
    19cc:	39c00044 	addi	r7,r7,1
    19d0:	5ac00044 	addi	r11,r11,1
    19d4:	52800044 	addi	r10,r10,1
    19d8:	31800044 	addi	r6,r6,1
    19dc:	4a400044 	addi	r9,r9,1
    19e0:	42000084 	addi	r8,r8,2
    19e4:	63000084 	addi	r12,r12,2
    19e8:	69401826 	beq	r13,r5,1a4c <sobel_y_with_rgb+0x124>
    19ec:	50800003 	ldbu	r2,0(r10)
    19f0:	3f000003 	ldbu	fp,0(r7)
    19f4:	58c00003 	ldbu	r3,0(r11)
    19f8:	4dc00003 	ldbu	r23,0(r9)
    19fc:	e0b9883a 	add	fp,fp,r2
    1a00:	18c7883a 	add	r3,r3,r3
    1a04:	30800003 	ldbu	r2,0(r6)
    1a08:	e0c7883a 	add	r3,fp,r3
    1a0c:	1dc7c83a 	sub	r3,r3,r23
    1a10:	2f000003 	ldbu	fp,0(r5)
    1a14:	1dc7c83a 	sub	r3,r3,r23
    1a18:	1885c83a 	sub	r2,r3,r2
    1a1c:	1705c83a 	sub	r2,r2,fp
    1a20:	4080000d 	sth	r2,0(r8)
    1a24:	10bfffcc 	andi	r2,r2,65535
    1a28:	10a0001c 	xori	r2,r2,32768
    1a2c:	10a00004 	addi	r2,r2,-32768
    1a30:	1007d0fa 	srai	r3,r2,3
    1a34:	103fe20e 	bge	r2,zero,19c0 <__alt_data_end+0xff0019c0>
    1a38:	0085c83a 	sub	r2,zero,r2
    1a3c:	1005d0ba 	srai	r2,r2,2
    1a40:	1004917a 	slli	r2,r2,5
    1a44:	6080000d 	sth	r2,0(r12)
    1a48:	003fdf06 	br	19c8 <__alt_data_end+0xff0019c8>
    1a4c:	7bc00044 	addi	r15,r15,1
    1a50:	2449883a 	add	r4,r4,r17
    1a54:	83a1883a 	add	r16,r16,r14
    1a58:	fbbf883a 	add	ra,ra,r14
    1a5c:	94ffcb16 	blt	r18,r19,198c <__alt_data_end+0xff00198c>
    1a60:	dfc00917 	ldw	ra,36(sp)
    1a64:	df000817 	ldw	fp,32(sp)
    1a68:	ddc00717 	ldw	r23,28(sp)
    1a6c:	dd800617 	ldw	r22,24(sp)
    1a70:	dd400517 	ldw	r21,20(sp)
    1a74:	dd000417 	ldw	r20,16(sp)
    1a78:	dcc00317 	ldw	r19,12(sp)
    1a7c:	dc800217 	ldw	r18,8(sp)
    1a80:	dc400117 	ldw	r17,4(sp)
    1a84:	dc000017 	ldw	r16,0(sp)
    1a88:	dec00a04 	addi	sp,sp,40
    1a8c:	f800283a 	ret

00001a90 <sobel_threshold>:
    1a90:	d0a71117 	ldw	r2,-25532(gp)
    1a94:	02400084 	movi	r9,2
    1a98:	4880290e 	bge	r9,r2,1b40 <sobel_threshold+0xb0>
    1a9c:	223fffcc 	andi	r8,r4,65535
    1aa0:	d0e70f17 	ldw	r3,-25540(gp)
    1aa4:	4220001c 	xori	r8,r8,32768
    1aa8:	01c00044 	movi	r7,1
    1aac:	42200004 	addi	r8,r8,-32768
    1ab0:	48c0200e 	bge	r9,r3,1b34 <sobel_threshold+0xa4>
    1ab4:	01400044 	movi	r5,1
    1ab8:	00000c06 	br	1aec <sobel_threshold+0x5c>
    1abc:	2080000f 	ldh	r2,0(r4)
    1ac0:	10001916 	blt	r2,zero,1b28 <sobel_threshold+0x98>
    1ac4:	3085883a 	add	r2,r6,r2
    1ac8:	10bfffcc 	andi	r2,r2,65535
    1acc:	10a0001c 	xori	r2,r2,32768
    1ad0:	10a00004 	addi	r2,r2,-32768
    1ad4:	4084803a 	cmplt	r2,r8,r2
    1ad8:	0085c83a 	sub	r2,zero,r2
    1adc:	18800005 	stb	r2,0(r3)
    1ae0:	d0e70f17 	ldw	r3,-25540(gp)
    1ae4:	18bfffc4 	addi	r2,r3,-1
    1ae8:	2880110e 	bge	r5,r2,1b30 <sobel_threshold+0xa0>
    1aec:	38c7383a 	mul	r3,r7,r3
    1af0:	d1a71317 	ldw	r6,-25524(gp)
    1af4:	d1271217 	ldw	r4,-25528(gp)
    1af8:	1947883a 	add	r3,r3,r5
    1afc:	18c5883a 	add	r2,r3,r3
    1b00:	308d883a 	add	r6,r6,r2
    1b04:	2089883a 	add	r4,r4,r2
    1b08:	3180000f 	ldh	r6,0(r6)
    1b0c:	d0a71017 	ldw	r2,-25536(gp)
    1b10:	29400044 	addi	r5,r5,1
    1b14:	10c7883a 	add	r3,r2,r3
    1b18:	303fe80e 	bge	r6,zero,1abc <__alt_data_end+0xff001abc>
    1b1c:	2080000f 	ldh	r2,0(r4)
    1b20:	018dc83a 	sub	r6,zero,r6
    1b24:	103fe70e 	bge	r2,zero,1ac4 <__alt_data_end+0xff001ac4>
    1b28:	0085c83a 	sub	r2,zero,r2
    1b2c:	003fe506 	br	1ac4 <__alt_data_end+0xff001ac4>
    1b30:	d0a71117 	ldw	r2,-25532(gp)
    1b34:	39c00044 	addi	r7,r7,1
    1b38:	113fffc4 	addi	r4,r2,-1
    1b3c:	393fdc16 	blt	r7,r4,1ab0 <__alt_data_end+0xff001ab0>
    1b40:	f800283a 	ret

00001b44 <GetSobel_rgb>:
    1b44:	d0a71417 	ldw	r2,-25520(gp)
    1b48:	f800283a 	ret

00001b4c <GetSobelResult>:
    1b4c:	d0a71017 	ldw	r2,-25536(gp)
    1b50:	f800283a 	ret

00001b54 <vga_set_pointer>:
    1b54:	00804034 	movhi	r2,256
    1b58:	10843404 	addi	r2,r2,4304
    1b5c:	11000035 	stwio	r4,0(r2)
    1b60:	f800283a 	ret

00001b64 <vga_set_swap>:
    1b64:	00804034 	movhi	r2,256
    1b68:	10843504 	addi	r2,r2,4308
    1b6c:	11000025 	stbio	r4,0(r2)
    1b70:	f800283a 	ret

00001b74 <__divsi3>:
    1b74:	20001b16 	blt	r4,zero,1be4 <__divsi3+0x70>
    1b78:	000f883a 	mov	r7,zero
    1b7c:	28001616 	blt	r5,zero,1bd8 <__divsi3+0x64>
    1b80:	200d883a 	mov	r6,r4
    1b84:	29001a2e 	bgeu	r5,r4,1bf0 <__divsi3+0x7c>
    1b88:	00800804 	movi	r2,32
    1b8c:	00c00044 	movi	r3,1
    1b90:	00000106 	br	1b98 <__divsi3+0x24>
    1b94:	10000d26 	beq	r2,zero,1bcc <__divsi3+0x58>
    1b98:	294b883a 	add	r5,r5,r5
    1b9c:	10bfffc4 	addi	r2,r2,-1
    1ba0:	18c7883a 	add	r3,r3,r3
    1ba4:	293ffb36 	bltu	r5,r4,1b94 <__alt_data_end+0xff001b94>
    1ba8:	0005883a 	mov	r2,zero
    1bac:	18000726 	beq	r3,zero,1bcc <__divsi3+0x58>
    1bb0:	0005883a 	mov	r2,zero
    1bb4:	31400236 	bltu	r6,r5,1bc0 <__divsi3+0x4c>
    1bb8:	314dc83a 	sub	r6,r6,r5
    1bbc:	10c4b03a 	or	r2,r2,r3
    1bc0:	1806d07a 	srli	r3,r3,1
    1bc4:	280ad07a 	srli	r5,r5,1
    1bc8:	183ffa1e 	bne	r3,zero,1bb4 <__alt_data_end+0xff001bb4>
    1bcc:	38000126 	beq	r7,zero,1bd4 <__divsi3+0x60>
    1bd0:	0085c83a 	sub	r2,zero,r2
    1bd4:	f800283a 	ret
    1bd8:	014bc83a 	sub	r5,zero,r5
    1bdc:	39c0005c 	xori	r7,r7,1
    1be0:	003fe706 	br	1b80 <__alt_data_end+0xff001b80>
    1be4:	0109c83a 	sub	r4,zero,r4
    1be8:	01c00044 	movi	r7,1
    1bec:	003fe306 	br	1b7c <__alt_data_end+0xff001b7c>
    1bf0:	00c00044 	movi	r3,1
    1bf4:	003fee06 	br	1bb0 <__alt_data_end+0xff001bb0>

00001bf8 <__modsi3>:
    1bf8:	20001716 	blt	r4,zero,1c58 <__modsi3+0x60>
    1bfc:	000f883a 	mov	r7,zero
    1c00:	2005883a 	mov	r2,r4
    1c04:	28001216 	blt	r5,zero,1c50 <__modsi3+0x58>
    1c08:	2900162e 	bgeu	r5,r4,1c64 <__modsi3+0x6c>
    1c0c:	01800804 	movi	r6,32
    1c10:	00c00044 	movi	r3,1
    1c14:	00000106 	br	1c1c <__modsi3+0x24>
    1c18:	30000a26 	beq	r6,zero,1c44 <__modsi3+0x4c>
    1c1c:	294b883a 	add	r5,r5,r5
    1c20:	31bfffc4 	addi	r6,r6,-1
    1c24:	18c7883a 	add	r3,r3,r3
    1c28:	293ffb36 	bltu	r5,r4,1c18 <__alt_data_end+0xff001c18>
    1c2c:	18000526 	beq	r3,zero,1c44 <__modsi3+0x4c>
    1c30:	1806d07a 	srli	r3,r3,1
    1c34:	11400136 	bltu	r2,r5,1c3c <__modsi3+0x44>
    1c38:	1145c83a 	sub	r2,r2,r5
    1c3c:	280ad07a 	srli	r5,r5,1
    1c40:	183ffb1e 	bne	r3,zero,1c30 <__alt_data_end+0xff001c30>
    1c44:	38000126 	beq	r7,zero,1c4c <__modsi3+0x54>
    1c48:	0085c83a 	sub	r2,zero,r2
    1c4c:	f800283a 	ret
    1c50:	014bc83a 	sub	r5,zero,r5
    1c54:	003fec06 	br	1c08 <__alt_data_end+0xff001c08>
    1c58:	0109c83a 	sub	r4,zero,r4
    1c5c:	01c00044 	movi	r7,1
    1c60:	003fe706 	br	1c00 <__alt_data_end+0xff001c00>
    1c64:	00c00044 	movi	r3,1
    1c68:	003ff106 	br	1c30 <__alt_data_end+0xff001c30>

00001c6c <__udivsi3>:
    1c6c:	200d883a 	mov	r6,r4
    1c70:	2900152e 	bgeu	r5,r4,1cc8 <__udivsi3+0x5c>
    1c74:	28001416 	blt	r5,zero,1cc8 <__udivsi3+0x5c>
    1c78:	00800804 	movi	r2,32
    1c7c:	00c00044 	movi	r3,1
    1c80:	00000206 	br	1c8c <__udivsi3+0x20>
    1c84:	10000e26 	beq	r2,zero,1cc0 <__udivsi3+0x54>
    1c88:	28000516 	blt	r5,zero,1ca0 <__udivsi3+0x34>
    1c8c:	294b883a 	add	r5,r5,r5
    1c90:	10bfffc4 	addi	r2,r2,-1
    1c94:	18c7883a 	add	r3,r3,r3
    1c98:	293ffa36 	bltu	r5,r4,1c84 <__alt_data_end+0xff001c84>
    1c9c:	18000826 	beq	r3,zero,1cc0 <__udivsi3+0x54>
    1ca0:	0005883a 	mov	r2,zero
    1ca4:	31400236 	bltu	r6,r5,1cb0 <__udivsi3+0x44>
    1ca8:	314dc83a 	sub	r6,r6,r5
    1cac:	10c4b03a 	or	r2,r2,r3
    1cb0:	1806d07a 	srli	r3,r3,1
    1cb4:	280ad07a 	srli	r5,r5,1
    1cb8:	183ffa1e 	bne	r3,zero,1ca4 <__alt_data_end+0xff001ca4>
    1cbc:	f800283a 	ret
    1cc0:	0005883a 	mov	r2,zero
    1cc4:	f800283a 	ret
    1cc8:	00c00044 	movi	r3,1
    1ccc:	003ff406 	br	1ca0 <__alt_data_end+0xff001ca0>

00001cd0 <__umodsi3>:
    1cd0:	2005883a 	mov	r2,r4
    1cd4:	2900122e 	bgeu	r5,r4,1d20 <__umodsi3+0x50>
    1cd8:	28001116 	blt	r5,zero,1d20 <__umodsi3+0x50>
    1cdc:	01800804 	movi	r6,32
    1ce0:	00c00044 	movi	r3,1
    1ce4:	00000206 	br	1cf0 <__umodsi3+0x20>
    1ce8:	30000c26 	beq	r6,zero,1d1c <__umodsi3+0x4c>
    1cec:	28000516 	blt	r5,zero,1d04 <__umodsi3+0x34>
    1cf0:	294b883a 	add	r5,r5,r5
    1cf4:	31bfffc4 	addi	r6,r6,-1
    1cf8:	18c7883a 	add	r3,r3,r3
    1cfc:	293ffa36 	bltu	r5,r4,1ce8 <__alt_data_end+0xff001ce8>
    1d00:	18000626 	beq	r3,zero,1d1c <__umodsi3+0x4c>
    1d04:	1806d07a 	srli	r3,r3,1
    1d08:	11400136 	bltu	r2,r5,1d10 <__umodsi3+0x40>
    1d0c:	1145c83a 	sub	r2,r2,r5
    1d10:	280ad07a 	srli	r5,r5,1
    1d14:	183ffb1e 	bne	r3,zero,1d04 <__alt_data_end+0xff001d04>
    1d18:	f800283a 	ret
    1d1c:	f800283a 	ret
    1d20:	00c00044 	movi	r3,1
    1d24:	003ff706 	br	1d04 <__alt_data_end+0xff001d04>

00001d28 <malloc>:
    1d28:	00800074 	movhi	r2,1
    1d2c:	108ca304 	addi	r2,r2,12940
    1d30:	200b883a 	mov	r5,r4
    1d34:	11000017 	ldw	r4,0(r2)
    1d38:	0001d501 	jmpi	1d50 <_malloc_r>

00001d3c <free>:
    1d3c:	00800074 	movhi	r2,1
    1d40:	108ca304 	addi	r2,r2,12940
    1d44:	200b883a 	mov	r5,r4
    1d48:	11000017 	ldw	r4,0(r2)
    1d4c:	0006ba01 	jmpi	6ba0 <_free_r>

00001d50 <_malloc_r>:
    1d50:	defff504 	addi	sp,sp,-44
    1d54:	dc800315 	stw	r18,12(sp)
    1d58:	dfc00a15 	stw	ra,40(sp)
    1d5c:	df000915 	stw	fp,36(sp)
    1d60:	ddc00815 	stw	r23,32(sp)
    1d64:	dd800715 	stw	r22,28(sp)
    1d68:	dd400615 	stw	r21,24(sp)
    1d6c:	dd000515 	stw	r20,20(sp)
    1d70:	dcc00415 	stw	r19,16(sp)
    1d74:	dc400215 	stw	r17,8(sp)
    1d78:	dc000115 	stw	r16,4(sp)
    1d7c:	288002c4 	addi	r2,r5,11
    1d80:	00c00584 	movi	r3,22
    1d84:	2025883a 	mov	r18,r4
    1d88:	18807f2e 	bgeu	r3,r2,1f88 <_malloc_r+0x238>
    1d8c:	047ffe04 	movi	r17,-8
    1d90:	1462703a 	and	r17,r2,r17
    1d94:	8800a316 	blt	r17,zero,2024 <_malloc_r+0x2d4>
    1d98:	8940a236 	bltu	r17,r5,2024 <_malloc_r+0x2d4>
    1d9c:	000ea380 	call	ea38 <__malloc_lock>
    1da0:	00807dc4 	movi	r2,503
    1da4:	1441e92e 	bgeu	r2,r17,254c <_malloc_r+0x7fc>
    1da8:	8804d27a 	srli	r2,r17,9
    1dac:	1000a126 	beq	r2,zero,2034 <_malloc_r+0x2e4>
    1db0:	00c00104 	movi	r3,4
    1db4:	18811e36 	bltu	r3,r2,2230 <_malloc_r+0x4e0>
    1db8:	8804d1ba 	srli	r2,r17,6
    1dbc:	12000e44 	addi	r8,r2,57
    1dc0:	11c00e04 	addi	r7,r2,56
    1dc4:	4209883a 	add	r4,r8,r8
    1dc8:	04c00074 	movhi	r19,1
    1dcc:	2109883a 	add	r4,r4,r4
    1dd0:	9cc5f504 	addi	r19,r19,6100
    1dd4:	2109883a 	add	r4,r4,r4
    1dd8:	9909883a 	add	r4,r19,r4
    1ddc:	24000117 	ldw	r16,4(r4)
    1de0:	213ffe04 	addi	r4,r4,-8
    1de4:	24009726 	beq	r4,r16,2044 <_malloc_r+0x2f4>
    1de8:	80800117 	ldw	r2,4(r16)
    1dec:	01bfff04 	movi	r6,-4
    1df0:	014003c4 	movi	r5,15
    1df4:	1184703a 	and	r2,r2,r6
    1df8:	1447c83a 	sub	r3,r2,r17
    1dfc:	28c00716 	blt	r5,r3,1e1c <_malloc_r+0xcc>
    1e00:	1800920e 	bge	r3,zero,204c <_malloc_r+0x2fc>
    1e04:	84000317 	ldw	r16,12(r16)
    1e08:	24008e26 	beq	r4,r16,2044 <_malloc_r+0x2f4>
    1e0c:	80800117 	ldw	r2,4(r16)
    1e10:	1184703a 	and	r2,r2,r6
    1e14:	1447c83a 	sub	r3,r2,r17
    1e18:	28fff90e 	bge	r5,r3,1e00 <__alt_data_end+0xff001e00>
    1e1c:	3809883a 	mov	r4,r7
    1e20:	01800074 	movhi	r6,1
    1e24:	9c000417 	ldw	r16,16(r19)
    1e28:	3185f504 	addi	r6,r6,6100
    1e2c:	32000204 	addi	r8,r6,8
    1e30:	82013426 	beq	r16,r8,2304 <_malloc_r+0x5b4>
    1e34:	80c00117 	ldw	r3,4(r16)
    1e38:	00bfff04 	movi	r2,-4
    1e3c:	188e703a 	and	r7,r3,r2
    1e40:	3c45c83a 	sub	r2,r7,r17
    1e44:	00c003c4 	movi	r3,15
    1e48:	18811f16 	blt	r3,r2,22c8 <_malloc_r+0x578>
    1e4c:	32000515 	stw	r8,20(r6)
    1e50:	32000415 	stw	r8,16(r6)
    1e54:	10007f0e 	bge	r2,zero,2054 <_malloc_r+0x304>
    1e58:	00807fc4 	movi	r2,511
    1e5c:	11c0fd36 	bltu	r2,r7,2254 <_malloc_r+0x504>
    1e60:	3806d0fa 	srli	r3,r7,3
    1e64:	01c00044 	movi	r7,1
    1e68:	30800117 	ldw	r2,4(r6)
    1e6c:	19400044 	addi	r5,r3,1
    1e70:	294b883a 	add	r5,r5,r5
    1e74:	1807d0ba 	srai	r3,r3,2
    1e78:	294b883a 	add	r5,r5,r5
    1e7c:	294b883a 	add	r5,r5,r5
    1e80:	298b883a 	add	r5,r5,r6
    1e84:	38c6983a 	sll	r3,r7,r3
    1e88:	29c00017 	ldw	r7,0(r5)
    1e8c:	2a7ffe04 	addi	r9,r5,-8
    1e90:	1886b03a 	or	r3,r3,r2
    1e94:	82400315 	stw	r9,12(r16)
    1e98:	81c00215 	stw	r7,8(r16)
    1e9c:	30c00115 	stw	r3,4(r6)
    1ea0:	2c000015 	stw	r16,0(r5)
    1ea4:	3c000315 	stw	r16,12(r7)
    1ea8:	2005d0ba 	srai	r2,r4,2
    1eac:	01400044 	movi	r5,1
    1eb0:	288a983a 	sll	r5,r5,r2
    1eb4:	19406f36 	bltu	r3,r5,2074 <_malloc_r+0x324>
    1eb8:	28c4703a 	and	r2,r5,r3
    1ebc:	10000a1e 	bne	r2,zero,1ee8 <_malloc_r+0x198>
    1ec0:	00bfff04 	movi	r2,-4
    1ec4:	294b883a 	add	r5,r5,r5
    1ec8:	2088703a 	and	r4,r4,r2
    1ecc:	28c4703a 	and	r2,r5,r3
    1ed0:	21000104 	addi	r4,r4,4
    1ed4:	1000041e 	bne	r2,zero,1ee8 <_malloc_r+0x198>
    1ed8:	294b883a 	add	r5,r5,r5
    1edc:	28c4703a 	and	r2,r5,r3
    1ee0:	21000104 	addi	r4,r4,4
    1ee4:	103ffc26 	beq	r2,zero,1ed8 <__alt_data_end+0xff001ed8>
    1ee8:	02bfff04 	movi	r10,-4
    1eec:	024003c4 	movi	r9,15
    1ef0:	21800044 	addi	r6,r4,1
    1ef4:	318d883a 	add	r6,r6,r6
    1ef8:	318d883a 	add	r6,r6,r6
    1efc:	318d883a 	add	r6,r6,r6
    1f00:	998d883a 	add	r6,r19,r6
    1f04:	333ffe04 	addi	r12,r6,-8
    1f08:	2017883a 	mov	r11,r4
    1f0c:	31800104 	addi	r6,r6,4
    1f10:	34000017 	ldw	r16,0(r6)
    1f14:	31fffd04 	addi	r7,r6,-12
    1f18:	81c0041e 	bne	r16,r7,1f2c <_malloc_r+0x1dc>
    1f1c:	0000fb06 	br	230c <_malloc_r+0x5bc>
    1f20:	1801030e 	bge	r3,zero,2330 <_malloc_r+0x5e0>
    1f24:	84000317 	ldw	r16,12(r16)
    1f28:	81c0f826 	beq	r16,r7,230c <_malloc_r+0x5bc>
    1f2c:	80800117 	ldw	r2,4(r16)
    1f30:	1284703a 	and	r2,r2,r10
    1f34:	1447c83a 	sub	r3,r2,r17
    1f38:	48fff90e 	bge	r9,r3,1f20 <__alt_data_end+0xff001f20>
    1f3c:	80800317 	ldw	r2,12(r16)
    1f40:	81000217 	ldw	r4,8(r16)
    1f44:	89400054 	ori	r5,r17,1
    1f48:	81400115 	stw	r5,4(r16)
    1f4c:	20800315 	stw	r2,12(r4)
    1f50:	11000215 	stw	r4,8(r2)
    1f54:	8463883a 	add	r17,r16,r17
    1f58:	9c400515 	stw	r17,20(r19)
    1f5c:	9c400415 	stw	r17,16(r19)
    1f60:	18800054 	ori	r2,r3,1
    1f64:	88800115 	stw	r2,4(r17)
    1f68:	8a000315 	stw	r8,12(r17)
    1f6c:	8a000215 	stw	r8,8(r17)
    1f70:	88e3883a 	add	r17,r17,r3
    1f74:	88c00015 	stw	r3,0(r17)
    1f78:	9009883a 	mov	r4,r18
    1f7c:	000ea5c0 	call	ea5c <__malloc_unlock>
    1f80:	80800204 	addi	r2,r16,8
    1f84:	00001b06 	br	1ff4 <_malloc_r+0x2a4>
    1f88:	04400404 	movi	r17,16
    1f8c:	89402536 	bltu	r17,r5,2024 <_malloc_r+0x2d4>
    1f90:	000ea380 	call	ea38 <__malloc_lock>
    1f94:	00800184 	movi	r2,6
    1f98:	01000084 	movi	r4,2
    1f9c:	04c00074 	movhi	r19,1
    1fa0:	1085883a 	add	r2,r2,r2
    1fa4:	9cc5f504 	addi	r19,r19,6100
    1fa8:	1085883a 	add	r2,r2,r2
    1fac:	9885883a 	add	r2,r19,r2
    1fb0:	14000117 	ldw	r16,4(r2)
    1fb4:	10fffe04 	addi	r3,r2,-8
    1fb8:	80c0d926 	beq	r16,r3,2320 <_malloc_r+0x5d0>
    1fbc:	80c00117 	ldw	r3,4(r16)
    1fc0:	81000317 	ldw	r4,12(r16)
    1fc4:	00bfff04 	movi	r2,-4
    1fc8:	1884703a 	and	r2,r3,r2
    1fcc:	81400217 	ldw	r5,8(r16)
    1fd0:	8085883a 	add	r2,r16,r2
    1fd4:	10c00117 	ldw	r3,4(r2)
    1fd8:	29000315 	stw	r4,12(r5)
    1fdc:	21400215 	stw	r5,8(r4)
    1fe0:	18c00054 	ori	r3,r3,1
    1fe4:	10c00115 	stw	r3,4(r2)
    1fe8:	9009883a 	mov	r4,r18
    1fec:	000ea5c0 	call	ea5c <__malloc_unlock>
    1ff0:	80800204 	addi	r2,r16,8
    1ff4:	dfc00a17 	ldw	ra,40(sp)
    1ff8:	df000917 	ldw	fp,36(sp)
    1ffc:	ddc00817 	ldw	r23,32(sp)
    2000:	dd800717 	ldw	r22,28(sp)
    2004:	dd400617 	ldw	r21,24(sp)
    2008:	dd000517 	ldw	r20,20(sp)
    200c:	dcc00417 	ldw	r19,16(sp)
    2010:	dc800317 	ldw	r18,12(sp)
    2014:	dc400217 	ldw	r17,8(sp)
    2018:	dc000117 	ldw	r16,4(sp)
    201c:	dec00b04 	addi	sp,sp,44
    2020:	f800283a 	ret
    2024:	00800304 	movi	r2,12
    2028:	90800015 	stw	r2,0(r18)
    202c:	0005883a 	mov	r2,zero
    2030:	003ff006 	br	1ff4 <__alt_data_end+0xff001ff4>
    2034:	01002004 	movi	r4,128
    2038:	02001004 	movi	r8,64
    203c:	01c00fc4 	movi	r7,63
    2040:	003f6106 	br	1dc8 <__alt_data_end+0xff001dc8>
    2044:	4009883a 	mov	r4,r8
    2048:	003f7506 	br	1e20 <__alt_data_end+0xff001e20>
    204c:	81000317 	ldw	r4,12(r16)
    2050:	003fde06 	br	1fcc <__alt_data_end+0xff001fcc>
    2054:	81c5883a 	add	r2,r16,r7
    2058:	11400117 	ldw	r5,4(r2)
    205c:	9009883a 	mov	r4,r18
    2060:	29400054 	ori	r5,r5,1
    2064:	11400115 	stw	r5,4(r2)
    2068:	000ea5c0 	call	ea5c <__malloc_unlock>
    206c:	80800204 	addi	r2,r16,8
    2070:	003fe006 	br	1ff4 <__alt_data_end+0xff001ff4>
    2074:	9c000217 	ldw	r16,8(r19)
    2078:	00bfff04 	movi	r2,-4
    207c:	85800117 	ldw	r22,4(r16)
    2080:	b0ac703a 	and	r22,r22,r2
    2084:	b4400336 	bltu	r22,r17,2094 <_malloc_r+0x344>
    2088:	b445c83a 	sub	r2,r22,r17
    208c:	00c003c4 	movi	r3,15
    2090:	18805d16 	blt	r3,r2,2208 <_malloc_r+0x4b8>
    2094:	05c00074 	movhi	r23,1
    2098:	00800074 	movhi	r2,1
    209c:	1093b704 	addi	r2,r2,20188
    20a0:	bdcca004 	addi	r23,r23,12928
    20a4:	15400017 	ldw	r21,0(r2)
    20a8:	b8c00017 	ldw	r3,0(r23)
    20ac:	00bfffc4 	movi	r2,-1
    20b0:	858d883a 	add	r6,r16,r22
    20b4:	8d6b883a 	add	r21,r17,r21
    20b8:	1880ea26 	beq	r3,r2,2464 <_malloc_r+0x714>
    20bc:	ad4403c4 	addi	r21,r21,4111
    20c0:	00bc0004 	movi	r2,-4096
    20c4:	a8aa703a 	and	r21,r21,r2
    20c8:	a80b883a 	mov	r5,r21
    20cc:	9009883a 	mov	r4,r18
    20d0:	d9800015 	stw	r6,0(sp)
    20d4:	000269c0 	call	269c <_sbrk_r>
    20d8:	1029883a 	mov	r20,r2
    20dc:	00bfffc4 	movi	r2,-1
    20e0:	d9800017 	ldw	r6,0(sp)
    20e4:	a080e826 	beq	r20,r2,2488 <_malloc_r+0x738>
    20e8:	a180a636 	bltu	r20,r6,2384 <_malloc_r+0x634>
    20ec:	07000074 	movhi	fp,1
    20f0:	e713c504 	addi	fp,fp,20244
    20f4:	e0800017 	ldw	r2,0(fp)
    20f8:	a887883a 	add	r3,r21,r2
    20fc:	e0c00015 	stw	r3,0(fp)
    2100:	3500e626 	beq	r6,r20,249c <_malloc_r+0x74c>
    2104:	b9000017 	ldw	r4,0(r23)
    2108:	00bfffc4 	movi	r2,-1
    210c:	2080ee26 	beq	r4,r2,24c8 <_malloc_r+0x778>
    2110:	a185c83a 	sub	r2,r20,r6
    2114:	10c5883a 	add	r2,r2,r3
    2118:	e0800015 	stw	r2,0(fp)
    211c:	a0c001cc 	andi	r3,r20,7
    2120:	1800bc26 	beq	r3,zero,2414 <_malloc_r+0x6c4>
    2124:	a0e9c83a 	sub	r20,r20,r3
    2128:	00840204 	movi	r2,4104
    212c:	a5000204 	addi	r20,r20,8
    2130:	10c7c83a 	sub	r3,r2,r3
    2134:	a545883a 	add	r2,r20,r21
    2138:	1083ffcc 	andi	r2,r2,4095
    213c:	18abc83a 	sub	r21,r3,r2
    2140:	a80b883a 	mov	r5,r21
    2144:	9009883a 	mov	r4,r18
    2148:	000269c0 	call	269c <_sbrk_r>
    214c:	00ffffc4 	movi	r3,-1
    2150:	10c0e126 	beq	r2,r3,24d8 <_malloc_r+0x788>
    2154:	1505c83a 	sub	r2,r2,r20
    2158:	1545883a 	add	r2,r2,r21
    215c:	10800054 	ori	r2,r2,1
    2160:	e0c00017 	ldw	r3,0(fp)
    2164:	9d000215 	stw	r20,8(r19)
    2168:	a0800115 	stw	r2,4(r20)
    216c:	a8c7883a 	add	r3,r21,r3
    2170:	e0c00015 	stw	r3,0(fp)
    2174:	84c00e26 	beq	r16,r19,21b0 <_malloc_r+0x460>
    2178:	018003c4 	movi	r6,15
    217c:	3580a72e 	bgeu	r6,r22,241c <_malloc_r+0x6cc>
    2180:	81400117 	ldw	r5,4(r16)
    2184:	013ffe04 	movi	r4,-8
    2188:	b0bffd04 	addi	r2,r22,-12
    218c:	1104703a 	and	r2,r2,r4
    2190:	2900004c 	andi	r4,r5,1
    2194:	2088b03a 	or	r4,r4,r2
    2198:	81000115 	stw	r4,4(r16)
    219c:	01400144 	movi	r5,5
    21a0:	8089883a 	add	r4,r16,r2
    21a4:	21400115 	stw	r5,4(r4)
    21a8:	21400215 	stw	r5,8(r4)
    21ac:	3080cd36 	bltu	r6,r2,24e4 <_malloc_r+0x794>
    21b0:	00800074 	movhi	r2,1
    21b4:	1093b604 	addi	r2,r2,20184
    21b8:	11000017 	ldw	r4,0(r2)
    21bc:	20c0012e 	bgeu	r4,r3,21c4 <_malloc_r+0x474>
    21c0:	10c00015 	stw	r3,0(r2)
    21c4:	00800074 	movhi	r2,1
    21c8:	1093b504 	addi	r2,r2,20180
    21cc:	11000017 	ldw	r4,0(r2)
    21d0:	9c000217 	ldw	r16,8(r19)
    21d4:	20c0012e 	bgeu	r4,r3,21dc <_malloc_r+0x48c>
    21d8:	10c00015 	stw	r3,0(r2)
    21dc:	80c00117 	ldw	r3,4(r16)
    21e0:	00bfff04 	movi	r2,-4
    21e4:	1886703a 	and	r3,r3,r2
    21e8:	1c45c83a 	sub	r2,r3,r17
    21ec:	1c400236 	bltu	r3,r17,21f8 <_malloc_r+0x4a8>
    21f0:	00c003c4 	movi	r3,15
    21f4:	18800416 	blt	r3,r2,2208 <_malloc_r+0x4b8>
    21f8:	9009883a 	mov	r4,r18
    21fc:	000ea5c0 	call	ea5c <__malloc_unlock>
    2200:	0005883a 	mov	r2,zero
    2204:	003f7b06 	br	1ff4 <__alt_data_end+0xff001ff4>
    2208:	88c00054 	ori	r3,r17,1
    220c:	80c00115 	stw	r3,4(r16)
    2210:	8463883a 	add	r17,r16,r17
    2214:	10800054 	ori	r2,r2,1
    2218:	9c400215 	stw	r17,8(r19)
    221c:	88800115 	stw	r2,4(r17)
    2220:	9009883a 	mov	r4,r18
    2224:	000ea5c0 	call	ea5c <__malloc_unlock>
    2228:	80800204 	addi	r2,r16,8
    222c:	003f7106 	br	1ff4 <__alt_data_end+0xff001ff4>
    2230:	00c00504 	movi	r3,20
    2234:	18804a2e 	bgeu	r3,r2,2360 <_malloc_r+0x610>
    2238:	00c01504 	movi	r3,84
    223c:	18806e36 	bltu	r3,r2,23f8 <_malloc_r+0x6a8>
    2240:	8804d33a 	srli	r2,r17,12
    2244:	12001bc4 	addi	r8,r2,111
    2248:	11c01b84 	addi	r7,r2,110
    224c:	4209883a 	add	r4,r8,r8
    2250:	003edd06 	br	1dc8 <__alt_data_end+0xff001dc8>
    2254:	3804d27a 	srli	r2,r7,9
    2258:	00c00104 	movi	r3,4
    225c:	1880442e 	bgeu	r3,r2,2370 <_malloc_r+0x620>
    2260:	00c00504 	movi	r3,20
    2264:	18808136 	bltu	r3,r2,246c <_malloc_r+0x71c>
    2268:	11401704 	addi	r5,r2,92
    226c:	10c016c4 	addi	r3,r2,91
    2270:	294b883a 	add	r5,r5,r5
    2274:	294b883a 	add	r5,r5,r5
    2278:	294b883a 	add	r5,r5,r5
    227c:	994b883a 	add	r5,r19,r5
    2280:	28800017 	ldw	r2,0(r5)
    2284:	01800074 	movhi	r6,1
    2288:	297ffe04 	addi	r5,r5,-8
    228c:	3185f504 	addi	r6,r6,6100
    2290:	28806526 	beq	r5,r2,2428 <_malloc_r+0x6d8>
    2294:	01bfff04 	movi	r6,-4
    2298:	10c00117 	ldw	r3,4(r2)
    229c:	1986703a 	and	r3,r3,r6
    22a0:	38c0022e 	bgeu	r7,r3,22ac <_malloc_r+0x55c>
    22a4:	10800217 	ldw	r2,8(r2)
    22a8:	28bffb1e 	bne	r5,r2,2298 <__alt_data_end+0xff002298>
    22ac:	11400317 	ldw	r5,12(r2)
    22b0:	98c00117 	ldw	r3,4(r19)
    22b4:	81400315 	stw	r5,12(r16)
    22b8:	80800215 	stw	r2,8(r16)
    22bc:	2c000215 	stw	r16,8(r5)
    22c0:	14000315 	stw	r16,12(r2)
    22c4:	003ef806 	br	1ea8 <__alt_data_end+0xff001ea8>
    22c8:	88c00054 	ori	r3,r17,1
    22cc:	80c00115 	stw	r3,4(r16)
    22d0:	8463883a 	add	r17,r16,r17
    22d4:	34400515 	stw	r17,20(r6)
    22d8:	34400415 	stw	r17,16(r6)
    22dc:	10c00054 	ori	r3,r2,1
    22e0:	8a000315 	stw	r8,12(r17)
    22e4:	8a000215 	stw	r8,8(r17)
    22e8:	88c00115 	stw	r3,4(r17)
    22ec:	88a3883a 	add	r17,r17,r2
    22f0:	88800015 	stw	r2,0(r17)
    22f4:	9009883a 	mov	r4,r18
    22f8:	000ea5c0 	call	ea5c <__malloc_unlock>
    22fc:	80800204 	addi	r2,r16,8
    2300:	003f3c06 	br	1ff4 <__alt_data_end+0xff001ff4>
    2304:	30c00117 	ldw	r3,4(r6)
    2308:	003ee706 	br	1ea8 <__alt_data_end+0xff001ea8>
    230c:	5ac00044 	addi	r11,r11,1
    2310:	588000cc 	andi	r2,r11,3
    2314:	31800204 	addi	r6,r6,8
    2318:	103efd1e 	bne	r2,zero,1f10 <__alt_data_end+0xff001f10>
    231c:	00002406 	br	23b0 <_malloc_r+0x660>
    2320:	14000317 	ldw	r16,12(r2)
    2324:	143f251e 	bne	r2,r16,1fbc <__alt_data_end+0xff001fbc>
    2328:	21000084 	addi	r4,r4,2
    232c:	003ebc06 	br	1e20 <__alt_data_end+0xff001e20>
    2330:	8085883a 	add	r2,r16,r2
    2334:	10c00117 	ldw	r3,4(r2)
    2338:	81000317 	ldw	r4,12(r16)
    233c:	81400217 	ldw	r5,8(r16)
    2340:	18c00054 	ori	r3,r3,1
    2344:	10c00115 	stw	r3,4(r2)
    2348:	29000315 	stw	r4,12(r5)
    234c:	21400215 	stw	r5,8(r4)
    2350:	9009883a 	mov	r4,r18
    2354:	000ea5c0 	call	ea5c <__malloc_unlock>
    2358:	80800204 	addi	r2,r16,8
    235c:	003f2506 	br	1ff4 <__alt_data_end+0xff001ff4>
    2360:	12001704 	addi	r8,r2,92
    2364:	11c016c4 	addi	r7,r2,91
    2368:	4209883a 	add	r4,r8,r8
    236c:	003e9606 	br	1dc8 <__alt_data_end+0xff001dc8>
    2370:	3804d1ba 	srli	r2,r7,6
    2374:	11400e44 	addi	r5,r2,57
    2378:	10c00e04 	addi	r3,r2,56
    237c:	294b883a 	add	r5,r5,r5
    2380:	003fbc06 	br	2274 <__alt_data_end+0xff002274>
    2384:	84ff5926 	beq	r16,r19,20ec <__alt_data_end+0xff0020ec>
    2388:	00800074 	movhi	r2,1
    238c:	1085f504 	addi	r2,r2,6100
    2390:	14000217 	ldw	r16,8(r2)
    2394:	00bfff04 	movi	r2,-4
    2398:	80c00117 	ldw	r3,4(r16)
    239c:	1886703a 	and	r3,r3,r2
    23a0:	003f9106 	br	21e8 <__alt_data_end+0xff0021e8>
    23a4:	60800217 	ldw	r2,8(r12)
    23a8:	213fffc4 	addi	r4,r4,-1
    23ac:	1300651e 	bne	r2,r12,2544 <_malloc_r+0x7f4>
    23b0:	208000cc 	andi	r2,r4,3
    23b4:	633ffe04 	addi	r12,r12,-8
    23b8:	103ffa1e 	bne	r2,zero,23a4 <__alt_data_end+0xff0023a4>
    23bc:	98800117 	ldw	r2,4(r19)
    23c0:	0146303a 	nor	r3,zero,r5
    23c4:	1884703a 	and	r2,r3,r2
    23c8:	98800115 	stw	r2,4(r19)
    23cc:	294b883a 	add	r5,r5,r5
    23d0:	117f2836 	bltu	r2,r5,2074 <__alt_data_end+0xff002074>
    23d4:	283f2726 	beq	r5,zero,2074 <__alt_data_end+0xff002074>
    23d8:	2886703a 	and	r3,r5,r2
    23dc:	5809883a 	mov	r4,r11
    23e0:	183ec31e 	bne	r3,zero,1ef0 <__alt_data_end+0xff001ef0>
    23e4:	294b883a 	add	r5,r5,r5
    23e8:	2886703a 	and	r3,r5,r2
    23ec:	21000104 	addi	r4,r4,4
    23f0:	183ffc26 	beq	r3,zero,23e4 <__alt_data_end+0xff0023e4>
    23f4:	003ebe06 	br	1ef0 <__alt_data_end+0xff001ef0>
    23f8:	00c05504 	movi	r3,340
    23fc:	18801236 	bltu	r3,r2,2448 <_malloc_r+0x6f8>
    2400:	8804d3fa 	srli	r2,r17,15
    2404:	12001e04 	addi	r8,r2,120
    2408:	11c01dc4 	addi	r7,r2,119
    240c:	4209883a 	add	r4,r8,r8
    2410:	003e6d06 	br	1dc8 <__alt_data_end+0xff001dc8>
    2414:	00c40004 	movi	r3,4096
    2418:	003f4606 	br	2134 <__alt_data_end+0xff002134>
    241c:	00800044 	movi	r2,1
    2420:	a0800115 	stw	r2,4(r20)
    2424:	003f7406 	br	21f8 <__alt_data_end+0xff0021f8>
    2428:	1805d0ba 	srai	r2,r3,2
    242c:	01c00044 	movi	r7,1
    2430:	30c00117 	ldw	r3,4(r6)
    2434:	388e983a 	sll	r7,r7,r2
    2438:	2805883a 	mov	r2,r5
    243c:	38c6b03a 	or	r3,r7,r3
    2440:	30c00115 	stw	r3,4(r6)
    2444:	003f9b06 	br	22b4 <__alt_data_end+0xff0022b4>
    2448:	00c15504 	movi	r3,1364
    244c:	18801a36 	bltu	r3,r2,24b8 <_malloc_r+0x768>
    2450:	8804d4ba 	srli	r2,r17,18
    2454:	12001f44 	addi	r8,r2,125
    2458:	11c01f04 	addi	r7,r2,124
    245c:	4209883a 	add	r4,r8,r8
    2460:	003e5906 	br	1dc8 <__alt_data_end+0xff001dc8>
    2464:	ad400404 	addi	r21,r21,16
    2468:	003f1706 	br	20c8 <__alt_data_end+0xff0020c8>
    246c:	00c01504 	movi	r3,84
    2470:	18802336 	bltu	r3,r2,2500 <_malloc_r+0x7b0>
    2474:	3804d33a 	srli	r2,r7,12
    2478:	11401bc4 	addi	r5,r2,111
    247c:	10c01b84 	addi	r3,r2,110
    2480:	294b883a 	add	r5,r5,r5
    2484:	003f7b06 	br	2274 <__alt_data_end+0xff002274>
    2488:	9c000217 	ldw	r16,8(r19)
    248c:	00bfff04 	movi	r2,-4
    2490:	80c00117 	ldw	r3,4(r16)
    2494:	1886703a 	and	r3,r3,r2
    2498:	003f5306 	br	21e8 <__alt_data_end+0xff0021e8>
    249c:	3083ffcc 	andi	r2,r6,4095
    24a0:	103f181e 	bne	r2,zero,2104 <__alt_data_end+0xff002104>
    24a4:	99000217 	ldw	r4,8(r19)
    24a8:	b545883a 	add	r2,r22,r21
    24ac:	10800054 	ori	r2,r2,1
    24b0:	20800115 	stw	r2,4(r4)
    24b4:	003f3e06 	br	21b0 <__alt_data_end+0xff0021b0>
    24b8:	01003f84 	movi	r4,254
    24bc:	02001fc4 	movi	r8,127
    24c0:	01c01f84 	movi	r7,126
    24c4:	003e4006 	br	1dc8 <__alt_data_end+0xff001dc8>
    24c8:	00800074 	movhi	r2,1
    24cc:	108ca004 	addi	r2,r2,12928
    24d0:	15000015 	stw	r20,0(r2)
    24d4:	003f1106 	br	211c <__alt_data_end+0xff00211c>
    24d8:	00800044 	movi	r2,1
    24dc:	002b883a 	mov	r21,zero
    24e0:	003f1f06 	br	2160 <__alt_data_end+0xff002160>
    24e4:	81400204 	addi	r5,r16,8
    24e8:	9009883a 	mov	r4,r18
    24ec:	0006ba00 	call	6ba0 <_free_r>
    24f0:	00800074 	movhi	r2,1
    24f4:	1093c504 	addi	r2,r2,20244
    24f8:	10c00017 	ldw	r3,0(r2)
    24fc:	003f2c06 	br	21b0 <__alt_data_end+0xff0021b0>
    2500:	00c05504 	movi	r3,340
    2504:	18800536 	bltu	r3,r2,251c <_malloc_r+0x7cc>
    2508:	3804d3fa 	srli	r2,r7,15
    250c:	11401e04 	addi	r5,r2,120
    2510:	10c01dc4 	addi	r3,r2,119
    2514:	294b883a 	add	r5,r5,r5
    2518:	003f5606 	br	2274 <__alt_data_end+0xff002274>
    251c:	00c15504 	movi	r3,1364
    2520:	18800536 	bltu	r3,r2,2538 <_malloc_r+0x7e8>
    2524:	3804d4ba 	srli	r2,r7,18
    2528:	11401f44 	addi	r5,r2,125
    252c:	10c01f04 	addi	r3,r2,124
    2530:	294b883a 	add	r5,r5,r5
    2534:	003f4f06 	br	2274 <__alt_data_end+0xff002274>
    2538:	01403f84 	movi	r5,254
    253c:	00c01f84 	movi	r3,126
    2540:	003f4c06 	br	2274 <__alt_data_end+0xff002274>
    2544:	98800117 	ldw	r2,4(r19)
    2548:	003fa006 	br	23cc <__alt_data_end+0xff0023cc>
    254c:	8808d0fa 	srli	r4,r17,3
    2550:	20800044 	addi	r2,r4,1
    2554:	1085883a 	add	r2,r2,r2
    2558:	003e9006 	br	1f9c <__alt_data_end+0xff001f9c>

0000255c <_printf_r>:
    255c:	defffd04 	addi	sp,sp,-12
    2560:	2805883a 	mov	r2,r5
    2564:	dfc00015 	stw	ra,0(sp)
    2568:	d9800115 	stw	r6,4(sp)
    256c:	d9c00215 	stw	r7,8(sp)
    2570:	21400217 	ldw	r5,8(r4)
    2574:	d9c00104 	addi	r7,sp,4
    2578:	100d883a 	mov	r6,r2
    257c:	00027880 	call	2788 <___vfprintf_internal_r>
    2580:	dfc00017 	ldw	ra,0(sp)
    2584:	dec00304 	addi	sp,sp,12
    2588:	f800283a 	ret

0000258c <printf>:
    258c:	defffc04 	addi	sp,sp,-16
    2590:	dfc00015 	stw	ra,0(sp)
    2594:	d9400115 	stw	r5,4(sp)
    2598:	d9800215 	stw	r6,8(sp)
    259c:	d9c00315 	stw	r7,12(sp)
    25a0:	00800074 	movhi	r2,1
    25a4:	108ca304 	addi	r2,r2,12940
    25a8:	10800017 	ldw	r2,0(r2)
    25ac:	200b883a 	mov	r5,r4
    25b0:	d9800104 	addi	r6,sp,4
    25b4:	11000217 	ldw	r4,8(r2)
    25b8:	00049800 	call	4980 <__vfprintf_internal>
    25bc:	dfc00017 	ldw	ra,0(sp)
    25c0:	dec00404 	addi	sp,sp,16
    25c4:	f800283a 	ret

000025c8 <_puts_r>:
    25c8:	defff604 	addi	sp,sp,-40
    25cc:	dc000715 	stw	r16,28(sp)
    25d0:	2021883a 	mov	r16,r4
    25d4:	2809883a 	mov	r4,r5
    25d8:	dc400815 	stw	r17,32(sp)
    25dc:	dfc00915 	stw	ra,36(sp)
    25e0:	2823883a 	mov	r17,r5
    25e4:	00026f00 	call	26f0 <strlen>
    25e8:	10c00044 	addi	r3,r2,1
    25ec:	d8800115 	stw	r2,4(sp)
    25f0:	00800074 	movhi	r2,1
    25f4:	1084f304 	addi	r2,r2,5068
    25f8:	d8800215 	stw	r2,8(sp)
    25fc:	00800044 	movi	r2,1
    2600:	d8800315 	stw	r2,12(sp)
    2604:	00800084 	movi	r2,2
    2608:	dc400015 	stw	r17,0(sp)
    260c:	d8c00615 	stw	r3,24(sp)
    2610:	dec00415 	stw	sp,16(sp)
    2614:	d8800515 	stw	r2,20(sp)
    2618:	80000226 	beq	r16,zero,2624 <_puts_r+0x5c>
    261c:	80800e17 	ldw	r2,56(r16)
    2620:	10001426 	beq	r2,zero,2674 <_puts_r+0xac>
    2624:	81400217 	ldw	r5,8(r16)
    2628:	2880030b 	ldhu	r2,12(r5)
    262c:	10c8000c 	andi	r3,r2,8192
    2630:	1800061e 	bne	r3,zero,264c <_puts_r+0x84>
    2634:	29001917 	ldw	r4,100(r5)
    2638:	00f7ffc4 	movi	r3,-8193
    263c:	10880014 	ori	r2,r2,8192
    2640:	20c6703a 	and	r3,r4,r3
    2644:	2880030d 	sth	r2,12(r5)
    2648:	28c01915 	stw	r3,100(r5)
    264c:	d9800404 	addi	r6,sp,16
    2650:	8009883a 	mov	r4,r16
    2654:	0006eb00 	call	6eb0 <__sfvwrite_r>
    2658:	1000091e 	bne	r2,zero,2680 <_puts_r+0xb8>
    265c:	00800284 	movi	r2,10
    2660:	dfc00917 	ldw	ra,36(sp)
    2664:	dc400817 	ldw	r17,32(sp)
    2668:	dc000717 	ldw	r16,28(sp)
    266c:	dec00a04 	addi	sp,sp,40
    2670:	f800283a 	ret
    2674:	8009883a 	mov	r4,r16
    2678:	0006a2c0 	call	6a2c <__sinit>
    267c:	003fe906 	br	2624 <__alt_data_end+0xff002624>
    2680:	00bfffc4 	movi	r2,-1
    2684:	003ff606 	br	2660 <__alt_data_end+0xff002660>

00002688 <puts>:
    2688:	00800074 	movhi	r2,1
    268c:	108ca304 	addi	r2,r2,12940
    2690:	200b883a 	mov	r5,r4
    2694:	11000017 	ldw	r4,0(r2)
    2698:	00025c81 	jmpi	25c8 <_puts_r>

0000269c <_sbrk_r>:
    269c:	defffd04 	addi	sp,sp,-12
    26a0:	dc000015 	stw	r16,0(sp)
    26a4:	04000074 	movhi	r16,1
    26a8:	dc400115 	stw	r17,4(sp)
    26ac:	8413b804 	addi	r16,r16,20192
    26b0:	2023883a 	mov	r17,r4
    26b4:	2809883a 	mov	r4,r5
    26b8:	dfc00215 	stw	ra,8(sp)
    26bc:	80000015 	stw	zero,0(r16)
    26c0:	000ec1c0 	call	ec1c <sbrk>
    26c4:	00ffffc4 	movi	r3,-1
    26c8:	10c00526 	beq	r2,r3,26e0 <_sbrk_r+0x44>
    26cc:	dfc00217 	ldw	ra,8(sp)
    26d0:	dc400117 	ldw	r17,4(sp)
    26d4:	dc000017 	ldw	r16,0(sp)
    26d8:	dec00304 	addi	sp,sp,12
    26dc:	f800283a 	ret
    26e0:	80c00017 	ldw	r3,0(r16)
    26e4:	183ff926 	beq	r3,zero,26cc <__alt_data_end+0xff0026cc>
    26e8:	88c00015 	stw	r3,0(r17)
    26ec:	003ff706 	br	26cc <__alt_data_end+0xff0026cc>

000026f0 <strlen>:
    26f0:	208000cc 	andi	r2,r4,3
    26f4:	10002026 	beq	r2,zero,2778 <strlen+0x88>
    26f8:	20800007 	ldb	r2,0(r4)
    26fc:	10002026 	beq	r2,zero,2780 <strlen+0x90>
    2700:	2005883a 	mov	r2,r4
    2704:	00000206 	br	2710 <strlen+0x20>
    2708:	10c00007 	ldb	r3,0(r2)
    270c:	18001826 	beq	r3,zero,2770 <strlen+0x80>
    2710:	10800044 	addi	r2,r2,1
    2714:	10c000cc 	andi	r3,r2,3
    2718:	183ffb1e 	bne	r3,zero,2708 <__alt_data_end+0xff002708>
    271c:	10c00017 	ldw	r3,0(r2)
    2720:	01ffbff4 	movhi	r7,65279
    2724:	39ffbfc4 	addi	r7,r7,-257
    2728:	00ca303a 	nor	r5,zero,r3
    272c:	01a02074 	movhi	r6,32897
    2730:	19c7883a 	add	r3,r3,r7
    2734:	31a02004 	addi	r6,r6,-32640
    2738:	1946703a 	and	r3,r3,r5
    273c:	1986703a 	and	r3,r3,r6
    2740:	1800091e 	bne	r3,zero,2768 <strlen+0x78>
    2744:	10800104 	addi	r2,r2,4
    2748:	10c00017 	ldw	r3,0(r2)
    274c:	19cb883a 	add	r5,r3,r7
    2750:	00c6303a 	nor	r3,zero,r3
    2754:	28c6703a 	and	r3,r5,r3
    2758:	1986703a 	and	r3,r3,r6
    275c:	183ff926 	beq	r3,zero,2744 <__alt_data_end+0xff002744>
    2760:	00000106 	br	2768 <strlen+0x78>
    2764:	10800044 	addi	r2,r2,1
    2768:	10c00007 	ldb	r3,0(r2)
    276c:	183ffd1e 	bne	r3,zero,2764 <__alt_data_end+0xff002764>
    2770:	1105c83a 	sub	r2,r2,r4
    2774:	f800283a 	ret
    2778:	2005883a 	mov	r2,r4
    277c:	003fe706 	br	271c <__alt_data_end+0xff00271c>
    2780:	0005883a 	mov	r2,zero
    2784:	f800283a 	ret

00002788 <___vfprintf_internal_r>:
    2788:	deffb804 	addi	sp,sp,-288
    278c:	dfc04715 	stw	ra,284(sp)
    2790:	ddc04515 	stw	r23,276(sp)
    2794:	dd404315 	stw	r21,268(sp)
    2798:	d9002c15 	stw	r4,176(sp)
    279c:	282f883a 	mov	r23,r5
    27a0:	302b883a 	mov	r21,r6
    27a4:	d9c02d15 	stw	r7,180(sp)
    27a8:	df004615 	stw	fp,280(sp)
    27ac:	dd804415 	stw	r22,272(sp)
    27b0:	dd004215 	stw	r20,264(sp)
    27b4:	dcc04115 	stw	r19,260(sp)
    27b8:	dc804015 	stw	r18,256(sp)
    27bc:	dc403f15 	stw	r17,252(sp)
    27c0:	dc003e15 	stw	r16,248(sp)
    27c4:	00075a00 	call	75a0 <_localeconv_r>
    27c8:	10800017 	ldw	r2,0(r2)
    27cc:	1009883a 	mov	r4,r2
    27d0:	d8803415 	stw	r2,208(sp)
    27d4:	00026f00 	call	26f0 <strlen>
    27d8:	d8803715 	stw	r2,220(sp)
    27dc:	d8802c17 	ldw	r2,176(sp)
    27e0:	10000226 	beq	r2,zero,27ec <___vfprintf_internal_r+0x64>
    27e4:	10800e17 	ldw	r2,56(r2)
    27e8:	1000f926 	beq	r2,zero,2bd0 <___vfprintf_internal_r+0x448>
    27ec:	b880030b 	ldhu	r2,12(r23)
    27f0:	10c8000c 	andi	r3,r2,8192
    27f4:	1800061e 	bne	r3,zero,2810 <___vfprintf_internal_r+0x88>
    27f8:	b9001917 	ldw	r4,100(r23)
    27fc:	00f7ffc4 	movi	r3,-8193
    2800:	10880014 	ori	r2,r2,8192
    2804:	20c6703a 	and	r3,r4,r3
    2808:	b880030d 	sth	r2,12(r23)
    280c:	b8c01915 	stw	r3,100(r23)
    2810:	10c0020c 	andi	r3,r2,8
    2814:	1800c126 	beq	r3,zero,2b1c <___vfprintf_internal_r+0x394>
    2818:	b8c00417 	ldw	r3,16(r23)
    281c:	1800bf26 	beq	r3,zero,2b1c <___vfprintf_internal_r+0x394>
    2820:	1080068c 	andi	r2,r2,26
    2824:	00c00284 	movi	r3,10
    2828:	10c0c426 	beq	r2,r3,2b3c <___vfprintf_internal_r+0x3b4>
    282c:	d8c00404 	addi	r3,sp,16
    2830:	05000074 	movhi	r20,1
    2834:	d9001e04 	addi	r4,sp,120
    2838:	a5050884 	addi	r20,r20,5154
    283c:	d8c01e15 	stw	r3,120(sp)
    2840:	d8002015 	stw	zero,128(sp)
    2844:	d8001f15 	stw	zero,124(sp)
    2848:	d8003315 	stw	zero,204(sp)
    284c:	d8003615 	stw	zero,216(sp)
    2850:	d8003815 	stw	zero,224(sp)
    2854:	1811883a 	mov	r8,r3
    2858:	d8003915 	stw	zero,228(sp)
    285c:	d8003a15 	stw	zero,232(sp)
    2860:	d8002f15 	stw	zero,188(sp)
    2864:	d9002815 	stw	r4,160(sp)
    2868:	a8800007 	ldb	r2,0(r21)
    286c:	10027b26 	beq	r2,zero,325c <___vfprintf_internal_r+0xad4>
    2870:	00c00944 	movi	r3,37
    2874:	a821883a 	mov	r16,r21
    2878:	10c0021e 	bne	r2,r3,2884 <___vfprintf_internal_r+0xfc>
    287c:	00001406 	br	28d0 <___vfprintf_internal_r+0x148>
    2880:	10c00326 	beq	r2,r3,2890 <___vfprintf_internal_r+0x108>
    2884:	84000044 	addi	r16,r16,1
    2888:	80800007 	ldb	r2,0(r16)
    288c:	103ffc1e 	bne	r2,zero,2880 <__alt_data_end+0xff002880>
    2890:	8563c83a 	sub	r17,r16,r21
    2894:	88000e26 	beq	r17,zero,28d0 <___vfprintf_internal_r+0x148>
    2898:	d8c02017 	ldw	r3,128(sp)
    289c:	d8801f17 	ldw	r2,124(sp)
    28a0:	45400015 	stw	r21,0(r8)
    28a4:	1c47883a 	add	r3,r3,r17
    28a8:	10800044 	addi	r2,r2,1
    28ac:	d8c02015 	stw	r3,128(sp)
    28b0:	44400115 	stw	r17,4(r8)
    28b4:	d8801f15 	stw	r2,124(sp)
    28b8:	00c001c4 	movi	r3,7
    28bc:	1880a716 	blt	r3,r2,2b5c <___vfprintf_internal_r+0x3d4>
    28c0:	42000204 	addi	r8,r8,8
    28c4:	d9402f17 	ldw	r5,188(sp)
    28c8:	2c4b883a 	add	r5,r5,r17
    28cc:	d9402f15 	stw	r5,188(sp)
    28d0:	80800007 	ldb	r2,0(r16)
    28d4:	1000a826 	beq	r2,zero,2b78 <___vfprintf_internal_r+0x3f0>
    28d8:	84400047 	ldb	r17,1(r16)
    28dc:	00bfffc4 	movi	r2,-1
    28e0:	85400044 	addi	r21,r16,1
    28e4:	d8002785 	stb	zero,158(sp)
    28e8:	0007883a 	mov	r3,zero
    28ec:	000f883a 	mov	r7,zero
    28f0:	d8802915 	stw	r2,164(sp)
    28f4:	d8003115 	stw	zero,196(sp)
    28f8:	0025883a 	mov	r18,zero
    28fc:	01401604 	movi	r5,88
    2900:	01800244 	movi	r6,9
    2904:	02800a84 	movi	r10,42
    2908:	02401b04 	movi	r9,108
    290c:	ad400044 	addi	r21,r21,1
    2910:	88bff804 	addi	r2,r17,-32
    2914:	28830436 	bltu	r5,r2,3528 <___vfprintf_internal_r+0xda0>
    2918:	100490ba 	slli	r2,r2,2
    291c:	01000034 	movhi	r4,0
    2920:	210a4c04 	addi	r4,r4,10544
    2924:	1105883a 	add	r2,r2,r4
    2928:	10800017 	ldw	r2,0(r2)
    292c:	1000683a 	jmp	r2
    2930:	00003448 	cmpgei	zero,zero,209
    2934:	00003528 	cmpgeui	zero,zero,212
    2938:	00003528 	cmpgeui	zero,zero,212
    293c:	00003468 	cmpgeui	zero,zero,209
    2940:	00003528 	cmpgeui	zero,zero,212
    2944:	00003528 	cmpgeui	zero,zero,212
    2948:	00003528 	cmpgeui	zero,zero,212
    294c:	00003528 	cmpgeui	zero,zero,212
    2950:	00003528 	cmpgeui	zero,zero,212
    2954:	00003528 	cmpgeui	zero,zero,212
    2958:	00002bdc 	xori	zero,zero,175
    295c:	00003384 	movi	zero,206
    2960:	00003528 	cmpgeui	zero,zero,212
    2964:	00002aa4 	muli	zero,zero,170
    2968:	00002c04 	movi	zero,176
    296c:	00003528 	cmpgeui	zero,zero,212
    2970:	00002c44 	movi	zero,177
    2974:	00002c50 	cmplti	zero,zero,177
    2978:	00002c50 	cmplti	zero,zero,177
    297c:	00002c50 	cmplti	zero,zero,177
    2980:	00002c50 	cmplti	zero,zero,177
    2984:	00002c50 	cmplti	zero,zero,177
    2988:	00002c50 	cmplti	zero,zero,177
    298c:	00002c50 	cmplti	zero,zero,177
    2990:	00002c50 	cmplti	zero,zero,177
    2994:	00002c50 	cmplti	zero,zero,177
    2998:	00003528 	cmpgeui	zero,zero,212
    299c:	00003528 	cmpgeui	zero,zero,212
    29a0:	00003528 	cmpgeui	zero,zero,212
    29a4:	00003528 	cmpgeui	zero,zero,212
    29a8:	00003528 	cmpgeui	zero,zero,212
    29ac:	00003528 	cmpgeui	zero,zero,212
    29b0:	00003528 	cmpgeui	zero,zero,212
    29b4:	00003528 	cmpgeui	zero,zero,212
    29b8:	00003528 	cmpgeui	zero,zero,212
    29bc:	00003528 	cmpgeui	zero,zero,212
    29c0:	00002c84 	movi	zero,178
    29c4:	00002d40 	call	2d4 <init_camera+0x54>
    29c8:	00003528 	cmpgeui	zero,zero,212
    29cc:	00002d40 	call	2d4 <init_camera+0x54>
    29d0:	00003528 	cmpgeui	zero,zero,212
    29d4:	00003528 	cmpgeui	zero,zero,212
    29d8:	00003528 	cmpgeui	zero,zero,212
    29dc:	00003528 	cmpgeui	zero,zero,212
    29e0:	00002de0 	cmpeqi	zero,zero,183
    29e4:	00003528 	cmpgeui	zero,zero,212
    29e8:	00003528 	cmpgeui	zero,zero,212
    29ec:	00002dec 	andhi	zero,zero,183
    29f0:	00003528 	cmpgeui	zero,zero,212
    29f4:	00003528 	cmpgeui	zero,zero,212
    29f8:	00003528 	cmpgeui	zero,zero,212
    29fc:	00003528 	cmpgeui	zero,zero,212
    2a00:	00003528 	cmpgeui	zero,zero,212
    2a04:	00003264 	muli	zero,zero,201
    2a08:	00003528 	cmpgeui	zero,zero,212
    2a0c:	00003528 	cmpgeui	zero,zero,212
    2a10:	000032c4 	movi	zero,203
    2a14:	00003528 	cmpgeui	zero,zero,212
    2a18:	00003528 	cmpgeui	zero,zero,212
    2a1c:	00003528 	cmpgeui	zero,zero,212
    2a20:	00003528 	cmpgeui	zero,zero,212
    2a24:	00003528 	cmpgeui	zero,zero,212
    2a28:	00003528 	cmpgeui	zero,zero,212
    2a2c:	00003528 	cmpgeui	zero,zero,212
    2a30:	00003528 	cmpgeui	zero,zero,212
    2a34:	00003528 	cmpgeui	zero,zero,212
    2a38:	00003528 	cmpgeui	zero,zero,212
    2a3c:	000034d4 	movui	zero,211
    2a40:	00003474 	movhi	zero,209
    2a44:	00002d40 	call	2d4 <init_camera+0x54>
    2a48:	00002d40 	call	2d4 <init_camera+0x54>
    2a4c:	00002d40 	call	2d4 <init_camera+0x54>
    2a50:	00003484 	movi	zero,210
    2a54:	00003474 	movhi	zero,209
    2a58:	00003528 	cmpgeui	zero,zero,212
    2a5c:	00003528 	cmpgeui	zero,zero,212
    2a60:	00003490 	cmplti	zero,zero,210
    2a64:	00003528 	cmpgeui	zero,zero,212
    2a68:	000034a0 	cmpeqi	zero,zero,210
    2a6c:	00003374 	movhi	zero,205
    2a70:	00002ab0 	cmpltui	zero,zero,170
    2a74:	00003394 	movui	zero,206
    2a78:	00003528 	cmpgeui	zero,zero,212
    2a7c:	000033a0 	cmpeqi	zero,zero,206
    2a80:	00003528 	cmpgeui	zero,zero,212
    2a84:	000033fc 	xorhi	zero,zero,207
    2a88:	00003528 	cmpgeui	zero,zero,212
    2a8c:	00003528 	cmpgeui	zero,zero,212
    2a90:	0000340c 	andi	zero,zero,208
    2a94:	d9003117 	ldw	r4,196(sp)
    2a98:	d8802d15 	stw	r2,180(sp)
    2a9c:	0109c83a 	sub	r4,zero,r4
    2aa0:	d9003115 	stw	r4,196(sp)
    2aa4:	94800114 	ori	r18,r18,4
    2aa8:	ac400007 	ldb	r17,0(r21)
    2aac:	003f9706 	br	290c <__alt_data_end+0xff00290c>
    2ab0:	00800c04 	movi	r2,48
    2ab4:	d9002d17 	ldw	r4,180(sp)
    2ab8:	d9402917 	ldw	r5,164(sp)
    2abc:	d8802705 	stb	r2,156(sp)
    2ac0:	00801e04 	movi	r2,120
    2ac4:	d8802745 	stb	r2,157(sp)
    2ac8:	d8002785 	stb	zero,158(sp)
    2acc:	20c00104 	addi	r3,r4,4
    2ad0:	24c00017 	ldw	r19,0(r4)
    2ad4:	002d883a 	mov	r22,zero
    2ad8:	90800094 	ori	r2,r18,2
    2adc:	28029a16 	blt	r5,zero,3548 <___vfprintf_internal_r+0xdc0>
    2ae0:	00bfdfc4 	movi	r2,-129
    2ae4:	90a4703a 	and	r18,r18,r2
    2ae8:	d8c02d15 	stw	r3,180(sp)
    2aec:	94800094 	ori	r18,r18,2
    2af0:	9802871e 	bne	r19,zero,3510 <___vfprintf_internal_r+0xd88>
    2af4:	00800074 	movhi	r2,1
    2af8:	10850104 	addi	r2,r2,5124
    2afc:	d8803915 	stw	r2,228(sp)
    2b00:	04401e04 	movi	r17,120
    2b04:	d8802917 	ldw	r2,164(sp)
    2b08:	0039883a 	mov	fp,zero
    2b0c:	1001e926 	beq	r2,zero,32b4 <___vfprintf_internal_r+0xb2c>
    2b10:	0027883a 	mov	r19,zero
    2b14:	002d883a 	mov	r22,zero
    2b18:	00020506 	br	3330 <___vfprintf_internal_r+0xba8>
    2b1c:	d9002c17 	ldw	r4,176(sp)
    2b20:	b80b883a 	mov	r5,r23
    2b24:	0004a580 	call	4a58 <__swsetup_r>
    2b28:	1005ac1e 	bne	r2,zero,41dc <___vfprintf_internal_r+0x1a54>
    2b2c:	b880030b 	ldhu	r2,12(r23)
    2b30:	00c00284 	movi	r3,10
    2b34:	1080068c 	andi	r2,r2,26
    2b38:	10ff3c1e 	bne	r2,r3,282c <__alt_data_end+0xff00282c>
    2b3c:	b880038f 	ldh	r2,14(r23)
    2b40:	103f3a16 	blt	r2,zero,282c <__alt_data_end+0xff00282c>
    2b44:	d9c02d17 	ldw	r7,180(sp)
    2b48:	d9002c17 	ldw	r4,176(sp)
    2b4c:	a80d883a 	mov	r6,r21
    2b50:	b80b883a 	mov	r5,r23
    2b54:	000499c0 	call	499c <__sbprintf>
    2b58:	00001106 	br	2ba0 <___vfprintf_internal_r+0x418>
    2b5c:	d9002c17 	ldw	r4,176(sp)
    2b60:	d9801e04 	addi	r6,sp,120
    2b64:	b80b883a 	mov	r5,r23
    2b68:	00095240 	call	9524 <__sprint_r>
    2b6c:	1000081e 	bne	r2,zero,2b90 <___vfprintf_internal_r+0x408>
    2b70:	da000404 	addi	r8,sp,16
    2b74:	003f5306 	br	28c4 <__alt_data_end+0xff0028c4>
    2b78:	d8802017 	ldw	r2,128(sp)
    2b7c:	10000426 	beq	r2,zero,2b90 <___vfprintf_internal_r+0x408>
    2b80:	d9002c17 	ldw	r4,176(sp)
    2b84:	d9801e04 	addi	r6,sp,120
    2b88:	b80b883a 	mov	r5,r23
    2b8c:	00095240 	call	9524 <__sprint_r>
    2b90:	b880030b 	ldhu	r2,12(r23)
    2b94:	1080100c 	andi	r2,r2,64
    2b98:	1005901e 	bne	r2,zero,41dc <___vfprintf_internal_r+0x1a54>
    2b9c:	d8802f17 	ldw	r2,188(sp)
    2ba0:	dfc04717 	ldw	ra,284(sp)
    2ba4:	df004617 	ldw	fp,280(sp)
    2ba8:	ddc04517 	ldw	r23,276(sp)
    2bac:	dd804417 	ldw	r22,272(sp)
    2bb0:	dd404317 	ldw	r21,268(sp)
    2bb4:	dd004217 	ldw	r20,264(sp)
    2bb8:	dcc04117 	ldw	r19,260(sp)
    2bbc:	dc804017 	ldw	r18,256(sp)
    2bc0:	dc403f17 	ldw	r17,252(sp)
    2bc4:	dc003e17 	ldw	r16,248(sp)
    2bc8:	dec04804 	addi	sp,sp,288
    2bcc:	f800283a 	ret
    2bd0:	d9002c17 	ldw	r4,176(sp)
    2bd4:	0006a2c0 	call	6a2c <__sinit>
    2bd8:	003f0406 	br	27ec <__alt_data_end+0xff0027ec>
    2bdc:	d8802d17 	ldw	r2,180(sp)
    2be0:	d9002d17 	ldw	r4,180(sp)
    2be4:	10800017 	ldw	r2,0(r2)
    2be8:	d8803115 	stw	r2,196(sp)
    2bec:	20800104 	addi	r2,r4,4
    2bf0:	d9003117 	ldw	r4,196(sp)
    2bf4:	203fa716 	blt	r4,zero,2a94 <__alt_data_end+0xff002a94>
    2bf8:	d8802d15 	stw	r2,180(sp)
    2bfc:	ac400007 	ldb	r17,0(r21)
    2c00:	003f4206 	br	290c <__alt_data_end+0xff00290c>
    2c04:	ac400007 	ldb	r17,0(r21)
    2c08:	aac00044 	addi	r11,r21,1
    2c0c:	8a872826 	beq	r17,r10,48b0 <___vfprintf_internal_r+0x2128>
    2c10:	88bff404 	addi	r2,r17,-48
    2c14:	0009883a 	mov	r4,zero
    2c18:	30867d36 	bltu	r6,r2,4610 <___vfprintf_internal_r+0x1e88>
    2c1c:	5c400007 	ldb	r17,0(r11)
    2c20:	210002a4 	muli	r4,r4,10
    2c24:	5d400044 	addi	r21,r11,1
    2c28:	a817883a 	mov	r11,r21
    2c2c:	2089883a 	add	r4,r4,r2
    2c30:	88bff404 	addi	r2,r17,-48
    2c34:	30bff92e 	bgeu	r6,r2,2c1c <__alt_data_end+0xff002c1c>
    2c38:	2005c916 	blt	r4,zero,4360 <___vfprintf_internal_r+0x1bd8>
    2c3c:	d9002915 	stw	r4,164(sp)
    2c40:	003f3306 	br	2910 <__alt_data_end+0xff002910>
    2c44:	94802014 	ori	r18,r18,128
    2c48:	ac400007 	ldb	r17,0(r21)
    2c4c:	003f2f06 	br	290c <__alt_data_end+0xff00290c>
    2c50:	a809883a 	mov	r4,r21
    2c54:	d8003115 	stw	zero,196(sp)
    2c58:	88bff404 	addi	r2,r17,-48
    2c5c:	0017883a 	mov	r11,zero
    2c60:	24400007 	ldb	r17,0(r4)
    2c64:	5ac002a4 	muli	r11,r11,10
    2c68:	ad400044 	addi	r21,r21,1
    2c6c:	a809883a 	mov	r4,r21
    2c70:	12d7883a 	add	r11,r2,r11
    2c74:	88bff404 	addi	r2,r17,-48
    2c78:	30bff92e 	bgeu	r6,r2,2c60 <__alt_data_end+0xff002c60>
    2c7c:	dac03115 	stw	r11,196(sp)
    2c80:	003f2306 	br	2910 <__alt_data_end+0xff002910>
    2c84:	18c03fcc 	andi	r3,r3,255
    2c88:	18072b1e 	bne	r3,zero,4938 <___vfprintf_internal_r+0x21b0>
    2c8c:	94800414 	ori	r18,r18,16
    2c90:	9080080c 	andi	r2,r18,32
    2c94:	10037b26 	beq	r2,zero,3a84 <___vfprintf_internal_r+0x12fc>
    2c98:	d9402d17 	ldw	r5,180(sp)
    2c9c:	28800117 	ldw	r2,4(r5)
    2ca0:	2cc00017 	ldw	r19,0(r5)
    2ca4:	29400204 	addi	r5,r5,8
    2ca8:	d9402d15 	stw	r5,180(sp)
    2cac:	102d883a 	mov	r22,r2
    2cb0:	10044b16 	blt	r2,zero,3de0 <___vfprintf_internal_r+0x1658>
    2cb4:	d9402917 	ldw	r5,164(sp)
    2cb8:	df002783 	ldbu	fp,158(sp)
    2cbc:	2803bc16 	blt	r5,zero,3bb0 <___vfprintf_internal_r+0x1428>
    2cc0:	00ffdfc4 	movi	r3,-129
    2cc4:	9d84b03a 	or	r2,r19,r22
    2cc8:	90e4703a 	and	r18,r18,r3
    2ccc:	10017726 	beq	r2,zero,32ac <___vfprintf_internal_r+0xb24>
    2cd0:	b0038326 	beq	r22,zero,3ae0 <___vfprintf_internal_r+0x1358>
    2cd4:	dc402a15 	stw	r17,168(sp)
    2cd8:	dc001e04 	addi	r16,sp,120
    2cdc:	b023883a 	mov	r17,r22
    2ce0:	402d883a 	mov	r22,r8
    2ce4:	9809883a 	mov	r4,r19
    2ce8:	880b883a 	mov	r5,r17
    2cec:	01800284 	movi	r6,10
    2cf0:	000f883a 	mov	r7,zero
    2cf4:	000b91c0 	call	b91c <__umoddi3>
    2cf8:	10800c04 	addi	r2,r2,48
    2cfc:	843fffc4 	addi	r16,r16,-1
    2d00:	9809883a 	mov	r4,r19
    2d04:	880b883a 	mov	r5,r17
    2d08:	80800005 	stb	r2,0(r16)
    2d0c:	01800284 	movi	r6,10
    2d10:	000f883a 	mov	r7,zero
    2d14:	000b3a40 	call	b3a4 <__udivdi3>
    2d18:	1027883a 	mov	r19,r2
    2d1c:	10c4b03a 	or	r2,r2,r3
    2d20:	1823883a 	mov	r17,r3
    2d24:	103fef1e 	bne	r2,zero,2ce4 <__alt_data_end+0xff002ce4>
    2d28:	d8c02817 	ldw	r3,160(sp)
    2d2c:	dc402a17 	ldw	r17,168(sp)
    2d30:	b011883a 	mov	r8,r22
    2d34:	1c07c83a 	sub	r3,r3,r16
    2d38:	d8c02e15 	stw	r3,184(sp)
    2d3c:	00005906 	br	2ea4 <___vfprintf_internal_r+0x71c>
    2d40:	18c03fcc 	andi	r3,r3,255
    2d44:	1806fa1e 	bne	r3,zero,4930 <___vfprintf_internal_r+0x21a8>
    2d48:	9080020c 	andi	r2,r18,8
    2d4c:	10048a26 	beq	r2,zero,3f78 <___vfprintf_internal_r+0x17f0>
    2d50:	d8c02d17 	ldw	r3,180(sp)
    2d54:	d9002d17 	ldw	r4,180(sp)
    2d58:	d9402d17 	ldw	r5,180(sp)
    2d5c:	18c00017 	ldw	r3,0(r3)
    2d60:	21000117 	ldw	r4,4(r4)
    2d64:	29400204 	addi	r5,r5,8
    2d68:	d8c03615 	stw	r3,216(sp)
    2d6c:	d9003815 	stw	r4,224(sp)
    2d70:	d9402d15 	stw	r5,180(sp)
    2d74:	d9003617 	ldw	r4,216(sp)
    2d78:	d9403817 	ldw	r5,224(sp)
    2d7c:	da003d15 	stw	r8,244(sp)
    2d80:	04000044 	movi	r16,1
    2d84:	000919c0 	call	919c <__fpclassifyd>
    2d88:	da003d17 	ldw	r8,244(sp)
    2d8c:	14041f1e 	bne	r2,r16,3e0c <___vfprintf_internal_r+0x1684>
    2d90:	d9003617 	ldw	r4,216(sp)
    2d94:	d9403817 	ldw	r5,224(sp)
    2d98:	000d883a 	mov	r6,zero
    2d9c:	000f883a 	mov	r7,zero
    2da0:	000d14c0 	call	d14c <__ledf2>
    2da4:	da003d17 	ldw	r8,244(sp)
    2da8:	1005be16 	blt	r2,zero,44a4 <___vfprintf_internal_r+0x1d1c>
    2dac:	df002783 	ldbu	fp,158(sp)
    2db0:	008011c4 	movi	r2,71
    2db4:	1445330e 	bge	r2,r17,4284 <___vfprintf_internal_r+0x1afc>
    2db8:	04000074 	movhi	r16,1
    2dbc:	8404f904 	addi	r16,r16,5092
    2dc0:	00c000c4 	movi	r3,3
    2dc4:	00bfdfc4 	movi	r2,-129
    2dc8:	d8c02a15 	stw	r3,168(sp)
    2dcc:	90a4703a 	and	r18,r18,r2
    2dd0:	d8c02e15 	stw	r3,184(sp)
    2dd4:	d8002915 	stw	zero,164(sp)
    2dd8:	d8003215 	stw	zero,200(sp)
    2ddc:	00003706 	br	2ebc <___vfprintf_internal_r+0x734>
    2de0:	94800214 	ori	r18,r18,8
    2de4:	ac400007 	ldb	r17,0(r21)
    2de8:	003ec806 	br	290c <__alt_data_end+0xff00290c>
    2dec:	18c03fcc 	andi	r3,r3,255
    2df0:	1806db1e 	bne	r3,zero,4960 <___vfprintf_internal_r+0x21d8>
    2df4:	94800414 	ori	r18,r18,16
    2df8:	9080080c 	andi	r2,r18,32
    2dfc:	1002d826 	beq	r2,zero,3960 <___vfprintf_internal_r+0x11d8>
    2e00:	d9402d17 	ldw	r5,180(sp)
    2e04:	d8c02917 	ldw	r3,164(sp)
    2e08:	d8002785 	stb	zero,158(sp)
    2e0c:	28800204 	addi	r2,r5,8
    2e10:	2cc00017 	ldw	r19,0(r5)
    2e14:	2d800117 	ldw	r22,4(r5)
    2e18:	18048f16 	blt	r3,zero,4058 <___vfprintf_internal_r+0x18d0>
    2e1c:	013fdfc4 	movi	r4,-129
    2e20:	9d86b03a 	or	r3,r19,r22
    2e24:	d8802d15 	stw	r2,180(sp)
    2e28:	9124703a 	and	r18,r18,r4
    2e2c:	1802d91e 	bne	r3,zero,3994 <___vfprintf_internal_r+0x120c>
    2e30:	d8c02917 	ldw	r3,164(sp)
    2e34:	0039883a 	mov	fp,zero
    2e38:	1805c326 	beq	r3,zero,4548 <___vfprintf_internal_r+0x1dc0>
    2e3c:	0027883a 	mov	r19,zero
    2e40:	002d883a 	mov	r22,zero
    2e44:	dc001e04 	addi	r16,sp,120
    2e48:	9806d0fa 	srli	r3,r19,3
    2e4c:	b008977a 	slli	r4,r22,29
    2e50:	b02cd0fa 	srli	r22,r22,3
    2e54:	9cc001cc 	andi	r19,r19,7
    2e58:	98800c04 	addi	r2,r19,48
    2e5c:	843fffc4 	addi	r16,r16,-1
    2e60:	20e6b03a 	or	r19,r4,r3
    2e64:	80800005 	stb	r2,0(r16)
    2e68:	9d86b03a 	or	r3,r19,r22
    2e6c:	183ff61e 	bne	r3,zero,2e48 <__alt_data_end+0xff002e48>
    2e70:	90c0004c 	andi	r3,r18,1
    2e74:	18013b26 	beq	r3,zero,3364 <___vfprintf_internal_r+0xbdc>
    2e78:	10803fcc 	andi	r2,r2,255
    2e7c:	1080201c 	xori	r2,r2,128
    2e80:	10bfe004 	addi	r2,r2,-128
    2e84:	00c00c04 	movi	r3,48
    2e88:	10c13626 	beq	r2,r3,3364 <___vfprintf_internal_r+0xbdc>
    2e8c:	80ffffc5 	stb	r3,-1(r16)
    2e90:	d8c02817 	ldw	r3,160(sp)
    2e94:	80bfffc4 	addi	r2,r16,-1
    2e98:	1021883a 	mov	r16,r2
    2e9c:	1887c83a 	sub	r3,r3,r2
    2ea0:	d8c02e15 	stw	r3,184(sp)
    2ea4:	d8802e17 	ldw	r2,184(sp)
    2ea8:	d9002917 	ldw	r4,164(sp)
    2eac:	1100010e 	bge	r2,r4,2eb4 <___vfprintf_internal_r+0x72c>
    2eb0:	2005883a 	mov	r2,r4
    2eb4:	d8802a15 	stw	r2,168(sp)
    2eb8:	d8003215 	stw	zero,200(sp)
    2ebc:	e7003fcc 	andi	fp,fp,255
    2ec0:	e700201c 	xori	fp,fp,128
    2ec4:	e73fe004 	addi	fp,fp,-128
    2ec8:	e0000326 	beq	fp,zero,2ed8 <___vfprintf_internal_r+0x750>
    2ecc:	d8c02a17 	ldw	r3,168(sp)
    2ed0:	18c00044 	addi	r3,r3,1
    2ed4:	d8c02a15 	stw	r3,168(sp)
    2ed8:	90c0008c 	andi	r3,r18,2
    2edc:	d8c02b15 	stw	r3,172(sp)
    2ee0:	18000326 	beq	r3,zero,2ef0 <___vfprintf_internal_r+0x768>
    2ee4:	d8c02a17 	ldw	r3,168(sp)
    2ee8:	18c00084 	addi	r3,r3,2
    2eec:	d8c02a15 	stw	r3,168(sp)
    2ef0:	90c0210c 	andi	r3,r18,132
    2ef4:	d8c03015 	stw	r3,192(sp)
    2ef8:	1801a31e 	bne	r3,zero,3588 <___vfprintf_internal_r+0xe00>
    2efc:	d9003117 	ldw	r4,196(sp)
    2f00:	d8c02a17 	ldw	r3,168(sp)
    2f04:	20e7c83a 	sub	r19,r4,r3
    2f08:	04c19f0e 	bge	zero,r19,3588 <___vfprintf_internal_r+0xe00>
    2f0c:	02400404 	movi	r9,16
    2f10:	d8c02017 	ldw	r3,128(sp)
    2f14:	d8801f17 	ldw	r2,124(sp)
    2f18:	4cc50d0e 	bge	r9,r19,4350 <___vfprintf_internal_r+0x1bc8>
    2f1c:	01400074 	movhi	r5,1
    2f20:	29450c84 	addi	r5,r5,5170
    2f24:	dc403b15 	stw	r17,236(sp)
    2f28:	d9403515 	stw	r5,212(sp)
    2f2c:	9823883a 	mov	r17,r19
    2f30:	482d883a 	mov	r22,r9
    2f34:	9027883a 	mov	r19,r18
    2f38:	070001c4 	movi	fp,7
    2f3c:	8025883a 	mov	r18,r16
    2f40:	dc002c17 	ldw	r16,176(sp)
    2f44:	00000306 	br	2f54 <___vfprintf_internal_r+0x7cc>
    2f48:	8c7ffc04 	addi	r17,r17,-16
    2f4c:	42000204 	addi	r8,r8,8
    2f50:	b440130e 	bge	r22,r17,2fa0 <___vfprintf_internal_r+0x818>
    2f54:	01000074 	movhi	r4,1
    2f58:	18c00404 	addi	r3,r3,16
    2f5c:	10800044 	addi	r2,r2,1
    2f60:	21050c84 	addi	r4,r4,5170
    2f64:	41000015 	stw	r4,0(r8)
    2f68:	45800115 	stw	r22,4(r8)
    2f6c:	d8c02015 	stw	r3,128(sp)
    2f70:	d8801f15 	stw	r2,124(sp)
    2f74:	e0bff40e 	bge	fp,r2,2f48 <__alt_data_end+0xff002f48>
    2f78:	d9801e04 	addi	r6,sp,120
    2f7c:	b80b883a 	mov	r5,r23
    2f80:	8009883a 	mov	r4,r16
    2f84:	00095240 	call	9524 <__sprint_r>
    2f88:	103f011e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    2f8c:	8c7ffc04 	addi	r17,r17,-16
    2f90:	d8c02017 	ldw	r3,128(sp)
    2f94:	d8801f17 	ldw	r2,124(sp)
    2f98:	da000404 	addi	r8,sp,16
    2f9c:	b47fed16 	blt	r22,r17,2f54 <__alt_data_end+0xff002f54>
    2fa0:	9021883a 	mov	r16,r18
    2fa4:	9825883a 	mov	r18,r19
    2fa8:	8827883a 	mov	r19,r17
    2fac:	dc403b17 	ldw	r17,236(sp)
    2fb0:	d9403517 	ldw	r5,212(sp)
    2fb4:	98c7883a 	add	r3,r19,r3
    2fb8:	10800044 	addi	r2,r2,1
    2fbc:	41400015 	stw	r5,0(r8)
    2fc0:	44c00115 	stw	r19,4(r8)
    2fc4:	d8c02015 	stw	r3,128(sp)
    2fc8:	d8801f15 	stw	r2,124(sp)
    2fcc:	010001c4 	movi	r4,7
    2fd0:	2082a316 	blt	r4,r2,3a60 <___vfprintf_internal_r+0x12d8>
    2fd4:	df002787 	ldb	fp,158(sp)
    2fd8:	42000204 	addi	r8,r8,8
    2fdc:	e0000c26 	beq	fp,zero,3010 <___vfprintf_internal_r+0x888>
    2fe0:	d8801f17 	ldw	r2,124(sp)
    2fe4:	d9002784 	addi	r4,sp,158
    2fe8:	18c00044 	addi	r3,r3,1
    2fec:	10800044 	addi	r2,r2,1
    2ff0:	41000015 	stw	r4,0(r8)
    2ff4:	01000044 	movi	r4,1
    2ff8:	41000115 	stw	r4,4(r8)
    2ffc:	d8c02015 	stw	r3,128(sp)
    3000:	d8801f15 	stw	r2,124(sp)
    3004:	010001c4 	movi	r4,7
    3008:	20823c16 	blt	r4,r2,38fc <___vfprintf_internal_r+0x1174>
    300c:	42000204 	addi	r8,r8,8
    3010:	d8802b17 	ldw	r2,172(sp)
    3014:	10000c26 	beq	r2,zero,3048 <___vfprintf_internal_r+0x8c0>
    3018:	d8801f17 	ldw	r2,124(sp)
    301c:	d9002704 	addi	r4,sp,156
    3020:	18c00084 	addi	r3,r3,2
    3024:	10800044 	addi	r2,r2,1
    3028:	41000015 	stw	r4,0(r8)
    302c:	01000084 	movi	r4,2
    3030:	41000115 	stw	r4,4(r8)
    3034:	d8c02015 	stw	r3,128(sp)
    3038:	d8801f15 	stw	r2,124(sp)
    303c:	010001c4 	movi	r4,7
    3040:	20823616 	blt	r4,r2,391c <___vfprintf_internal_r+0x1194>
    3044:	42000204 	addi	r8,r8,8
    3048:	d9003017 	ldw	r4,192(sp)
    304c:	00802004 	movi	r2,128
    3050:	20819926 	beq	r4,r2,36b8 <___vfprintf_internal_r+0xf30>
    3054:	d9402917 	ldw	r5,164(sp)
    3058:	d8802e17 	ldw	r2,184(sp)
    305c:	28adc83a 	sub	r22,r5,r2
    3060:	0580310e 	bge	zero,r22,3128 <___vfprintf_internal_r+0x9a0>
    3064:	07000404 	movi	fp,16
    3068:	d8801f17 	ldw	r2,124(sp)
    306c:	e584140e 	bge	fp,r22,40c0 <___vfprintf_internal_r+0x1938>
    3070:	01400074 	movhi	r5,1
    3074:	29450884 	addi	r5,r5,5154
    3078:	dc402915 	stw	r17,164(sp)
    307c:	d9402b15 	stw	r5,172(sp)
    3080:	b023883a 	mov	r17,r22
    3084:	04c001c4 	movi	r19,7
    3088:	a82d883a 	mov	r22,r21
    308c:	902b883a 	mov	r21,r18
    3090:	8025883a 	mov	r18,r16
    3094:	dc002c17 	ldw	r16,176(sp)
    3098:	00000306 	br	30a8 <___vfprintf_internal_r+0x920>
    309c:	8c7ffc04 	addi	r17,r17,-16
    30a0:	42000204 	addi	r8,r8,8
    30a4:	e440110e 	bge	fp,r17,30ec <___vfprintf_internal_r+0x964>
    30a8:	18c00404 	addi	r3,r3,16
    30ac:	10800044 	addi	r2,r2,1
    30b0:	45000015 	stw	r20,0(r8)
    30b4:	47000115 	stw	fp,4(r8)
    30b8:	d8c02015 	stw	r3,128(sp)
    30bc:	d8801f15 	stw	r2,124(sp)
    30c0:	98bff60e 	bge	r19,r2,309c <__alt_data_end+0xff00309c>
    30c4:	d9801e04 	addi	r6,sp,120
    30c8:	b80b883a 	mov	r5,r23
    30cc:	8009883a 	mov	r4,r16
    30d0:	00095240 	call	9524 <__sprint_r>
    30d4:	103eae1e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    30d8:	8c7ffc04 	addi	r17,r17,-16
    30dc:	d8c02017 	ldw	r3,128(sp)
    30e0:	d8801f17 	ldw	r2,124(sp)
    30e4:	da000404 	addi	r8,sp,16
    30e8:	e47fef16 	blt	fp,r17,30a8 <__alt_data_end+0xff0030a8>
    30ec:	9021883a 	mov	r16,r18
    30f0:	a825883a 	mov	r18,r21
    30f4:	b02b883a 	mov	r21,r22
    30f8:	882d883a 	mov	r22,r17
    30fc:	dc402917 	ldw	r17,164(sp)
    3100:	d9002b17 	ldw	r4,172(sp)
    3104:	1d87883a 	add	r3,r3,r22
    3108:	10800044 	addi	r2,r2,1
    310c:	41000015 	stw	r4,0(r8)
    3110:	45800115 	stw	r22,4(r8)
    3114:	d8c02015 	stw	r3,128(sp)
    3118:	d8801f15 	stw	r2,124(sp)
    311c:	010001c4 	movi	r4,7
    3120:	2081ee16 	blt	r4,r2,38dc <___vfprintf_internal_r+0x1154>
    3124:	42000204 	addi	r8,r8,8
    3128:	9080400c 	andi	r2,r18,256
    312c:	1001181e 	bne	r2,zero,3590 <___vfprintf_internal_r+0xe08>
    3130:	d9402e17 	ldw	r5,184(sp)
    3134:	d8801f17 	ldw	r2,124(sp)
    3138:	44000015 	stw	r16,0(r8)
    313c:	1947883a 	add	r3,r3,r5
    3140:	10800044 	addi	r2,r2,1
    3144:	41400115 	stw	r5,4(r8)
    3148:	d8c02015 	stw	r3,128(sp)
    314c:	d8801f15 	stw	r2,124(sp)
    3150:	010001c4 	movi	r4,7
    3154:	2081d316 	blt	r4,r2,38a4 <___vfprintf_internal_r+0x111c>
    3158:	42000204 	addi	r8,r8,8
    315c:	9480010c 	andi	r18,r18,4
    3160:	90003226 	beq	r18,zero,322c <___vfprintf_internal_r+0xaa4>
    3164:	d9403117 	ldw	r5,196(sp)
    3168:	d8802a17 	ldw	r2,168(sp)
    316c:	28a1c83a 	sub	r16,r5,r2
    3170:	04002e0e 	bge	zero,r16,322c <___vfprintf_internal_r+0xaa4>
    3174:	04400404 	movi	r17,16
    3178:	d8801f17 	ldw	r2,124(sp)
    317c:	8c04a20e 	bge	r17,r16,4408 <___vfprintf_internal_r+0x1c80>
    3180:	01400074 	movhi	r5,1
    3184:	29450c84 	addi	r5,r5,5170
    3188:	d9403515 	stw	r5,212(sp)
    318c:	048001c4 	movi	r18,7
    3190:	dcc02c17 	ldw	r19,176(sp)
    3194:	00000306 	br	31a4 <___vfprintf_internal_r+0xa1c>
    3198:	843ffc04 	addi	r16,r16,-16
    319c:	42000204 	addi	r8,r8,8
    31a0:	8c00130e 	bge	r17,r16,31f0 <___vfprintf_internal_r+0xa68>
    31a4:	01000074 	movhi	r4,1
    31a8:	18c00404 	addi	r3,r3,16
    31ac:	10800044 	addi	r2,r2,1
    31b0:	21050c84 	addi	r4,r4,5170
    31b4:	41000015 	stw	r4,0(r8)
    31b8:	44400115 	stw	r17,4(r8)
    31bc:	d8c02015 	stw	r3,128(sp)
    31c0:	d8801f15 	stw	r2,124(sp)
    31c4:	90bff40e 	bge	r18,r2,3198 <__alt_data_end+0xff003198>
    31c8:	d9801e04 	addi	r6,sp,120
    31cc:	b80b883a 	mov	r5,r23
    31d0:	9809883a 	mov	r4,r19
    31d4:	00095240 	call	9524 <__sprint_r>
    31d8:	103e6d1e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    31dc:	843ffc04 	addi	r16,r16,-16
    31e0:	d8c02017 	ldw	r3,128(sp)
    31e4:	d8801f17 	ldw	r2,124(sp)
    31e8:	da000404 	addi	r8,sp,16
    31ec:	8c3fed16 	blt	r17,r16,31a4 <__alt_data_end+0xff0031a4>
    31f0:	d9403517 	ldw	r5,212(sp)
    31f4:	1c07883a 	add	r3,r3,r16
    31f8:	10800044 	addi	r2,r2,1
    31fc:	41400015 	stw	r5,0(r8)
    3200:	44000115 	stw	r16,4(r8)
    3204:	d8c02015 	stw	r3,128(sp)
    3208:	d8801f15 	stw	r2,124(sp)
    320c:	010001c4 	movi	r4,7
    3210:	2080060e 	bge	r4,r2,322c <___vfprintf_internal_r+0xaa4>
    3214:	d9002c17 	ldw	r4,176(sp)
    3218:	d9801e04 	addi	r6,sp,120
    321c:	b80b883a 	mov	r5,r23
    3220:	00095240 	call	9524 <__sprint_r>
    3224:	103e5a1e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    3228:	d8c02017 	ldw	r3,128(sp)
    322c:	d8803117 	ldw	r2,196(sp)
    3230:	d9002a17 	ldw	r4,168(sp)
    3234:	1100010e 	bge	r2,r4,323c <___vfprintf_internal_r+0xab4>
    3238:	2005883a 	mov	r2,r4
    323c:	d9402f17 	ldw	r5,188(sp)
    3240:	288b883a 	add	r5,r5,r2
    3244:	d9402f15 	stw	r5,188(sp)
    3248:	18019e1e 	bne	r3,zero,38c4 <___vfprintf_internal_r+0x113c>
    324c:	a8800007 	ldb	r2,0(r21)
    3250:	d8001f15 	stw	zero,124(sp)
    3254:	da000404 	addi	r8,sp,16
    3258:	103d851e 	bne	r2,zero,2870 <__alt_data_end+0xff002870>
    325c:	a821883a 	mov	r16,r21
    3260:	003d9b06 	br	28d0 <__alt_data_end+0xff0028d0>
    3264:	18c03fcc 	andi	r3,r3,255
    3268:	1805c11e 	bne	r3,zero,4970 <___vfprintf_internal_r+0x21e8>
    326c:	94800414 	ori	r18,r18,16
    3270:	9080080c 	andi	r2,r18,32
    3274:	10020c26 	beq	r2,zero,3aa8 <___vfprintf_internal_r+0x1320>
    3278:	d8802d17 	ldw	r2,180(sp)
    327c:	d9002917 	ldw	r4,164(sp)
    3280:	d8002785 	stb	zero,158(sp)
    3284:	10c00204 	addi	r3,r2,8
    3288:	14c00017 	ldw	r19,0(r2)
    328c:	15800117 	ldw	r22,4(r2)
    3290:	20040f16 	blt	r4,zero,42d0 <___vfprintf_internal_r+0x1b48>
    3294:	013fdfc4 	movi	r4,-129
    3298:	9d84b03a 	or	r2,r19,r22
    329c:	d8c02d15 	stw	r3,180(sp)
    32a0:	9124703a 	and	r18,r18,r4
    32a4:	0039883a 	mov	fp,zero
    32a8:	103e891e 	bne	r2,zero,2cd0 <__alt_data_end+0xff002cd0>
    32ac:	d9002917 	ldw	r4,164(sp)
    32b0:	2002c11e 	bne	r4,zero,3db8 <___vfprintf_internal_r+0x1630>
    32b4:	d8002915 	stw	zero,164(sp)
    32b8:	d8002e15 	stw	zero,184(sp)
    32bc:	dc001e04 	addi	r16,sp,120
    32c0:	003ef806 	br	2ea4 <__alt_data_end+0xff002ea4>
    32c4:	18c03fcc 	andi	r3,r3,255
    32c8:	18059d1e 	bne	r3,zero,4940 <___vfprintf_internal_r+0x21b8>
    32cc:	01400074 	movhi	r5,1
    32d0:	2944fc04 	addi	r5,r5,5104
    32d4:	d9403915 	stw	r5,228(sp)
    32d8:	9080080c 	andi	r2,r18,32
    32dc:	10005226 	beq	r2,zero,3428 <___vfprintf_internal_r+0xca0>
    32e0:	d8802d17 	ldw	r2,180(sp)
    32e4:	14c00017 	ldw	r19,0(r2)
    32e8:	15800117 	ldw	r22,4(r2)
    32ec:	10800204 	addi	r2,r2,8
    32f0:	d8802d15 	stw	r2,180(sp)
    32f4:	9080004c 	andi	r2,r18,1
    32f8:	10019026 	beq	r2,zero,393c <___vfprintf_internal_r+0x11b4>
    32fc:	9d84b03a 	or	r2,r19,r22
    3300:	10036926 	beq	r2,zero,40a8 <___vfprintf_internal_r+0x1920>
    3304:	d8c02917 	ldw	r3,164(sp)
    3308:	00800c04 	movi	r2,48
    330c:	d8802705 	stb	r2,156(sp)
    3310:	dc402745 	stb	r17,157(sp)
    3314:	d8002785 	stb	zero,158(sp)
    3318:	90800094 	ori	r2,r18,2
    331c:	18045d16 	blt	r3,zero,4494 <___vfprintf_internal_r+0x1d0c>
    3320:	00bfdfc4 	movi	r2,-129
    3324:	90a4703a 	and	r18,r18,r2
    3328:	94800094 	ori	r18,r18,2
    332c:	0039883a 	mov	fp,zero
    3330:	d9003917 	ldw	r4,228(sp)
    3334:	dc001e04 	addi	r16,sp,120
    3338:	988003cc 	andi	r2,r19,15
    333c:	b006973a 	slli	r3,r22,28
    3340:	2085883a 	add	r2,r4,r2
    3344:	9826d13a 	srli	r19,r19,4
    3348:	10800003 	ldbu	r2,0(r2)
    334c:	b02cd13a 	srli	r22,r22,4
    3350:	843fffc4 	addi	r16,r16,-1
    3354:	1ce6b03a 	or	r19,r3,r19
    3358:	80800005 	stb	r2,0(r16)
    335c:	9d84b03a 	or	r2,r19,r22
    3360:	103ff51e 	bne	r2,zero,3338 <__alt_data_end+0xff003338>
    3364:	d8c02817 	ldw	r3,160(sp)
    3368:	1c07c83a 	sub	r3,r3,r16
    336c:	d8c02e15 	stw	r3,184(sp)
    3370:	003ecc06 	br	2ea4 <__alt_data_end+0xff002ea4>
    3374:	18c03fcc 	andi	r3,r3,255
    3378:	183e9f26 	beq	r3,zero,2df8 <__alt_data_end+0xff002df8>
    337c:	d9c02785 	stb	r7,158(sp)
    3380:	003e9d06 	br	2df8 <__alt_data_end+0xff002df8>
    3384:	00c00044 	movi	r3,1
    3388:	01c00ac4 	movi	r7,43
    338c:	ac400007 	ldb	r17,0(r21)
    3390:	003d5e06 	br	290c <__alt_data_end+0xff00290c>
    3394:	94800814 	ori	r18,r18,32
    3398:	ac400007 	ldb	r17,0(r21)
    339c:	003d5b06 	br	290c <__alt_data_end+0xff00290c>
    33a0:	d8c02d17 	ldw	r3,180(sp)
    33a4:	d8002785 	stb	zero,158(sp)
    33a8:	1c000017 	ldw	r16,0(r3)
    33ac:	1cc00104 	addi	r19,r3,4
    33b0:	80041926 	beq	r16,zero,4418 <___vfprintf_internal_r+0x1c90>
    33b4:	d9002917 	ldw	r4,164(sp)
    33b8:	2003d016 	blt	r4,zero,42fc <___vfprintf_internal_r+0x1b74>
    33bc:	200d883a 	mov	r6,r4
    33c0:	000b883a 	mov	r5,zero
    33c4:	8009883a 	mov	r4,r16
    33c8:	da003d15 	stw	r8,244(sp)
    33cc:	000778c0 	call	778c <memchr>
    33d0:	da003d17 	ldw	r8,244(sp)
    33d4:	10045426 	beq	r2,zero,4528 <___vfprintf_internal_r+0x1da0>
    33d8:	1405c83a 	sub	r2,r2,r16
    33dc:	d8802e15 	stw	r2,184(sp)
    33e0:	1003cc16 	blt	r2,zero,4314 <___vfprintf_internal_r+0x1b8c>
    33e4:	df002783 	ldbu	fp,158(sp)
    33e8:	d8802a15 	stw	r2,168(sp)
    33ec:	dcc02d15 	stw	r19,180(sp)
    33f0:	d8002915 	stw	zero,164(sp)
    33f4:	d8003215 	stw	zero,200(sp)
    33f8:	003eb006 	br	2ebc <__alt_data_end+0xff002ebc>
    33fc:	18c03fcc 	andi	r3,r3,255
    3400:	183f9b26 	beq	r3,zero,3270 <__alt_data_end+0xff003270>
    3404:	d9c02785 	stb	r7,158(sp)
    3408:	003f9906 	br	3270 <__alt_data_end+0xff003270>
    340c:	18c03fcc 	andi	r3,r3,255
    3410:	1805551e 	bne	r3,zero,4968 <___vfprintf_internal_r+0x21e0>
    3414:	01400074 	movhi	r5,1
    3418:	29450104 	addi	r5,r5,5124
    341c:	d9403915 	stw	r5,228(sp)
    3420:	9080080c 	andi	r2,r18,32
    3424:	103fae1e 	bne	r2,zero,32e0 <__alt_data_end+0xff0032e0>
    3428:	9080040c 	andi	r2,r18,16
    342c:	1002de26 	beq	r2,zero,3fa8 <___vfprintf_internal_r+0x1820>
    3430:	d8c02d17 	ldw	r3,180(sp)
    3434:	002d883a 	mov	r22,zero
    3438:	1cc00017 	ldw	r19,0(r3)
    343c:	18c00104 	addi	r3,r3,4
    3440:	d8c02d15 	stw	r3,180(sp)
    3444:	003fab06 	br	32f4 <__alt_data_end+0xff0032f4>
    3448:	38803fcc 	andi	r2,r7,255
    344c:	1080201c 	xori	r2,r2,128
    3450:	10bfe004 	addi	r2,r2,-128
    3454:	1002d21e 	bne	r2,zero,3fa0 <___vfprintf_internal_r+0x1818>
    3458:	00c00044 	movi	r3,1
    345c:	01c00804 	movi	r7,32
    3460:	ac400007 	ldb	r17,0(r21)
    3464:	003d2906 	br	290c <__alt_data_end+0xff00290c>
    3468:	94800054 	ori	r18,r18,1
    346c:	ac400007 	ldb	r17,0(r21)
    3470:	003d2606 	br	290c <__alt_data_end+0xff00290c>
    3474:	18c03fcc 	andi	r3,r3,255
    3478:	183e0526 	beq	r3,zero,2c90 <__alt_data_end+0xff002c90>
    347c:	d9c02785 	stb	r7,158(sp)
    3480:	003e0306 	br	2c90 <__alt_data_end+0xff002c90>
    3484:	94801014 	ori	r18,r18,64
    3488:	ac400007 	ldb	r17,0(r21)
    348c:	003d1f06 	br	290c <__alt_data_end+0xff00290c>
    3490:	ac400007 	ldb	r17,0(r21)
    3494:	8a438726 	beq	r17,r9,42b4 <___vfprintf_internal_r+0x1b2c>
    3498:	94800414 	ori	r18,r18,16
    349c:	003d1b06 	br	290c <__alt_data_end+0xff00290c>
    34a0:	18c03fcc 	andi	r3,r3,255
    34a4:	1805341e 	bne	r3,zero,4978 <___vfprintf_internal_r+0x21f0>
    34a8:	9080080c 	andi	r2,r18,32
    34ac:	1002cd26 	beq	r2,zero,3fe4 <___vfprintf_internal_r+0x185c>
    34b0:	d9402d17 	ldw	r5,180(sp)
    34b4:	d9002f17 	ldw	r4,188(sp)
    34b8:	28800017 	ldw	r2,0(r5)
    34bc:	2007d7fa 	srai	r3,r4,31
    34c0:	29400104 	addi	r5,r5,4
    34c4:	d9402d15 	stw	r5,180(sp)
    34c8:	11000015 	stw	r4,0(r2)
    34cc:	10c00115 	stw	r3,4(r2)
    34d0:	003ce506 	br	2868 <__alt_data_end+0xff002868>
    34d4:	d8c02d17 	ldw	r3,180(sp)
    34d8:	d9002d17 	ldw	r4,180(sp)
    34dc:	d8002785 	stb	zero,158(sp)
    34e0:	18800017 	ldw	r2,0(r3)
    34e4:	21000104 	addi	r4,r4,4
    34e8:	00c00044 	movi	r3,1
    34ec:	d8c02a15 	stw	r3,168(sp)
    34f0:	d8801405 	stb	r2,80(sp)
    34f4:	d9002d15 	stw	r4,180(sp)
    34f8:	d8c02e15 	stw	r3,184(sp)
    34fc:	d8002915 	stw	zero,164(sp)
    3500:	d8003215 	stw	zero,200(sp)
    3504:	dc001404 	addi	r16,sp,80
    3508:	0039883a 	mov	fp,zero
    350c:	003e7206 	br	2ed8 <__alt_data_end+0xff002ed8>
    3510:	01000074 	movhi	r4,1
    3514:	21050104 	addi	r4,r4,5124
    3518:	0039883a 	mov	fp,zero
    351c:	d9003915 	stw	r4,228(sp)
    3520:	04401e04 	movi	r17,120
    3524:	003f8206 	br	3330 <__alt_data_end+0xff003330>
    3528:	18c03fcc 	andi	r3,r3,255
    352c:	1805061e 	bne	r3,zero,4948 <___vfprintf_internal_r+0x21c0>
    3530:	883d9126 	beq	r17,zero,2b78 <__alt_data_end+0xff002b78>
    3534:	00c00044 	movi	r3,1
    3538:	d8c02a15 	stw	r3,168(sp)
    353c:	dc401405 	stb	r17,80(sp)
    3540:	d8002785 	stb	zero,158(sp)
    3544:	003fec06 	br	34f8 <__alt_data_end+0xff0034f8>
    3548:	01400074 	movhi	r5,1
    354c:	29450104 	addi	r5,r5,5124
    3550:	d9403915 	stw	r5,228(sp)
    3554:	d8c02d15 	stw	r3,180(sp)
    3558:	1025883a 	mov	r18,r2
    355c:	04401e04 	movi	r17,120
    3560:	9d84b03a 	or	r2,r19,r22
    3564:	1000fc1e 	bne	r2,zero,3958 <___vfprintf_internal_r+0x11d0>
    3568:	0039883a 	mov	fp,zero
    356c:	00800084 	movi	r2,2
    3570:	10803fcc 	andi	r2,r2,255
    3574:	00c00044 	movi	r3,1
    3578:	10c20f26 	beq	r2,r3,3db8 <___vfprintf_internal_r+0x1630>
    357c:	00c00084 	movi	r3,2
    3580:	10fd6326 	beq	r2,r3,2b10 <__alt_data_end+0xff002b10>
    3584:	003e2d06 	br	2e3c <__alt_data_end+0xff002e3c>
    3588:	d8c02017 	ldw	r3,128(sp)
    358c:	003e9306 	br	2fdc <__alt_data_end+0xff002fdc>
    3590:	00801944 	movi	r2,101
    3594:	14407e0e 	bge	r2,r17,3790 <___vfprintf_internal_r+0x1008>
    3598:	d9003617 	ldw	r4,216(sp)
    359c:	d9403817 	ldw	r5,224(sp)
    35a0:	000d883a 	mov	r6,zero
    35a4:	000f883a 	mov	r7,zero
    35a8:	d8c03c15 	stw	r3,240(sp)
    35ac:	da003d15 	stw	r8,244(sp)
    35b0:	000cfe80 	call	cfe8 <__eqdf2>
    35b4:	d8c03c17 	ldw	r3,240(sp)
    35b8:	da003d17 	ldw	r8,244(sp)
    35bc:	1000f71e 	bne	r2,zero,399c <___vfprintf_internal_r+0x1214>
    35c0:	d8801f17 	ldw	r2,124(sp)
    35c4:	01000074 	movhi	r4,1
    35c8:	21050804 	addi	r4,r4,5152
    35cc:	18c00044 	addi	r3,r3,1
    35d0:	10800044 	addi	r2,r2,1
    35d4:	41000015 	stw	r4,0(r8)
    35d8:	01000044 	movi	r4,1
    35dc:	41000115 	stw	r4,4(r8)
    35e0:	d8c02015 	stw	r3,128(sp)
    35e4:	d8801f15 	stw	r2,124(sp)
    35e8:	010001c4 	movi	r4,7
    35ec:	2082b816 	blt	r4,r2,40d0 <___vfprintf_internal_r+0x1948>
    35f0:	42000204 	addi	r8,r8,8
    35f4:	d8802617 	ldw	r2,152(sp)
    35f8:	d9403317 	ldw	r5,204(sp)
    35fc:	11400216 	blt	r2,r5,3608 <___vfprintf_internal_r+0xe80>
    3600:	9080004c 	andi	r2,r18,1
    3604:	103ed526 	beq	r2,zero,315c <__alt_data_end+0xff00315c>
    3608:	d8803717 	ldw	r2,220(sp)
    360c:	d9003417 	ldw	r4,208(sp)
    3610:	d9403717 	ldw	r5,220(sp)
    3614:	1887883a 	add	r3,r3,r2
    3618:	d8801f17 	ldw	r2,124(sp)
    361c:	41000015 	stw	r4,0(r8)
    3620:	41400115 	stw	r5,4(r8)
    3624:	10800044 	addi	r2,r2,1
    3628:	d8c02015 	stw	r3,128(sp)
    362c:	d8801f15 	stw	r2,124(sp)
    3630:	010001c4 	movi	r4,7
    3634:	20832916 	blt	r4,r2,42dc <___vfprintf_internal_r+0x1b54>
    3638:	42000204 	addi	r8,r8,8
    363c:	d8803317 	ldw	r2,204(sp)
    3640:	143fffc4 	addi	r16,r2,-1
    3644:	043ec50e 	bge	zero,r16,315c <__alt_data_end+0xff00315c>
    3648:	04400404 	movi	r17,16
    364c:	d8801f17 	ldw	r2,124(sp)
    3650:	8c00880e 	bge	r17,r16,3874 <___vfprintf_internal_r+0x10ec>
    3654:	01400074 	movhi	r5,1
    3658:	29450884 	addi	r5,r5,5154
    365c:	d9402b15 	stw	r5,172(sp)
    3660:	058001c4 	movi	r22,7
    3664:	dcc02c17 	ldw	r19,176(sp)
    3668:	00000306 	br	3678 <___vfprintf_internal_r+0xef0>
    366c:	42000204 	addi	r8,r8,8
    3670:	843ffc04 	addi	r16,r16,-16
    3674:	8c00820e 	bge	r17,r16,3880 <___vfprintf_internal_r+0x10f8>
    3678:	18c00404 	addi	r3,r3,16
    367c:	10800044 	addi	r2,r2,1
    3680:	45000015 	stw	r20,0(r8)
    3684:	44400115 	stw	r17,4(r8)
    3688:	d8c02015 	stw	r3,128(sp)
    368c:	d8801f15 	stw	r2,124(sp)
    3690:	b0bff60e 	bge	r22,r2,366c <__alt_data_end+0xff00366c>
    3694:	d9801e04 	addi	r6,sp,120
    3698:	b80b883a 	mov	r5,r23
    369c:	9809883a 	mov	r4,r19
    36a0:	00095240 	call	9524 <__sprint_r>
    36a4:	103d3a1e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    36a8:	d8c02017 	ldw	r3,128(sp)
    36ac:	d8801f17 	ldw	r2,124(sp)
    36b0:	da000404 	addi	r8,sp,16
    36b4:	003fee06 	br	3670 <__alt_data_end+0xff003670>
    36b8:	d9403117 	ldw	r5,196(sp)
    36bc:	d8802a17 	ldw	r2,168(sp)
    36c0:	28adc83a 	sub	r22,r5,r2
    36c4:	05be630e 	bge	zero,r22,3054 <__alt_data_end+0xff003054>
    36c8:	07000404 	movi	fp,16
    36cc:	d8801f17 	ldw	r2,124(sp)
    36d0:	e5838f0e 	bge	fp,r22,4510 <___vfprintf_internal_r+0x1d88>
    36d4:	01400074 	movhi	r5,1
    36d8:	29450884 	addi	r5,r5,5154
    36dc:	dc403015 	stw	r17,192(sp)
    36e0:	d9402b15 	stw	r5,172(sp)
    36e4:	b023883a 	mov	r17,r22
    36e8:	04c001c4 	movi	r19,7
    36ec:	a82d883a 	mov	r22,r21
    36f0:	902b883a 	mov	r21,r18
    36f4:	8025883a 	mov	r18,r16
    36f8:	dc002c17 	ldw	r16,176(sp)
    36fc:	00000306 	br	370c <___vfprintf_internal_r+0xf84>
    3700:	8c7ffc04 	addi	r17,r17,-16
    3704:	42000204 	addi	r8,r8,8
    3708:	e440110e 	bge	fp,r17,3750 <___vfprintf_internal_r+0xfc8>
    370c:	18c00404 	addi	r3,r3,16
    3710:	10800044 	addi	r2,r2,1
    3714:	45000015 	stw	r20,0(r8)
    3718:	47000115 	stw	fp,4(r8)
    371c:	d8c02015 	stw	r3,128(sp)
    3720:	d8801f15 	stw	r2,124(sp)
    3724:	98bff60e 	bge	r19,r2,3700 <__alt_data_end+0xff003700>
    3728:	d9801e04 	addi	r6,sp,120
    372c:	b80b883a 	mov	r5,r23
    3730:	8009883a 	mov	r4,r16
    3734:	00095240 	call	9524 <__sprint_r>
    3738:	103d151e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    373c:	8c7ffc04 	addi	r17,r17,-16
    3740:	d8c02017 	ldw	r3,128(sp)
    3744:	d8801f17 	ldw	r2,124(sp)
    3748:	da000404 	addi	r8,sp,16
    374c:	e47fef16 	blt	fp,r17,370c <__alt_data_end+0xff00370c>
    3750:	9021883a 	mov	r16,r18
    3754:	a825883a 	mov	r18,r21
    3758:	b02b883a 	mov	r21,r22
    375c:	882d883a 	mov	r22,r17
    3760:	dc403017 	ldw	r17,192(sp)
    3764:	d9002b17 	ldw	r4,172(sp)
    3768:	1d87883a 	add	r3,r3,r22
    376c:	10800044 	addi	r2,r2,1
    3770:	41000015 	stw	r4,0(r8)
    3774:	45800115 	stw	r22,4(r8)
    3778:	d8c02015 	stw	r3,128(sp)
    377c:	d8801f15 	stw	r2,124(sp)
    3780:	010001c4 	movi	r4,7
    3784:	20818e16 	blt	r4,r2,3dc0 <___vfprintf_internal_r+0x1638>
    3788:	42000204 	addi	r8,r8,8
    378c:	003e3106 	br	3054 <__alt_data_end+0xff003054>
    3790:	d9403317 	ldw	r5,204(sp)
    3794:	00800044 	movi	r2,1
    3798:	18c00044 	addi	r3,r3,1
    379c:	1141530e 	bge	r2,r5,3cec <___vfprintf_internal_r+0x1564>
    37a0:	dc401f17 	ldw	r17,124(sp)
    37a4:	00800044 	movi	r2,1
    37a8:	40800115 	stw	r2,4(r8)
    37ac:	8c400044 	addi	r17,r17,1
    37b0:	44000015 	stw	r16,0(r8)
    37b4:	d8c02015 	stw	r3,128(sp)
    37b8:	dc401f15 	stw	r17,124(sp)
    37bc:	008001c4 	movi	r2,7
    37c0:	14416b16 	blt	r2,r17,3d70 <___vfprintf_internal_r+0x15e8>
    37c4:	42000204 	addi	r8,r8,8
    37c8:	d8803717 	ldw	r2,220(sp)
    37cc:	d9003417 	ldw	r4,208(sp)
    37d0:	8c400044 	addi	r17,r17,1
    37d4:	10c7883a 	add	r3,r2,r3
    37d8:	40800115 	stw	r2,4(r8)
    37dc:	41000015 	stw	r4,0(r8)
    37e0:	d8c02015 	stw	r3,128(sp)
    37e4:	dc401f15 	stw	r17,124(sp)
    37e8:	008001c4 	movi	r2,7
    37ec:	14416916 	blt	r2,r17,3d94 <___vfprintf_internal_r+0x160c>
    37f0:	45800204 	addi	r22,r8,8
    37f4:	d9003617 	ldw	r4,216(sp)
    37f8:	d9403817 	ldw	r5,224(sp)
    37fc:	000d883a 	mov	r6,zero
    3800:	000f883a 	mov	r7,zero
    3804:	d8c03c15 	stw	r3,240(sp)
    3808:	000cfe80 	call	cfe8 <__eqdf2>
    380c:	d8c03c17 	ldw	r3,240(sp)
    3810:	1000bc26 	beq	r2,zero,3b04 <___vfprintf_internal_r+0x137c>
    3814:	d9403317 	ldw	r5,204(sp)
    3818:	84000044 	addi	r16,r16,1
    381c:	8c400044 	addi	r17,r17,1
    3820:	28bfffc4 	addi	r2,r5,-1
    3824:	1887883a 	add	r3,r3,r2
    3828:	b0800115 	stw	r2,4(r22)
    382c:	b4000015 	stw	r16,0(r22)
    3830:	d8c02015 	stw	r3,128(sp)
    3834:	dc401f15 	stw	r17,124(sp)
    3838:	008001c4 	movi	r2,7
    383c:	14414316 	blt	r2,r17,3d4c <___vfprintf_internal_r+0x15c4>
    3840:	b5800204 	addi	r22,r22,8
    3844:	d9003a17 	ldw	r4,232(sp)
    3848:	df0022c4 	addi	fp,sp,139
    384c:	8c400044 	addi	r17,r17,1
    3850:	20c7883a 	add	r3,r4,r3
    3854:	b7000015 	stw	fp,0(r22)
    3858:	b1000115 	stw	r4,4(r22)
    385c:	d8c02015 	stw	r3,128(sp)
    3860:	dc401f15 	stw	r17,124(sp)
    3864:	008001c4 	movi	r2,7
    3868:	14400e16 	blt	r2,r17,38a4 <___vfprintf_internal_r+0x111c>
    386c:	b2000204 	addi	r8,r22,8
    3870:	003e3a06 	br	315c <__alt_data_end+0xff00315c>
    3874:	01000074 	movhi	r4,1
    3878:	21050884 	addi	r4,r4,5154
    387c:	d9002b15 	stw	r4,172(sp)
    3880:	d9002b17 	ldw	r4,172(sp)
    3884:	1c07883a 	add	r3,r3,r16
    3888:	44000115 	stw	r16,4(r8)
    388c:	41000015 	stw	r4,0(r8)
    3890:	10800044 	addi	r2,r2,1
    3894:	d8c02015 	stw	r3,128(sp)
    3898:	d8801f15 	stw	r2,124(sp)
    389c:	010001c4 	movi	r4,7
    38a0:	20be2d0e 	bge	r4,r2,3158 <__alt_data_end+0xff003158>
    38a4:	d9002c17 	ldw	r4,176(sp)
    38a8:	d9801e04 	addi	r6,sp,120
    38ac:	b80b883a 	mov	r5,r23
    38b0:	00095240 	call	9524 <__sprint_r>
    38b4:	103cb61e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    38b8:	d8c02017 	ldw	r3,128(sp)
    38bc:	da000404 	addi	r8,sp,16
    38c0:	003e2606 	br	315c <__alt_data_end+0xff00315c>
    38c4:	d9002c17 	ldw	r4,176(sp)
    38c8:	d9801e04 	addi	r6,sp,120
    38cc:	b80b883a 	mov	r5,r23
    38d0:	00095240 	call	9524 <__sprint_r>
    38d4:	103e5d26 	beq	r2,zero,324c <__alt_data_end+0xff00324c>
    38d8:	003cad06 	br	2b90 <__alt_data_end+0xff002b90>
    38dc:	d9002c17 	ldw	r4,176(sp)
    38e0:	d9801e04 	addi	r6,sp,120
    38e4:	b80b883a 	mov	r5,r23
    38e8:	00095240 	call	9524 <__sprint_r>
    38ec:	103ca81e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    38f0:	d8c02017 	ldw	r3,128(sp)
    38f4:	da000404 	addi	r8,sp,16
    38f8:	003e0b06 	br	3128 <__alt_data_end+0xff003128>
    38fc:	d9002c17 	ldw	r4,176(sp)
    3900:	d9801e04 	addi	r6,sp,120
    3904:	b80b883a 	mov	r5,r23
    3908:	00095240 	call	9524 <__sprint_r>
    390c:	103ca01e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    3910:	d8c02017 	ldw	r3,128(sp)
    3914:	da000404 	addi	r8,sp,16
    3918:	003dbd06 	br	3010 <__alt_data_end+0xff003010>
    391c:	d9002c17 	ldw	r4,176(sp)
    3920:	d9801e04 	addi	r6,sp,120
    3924:	b80b883a 	mov	r5,r23
    3928:	00095240 	call	9524 <__sprint_r>
    392c:	103c981e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    3930:	d8c02017 	ldw	r3,128(sp)
    3934:	da000404 	addi	r8,sp,16
    3938:	003dc306 	br	3048 <__alt_data_end+0xff003048>
    393c:	d8802917 	ldw	r2,164(sp)
    3940:	d8002785 	stb	zero,158(sp)
    3944:	103f0616 	blt	r2,zero,3560 <__alt_data_end+0xff003560>
    3948:	00ffdfc4 	movi	r3,-129
    394c:	9d84b03a 	or	r2,r19,r22
    3950:	90e4703a 	and	r18,r18,r3
    3954:	103c6b26 	beq	r2,zero,2b04 <__alt_data_end+0xff002b04>
    3958:	0039883a 	mov	fp,zero
    395c:	003e7406 	br	3330 <__alt_data_end+0xff003330>
    3960:	9080040c 	andi	r2,r18,16
    3964:	1001b326 	beq	r2,zero,4034 <___vfprintf_internal_r+0x18ac>
    3968:	d9002d17 	ldw	r4,180(sp)
    396c:	d9402917 	ldw	r5,164(sp)
    3970:	d8002785 	stb	zero,158(sp)
    3974:	20800104 	addi	r2,r4,4
    3978:	24c00017 	ldw	r19,0(r4)
    397c:	002d883a 	mov	r22,zero
    3980:	2801b516 	blt	r5,zero,4058 <___vfprintf_internal_r+0x18d0>
    3984:	00ffdfc4 	movi	r3,-129
    3988:	d8802d15 	stw	r2,180(sp)
    398c:	90e4703a 	and	r18,r18,r3
    3990:	983d2726 	beq	r19,zero,2e30 <__alt_data_end+0xff002e30>
    3994:	0039883a 	mov	fp,zero
    3998:	003d2a06 	br	2e44 <__alt_data_end+0xff002e44>
    399c:	dc402617 	ldw	r17,152(sp)
    39a0:	0441d30e 	bge	zero,r17,40f0 <___vfprintf_internal_r+0x1968>
    39a4:	dc403217 	ldw	r17,200(sp)
    39a8:	d8803317 	ldw	r2,204(sp)
    39ac:	1440010e 	bge	r2,r17,39b4 <___vfprintf_internal_r+0x122c>
    39b0:	1023883a 	mov	r17,r2
    39b4:	04400a0e 	bge	zero,r17,39e0 <___vfprintf_internal_r+0x1258>
    39b8:	d8801f17 	ldw	r2,124(sp)
    39bc:	1c47883a 	add	r3,r3,r17
    39c0:	44000015 	stw	r16,0(r8)
    39c4:	10800044 	addi	r2,r2,1
    39c8:	44400115 	stw	r17,4(r8)
    39cc:	d8c02015 	stw	r3,128(sp)
    39d0:	d8801f15 	stw	r2,124(sp)
    39d4:	010001c4 	movi	r4,7
    39d8:	20826516 	blt	r4,r2,4370 <___vfprintf_internal_r+0x1be8>
    39dc:	42000204 	addi	r8,r8,8
    39e0:	88026116 	blt	r17,zero,4368 <___vfprintf_internal_r+0x1be0>
    39e4:	d9003217 	ldw	r4,200(sp)
    39e8:	2463c83a 	sub	r17,r4,r17
    39ec:	04407b0e 	bge	zero,r17,3bdc <___vfprintf_internal_r+0x1454>
    39f0:	05800404 	movi	r22,16
    39f4:	d8801f17 	ldw	r2,124(sp)
    39f8:	b4419d0e 	bge	r22,r17,4070 <___vfprintf_internal_r+0x18e8>
    39fc:	01000074 	movhi	r4,1
    3a00:	21050884 	addi	r4,r4,5154
    3a04:	d9002b15 	stw	r4,172(sp)
    3a08:	070001c4 	movi	fp,7
    3a0c:	dcc02c17 	ldw	r19,176(sp)
    3a10:	00000306 	br	3a20 <___vfprintf_internal_r+0x1298>
    3a14:	42000204 	addi	r8,r8,8
    3a18:	8c7ffc04 	addi	r17,r17,-16
    3a1c:	b441970e 	bge	r22,r17,407c <___vfprintf_internal_r+0x18f4>
    3a20:	18c00404 	addi	r3,r3,16
    3a24:	10800044 	addi	r2,r2,1
    3a28:	45000015 	stw	r20,0(r8)
    3a2c:	45800115 	stw	r22,4(r8)
    3a30:	d8c02015 	stw	r3,128(sp)
    3a34:	d8801f15 	stw	r2,124(sp)
    3a38:	e0bff60e 	bge	fp,r2,3a14 <__alt_data_end+0xff003a14>
    3a3c:	d9801e04 	addi	r6,sp,120
    3a40:	b80b883a 	mov	r5,r23
    3a44:	9809883a 	mov	r4,r19
    3a48:	00095240 	call	9524 <__sprint_r>
    3a4c:	103c501e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    3a50:	d8c02017 	ldw	r3,128(sp)
    3a54:	d8801f17 	ldw	r2,124(sp)
    3a58:	da000404 	addi	r8,sp,16
    3a5c:	003fee06 	br	3a18 <__alt_data_end+0xff003a18>
    3a60:	d9002c17 	ldw	r4,176(sp)
    3a64:	d9801e04 	addi	r6,sp,120
    3a68:	b80b883a 	mov	r5,r23
    3a6c:	00095240 	call	9524 <__sprint_r>
    3a70:	103c471e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    3a74:	d8c02017 	ldw	r3,128(sp)
    3a78:	df002787 	ldb	fp,158(sp)
    3a7c:	da000404 	addi	r8,sp,16
    3a80:	003d5606 	br	2fdc <__alt_data_end+0xff002fdc>
    3a84:	9080040c 	andi	r2,r18,16
    3a88:	10016126 	beq	r2,zero,4010 <___vfprintf_internal_r+0x1888>
    3a8c:	d8802d17 	ldw	r2,180(sp)
    3a90:	14c00017 	ldw	r19,0(r2)
    3a94:	10800104 	addi	r2,r2,4
    3a98:	d8802d15 	stw	r2,180(sp)
    3a9c:	982dd7fa 	srai	r22,r19,31
    3aa0:	b005883a 	mov	r2,r22
    3aa4:	003c8206 	br	2cb0 <__alt_data_end+0xff002cb0>
    3aa8:	9080040c 	andi	r2,r18,16
    3aac:	10003526 	beq	r2,zero,3b84 <___vfprintf_internal_r+0x13fc>
    3ab0:	d9402d17 	ldw	r5,180(sp)
    3ab4:	d8c02917 	ldw	r3,164(sp)
    3ab8:	d8002785 	stb	zero,158(sp)
    3abc:	28800104 	addi	r2,r5,4
    3ac0:	2cc00017 	ldw	r19,0(r5)
    3ac4:	002d883a 	mov	r22,zero
    3ac8:	18003716 	blt	r3,zero,3ba8 <___vfprintf_internal_r+0x1420>
    3acc:	00ffdfc4 	movi	r3,-129
    3ad0:	d8802d15 	stw	r2,180(sp)
    3ad4:	90e4703a 	and	r18,r18,r3
    3ad8:	0039883a 	mov	fp,zero
    3adc:	983df326 	beq	r19,zero,32ac <__alt_data_end+0xff0032ac>
    3ae0:	00800244 	movi	r2,9
    3ae4:	14fc7b36 	bltu	r2,r19,2cd4 <__alt_data_end+0xff002cd4>
    3ae8:	d8c02817 	ldw	r3,160(sp)
    3aec:	dc001dc4 	addi	r16,sp,119
    3af0:	9cc00c04 	addi	r19,r19,48
    3af4:	1c07c83a 	sub	r3,r3,r16
    3af8:	dcc01dc5 	stb	r19,119(sp)
    3afc:	d8c02e15 	stw	r3,184(sp)
    3b00:	003ce806 	br	2ea4 <__alt_data_end+0xff002ea4>
    3b04:	d8803317 	ldw	r2,204(sp)
    3b08:	143fffc4 	addi	r16,r2,-1
    3b0c:	043f4d0e 	bge	zero,r16,3844 <__alt_data_end+0xff003844>
    3b10:	07000404 	movi	fp,16
    3b14:	e400810e 	bge	fp,r16,3d1c <___vfprintf_internal_r+0x1594>
    3b18:	01400074 	movhi	r5,1
    3b1c:	29450884 	addi	r5,r5,5154
    3b20:	d9402b15 	stw	r5,172(sp)
    3b24:	01c001c4 	movi	r7,7
    3b28:	dcc02c17 	ldw	r19,176(sp)
    3b2c:	00000306 	br	3b3c <___vfprintf_internal_r+0x13b4>
    3b30:	b5800204 	addi	r22,r22,8
    3b34:	843ffc04 	addi	r16,r16,-16
    3b38:	e4007b0e 	bge	fp,r16,3d28 <___vfprintf_internal_r+0x15a0>
    3b3c:	18c00404 	addi	r3,r3,16
    3b40:	8c400044 	addi	r17,r17,1
    3b44:	b5000015 	stw	r20,0(r22)
    3b48:	b7000115 	stw	fp,4(r22)
    3b4c:	d8c02015 	stw	r3,128(sp)
    3b50:	dc401f15 	stw	r17,124(sp)
    3b54:	3c7ff60e 	bge	r7,r17,3b30 <__alt_data_end+0xff003b30>
    3b58:	d9801e04 	addi	r6,sp,120
    3b5c:	b80b883a 	mov	r5,r23
    3b60:	9809883a 	mov	r4,r19
    3b64:	d9c03c15 	stw	r7,240(sp)
    3b68:	00095240 	call	9524 <__sprint_r>
    3b6c:	d9c03c17 	ldw	r7,240(sp)
    3b70:	103c071e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    3b74:	d8c02017 	ldw	r3,128(sp)
    3b78:	dc401f17 	ldw	r17,124(sp)
    3b7c:	dd800404 	addi	r22,sp,16
    3b80:	003fec06 	br	3b34 <__alt_data_end+0xff003b34>
    3b84:	9080100c 	andi	r2,r18,64
    3b88:	d8002785 	stb	zero,158(sp)
    3b8c:	10010e26 	beq	r2,zero,3fc8 <___vfprintf_internal_r+0x1840>
    3b90:	d9002d17 	ldw	r4,180(sp)
    3b94:	d9402917 	ldw	r5,164(sp)
    3b98:	002d883a 	mov	r22,zero
    3b9c:	20800104 	addi	r2,r4,4
    3ba0:	24c0000b 	ldhu	r19,0(r4)
    3ba4:	283fc90e 	bge	r5,zero,3acc <__alt_data_end+0xff003acc>
    3ba8:	d8802d15 	stw	r2,180(sp)
    3bac:	0039883a 	mov	fp,zero
    3bb0:	9d84b03a 	or	r2,r19,r22
    3bb4:	103c461e 	bne	r2,zero,2cd0 <__alt_data_end+0xff002cd0>
    3bb8:	00800044 	movi	r2,1
    3bbc:	003e6c06 	br	3570 <__alt_data_end+0xff003570>
    3bc0:	d9002c17 	ldw	r4,176(sp)
    3bc4:	d9801e04 	addi	r6,sp,120
    3bc8:	b80b883a 	mov	r5,r23
    3bcc:	00095240 	call	9524 <__sprint_r>
    3bd0:	103bef1e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    3bd4:	d8c02017 	ldw	r3,128(sp)
    3bd8:	da000404 	addi	r8,sp,16
    3bdc:	d9003217 	ldw	r4,200(sp)
    3be0:	d8802617 	ldw	r2,152(sp)
    3be4:	d9403317 	ldw	r5,204(sp)
    3be8:	8123883a 	add	r17,r16,r4
    3bec:	11400216 	blt	r2,r5,3bf8 <___vfprintf_internal_r+0x1470>
    3bf0:	9100004c 	andi	r4,r18,1
    3bf4:	20000d26 	beq	r4,zero,3c2c <___vfprintf_internal_r+0x14a4>
    3bf8:	d9003717 	ldw	r4,220(sp)
    3bfc:	d9403417 	ldw	r5,208(sp)
    3c00:	1907883a 	add	r3,r3,r4
    3c04:	d9001f17 	ldw	r4,124(sp)
    3c08:	41400015 	stw	r5,0(r8)
    3c0c:	d9403717 	ldw	r5,220(sp)
    3c10:	21000044 	addi	r4,r4,1
    3c14:	d8c02015 	stw	r3,128(sp)
    3c18:	41400115 	stw	r5,4(r8)
    3c1c:	d9001f15 	stw	r4,124(sp)
    3c20:	014001c4 	movi	r5,7
    3c24:	2901e816 	blt	r5,r4,43c8 <___vfprintf_internal_r+0x1c40>
    3c28:	42000204 	addi	r8,r8,8
    3c2c:	d9003317 	ldw	r4,204(sp)
    3c30:	8121883a 	add	r16,r16,r4
    3c34:	2085c83a 	sub	r2,r4,r2
    3c38:	8461c83a 	sub	r16,r16,r17
    3c3c:	1400010e 	bge	r2,r16,3c44 <___vfprintf_internal_r+0x14bc>
    3c40:	1021883a 	mov	r16,r2
    3c44:	04000a0e 	bge	zero,r16,3c70 <___vfprintf_internal_r+0x14e8>
    3c48:	d9001f17 	ldw	r4,124(sp)
    3c4c:	1c07883a 	add	r3,r3,r16
    3c50:	44400015 	stw	r17,0(r8)
    3c54:	21000044 	addi	r4,r4,1
    3c58:	44000115 	stw	r16,4(r8)
    3c5c:	d8c02015 	stw	r3,128(sp)
    3c60:	d9001f15 	stw	r4,124(sp)
    3c64:	014001c4 	movi	r5,7
    3c68:	2901fb16 	blt	r5,r4,4458 <___vfprintf_internal_r+0x1cd0>
    3c6c:	42000204 	addi	r8,r8,8
    3c70:	8001f716 	blt	r16,zero,4450 <___vfprintf_internal_r+0x1cc8>
    3c74:	1421c83a 	sub	r16,r2,r16
    3c78:	043d380e 	bge	zero,r16,315c <__alt_data_end+0xff00315c>
    3c7c:	04400404 	movi	r17,16
    3c80:	d8801f17 	ldw	r2,124(sp)
    3c84:	8c3efb0e 	bge	r17,r16,3874 <__alt_data_end+0xff003874>
    3c88:	01400074 	movhi	r5,1
    3c8c:	29450884 	addi	r5,r5,5154
    3c90:	d9402b15 	stw	r5,172(sp)
    3c94:	058001c4 	movi	r22,7
    3c98:	dcc02c17 	ldw	r19,176(sp)
    3c9c:	00000306 	br	3cac <___vfprintf_internal_r+0x1524>
    3ca0:	42000204 	addi	r8,r8,8
    3ca4:	843ffc04 	addi	r16,r16,-16
    3ca8:	8c3ef50e 	bge	r17,r16,3880 <__alt_data_end+0xff003880>
    3cac:	18c00404 	addi	r3,r3,16
    3cb0:	10800044 	addi	r2,r2,1
    3cb4:	45000015 	stw	r20,0(r8)
    3cb8:	44400115 	stw	r17,4(r8)
    3cbc:	d8c02015 	stw	r3,128(sp)
    3cc0:	d8801f15 	stw	r2,124(sp)
    3cc4:	b0bff60e 	bge	r22,r2,3ca0 <__alt_data_end+0xff003ca0>
    3cc8:	d9801e04 	addi	r6,sp,120
    3ccc:	b80b883a 	mov	r5,r23
    3cd0:	9809883a 	mov	r4,r19
    3cd4:	00095240 	call	9524 <__sprint_r>
    3cd8:	103bad1e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    3cdc:	d8c02017 	ldw	r3,128(sp)
    3ce0:	d8801f17 	ldw	r2,124(sp)
    3ce4:	da000404 	addi	r8,sp,16
    3ce8:	003fee06 	br	3ca4 <__alt_data_end+0xff003ca4>
    3cec:	9088703a 	and	r4,r18,r2
    3cf0:	203eab1e 	bne	r4,zero,37a0 <__alt_data_end+0xff0037a0>
    3cf4:	dc401f17 	ldw	r17,124(sp)
    3cf8:	40800115 	stw	r2,4(r8)
    3cfc:	44000015 	stw	r16,0(r8)
    3d00:	8c400044 	addi	r17,r17,1
    3d04:	d8c02015 	stw	r3,128(sp)
    3d08:	dc401f15 	stw	r17,124(sp)
    3d0c:	008001c4 	movi	r2,7
    3d10:	14400e16 	blt	r2,r17,3d4c <___vfprintf_internal_r+0x15c4>
    3d14:	45800204 	addi	r22,r8,8
    3d18:	003eca06 	br	3844 <__alt_data_end+0xff003844>
    3d1c:	01000074 	movhi	r4,1
    3d20:	21050884 	addi	r4,r4,5154
    3d24:	d9002b15 	stw	r4,172(sp)
    3d28:	d8802b17 	ldw	r2,172(sp)
    3d2c:	1c07883a 	add	r3,r3,r16
    3d30:	8c400044 	addi	r17,r17,1
    3d34:	b0800015 	stw	r2,0(r22)
    3d38:	b4000115 	stw	r16,4(r22)
    3d3c:	d8c02015 	stw	r3,128(sp)
    3d40:	dc401f15 	stw	r17,124(sp)
    3d44:	008001c4 	movi	r2,7
    3d48:	147ebd0e 	bge	r2,r17,3840 <__alt_data_end+0xff003840>
    3d4c:	d9002c17 	ldw	r4,176(sp)
    3d50:	d9801e04 	addi	r6,sp,120
    3d54:	b80b883a 	mov	r5,r23
    3d58:	00095240 	call	9524 <__sprint_r>
    3d5c:	103b8c1e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    3d60:	d8c02017 	ldw	r3,128(sp)
    3d64:	dc401f17 	ldw	r17,124(sp)
    3d68:	dd800404 	addi	r22,sp,16
    3d6c:	003eb506 	br	3844 <__alt_data_end+0xff003844>
    3d70:	d9002c17 	ldw	r4,176(sp)
    3d74:	d9801e04 	addi	r6,sp,120
    3d78:	b80b883a 	mov	r5,r23
    3d7c:	00095240 	call	9524 <__sprint_r>
    3d80:	103b831e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    3d84:	d8c02017 	ldw	r3,128(sp)
    3d88:	dc401f17 	ldw	r17,124(sp)
    3d8c:	da000404 	addi	r8,sp,16
    3d90:	003e8d06 	br	37c8 <__alt_data_end+0xff0037c8>
    3d94:	d9002c17 	ldw	r4,176(sp)
    3d98:	d9801e04 	addi	r6,sp,120
    3d9c:	b80b883a 	mov	r5,r23
    3da0:	00095240 	call	9524 <__sprint_r>
    3da4:	103b7a1e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    3da8:	d8c02017 	ldw	r3,128(sp)
    3dac:	dc401f17 	ldw	r17,124(sp)
    3db0:	dd800404 	addi	r22,sp,16
    3db4:	003e8f06 	br	37f4 <__alt_data_end+0xff0037f4>
    3db8:	0027883a 	mov	r19,zero
    3dbc:	003f4a06 	br	3ae8 <__alt_data_end+0xff003ae8>
    3dc0:	d9002c17 	ldw	r4,176(sp)
    3dc4:	d9801e04 	addi	r6,sp,120
    3dc8:	b80b883a 	mov	r5,r23
    3dcc:	00095240 	call	9524 <__sprint_r>
    3dd0:	103b6f1e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    3dd4:	d8c02017 	ldw	r3,128(sp)
    3dd8:	da000404 	addi	r8,sp,16
    3ddc:	003c9d06 	br	3054 <__alt_data_end+0xff003054>
    3de0:	04e7c83a 	sub	r19,zero,r19
    3de4:	9804c03a 	cmpne	r2,r19,zero
    3de8:	05adc83a 	sub	r22,zero,r22
    3dec:	b0adc83a 	sub	r22,r22,r2
    3df0:	d8802917 	ldw	r2,164(sp)
    3df4:	07000b44 	movi	fp,45
    3df8:	df002785 	stb	fp,158(sp)
    3dfc:	10017b16 	blt	r2,zero,43ec <___vfprintf_internal_r+0x1c64>
    3e00:	00bfdfc4 	movi	r2,-129
    3e04:	90a4703a 	and	r18,r18,r2
    3e08:	003bb106 	br	2cd0 <__alt_data_end+0xff002cd0>
    3e0c:	d9003617 	ldw	r4,216(sp)
    3e10:	d9403817 	ldw	r5,224(sp)
    3e14:	da003d15 	stw	r8,244(sp)
    3e18:	000919c0 	call	919c <__fpclassifyd>
    3e1c:	da003d17 	ldw	r8,244(sp)
    3e20:	1000f026 	beq	r2,zero,41e4 <___vfprintf_internal_r+0x1a5c>
    3e24:	d9002917 	ldw	r4,164(sp)
    3e28:	05bff7c4 	movi	r22,-33
    3e2c:	00bfffc4 	movi	r2,-1
    3e30:	8dac703a 	and	r22,r17,r22
    3e34:	20820026 	beq	r4,r2,4638 <___vfprintf_internal_r+0x1eb0>
    3e38:	008011c4 	movi	r2,71
    3e3c:	b081f726 	beq	r22,r2,461c <___vfprintf_internal_r+0x1e94>
    3e40:	d9003817 	ldw	r4,224(sp)
    3e44:	90c04014 	ori	r3,r18,256
    3e48:	d8c02b15 	stw	r3,172(sp)
    3e4c:	20021516 	blt	r4,zero,46a4 <___vfprintf_internal_r+0x1f1c>
    3e50:	dcc03817 	ldw	r19,224(sp)
    3e54:	d8002a05 	stb	zero,168(sp)
    3e58:	00801984 	movi	r2,102
    3e5c:	8881f926 	beq	r17,r2,4644 <___vfprintf_internal_r+0x1ebc>
    3e60:	00801184 	movi	r2,70
    3e64:	88821c26 	beq	r17,r2,46d8 <___vfprintf_internal_r+0x1f50>
    3e68:	00801144 	movi	r2,69
    3e6c:	b081ef26 	beq	r22,r2,462c <___vfprintf_internal_r+0x1ea4>
    3e70:	d8c02917 	ldw	r3,164(sp)
    3e74:	d8802104 	addi	r2,sp,132
    3e78:	d8800315 	stw	r2,12(sp)
    3e7c:	d9403617 	ldw	r5,216(sp)
    3e80:	d8802504 	addi	r2,sp,148
    3e84:	d9002c17 	ldw	r4,176(sp)
    3e88:	d8800215 	stw	r2,8(sp)
    3e8c:	d8802604 	addi	r2,sp,152
    3e90:	d8c00015 	stw	r3,0(sp)
    3e94:	d8800115 	stw	r2,4(sp)
    3e98:	01c00084 	movi	r7,2
    3e9c:	980d883a 	mov	r6,r19
    3ea0:	d8c03c15 	stw	r3,240(sp)
    3ea4:	da003d15 	stw	r8,244(sp)
    3ea8:	0004dac0 	call	4dac <_dtoa_r>
    3eac:	1021883a 	mov	r16,r2
    3eb0:	008019c4 	movi	r2,103
    3eb4:	d8c03c17 	ldw	r3,240(sp)
    3eb8:	da003d17 	ldw	r8,244(sp)
    3ebc:	88817126 	beq	r17,r2,4484 <___vfprintf_internal_r+0x1cfc>
    3ec0:	008011c4 	movi	r2,71
    3ec4:	88829226 	beq	r17,r2,4910 <___vfprintf_internal_r+0x2188>
    3ec8:	80f9883a 	add	fp,r16,r3
    3ecc:	d9003617 	ldw	r4,216(sp)
    3ed0:	000d883a 	mov	r6,zero
    3ed4:	000f883a 	mov	r7,zero
    3ed8:	980b883a 	mov	r5,r19
    3edc:	da003d15 	stw	r8,244(sp)
    3ee0:	000cfe80 	call	cfe8 <__eqdf2>
    3ee4:	da003d17 	ldw	r8,244(sp)
    3ee8:	10018d26 	beq	r2,zero,4520 <___vfprintf_internal_r+0x1d98>
    3eec:	d8802117 	ldw	r2,132(sp)
    3ef0:	1700062e 	bgeu	r2,fp,3f0c <___vfprintf_internal_r+0x1784>
    3ef4:	01000c04 	movi	r4,48
    3ef8:	10c00044 	addi	r3,r2,1
    3efc:	d8c02115 	stw	r3,132(sp)
    3f00:	11000005 	stb	r4,0(r2)
    3f04:	d8802117 	ldw	r2,132(sp)
    3f08:	173ffb36 	bltu	r2,fp,3ef8 <__alt_data_end+0xff003ef8>
    3f0c:	1405c83a 	sub	r2,r2,r16
    3f10:	d8803315 	stw	r2,204(sp)
    3f14:	008011c4 	movi	r2,71
    3f18:	b0817626 	beq	r22,r2,44f4 <___vfprintf_internal_r+0x1d6c>
    3f1c:	00801944 	movi	r2,101
    3f20:	1442810e 	bge	r2,r17,4928 <___vfprintf_internal_r+0x21a0>
    3f24:	d8c02617 	ldw	r3,152(sp)
    3f28:	00801984 	movi	r2,102
    3f2c:	d8c03215 	stw	r3,200(sp)
    3f30:	8881fe26 	beq	r17,r2,472c <___vfprintf_internal_r+0x1fa4>
    3f34:	d8c03217 	ldw	r3,200(sp)
    3f38:	d9003317 	ldw	r4,204(sp)
    3f3c:	1901dd16 	blt	r3,r4,46b4 <___vfprintf_internal_r+0x1f2c>
    3f40:	9480004c 	andi	r18,r18,1
    3f44:	90022b1e 	bne	r18,zero,47f4 <___vfprintf_internal_r+0x206c>
    3f48:	1805883a 	mov	r2,r3
    3f4c:	18028016 	blt	r3,zero,4950 <___vfprintf_internal_r+0x21c8>
    3f50:	d8c03217 	ldw	r3,200(sp)
    3f54:	044019c4 	movi	r17,103
    3f58:	d8c02e15 	stw	r3,184(sp)
    3f5c:	df002a07 	ldb	fp,168(sp)
    3f60:	e001531e 	bne	fp,zero,44b0 <___vfprintf_internal_r+0x1d28>
    3f64:	df002783 	ldbu	fp,158(sp)
    3f68:	d8802a15 	stw	r2,168(sp)
    3f6c:	dc802b17 	ldw	r18,172(sp)
    3f70:	d8002915 	stw	zero,164(sp)
    3f74:	003bd106 	br	2ebc <__alt_data_end+0xff002ebc>
    3f78:	d8802d17 	ldw	r2,180(sp)
    3f7c:	d8c02d17 	ldw	r3,180(sp)
    3f80:	d9002d17 	ldw	r4,180(sp)
    3f84:	10800017 	ldw	r2,0(r2)
    3f88:	18c00117 	ldw	r3,4(r3)
    3f8c:	21000204 	addi	r4,r4,8
    3f90:	d8803615 	stw	r2,216(sp)
    3f94:	d8c03815 	stw	r3,224(sp)
    3f98:	d9002d15 	stw	r4,180(sp)
    3f9c:	003b7506 	br	2d74 <__alt_data_end+0xff002d74>
    3fa0:	ac400007 	ldb	r17,0(r21)
    3fa4:	003a5906 	br	290c <__alt_data_end+0xff00290c>
    3fa8:	9080100c 	andi	r2,r18,64
    3fac:	1000a826 	beq	r2,zero,4250 <___vfprintf_internal_r+0x1ac8>
    3fb0:	d9002d17 	ldw	r4,180(sp)
    3fb4:	002d883a 	mov	r22,zero
    3fb8:	24c0000b 	ldhu	r19,0(r4)
    3fbc:	21000104 	addi	r4,r4,4
    3fc0:	d9002d15 	stw	r4,180(sp)
    3fc4:	003ccb06 	br	32f4 <__alt_data_end+0xff0032f4>
    3fc8:	d8c02d17 	ldw	r3,180(sp)
    3fcc:	d9002917 	ldw	r4,164(sp)
    3fd0:	002d883a 	mov	r22,zero
    3fd4:	18800104 	addi	r2,r3,4
    3fd8:	1cc00017 	ldw	r19,0(r3)
    3fdc:	203ebb0e 	bge	r4,zero,3acc <__alt_data_end+0xff003acc>
    3fe0:	003ef106 	br	3ba8 <__alt_data_end+0xff003ba8>
    3fe4:	9080040c 	andi	r2,r18,16
    3fe8:	1000921e 	bne	r2,zero,4234 <___vfprintf_internal_r+0x1aac>
    3fec:	9480100c 	andi	r18,r18,64
    3ff0:	90013926 	beq	r18,zero,44d8 <___vfprintf_internal_r+0x1d50>
    3ff4:	d9002d17 	ldw	r4,180(sp)
    3ff8:	d9402f17 	ldw	r5,188(sp)
    3ffc:	20800017 	ldw	r2,0(r4)
    4000:	21000104 	addi	r4,r4,4
    4004:	d9002d15 	stw	r4,180(sp)
    4008:	1140000d 	sth	r5,0(r2)
    400c:	003a1606 	br	2868 <__alt_data_end+0xff002868>
    4010:	9080100c 	andi	r2,r18,64
    4014:	10008026 	beq	r2,zero,4218 <___vfprintf_internal_r+0x1a90>
    4018:	d8c02d17 	ldw	r3,180(sp)
    401c:	1cc0000f 	ldh	r19,0(r3)
    4020:	18c00104 	addi	r3,r3,4
    4024:	d8c02d15 	stw	r3,180(sp)
    4028:	982dd7fa 	srai	r22,r19,31
    402c:	b005883a 	mov	r2,r22
    4030:	003b1f06 	br	2cb0 <__alt_data_end+0xff002cb0>
    4034:	9080100c 	andi	r2,r18,64
    4038:	d8002785 	stb	zero,158(sp)
    403c:	10008a1e 	bne	r2,zero,4268 <___vfprintf_internal_r+0x1ae0>
    4040:	d9402d17 	ldw	r5,180(sp)
    4044:	d8c02917 	ldw	r3,164(sp)
    4048:	002d883a 	mov	r22,zero
    404c:	28800104 	addi	r2,r5,4
    4050:	2cc00017 	ldw	r19,0(r5)
    4054:	183e4b0e 	bge	r3,zero,3984 <__alt_data_end+0xff003984>
    4058:	9d86b03a 	or	r3,r19,r22
    405c:	d8802d15 	stw	r2,180(sp)
    4060:	183e4c1e 	bne	r3,zero,3994 <__alt_data_end+0xff003994>
    4064:	0039883a 	mov	fp,zero
    4068:	0005883a 	mov	r2,zero
    406c:	003d4006 	br	3570 <__alt_data_end+0xff003570>
    4070:	01400074 	movhi	r5,1
    4074:	29450884 	addi	r5,r5,5154
    4078:	d9402b15 	stw	r5,172(sp)
    407c:	d9402b17 	ldw	r5,172(sp)
    4080:	1c47883a 	add	r3,r3,r17
    4084:	10800044 	addi	r2,r2,1
    4088:	41400015 	stw	r5,0(r8)
    408c:	44400115 	stw	r17,4(r8)
    4090:	d8c02015 	stw	r3,128(sp)
    4094:	d8801f15 	stw	r2,124(sp)
    4098:	010001c4 	movi	r4,7
    409c:	20bec816 	blt	r4,r2,3bc0 <__alt_data_end+0xff003bc0>
    40a0:	42000204 	addi	r8,r8,8
    40a4:	003ecd06 	br	3bdc <__alt_data_end+0xff003bdc>
    40a8:	d9002917 	ldw	r4,164(sp)
    40ac:	d8002785 	stb	zero,158(sp)
    40b0:	203d2d16 	blt	r4,zero,3568 <__alt_data_end+0xff003568>
    40b4:	00bfdfc4 	movi	r2,-129
    40b8:	90a4703a 	and	r18,r18,r2
    40bc:	003a9106 	br	2b04 <__alt_data_end+0xff002b04>
    40c0:	01000074 	movhi	r4,1
    40c4:	21050884 	addi	r4,r4,5154
    40c8:	d9002b15 	stw	r4,172(sp)
    40cc:	003c0c06 	br	3100 <__alt_data_end+0xff003100>
    40d0:	d9002c17 	ldw	r4,176(sp)
    40d4:	d9801e04 	addi	r6,sp,120
    40d8:	b80b883a 	mov	r5,r23
    40dc:	00095240 	call	9524 <__sprint_r>
    40e0:	103aab1e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    40e4:	d8c02017 	ldw	r3,128(sp)
    40e8:	da000404 	addi	r8,sp,16
    40ec:	003d4106 	br	35f4 <__alt_data_end+0xff0035f4>
    40f0:	d8801f17 	ldw	r2,124(sp)
    40f4:	01400074 	movhi	r5,1
    40f8:	01000044 	movi	r4,1
    40fc:	18c00044 	addi	r3,r3,1
    4100:	10800044 	addi	r2,r2,1
    4104:	29450804 	addi	r5,r5,5152
    4108:	41000115 	stw	r4,4(r8)
    410c:	41400015 	stw	r5,0(r8)
    4110:	d8c02015 	stw	r3,128(sp)
    4114:	d8801f15 	stw	r2,124(sp)
    4118:	010001c4 	movi	r4,7
    411c:	20805c16 	blt	r4,r2,4290 <___vfprintf_internal_r+0x1b08>
    4120:	42000204 	addi	r8,r8,8
    4124:	8800041e 	bne	r17,zero,4138 <___vfprintf_internal_r+0x19b0>
    4128:	d8803317 	ldw	r2,204(sp)
    412c:	1000021e 	bne	r2,zero,4138 <___vfprintf_internal_r+0x19b0>
    4130:	9080004c 	andi	r2,r18,1
    4134:	103c0926 	beq	r2,zero,315c <__alt_data_end+0xff00315c>
    4138:	d9003717 	ldw	r4,220(sp)
    413c:	d8801f17 	ldw	r2,124(sp)
    4140:	d9403417 	ldw	r5,208(sp)
    4144:	20c7883a 	add	r3,r4,r3
    4148:	10800044 	addi	r2,r2,1
    414c:	41000115 	stw	r4,4(r8)
    4150:	41400015 	stw	r5,0(r8)
    4154:	d8c02015 	stw	r3,128(sp)
    4158:	d8801f15 	stw	r2,124(sp)
    415c:	010001c4 	movi	r4,7
    4160:	20812116 	blt	r4,r2,45e8 <___vfprintf_internal_r+0x1e60>
    4164:	42000204 	addi	r8,r8,8
    4168:	0463c83a 	sub	r17,zero,r17
    416c:	0440730e 	bge	zero,r17,433c <___vfprintf_internal_r+0x1bb4>
    4170:	05800404 	movi	r22,16
    4174:	b440860e 	bge	r22,r17,4390 <___vfprintf_internal_r+0x1c08>
    4178:	01400074 	movhi	r5,1
    417c:	29450884 	addi	r5,r5,5154
    4180:	d9402b15 	stw	r5,172(sp)
    4184:	070001c4 	movi	fp,7
    4188:	dcc02c17 	ldw	r19,176(sp)
    418c:	00000306 	br	419c <___vfprintf_internal_r+0x1a14>
    4190:	42000204 	addi	r8,r8,8
    4194:	8c7ffc04 	addi	r17,r17,-16
    4198:	b440800e 	bge	r22,r17,439c <___vfprintf_internal_r+0x1c14>
    419c:	18c00404 	addi	r3,r3,16
    41a0:	10800044 	addi	r2,r2,1
    41a4:	45000015 	stw	r20,0(r8)
    41a8:	45800115 	stw	r22,4(r8)
    41ac:	d8c02015 	stw	r3,128(sp)
    41b0:	d8801f15 	stw	r2,124(sp)
    41b4:	e0bff60e 	bge	fp,r2,4190 <__alt_data_end+0xff004190>
    41b8:	d9801e04 	addi	r6,sp,120
    41bc:	b80b883a 	mov	r5,r23
    41c0:	9809883a 	mov	r4,r19
    41c4:	00095240 	call	9524 <__sprint_r>
    41c8:	103a711e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    41cc:	d8c02017 	ldw	r3,128(sp)
    41d0:	d8801f17 	ldw	r2,124(sp)
    41d4:	da000404 	addi	r8,sp,16
    41d8:	003fee06 	br	4194 <__alt_data_end+0xff004194>
    41dc:	00bfffc4 	movi	r2,-1
    41e0:	003a6f06 	br	2ba0 <__alt_data_end+0xff002ba0>
    41e4:	008011c4 	movi	r2,71
    41e8:	1440b816 	blt	r2,r17,44cc <___vfprintf_internal_r+0x1d44>
    41ec:	04000074 	movhi	r16,1
    41f0:	8404fa04 	addi	r16,r16,5096
    41f4:	00c000c4 	movi	r3,3
    41f8:	00bfdfc4 	movi	r2,-129
    41fc:	d8c02a15 	stw	r3,168(sp)
    4200:	90a4703a 	and	r18,r18,r2
    4204:	df002783 	ldbu	fp,158(sp)
    4208:	d8c02e15 	stw	r3,184(sp)
    420c:	d8002915 	stw	zero,164(sp)
    4210:	d8003215 	stw	zero,200(sp)
    4214:	003b2906 	br	2ebc <__alt_data_end+0xff002ebc>
    4218:	d9002d17 	ldw	r4,180(sp)
    421c:	24c00017 	ldw	r19,0(r4)
    4220:	21000104 	addi	r4,r4,4
    4224:	d9002d15 	stw	r4,180(sp)
    4228:	982dd7fa 	srai	r22,r19,31
    422c:	b005883a 	mov	r2,r22
    4230:	003a9f06 	br	2cb0 <__alt_data_end+0xff002cb0>
    4234:	d9402d17 	ldw	r5,180(sp)
    4238:	d8c02f17 	ldw	r3,188(sp)
    423c:	28800017 	ldw	r2,0(r5)
    4240:	29400104 	addi	r5,r5,4
    4244:	d9402d15 	stw	r5,180(sp)
    4248:	10c00015 	stw	r3,0(r2)
    424c:	00398606 	br	2868 <__alt_data_end+0xff002868>
    4250:	d9402d17 	ldw	r5,180(sp)
    4254:	002d883a 	mov	r22,zero
    4258:	2cc00017 	ldw	r19,0(r5)
    425c:	29400104 	addi	r5,r5,4
    4260:	d9402d15 	stw	r5,180(sp)
    4264:	003c2306 	br	32f4 <__alt_data_end+0xff0032f4>
    4268:	d8c02d17 	ldw	r3,180(sp)
    426c:	d9002917 	ldw	r4,164(sp)
    4270:	002d883a 	mov	r22,zero
    4274:	18800104 	addi	r2,r3,4
    4278:	1cc0000b 	ldhu	r19,0(r3)
    427c:	203dc10e 	bge	r4,zero,3984 <__alt_data_end+0xff003984>
    4280:	003f7506 	br	4058 <__alt_data_end+0xff004058>
    4284:	04000074 	movhi	r16,1
    4288:	8404f804 	addi	r16,r16,5088
    428c:	003acc06 	br	2dc0 <__alt_data_end+0xff002dc0>
    4290:	d9002c17 	ldw	r4,176(sp)
    4294:	d9801e04 	addi	r6,sp,120
    4298:	b80b883a 	mov	r5,r23
    429c:	00095240 	call	9524 <__sprint_r>
    42a0:	103a3b1e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    42a4:	dc402617 	ldw	r17,152(sp)
    42a8:	d8c02017 	ldw	r3,128(sp)
    42ac:	da000404 	addi	r8,sp,16
    42b0:	003f9c06 	br	4124 <__alt_data_end+0xff004124>
    42b4:	ac400043 	ldbu	r17,1(r21)
    42b8:	94800814 	ori	r18,r18,32
    42bc:	ad400044 	addi	r21,r21,1
    42c0:	8c403fcc 	andi	r17,r17,255
    42c4:	8c40201c 	xori	r17,r17,128
    42c8:	8c7fe004 	addi	r17,r17,-128
    42cc:	00398f06 	br	290c <__alt_data_end+0xff00290c>
    42d0:	d8c02d15 	stw	r3,180(sp)
    42d4:	0039883a 	mov	fp,zero
    42d8:	003e3506 	br	3bb0 <__alt_data_end+0xff003bb0>
    42dc:	d9002c17 	ldw	r4,176(sp)
    42e0:	d9801e04 	addi	r6,sp,120
    42e4:	b80b883a 	mov	r5,r23
    42e8:	00095240 	call	9524 <__sprint_r>
    42ec:	103a281e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    42f0:	d8c02017 	ldw	r3,128(sp)
    42f4:	da000404 	addi	r8,sp,16
    42f8:	003cd006 	br	363c <__alt_data_end+0xff00363c>
    42fc:	8009883a 	mov	r4,r16
    4300:	da003d15 	stw	r8,244(sp)
    4304:	00026f00 	call	26f0 <strlen>
    4308:	d8802e15 	stw	r2,184(sp)
    430c:	da003d17 	ldw	r8,244(sp)
    4310:	103c340e 	bge	r2,zero,33e4 <__alt_data_end+0xff0033e4>
    4314:	0005883a 	mov	r2,zero
    4318:	003c3206 	br	33e4 <__alt_data_end+0xff0033e4>
    431c:	d9002c17 	ldw	r4,176(sp)
    4320:	d9801e04 	addi	r6,sp,120
    4324:	b80b883a 	mov	r5,r23
    4328:	00095240 	call	9524 <__sprint_r>
    432c:	103a181e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    4330:	d8c02017 	ldw	r3,128(sp)
    4334:	d8801f17 	ldw	r2,124(sp)
    4338:	da000404 	addi	r8,sp,16
    433c:	d9403317 	ldw	r5,204(sp)
    4340:	10800044 	addi	r2,r2,1
    4344:	44000015 	stw	r16,0(r8)
    4348:	28c7883a 	add	r3,r5,r3
    434c:	003b7d06 	br	3144 <__alt_data_end+0xff003144>
    4350:	01000074 	movhi	r4,1
    4354:	21050c84 	addi	r4,r4,5170
    4358:	d9003515 	stw	r4,212(sp)
    435c:	003b1406 	br	2fb0 <__alt_data_end+0xff002fb0>
    4360:	013fffc4 	movi	r4,-1
    4364:	003a3506 	br	2c3c <__alt_data_end+0xff002c3c>
    4368:	0023883a 	mov	r17,zero
    436c:	003d9d06 	br	39e4 <__alt_data_end+0xff0039e4>
    4370:	d9002c17 	ldw	r4,176(sp)
    4374:	d9801e04 	addi	r6,sp,120
    4378:	b80b883a 	mov	r5,r23
    437c:	00095240 	call	9524 <__sprint_r>
    4380:	103a031e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    4384:	d8c02017 	ldw	r3,128(sp)
    4388:	da000404 	addi	r8,sp,16
    438c:	003d9406 	br	39e0 <__alt_data_end+0xff0039e0>
    4390:	01000074 	movhi	r4,1
    4394:	21050884 	addi	r4,r4,5154
    4398:	d9002b15 	stw	r4,172(sp)
    439c:	d9002b17 	ldw	r4,172(sp)
    43a0:	1c47883a 	add	r3,r3,r17
    43a4:	10800044 	addi	r2,r2,1
    43a8:	41000015 	stw	r4,0(r8)
    43ac:	44400115 	stw	r17,4(r8)
    43b0:	d8c02015 	stw	r3,128(sp)
    43b4:	d8801f15 	stw	r2,124(sp)
    43b8:	010001c4 	movi	r4,7
    43bc:	20bfd716 	blt	r4,r2,431c <__alt_data_end+0xff00431c>
    43c0:	42000204 	addi	r8,r8,8
    43c4:	003fdd06 	br	433c <__alt_data_end+0xff00433c>
    43c8:	d9002c17 	ldw	r4,176(sp)
    43cc:	d9801e04 	addi	r6,sp,120
    43d0:	b80b883a 	mov	r5,r23
    43d4:	00095240 	call	9524 <__sprint_r>
    43d8:	1039ed1e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    43dc:	d8802617 	ldw	r2,152(sp)
    43e0:	d8c02017 	ldw	r3,128(sp)
    43e4:	da000404 	addi	r8,sp,16
    43e8:	003e1006 	br	3c2c <__alt_data_end+0xff003c2c>
    43ec:	00800044 	movi	r2,1
    43f0:	10803fcc 	andi	r2,r2,255
    43f4:	00c00044 	movi	r3,1
    43f8:	10fa3526 	beq	r2,r3,2cd0 <__alt_data_end+0xff002cd0>
    43fc:	00c00084 	movi	r3,2
    4400:	10fbcb26 	beq	r2,r3,3330 <__alt_data_end+0xff003330>
    4404:	003a8f06 	br	2e44 <__alt_data_end+0xff002e44>
    4408:	01000074 	movhi	r4,1
    440c:	21050c84 	addi	r4,r4,5170
    4410:	d9003515 	stw	r4,212(sp)
    4414:	003b7606 	br	31f0 <__alt_data_end+0xff0031f0>
    4418:	d8802917 	ldw	r2,164(sp)
    441c:	00c00184 	movi	r3,6
    4420:	1880012e 	bgeu	r3,r2,4428 <___vfprintf_internal_r+0x1ca0>
    4424:	1805883a 	mov	r2,r3
    4428:	d8802e15 	stw	r2,184(sp)
    442c:	1000ef16 	blt	r2,zero,47ec <___vfprintf_internal_r+0x2064>
    4430:	04000074 	movhi	r16,1
    4434:	d8802a15 	stw	r2,168(sp)
    4438:	dcc02d15 	stw	r19,180(sp)
    443c:	d8002915 	stw	zero,164(sp)
    4440:	d8003215 	stw	zero,200(sp)
    4444:	84050604 	addi	r16,r16,5144
    4448:	0039883a 	mov	fp,zero
    444c:	003aa206 	br	2ed8 <__alt_data_end+0xff002ed8>
    4450:	0021883a 	mov	r16,zero
    4454:	003e0706 	br	3c74 <__alt_data_end+0xff003c74>
    4458:	d9002c17 	ldw	r4,176(sp)
    445c:	d9801e04 	addi	r6,sp,120
    4460:	b80b883a 	mov	r5,r23
    4464:	00095240 	call	9524 <__sprint_r>
    4468:	1039c91e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    446c:	d8802617 	ldw	r2,152(sp)
    4470:	d9403317 	ldw	r5,204(sp)
    4474:	d8c02017 	ldw	r3,128(sp)
    4478:	da000404 	addi	r8,sp,16
    447c:	2885c83a 	sub	r2,r5,r2
    4480:	003dfb06 	br	3c70 <__alt_data_end+0xff003c70>
    4484:	9080004c 	andi	r2,r18,1
    4488:	103e8f1e 	bne	r2,zero,3ec8 <__alt_data_end+0xff003ec8>
    448c:	d8802117 	ldw	r2,132(sp)
    4490:	003e9e06 	br	3f0c <__alt_data_end+0xff003f0c>
    4494:	1025883a 	mov	r18,r2
    4498:	0039883a 	mov	fp,zero
    449c:	00800084 	movi	r2,2
    44a0:	003fd306 	br	43f0 <__alt_data_end+0xff0043f0>
    44a4:	07000b44 	movi	fp,45
    44a8:	df002785 	stb	fp,158(sp)
    44ac:	003a4006 	br	2db0 <__alt_data_end+0xff002db0>
    44b0:	00c00b44 	movi	r3,45
    44b4:	d8c02785 	stb	r3,158(sp)
    44b8:	d8802a15 	stw	r2,168(sp)
    44bc:	dc802b17 	ldw	r18,172(sp)
    44c0:	d8002915 	stw	zero,164(sp)
    44c4:	07000b44 	movi	fp,45
    44c8:	003a8006 	br	2ecc <__alt_data_end+0xff002ecc>
    44cc:	04000074 	movhi	r16,1
    44d0:	8404fb04 	addi	r16,r16,5100
    44d4:	003f4706 	br	41f4 <__alt_data_end+0xff0041f4>
    44d8:	d8c02d17 	ldw	r3,180(sp)
    44dc:	d9002f17 	ldw	r4,188(sp)
    44e0:	18800017 	ldw	r2,0(r3)
    44e4:	18c00104 	addi	r3,r3,4
    44e8:	d8c02d15 	stw	r3,180(sp)
    44ec:	11000015 	stw	r4,0(r2)
    44f0:	0038dd06 	br	2868 <__alt_data_end+0xff002868>
    44f4:	dd802617 	ldw	r22,152(sp)
    44f8:	00bfff44 	movi	r2,-3
    44fc:	b0801c16 	blt	r22,r2,4570 <___vfprintf_internal_r+0x1de8>
    4500:	d9402917 	ldw	r5,164(sp)
    4504:	2d801a16 	blt	r5,r22,4570 <___vfprintf_internal_r+0x1de8>
    4508:	dd803215 	stw	r22,200(sp)
    450c:	003e8906 	br	3f34 <__alt_data_end+0xff003f34>
    4510:	01000074 	movhi	r4,1
    4514:	21050884 	addi	r4,r4,5154
    4518:	d9002b15 	stw	r4,172(sp)
    451c:	003c9106 	br	3764 <__alt_data_end+0xff003764>
    4520:	e005883a 	mov	r2,fp
    4524:	003e7906 	br	3f0c <__alt_data_end+0xff003f0c>
    4528:	d9402917 	ldw	r5,164(sp)
    452c:	df002783 	ldbu	fp,158(sp)
    4530:	dcc02d15 	stw	r19,180(sp)
    4534:	d9402a15 	stw	r5,168(sp)
    4538:	d9402e15 	stw	r5,184(sp)
    453c:	d8002915 	stw	zero,164(sp)
    4540:	d8003215 	stw	zero,200(sp)
    4544:	003a5d06 	br	2ebc <__alt_data_end+0xff002ebc>
    4548:	9080004c 	andi	r2,r18,1
    454c:	0039883a 	mov	fp,zero
    4550:	10000426 	beq	r2,zero,4564 <___vfprintf_internal_r+0x1ddc>
    4554:	00800c04 	movi	r2,48
    4558:	dc001dc4 	addi	r16,sp,119
    455c:	d8801dc5 	stb	r2,119(sp)
    4560:	003b8006 	br	3364 <__alt_data_end+0xff003364>
    4564:	d8002e15 	stw	zero,184(sp)
    4568:	dc001e04 	addi	r16,sp,120
    456c:	003a4d06 	br	2ea4 <__alt_data_end+0xff002ea4>
    4570:	8c7fff84 	addi	r17,r17,-2
    4574:	b5bfffc4 	addi	r22,r22,-1
    4578:	dd802615 	stw	r22,152(sp)
    457c:	dc4022c5 	stb	r17,139(sp)
    4580:	b000bf16 	blt	r22,zero,4880 <___vfprintf_internal_r+0x20f8>
    4584:	00800ac4 	movi	r2,43
    4588:	d8802305 	stb	r2,140(sp)
    458c:	00800244 	movi	r2,9
    4590:	15807016 	blt	r2,r22,4754 <___vfprintf_internal_r+0x1fcc>
    4594:	00800c04 	movi	r2,48
    4598:	b5800c04 	addi	r22,r22,48
    459c:	d8802345 	stb	r2,141(sp)
    45a0:	dd802385 	stb	r22,142(sp)
    45a4:	d88023c4 	addi	r2,sp,143
    45a8:	df0022c4 	addi	fp,sp,139
    45ac:	d8c03317 	ldw	r3,204(sp)
    45b0:	1739c83a 	sub	fp,r2,fp
    45b4:	d9003317 	ldw	r4,204(sp)
    45b8:	e0c7883a 	add	r3,fp,r3
    45bc:	df003a15 	stw	fp,232(sp)
    45c0:	d8c02e15 	stw	r3,184(sp)
    45c4:	00800044 	movi	r2,1
    45c8:	1100b30e 	bge	r2,r4,4898 <___vfprintf_internal_r+0x2110>
    45cc:	d8c02e17 	ldw	r3,184(sp)
    45d0:	18c00044 	addi	r3,r3,1
    45d4:	d8c02e15 	stw	r3,184(sp)
    45d8:	1805883a 	mov	r2,r3
    45dc:	1800ac16 	blt	r3,zero,4890 <___vfprintf_internal_r+0x2108>
    45e0:	d8003215 	stw	zero,200(sp)
    45e4:	003e5d06 	br	3f5c <__alt_data_end+0xff003f5c>
    45e8:	d9002c17 	ldw	r4,176(sp)
    45ec:	d9801e04 	addi	r6,sp,120
    45f0:	b80b883a 	mov	r5,r23
    45f4:	00095240 	call	9524 <__sprint_r>
    45f8:	1039651e 	bne	r2,zero,2b90 <__alt_data_end+0xff002b90>
    45fc:	dc402617 	ldw	r17,152(sp)
    4600:	d8c02017 	ldw	r3,128(sp)
    4604:	d8801f17 	ldw	r2,124(sp)
    4608:	da000404 	addi	r8,sp,16
    460c:	003ed606 	br	4168 <__alt_data_end+0xff004168>
    4610:	582b883a 	mov	r21,r11
    4614:	d8002915 	stw	zero,164(sp)
    4618:	0038bd06 	br	2910 <__alt_data_end+0xff002910>
    461c:	d8802917 	ldw	r2,164(sp)
    4620:	103e071e 	bne	r2,zero,3e40 <__alt_data_end+0xff003e40>
    4624:	dc002915 	stw	r16,164(sp)
    4628:	003e0506 	br	3e40 <__alt_data_end+0xff003e40>
    462c:	d9002917 	ldw	r4,164(sp)
    4630:	20c00044 	addi	r3,r4,1
    4634:	003e0f06 	br	3e74 <__alt_data_end+0xff003e74>
    4638:	01400184 	movi	r5,6
    463c:	d9402915 	stw	r5,164(sp)
    4640:	003dff06 	br	3e40 <__alt_data_end+0xff003e40>
    4644:	d8802104 	addi	r2,sp,132
    4648:	d8800315 	stw	r2,12(sp)
    464c:	d8802504 	addi	r2,sp,148
    4650:	d8800215 	stw	r2,8(sp)
    4654:	d8802604 	addi	r2,sp,152
    4658:	d8800115 	stw	r2,4(sp)
    465c:	d8802917 	ldw	r2,164(sp)
    4660:	d9403617 	ldw	r5,216(sp)
    4664:	d9002c17 	ldw	r4,176(sp)
    4668:	d8800015 	stw	r2,0(sp)
    466c:	01c000c4 	movi	r7,3
    4670:	980d883a 	mov	r6,r19
    4674:	da003d15 	stw	r8,244(sp)
    4678:	0004dac0 	call	4dac <_dtoa_r>
    467c:	d8c02917 	ldw	r3,164(sp)
    4680:	da003d17 	ldw	r8,244(sp)
    4684:	1021883a 	mov	r16,r2
    4688:	10f9883a 	add	fp,r2,r3
    468c:	81000007 	ldb	r4,0(r16)
    4690:	00800c04 	movi	r2,48
    4694:	20805e26 	beq	r4,r2,4810 <___vfprintf_internal_r+0x2088>
    4698:	d8c02617 	ldw	r3,152(sp)
    469c:	e0f9883a 	add	fp,fp,r3
    46a0:	003e0a06 	br	3ecc <__alt_data_end+0xff003ecc>
    46a4:	00c00b44 	movi	r3,45
    46a8:	24e0003c 	xorhi	r19,r4,32768
    46ac:	d8c02a05 	stb	r3,168(sp)
    46b0:	003de906 	br	3e58 <__alt_data_end+0xff003e58>
    46b4:	d8c03217 	ldw	r3,200(sp)
    46b8:	00c07a0e 	bge	zero,r3,48a4 <___vfprintf_internal_r+0x211c>
    46bc:	00800044 	movi	r2,1
    46c0:	d9003317 	ldw	r4,204(sp)
    46c4:	1105883a 	add	r2,r2,r4
    46c8:	d8802e15 	stw	r2,184(sp)
    46cc:	10004e16 	blt	r2,zero,4808 <___vfprintf_internal_r+0x2080>
    46d0:	044019c4 	movi	r17,103
    46d4:	003e2106 	br	3f5c <__alt_data_end+0xff003f5c>
    46d8:	d9002917 	ldw	r4,164(sp)
    46dc:	d8802104 	addi	r2,sp,132
    46e0:	d8800315 	stw	r2,12(sp)
    46e4:	d9000015 	stw	r4,0(sp)
    46e8:	d8802504 	addi	r2,sp,148
    46ec:	d9403617 	ldw	r5,216(sp)
    46f0:	d9002c17 	ldw	r4,176(sp)
    46f4:	d8800215 	stw	r2,8(sp)
    46f8:	d8802604 	addi	r2,sp,152
    46fc:	d8800115 	stw	r2,4(sp)
    4700:	01c000c4 	movi	r7,3
    4704:	980d883a 	mov	r6,r19
    4708:	da003d15 	stw	r8,244(sp)
    470c:	0004dac0 	call	4dac <_dtoa_r>
    4710:	d8c02917 	ldw	r3,164(sp)
    4714:	da003d17 	ldw	r8,244(sp)
    4718:	1021883a 	mov	r16,r2
    471c:	00801184 	movi	r2,70
    4720:	80f9883a 	add	fp,r16,r3
    4724:	88bfd926 	beq	r17,r2,468c <__alt_data_end+0xff00468c>
    4728:	003de806 	br	3ecc <__alt_data_end+0xff003ecc>
    472c:	d9002917 	ldw	r4,164(sp)
    4730:	00c04d0e 	bge	zero,r3,4868 <___vfprintf_internal_r+0x20e0>
    4734:	2000441e 	bne	r4,zero,4848 <___vfprintf_internal_r+0x20c0>
    4738:	9480004c 	andi	r18,r18,1
    473c:	9000421e 	bne	r18,zero,4848 <___vfprintf_internal_r+0x20c0>
    4740:	1805883a 	mov	r2,r3
    4744:	18007016 	blt	r3,zero,4908 <___vfprintf_internal_r+0x2180>
    4748:	d8c03217 	ldw	r3,200(sp)
    474c:	d8c02e15 	stw	r3,184(sp)
    4750:	003e0206 	br	3f5c <__alt_data_end+0xff003f5c>
    4754:	df0022c4 	addi	fp,sp,139
    4758:	dc002915 	stw	r16,164(sp)
    475c:	4027883a 	mov	r19,r8
    4760:	e021883a 	mov	r16,fp
    4764:	b009883a 	mov	r4,r22
    4768:	01400284 	movi	r5,10
    476c:	0001bf80 	call	1bf8 <__modsi3>
    4770:	10800c04 	addi	r2,r2,48
    4774:	843fffc4 	addi	r16,r16,-1
    4778:	b009883a 	mov	r4,r22
    477c:	01400284 	movi	r5,10
    4780:	80800005 	stb	r2,0(r16)
    4784:	0001b740 	call	1b74 <__divsi3>
    4788:	102d883a 	mov	r22,r2
    478c:	00800244 	movi	r2,9
    4790:	15bff416 	blt	r2,r22,4764 <__alt_data_end+0xff004764>
    4794:	9811883a 	mov	r8,r19
    4798:	b0800c04 	addi	r2,r22,48
    479c:	8027883a 	mov	r19,r16
    47a0:	997fffc4 	addi	r5,r19,-1
    47a4:	98bfffc5 	stb	r2,-1(r19)
    47a8:	dc002917 	ldw	r16,164(sp)
    47ac:	2f006a2e 	bgeu	r5,fp,4958 <___vfprintf_internal_r+0x21d0>
    47b0:	d9c02384 	addi	r7,sp,142
    47b4:	3ccfc83a 	sub	r7,r7,r19
    47b8:	d9002344 	addi	r4,sp,141
    47bc:	e1cf883a 	add	r7,fp,r7
    47c0:	00000106 	br	47c8 <___vfprintf_internal_r+0x2040>
    47c4:	28800003 	ldbu	r2,0(r5)
    47c8:	20800005 	stb	r2,0(r4)
    47cc:	21000044 	addi	r4,r4,1
    47d0:	29400044 	addi	r5,r5,1
    47d4:	393ffb1e 	bne	r7,r4,47c4 <__alt_data_end+0xff0047c4>
    47d8:	d8802304 	addi	r2,sp,140
    47dc:	14c5c83a 	sub	r2,r2,r19
    47e0:	d8c02344 	addi	r3,sp,141
    47e4:	1885883a 	add	r2,r3,r2
    47e8:	003f7006 	br	45ac <__alt_data_end+0xff0045ac>
    47ec:	0005883a 	mov	r2,zero
    47f0:	003f0f06 	br	4430 <__alt_data_end+0xff004430>
    47f4:	d8c03217 	ldw	r3,200(sp)
    47f8:	18c00044 	addi	r3,r3,1
    47fc:	d8c02e15 	stw	r3,184(sp)
    4800:	1805883a 	mov	r2,r3
    4804:	183fb20e 	bge	r3,zero,46d0 <__alt_data_end+0xff0046d0>
    4808:	0005883a 	mov	r2,zero
    480c:	003fb006 	br	46d0 <__alt_data_end+0xff0046d0>
    4810:	d9003617 	ldw	r4,216(sp)
    4814:	000d883a 	mov	r6,zero
    4818:	000f883a 	mov	r7,zero
    481c:	980b883a 	mov	r5,r19
    4820:	d8c03c15 	stw	r3,240(sp)
    4824:	da003d15 	stw	r8,244(sp)
    4828:	000cfe80 	call	cfe8 <__eqdf2>
    482c:	d8c03c17 	ldw	r3,240(sp)
    4830:	da003d17 	ldw	r8,244(sp)
    4834:	103f9826 	beq	r2,zero,4698 <__alt_data_end+0xff004698>
    4838:	00800044 	movi	r2,1
    483c:	10c7c83a 	sub	r3,r2,r3
    4840:	d8c02615 	stw	r3,152(sp)
    4844:	003f9506 	br	469c <__alt_data_end+0xff00469c>
    4848:	d9002917 	ldw	r4,164(sp)
    484c:	d8c03217 	ldw	r3,200(sp)
    4850:	20800044 	addi	r2,r4,1
    4854:	1885883a 	add	r2,r3,r2
    4858:	d8802e15 	stw	r2,184(sp)
    485c:	103dbf0e 	bge	r2,zero,3f5c <__alt_data_end+0xff003f5c>
    4860:	0005883a 	mov	r2,zero
    4864:	003dbd06 	br	3f5c <__alt_data_end+0xff003f5c>
    4868:	2000211e 	bne	r4,zero,48f0 <___vfprintf_internal_r+0x2168>
    486c:	9480004c 	andi	r18,r18,1
    4870:	90001f1e 	bne	r18,zero,48f0 <___vfprintf_internal_r+0x2168>
    4874:	00800044 	movi	r2,1
    4878:	d8802e15 	stw	r2,184(sp)
    487c:	003db706 	br	3f5c <__alt_data_end+0xff003f5c>
    4880:	00800b44 	movi	r2,45
    4884:	05adc83a 	sub	r22,zero,r22
    4888:	d8802305 	stb	r2,140(sp)
    488c:	003f3f06 	br	458c <__alt_data_end+0xff00458c>
    4890:	0005883a 	mov	r2,zero
    4894:	003f5206 	br	45e0 <__alt_data_end+0xff0045e0>
    4898:	90a4703a 	and	r18,r18,r2
    489c:	903f4e26 	beq	r18,zero,45d8 <__alt_data_end+0xff0045d8>
    48a0:	003f4a06 	br	45cc <__alt_data_end+0xff0045cc>
    48a4:	00800084 	movi	r2,2
    48a8:	10c5c83a 	sub	r2,r2,r3
    48ac:	003f8406 	br	46c0 <__alt_data_end+0xff0046c0>
    48b0:	d8802d17 	ldw	r2,180(sp)
    48b4:	d9002d17 	ldw	r4,180(sp)
    48b8:	ac400043 	ldbu	r17,1(r21)
    48bc:	10800017 	ldw	r2,0(r2)
    48c0:	582b883a 	mov	r21,r11
    48c4:	d8802915 	stw	r2,164(sp)
    48c8:	20800104 	addi	r2,r4,4
    48cc:	d9002917 	ldw	r4,164(sp)
    48d0:	d8802d15 	stw	r2,180(sp)
    48d4:	203e7a0e 	bge	r4,zero,42c0 <__alt_data_end+0xff0042c0>
    48d8:	8c403fcc 	andi	r17,r17,255
    48dc:	00bfffc4 	movi	r2,-1
    48e0:	8c40201c 	xori	r17,r17,128
    48e4:	d8802915 	stw	r2,164(sp)
    48e8:	8c7fe004 	addi	r17,r17,-128
    48ec:	00380706 	br	290c <__alt_data_end+0xff00290c>
    48f0:	d8c02917 	ldw	r3,164(sp)
    48f4:	18c00084 	addi	r3,r3,2
    48f8:	d8c02e15 	stw	r3,184(sp)
    48fc:	1805883a 	mov	r2,r3
    4900:	183d960e 	bge	r3,zero,3f5c <__alt_data_end+0xff003f5c>
    4904:	003fd606 	br	4860 <__alt_data_end+0xff004860>
    4908:	0005883a 	mov	r2,zero
    490c:	003f8e06 	br	4748 <__alt_data_end+0xff004748>
    4910:	9080004c 	andi	r2,r18,1
    4914:	103f811e 	bne	r2,zero,471c <__alt_data_end+0xff00471c>
    4918:	d8802117 	ldw	r2,132(sp)
    491c:	1405c83a 	sub	r2,r2,r16
    4920:	d8803315 	stw	r2,204(sp)
    4924:	b47ef326 	beq	r22,r17,44f4 <__alt_data_end+0xff0044f4>
    4928:	dd802617 	ldw	r22,152(sp)
    492c:	003f1106 	br	4574 <__alt_data_end+0xff004574>
    4930:	d9c02785 	stb	r7,158(sp)
    4934:	00390406 	br	2d48 <__alt_data_end+0xff002d48>
    4938:	d9c02785 	stb	r7,158(sp)
    493c:	0038d306 	br	2c8c <__alt_data_end+0xff002c8c>
    4940:	d9c02785 	stb	r7,158(sp)
    4944:	003a6106 	br	32cc <__alt_data_end+0xff0032cc>
    4948:	d9c02785 	stb	r7,158(sp)
    494c:	003af806 	br	3530 <__alt_data_end+0xff003530>
    4950:	0005883a 	mov	r2,zero
    4954:	003d7e06 	br	3f50 <__alt_data_end+0xff003f50>
    4958:	d8802344 	addi	r2,sp,141
    495c:	003f1306 	br	45ac <__alt_data_end+0xff0045ac>
    4960:	d9c02785 	stb	r7,158(sp)
    4964:	00392306 	br	2df4 <__alt_data_end+0xff002df4>
    4968:	d9c02785 	stb	r7,158(sp)
    496c:	003aa906 	br	3414 <__alt_data_end+0xff003414>
    4970:	d9c02785 	stb	r7,158(sp)
    4974:	003a3d06 	br	326c <__alt_data_end+0xff00326c>
    4978:	d9c02785 	stb	r7,158(sp)
    497c:	003aca06 	br	34a8 <__alt_data_end+0xff0034a8>

00004980 <__vfprintf_internal>:
    4980:	00800074 	movhi	r2,1
    4984:	108ca304 	addi	r2,r2,12940
    4988:	300f883a 	mov	r7,r6
    498c:	280d883a 	mov	r6,r5
    4990:	200b883a 	mov	r5,r4
    4994:	11000017 	ldw	r4,0(r2)
    4998:	00027881 	jmpi	2788 <___vfprintf_internal_r>

0000499c <__sbprintf>:
    499c:	2880030b 	ldhu	r2,12(r5)
    49a0:	2ac01917 	ldw	r11,100(r5)
    49a4:	2a80038b 	ldhu	r10,14(r5)
    49a8:	2a400717 	ldw	r9,28(r5)
    49ac:	2a000917 	ldw	r8,36(r5)
    49b0:	defee204 	addi	sp,sp,-1144
    49b4:	00c10004 	movi	r3,1024
    49b8:	dc011a15 	stw	r16,1128(sp)
    49bc:	10bfff4c 	andi	r2,r2,65533
    49c0:	2821883a 	mov	r16,r5
    49c4:	d8cb883a 	add	r5,sp,r3
    49c8:	dc811c15 	stw	r18,1136(sp)
    49cc:	dc411b15 	stw	r17,1132(sp)
    49d0:	dfc11d15 	stw	ra,1140(sp)
    49d4:	2025883a 	mov	r18,r4
    49d8:	d881030d 	sth	r2,1036(sp)
    49dc:	dac11915 	stw	r11,1124(sp)
    49e0:	da81038d 	sth	r10,1038(sp)
    49e4:	da410715 	stw	r9,1052(sp)
    49e8:	da010915 	stw	r8,1060(sp)
    49ec:	dec10015 	stw	sp,1024(sp)
    49f0:	dec10415 	stw	sp,1040(sp)
    49f4:	d8c10215 	stw	r3,1032(sp)
    49f8:	d8c10515 	stw	r3,1044(sp)
    49fc:	d8010615 	stw	zero,1048(sp)
    4a00:	00027880 	call	2788 <___vfprintf_internal_r>
    4a04:	1023883a 	mov	r17,r2
    4a08:	10000416 	blt	r2,zero,4a1c <__sbprintf+0x80>
    4a0c:	d9410004 	addi	r5,sp,1024
    4a10:	9009883a 	mov	r4,r18
    4a14:	00066500 	call	6650 <_fflush_r>
    4a18:	10000d1e 	bne	r2,zero,4a50 <__sbprintf+0xb4>
    4a1c:	d881030b 	ldhu	r2,1036(sp)
    4a20:	1080100c 	andi	r2,r2,64
    4a24:	10000326 	beq	r2,zero,4a34 <__sbprintf+0x98>
    4a28:	8080030b 	ldhu	r2,12(r16)
    4a2c:	10801014 	ori	r2,r2,64
    4a30:	8080030d 	sth	r2,12(r16)
    4a34:	8805883a 	mov	r2,r17
    4a38:	dfc11d17 	ldw	ra,1140(sp)
    4a3c:	dc811c17 	ldw	r18,1136(sp)
    4a40:	dc411b17 	ldw	r17,1132(sp)
    4a44:	dc011a17 	ldw	r16,1128(sp)
    4a48:	dec11e04 	addi	sp,sp,1144
    4a4c:	f800283a 	ret
    4a50:	047fffc4 	movi	r17,-1
    4a54:	003ff106 	br	4a1c <__alt_data_end+0xff004a1c>

00004a58 <__swsetup_r>:
    4a58:	00800074 	movhi	r2,1
    4a5c:	defffd04 	addi	sp,sp,-12
    4a60:	108ca304 	addi	r2,r2,12940
    4a64:	dc400115 	stw	r17,4(sp)
    4a68:	2023883a 	mov	r17,r4
    4a6c:	11000017 	ldw	r4,0(r2)
    4a70:	dc000015 	stw	r16,0(sp)
    4a74:	dfc00215 	stw	ra,8(sp)
    4a78:	2821883a 	mov	r16,r5
    4a7c:	20000226 	beq	r4,zero,4a88 <__swsetup_r+0x30>
    4a80:	20800e17 	ldw	r2,56(r4)
    4a84:	10003126 	beq	r2,zero,4b4c <__swsetup_r+0xf4>
    4a88:	8080030b 	ldhu	r2,12(r16)
    4a8c:	10c0020c 	andi	r3,r2,8
    4a90:	1009883a 	mov	r4,r2
    4a94:	18000f26 	beq	r3,zero,4ad4 <__swsetup_r+0x7c>
    4a98:	80c00417 	ldw	r3,16(r16)
    4a9c:	18001526 	beq	r3,zero,4af4 <__swsetup_r+0x9c>
    4aa0:	1100004c 	andi	r4,r2,1
    4aa4:	20001c1e 	bne	r4,zero,4b18 <__swsetup_r+0xc0>
    4aa8:	1080008c 	andi	r2,r2,2
    4aac:	1000291e 	bne	r2,zero,4b54 <__swsetup_r+0xfc>
    4ab0:	80800517 	ldw	r2,20(r16)
    4ab4:	80800215 	stw	r2,8(r16)
    4ab8:	18001c26 	beq	r3,zero,4b2c <__swsetup_r+0xd4>
    4abc:	0005883a 	mov	r2,zero
    4ac0:	dfc00217 	ldw	ra,8(sp)
    4ac4:	dc400117 	ldw	r17,4(sp)
    4ac8:	dc000017 	ldw	r16,0(sp)
    4acc:	dec00304 	addi	sp,sp,12
    4ad0:	f800283a 	ret
    4ad4:	2080040c 	andi	r2,r4,16
    4ad8:	10002e26 	beq	r2,zero,4b94 <__swsetup_r+0x13c>
    4adc:	2080010c 	andi	r2,r4,4
    4ae0:	10001e1e 	bne	r2,zero,4b5c <__swsetup_r+0x104>
    4ae4:	80c00417 	ldw	r3,16(r16)
    4ae8:	20800214 	ori	r2,r4,8
    4aec:	8080030d 	sth	r2,12(r16)
    4af0:	183feb1e 	bne	r3,zero,4aa0 <__alt_data_end+0xff004aa0>
    4af4:	1100a00c 	andi	r4,r2,640
    4af8:	01408004 	movi	r5,512
    4afc:	217fe826 	beq	r4,r5,4aa0 <__alt_data_end+0xff004aa0>
    4b00:	800b883a 	mov	r5,r16
    4b04:	8809883a 	mov	r4,r17
    4b08:	00075d00 	call	75d0 <__smakebuf_r>
    4b0c:	8080030b 	ldhu	r2,12(r16)
    4b10:	80c00417 	ldw	r3,16(r16)
    4b14:	003fe206 	br	4aa0 <__alt_data_end+0xff004aa0>
    4b18:	80800517 	ldw	r2,20(r16)
    4b1c:	80000215 	stw	zero,8(r16)
    4b20:	0085c83a 	sub	r2,zero,r2
    4b24:	80800615 	stw	r2,24(r16)
    4b28:	183fe41e 	bne	r3,zero,4abc <__alt_data_end+0xff004abc>
    4b2c:	80c0030b 	ldhu	r3,12(r16)
    4b30:	0005883a 	mov	r2,zero
    4b34:	1900200c 	andi	r4,r3,128
    4b38:	203fe126 	beq	r4,zero,4ac0 <__alt_data_end+0xff004ac0>
    4b3c:	18c01014 	ori	r3,r3,64
    4b40:	80c0030d 	sth	r3,12(r16)
    4b44:	00bfffc4 	movi	r2,-1
    4b48:	003fdd06 	br	4ac0 <__alt_data_end+0xff004ac0>
    4b4c:	0006a2c0 	call	6a2c <__sinit>
    4b50:	003fcd06 	br	4a88 <__alt_data_end+0xff004a88>
    4b54:	0005883a 	mov	r2,zero
    4b58:	003fd606 	br	4ab4 <__alt_data_end+0xff004ab4>
    4b5c:	81400c17 	ldw	r5,48(r16)
    4b60:	28000626 	beq	r5,zero,4b7c <__swsetup_r+0x124>
    4b64:	80801004 	addi	r2,r16,64
    4b68:	28800326 	beq	r5,r2,4b78 <__swsetup_r+0x120>
    4b6c:	8809883a 	mov	r4,r17
    4b70:	0006ba00 	call	6ba0 <_free_r>
    4b74:	8100030b 	ldhu	r4,12(r16)
    4b78:	80000c15 	stw	zero,48(r16)
    4b7c:	80c00417 	ldw	r3,16(r16)
    4b80:	00bff6c4 	movi	r2,-37
    4b84:	1108703a 	and	r4,r2,r4
    4b88:	80000115 	stw	zero,4(r16)
    4b8c:	80c00015 	stw	r3,0(r16)
    4b90:	003fd506 	br	4ae8 <__alt_data_end+0xff004ae8>
    4b94:	00800244 	movi	r2,9
    4b98:	88800015 	stw	r2,0(r17)
    4b9c:	20801014 	ori	r2,r4,64
    4ba0:	8080030d 	sth	r2,12(r16)
    4ba4:	00bfffc4 	movi	r2,-1
    4ba8:	003fc506 	br	4ac0 <__alt_data_end+0xff004ac0>

00004bac <quorem>:
    4bac:	defff704 	addi	sp,sp,-36
    4bb0:	dc800215 	stw	r18,8(sp)
    4bb4:	20800417 	ldw	r2,16(r4)
    4bb8:	2c800417 	ldw	r18,16(r5)
    4bbc:	dfc00815 	stw	ra,32(sp)
    4bc0:	ddc00715 	stw	r23,28(sp)
    4bc4:	dd800615 	stw	r22,24(sp)
    4bc8:	dd400515 	stw	r21,20(sp)
    4bcc:	dd000415 	stw	r20,16(sp)
    4bd0:	dcc00315 	stw	r19,12(sp)
    4bd4:	dc400115 	stw	r17,4(sp)
    4bd8:	dc000015 	stw	r16,0(sp)
    4bdc:	14807116 	blt	r2,r18,4da4 <quorem+0x1f8>
    4be0:	94bfffc4 	addi	r18,r18,-1
    4be4:	94ad883a 	add	r22,r18,r18
    4be8:	b5ad883a 	add	r22,r22,r22
    4bec:	2c400504 	addi	r17,r5,20
    4bf0:	8da9883a 	add	r20,r17,r22
    4bf4:	25400504 	addi	r21,r4,20
    4bf8:	282f883a 	mov	r23,r5
    4bfc:	adad883a 	add	r22,r21,r22
    4c00:	a1400017 	ldw	r5,0(r20)
    4c04:	2021883a 	mov	r16,r4
    4c08:	b1000017 	ldw	r4,0(r22)
    4c0c:	29400044 	addi	r5,r5,1
    4c10:	0001c6c0 	call	1c6c <__udivsi3>
    4c14:	1027883a 	mov	r19,r2
    4c18:	10002c26 	beq	r2,zero,4ccc <quorem+0x120>
    4c1c:	a813883a 	mov	r9,r21
    4c20:	880b883a 	mov	r5,r17
    4c24:	0009883a 	mov	r4,zero
    4c28:	000d883a 	mov	r6,zero
    4c2c:	2a000017 	ldw	r8,0(r5)
    4c30:	49c00017 	ldw	r7,0(r9)
    4c34:	29400104 	addi	r5,r5,4
    4c38:	40bfffcc 	andi	r2,r8,65535
    4c3c:	14c5383a 	mul	r2,r2,r19
    4c40:	4010d43a 	srli	r8,r8,16
    4c44:	38ffffcc 	andi	r3,r7,65535
    4c48:	1105883a 	add	r2,r2,r4
    4c4c:	1008d43a 	srli	r4,r2,16
    4c50:	44d1383a 	mul	r8,r8,r19
    4c54:	198d883a 	add	r6,r3,r6
    4c58:	10ffffcc 	andi	r3,r2,65535
    4c5c:	30c7c83a 	sub	r3,r6,r3
    4c60:	380ed43a 	srli	r7,r7,16
    4c64:	4105883a 	add	r2,r8,r4
    4c68:	180dd43a 	srai	r6,r3,16
    4c6c:	113fffcc 	andi	r4,r2,65535
    4c70:	390fc83a 	sub	r7,r7,r4
    4c74:	398d883a 	add	r6,r7,r6
    4c78:	300e943a 	slli	r7,r6,16
    4c7c:	18ffffcc 	andi	r3,r3,65535
    4c80:	1008d43a 	srli	r4,r2,16
    4c84:	38ceb03a 	or	r7,r7,r3
    4c88:	49c00015 	stw	r7,0(r9)
    4c8c:	300dd43a 	srai	r6,r6,16
    4c90:	4a400104 	addi	r9,r9,4
    4c94:	a17fe52e 	bgeu	r20,r5,4c2c <__alt_data_end+0xff004c2c>
    4c98:	b0800017 	ldw	r2,0(r22)
    4c9c:	10000b1e 	bne	r2,zero,4ccc <quorem+0x120>
    4ca0:	b0bfff04 	addi	r2,r22,-4
    4ca4:	a880082e 	bgeu	r21,r2,4cc8 <quorem+0x11c>
    4ca8:	b0ffff17 	ldw	r3,-4(r22)
    4cac:	18000326 	beq	r3,zero,4cbc <quorem+0x110>
    4cb0:	00000506 	br	4cc8 <quorem+0x11c>
    4cb4:	10c00017 	ldw	r3,0(r2)
    4cb8:	1800031e 	bne	r3,zero,4cc8 <quorem+0x11c>
    4cbc:	10bfff04 	addi	r2,r2,-4
    4cc0:	94bfffc4 	addi	r18,r18,-1
    4cc4:	a8bffb36 	bltu	r21,r2,4cb4 <__alt_data_end+0xff004cb4>
    4cc8:	84800415 	stw	r18,16(r16)
    4ccc:	b80b883a 	mov	r5,r23
    4cd0:	8009883a 	mov	r4,r16
    4cd4:	00085040 	call	8504 <__mcmp>
    4cd8:	10002616 	blt	r2,zero,4d74 <quorem+0x1c8>
    4cdc:	9cc00044 	addi	r19,r19,1
    4ce0:	a805883a 	mov	r2,r21
    4ce4:	000b883a 	mov	r5,zero
    4ce8:	11000017 	ldw	r4,0(r2)
    4cec:	89800017 	ldw	r6,0(r17)
    4cf0:	10800104 	addi	r2,r2,4
    4cf4:	20ffffcc 	andi	r3,r4,65535
    4cf8:	194b883a 	add	r5,r3,r5
    4cfc:	30ffffcc 	andi	r3,r6,65535
    4d00:	28c7c83a 	sub	r3,r5,r3
    4d04:	300cd43a 	srli	r6,r6,16
    4d08:	2008d43a 	srli	r4,r4,16
    4d0c:	180bd43a 	srai	r5,r3,16
    4d10:	18ffffcc 	andi	r3,r3,65535
    4d14:	2189c83a 	sub	r4,r4,r6
    4d18:	2149883a 	add	r4,r4,r5
    4d1c:	200c943a 	slli	r6,r4,16
    4d20:	8c400104 	addi	r17,r17,4
    4d24:	200bd43a 	srai	r5,r4,16
    4d28:	30c6b03a 	or	r3,r6,r3
    4d2c:	10ffff15 	stw	r3,-4(r2)
    4d30:	a47fed2e 	bgeu	r20,r17,4ce8 <__alt_data_end+0xff004ce8>
    4d34:	9485883a 	add	r2,r18,r18
    4d38:	1085883a 	add	r2,r2,r2
    4d3c:	a887883a 	add	r3,r21,r2
    4d40:	18800017 	ldw	r2,0(r3)
    4d44:	10000b1e 	bne	r2,zero,4d74 <quorem+0x1c8>
    4d48:	18bfff04 	addi	r2,r3,-4
    4d4c:	a880082e 	bgeu	r21,r2,4d70 <quorem+0x1c4>
    4d50:	18ffff17 	ldw	r3,-4(r3)
    4d54:	18000326 	beq	r3,zero,4d64 <quorem+0x1b8>
    4d58:	00000506 	br	4d70 <quorem+0x1c4>
    4d5c:	10c00017 	ldw	r3,0(r2)
    4d60:	1800031e 	bne	r3,zero,4d70 <quorem+0x1c4>
    4d64:	10bfff04 	addi	r2,r2,-4
    4d68:	94bfffc4 	addi	r18,r18,-1
    4d6c:	a8bffb36 	bltu	r21,r2,4d5c <__alt_data_end+0xff004d5c>
    4d70:	84800415 	stw	r18,16(r16)
    4d74:	9805883a 	mov	r2,r19
    4d78:	dfc00817 	ldw	ra,32(sp)
    4d7c:	ddc00717 	ldw	r23,28(sp)
    4d80:	dd800617 	ldw	r22,24(sp)
    4d84:	dd400517 	ldw	r21,20(sp)
    4d88:	dd000417 	ldw	r20,16(sp)
    4d8c:	dcc00317 	ldw	r19,12(sp)
    4d90:	dc800217 	ldw	r18,8(sp)
    4d94:	dc400117 	ldw	r17,4(sp)
    4d98:	dc000017 	ldw	r16,0(sp)
    4d9c:	dec00904 	addi	sp,sp,36
    4da0:	f800283a 	ret
    4da4:	0005883a 	mov	r2,zero
    4da8:	003ff306 	br	4d78 <__alt_data_end+0xff004d78>

00004dac <_dtoa_r>:
    4dac:	20801017 	ldw	r2,64(r4)
    4db0:	deffde04 	addi	sp,sp,-136
    4db4:	df002015 	stw	fp,128(sp)
    4db8:	dcc01b15 	stw	r19,108(sp)
    4dbc:	dc801a15 	stw	r18,104(sp)
    4dc0:	dc401915 	stw	r17,100(sp)
    4dc4:	dc001815 	stw	r16,96(sp)
    4dc8:	dfc02115 	stw	ra,132(sp)
    4dcc:	ddc01f15 	stw	r23,124(sp)
    4dd0:	dd801e15 	stw	r22,120(sp)
    4dd4:	dd401d15 	stw	r21,116(sp)
    4dd8:	dd001c15 	stw	r20,112(sp)
    4ddc:	d9c00315 	stw	r7,12(sp)
    4de0:	2039883a 	mov	fp,r4
    4de4:	3023883a 	mov	r17,r6
    4de8:	2825883a 	mov	r18,r5
    4dec:	dc002417 	ldw	r16,144(sp)
    4df0:	3027883a 	mov	r19,r6
    4df4:	10000826 	beq	r2,zero,4e18 <_dtoa_r+0x6c>
    4df8:	21801117 	ldw	r6,68(r4)
    4dfc:	00c00044 	movi	r3,1
    4e00:	100b883a 	mov	r5,r2
    4e04:	1986983a 	sll	r3,r3,r6
    4e08:	11800115 	stw	r6,4(r2)
    4e0c:	10c00215 	stw	r3,8(r2)
    4e10:	0007ce40 	call	7ce4 <_Bfree>
    4e14:	e0001015 	stw	zero,64(fp)
    4e18:	88002e16 	blt	r17,zero,4ed4 <_dtoa_r+0x128>
    4e1c:	80000015 	stw	zero,0(r16)
    4e20:	889ffc2c 	andhi	r2,r17,32752
    4e24:	00dffc34 	movhi	r3,32752
    4e28:	10c01c26 	beq	r2,r3,4e9c <_dtoa_r+0xf0>
    4e2c:	000d883a 	mov	r6,zero
    4e30:	000f883a 	mov	r7,zero
    4e34:	9009883a 	mov	r4,r18
    4e38:	980b883a 	mov	r5,r19
    4e3c:	000cfe80 	call	cfe8 <__eqdf2>
    4e40:	10002b1e 	bne	r2,zero,4ef0 <_dtoa_r+0x144>
    4e44:	d9c02317 	ldw	r7,140(sp)
    4e48:	00800044 	movi	r2,1
    4e4c:	38800015 	stw	r2,0(r7)
    4e50:	d8802517 	ldw	r2,148(sp)
    4e54:	10019e26 	beq	r2,zero,54d0 <_dtoa_r+0x724>
    4e58:	d8c02517 	ldw	r3,148(sp)
    4e5c:	00800074 	movhi	r2,1
    4e60:	10850844 	addi	r2,r2,5153
    4e64:	18800015 	stw	r2,0(r3)
    4e68:	10bfffc4 	addi	r2,r2,-1
    4e6c:	dfc02117 	ldw	ra,132(sp)
    4e70:	df002017 	ldw	fp,128(sp)
    4e74:	ddc01f17 	ldw	r23,124(sp)
    4e78:	dd801e17 	ldw	r22,120(sp)
    4e7c:	dd401d17 	ldw	r21,116(sp)
    4e80:	dd001c17 	ldw	r20,112(sp)
    4e84:	dcc01b17 	ldw	r19,108(sp)
    4e88:	dc801a17 	ldw	r18,104(sp)
    4e8c:	dc401917 	ldw	r17,100(sp)
    4e90:	dc001817 	ldw	r16,96(sp)
    4e94:	dec02204 	addi	sp,sp,136
    4e98:	f800283a 	ret
    4e9c:	d8c02317 	ldw	r3,140(sp)
    4ea0:	0089c3c4 	movi	r2,9999
    4ea4:	18800015 	stw	r2,0(r3)
    4ea8:	90017726 	beq	r18,zero,5488 <_dtoa_r+0x6dc>
    4eac:	00800074 	movhi	r2,1
    4eb0:	10851404 	addi	r2,r2,5200
    4eb4:	d9002517 	ldw	r4,148(sp)
    4eb8:	203fec26 	beq	r4,zero,4e6c <__alt_data_end+0xff004e6c>
    4ebc:	10c000c7 	ldb	r3,3(r2)
    4ec0:	1801781e 	bne	r3,zero,54a4 <_dtoa_r+0x6f8>
    4ec4:	10c000c4 	addi	r3,r2,3
    4ec8:	d9802517 	ldw	r6,148(sp)
    4ecc:	30c00015 	stw	r3,0(r6)
    4ed0:	003fe606 	br	4e6c <__alt_data_end+0xff004e6c>
    4ed4:	04e00034 	movhi	r19,32768
    4ed8:	9cffffc4 	addi	r19,r19,-1
    4edc:	00800044 	movi	r2,1
    4ee0:	8ce6703a 	and	r19,r17,r19
    4ee4:	80800015 	stw	r2,0(r16)
    4ee8:	9823883a 	mov	r17,r19
    4eec:	003fcc06 	br	4e20 <__alt_data_end+0xff004e20>
    4ef0:	d8800204 	addi	r2,sp,8
    4ef4:	d8800015 	stw	r2,0(sp)
    4ef8:	d9c00104 	addi	r7,sp,4
    4efc:	900b883a 	mov	r5,r18
    4f00:	980d883a 	mov	r6,r19
    4f04:	e009883a 	mov	r4,fp
    4f08:	8820d53a 	srli	r16,r17,20
    4f0c:	00088d00 	call	88d0 <__d2b>
    4f10:	d8800915 	stw	r2,36(sp)
    4f14:	8001651e 	bne	r16,zero,54ac <_dtoa_r+0x700>
    4f18:	dd800217 	ldw	r22,8(sp)
    4f1c:	dc000117 	ldw	r16,4(sp)
    4f20:	00800804 	movi	r2,32
    4f24:	b421883a 	add	r16,r22,r16
    4f28:	80c10c84 	addi	r3,r16,1074
    4f2c:	10c2d10e 	bge	r2,r3,5a74 <_dtoa_r+0xcc8>
    4f30:	00801004 	movi	r2,64
    4f34:	81010484 	addi	r4,r16,1042
    4f38:	10c7c83a 	sub	r3,r2,r3
    4f3c:	9108d83a 	srl	r4,r18,r4
    4f40:	88e2983a 	sll	r17,r17,r3
    4f44:	2448b03a 	or	r4,r4,r17
    4f48:	000e3b00 	call	e3b0 <__floatunsidf>
    4f4c:	017f8434 	movhi	r5,65040
    4f50:	01800044 	movi	r6,1
    4f54:	1009883a 	mov	r4,r2
    4f58:	194b883a 	add	r5,r3,r5
    4f5c:	843fffc4 	addi	r16,r16,-1
    4f60:	d9801115 	stw	r6,68(sp)
    4f64:	000d883a 	mov	r6,zero
    4f68:	01cffe34 	movhi	r7,16376
    4f6c:	000d9580 	call	d958 <__subdf3>
    4f70:	0198dbf4 	movhi	r6,25455
    4f74:	01cff4f4 	movhi	r7,16339
    4f78:	3190d844 	addi	r6,r6,17249
    4f7c:	39e1e9c4 	addi	r7,r7,-30809
    4f80:	1009883a 	mov	r4,r2
    4f84:	180b883a 	mov	r5,r3
    4f88:	000d2400 	call	d240 <__muldf3>
    4f8c:	01a2d874 	movhi	r6,35681
    4f90:	01cff1f4 	movhi	r7,16327
    4f94:	31b22cc4 	addi	r6,r6,-14157
    4f98:	39e28a04 	addi	r7,r7,-30168
    4f9c:	180b883a 	mov	r5,r3
    4fa0:	1009883a 	mov	r4,r2
    4fa4:	000be540 	call	be54 <__adddf3>
    4fa8:	8009883a 	mov	r4,r16
    4fac:	1029883a 	mov	r20,r2
    4fb0:	1823883a 	mov	r17,r3
    4fb4:	000e2d40 	call	e2d4 <__floatsidf>
    4fb8:	019427f4 	movhi	r6,20639
    4fbc:	01cff4f4 	movhi	r7,16339
    4fc0:	319e7ec4 	addi	r6,r6,31227
    4fc4:	39d104c4 	addi	r7,r7,17427
    4fc8:	1009883a 	mov	r4,r2
    4fcc:	180b883a 	mov	r5,r3
    4fd0:	000d2400 	call	d240 <__muldf3>
    4fd4:	100d883a 	mov	r6,r2
    4fd8:	180f883a 	mov	r7,r3
    4fdc:	a009883a 	mov	r4,r20
    4fe0:	880b883a 	mov	r5,r17
    4fe4:	000be540 	call	be54 <__adddf3>
    4fe8:	1009883a 	mov	r4,r2
    4fec:	180b883a 	mov	r5,r3
    4ff0:	1029883a 	mov	r20,r2
    4ff4:	1823883a 	mov	r17,r3
    4ff8:	000e2540 	call	e254 <__fixdfsi>
    4ffc:	000d883a 	mov	r6,zero
    5000:	000f883a 	mov	r7,zero
    5004:	a009883a 	mov	r4,r20
    5008:	880b883a 	mov	r5,r17
    500c:	d8800515 	stw	r2,20(sp)
    5010:	000d14c0 	call	d14c <__ledf2>
    5014:	10028716 	blt	r2,zero,5a34 <_dtoa_r+0xc88>
    5018:	d8c00517 	ldw	r3,20(sp)
    501c:	00800584 	movi	r2,22
    5020:	10c27536 	bltu	r2,r3,59f8 <_dtoa_r+0xc4c>
    5024:	180490fa 	slli	r2,r3,3
    5028:	00c00074 	movhi	r3,1
    502c:	18c53004 	addi	r3,r3,5312
    5030:	1885883a 	add	r2,r3,r2
    5034:	11000017 	ldw	r4,0(r2)
    5038:	11400117 	ldw	r5,4(r2)
    503c:	900d883a 	mov	r6,r18
    5040:	980f883a 	mov	r7,r19
    5044:	000d0700 	call	d070 <__gedf2>
    5048:	00828d0e 	bge	zero,r2,5a80 <_dtoa_r+0xcd4>
    504c:	d9000517 	ldw	r4,20(sp)
    5050:	d8000e15 	stw	zero,56(sp)
    5054:	213fffc4 	addi	r4,r4,-1
    5058:	d9000515 	stw	r4,20(sp)
    505c:	b42dc83a 	sub	r22,r22,r16
    5060:	b5bfffc4 	addi	r22,r22,-1
    5064:	b0026f16 	blt	r22,zero,5a24 <_dtoa_r+0xc78>
    5068:	d8000815 	stw	zero,32(sp)
    506c:	d9c00517 	ldw	r7,20(sp)
    5070:	38026416 	blt	r7,zero,5a04 <_dtoa_r+0xc58>
    5074:	b1ed883a 	add	r22,r22,r7
    5078:	d9c00d15 	stw	r7,52(sp)
    507c:	d8000a15 	stw	zero,40(sp)
    5080:	d9800317 	ldw	r6,12(sp)
    5084:	00800244 	movi	r2,9
    5088:	11811436 	bltu	r2,r6,54dc <_dtoa_r+0x730>
    508c:	00800144 	movi	r2,5
    5090:	1184e10e 	bge	r2,r6,6418 <_dtoa_r+0x166c>
    5094:	31bfff04 	addi	r6,r6,-4
    5098:	d9800315 	stw	r6,12(sp)
    509c:	0023883a 	mov	r17,zero
    50a0:	d9800317 	ldw	r6,12(sp)
    50a4:	008000c4 	movi	r2,3
    50a8:	30836726 	beq	r6,r2,5e48 <_dtoa_r+0x109c>
    50ac:	1183410e 	bge	r2,r6,5db4 <_dtoa_r+0x1008>
    50b0:	d9c00317 	ldw	r7,12(sp)
    50b4:	00800104 	movi	r2,4
    50b8:	38827c26 	beq	r7,r2,5aac <_dtoa_r+0xd00>
    50bc:	00800144 	movi	r2,5
    50c0:	3884c41e 	bne	r7,r2,63d4 <_dtoa_r+0x1628>
    50c4:	00800044 	movi	r2,1
    50c8:	d8800b15 	stw	r2,44(sp)
    50cc:	d8c00517 	ldw	r3,20(sp)
    50d0:	d9002217 	ldw	r4,136(sp)
    50d4:	1907883a 	add	r3,r3,r4
    50d8:	19800044 	addi	r6,r3,1
    50dc:	d8c00c15 	stw	r3,48(sp)
    50e0:	d9800615 	stw	r6,24(sp)
    50e4:	0183a40e 	bge	zero,r6,5f78 <_dtoa_r+0x11cc>
    50e8:	d9800617 	ldw	r6,24(sp)
    50ec:	3021883a 	mov	r16,r6
    50f0:	e0001115 	stw	zero,68(fp)
    50f4:	008005c4 	movi	r2,23
    50f8:	1184c92e 	bgeu	r2,r6,6420 <_dtoa_r+0x1674>
    50fc:	00c00044 	movi	r3,1
    5100:	00800104 	movi	r2,4
    5104:	1085883a 	add	r2,r2,r2
    5108:	11000504 	addi	r4,r2,20
    510c:	180b883a 	mov	r5,r3
    5110:	18c00044 	addi	r3,r3,1
    5114:	313ffb2e 	bgeu	r6,r4,5104 <__alt_data_end+0xff005104>
    5118:	e1401115 	stw	r5,68(fp)
    511c:	e009883a 	mov	r4,fp
    5120:	0007c3c0 	call	7c3c <_Balloc>
    5124:	d8800715 	stw	r2,28(sp)
    5128:	e0801015 	stw	r2,64(fp)
    512c:	00800384 	movi	r2,14
    5130:	1400f736 	bltu	r2,r16,5510 <_dtoa_r+0x764>
    5134:	8800f626 	beq	r17,zero,5510 <_dtoa_r+0x764>
    5138:	d9c00517 	ldw	r7,20(sp)
    513c:	01c39a0e 	bge	zero,r7,5fa8 <_dtoa_r+0x11fc>
    5140:	388003cc 	andi	r2,r7,15
    5144:	100490fa 	slli	r2,r2,3
    5148:	382bd13a 	srai	r21,r7,4
    514c:	00c00074 	movhi	r3,1
    5150:	18c53004 	addi	r3,r3,5312
    5154:	1885883a 	add	r2,r3,r2
    5158:	a8c0040c 	andi	r3,r21,16
    515c:	12400017 	ldw	r9,0(r2)
    5160:	12000117 	ldw	r8,4(r2)
    5164:	18037926 	beq	r3,zero,5f4c <_dtoa_r+0x11a0>
    5168:	00800074 	movhi	r2,1
    516c:	10852604 	addi	r2,r2,5272
    5170:	11800817 	ldw	r6,32(r2)
    5174:	11c00917 	ldw	r7,36(r2)
    5178:	9009883a 	mov	r4,r18
    517c:	980b883a 	mov	r5,r19
    5180:	da001715 	stw	r8,92(sp)
    5184:	da401615 	stw	r9,88(sp)
    5188:	000c7000 	call	c700 <__divdf3>
    518c:	da001717 	ldw	r8,92(sp)
    5190:	da401617 	ldw	r9,88(sp)
    5194:	ad4003cc 	andi	r21,r21,15
    5198:	040000c4 	movi	r16,3
    519c:	1023883a 	mov	r17,r2
    51a0:	1829883a 	mov	r20,r3
    51a4:	a8001126 	beq	r21,zero,51ec <_dtoa_r+0x440>
    51a8:	05c00074 	movhi	r23,1
    51ac:	bdc52604 	addi	r23,r23,5272
    51b0:	4805883a 	mov	r2,r9
    51b4:	4007883a 	mov	r3,r8
    51b8:	a980004c 	andi	r6,r21,1
    51bc:	1009883a 	mov	r4,r2
    51c0:	a82bd07a 	srai	r21,r21,1
    51c4:	180b883a 	mov	r5,r3
    51c8:	30000426 	beq	r6,zero,51dc <_dtoa_r+0x430>
    51cc:	b9800017 	ldw	r6,0(r23)
    51d0:	b9c00117 	ldw	r7,4(r23)
    51d4:	84000044 	addi	r16,r16,1
    51d8:	000d2400 	call	d240 <__muldf3>
    51dc:	bdc00204 	addi	r23,r23,8
    51e0:	a83ff51e 	bne	r21,zero,51b8 <__alt_data_end+0xff0051b8>
    51e4:	1013883a 	mov	r9,r2
    51e8:	1811883a 	mov	r8,r3
    51ec:	480d883a 	mov	r6,r9
    51f0:	400f883a 	mov	r7,r8
    51f4:	8809883a 	mov	r4,r17
    51f8:	a00b883a 	mov	r5,r20
    51fc:	000c7000 	call	c700 <__divdf3>
    5200:	d8800f15 	stw	r2,60(sp)
    5204:	d8c01015 	stw	r3,64(sp)
    5208:	d8c00e17 	ldw	r3,56(sp)
    520c:	18000626 	beq	r3,zero,5228 <_dtoa_r+0x47c>
    5210:	d9000f17 	ldw	r4,60(sp)
    5214:	d9401017 	ldw	r5,64(sp)
    5218:	000d883a 	mov	r6,zero
    521c:	01cffc34 	movhi	r7,16368
    5220:	000d14c0 	call	d14c <__ledf2>
    5224:	10040b16 	blt	r2,zero,6254 <_dtoa_r+0x14a8>
    5228:	8009883a 	mov	r4,r16
    522c:	000e2d40 	call	e2d4 <__floatsidf>
    5230:	d9800f17 	ldw	r6,60(sp)
    5234:	d9c01017 	ldw	r7,64(sp)
    5238:	1009883a 	mov	r4,r2
    523c:	180b883a 	mov	r5,r3
    5240:	000d2400 	call	d240 <__muldf3>
    5244:	000d883a 	mov	r6,zero
    5248:	01d00734 	movhi	r7,16412
    524c:	1009883a 	mov	r4,r2
    5250:	180b883a 	mov	r5,r3
    5254:	000be540 	call	be54 <__adddf3>
    5258:	1021883a 	mov	r16,r2
    525c:	d8800617 	ldw	r2,24(sp)
    5260:	047f3034 	movhi	r17,64704
    5264:	1c63883a 	add	r17,r3,r17
    5268:	10031826 	beq	r2,zero,5ecc <_dtoa_r+0x1120>
    526c:	d8c00517 	ldw	r3,20(sp)
    5270:	db000617 	ldw	r12,24(sp)
    5274:	d8c01315 	stw	r3,76(sp)
    5278:	d9000b17 	ldw	r4,44(sp)
    527c:	20038f26 	beq	r4,zero,60bc <_dtoa_r+0x1310>
    5280:	60bfffc4 	addi	r2,r12,-1
    5284:	100490fa 	slli	r2,r2,3
    5288:	00c00074 	movhi	r3,1
    528c:	18c53004 	addi	r3,r3,5312
    5290:	1885883a 	add	r2,r3,r2
    5294:	11800017 	ldw	r6,0(r2)
    5298:	11c00117 	ldw	r7,4(r2)
    529c:	d8800717 	ldw	r2,28(sp)
    52a0:	0009883a 	mov	r4,zero
    52a4:	014ff834 	movhi	r5,16352
    52a8:	db001615 	stw	r12,88(sp)
    52ac:	15c00044 	addi	r23,r2,1
    52b0:	000c7000 	call	c700 <__divdf3>
    52b4:	800d883a 	mov	r6,r16
    52b8:	880f883a 	mov	r7,r17
    52bc:	1009883a 	mov	r4,r2
    52c0:	180b883a 	mov	r5,r3
    52c4:	000d9580 	call	d958 <__subdf3>
    52c8:	d9401017 	ldw	r5,64(sp)
    52cc:	d9000f17 	ldw	r4,60(sp)
    52d0:	102b883a 	mov	r21,r2
    52d4:	d8c01215 	stw	r3,72(sp)
    52d8:	000e2540 	call	e254 <__fixdfsi>
    52dc:	1009883a 	mov	r4,r2
    52e0:	1029883a 	mov	r20,r2
    52e4:	000e2d40 	call	e2d4 <__floatsidf>
    52e8:	d9000f17 	ldw	r4,60(sp)
    52ec:	d9401017 	ldw	r5,64(sp)
    52f0:	100d883a 	mov	r6,r2
    52f4:	180f883a 	mov	r7,r3
    52f8:	000d9580 	call	d958 <__subdf3>
    52fc:	1823883a 	mov	r17,r3
    5300:	d8c00717 	ldw	r3,28(sp)
    5304:	d9401217 	ldw	r5,72(sp)
    5308:	a2000c04 	addi	r8,r20,48
    530c:	1021883a 	mov	r16,r2
    5310:	1a000005 	stb	r8,0(r3)
    5314:	800d883a 	mov	r6,r16
    5318:	880f883a 	mov	r7,r17
    531c:	a809883a 	mov	r4,r21
    5320:	4029883a 	mov	r20,r8
    5324:	000d0700 	call	d070 <__gedf2>
    5328:	00841d16 	blt	zero,r2,63a0 <_dtoa_r+0x15f4>
    532c:	800d883a 	mov	r6,r16
    5330:	880f883a 	mov	r7,r17
    5334:	0009883a 	mov	r4,zero
    5338:	014ffc34 	movhi	r5,16368
    533c:	000d9580 	call	d958 <__subdf3>
    5340:	d9401217 	ldw	r5,72(sp)
    5344:	100d883a 	mov	r6,r2
    5348:	180f883a 	mov	r7,r3
    534c:	a809883a 	mov	r4,r21
    5350:	000d0700 	call	d070 <__gedf2>
    5354:	db001617 	ldw	r12,88(sp)
    5358:	00840e16 	blt	zero,r2,6394 <_dtoa_r+0x15e8>
    535c:	00800044 	movi	r2,1
    5360:	13006b0e 	bge	r2,r12,5510 <_dtoa_r+0x764>
    5364:	d9000717 	ldw	r4,28(sp)
    5368:	dd800f15 	stw	r22,60(sp)
    536c:	dcc01015 	stw	r19,64(sp)
    5370:	2319883a 	add	r12,r4,r12
    5374:	dcc01217 	ldw	r19,72(sp)
    5378:	602d883a 	mov	r22,r12
    537c:	dc801215 	stw	r18,72(sp)
    5380:	b825883a 	mov	r18,r23
    5384:	00000906 	br	53ac <_dtoa_r+0x600>
    5388:	000d9580 	call	d958 <__subdf3>
    538c:	a80d883a 	mov	r6,r21
    5390:	980f883a 	mov	r7,r19
    5394:	1009883a 	mov	r4,r2
    5398:	180b883a 	mov	r5,r3
    539c:	000d14c0 	call	d14c <__ledf2>
    53a0:	1003e816 	blt	r2,zero,6344 <_dtoa_r+0x1598>
    53a4:	b825883a 	mov	r18,r23
    53a8:	bd83e926 	beq	r23,r22,6350 <_dtoa_r+0x15a4>
    53ac:	a809883a 	mov	r4,r21
    53b0:	980b883a 	mov	r5,r19
    53b4:	000d883a 	mov	r6,zero
    53b8:	01d00934 	movhi	r7,16420
    53bc:	000d2400 	call	d240 <__muldf3>
    53c0:	000d883a 	mov	r6,zero
    53c4:	01d00934 	movhi	r7,16420
    53c8:	8009883a 	mov	r4,r16
    53cc:	880b883a 	mov	r5,r17
    53d0:	102b883a 	mov	r21,r2
    53d4:	1827883a 	mov	r19,r3
    53d8:	000d2400 	call	d240 <__muldf3>
    53dc:	180b883a 	mov	r5,r3
    53e0:	1009883a 	mov	r4,r2
    53e4:	1821883a 	mov	r16,r3
    53e8:	1023883a 	mov	r17,r2
    53ec:	000e2540 	call	e254 <__fixdfsi>
    53f0:	1009883a 	mov	r4,r2
    53f4:	1029883a 	mov	r20,r2
    53f8:	000e2d40 	call	e2d4 <__floatsidf>
    53fc:	8809883a 	mov	r4,r17
    5400:	800b883a 	mov	r5,r16
    5404:	100d883a 	mov	r6,r2
    5408:	180f883a 	mov	r7,r3
    540c:	000d9580 	call	d958 <__subdf3>
    5410:	a5000c04 	addi	r20,r20,48
    5414:	a80d883a 	mov	r6,r21
    5418:	980f883a 	mov	r7,r19
    541c:	1009883a 	mov	r4,r2
    5420:	180b883a 	mov	r5,r3
    5424:	95000005 	stb	r20,0(r18)
    5428:	1021883a 	mov	r16,r2
    542c:	1823883a 	mov	r17,r3
    5430:	000d14c0 	call	d14c <__ledf2>
    5434:	bdc00044 	addi	r23,r23,1
    5438:	800d883a 	mov	r6,r16
    543c:	880f883a 	mov	r7,r17
    5440:	0009883a 	mov	r4,zero
    5444:	014ffc34 	movhi	r5,16368
    5448:	103fcf0e 	bge	r2,zero,5388 <__alt_data_end+0xff005388>
    544c:	d8c01317 	ldw	r3,76(sp)
    5450:	d8c00515 	stw	r3,20(sp)
    5454:	d9400917 	ldw	r5,36(sp)
    5458:	e009883a 	mov	r4,fp
    545c:	0007ce40 	call	7ce4 <_Bfree>
    5460:	d9000517 	ldw	r4,20(sp)
    5464:	d9802317 	ldw	r6,140(sp)
    5468:	d9c02517 	ldw	r7,148(sp)
    546c:	b8000005 	stb	zero,0(r23)
    5470:	20800044 	addi	r2,r4,1
    5474:	30800015 	stw	r2,0(r6)
    5478:	3802aa26 	beq	r7,zero,5f24 <_dtoa_r+0x1178>
    547c:	3dc00015 	stw	r23,0(r7)
    5480:	d8800717 	ldw	r2,28(sp)
    5484:	003e7906 	br	4e6c <__alt_data_end+0xff004e6c>
    5488:	00800434 	movhi	r2,16
    548c:	10bfffc4 	addi	r2,r2,-1
    5490:	88a2703a 	and	r17,r17,r2
    5494:	883e851e 	bne	r17,zero,4eac <__alt_data_end+0xff004eac>
    5498:	00800074 	movhi	r2,1
    549c:	10851104 	addi	r2,r2,5188
    54a0:	003e8406 	br	4eb4 <__alt_data_end+0xff004eb4>
    54a4:	10c00204 	addi	r3,r2,8
    54a8:	003e8706 	br	4ec8 <__alt_data_end+0xff004ec8>
    54ac:	01400434 	movhi	r5,16
    54b0:	297fffc4 	addi	r5,r5,-1
    54b4:	994a703a 	and	r5,r19,r5
    54b8:	9009883a 	mov	r4,r18
    54bc:	843f0044 	addi	r16,r16,-1023
    54c0:	294ffc34 	orhi	r5,r5,16368
    54c4:	dd800217 	ldw	r22,8(sp)
    54c8:	d8001115 	stw	zero,68(sp)
    54cc:	003ea506 	br	4f64 <__alt_data_end+0xff004f64>
    54d0:	00800074 	movhi	r2,1
    54d4:	10850804 	addi	r2,r2,5152
    54d8:	003e6406 	br	4e6c <__alt_data_end+0xff004e6c>
    54dc:	e0001115 	stw	zero,68(fp)
    54e0:	000b883a 	mov	r5,zero
    54e4:	e009883a 	mov	r4,fp
    54e8:	0007c3c0 	call	7c3c <_Balloc>
    54ec:	01bfffc4 	movi	r6,-1
    54f0:	01c00044 	movi	r7,1
    54f4:	d8800715 	stw	r2,28(sp)
    54f8:	d9800c15 	stw	r6,48(sp)
    54fc:	e0801015 	stw	r2,64(fp)
    5500:	d8000315 	stw	zero,12(sp)
    5504:	d9c00b15 	stw	r7,44(sp)
    5508:	d9800615 	stw	r6,24(sp)
    550c:	d8002215 	stw	zero,136(sp)
    5510:	d8800117 	ldw	r2,4(sp)
    5514:	10008916 	blt	r2,zero,573c <_dtoa_r+0x990>
    5518:	d9000517 	ldw	r4,20(sp)
    551c:	00c00384 	movi	r3,14
    5520:	19008616 	blt	r3,r4,573c <_dtoa_r+0x990>
    5524:	200490fa 	slli	r2,r4,3
    5528:	00c00074 	movhi	r3,1
    552c:	d9802217 	ldw	r6,136(sp)
    5530:	18c53004 	addi	r3,r3,5312
    5534:	1885883a 	add	r2,r3,r2
    5538:	14000017 	ldw	r16,0(r2)
    553c:	14400117 	ldw	r17,4(r2)
    5540:	30016316 	blt	r6,zero,5ad0 <_dtoa_r+0xd24>
    5544:	800d883a 	mov	r6,r16
    5548:	880f883a 	mov	r7,r17
    554c:	9009883a 	mov	r4,r18
    5550:	980b883a 	mov	r5,r19
    5554:	000c7000 	call	c700 <__divdf3>
    5558:	180b883a 	mov	r5,r3
    555c:	1009883a 	mov	r4,r2
    5560:	000e2540 	call	e254 <__fixdfsi>
    5564:	1009883a 	mov	r4,r2
    5568:	102b883a 	mov	r21,r2
    556c:	000e2d40 	call	e2d4 <__floatsidf>
    5570:	800d883a 	mov	r6,r16
    5574:	880f883a 	mov	r7,r17
    5578:	1009883a 	mov	r4,r2
    557c:	180b883a 	mov	r5,r3
    5580:	000d2400 	call	d240 <__muldf3>
    5584:	100d883a 	mov	r6,r2
    5588:	180f883a 	mov	r7,r3
    558c:	9009883a 	mov	r4,r18
    5590:	980b883a 	mov	r5,r19
    5594:	000d9580 	call	d958 <__subdf3>
    5598:	d9c00717 	ldw	r7,28(sp)
    559c:	1009883a 	mov	r4,r2
    55a0:	a8800c04 	addi	r2,r21,48
    55a4:	38800005 	stb	r2,0(r7)
    55a8:	3dc00044 	addi	r23,r7,1
    55ac:	d9c00617 	ldw	r7,24(sp)
    55b0:	01800044 	movi	r6,1
    55b4:	180b883a 	mov	r5,r3
    55b8:	2005883a 	mov	r2,r4
    55bc:	39803826 	beq	r7,r6,56a0 <_dtoa_r+0x8f4>
    55c0:	000d883a 	mov	r6,zero
    55c4:	01d00934 	movhi	r7,16420
    55c8:	000d2400 	call	d240 <__muldf3>
    55cc:	000d883a 	mov	r6,zero
    55d0:	000f883a 	mov	r7,zero
    55d4:	1009883a 	mov	r4,r2
    55d8:	180b883a 	mov	r5,r3
    55dc:	1025883a 	mov	r18,r2
    55e0:	1827883a 	mov	r19,r3
    55e4:	000cfe80 	call	cfe8 <__eqdf2>
    55e8:	103f9a26 	beq	r2,zero,5454 <__alt_data_end+0xff005454>
    55ec:	d9c00617 	ldw	r7,24(sp)
    55f0:	d8c00717 	ldw	r3,28(sp)
    55f4:	b829883a 	mov	r20,r23
    55f8:	38bfffc4 	addi	r2,r7,-1
    55fc:	18ad883a 	add	r22,r3,r2
    5600:	00000a06 	br	562c <_dtoa_r+0x880>
    5604:	000d2400 	call	d240 <__muldf3>
    5608:	000d883a 	mov	r6,zero
    560c:	000f883a 	mov	r7,zero
    5610:	1009883a 	mov	r4,r2
    5614:	180b883a 	mov	r5,r3
    5618:	1025883a 	mov	r18,r2
    561c:	1827883a 	mov	r19,r3
    5620:	b829883a 	mov	r20,r23
    5624:	000cfe80 	call	cfe8 <__eqdf2>
    5628:	103f8a26 	beq	r2,zero,5454 <__alt_data_end+0xff005454>
    562c:	800d883a 	mov	r6,r16
    5630:	880f883a 	mov	r7,r17
    5634:	9009883a 	mov	r4,r18
    5638:	980b883a 	mov	r5,r19
    563c:	000c7000 	call	c700 <__divdf3>
    5640:	180b883a 	mov	r5,r3
    5644:	1009883a 	mov	r4,r2
    5648:	000e2540 	call	e254 <__fixdfsi>
    564c:	1009883a 	mov	r4,r2
    5650:	102b883a 	mov	r21,r2
    5654:	000e2d40 	call	e2d4 <__floatsidf>
    5658:	800d883a 	mov	r6,r16
    565c:	880f883a 	mov	r7,r17
    5660:	1009883a 	mov	r4,r2
    5664:	180b883a 	mov	r5,r3
    5668:	000d2400 	call	d240 <__muldf3>
    566c:	100d883a 	mov	r6,r2
    5670:	180f883a 	mov	r7,r3
    5674:	9009883a 	mov	r4,r18
    5678:	980b883a 	mov	r5,r19
    567c:	000d9580 	call	d958 <__subdf3>
    5680:	aa000c04 	addi	r8,r21,48
    5684:	a2000005 	stb	r8,0(r20)
    5688:	000d883a 	mov	r6,zero
    568c:	01d00934 	movhi	r7,16420
    5690:	1009883a 	mov	r4,r2
    5694:	180b883a 	mov	r5,r3
    5698:	a5c00044 	addi	r23,r20,1
    569c:	b53fd91e 	bne	r22,r20,5604 <__alt_data_end+0xff005604>
    56a0:	100d883a 	mov	r6,r2
    56a4:	180f883a 	mov	r7,r3
    56a8:	1009883a 	mov	r4,r2
    56ac:	180b883a 	mov	r5,r3
    56b0:	000be540 	call	be54 <__adddf3>
    56b4:	100d883a 	mov	r6,r2
    56b8:	180f883a 	mov	r7,r3
    56bc:	8009883a 	mov	r4,r16
    56c0:	880b883a 	mov	r5,r17
    56c4:	1027883a 	mov	r19,r2
    56c8:	1825883a 	mov	r18,r3
    56cc:	000d14c0 	call	d14c <__ledf2>
    56d0:	10000816 	blt	r2,zero,56f4 <_dtoa_r+0x948>
    56d4:	980d883a 	mov	r6,r19
    56d8:	900f883a 	mov	r7,r18
    56dc:	8009883a 	mov	r4,r16
    56e0:	880b883a 	mov	r5,r17
    56e4:	000cfe80 	call	cfe8 <__eqdf2>
    56e8:	103f5a1e 	bne	r2,zero,5454 <__alt_data_end+0xff005454>
    56ec:	ad40004c 	andi	r21,r21,1
    56f0:	a83f5826 	beq	r21,zero,5454 <__alt_data_end+0xff005454>
    56f4:	bd3fffc3 	ldbu	r20,-1(r23)
    56f8:	b8bfffc4 	addi	r2,r23,-1
    56fc:	1007883a 	mov	r3,r2
    5700:	01400e44 	movi	r5,57
    5704:	d9800717 	ldw	r6,28(sp)
    5708:	00000506 	br	5720 <_dtoa_r+0x974>
    570c:	18ffffc4 	addi	r3,r3,-1
    5710:	11824726 	beq	r2,r6,6030 <_dtoa_r+0x1284>
    5714:	1d000003 	ldbu	r20,0(r3)
    5718:	102f883a 	mov	r23,r2
    571c:	10bfffc4 	addi	r2,r2,-1
    5720:	a1003fcc 	andi	r4,r20,255
    5724:	2100201c 	xori	r4,r4,128
    5728:	213fe004 	addi	r4,r4,-128
    572c:	217ff726 	beq	r4,r5,570c <__alt_data_end+0xff00570c>
    5730:	a2000044 	addi	r8,r20,1
    5734:	12000005 	stb	r8,0(r2)
    5738:	003f4606 	br	5454 <__alt_data_end+0xff005454>
    573c:	d9000b17 	ldw	r4,44(sp)
    5740:	2000c826 	beq	r4,zero,5a64 <_dtoa_r+0xcb8>
    5744:	d9800317 	ldw	r6,12(sp)
    5748:	00c00044 	movi	r3,1
    574c:	1980f90e 	bge	r3,r6,5b34 <_dtoa_r+0xd88>
    5750:	d8800617 	ldw	r2,24(sp)
    5754:	d8c00a17 	ldw	r3,40(sp)
    5758:	157fffc4 	addi	r21,r2,-1
    575c:	1d41f316 	blt	r3,r21,5f2c <_dtoa_r+0x1180>
    5760:	1d6bc83a 	sub	r21,r3,r21
    5764:	d9c00617 	ldw	r7,24(sp)
    5768:	3802aa16 	blt	r7,zero,6214 <_dtoa_r+0x1468>
    576c:	dd000817 	ldw	r20,32(sp)
    5770:	d8800617 	ldw	r2,24(sp)
    5774:	d8c00817 	ldw	r3,32(sp)
    5778:	01400044 	movi	r5,1
    577c:	e009883a 	mov	r4,fp
    5780:	1887883a 	add	r3,r3,r2
    5784:	d8c00815 	stw	r3,32(sp)
    5788:	b0ad883a 	add	r22,r22,r2
    578c:	00080480 	call	8048 <__i2b>
    5790:	1023883a 	mov	r17,r2
    5794:	a0000826 	beq	r20,zero,57b8 <_dtoa_r+0xa0c>
    5798:	0580070e 	bge	zero,r22,57b8 <_dtoa_r+0xa0c>
    579c:	a005883a 	mov	r2,r20
    57a0:	b500b916 	blt	r22,r20,5a88 <_dtoa_r+0xcdc>
    57a4:	d9000817 	ldw	r4,32(sp)
    57a8:	a0a9c83a 	sub	r20,r20,r2
    57ac:	b0adc83a 	sub	r22,r22,r2
    57b0:	2089c83a 	sub	r4,r4,r2
    57b4:	d9000815 	stw	r4,32(sp)
    57b8:	d9800a17 	ldw	r6,40(sp)
    57bc:	0181810e 	bge	zero,r6,5dc4 <_dtoa_r+0x1018>
    57c0:	d9c00b17 	ldw	r7,44(sp)
    57c4:	3800b326 	beq	r7,zero,5a94 <_dtoa_r+0xce8>
    57c8:	a800b226 	beq	r21,zero,5a94 <_dtoa_r+0xce8>
    57cc:	880b883a 	mov	r5,r17
    57d0:	a80d883a 	mov	r6,r21
    57d4:	e009883a 	mov	r4,fp
    57d8:	000827c0 	call	827c <__pow5mult>
    57dc:	d9800917 	ldw	r6,36(sp)
    57e0:	100b883a 	mov	r5,r2
    57e4:	e009883a 	mov	r4,fp
    57e8:	1023883a 	mov	r17,r2
    57ec:	00080840 	call	8084 <__multiply>
    57f0:	1021883a 	mov	r16,r2
    57f4:	d8800a17 	ldw	r2,40(sp)
    57f8:	d9400917 	ldw	r5,36(sp)
    57fc:	e009883a 	mov	r4,fp
    5800:	1545c83a 	sub	r2,r2,r21
    5804:	d8800a15 	stw	r2,40(sp)
    5808:	0007ce40 	call	7ce4 <_Bfree>
    580c:	d8c00a17 	ldw	r3,40(sp)
    5810:	18009f1e 	bne	r3,zero,5a90 <_dtoa_r+0xce4>
    5814:	05c00044 	movi	r23,1
    5818:	e009883a 	mov	r4,fp
    581c:	b80b883a 	mov	r5,r23
    5820:	00080480 	call	8048 <__i2b>
    5824:	d9000d17 	ldw	r4,52(sp)
    5828:	102b883a 	mov	r21,r2
    582c:	2000ce26 	beq	r4,zero,5b68 <_dtoa_r+0xdbc>
    5830:	200d883a 	mov	r6,r4
    5834:	100b883a 	mov	r5,r2
    5838:	e009883a 	mov	r4,fp
    583c:	000827c0 	call	827c <__pow5mult>
    5840:	d9800317 	ldw	r6,12(sp)
    5844:	102b883a 	mov	r21,r2
    5848:	b981810e 	bge	r23,r6,5e50 <_dtoa_r+0x10a4>
    584c:	0027883a 	mov	r19,zero
    5850:	a8800417 	ldw	r2,16(r21)
    5854:	05c00804 	movi	r23,32
    5858:	10800104 	addi	r2,r2,4
    585c:	1085883a 	add	r2,r2,r2
    5860:	1085883a 	add	r2,r2,r2
    5864:	a885883a 	add	r2,r21,r2
    5868:	11000017 	ldw	r4,0(r2)
    586c:	0007f300 	call	7f30 <__hi0bits>
    5870:	b885c83a 	sub	r2,r23,r2
    5874:	1585883a 	add	r2,r2,r22
    5878:	108007cc 	andi	r2,r2,31
    587c:	1000b326 	beq	r2,zero,5b4c <_dtoa_r+0xda0>
    5880:	00c00804 	movi	r3,32
    5884:	1887c83a 	sub	r3,r3,r2
    5888:	01000104 	movi	r4,4
    588c:	20c2cd0e 	bge	r4,r3,63c4 <_dtoa_r+0x1618>
    5890:	00c00704 	movi	r3,28
    5894:	1885c83a 	sub	r2,r3,r2
    5898:	d8c00817 	ldw	r3,32(sp)
    589c:	a0a9883a 	add	r20,r20,r2
    58a0:	b0ad883a 	add	r22,r22,r2
    58a4:	1887883a 	add	r3,r3,r2
    58a8:	d8c00815 	stw	r3,32(sp)
    58ac:	d9800817 	ldw	r6,32(sp)
    58b0:	0180040e 	bge	zero,r6,58c4 <_dtoa_r+0xb18>
    58b4:	800b883a 	mov	r5,r16
    58b8:	e009883a 	mov	r4,fp
    58bc:	00083bc0 	call	83bc <__lshift>
    58c0:	1021883a 	mov	r16,r2
    58c4:	0580050e 	bge	zero,r22,58dc <_dtoa_r+0xb30>
    58c8:	a80b883a 	mov	r5,r21
    58cc:	b00d883a 	mov	r6,r22
    58d0:	e009883a 	mov	r4,fp
    58d4:	00083bc0 	call	83bc <__lshift>
    58d8:	102b883a 	mov	r21,r2
    58dc:	d9c00e17 	ldw	r7,56(sp)
    58e0:	3801211e 	bne	r7,zero,5d68 <_dtoa_r+0xfbc>
    58e4:	d9800617 	ldw	r6,24(sp)
    58e8:	0181380e 	bge	zero,r6,5dcc <_dtoa_r+0x1020>
    58ec:	d8c00b17 	ldw	r3,44(sp)
    58f0:	1800ab1e 	bne	r3,zero,5ba0 <_dtoa_r+0xdf4>
    58f4:	dc800717 	ldw	r18,28(sp)
    58f8:	dcc00617 	ldw	r19,24(sp)
    58fc:	9029883a 	mov	r20,r18
    5900:	00000206 	br	590c <_dtoa_r+0xb60>
    5904:	0007d0c0 	call	7d0c <__multadd>
    5908:	1021883a 	mov	r16,r2
    590c:	a80b883a 	mov	r5,r21
    5910:	8009883a 	mov	r4,r16
    5914:	0004bac0 	call	4bac <quorem>
    5918:	10800c04 	addi	r2,r2,48
    591c:	90800005 	stb	r2,0(r18)
    5920:	94800044 	addi	r18,r18,1
    5924:	9507c83a 	sub	r3,r18,r20
    5928:	000f883a 	mov	r7,zero
    592c:	01800284 	movi	r6,10
    5930:	800b883a 	mov	r5,r16
    5934:	e009883a 	mov	r4,fp
    5938:	1cfff216 	blt	r3,r19,5904 <__alt_data_end+0xff005904>
    593c:	1011883a 	mov	r8,r2
    5940:	d8800617 	ldw	r2,24(sp)
    5944:	0082370e 	bge	zero,r2,6224 <_dtoa_r+0x1478>
    5948:	d9000717 	ldw	r4,28(sp)
    594c:	0025883a 	mov	r18,zero
    5950:	20af883a 	add	r23,r4,r2
    5954:	01800044 	movi	r6,1
    5958:	800b883a 	mov	r5,r16
    595c:	e009883a 	mov	r4,fp
    5960:	da001715 	stw	r8,92(sp)
    5964:	00083bc0 	call	83bc <__lshift>
    5968:	a80b883a 	mov	r5,r21
    596c:	1009883a 	mov	r4,r2
    5970:	d8800915 	stw	r2,36(sp)
    5974:	00085040 	call	8504 <__mcmp>
    5978:	da001717 	ldw	r8,92(sp)
    597c:	0081800e 	bge	zero,r2,5f80 <_dtoa_r+0x11d4>
    5980:	b93fffc3 	ldbu	r4,-1(r23)
    5984:	b8bfffc4 	addi	r2,r23,-1
    5988:	1007883a 	mov	r3,r2
    598c:	01800e44 	movi	r6,57
    5990:	d9c00717 	ldw	r7,28(sp)
    5994:	00000506 	br	59ac <_dtoa_r+0xc00>
    5998:	18ffffc4 	addi	r3,r3,-1
    599c:	11c12326 	beq	r2,r7,5e2c <_dtoa_r+0x1080>
    59a0:	19000003 	ldbu	r4,0(r3)
    59a4:	102f883a 	mov	r23,r2
    59a8:	10bfffc4 	addi	r2,r2,-1
    59ac:	21403fcc 	andi	r5,r4,255
    59b0:	2940201c 	xori	r5,r5,128
    59b4:	297fe004 	addi	r5,r5,-128
    59b8:	29bff726 	beq	r5,r6,5998 <__alt_data_end+0xff005998>
    59bc:	21000044 	addi	r4,r4,1
    59c0:	11000005 	stb	r4,0(r2)
    59c4:	a80b883a 	mov	r5,r21
    59c8:	e009883a 	mov	r4,fp
    59cc:	0007ce40 	call	7ce4 <_Bfree>
    59d0:	883ea026 	beq	r17,zero,5454 <__alt_data_end+0xff005454>
    59d4:	90000426 	beq	r18,zero,59e8 <_dtoa_r+0xc3c>
    59d8:	94400326 	beq	r18,r17,59e8 <_dtoa_r+0xc3c>
    59dc:	900b883a 	mov	r5,r18
    59e0:	e009883a 	mov	r4,fp
    59e4:	0007ce40 	call	7ce4 <_Bfree>
    59e8:	880b883a 	mov	r5,r17
    59ec:	e009883a 	mov	r4,fp
    59f0:	0007ce40 	call	7ce4 <_Bfree>
    59f4:	003e9706 	br	5454 <__alt_data_end+0xff005454>
    59f8:	01800044 	movi	r6,1
    59fc:	d9800e15 	stw	r6,56(sp)
    5a00:	003d9606 	br	505c <__alt_data_end+0xff00505c>
    5a04:	d8800817 	ldw	r2,32(sp)
    5a08:	d8c00517 	ldw	r3,20(sp)
    5a0c:	d8000d15 	stw	zero,52(sp)
    5a10:	10c5c83a 	sub	r2,r2,r3
    5a14:	00c9c83a 	sub	r4,zero,r3
    5a18:	d8800815 	stw	r2,32(sp)
    5a1c:	d9000a15 	stw	r4,40(sp)
    5a20:	003d9706 	br	5080 <__alt_data_end+0xff005080>
    5a24:	05adc83a 	sub	r22,zero,r22
    5a28:	dd800815 	stw	r22,32(sp)
    5a2c:	002d883a 	mov	r22,zero
    5a30:	003d8e06 	br	506c <__alt_data_end+0xff00506c>
    5a34:	d9000517 	ldw	r4,20(sp)
    5a38:	000e2d40 	call	e2d4 <__floatsidf>
    5a3c:	100d883a 	mov	r6,r2
    5a40:	180f883a 	mov	r7,r3
    5a44:	a009883a 	mov	r4,r20
    5a48:	880b883a 	mov	r5,r17
    5a4c:	000cfe80 	call	cfe8 <__eqdf2>
    5a50:	103d7126 	beq	r2,zero,5018 <__alt_data_end+0xff005018>
    5a54:	d9c00517 	ldw	r7,20(sp)
    5a58:	39ffffc4 	addi	r7,r7,-1
    5a5c:	d9c00515 	stw	r7,20(sp)
    5a60:	003d6d06 	br	5018 <__alt_data_end+0xff005018>
    5a64:	dd400a17 	ldw	r21,40(sp)
    5a68:	dd000817 	ldw	r20,32(sp)
    5a6c:	0023883a 	mov	r17,zero
    5a70:	003f4806 	br	5794 <__alt_data_end+0xff005794>
    5a74:	10e3c83a 	sub	r17,r2,r3
    5a78:	9448983a 	sll	r4,r18,r17
    5a7c:	003d3206 	br	4f48 <__alt_data_end+0xff004f48>
    5a80:	d8000e15 	stw	zero,56(sp)
    5a84:	003d7506 	br	505c <__alt_data_end+0xff00505c>
    5a88:	b005883a 	mov	r2,r22
    5a8c:	003f4506 	br	57a4 <__alt_data_end+0xff0057a4>
    5a90:	dc000915 	stw	r16,36(sp)
    5a94:	d9800a17 	ldw	r6,40(sp)
    5a98:	d9400917 	ldw	r5,36(sp)
    5a9c:	e009883a 	mov	r4,fp
    5aa0:	000827c0 	call	827c <__pow5mult>
    5aa4:	1021883a 	mov	r16,r2
    5aa8:	003f5a06 	br	5814 <__alt_data_end+0xff005814>
    5aac:	01c00044 	movi	r7,1
    5ab0:	d9c00b15 	stw	r7,44(sp)
    5ab4:	d8802217 	ldw	r2,136(sp)
    5ab8:	0081280e 	bge	zero,r2,5f5c <_dtoa_r+0x11b0>
    5abc:	100d883a 	mov	r6,r2
    5ac0:	1021883a 	mov	r16,r2
    5ac4:	d8800c15 	stw	r2,48(sp)
    5ac8:	d8800615 	stw	r2,24(sp)
    5acc:	003d8806 	br	50f0 <__alt_data_end+0xff0050f0>
    5ad0:	d8800617 	ldw	r2,24(sp)
    5ad4:	00be9b16 	blt	zero,r2,5544 <__alt_data_end+0xff005544>
    5ad8:	10010f1e 	bne	r2,zero,5f18 <_dtoa_r+0x116c>
    5adc:	880b883a 	mov	r5,r17
    5ae0:	000d883a 	mov	r6,zero
    5ae4:	01d00534 	movhi	r7,16404
    5ae8:	8009883a 	mov	r4,r16
    5aec:	000d2400 	call	d240 <__muldf3>
    5af0:	900d883a 	mov	r6,r18
    5af4:	980f883a 	mov	r7,r19
    5af8:	1009883a 	mov	r4,r2
    5afc:	180b883a 	mov	r5,r3
    5b00:	000d0700 	call	d070 <__gedf2>
    5b04:	002b883a 	mov	r21,zero
    5b08:	0023883a 	mov	r17,zero
    5b0c:	1000bf16 	blt	r2,zero,5e0c <_dtoa_r+0x1060>
    5b10:	d9802217 	ldw	r6,136(sp)
    5b14:	ddc00717 	ldw	r23,28(sp)
    5b18:	018c303a 	nor	r6,zero,r6
    5b1c:	d9800515 	stw	r6,20(sp)
    5b20:	a80b883a 	mov	r5,r21
    5b24:	e009883a 	mov	r4,fp
    5b28:	0007ce40 	call	7ce4 <_Bfree>
    5b2c:	883e4926 	beq	r17,zero,5454 <__alt_data_end+0xff005454>
    5b30:	003fad06 	br	59e8 <__alt_data_end+0xff0059e8>
    5b34:	d9c01117 	ldw	r7,68(sp)
    5b38:	3801bc26 	beq	r7,zero,622c <_dtoa_r+0x1480>
    5b3c:	10810cc4 	addi	r2,r2,1075
    5b40:	dd400a17 	ldw	r21,40(sp)
    5b44:	dd000817 	ldw	r20,32(sp)
    5b48:	003f0a06 	br	5774 <__alt_data_end+0xff005774>
    5b4c:	00800704 	movi	r2,28
    5b50:	d9000817 	ldw	r4,32(sp)
    5b54:	a0a9883a 	add	r20,r20,r2
    5b58:	b0ad883a 	add	r22,r22,r2
    5b5c:	2089883a 	add	r4,r4,r2
    5b60:	d9000815 	stw	r4,32(sp)
    5b64:	003f5106 	br	58ac <__alt_data_end+0xff0058ac>
    5b68:	d8c00317 	ldw	r3,12(sp)
    5b6c:	b8c1fc0e 	bge	r23,r3,6360 <_dtoa_r+0x15b4>
    5b70:	0027883a 	mov	r19,zero
    5b74:	b805883a 	mov	r2,r23
    5b78:	003f3e06 	br	5874 <__alt_data_end+0xff005874>
    5b7c:	880b883a 	mov	r5,r17
    5b80:	e009883a 	mov	r4,fp
    5b84:	000f883a 	mov	r7,zero
    5b88:	01800284 	movi	r6,10
    5b8c:	0007d0c0 	call	7d0c <__multadd>
    5b90:	d9000c17 	ldw	r4,48(sp)
    5b94:	1023883a 	mov	r17,r2
    5b98:	0102040e 	bge	zero,r4,63ac <_dtoa_r+0x1600>
    5b9c:	d9000615 	stw	r4,24(sp)
    5ba0:	0500050e 	bge	zero,r20,5bb8 <_dtoa_r+0xe0c>
    5ba4:	880b883a 	mov	r5,r17
    5ba8:	a00d883a 	mov	r6,r20
    5bac:	e009883a 	mov	r4,fp
    5bb0:	00083bc0 	call	83bc <__lshift>
    5bb4:	1023883a 	mov	r17,r2
    5bb8:	9801241e 	bne	r19,zero,604c <_dtoa_r+0x12a0>
    5bbc:	8829883a 	mov	r20,r17
    5bc0:	d9000617 	ldw	r4,24(sp)
    5bc4:	dcc00717 	ldw	r19,28(sp)
    5bc8:	9480004c 	andi	r18,r18,1
    5bcc:	20bfffc4 	addi	r2,r4,-1
    5bd0:	9885883a 	add	r2,r19,r2
    5bd4:	d8800415 	stw	r2,16(sp)
    5bd8:	dc800615 	stw	r18,24(sp)
    5bdc:	a80b883a 	mov	r5,r21
    5be0:	8009883a 	mov	r4,r16
    5be4:	0004bac0 	call	4bac <quorem>
    5be8:	880b883a 	mov	r5,r17
    5bec:	8009883a 	mov	r4,r16
    5bf0:	102f883a 	mov	r23,r2
    5bf4:	00085040 	call	8504 <__mcmp>
    5bf8:	a80b883a 	mov	r5,r21
    5bfc:	a00d883a 	mov	r6,r20
    5c00:	e009883a 	mov	r4,fp
    5c04:	102d883a 	mov	r22,r2
    5c08:	00085640 	call	8564 <__mdiff>
    5c0c:	1007883a 	mov	r3,r2
    5c10:	10800317 	ldw	r2,12(r2)
    5c14:	bc800c04 	addi	r18,r23,48
    5c18:	180b883a 	mov	r5,r3
    5c1c:	10004e1e 	bne	r2,zero,5d58 <_dtoa_r+0xfac>
    5c20:	8009883a 	mov	r4,r16
    5c24:	d8c01615 	stw	r3,88(sp)
    5c28:	00085040 	call	8504 <__mcmp>
    5c2c:	d8c01617 	ldw	r3,88(sp)
    5c30:	e009883a 	mov	r4,fp
    5c34:	d8801615 	stw	r2,88(sp)
    5c38:	180b883a 	mov	r5,r3
    5c3c:	0007ce40 	call	7ce4 <_Bfree>
    5c40:	d8801617 	ldw	r2,88(sp)
    5c44:	1000041e 	bne	r2,zero,5c58 <_dtoa_r+0xeac>
    5c48:	d9800317 	ldw	r6,12(sp)
    5c4c:	3000021e 	bne	r6,zero,5c58 <_dtoa_r+0xeac>
    5c50:	d8c00617 	ldw	r3,24(sp)
    5c54:	18003726 	beq	r3,zero,5d34 <_dtoa_r+0xf88>
    5c58:	b0002016 	blt	r22,zero,5cdc <_dtoa_r+0xf30>
    5c5c:	b000041e 	bne	r22,zero,5c70 <_dtoa_r+0xec4>
    5c60:	d9000317 	ldw	r4,12(sp)
    5c64:	2000021e 	bne	r4,zero,5c70 <_dtoa_r+0xec4>
    5c68:	d8c00617 	ldw	r3,24(sp)
    5c6c:	18001b26 	beq	r3,zero,5cdc <_dtoa_r+0xf30>
    5c70:	00810716 	blt	zero,r2,6090 <_dtoa_r+0x12e4>
    5c74:	d8c00417 	ldw	r3,16(sp)
    5c78:	9d800044 	addi	r22,r19,1
    5c7c:	9c800005 	stb	r18,0(r19)
    5c80:	b02f883a 	mov	r23,r22
    5c84:	98c10626 	beq	r19,r3,60a0 <_dtoa_r+0x12f4>
    5c88:	800b883a 	mov	r5,r16
    5c8c:	000f883a 	mov	r7,zero
    5c90:	01800284 	movi	r6,10
    5c94:	e009883a 	mov	r4,fp
    5c98:	0007d0c0 	call	7d0c <__multadd>
    5c9c:	1021883a 	mov	r16,r2
    5ca0:	000f883a 	mov	r7,zero
    5ca4:	01800284 	movi	r6,10
    5ca8:	880b883a 	mov	r5,r17
    5cac:	e009883a 	mov	r4,fp
    5cb0:	8d002526 	beq	r17,r20,5d48 <_dtoa_r+0xf9c>
    5cb4:	0007d0c0 	call	7d0c <__multadd>
    5cb8:	a00b883a 	mov	r5,r20
    5cbc:	000f883a 	mov	r7,zero
    5cc0:	01800284 	movi	r6,10
    5cc4:	e009883a 	mov	r4,fp
    5cc8:	1023883a 	mov	r17,r2
    5ccc:	0007d0c0 	call	7d0c <__multadd>
    5cd0:	1029883a 	mov	r20,r2
    5cd4:	b027883a 	mov	r19,r22
    5cd8:	003fc006 	br	5bdc <__alt_data_end+0xff005bdc>
    5cdc:	9011883a 	mov	r8,r18
    5ce0:	00800e0e 	bge	zero,r2,5d1c <_dtoa_r+0xf70>
    5ce4:	800b883a 	mov	r5,r16
    5ce8:	01800044 	movi	r6,1
    5cec:	e009883a 	mov	r4,fp
    5cf0:	da001715 	stw	r8,92(sp)
    5cf4:	00083bc0 	call	83bc <__lshift>
    5cf8:	a80b883a 	mov	r5,r21
    5cfc:	1009883a 	mov	r4,r2
    5d00:	1021883a 	mov	r16,r2
    5d04:	00085040 	call	8504 <__mcmp>
    5d08:	da001717 	ldw	r8,92(sp)
    5d0c:	0081960e 	bge	zero,r2,6368 <_dtoa_r+0x15bc>
    5d10:	00800e44 	movi	r2,57
    5d14:	40817026 	beq	r8,r2,62d8 <_dtoa_r+0x152c>
    5d18:	ba000c44 	addi	r8,r23,49
    5d1c:	8825883a 	mov	r18,r17
    5d20:	9dc00044 	addi	r23,r19,1
    5d24:	9a000005 	stb	r8,0(r19)
    5d28:	a023883a 	mov	r17,r20
    5d2c:	dc000915 	stw	r16,36(sp)
    5d30:	003f2406 	br	59c4 <__alt_data_end+0xff0059c4>
    5d34:	00800e44 	movi	r2,57
    5d38:	9011883a 	mov	r8,r18
    5d3c:	90816626 	beq	r18,r2,62d8 <_dtoa_r+0x152c>
    5d40:	05bff516 	blt	zero,r22,5d18 <__alt_data_end+0xff005d18>
    5d44:	003ff506 	br	5d1c <__alt_data_end+0xff005d1c>
    5d48:	0007d0c0 	call	7d0c <__multadd>
    5d4c:	1023883a 	mov	r17,r2
    5d50:	1029883a 	mov	r20,r2
    5d54:	003fdf06 	br	5cd4 <__alt_data_end+0xff005cd4>
    5d58:	e009883a 	mov	r4,fp
    5d5c:	0007ce40 	call	7ce4 <_Bfree>
    5d60:	00800044 	movi	r2,1
    5d64:	003fbc06 	br	5c58 <__alt_data_end+0xff005c58>
    5d68:	a80b883a 	mov	r5,r21
    5d6c:	8009883a 	mov	r4,r16
    5d70:	00085040 	call	8504 <__mcmp>
    5d74:	103edb0e 	bge	r2,zero,58e4 <__alt_data_end+0xff0058e4>
    5d78:	800b883a 	mov	r5,r16
    5d7c:	000f883a 	mov	r7,zero
    5d80:	01800284 	movi	r6,10
    5d84:	e009883a 	mov	r4,fp
    5d88:	0007d0c0 	call	7d0c <__multadd>
    5d8c:	1021883a 	mov	r16,r2
    5d90:	d8800517 	ldw	r2,20(sp)
    5d94:	d8c00b17 	ldw	r3,44(sp)
    5d98:	10bfffc4 	addi	r2,r2,-1
    5d9c:	d8800515 	stw	r2,20(sp)
    5da0:	183f761e 	bne	r3,zero,5b7c <__alt_data_end+0xff005b7c>
    5da4:	d9000c17 	ldw	r4,48(sp)
    5da8:	0101730e 	bge	zero,r4,6378 <_dtoa_r+0x15cc>
    5dac:	d9000615 	stw	r4,24(sp)
    5db0:	003ed006 	br	58f4 <__alt_data_end+0xff0058f4>
    5db4:	00800084 	movi	r2,2
    5db8:	3081861e 	bne	r6,r2,63d4 <_dtoa_r+0x1628>
    5dbc:	d8000b15 	stw	zero,44(sp)
    5dc0:	003f3c06 	br	5ab4 <__alt_data_end+0xff005ab4>
    5dc4:	dc000917 	ldw	r16,36(sp)
    5dc8:	003e9206 	br	5814 <__alt_data_end+0xff005814>
    5dcc:	d9c00317 	ldw	r7,12(sp)
    5dd0:	00800084 	movi	r2,2
    5dd4:	11fec50e 	bge	r2,r7,58ec <__alt_data_end+0xff0058ec>
    5dd8:	d9000617 	ldw	r4,24(sp)
    5ddc:	20013c1e 	bne	r4,zero,62d0 <_dtoa_r+0x1524>
    5de0:	a80b883a 	mov	r5,r21
    5de4:	000f883a 	mov	r7,zero
    5de8:	01800144 	movi	r6,5
    5dec:	e009883a 	mov	r4,fp
    5df0:	0007d0c0 	call	7d0c <__multadd>
    5df4:	100b883a 	mov	r5,r2
    5df8:	8009883a 	mov	r4,r16
    5dfc:	102b883a 	mov	r21,r2
    5e00:	00085040 	call	8504 <__mcmp>
    5e04:	dc000915 	stw	r16,36(sp)
    5e08:	00bf410e 	bge	zero,r2,5b10 <__alt_data_end+0xff005b10>
    5e0c:	d9c00717 	ldw	r7,28(sp)
    5e10:	00800c44 	movi	r2,49
    5e14:	38800005 	stb	r2,0(r7)
    5e18:	d8800517 	ldw	r2,20(sp)
    5e1c:	3dc00044 	addi	r23,r7,1
    5e20:	10800044 	addi	r2,r2,1
    5e24:	d8800515 	stw	r2,20(sp)
    5e28:	003f3d06 	br	5b20 <__alt_data_end+0xff005b20>
    5e2c:	d9800517 	ldw	r6,20(sp)
    5e30:	d9c00717 	ldw	r7,28(sp)
    5e34:	00800c44 	movi	r2,49
    5e38:	31800044 	addi	r6,r6,1
    5e3c:	d9800515 	stw	r6,20(sp)
    5e40:	38800005 	stb	r2,0(r7)
    5e44:	003edf06 	br	59c4 <__alt_data_end+0xff0059c4>
    5e48:	d8000b15 	stw	zero,44(sp)
    5e4c:	003c9f06 	br	50cc <__alt_data_end+0xff0050cc>
    5e50:	903e7e1e 	bne	r18,zero,584c <__alt_data_end+0xff00584c>
    5e54:	00800434 	movhi	r2,16
    5e58:	10bfffc4 	addi	r2,r2,-1
    5e5c:	9884703a 	and	r2,r19,r2
    5e60:	1000ea1e 	bne	r2,zero,620c <_dtoa_r+0x1460>
    5e64:	9cdffc2c 	andhi	r19,r19,32752
    5e68:	9800e826 	beq	r19,zero,620c <_dtoa_r+0x1460>
    5e6c:	d9c00817 	ldw	r7,32(sp)
    5e70:	b5800044 	addi	r22,r22,1
    5e74:	04c00044 	movi	r19,1
    5e78:	39c00044 	addi	r7,r7,1
    5e7c:	d9c00815 	stw	r7,32(sp)
    5e80:	d8800d17 	ldw	r2,52(sp)
    5e84:	103e721e 	bne	r2,zero,5850 <__alt_data_end+0xff005850>
    5e88:	00800044 	movi	r2,1
    5e8c:	003e7906 	br	5874 <__alt_data_end+0xff005874>
    5e90:	8009883a 	mov	r4,r16
    5e94:	000e2d40 	call	e2d4 <__floatsidf>
    5e98:	d9800f17 	ldw	r6,60(sp)
    5e9c:	d9c01017 	ldw	r7,64(sp)
    5ea0:	1009883a 	mov	r4,r2
    5ea4:	180b883a 	mov	r5,r3
    5ea8:	000d2400 	call	d240 <__muldf3>
    5eac:	000d883a 	mov	r6,zero
    5eb0:	01d00734 	movhi	r7,16412
    5eb4:	1009883a 	mov	r4,r2
    5eb8:	180b883a 	mov	r5,r3
    5ebc:	000be540 	call	be54 <__adddf3>
    5ec0:	047f3034 	movhi	r17,64704
    5ec4:	1021883a 	mov	r16,r2
    5ec8:	1c63883a 	add	r17,r3,r17
    5ecc:	d9000f17 	ldw	r4,60(sp)
    5ed0:	d9401017 	ldw	r5,64(sp)
    5ed4:	000d883a 	mov	r6,zero
    5ed8:	01d00534 	movhi	r7,16404
    5edc:	000d9580 	call	d958 <__subdf3>
    5ee0:	800d883a 	mov	r6,r16
    5ee4:	880f883a 	mov	r7,r17
    5ee8:	1009883a 	mov	r4,r2
    5eec:	180b883a 	mov	r5,r3
    5ef0:	102b883a 	mov	r21,r2
    5ef4:	1829883a 	mov	r20,r3
    5ef8:	000d0700 	call	d070 <__gedf2>
    5efc:	00806c16 	blt	zero,r2,60b0 <_dtoa_r+0x1304>
    5f00:	89e0003c 	xorhi	r7,r17,32768
    5f04:	800d883a 	mov	r6,r16
    5f08:	a809883a 	mov	r4,r21
    5f0c:	a00b883a 	mov	r5,r20
    5f10:	000d14c0 	call	d14c <__ledf2>
    5f14:	103d7e0e 	bge	r2,zero,5510 <__alt_data_end+0xff005510>
    5f18:	002b883a 	mov	r21,zero
    5f1c:	0023883a 	mov	r17,zero
    5f20:	003efb06 	br	5b10 <__alt_data_end+0xff005b10>
    5f24:	d8800717 	ldw	r2,28(sp)
    5f28:	003bd006 	br	4e6c <__alt_data_end+0xff004e6c>
    5f2c:	d9000a17 	ldw	r4,40(sp)
    5f30:	d9800d17 	ldw	r6,52(sp)
    5f34:	dd400a15 	stw	r21,40(sp)
    5f38:	a905c83a 	sub	r2,r21,r4
    5f3c:	308d883a 	add	r6,r6,r2
    5f40:	d9800d15 	stw	r6,52(sp)
    5f44:	002b883a 	mov	r21,zero
    5f48:	003e0606 	br	5764 <__alt_data_end+0xff005764>
    5f4c:	9023883a 	mov	r17,r18
    5f50:	9829883a 	mov	r20,r19
    5f54:	04000084 	movi	r16,2
    5f58:	003c9206 	br	51a4 <__alt_data_end+0xff0051a4>
    5f5c:	04000044 	movi	r16,1
    5f60:	dc000c15 	stw	r16,48(sp)
    5f64:	dc000615 	stw	r16,24(sp)
    5f68:	dc002215 	stw	r16,136(sp)
    5f6c:	e0001115 	stw	zero,68(fp)
    5f70:	000b883a 	mov	r5,zero
    5f74:	003c6906 	br	511c <__alt_data_end+0xff00511c>
    5f78:	3021883a 	mov	r16,r6
    5f7c:	003ffb06 	br	5f6c <__alt_data_end+0xff005f6c>
    5f80:	1000021e 	bne	r2,zero,5f8c <_dtoa_r+0x11e0>
    5f84:	4200004c 	andi	r8,r8,1
    5f88:	403e7d1e 	bne	r8,zero,5980 <__alt_data_end+0xff005980>
    5f8c:	01000c04 	movi	r4,48
    5f90:	00000106 	br	5f98 <_dtoa_r+0x11ec>
    5f94:	102f883a 	mov	r23,r2
    5f98:	b8bfffc4 	addi	r2,r23,-1
    5f9c:	10c00007 	ldb	r3,0(r2)
    5fa0:	193ffc26 	beq	r3,r4,5f94 <__alt_data_end+0xff005f94>
    5fa4:	003e8706 	br	59c4 <__alt_data_end+0xff0059c4>
    5fa8:	d8800517 	ldw	r2,20(sp)
    5fac:	00a3c83a 	sub	r17,zero,r2
    5fb0:	8800a426 	beq	r17,zero,6244 <_dtoa_r+0x1498>
    5fb4:	888003cc 	andi	r2,r17,15
    5fb8:	100490fa 	slli	r2,r2,3
    5fbc:	00c00074 	movhi	r3,1
    5fc0:	18c53004 	addi	r3,r3,5312
    5fc4:	1885883a 	add	r2,r3,r2
    5fc8:	11800017 	ldw	r6,0(r2)
    5fcc:	11c00117 	ldw	r7,4(r2)
    5fd0:	9009883a 	mov	r4,r18
    5fd4:	980b883a 	mov	r5,r19
    5fd8:	8823d13a 	srai	r17,r17,4
    5fdc:	000d2400 	call	d240 <__muldf3>
    5fe0:	d8800f15 	stw	r2,60(sp)
    5fe4:	d8c01015 	stw	r3,64(sp)
    5fe8:	8800e826 	beq	r17,zero,638c <_dtoa_r+0x15e0>
    5fec:	05000074 	movhi	r20,1
    5ff0:	a5052604 	addi	r20,r20,5272
    5ff4:	04000084 	movi	r16,2
    5ff8:	8980004c 	andi	r6,r17,1
    5ffc:	1009883a 	mov	r4,r2
    6000:	8823d07a 	srai	r17,r17,1
    6004:	180b883a 	mov	r5,r3
    6008:	30000426 	beq	r6,zero,601c <_dtoa_r+0x1270>
    600c:	a1800017 	ldw	r6,0(r20)
    6010:	a1c00117 	ldw	r7,4(r20)
    6014:	84000044 	addi	r16,r16,1
    6018:	000d2400 	call	d240 <__muldf3>
    601c:	a5000204 	addi	r20,r20,8
    6020:	883ff51e 	bne	r17,zero,5ff8 <__alt_data_end+0xff005ff8>
    6024:	d8800f15 	stw	r2,60(sp)
    6028:	d8c01015 	stw	r3,64(sp)
    602c:	003c7606 	br	5208 <__alt_data_end+0xff005208>
    6030:	00c00c04 	movi	r3,48
    6034:	10c00005 	stb	r3,0(r2)
    6038:	d8c00517 	ldw	r3,20(sp)
    603c:	bd3fffc3 	ldbu	r20,-1(r23)
    6040:	18c00044 	addi	r3,r3,1
    6044:	d8c00515 	stw	r3,20(sp)
    6048:	003db906 	br	5730 <__alt_data_end+0xff005730>
    604c:	89400117 	ldw	r5,4(r17)
    6050:	e009883a 	mov	r4,fp
    6054:	0007c3c0 	call	7c3c <_Balloc>
    6058:	89800417 	ldw	r6,16(r17)
    605c:	89400304 	addi	r5,r17,12
    6060:	11000304 	addi	r4,r2,12
    6064:	31800084 	addi	r6,r6,2
    6068:	318d883a 	add	r6,r6,r6
    606c:	318d883a 	add	r6,r6,r6
    6070:	1027883a 	mov	r19,r2
    6074:	00078700 	call	7870 <memcpy>
    6078:	01800044 	movi	r6,1
    607c:	980b883a 	mov	r5,r19
    6080:	e009883a 	mov	r4,fp
    6084:	00083bc0 	call	83bc <__lshift>
    6088:	1029883a 	mov	r20,r2
    608c:	003ecc06 	br	5bc0 <__alt_data_end+0xff005bc0>
    6090:	00800e44 	movi	r2,57
    6094:	90809026 	beq	r18,r2,62d8 <_dtoa_r+0x152c>
    6098:	92000044 	addi	r8,r18,1
    609c:	003f1f06 	br	5d1c <__alt_data_end+0xff005d1c>
    60a0:	9011883a 	mov	r8,r18
    60a4:	8825883a 	mov	r18,r17
    60a8:	a023883a 	mov	r17,r20
    60ac:	003e2906 	br	5954 <__alt_data_end+0xff005954>
    60b0:	002b883a 	mov	r21,zero
    60b4:	0023883a 	mov	r17,zero
    60b8:	003f5406 	br	5e0c <__alt_data_end+0xff005e0c>
    60bc:	61bfffc4 	addi	r6,r12,-1
    60c0:	300490fa 	slli	r2,r6,3
    60c4:	00c00074 	movhi	r3,1
    60c8:	18c53004 	addi	r3,r3,5312
    60cc:	1885883a 	add	r2,r3,r2
    60d0:	11000017 	ldw	r4,0(r2)
    60d4:	11400117 	ldw	r5,4(r2)
    60d8:	d8800717 	ldw	r2,28(sp)
    60dc:	880f883a 	mov	r7,r17
    60e0:	d9801215 	stw	r6,72(sp)
    60e4:	800d883a 	mov	r6,r16
    60e8:	db001615 	stw	r12,88(sp)
    60ec:	15c00044 	addi	r23,r2,1
    60f0:	000d2400 	call	d240 <__muldf3>
    60f4:	d9401017 	ldw	r5,64(sp)
    60f8:	d9000f17 	ldw	r4,60(sp)
    60fc:	d8c01515 	stw	r3,84(sp)
    6100:	d8801415 	stw	r2,80(sp)
    6104:	000e2540 	call	e254 <__fixdfsi>
    6108:	1009883a 	mov	r4,r2
    610c:	1021883a 	mov	r16,r2
    6110:	000e2d40 	call	e2d4 <__floatsidf>
    6114:	d9000f17 	ldw	r4,60(sp)
    6118:	d9401017 	ldw	r5,64(sp)
    611c:	100d883a 	mov	r6,r2
    6120:	180f883a 	mov	r7,r3
    6124:	000d9580 	call	d958 <__subdf3>
    6128:	1829883a 	mov	r20,r3
    612c:	d8c00717 	ldw	r3,28(sp)
    6130:	84000c04 	addi	r16,r16,48
    6134:	1023883a 	mov	r17,r2
    6138:	1c000005 	stb	r16,0(r3)
    613c:	db001617 	ldw	r12,88(sp)
    6140:	00800044 	movi	r2,1
    6144:	60802226 	beq	r12,r2,61d0 <_dtoa_r+0x1424>
    6148:	d9c00717 	ldw	r7,28(sp)
    614c:	8805883a 	mov	r2,r17
    6150:	b82b883a 	mov	r21,r23
    6154:	3b19883a 	add	r12,r7,r12
    6158:	6023883a 	mov	r17,r12
    615c:	a007883a 	mov	r3,r20
    6160:	dc800f15 	stw	r18,60(sp)
    6164:	000d883a 	mov	r6,zero
    6168:	01d00934 	movhi	r7,16420
    616c:	1009883a 	mov	r4,r2
    6170:	180b883a 	mov	r5,r3
    6174:	000d2400 	call	d240 <__muldf3>
    6178:	180b883a 	mov	r5,r3
    617c:	1009883a 	mov	r4,r2
    6180:	1829883a 	mov	r20,r3
    6184:	1025883a 	mov	r18,r2
    6188:	000e2540 	call	e254 <__fixdfsi>
    618c:	1009883a 	mov	r4,r2
    6190:	1021883a 	mov	r16,r2
    6194:	000e2d40 	call	e2d4 <__floatsidf>
    6198:	100d883a 	mov	r6,r2
    619c:	180f883a 	mov	r7,r3
    61a0:	9009883a 	mov	r4,r18
    61a4:	a00b883a 	mov	r5,r20
    61a8:	84000c04 	addi	r16,r16,48
    61ac:	000d9580 	call	d958 <__subdf3>
    61b0:	ad400044 	addi	r21,r21,1
    61b4:	ac3fffc5 	stb	r16,-1(r21)
    61b8:	ac7fea1e 	bne	r21,r17,6164 <__alt_data_end+0xff006164>
    61bc:	1023883a 	mov	r17,r2
    61c0:	d8801217 	ldw	r2,72(sp)
    61c4:	dc800f17 	ldw	r18,60(sp)
    61c8:	1829883a 	mov	r20,r3
    61cc:	b8af883a 	add	r23,r23,r2
    61d0:	d9001417 	ldw	r4,80(sp)
    61d4:	d9401517 	ldw	r5,84(sp)
    61d8:	000d883a 	mov	r6,zero
    61dc:	01cff834 	movhi	r7,16352
    61e0:	000be540 	call	be54 <__adddf3>
    61e4:	880d883a 	mov	r6,r17
    61e8:	a00f883a 	mov	r7,r20
    61ec:	1009883a 	mov	r4,r2
    61f0:	180b883a 	mov	r5,r3
    61f4:	000d14c0 	call	d14c <__ledf2>
    61f8:	10003e0e 	bge	r2,zero,62f4 <_dtoa_r+0x1548>
    61fc:	d9001317 	ldw	r4,76(sp)
    6200:	bd3fffc3 	ldbu	r20,-1(r23)
    6204:	d9000515 	stw	r4,20(sp)
    6208:	003d3b06 	br	56f8 <__alt_data_end+0xff0056f8>
    620c:	0027883a 	mov	r19,zero
    6210:	003f1b06 	br	5e80 <__alt_data_end+0xff005e80>
    6214:	d8800817 	ldw	r2,32(sp)
    6218:	11e9c83a 	sub	r20,r2,r7
    621c:	0005883a 	mov	r2,zero
    6220:	003d5406 	br	5774 <__alt_data_end+0xff005774>
    6224:	00800044 	movi	r2,1
    6228:	003dc706 	br	5948 <__alt_data_end+0xff005948>
    622c:	d8c00217 	ldw	r3,8(sp)
    6230:	00800d84 	movi	r2,54
    6234:	dd400a17 	ldw	r21,40(sp)
    6238:	10c5c83a 	sub	r2,r2,r3
    623c:	dd000817 	ldw	r20,32(sp)
    6240:	003d4c06 	br	5774 <__alt_data_end+0xff005774>
    6244:	dc800f15 	stw	r18,60(sp)
    6248:	dcc01015 	stw	r19,64(sp)
    624c:	04000084 	movi	r16,2
    6250:	003bed06 	br	5208 <__alt_data_end+0xff005208>
    6254:	d9000617 	ldw	r4,24(sp)
    6258:	203f0d26 	beq	r4,zero,5e90 <__alt_data_end+0xff005e90>
    625c:	d9800c17 	ldw	r6,48(sp)
    6260:	01bcab0e 	bge	zero,r6,5510 <__alt_data_end+0xff005510>
    6264:	d9401017 	ldw	r5,64(sp)
    6268:	d9000f17 	ldw	r4,60(sp)
    626c:	000d883a 	mov	r6,zero
    6270:	01d00934 	movhi	r7,16420
    6274:	000d2400 	call	d240 <__muldf3>
    6278:	81000044 	addi	r4,r16,1
    627c:	d8800f15 	stw	r2,60(sp)
    6280:	d8c01015 	stw	r3,64(sp)
    6284:	000e2d40 	call	e2d4 <__floatsidf>
    6288:	d9800f17 	ldw	r6,60(sp)
    628c:	d9c01017 	ldw	r7,64(sp)
    6290:	1009883a 	mov	r4,r2
    6294:	180b883a 	mov	r5,r3
    6298:	000d2400 	call	d240 <__muldf3>
    629c:	01d00734 	movhi	r7,16412
    62a0:	000d883a 	mov	r6,zero
    62a4:	1009883a 	mov	r4,r2
    62a8:	180b883a 	mov	r5,r3
    62ac:	000be540 	call	be54 <__adddf3>
    62b0:	d9c00517 	ldw	r7,20(sp)
    62b4:	047f3034 	movhi	r17,64704
    62b8:	1021883a 	mov	r16,r2
    62bc:	39ffffc4 	addi	r7,r7,-1
    62c0:	d9c01315 	stw	r7,76(sp)
    62c4:	1c63883a 	add	r17,r3,r17
    62c8:	db000c17 	ldw	r12,48(sp)
    62cc:	003bea06 	br	5278 <__alt_data_end+0xff005278>
    62d0:	dc000915 	stw	r16,36(sp)
    62d4:	003e0e06 	br	5b10 <__alt_data_end+0xff005b10>
    62d8:	01000e44 	movi	r4,57
    62dc:	8825883a 	mov	r18,r17
    62e0:	9dc00044 	addi	r23,r19,1
    62e4:	99000005 	stb	r4,0(r19)
    62e8:	a023883a 	mov	r17,r20
    62ec:	dc000915 	stw	r16,36(sp)
    62f0:	003da406 	br	5984 <__alt_data_end+0xff005984>
    62f4:	d9801417 	ldw	r6,80(sp)
    62f8:	d9c01517 	ldw	r7,84(sp)
    62fc:	0009883a 	mov	r4,zero
    6300:	014ff834 	movhi	r5,16352
    6304:	000d9580 	call	d958 <__subdf3>
    6308:	880d883a 	mov	r6,r17
    630c:	a00f883a 	mov	r7,r20
    6310:	1009883a 	mov	r4,r2
    6314:	180b883a 	mov	r5,r3
    6318:	000d0700 	call	d070 <__gedf2>
    631c:	00bc7c0e 	bge	zero,r2,5510 <__alt_data_end+0xff005510>
    6320:	01000c04 	movi	r4,48
    6324:	00000106 	br	632c <_dtoa_r+0x1580>
    6328:	102f883a 	mov	r23,r2
    632c:	b8bfffc4 	addi	r2,r23,-1
    6330:	10c00007 	ldb	r3,0(r2)
    6334:	193ffc26 	beq	r3,r4,6328 <__alt_data_end+0xff006328>
    6338:	d9801317 	ldw	r6,76(sp)
    633c:	d9800515 	stw	r6,20(sp)
    6340:	003c4406 	br	5454 <__alt_data_end+0xff005454>
    6344:	d9801317 	ldw	r6,76(sp)
    6348:	d9800515 	stw	r6,20(sp)
    634c:	003cea06 	br	56f8 <__alt_data_end+0xff0056f8>
    6350:	dd800f17 	ldw	r22,60(sp)
    6354:	dcc01017 	ldw	r19,64(sp)
    6358:	dc801217 	ldw	r18,72(sp)
    635c:	003c6c06 	br	5510 <__alt_data_end+0xff005510>
    6360:	903e031e 	bne	r18,zero,5b70 <__alt_data_end+0xff005b70>
    6364:	003ebb06 	br	5e54 <__alt_data_end+0xff005e54>
    6368:	103e6c1e 	bne	r2,zero,5d1c <__alt_data_end+0xff005d1c>
    636c:	4080004c 	andi	r2,r8,1
    6370:	103e6a26 	beq	r2,zero,5d1c <__alt_data_end+0xff005d1c>
    6374:	003e6606 	br	5d10 <__alt_data_end+0xff005d10>
    6378:	d8c00317 	ldw	r3,12(sp)
    637c:	00800084 	movi	r2,2
    6380:	10c02916 	blt	r2,r3,6428 <_dtoa_r+0x167c>
    6384:	d9000c17 	ldw	r4,48(sp)
    6388:	003e8806 	br	5dac <__alt_data_end+0xff005dac>
    638c:	04000084 	movi	r16,2
    6390:	003b9d06 	br	5208 <__alt_data_end+0xff005208>
    6394:	d9001317 	ldw	r4,76(sp)
    6398:	d9000515 	stw	r4,20(sp)
    639c:	003cd606 	br	56f8 <__alt_data_end+0xff0056f8>
    63a0:	d8801317 	ldw	r2,76(sp)
    63a4:	d8800515 	stw	r2,20(sp)
    63a8:	003c2a06 	br	5454 <__alt_data_end+0xff005454>
    63ac:	d9800317 	ldw	r6,12(sp)
    63b0:	00800084 	movi	r2,2
    63b4:	11801516 	blt	r2,r6,640c <_dtoa_r+0x1660>
    63b8:	d9c00c17 	ldw	r7,48(sp)
    63bc:	d9c00615 	stw	r7,24(sp)
    63c0:	003df706 	br	5ba0 <__alt_data_end+0xff005ba0>
    63c4:	193d3926 	beq	r3,r4,58ac <__alt_data_end+0xff0058ac>
    63c8:	00c00f04 	movi	r3,60
    63cc:	1885c83a 	sub	r2,r3,r2
    63d0:	003ddf06 	br	5b50 <__alt_data_end+0xff005b50>
    63d4:	e009883a 	mov	r4,fp
    63d8:	e0001115 	stw	zero,68(fp)
    63dc:	000b883a 	mov	r5,zero
    63e0:	0007c3c0 	call	7c3c <_Balloc>
    63e4:	d8800715 	stw	r2,28(sp)
    63e8:	d8c00717 	ldw	r3,28(sp)
    63ec:	00bfffc4 	movi	r2,-1
    63f0:	01000044 	movi	r4,1
    63f4:	d8800c15 	stw	r2,48(sp)
    63f8:	e0c01015 	stw	r3,64(fp)
    63fc:	d9000b15 	stw	r4,44(sp)
    6400:	d8800615 	stw	r2,24(sp)
    6404:	d8002215 	stw	zero,136(sp)
    6408:	003c4106 	br	5510 <__alt_data_end+0xff005510>
    640c:	d8c00c17 	ldw	r3,48(sp)
    6410:	d8c00615 	stw	r3,24(sp)
    6414:	003e7006 	br	5dd8 <__alt_data_end+0xff005dd8>
    6418:	04400044 	movi	r17,1
    641c:	003b2006 	br	50a0 <__alt_data_end+0xff0050a0>
    6420:	000b883a 	mov	r5,zero
    6424:	003b3d06 	br	511c <__alt_data_end+0xff00511c>
    6428:	d8800c17 	ldw	r2,48(sp)
    642c:	d8800615 	stw	r2,24(sp)
    6430:	003e6906 	br	5dd8 <__alt_data_end+0xff005dd8>

00006434 <__sflush_r>:
    6434:	2880030b 	ldhu	r2,12(r5)
    6438:	defffb04 	addi	sp,sp,-20
    643c:	dcc00315 	stw	r19,12(sp)
    6440:	dc400115 	stw	r17,4(sp)
    6444:	dfc00415 	stw	ra,16(sp)
    6448:	dc800215 	stw	r18,8(sp)
    644c:	dc000015 	stw	r16,0(sp)
    6450:	10c0020c 	andi	r3,r2,8
    6454:	2823883a 	mov	r17,r5
    6458:	2027883a 	mov	r19,r4
    645c:	1800311e 	bne	r3,zero,6524 <__sflush_r+0xf0>
    6460:	28c00117 	ldw	r3,4(r5)
    6464:	10820014 	ori	r2,r2,2048
    6468:	2880030d 	sth	r2,12(r5)
    646c:	00c04b0e 	bge	zero,r3,659c <__sflush_r+0x168>
    6470:	8a000a17 	ldw	r8,40(r17)
    6474:	40002326 	beq	r8,zero,6504 <__sflush_r+0xd0>
    6478:	9c000017 	ldw	r16,0(r19)
    647c:	10c4000c 	andi	r3,r2,4096
    6480:	98000015 	stw	zero,0(r19)
    6484:	18004826 	beq	r3,zero,65a8 <__sflush_r+0x174>
    6488:	89801417 	ldw	r6,80(r17)
    648c:	10c0010c 	andi	r3,r2,4
    6490:	18000626 	beq	r3,zero,64ac <__sflush_r+0x78>
    6494:	88c00117 	ldw	r3,4(r17)
    6498:	88800c17 	ldw	r2,48(r17)
    649c:	30cdc83a 	sub	r6,r6,r3
    64a0:	10000226 	beq	r2,zero,64ac <__sflush_r+0x78>
    64a4:	88800f17 	ldw	r2,60(r17)
    64a8:	308dc83a 	sub	r6,r6,r2
    64ac:	89400717 	ldw	r5,28(r17)
    64b0:	000f883a 	mov	r7,zero
    64b4:	9809883a 	mov	r4,r19
    64b8:	403ee83a 	callr	r8
    64bc:	00ffffc4 	movi	r3,-1
    64c0:	10c04426 	beq	r2,r3,65d4 <__sflush_r+0x1a0>
    64c4:	88c0030b 	ldhu	r3,12(r17)
    64c8:	89000417 	ldw	r4,16(r17)
    64cc:	88000115 	stw	zero,4(r17)
    64d0:	197dffcc 	andi	r5,r3,63487
    64d4:	8940030d 	sth	r5,12(r17)
    64d8:	89000015 	stw	r4,0(r17)
    64dc:	18c4000c 	andi	r3,r3,4096
    64e0:	18002c1e 	bne	r3,zero,6594 <__sflush_r+0x160>
    64e4:	89400c17 	ldw	r5,48(r17)
    64e8:	9c000015 	stw	r16,0(r19)
    64ec:	28000526 	beq	r5,zero,6504 <__sflush_r+0xd0>
    64f0:	88801004 	addi	r2,r17,64
    64f4:	28800226 	beq	r5,r2,6500 <__sflush_r+0xcc>
    64f8:	9809883a 	mov	r4,r19
    64fc:	0006ba00 	call	6ba0 <_free_r>
    6500:	88000c15 	stw	zero,48(r17)
    6504:	0005883a 	mov	r2,zero
    6508:	dfc00417 	ldw	ra,16(sp)
    650c:	dcc00317 	ldw	r19,12(sp)
    6510:	dc800217 	ldw	r18,8(sp)
    6514:	dc400117 	ldw	r17,4(sp)
    6518:	dc000017 	ldw	r16,0(sp)
    651c:	dec00504 	addi	sp,sp,20
    6520:	f800283a 	ret
    6524:	2c800417 	ldw	r18,16(r5)
    6528:	903ff626 	beq	r18,zero,6504 <__alt_data_end+0xff006504>
    652c:	2c000017 	ldw	r16,0(r5)
    6530:	108000cc 	andi	r2,r2,3
    6534:	2c800015 	stw	r18,0(r5)
    6538:	84a1c83a 	sub	r16,r16,r18
    653c:	1000131e 	bne	r2,zero,658c <__sflush_r+0x158>
    6540:	28800517 	ldw	r2,20(r5)
    6544:	88800215 	stw	r2,8(r17)
    6548:	04000316 	blt	zero,r16,6558 <__sflush_r+0x124>
    654c:	003fed06 	br	6504 <__alt_data_end+0xff006504>
    6550:	90a5883a 	add	r18,r18,r2
    6554:	043feb0e 	bge	zero,r16,6504 <__alt_data_end+0xff006504>
    6558:	88800917 	ldw	r2,36(r17)
    655c:	89400717 	ldw	r5,28(r17)
    6560:	800f883a 	mov	r7,r16
    6564:	900d883a 	mov	r6,r18
    6568:	9809883a 	mov	r4,r19
    656c:	103ee83a 	callr	r2
    6570:	80a1c83a 	sub	r16,r16,r2
    6574:	00bff616 	blt	zero,r2,6550 <__alt_data_end+0xff006550>
    6578:	88c0030b 	ldhu	r3,12(r17)
    657c:	00bfffc4 	movi	r2,-1
    6580:	18c01014 	ori	r3,r3,64
    6584:	88c0030d 	sth	r3,12(r17)
    6588:	003fdf06 	br	6508 <__alt_data_end+0xff006508>
    658c:	0005883a 	mov	r2,zero
    6590:	003fec06 	br	6544 <__alt_data_end+0xff006544>
    6594:	88801415 	stw	r2,80(r17)
    6598:	003fd206 	br	64e4 <__alt_data_end+0xff0064e4>
    659c:	28c00f17 	ldw	r3,60(r5)
    65a0:	00ffb316 	blt	zero,r3,6470 <__alt_data_end+0xff006470>
    65a4:	003fd706 	br	6504 <__alt_data_end+0xff006504>
    65a8:	89400717 	ldw	r5,28(r17)
    65ac:	000d883a 	mov	r6,zero
    65b0:	01c00044 	movi	r7,1
    65b4:	9809883a 	mov	r4,r19
    65b8:	403ee83a 	callr	r8
    65bc:	100d883a 	mov	r6,r2
    65c0:	00bfffc4 	movi	r2,-1
    65c4:	30801426 	beq	r6,r2,6618 <__sflush_r+0x1e4>
    65c8:	8880030b 	ldhu	r2,12(r17)
    65cc:	8a000a17 	ldw	r8,40(r17)
    65d0:	003fae06 	br	648c <__alt_data_end+0xff00648c>
    65d4:	98c00017 	ldw	r3,0(r19)
    65d8:	183fba26 	beq	r3,zero,64c4 <__alt_data_end+0xff0064c4>
    65dc:	01000744 	movi	r4,29
    65e0:	19000626 	beq	r3,r4,65fc <__sflush_r+0x1c8>
    65e4:	01000584 	movi	r4,22
    65e8:	19000426 	beq	r3,r4,65fc <__sflush_r+0x1c8>
    65ec:	88c0030b 	ldhu	r3,12(r17)
    65f0:	18c01014 	ori	r3,r3,64
    65f4:	88c0030d 	sth	r3,12(r17)
    65f8:	003fc306 	br	6508 <__alt_data_end+0xff006508>
    65fc:	8880030b 	ldhu	r2,12(r17)
    6600:	88c00417 	ldw	r3,16(r17)
    6604:	88000115 	stw	zero,4(r17)
    6608:	10bdffcc 	andi	r2,r2,63487
    660c:	8880030d 	sth	r2,12(r17)
    6610:	88c00015 	stw	r3,0(r17)
    6614:	003fb306 	br	64e4 <__alt_data_end+0xff0064e4>
    6618:	98800017 	ldw	r2,0(r19)
    661c:	103fea26 	beq	r2,zero,65c8 <__alt_data_end+0xff0065c8>
    6620:	00c00744 	movi	r3,29
    6624:	10c00226 	beq	r2,r3,6630 <__sflush_r+0x1fc>
    6628:	00c00584 	movi	r3,22
    662c:	10c0031e 	bne	r2,r3,663c <__sflush_r+0x208>
    6630:	9c000015 	stw	r16,0(r19)
    6634:	0005883a 	mov	r2,zero
    6638:	003fb306 	br	6508 <__alt_data_end+0xff006508>
    663c:	88c0030b 	ldhu	r3,12(r17)
    6640:	3005883a 	mov	r2,r6
    6644:	18c01014 	ori	r3,r3,64
    6648:	88c0030d 	sth	r3,12(r17)
    664c:	003fae06 	br	6508 <__alt_data_end+0xff006508>

00006650 <_fflush_r>:
    6650:	defffd04 	addi	sp,sp,-12
    6654:	dc000115 	stw	r16,4(sp)
    6658:	dfc00215 	stw	ra,8(sp)
    665c:	2021883a 	mov	r16,r4
    6660:	20000226 	beq	r4,zero,666c <_fflush_r+0x1c>
    6664:	20800e17 	ldw	r2,56(r4)
    6668:	10000c26 	beq	r2,zero,669c <_fflush_r+0x4c>
    666c:	2880030f 	ldh	r2,12(r5)
    6670:	1000051e 	bne	r2,zero,6688 <_fflush_r+0x38>
    6674:	0005883a 	mov	r2,zero
    6678:	dfc00217 	ldw	ra,8(sp)
    667c:	dc000117 	ldw	r16,4(sp)
    6680:	dec00304 	addi	sp,sp,12
    6684:	f800283a 	ret
    6688:	8009883a 	mov	r4,r16
    668c:	dfc00217 	ldw	ra,8(sp)
    6690:	dc000117 	ldw	r16,4(sp)
    6694:	dec00304 	addi	sp,sp,12
    6698:	00064341 	jmpi	6434 <__sflush_r>
    669c:	d9400015 	stw	r5,0(sp)
    66a0:	0006a2c0 	call	6a2c <__sinit>
    66a4:	d9400017 	ldw	r5,0(sp)
    66a8:	003ff006 	br	666c <__alt_data_end+0xff00666c>

000066ac <fflush>:
    66ac:	20000526 	beq	r4,zero,66c4 <fflush+0x18>
    66b0:	00800074 	movhi	r2,1
    66b4:	108ca304 	addi	r2,r2,12940
    66b8:	200b883a 	mov	r5,r4
    66bc:	11000017 	ldw	r4,0(r2)
    66c0:	00066501 	jmpi	6650 <_fflush_r>
    66c4:	00800074 	movhi	r2,1
    66c8:	108ca204 	addi	r2,r2,12936
    66cc:	11000017 	ldw	r4,0(r2)
    66d0:	01400034 	movhi	r5,0
    66d4:	29599404 	addi	r5,r5,26192
    66d8:	00074301 	jmpi	7430 <_fwalk_reent>

000066dc <__fp_unlock>:
    66dc:	0005883a 	mov	r2,zero
    66e0:	f800283a 	ret

000066e4 <_cleanup_r>:
    66e4:	01400074 	movhi	r5,1
    66e8:	296afa04 	addi	r5,r5,-21528
    66ec:	00074301 	jmpi	7430 <_fwalk_reent>

000066f0 <__sinit.part.1>:
    66f0:	defff704 	addi	sp,sp,-36
    66f4:	00c00034 	movhi	r3,0
    66f8:	dfc00815 	stw	ra,32(sp)
    66fc:	ddc00715 	stw	r23,28(sp)
    6700:	dd800615 	stw	r22,24(sp)
    6704:	dd400515 	stw	r21,20(sp)
    6708:	dd000415 	stw	r20,16(sp)
    670c:	dcc00315 	stw	r19,12(sp)
    6710:	dc800215 	stw	r18,8(sp)
    6714:	dc400115 	stw	r17,4(sp)
    6718:	dc000015 	stw	r16,0(sp)
    671c:	18d9b904 	addi	r3,r3,26340
    6720:	24000117 	ldw	r16,4(r4)
    6724:	20c00f15 	stw	r3,60(r4)
    6728:	2080bb04 	addi	r2,r4,748
    672c:	00c000c4 	movi	r3,3
    6730:	20c0b915 	stw	r3,740(r4)
    6734:	2080ba15 	stw	r2,744(r4)
    6738:	2000b815 	stw	zero,736(r4)
    673c:	05c00204 	movi	r23,8
    6740:	00800104 	movi	r2,4
    6744:	2025883a 	mov	r18,r4
    6748:	b80d883a 	mov	r6,r23
    674c:	81001704 	addi	r4,r16,92
    6750:	000b883a 	mov	r5,zero
    6754:	80000015 	stw	zero,0(r16)
    6758:	80000115 	stw	zero,4(r16)
    675c:	80000215 	stw	zero,8(r16)
    6760:	8080030d 	sth	r2,12(r16)
    6764:	80001915 	stw	zero,100(r16)
    6768:	8000038d 	sth	zero,14(r16)
    676c:	80000415 	stw	zero,16(r16)
    6770:	80000515 	stw	zero,20(r16)
    6774:	80000615 	stw	zero,24(r16)
    6778:	0007b140 	call	7b14 <memset>
    677c:	05800074 	movhi	r22,1
    6780:	94400217 	ldw	r17,8(r18)
    6784:	05400074 	movhi	r21,1
    6788:	05000074 	movhi	r20,1
    678c:	04c00074 	movhi	r19,1
    6790:	b5a48404 	addi	r22,r22,-28144
    6794:	ad649b04 	addi	r21,r21,-28052
    6798:	a524ba04 	addi	r20,r20,-27928
    679c:	9ce4d104 	addi	r19,r19,-27836
    67a0:	85800815 	stw	r22,32(r16)
    67a4:	85400915 	stw	r21,36(r16)
    67a8:	85000a15 	stw	r20,40(r16)
    67ac:	84c00b15 	stw	r19,44(r16)
    67b0:	84000715 	stw	r16,28(r16)
    67b4:	00800284 	movi	r2,10
    67b8:	8880030d 	sth	r2,12(r17)
    67bc:	00800044 	movi	r2,1
    67c0:	b80d883a 	mov	r6,r23
    67c4:	89001704 	addi	r4,r17,92
    67c8:	000b883a 	mov	r5,zero
    67cc:	88000015 	stw	zero,0(r17)
    67d0:	88000115 	stw	zero,4(r17)
    67d4:	88000215 	stw	zero,8(r17)
    67d8:	88001915 	stw	zero,100(r17)
    67dc:	8880038d 	sth	r2,14(r17)
    67e0:	88000415 	stw	zero,16(r17)
    67e4:	88000515 	stw	zero,20(r17)
    67e8:	88000615 	stw	zero,24(r17)
    67ec:	0007b140 	call	7b14 <memset>
    67f0:	94000317 	ldw	r16,12(r18)
    67f4:	00800484 	movi	r2,18
    67f8:	8c400715 	stw	r17,28(r17)
    67fc:	8d800815 	stw	r22,32(r17)
    6800:	8d400915 	stw	r21,36(r17)
    6804:	8d000a15 	stw	r20,40(r17)
    6808:	8cc00b15 	stw	r19,44(r17)
    680c:	8080030d 	sth	r2,12(r16)
    6810:	00800084 	movi	r2,2
    6814:	80000015 	stw	zero,0(r16)
    6818:	80000115 	stw	zero,4(r16)
    681c:	80000215 	stw	zero,8(r16)
    6820:	80001915 	stw	zero,100(r16)
    6824:	8080038d 	sth	r2,14(r16)
    6828:	80000415 	stw	zero,16(r16)
    682c:	80000515 	stw	zero,20(r16)
    6830:	80000615 	stw	zero,24(r16)
    6834:	b80d883a 	mov	r6,r23
    6838:	000b883a 	mov	r5,zero
    683c:	81001704 	addi	r4,r16,92
    6840:	0007b140 	call	7b14 <memset>
    6844:	00800044 	movi	r2,1
    6848:	84000715 	stw	r16,28(r16)
    684c:	85800815 	stw	r22,32(r16)
    6850:	85400915 	stw	r21,36(r16)
    6854:	85000a15 	stw	r20,40(r16)
    6858:	84c00b15 	stw	r19,44(r16)
    685c:	90800e15 	stw	r2,56(r18)
    6860:	dfc00817 	ldw	ra,32(sp)
    6864:	ddc00717 	ldw	r23,28(sp)
    6868:	dd800617 	ldw	r22,24(sp)
    686c:	dd400517 	ldw	r21,20(sp)
    6870:	dd000417 	ldw	r20,16(sp)
    6874:	dcc00317 	ldw	r19,12(sp)
    6878:	dc800217 	ldw	r18,8(sp)
    687c:	dc400117 	ldw	r17,4(sp)
    6880:	dc000017 	ldw	r16,0(sp)
    6884:	dec00904 	addi	sp,sp,36
    6888:	f800283a 	ret

0000688c <__fp_lock>:
    688c:	0005883a 	mov	r2,zero
    6890:	f800283a 	ret

00006894 <__sfmoreglue>:
    6894:	defffc04 	addi	sp,sp,-16
    6898:	dc400115 	stw	r17,4(sp)
    689c:	2c7fffc4 	addi	r17,r5,-1
    68a0:	8c401a24 	muli	r17,r17,104
    68a4:	dc800215 	stw	r18,8(sp)
    68a8:	2825883a 	mov	r18,r5
    68ac:	89401d04 	addi	r5,r17,116
    68b0:	dc000015 	stw	r16,0(sp)
    68b4:	dfc00315 	stw	ra,12(sp)
    68b8:	0001d500 	call	1d50 <_malloc_r>
    68bc:	1021883a 	mov	r16,r2
    68c0:	10000726 	beq	r2,zero,68e0 <__sfmoreglue+0x4c>
    68c4:	11000304 	addi	r4,r2,12
    68c8:	10000015 	stw	zero,0(r2)
    68cc:	14800115 	stw	r18,4(r2)
    68d0:	11000215 	stw	r4,8(r2)
    68d4:	89801a04 	addi	r6,r17,104
    68d8:	000b883a 	mov	r5,zero
    68dc:	0007b140 	call	7b14 <memset>
    68e0:	8005883a 	mov	r2,r16
    68e4:	dfc00317 	ldw	ra,12(sp)
    68e8:	dc800217 	ldw	r18,8(sp)
    68ec:	dc400117 	ldw	r17,4(sp)
    68f0:	dc000017 	ldw	r16,0(sp)
    68f4:	dec00404 	addi	sp,sp,16
    68f8:	f800283a 	ret

000068fc <__sfp>:
    68fc:	defffb04 	addi	sp,sp,-20
    6900:	dc000015 	stw	r16,0(sp)
    6904:	04000074 	movhi	r16,1
    6908:	840ca204 	addi	r16,r16,12936
    690c:	dcc00315 	stw	r19,12(sp)
    6910:	2027883a 	mov	r19,r4
    6914:	81000017 	ldw	r4,0(r16)
    6918:	dfc00415 	stw	ra,16(sp)
    691c:	dc800215 	stw	r18,8(sp)
    6920:	20800e17 	ldw	r2,56(r4)
    6924:	dc400115 	stw	r17,4(sp)
    6928:	1000021e 	bne	r2,zero,6934 <__sfp+0x38>
    692c:	00066f00 	call	66f0 <__sinit.part.1>
    6930:	81000017 	ldw	r4,0(r16)
    6934:	2480b804 	addi	r18,r4,736
    6938:	047fffc4 	movi	r17,-1
    693c:	91000117 	ldw	r4,4(r18)
    6940:	94000217 	ldw	r16,8(r18)
    6944:	213fffc4 	addi	r4,r4,-1
    6948:	20000a16 	blt	r4,zero,6974 <__sfp+0x78>
    694c:	8080030f 	ldh	r2,12(r16)
    6950:	10000c26 	beq	r2,zero,6984 <__sfp+0x88>
    6954:	80c01d04 	addi	r3,r16,116
    6958:	00000206 	br	6964 <__sfp+0x68>
    695c:	18bfe60f 	ldh	r2,-104(r3)
    6960:	10000826 	beq	r2,zero,6984 <__sfp+0x88>
    6964:	213fffc4 	addi	r4,r4,-1
    6968:	1c3ffd04 	addi	r16,r3,-12
    696c:	18c01a04 	addi	r3,r3,104
    6970:	247ffa1e 	bne	r4,r17,695c <__alt_data_end+0xff00695c>
    6974:	90800017 	ldw	r2,0(r18)
    6978:	10001d26 	beq	r2,zero,69f0 <__sfp+0xf4>
    697c:	1025883a 	mov	r18,r2
    6980:	003fee06 	br	693c <__alt_data_end+0xff00693c>
    6984:	00bfffc4 	movi	r2,-1
    6988:	8080038d 	sth	r2,14(r16)
    698c:	00800044 	movi	r2,1
    6990:	8080030d 	sth	r2,12(r16)
    6994:	80001915 	stw	zero,100(r16)
    6998:	80000015 	stw	zero,0(r16)
    699c:	80000215 	stw	zero,8(r16)
    69a0:	80000115 	stw	zero,4(r16)
    69a4:	80000415 	stw	zero,16(r16)
    69a8:	80000515 	stw	zero,20(r16)
    69ac:	80000615 	stw	zero,24(r16)
    69b0:	01800204 	movi	r6,8
    69b4:	000b883a 	mov	r5,zero
    69b8:	81001704 	addi	r4,r16,92
    69bc:	0007b140 	call	7b14 <memset>
    69c0:	8005883a 	mov	r2,r16
    69c4:	80000c15 	stw	zero,48(r16)
    69c8:	80000d15 	stw	zero,52(r16)
    69cc:	80001115 	stw	zero,68(r16)
    69d0:	80001215 	stw	zero,72(r16)
    69d4:	dfc00417 	ldw	ra,16(sp)
    69d8:	dcc00317 	ldw	r19,12(sp)
    69dc:	dc800217 	ldw	r18,8(sp)
    69e0:	dc400117 	ldw	r17,4(sp)
    69e4:	dc000017 	ldw	r16,0(sp)
    69e8:	dec00504 	addi	sp,sp,20
    69ec:	f800283a 	ret
    69f0:	01400104 	movi	r5,4
    69f4:	9809883a 	mov	r4,r19
    69f8:	00068940 	call	6894 <__sfmoreglue>
    69fc:	90800015 	stw	r2,0(r18)
    6a00:	103fde1e 	bne	r2,zero,697c <__alt_data_end+0xff00697c>
    6a04:	00800304 	movi	r2,12
    6a08:	98800015 	stw	r2,0(r19)
    6a0c:	0005883a 	mov	r2,zero
    6a10:	003ff006 	br	69d4 <__alt_data_end+0xff0069d4>

00006a14 <_cleanup>:
    6a14:	00800074 	movhi	r2,1
    6a18:	108ca204 	addi	r2,r2,12936
    6a1c:	11000017 	ldw	r4,0(r2)
    6a20:	01400074 	movhi	r5,1
    6a24:	296afa04 	addi	r5,r5,-21528
    6a28:	00074301 	jmpi	7430 <_fwalk_reent>

00006a2c <__sinit>:
    6a2c:	20800e17 	ldw	r2,56(r4)
    6a30:	10000126 	beq	r2,zero,6a38 <__sinit+0xc>
    6a34:	f800283a 	ret
    6a38:	00066f01 	jmpi	66f0 <__sinit.part.1>

00006a3c <__sfp_lock_acquire>:
    6a3c:	f800283a 	ret

00006a40 <__sfp_lock_release>:
    6a40:	f800283a 	ret

00006a44 <__sinit_lock_acquire>:
    6a44:	f800283a 	ret

00006a48 <__sinit_lock_release>:
    6a48:	f800283a 	ret

00006a4c <__fp_lock_all>:
    6a4c:	00800074 	movhi	r2,1
    6a50:	108ca304 	addi	r2,r2,12940
    6a54:	11000017 	ldw	r4,0(r2)
    6a58:	01400034 	movhi	r5,0
    6a5c:	295a2304 	addi	r5,r5,26764
    6a60:	000736c1 	jmpi	736c <_fwalk>

00006a64 <__fp_unlock_all>:
    6a64:	00800074 	movhi	r2,1
    6a68:	108ca304 	addi	r2,r2,12940
    6a6c:	11000017 	ldw	r4,0(r2)
    6a70:	01400034 	movhi	r5,0
    6a74:	2959b704 	addi	r5,r5,26332
    6a78:	000736c1 	jmpi	736c <_fwalk>

00006a7c <_malloc_trim_r>:
    6a7c:	defffb04 	addi	sp,sp,-20
    6a80:	dcc00315 	stw	r19,12(sp)
    6a84:	04c00074 	movhi	r19,1
    6a88:	dc800215 	stw	r18,8(sp)
    6a8c:	dc400115 	stw	r17,4(sp)
    6a90:	dc000015 	stw	r16,0(sp)
    6a94:	dfc00415 	stw	ra,16(sp)
    6a98:	2821883a 	mov	r16,r5
    6a9c:	9cc5f504 	addi	r19,r19,6100
    6aa0:	2025883a 	mov	r18,r4
    6aa4:	000ea380 	call	ea38 <__malloc_lock>
    6aa8:	98800217 	ldw	r2,8(r19)
    6aac:	14400117 	ldw	r17,4(r2)
    6ab0:	00bfff04 	movi	r2,-4
    6ab4:	88a2703a 	and	r17,r17,r2
    6ab8:	8c21c83a 	sub	r16,r17,r16
    6abc:	8403fbc4 	addi	r16,r16,4079
    6ac0:	8020d33a 	srli	r16,r16,12
    6ac4:	0083ffc4 	movi	r2,4095
    6ac8:	843fffc4 	addi	r16,r16,-1
    6acc:	8020933a 	slli	r16,r16,12
    6ad0:	1400060e 	bge	r2,r16,6aec <_malloc_trim_r+0x70>
    6ad4:	000b883a 	mov	r5,zero
    6ad8:	9009883a 	mov	r4,r18
    6adc:	000269c0 	call	269c <_sbrk_r>
    6ae0:	98c00217 	ldw	r3,8(r19)
    6ae4:	1c47883a 	add	r3,r3,r17
    6ae8:	10c00a26 	beq	r2,r3,6b14 <_malloc_trim_r+0x98>
    6aec:	9009883a 	mov	r4,r18
    6af0:	000ea5c0 	call	ea5c <__malloc_unlock>
    6af4:	0005883a 	mov	r2,zero
    6af8:	dfc00417 	ldw	ra,16(sp)
    6afc:	dcc00317 	ldw	r19,12(sp)
    6b00:	dc800217 	ldw	r18,8(sp)
    6b04:	dc400117 	ldw	r17,4(sp)
    6b08:	dc000017 	ldw	r16,0(sp)
    6b0c:	dec00504 	addi	sp,sp,20
    6b10:	f800283a 	ret
    6b14:	040bc83a 	sub	r5,zero,r16
    6b18:	9009883a 	mov	r4,r18
    6b1c:	000269c0 	call	269c <_sbrk_r>
    6b20:	00ffffc4 	movi	r3,-1
    6b24:	10c00d26 	beq	r2,r3,6b5c <_malloc_trim_r+0xe0>
    6b28:	00c00074 	movhi	r3,1
    6b2c:	18d3c504 	addi	r3,r3,20244
    6b30:	18800017 	ldw	r2,0(r3)
    6b34:	99000217 	ldw	r4,8(r19)
    6b38:	8c23c83a 	sub	r17,r17,r16
    6b3c:	8c400054 	ori	r17,r17,1
    6b40:	1421c83a 	sub	r16,r2,r16
    6b44:	24400115 	stw	r17,4(r4)
    6b48:	9009883a 	mov	r4,r18
    6b4c:	1c000015 	stw	r16,0(r3)
    6b50:	000ea5c0 	call	ea5c <__malloc_unlock>
    6b54:	00800044 	movi	r2,1
    6b58:	003fe706 	br	6af8 <__alt_data_end+0xff006af8>
    6b5c:	000b883a 	mov	r5,zero
    6b60:	9009883a 	mov	r4,r18
    6b64:	000269c0 	call	269c <_sbrk_r>
    6b68:	99000217 	ldw	r4,8(r19)
    6b6c:	014003c4 	movi	r5,15
    6b70:	1107c83a 	sub	r3,r2,r4
    6b74:	28ffdd0e 	bge	r5,r3,6aec <__alt_data_end+0xff006aec>
    6b78:	01400074 	movhi	r5,1
    6b7c:	294ca004 	addi	r5,r5,12928
    6b80:	29400017 	ldw	r5,0(r5)
    6b84:	18c00054 	ori	r3,r3,1
    6b88:	20c00115 	stw	r3,4(r4)
    6b8c:	00c00074 	movhi	r3,1
    6b90:	1145c83a 	sub	r2,r2,r5
    6b94:	18d3c504 	addi	r3,r3,20244
    6b98:	18800015 	stw	r2,0(r3)
    6b9c:	003fd306 	br	6aec <__alt_data_end+0xff006aec>

00006ba0 <_free_r>:
    6ba0:	28004126 	beq	r5,zero,6ca8 <_free_r+0x108>
    6ba4:	defffd04 	addi	sp,sp,-12
    6ba8:	dc400115 	stw	r17,4(sp)
    6bac:	dc000015 	stw	r16,0(sp)
    6bb0:	2023883a 	mov	r17,r4
    6bb4:	2821883a 	mov	r16,r5
    6bb8:	dfc00215 	stw	ra,8(sp)
    6bbc:	000ea380 	call	ea38 <__malloc_lock>
    6bc0:	81ffff17 	ldw	r7,-4(r16)
    6bc4:	00bfff84 	movi	r2,-2
    6bc8:	01000074 	movhi	r4,1
    6bcc:	81bffe04 	addi	r6,r16,-8
    6bd0:	3884703a 	and	r2,r7,r2
    6bd4:	2105f504 	addi	r4,r4,6100
    6bd8:	308b883a 	add	r5,r6,r2
    6bdc:	2a400117 	ldw	r9,4(r5)
    6be0:	22000217 	ldw	r8,8(r4)
    6be4:	00ffff04 	movi	r3,-4
    6be8:	48c6703a 	and	r3,r9,r3
    6bec:	2a005726 	beq	r5,r8,6d4c <_free_r+0x1ac>
    6bf0:	28c00115 	stw	r3,4(r5)
    6bf4:	39c0004c 	andi	r7,r7,1
    6bf8:	3800091e 	bne	r7,zero,6c20 <_free_r+0x80>
    6bfc:	823ffe17 	ldw	r8,-8(r16)
    6c00:	22400204 	addi	r9,r4,8
    6c04:	320dc83a 	sub	r6,r6,r8
    6c08:	31c00217 	ldw	r7,8(r6)
    6c0c:	1205883a 	add	r2,r2,r8
    6c10:	3a406526 	beq	r7,r9,6da8 <_free_r+0x208>
    6c14:	32000317 	ldw	r8,12(r6)
    6c18:	3a000315 	stw	r8,12(r7)
    6c1c:	41c00215 	stw	r7,8(r8)
    6c20:	28cf883a 	add	r7,r5,r3
    6c24:	39c00117 	ldw	r7,4(r7)
    6c28:	39c0004c 	andi	r7,r7,1
    6c2c:	38003a26 	beq	r7,zero,6d18 <_free_r+0x178>
    6c30:	10c00054 	ori	r3,r2,1
    6c34:	30c00115 	stw	r3,4(r6)
    6c38:	3087883a 	add	r3,r6,r2
    6c3c:	18800015 	stw	r2,0(r3)
    6c40:	00c07fc4 	movi	r3,511
    6c44:	18801936 	bltu	r3,r2,6cac <_free_r+0x10c>
    6c48:	1004d0fa 	srli	r2,r2,3
    6c4c:	01c00044 	movi	r7,1
    6c50:	21400117 	ldw	r5,4(r4)
    6c54:	10c00044 	addi	r3,r2,1
    6c58:	18c7883a 	add	r3,r3,r3
    6c5c:	1005d0ba 	srai	r2,r2,2
    6c60:	18c7883a 	add	r3,r3,r3
    6c64:	18c7883a 	add	r3,r3,r3
    6c68:	1907883a 	add	r3,r3,r4
    6c6c:	3884983a 	sll	r2,r7,r2
    6c70:	19c00017 	ldw	r7,0(r3)
    6c74:	1a3ffe04 	addi	r8,r3,-8
    6c78:	1144b03a 	or	r2,r2,r5
    6c7c:	32000315 	stw	r8,12(r6)
    6c80:	31c00215 	stw	r7,8(r6)
    6c84:	20800115 	stw	r2,4(r4)
    6c88:	19800015 	stw	r6,0(r3)
    6c8c:	39800315 	stw	r6,12(r7)
    6c90:	8809883a 	mov	r4,r17
    6c94:	dfc00217 	ldw	ra,8(sp)
    6c98:	dc400117 	ldw	r17,4(sp)
    6c9c:	dc000017 	ldw	r16,0(sp)
    6ca0:	dec00304 	addi	sp,sp,12
    6ca4:	000ea5c1 	jmpi	ea5c <__malloc_unlock>
    6ca8:	f800283a 	ret
    6cac:	100ad27a 	srli	r5,r2,9
    6cb0:	00c00104 	movi	r3,4
    6cb4:	19404a36 	bltu	r3,r5,6de0 <_free_r+0x240>
    6cb8:	100ad1ba 	srli	r5,r2,6
    6cbc:	28c00e44 	addi	r3,r5,57
    6cc0:	18c7883a 	add	r3,r3,r3
    6cc4:	29400e04 	addi	r5,r5,56
    6cc8:	18c7883a 	add	r3,r3,r3
    6ccc:	18c7883a 	add	r3,r3,r3
    6cd0:	1909883a 	add	r4,r3,r4
    6cd4:	20c00017 	ldw	r3,0(r4)
    6cd8:	01c00074 	movhi	r7,1
    6cdc:	213ffe04 	addi	r4,r4,-8
    6ce0:	39c5f504 	addi	r7,r7,6100
    6ce4:	20c04426 	beq	r4,r3,6df8 <_free_r+0x258>
    6ce8:	01ffff04 	movi	r7,-4
    6cec:	19400117 	ldw	r5,4(r3)
    6cf0:	29ca703a 	and	r5,r5,r7
    6cf4:	1140022e 	bgeu	r2,r5,6d00 <_free_r+0x160>
    6cf8:	18c00217 	ldw	r3,8(r3)
    6cfc:	20fffb1e 	bne	r4,r3,6cec <__alt_data_end+0xff006cec>
    6d00:	19000317 	ldw	r4,12(r3)
    6d04:	31000315 	stw	r4,12(r6)
    6d08:	30c00215 	stw	r3,8(r6)
    6d0c:	21800215 	stw	r6,8(r4)
    6d10:	19800315 	stw	r6,12(r3)
    6d14:	003fde06 	br	6c90 <__alt_data_end+0xff006c90>
    6d18:	29c00217 	ldw	r7,8(r5)
    6d1c:	10c5883a 	add	r2,r2,r3
    6d20:	00c00074 	movhi	r3,1
    6d24:	18c5f704 	addi	r3,r3,6108
    6d28:	38c03b26 	beq	r7,r3,6e18 <_free_r+0x278>
    6d2c:	2a000317 	ldw	r8,12(r5)
    6d30:	11400054 	ori	r5,r2,1
    6d34:	3087883a 	add	r3,r6,r2
    6d38:	3a000315 	stw	r8,12(r7)
    6d3c:	41c00215 	stw	r7,8(r8)
    6d40:	31400115 	stw	r5,4(r6)
    6d44:	18800015 	stw	r2,0(r3)
    6d48:	003fbd06 	br	6c40 <__alt_data_end+0xff006c40>
    6d4c:	39c0004c 	andi	r7,r7,1
    6d50:	10c5883a 	add	r2,r2,r3
    6d54:	3800071e 	bne	r7,zero,6d74 <_free_r+0x1d4>
    6d58:	81fffe17 	ldw	r7,-8(r16)
    6d5c:	31cdc83a 	sub	r6,r6,r7
    6d60:	30c00317 	ldw	r3,12(r6)
    6d64:	31400217 	ldw	r5,8(r6)
    6d68:	11c5883a 	add	r2,r2,r7
    6d6c:	28c00315 	stw	r3,12(r5)
    6d70:	19400215 	stw	r5,8(r3)
    6d74:	10c00054 	ori	r3,r2,1
    6d78:	30c00115 	stw	r3,4(r6)
    6d7c:	00c00074 	movhi	r3,1
    6d80:	18cca104 	addi	r3,r3,12932
    6d84:	18c00017 	ldw	r3,0(r3)
    6d88:	21800215 	stw	r6,8(r4)
    6d8c:	10ffc036 	bltu	r2,r3,6c90 <__alt_data_end+0xff006c90>
    6d90:	00800074 	movhi	r2,1
    6d94:	1093b704 	addi	r2,r2,20188
    6d98:	11400017 	ldw	r5,0(r2)
    6d9c:	8809883a 	mov	r4,r17
    6da0:	0006a7c0 	call	6a7c <_malloc_trim_r>
    6da4:	003fba06 	br	6c90 <__alt_data_end+0xff006c90>
    6da8:	28c9883a 	add	r4,r5,r3
    6dac:	21000117 	ldw	r4,4(r4)
    6db0:	2100004c 	andi	r4,r4,1
    6db4:	2000391e 	bne	r4,zero,6e9c <_free_r+0x2fc>
    6db8:	29c00217 	ldw	r7,8(r5)
    6dbc:	29000317 	ldw	r4,12(r5)
    6dc0:	1885883a 	add	r2,r3,r2
    6dc4:	10c00054 	ori	r3,r2,1
    6dc8:	39000315 	stw	r4,12(r7)
    6dcc:	21c00215 	stw	r7,8(r4)
    6dd0:	30c00115 	stw	r3,4(r6)
    6dd4:	308d883a 	add	r6,r6,r2
    6dd8:	30800015 	stw	r2,0(r6)
    6ddc:	003fac06 	br	6c90 <__alt_data_end+0xff006c90>
    6de0:	00c00504 	movi	r3,20
    6de4:	19401536 	bltu	r3,r5,6e3c <_free_r+0x29c>
    6de8:	28c01704 	addi	r3,r5,92
    6dec:	18c7883a 	add	r3,r3,r3
    6df0:	294016c4 	addi	r5,r5,91
    6df4:	003fb406 	br	6cc8 <__alt_data_end+0xff006cc8>
    6df8:	280bd0ba 	srai	r5,r5,2
    6dfc:	00c00044 	movi	r3,1
    6e00:	38800117 	ldw	r2,4(r7)
    6e04:	194a983a 	sll	r5,r3,r5
    6e08:	2007883a 	mov	r3,r4
    6e0c:	2884b03a 	or	r2,r5,r2
    6e10:	38800115 	stw	r2,4(r7)
    6e14:	003fbb06 	br	6d04 <__alt_data_end+0xff006d04>
    6e18:	21800515 	stw	r6,20(r4)
    6e1c:	21800415 	stw	r6,16(r4)
    6e20:	10c00054 	ori	r3,r2,1
    6e24:	31c00315 	stw	r7,12(r6)
    6e28:	31c00215 	stw	r7,8(r6)
    6e2c:	30c00115 	stw	r3,4(r6)
    6e30:	308d883a 	add	r6,r6,r2
    6e34:	30800015 	stw	r2,0(r6)
    6e38:	003f9506 	br	6c90 <__alt_data_end+0xff006c90>
    6e3c:	00c01504 	movi	r3,84
    6e40:	19400536 	bltu	r3,r5,6e58 <_free_r+0x2b8>
    6e44:	100ad33a 	srli	r5,r2,12
    6e48:	28c01bc4 	addi	r3,r5,111
    6e4c:	18c7883a 	add	r3,r3,r3
    6e50:	29401b84 	addi	r5,r5,110
    6e54:	003f9c06 	br	6cc8 <__alt_data_end+0xff006cc8>
    6e58:	00c05504 	movi	r3,340
    6e5c:	19400536 	bltu	r3,r5,6e74 <_free_r+0x2d4>
    6e60:	100ad3fa 	srli	r5,r2,15
    6e64:	28c01e04 	addi	r3,r5,120
    6e68:	18c7883a 	add	r3,r3,r3
    6e6c:	29401dc4 	addi	r5,r5,119
    6e70:	003f9506 	br	6cc8 <__alt_data_end+0xff006cc8>
    6e74:	00c15504 	movi	r3,1364
    6e78:	19400536 	bltu	r3,r5,6e90 <_free_r+0x2f0>
    6e7c:	100ad4ba 	srli	r5,r2,18
    6e80:	28c01f44 	addi	r3,r5,125
    6e84:	18c7883a 	add	r3,r3,r3
    6e88:	29401f04 	addi	r5,r5,124
    6e8c:	003f8e06 	br	6cc8 <__alt_data_end+0xff006cc8>
    6e90:	00c03f84 	movi	r3,254
    6e94:	01401f84 	movi	r5,126
    6e98:	003f8b06 	br	6cc8 <__alt_data_end+0xff006cc8>
    6e9c:	10c00054 	ori	r3,r2,1
    6ea0:	30c00115 	stw	r3,4(r6)
    6ea4:	308d883a 	add	r6,r6,r2
    6ea8:	30800015 	stw	r2,0(r6)
    6eac:	003f7806 	br	6c90 <__alt_data_end+0xff006c90>

00006eb0 <__sfvwrite_r>:
    6eb0:	30800217 	ldw	r2,8(r6)
    6eb4:	10006726 	beq	r2,zero,7054 <__sfvwrite_r+0x1a4>
    6eb8:	28c0030b 	ldhu	r3,12(r5)
    6ebc:	defff404 	addi	sp,sp,-48
    6ec0:	dd400715 	stw	r21,28(sp)
    6ec4:	dd000615 	stw	r20,24(sp)
    6ec8:	dc000215 	stw	r16,8(sp)
    6ecc:	dfc00b15 	stw	ra,44(sp)
    6ed0:	df000a15 	stw	fp,40(sp)
    6ed4:	ddc00915 	stw	r23,36(sp)
    6ed8:	dd800815 	stw	r22,32(sp)
    6edc:	dcc00515 	stw	r19,20(sp)
    6ee0:	dc800415 	stw	r18,16(sp)
    6ee4:	dc400315 	stw	r17,12(sp)
    6ee8:	1880020c 	andi	r2,r3,8
    6eec:	2821883a 	mov	r16,r5
    6ef0:	202b883a 	mov	r21,r4
    6ef4:	3029883a 	mov	r20,r6
    6ef8:	10002726 	beq	r2,zero,6f98 <__sfvwrite_r+0xe8>
    6efc:	28800417 	ldw	r2,16(r5)
    6f00:	10002526 	beq	r2,zero,6f98 <__sfvwrite_r+0xe8>
    6f04:	1880008c 	andi	r2,r3,2
    6f08:	a4400017 	ldw	r17,0(r20)
    6f0c:	10002a26 	beq	r2,zero,6fb8 <__sfvwrite_r+0x108>
    6f10:	05a00034 	movhi	r22,32768
    6f14:	0027883a 	mov	r19,zero
    6f18:	0025883a 	mov	r18,zero
    6f1c:	b5bf0004 	addi	r22,r22,-1024
    6f20:	980d883a 	mov	r6,r19
    6f24:	a809883a 	mov	r4,r21
    6f28:	90004626 	beq	r18,zero,7044 <__sfvwrite_r+0x194>
    6f2c:	900f883a 	mov	r7,r18
    6f30:	b480022e 	bgeu	r22,r18,6f3c <__sfvwrite_r+0x8c>
    6f34:	01e00034 	movhi	r7,32768
    6f38:	39ff0004 	addi	r7,r7,-1024
    6f3c:	80800917 	ldw	r2,36(r16)
    6f40:	81400717 	ldw	r5,28(r16)
    6f44:	103ee83a 	callr	r2
    6f48:	0080570e 	bge	zero,r2,70a8 <__sfvwrite_r+0x1f8>
    6f4c:	a0c00217 	ldw	r3,8(r20)
    6f50:	98a7883a 	add	r19,r19,r2
    6f54:	90a5c83a 	sub	r18,r18,r2
    6f58:	1885c83a 	sub	r2,r3,r2
    6f5c:	a0800215 	stw	r2,8(r20)
    6f60:	103fef1e 	bne	r2,zero,6f20 <__alt_data_end+0xff006f20>
    6f64:	0005883a 	mov	r2,zero
    6f68:	dfc00b17 	ldw	ra,44(sp)
    6f6c:	df000a17 	ldw	fp,40(sp)
    6f70:	ddc00917 	ldw	r23,36(sp)
    6f74:	dd800817 	ldw	r22,32(sp)
    6f78:	dd400717 	ldw	r21,28(sp)
    6f7c:	dd000617 	ldw	r20,24(sp)
    6f80:	dcc00517 	ldw	r19,20(sp)
    6f84:	dc800417 	ldw	r18,16(sp)
    6f88:	dc400317 	ldw	r17,12(sp)
    6f8c:	dc000217 	ldw	r16,8(sp)
    6f90:	dec00c04 	addi	sp,sp,48
    6f94:	f800283a 	ret
    6f98:	800b883a 	mov	r5,r16
    6f9c:	a809883a 	mov	r4,r21
    6fa0:	0004a580 	call	4a58 <__swsetup_r>
    6fa4:	1000eb1e 	bne	r2,zero,7354 <__sfvwrite_r+0x4a4>
    6fa8:	80c0030b 	ldhu	r3,12(r16)
    6fac:	a4400017 	ldw	r17,0(r20)
    6fb0:	1880008c 	andi	r2,r3,2
    6fb4:	103fd61e 	bne	r2,zero,6f10 <__alt_data_end+0xff006f10>
    6fb8:	1880004c 	andi	r2,r3,1
    6fbc:	10003f1e 	bne	r2,zero,70bc <__sfvwrite_r+0x20c>
    6fc0:	0039883a 	mov	fp,zero
    6fc4:	0025883a 	mov	r18,zero
    6fc8:	90001a26 	beq	r18,zero,7034 <__sfvwrite_r+0x184>
    6fcc:	1880800c 	andi	r2,r3,512
    6fd0:	84c00217 	ldw	r19,8(r16)
    6fd4:	10002126 	beq	r2,zero,705c <__sfvwrite_r+0x1ac>
    6fd8:	982f883a 	mov	r23,r19
    6fdc:	94c09336 	bltu	r18,r19,722c <__sfvwrite_r+0x37c>
    6fe0:	1881200c 	andi	r2,r3,1152
    6fe4:	10009e1e 	bne	r2,zero,7260 <__sfvwrite_r+0x3b0>
    6fe8:	81000017 	ldw	r4,0(r16)
    6fec:	b80d883a 	mov	r6,r23
    6ff0:	e00b883a 	mov	r5,fp
    6ff4:	00079b80 	call	79b8 <memmove>
    6ff8:	80c00217 	ldw	r3,8(r16)
    6ffc:	81000017 	ldw	r4,0(r16)
    7000:	9005883a 	mov	r2,r18
    7004:	1ce7c83a 	sub	r19,r3,r19
    7008:	25cf883a 	add	r7,r4,r23
    700c:	84c00215 	stw	r19,8(r16)
    7010:	81c00015 	stw	r7,0(r16)
    7014:	a0c00217 	ldw	r3,8(r20)
    7018:	e0b9883a 	add	fp,fp,r2
    701c:	90a5c83a 	sub	r18,r18,r2
    7020:	18a7c83a 	sub	r19,r3,r2
    7024:	a4c00215 	stw	r19,8(r20)
    7028:	983fce26 	beq	r19,zero,6f64 <__alt_data_end+0xff006f64>
    702c:	80c0030b 	ldhu	r3,12(r16)
    7030:	903fe61e 	bne	r18,zero,6fcc <__alt_data_end+0xff006fcc>
    7034:	8f000017 	ldw	fp,0(r17)
    7038:	8c800117 	ldw	r18,4(r17)
    703c:	8c400204 	addi	r17,r17,8
    7040:	003fe106 	br	6fc8 <__alt_data_end+0xff006fc8>
    7044:	8cc00017 	ldw	r19,0(r17)
    7048:	8c800117 	ldw	r18,4(r17)
    704c:	8c400204 	addi	r17,r17,8
    7050:	003fb306 	br	6f20 <__alt_data_end+0xff006f20>
    7054:	0005883a 	mov	r2,zero
    7058:	f800283a 	ret
    705c:	81000017 	ldw	r4,0(r16)
    7060:	80800417 	ldw	r2,16(r16)
    7064:	11005736 	bltu	r2,r4,71c4 <__sfvwrite_r+0x314>
    7068:	85c00517 	ldw	r23,20(r16)
    706c:	95c05536 	bltu	r18,r23,71c4 <__sfvwrite_r+0x314>
    7070:	00a00034 	movhi	r2,32768
    7074:	10bfffc4 	addi	r2,r2,-1
    7078:	9009883a 	mov	r4,r18
    707c:	1480012e 	bgeu	r2,r18,7084 <__sfvwrite_r+0x1d4>
    7080:	1009883a 	mov	r4,r2
    7084:	b80b883a 	mov	r5,r23
    7088:	0001b740 	call	1b74 <__divsi3>
    708c:	15cf383a 	mul	r7,r2,r23
    7090:	81400717 	ldw	r5,28(r16)
    7094:	80800917 	ldw	r2,36(r16)
    7098:	e00d883a 	mov	r6,fp
    709c:	a809883a 	mov	r4,r21
    70a0:	103ee83a 	callr	r2
    70a4:	00bfdb16 	blt	zero,r2,7014 <__alt_data_end+0xff007014>
    70a8:	8080030b 	ldhu	r2,12(r16)
    70ac:	10801014 	ori	r2,r2,64
    70b0:	8080030d 	sth	r2,12(r16)
    70b4:	00bfffc4 	movi	r2,-1
    70b8:	003fab06 	br	6f68 <__alt_data_end+0xff006f68>
    70bc:	0027883a 	mov	r19,zero
    70c0:	0011883a 	mov	r8,zero
    70c4:	0039883a 	mov	fp,zero
    70c8:	0025883a 	mov	r18,zero
    70cc:	90001f26 	beq	r18,zero,714c <__sfvwrite_r+0x29c>
    70d0:	40005a26 	beq	r8,zero,723c <__sfvwrite_r+0x38c>
    70d4:	982d883a 	mov	r22,r19
    70d8:	94c0012e 	bgeu	r18,r19,70e0 <__sfvwrite_r+0x230>
    70dc:	902d883a 	mov	r22,r18
    70e0:	81000017 	ldw	r4,0(r16)
    70e4:	80800417 	ldw	r2,16(r16)
    70e8:	b02f883a 	mov	r23,r22
    70ec:	81c00517 	ldw	r7,20(r16)
    70f0:	1100032e 	bgeu	r2,r4,7100 <__sfvwrite_r+0x250>
    70f4:	80c00217 	ldw	r3,8(r16)
    70f8:	38c7883a 	add	r3,r7,r3
    70fc:	1d801816 	blt	r3,r22,7160 <__sfvwrite_r+0x2b0>
    7100:	b1c03e16 	blt	r22,r7,71fc <__sfvwrite_r+0x34c>
    7104:	80800917 	ldw	r2,36(r16)
    7108:	81400717 	ldw	r5,28(r16)
    710c:	e00d883a 	mov	r6,fp
    7110:	da000115 	stw	r8,4(sp)
    7114:	a809883a 	mov	r4,r21
    7118:	103ee83a 	callr	r2
    711c:	102f883a 	mov	r23,r2
    7120:	da000117 	ldw	r8,4(sp)
    7124:	00bfe00e 	bge	zero,r2,70a8 <__alt_data_end+0xff0070a8>
    7128:	9de7c83a 	sub	r19,r19,r23
    712c:	98001f26 	beq	r19,zero,71ac <__sfvwrite_r+0x2fc>
    7130:	a0800217 	ldw	r2,8(r20)
    7134:	e5f9883a 	add	fp,fp,r23
    7138:	95e5c83a 	sub	r18,r18,r23
    713c:	15efc83a 	sub	r23,r2,r23
    7140:	a5c00215 	stw	r23,8(r20)
    7144:	b83f8726 	beq	r23,zero,6f64 <__alt_data_end+0xff006f64>
    7148:	903fe11e 	bne	r18,zero,70d0 <__alt_data_end+0xff0070d0>
    714c:	8f000017 	ldw	fp,0(r17)
    7150:	8c800117 	ldw	r18,4(r17)
    7154:	0011883a 	mov	r8,zero
    7158:	8c400204 	addi	r17,r17,8
    715c:	003fdb06 	br	70cc <__alt_data_end+0xff0070cc>
    7160:	180d883a 	mov	r6,r3
    7164:	e00b883a 	mov	r5,fp
    7168:	da000115 	stw	r8,4(sp)
    716c:	d8c00015 	stw	r3,0(sp)
    7170:	00079b80 	call	79b8 <memmove>
    7174:	d8c00017 	ldw	r3,0(sp)
    7178:	80800017 	ldw	r2,0(r16)
    717c:	800b883a 	mov	r5,r16
    7180:	a809883a 	mov	r4,r21
    7184:	10c5883a 	add	r2,r2,r3
    7188:	80800015 	stw	r2,0(r16)
    718c:	d8c00015 	stw	r3,0(sp)
    7190:	00066500 	call	6650 <_fflush_r>
    7194:	d8c00017 	ldw	r3,0(sp)
    7198:	da000117 	ldw	r8,4(sp)
    719c:	103fc21e 	bne	r2,zero,70a8 <__alt_data_end+0xff0070a8>
    71a0:	182f883a 	mov	r23,r3
    71a4:	9de7c83a 	sub	r19,r19,r23
    71a8:	983fe11e 	bne	r19,zero,7130 <__alt_data_end+0xff007130>
    71ac:	800b883a 	mov	r5,r16
    71b0:	a809883a 	mov	r4,r21
    71b4:	00066500 	call	6650 <_fflush_r>
    71b8:	103fbb1e 	bne	r2,zero,70a8 <__alt_data_end+0xff0070a8>
    71bc:	0011883a 	mov	r8,zero
    71c0:	003fdb06 	br	7130 <__alt_data_end+0xff007130>
    71c4:	94c0012e 	bgeu	r18,r19,71cc <__sfvwrite_r+0x31c>
    71c8:	9027883a 	mov	r19,r18
    71cc:	980d883a 	mov	r6,r19
    71d0:	e00b883a 	mov	r5,fp
    71d4:	00079b80 	call	79b8 <memmove>
    71d8:	80800217 	ldw	r2,8(r16)
    71dc:	80c00017 	ldw	r3,0(r16)
    71e0:	14c5c83a 	sub	r2,r2,r19
    71e4:	1cc7883a 	add	r3,r3,r19
    71e8:	80800215 	stw	r2,8(r16)
    71ec:	80c00015 	stw	r3,0(r16)
    71f0:	10004326 	beq	r2,zero,7300 <__sfvwrite_r+0x450>
    71f4:	9805883a 	mov	r2,r19
    71f8:	003f8606 	br	7014 <__alt_data_end+0xff007014>
    71fc:	b00d883a 	mov	r6,r22
    7200:	e00b883a 	mov	r5,fp
    7204:	da000115 	stw	r8,4(sp)
    7208:	00079b80 	call	79b8 <memmove>
    720c:	80800217 	ldw	r2,8(r16)
    7210:	80c00017 	ldw	r3,0(r16)
    7214:	da000117 	ldw	r8,4(sp)
    7218:	1585c83a 	sub	r2,r2,r22
    721c:	1dad883a 	add	r22,r3,r22
    7220:	80800215 	stw	r2,8(r16)
    7224:	85800015 	stw	r22,0(r16)
    7228:	003fbf06 	br	7128 <__alt_data_end+0xff007128>
    722c:	81000017 	ldw	r4,0(r16)
    7230:	9027883a 	mov	r19,r18
    7234:	902f883a 	mov	r23,r18
    7238:	003f6c06 	br	6fec <__alt_data_end+0xff006fec>
    723c:	900d883a 	mov	r6,r18
    7240:	01400284 	movi	r5,10
    7244:	e009883a 	mov	r4,fp
    7248:	000778c0 	call	778c <memchr>
    724c:	10003e26 	beq	r2,zero,7348 <__sfvwrite_r+0x498>
    7250:	10800044 	addi	r2,r2,1
    7254:	1727c83a 	sub	r19,r2,fp
    7258:	02000044 	movi	r8,1
    725c:	003f9d06 	br	70d4 <__alt_data_end+0xff0070d4>
    7260:	80800517 	ldw	r2,20(r16)
    7264:	81400417 	ldw	r5,16(r16)
    7268:	81c00017 	ldw	r7,0(r16)
    726c:	10a7883a 	add	r19,r2,r2
    7270:	9885883a 	add	r2,r19,r2
    7274:	1026d7fa 	srli	r19,r2,31
    7278:	396dc83a 	sub	r22,r7,r5
    727c:	b1000044 	addi	r4,r22,1
    7280:	9885883a 	add	r2,r19,r2
    7284:	1027d07a 	srai	r19,r2,1
    7288:	2485883a 	add	r2,r4,r18
    728c:	980d883a 	mov	r6,r19
    7290:	9880022e 	bgeu	r19,r2,729c <__sfvwrite_r+0x3ec>
    7294:	1027883a 	mov	r19,r2
    7298:	100d883a 	mov	r6,r2
    729c:	18c1000c 	andi	r3,r3,1024
    72a0:	18001c26 	beq	r3,zero,7314 <__sfvwrite_r+0x464>
    72a4:	300b883a 	mov	r5,r6
    72a8:	a809883a 	mov	r4,r21
    72ac:	0001d500 	call	1d50 <_malloc_r>
    72b0:	102f883a 	mov	r23,r2
    72b4:	10002926 	beq	r2,zero,735c <__sfvwrite_r+0x4ac>
    72b8:	81400417 	ldw	r5,16(r16)
    72bc:	b00d883a 	mov	r6,r22
    72c0:	1009883a 	mov	r4,r2
    72c4:	00078700 	call	7870 <memcpy>
    72c8:	8080030b 	ldhu	r2,12(r16)
    72cc:	00fedfc4 	movi	r3,-1153
    72d0:	10c4703a 	and	r2,r2,r3
    72d4:	10802014 	ori	r2,r2,128
    72d8:	8080030d 	sth	r2,12(r16)
    72dc:	bd89883a 	add	r4,r23,r22
    72e0:	9d8fc83a 	sub	r7,r19,r22
    72e4:	85c00415 	stw	r23,16(r16)
    72e8:	84c00515 	stw	r19,20(r16)
    72ec:	81000015 	stw	r4,0(r16)
    72f0:	9027883a 	mov	r19,r18
    72f4:	81c00215 	stw	r7,8(r16)
    72f8:	902f883a 	mov	r23,r18
    72fc:	003f3b06 	br	6fec <__alt_data_end+0xff006fec>
    7300:	800b883a 	mov	r5,r16
    7304:	a809883a 	mov	r4,r21
    7308:	00066500 	call	6650 <_fflush_r>
    730c:	103fb926 	beq	r2,zero,71f4 <__alt_data_end+0xff0071f4>
    7310:	003f6506 	br	70a8 <__alt_data_end+0xff0070a8>
    7314:	a809883a 	mov	r4,r21
    7318:	0008c380 	call	8c38 <_realloc_r>
    731c:	102f883a 	mov	r23,r2
    7320:	103fee1e 	bne	r2,zero,72dc <__alt_data_end+0xff0072dc>
    7324:	81400417 	ldw	r5,16(r16)
    7328:	a809883a 	mov	r4,r21
    732c:	0006ba00 	call	6ba0 <_free_r>
    7330:	8080030b 	ldhu	r2,12(r16)
    7334:	00ffdfc4 	movi	r3,-129
    7338:	1884703a 	and	r2,r3,r2
    733c:	00c00304 	movi	r3,12
    7340:	a8c00015 	stw	r3,0(r21)
    7344:	003f5906 	br	70ac <__alt_data_end+0xff0070ac>
    7348:	94c00044 	addi	r19,r18,1
    734c:	02000044 	movi	r8,1
    7350:	003f6006 	br	70d4 <__alt_data_end+0xff0070d4>
    7354:	00bfffc4 	movi	r2,-1
    7358:	003f0306 	br	6f68 <__alt_data_end+0xff006f68>
    735c:	00800304 	movi	r2,12
    7360:	a8800015 	stw	r2,0(r21)
    7364:	8080030b 	ldhu	r2,12(r16)
    7368:	003f5006 	br	70ac <__alt_data_end+0xff0070ac>

0000736c <_fwalk>:
    736c:	defff704 	addi	sp,sp,-36
    7370:	dd000415 	stw	r20,16(sp)
    7374:	dfc00815 	stw	ra,32(sp)
    7378:	ddc00715 	stw	r23,28(sp)
    737c:	dd800615 	stw	r22,24(sp)
    7380:	dd400515 	stw	r21,20(sp)
    7384:	dcc00315 	stw	r19,12(sp)
    7388:	dc800215 	stw	r18,8(sp)
    738c:	dc400115 	stw	r17,4(sp)
    7390:	dc000015 	stw	r16,0(sp)
    7394:	2500b804 	addi	r20,r4,736
    7398:	a0002326 	beq	r20,zero,7428 <_fwalk+0xbc>
    739c:	282b883a 	mov	r21,r5
    73a0:	002f883a 	mov	r23,zero
    73a4:	05800044 	movi	r22,1
    73a8:	04ffffc4 	movi	r19,-1
    73ac:	a4400117 	ldw	r17,4(r20)
    73b0:	a4800217 	ldw	r18,8(r20)
    73b4:	8c7fffc4 	addi	r17,r17,-1
    73b8:	88000d16 	blt	r17,zero,73f0 <_fwalk+0x84>
    73bc:	94000304 	addi	r16,r18,12
    73c0:	94800384 	addi	r18,r18,14
    73c4:	8080000b 	ldhu	r2,0(r16)
    73c8:	8c7fffc4 	addi	r17,r17,-1
    73cc:	813ffd04 	addi	r4,r16,-12
    73d0:	b080042e 	bgeu	r22,r2,73e4 <_fwalk+0x78>
    73d4:	9080000f 	ldh	r2,0(r18)
    73d8:	14c00226 	beq	r2,r19,73e4 <_fwalk+0x78>
    73dc:	a83ee83a 	callr	r21
    73e0:	b8aeb03a 	or	r23,r23,r2
    73e4:	84001a04 	addi	r16,r16,104
    73e8:	94801a04 	addi	r18,r18,104
    73ec:	8cfff51e 	bne	r17,r19,73c4 <__alt_data_end+0xff0073c4>
    73f0:	a5000017 	ldw	r20,0(r20)
    73f4:	a03fed1e 	bne	r20,zero,73ac <__alt_data_end+0xff0073ac>
    73f8:	b805883a 	mov	r2,r23
    73fc:	dfc00817 	ldw	ra,32(sp)
    7400:	ddc00717 	ldw	r23,28(sp)
    7404:	dd800617 	ldw	r22,24(sp)
    7408:	dd400517 	ldw	r21,20(sp)
    740c:	dd000417 	ldw	r20,16(sp)
    7410:	dcc00317 	ldw	r19,12(sp)
    7414:	dc800217 	ldw	r18,8(sp)
    7418:	dc400117 	ldw	r17,4(sp)
    741c:	dc000017 	ldw	r16,0(sp)
    7420:	dec00904 	addi	sp,sp,36
    7424:	f800283a 	ret
    7428:	002f883a 	mov	r23,zero
    742c:	003ff206 	br	73f8 <__alt_data_end+0xff0073f8>

00007430 <_fwalk_reent>:
    7430:	defff704 	addi	sp,sp,-36
    7434:	dd000415 	stw	r20,16(sp)
    7438:	dfc00815 	stw	ra,32(sp)
    743c:	ddc00715 	stw	r23,28(sp)
    7440:	dd800615 	stw	r22,24(sp)
    7444:	dd400515 	stw	r21,20(sp)
    7448:	dcc00315 	stw	r19,12(sp)
    744c:	dc800215 	stw	r18,8(sp)
    7450:	dc400115 	stw	r17,4(sp)
    7454:	dc000015 	stw	r16,0(sp)
    7458:	2500b804 	addi	r20,r4,736
    745c:	a0002326 	beq	r20,zero,74ec <_fwalk_reent+0xbc>
    7460:	282b883a 	mov	r21,r5
    7464:	2027883a 	mov	r19,r4
    7468:	002f883a 	mov	r23,zero
    746c:	05800044 	movi	r22,1
    7470:	04bfffc4 	movi	r18,-1
    7474:	a4400117 	ldw	r17,4(r20)
    7478:	a4000217 	ldw	r16,8(r20)
    747c:	8c7fffc4 	addi	r17,r17,-1
    7480:	88000c16 	blt	r17,zero,74b4 <_fwalk_reent+0x84>
    7484:	84000304 	addi	r16,r16,12
    7488:	8080000b 	ldhu	r2,0(r16)
    748c:	8c7fffc4 	addi	r17,r17,-1
    7490:	817ffd04 	addi	r5,r16,-12
    7494:	b080052e 	bgeu	r22,r2,74ac <_fwalk_reent+0x7c>
    7498:	8080008f 	ldh	r2,2(r16)
    749c:	9809883a 	mov	r4,r19
    74a0:	14800226 	beq	r2,r18,74ac <_fwalk_reent+0x7c>
    74a4:	a83ee83a 	callr	r21
    74a8:	b8aeb03a 	or	r23,r23,r2
    74ac:	84001a04 	addi	r16,r16,104
    74b0:	8cbff51e 	bne	r17,r18,7488 <__alt_data_end+0xff007488>
    74b4:	a5000017 	ldw	r20,0(r20)
    74b8:	a03fee1e 	bne	r20,zero,7474 <__alt_data_end+0xff007474>
    74bc:	b805883a 	mov	r2,r23
    74c0:	dfc00817 	ldw	ra,32(sp)
    74c4:	ddc00717 	ldw	r23,28(sp)
    74c8:	dd800617 	ldw	r22,24(sp)
    74cc:	dd400517 	ldw	r21,20(sp)
    74d0:	dd000417 	ldw	r20,16(sp)
    74d4:	dcc00317 	ldw	r19,12(sp)
    74d8:	dc800217 	ldw	r18,8(sp)
    74dc:	dc400117 	ldw	r17,4(sp)
    74e0:	dc000017 	ldw	r16,0(sp)
    74e4:	dec00904 	addi	sp,sp,36
    74e8:	f800283a 	ret
    74ec:	002f883a 	mov	r23,zero
    74f0:	003ff206 	br	74bc <__alt_data_end+0xff0074bc>

000074f4 <_setlocale_r>:
    74f4:	30001b26 	beq	r6,zero,7564 <_setlocale_r+0x70>
    74f8:	01400074 	movhi	r5,1
    74fc:	defffe04 	addi	sp,sp,-8
    7500:	29451604 	addi	r5,r5,5208
    7504:	3009883a 	mov	r4,r6
    7508:	dc000015 	stw	r16,0(sp)
    750c:	dfc00115 	stw	ra,4(sp)
    7510:	3021883a 	mov	r16,r6
    7514:	000934c0 	call	934c <strcmp>
    7518:	1000061e 	bne	r2,zero,7534 <_setlocale_r+0x40>
    751c:	00800074 	movhi	r2,1
    7520:	10851504 	addi	r2,r2,5204
    7524:	dfc00117 	ldw	ra,4(sp)
    7528:	dc000017 	ldw	r16,0(sp)
    752c:	dec00204 	addi	sp,sp,8
    7530:	f800283a 	ret
    7534:	01400074 	movhi	r5,1
    7538:	29451504 	addi	r5,r5,5204
    753c:	8009883a 	mov	r4,r16
    7540:	000934c0 	call	934c <strcmp>
    7544:	103ff526 	beq	r2,zero,751c <__alt_data_end+0xff00751c>
    7548:	01400074 	movhi	r5,1
    754c:	2944d504 	addi	r5,r5,4948
    7550:	8009883a 	mov	r4,r16
    7554:	000934c0 	call	934c <strcmp>
    7558:	103ff026 	beq	r2,zero,751c <__alt_data_end+0xff00751c>
    755c:	0005883a 	mov	r2,zero
    7560:	003ff006 	br	7524 <__alt_data_end+0xff007524>
    7564:	00800074 	movhi	r2,1
    7568:	10851504 	addi	r2,r2,5204
    756c:	f800283a 	ret

00007570 <__locale_charset>:
    7570:	00800074 	movhi	r2,1
    7574:	10880804 	addi	r2,r2,8224
    7578:	f800283a 	ret

0000757c <__locale_mb_cur_max>:
    757c:	00800074 	movhi	r2,1
    7580:	108ca404 	addi	r2,r2,12944
    7584:	10800017 	ldw	r2,0(r2)
    7588:	f800283a 	ret

0000758c <__locale_msgcharset>:
    758c:	00800074 	movhi	r2,1
    7590:	10880004 	addi	r2,r2,8192
    7594:	f800283a 	ret

00007598 <__locale_cjk_lang>:
    7598:	0005883a 	mov	r2,zero
    759c:	f800283a 	ret

000075a0 <_localeconv_r>:
    75a0:	00800074 	movhi	r2,1
    75a4:	10881004 	addi	r2,r2,8256
    75a8:	f800283a 	ret

000075ac <setlocale>:
    75ac:	00800074 	movhi	r2,1
    75b0:	108ca304 	addi	r2,r2,12940
    75b4:	280d883a 	mov	r6,r5
    75b8:	200b883a 	mov	r5,r4
    75bc:	11000017 	ldw	r4,0(r2)
    75c0:	00074f41 	jmpi	74f4 <_setlocale_r>

000075c4 <localeconv>:
    75c4:	00800074 	movhi	r2,1
    75c8:	10881004 	addi	r2,r2,8256
    75cc:	f800283a 	ret

000075d0 <__smakebuf_r>:
    75d0:	2880030b 	ldhu	r2,12(r5)
    75d4:	10c0008c 	andi	r3,r2,2
    75d8:	1800411e 	bne	r3,zero,76e0 <__smakebuf_r+0x110>
    75dc:	deffec04 	addi	sp,sp,-80
    75e0:	dc000f15 	stw	r16,60(sp)
    75e4:	2821883a 	mov	r16,r5
    75e8:	2940038f 	ldh	r5,14(r5)
    75ec:	dc401015 	stw	r17,64(sp)
    75f0:	dfc01315 	stw	ra,76(sp)
    75f4:	dcc01215 	stw	r19,72(sp)
    75f8:	dc801115 	stw	r18,68(sp)
    75fc:	2023883a 	mov	r17,r4
    7600:	28001c16 	blt	r5,zero,7674 <__smakebuf_r+0xa4>
    7604:	d80d883a 	mov	r6,sp
    7608:	000aef40 	call	aef4 <_fstat_r>
    760c:	10001816 	blt	r2,zero,7670 <__smakebuf_r+0xa0>
    7610:	d8800117 	ldw	r2,4(sp)
    7614:	00e00014 	movui	r3,32768
    7618:	10bc000c 	andi	r2,r2,61440
    761c:	14c80020 	cmpeqi	r19,r2,8192
    7620:	10c03726 	beq	r2,r3,7700 <__smakebuf_r+0x130>
    7624:	80c0030b 	ldhu	r3,12(r16)
    7628:	18c20014 	ori	r3,r3,2048
    762c:	80c0030d 	sth	r3,12(r16)
    7630:	00c80004 	movi	r3,8192
    7634:	10c0521e 	bne	r2,r3,7780 <__smakebuf_r+0x1b0>
    7638:	8140038f 	ldh	r5,14(r16)
    763c:	8809883a 	mov	r4,r17
    7640:	000af500 	call	af50 <_isatty_r>
    7644:	10004c26 	beq	r2,zero,7778 <__smakebuf_r+0x1a8>
    7648:	8080030b 	ldhu	r2,12(r16)
    764c:	80c010c4 	addi	r3,r16,67
    7650:	80c00015 	stw	r3,0(r16)
    7654:	10800054 	ori	r2,r2,1
    7658:	8080030d 	sth	r2,12(r16)
    765c:	00800044 	movi	r2,1
    7660:	80c00415 	stw	r3,16(r16)
    7664:	80800515 	stw	r2,20(r16)
    7668:	04810004 	movi	r18,1024
    766c:	00000706 	br	768c <__smakebuf_r+0xbc>
    7670:	8080030b 	ldhu	r2,12(r16)
    7674:	10c0200c 	andi	r3,r2,128
    7678:	18001f1e 	bne	r3,zero,76f8 <__smakebuf_r+0x128>
    767c:	04810004 	movi	r18,1024
    7680:	10820014 	ori	r2,r2,2048
    7684:	8080030d 	sth	r2,12(r16)
    7688:	0027883a 	mov	r19,zero
    768c:	900b883a 	mov	r5,r18
    7690:	8809883a 	mov	r4,r17
    7694:	0001d500 	call	1d50 <_malloc_r>
    7698:	10002c26 	beq	r2,zero,774c <__smakebuf_r+0x17c>
    769c:	80c0030b 	ldhu	r3,12(r16)
    76a0:	01000034 	movhi	r4,0
    76a4:	2119b904 	addi	r4,r4,26340
    76a8:	89000f15 	stw	r4,60(r17)
    76ac:	18c02014 	ori	r3,r3,128
    76b0:	80c0030d 	sth	r3,12(r16)
    76b4:	80800015 	stw	r2,0(r16)
    76b8:	80800415 	stw	r2,16(r16)
    76bc:	84800515 	stw	r18,20(r16)
    76c0:	98001a1e 	bne	r19,zero,772c <__smakebuf_r+0x15c>
    76c4:	dfc01317 	ldw	ra,76(sp)
    76c8:	dcc01217 	ldw	r19,72(sp)
    76cc:	dc801117 	ldw	r18,68(sp)
    76d0:	dc401017 	ldw	r17,64(sp)
    76d4:	dc000f17 	ldw	r16,60(sp)
    76d8:	dec01404 	addi	sp,sp,80
    76dc:	f800283a 	ret
    76e0:	288010c4 	addi	r2,r5,67
    76e4:	28800015 	stw	r2,0(r5)
    76e8:	28800415 	stw	r2,16(r5)
    76ec:	00800044 	movi	r2,1
    76f0:	28800515 	stw	r2,20(r5)
    76f4:	f800283a 	ret
    76f8:	04801004 	movi	r18,64
    76fc:	003fe006 	br	7680 <__alt_data_end+0xff007680>
    7700:	81000a17 	ldw	r4,40(r16)
    7704:	00c00074 	movhi	r3,1
    7708:	18e4ba04 	addi	r3,r3,-27928
    770c:	20ffc51e 	bne	r4,r3,7624 <__alt_data_end+0xff007624>
    7710:	8080030b 	ldhu	r2,12(r16)
    7714:	04810004 	movi	r18,1024
    7718:	84801315 	stw	r18,76(r16)
    771c:	1484b03a 	or	r2,r2,r18
    7720:	8080030d 	sth	r2,12(r16)
    7724:	0027883a 	mov	r19,zero
    7728:	003fd806 	br	768c <__alt_data_end+0xff00768c>
    772c:	8140038f 	ldh	r5,14(r16)
    7730:	8809883a 	mov	r4,r17
    7734:	000af500 	call	af50 <_isatty_r>
    7738:	103fe226 	beq	r2,zero,76c4 <__alt_data_end+0xff0076c4>
    773c:	8080030b 	ldhu	r2,12(r16)
    7740:	10800054 	ori	r2,r2,1
    7744:	8080030d 	sth	r2,12(r16)
    7748:	003fde06 	br	76c4 <__alt_data_end+0xff0076c4>
    774c:	8080030b 	ldhu	r2,12(r16)
    7750:	10c0800c 	andi	r3,r2,512
    7754:	183fdb1e 	bne	r3,zero,76c4 <__alt_data_end+0xff0076c4>
    7758:	10800094 	ori	r2,r2,2
    775c:	80c010c4 	addi	r3,r16,67
    7760:	8080030d 	sth	r2,12(r16)
    7764:	00800044 	movi	r2,1
    7768:	80c00015 	stw	r3,0(r16)
    776c:	80c00415 	stw	r3,16(r16)
    7770:	80800515 	stw	r2,20(r16)
    7774:	003fd306 	br	76c4 <__alt_data_end+0xff0076c4>
    7778:	04810004 	movi	r18,1024
    777c:	003fc306 	br	768c <__alt_data_end+0xff00768c>
    7780:	0027883a 	mov	r19,zero
    7784:	04810004 	movi	r18,1024
    7788:	003fc006 	br	768c <__alt_data_end+0xff00768c>

0000778c <memchr>:
    778c:	208000cc 	andi	r2,r4,3
    7790:	280f883a 	mov	r7,r5
    7794:	10003426 	beq	r2,zero,7868 <memchr+0xdc>
    7798:	30bfffc4 	addi	r2,r6,-1
    779c:	30001a26 	beq	r6,zero,7808 <memchr+0x7c>
    77a0:	20c00003 	ldbu	r3,0(r4)
    77a4:	29803fcc 	andi	r6,r5,255
    77a8:	30c0051e 	bne	r6,r3,77c0 <memchr+0x34>
    77ac:	00001806 	br	7810 <memchr+0x84>
    77b0:	10001526 	beq	r2,zero,7808 <memchr+0x7c>
    77b4:	20c00003 	ldbu	r3,0(r4)
    77b8:	10bfffc4 	addi	r2,r2,-1
    77bc:	30c01426 	beq	r6,r3,7810 <memchr+0x84>
    77c0:	21000044 	addi	r4,r4,1
    77c4:	20c000cc 	andi	r3,r4,3
    77c8:	183ff91e 	bne	r3,zero,77b0 <__alt_data_end+0xff0077b0>
    77cc:	020000c4 	movi	r8,3
    77d0:	40801136 	bltu	r8,r2,7818 <memchr+0x8c>
    77d4:	10000c26 	beq	r2,zero,7808 <memchr+0x7c>
    77d8:	20c00003 	ldbu	r3,0(r4)
    77dc:	29403fcc 	andi	r5,r5,255
    77e0:	28c00b26 	beq	r5,r3,7810 <memchr+0x84>
    77e4:	20c00044 	addi	r3,r4,1
    77e8:	39803fcc 	andi	r6,r7,255
    77ec:	2089883a 	add	r4,r4,r2
    77f0:	00000306 	br	7800 <memchr+0x74>
    77f4:	18c00044 	addi	r3,r3,1
    77f8:	197fffc3 	ldbu	r5,-1(r3)
    77fc:	31400526 	beq	r6,r5,7814 <memchr+0x88>
    7800:	1805883a 	mov	r2,r3
    7804:	20fffb1e 	bne	r4,r3,77f4 <__alt_data_end+0xff0077f4>
    7808:	0005883a 	mov	r2,zero
    780c:	f800283a 	ret
    7810:	2005883a 	mov	r2,r4
    7814:	f800283a 	ret
    7818:	28c03fcc 	andi	r3,r5,255
    781c:	1812923a 	slli	r9,r3,8
    7820:	02ffbff4 	movhi	r11,65279
    7824:	02a02074 	movhi	r10,32897
    7828:	48d2b03a 	or	r9,r9,r3
    782c:	4806943a 	slli	r3,r9,16
    7830:	5affbfc4 	addi	r11,r11,-257
    7834:	52a02004 	addi	r10,r10,-32640
    7838:	48d2b03a 	or	r9,r9,r3
    783c:	20c00017 	ldw	r3,0(r4)
    7840:	48c6f03a 	xor	r3,r9,r3
    7844:	1acd883a 	add	r6,r3,r11
    7848:	00c6303a 	nor	r3,zero,r3
    784c:	30c6703a 	and	r3,r6,r3
    7850:	1a86703a 	and	r3,r3,r10
    7854:	183fe01e 	bne	r3,zero,77d8 <__alt_data_end+0xff0077d8>
    7858:	10bfff04 	addi	r2,r2,-4
    785c:	21000104 	addi	r4,r4,4
    7860:	40bff636 	bltu	r8,r2,783c <__alt_data_end+0xff00783c>
    7864:	003fdb06 	br	77d4 <__alt_data_end+0xff0077d4>
    7868:	3005883a 	mov	r2,r6
    786c:	003fd706 	br	77cc <__alt_data_end+0xff0077cc>

00007870 <memcpy>:
    7870:	defffd04 	addi	sp,sp,-12
    7874:	dfc00215 	stw	ra,8(sp)
    7878:	dc400115 	stw	r17,4(sp)
    787c:	dc000015 	stw	r16,0(sp)
    7880:	00c003c4 	movi	r3,15
    7884:	2005883a 	mov	r2,r4
    7888:	1980452e 	bgeu	r3,r6,79a0 <memcpy+0x130>
    788c:	2906b03a 	or	r3,r5,r4
    7890:	18c000cc 	andi	r3,r3,3
    7894:	1800441e 	bne	r3,zero,79a8 <memcpy+0x138>
    7898:	347ffc04 	addi	r17,r6,-16
    789c:	8822d13a 	srli	r17,r17,4
    78a0:	28c00104 	addi	r3,r5,4
    78a4:	23400104 	addi	r13,r4,4
    78a8:	8820913a 	slli	r16,r17,4
    78ac:	2b000204 	addi	r12,r5,8
    78b0:	22c00204 	addi	r11,r4,8
    78b4:	84000504 	addi	r16,r16,20
    78b8:	2a800304 	addi	r10,r5,12
    78bc:	22400304 	addi	r9,r4,12
    78c0:	2c21883a 	add	r16,r5,r16
    78c4:	2811883a 	mov	r8,r5
    78c8:	200f883a 	mov	r7,r4
    78cc:	41000017 	ldw	r4,0(r8)
    78d0:	1fc00017 	ldw	ra,0(r3)
    78d4:	63c00017 	ldw	r15,0(r12)
    78d8:	39000015 	stw	r4,0(r7)
    78dc:	53800017 	ldw	r14,0(r10)
    78e0:	6fc00015 	stw	ra,0(r13)
    78e4:	5bc00015 	stw	r15,0(r11)
    78e8:	4b800015 	stw	r14,0(r9)
    78ec:	18c00404 	addi	r3,r3,16
    78f0:	39c00404 	addi	r7,r7,16
    78f4:	42000404 	addi	r8,r8,16
    78f8:	6b400404 	addi	r13,r13,16
    78fc:	63000404 	addi	r12,r12,16
    7900:	5ac00404 	addi	r11,r11,16
    7904:	52800404 	addi	r10,r10,16
    7908:	4a400404 	addi	r9,r9,16
    790c:	1c3fef1e 	bne	r3,r16,78cc <__alt_data_end+0xff0078cc>
    7910:	89c00044 	addi	r7,r17,1
    7914:	380e913a 	slli	r7,r7,4
    7918:	310003cc 	andi	r4,r6,15
    791c:	02c000c4 	movi	r11,3
    7920:	11c7883a 	add	r3,r2,r7
    7924:	29cb883a 	add	r5,r5,r7
    7928:	5900212e 	bgeu	r11,r4,79b0 <memcpy+0x140>
    792c:	1813883a 	mov	r9,r3
    7930:	2811883a 	mov	r8,r5
    7934:	200f883a 	mov	r7,r4
    7938:	42800017 	ldw	r10,0(r8)
    793c:	4a400104 	addi	r9,r9,4
    7940:	39ffff04 	addi	r7,r7,-4
    7944:	4abfff15 	stw	r10,-4(r9)
    7948:	42000104 	addi	r8,r8,4
    794c:	59fffa36 	bltu	r11,r7,7938 <__alt_data_end+0xff007938>
    7950:	213fff04 	addi	r4,r4,-4
    7954:	2008d0ba 	srli	r4,r4,2
    7958:	318000cc 	andi	r6,r6,3
    795c:	21000044 	addi	r4,r4,1
    7960:	2109883a 	add	r4,r4,r4
    7964:	2109883a 	add	r4,r4,r4
    7968:	1907883a 	add	r3,r3,r4
    796c:	290b883a 	add	r5,r5,r4
    7970:	30000626 	beq	r6,zero,798c <memcpy+0x11c>
    7974:	198d883a 	add	r6,r3,r6
    7978:	29c00003 	ldbu	r7,0(r5)
    797c:	18c00044 	addi	r3,r3,1
    7980:	29400044 	addi	r5,r5,1
    7984:	19ffffc5 	stb	r7,-1(r3)
    7988:	19bffb1e 	bne	r3,r6,7978 <__alt_data_end+0xff007978>
    798c:	dfc00217 	ldw	ra,8(sp)
    7990:	dc400117 	ldw	r17,4(sp)
    7994:	dc000017 	ldw	r16,0(sp)
    7998:	dec00304 	addi	sp,sp,12
    799c:	f800283a 	ret
    79a0:	2007883a 	mov	r3,r4
    79a4:	003ff206 	br	7970 <__alt_data_end+0xff007970>
    79a8:	2007883a 	mov	r3,r4
    79ac:	003ff106 	br	7974 <__alt_data_end+0xff007974>
    79b0:	200d883a 	mov	r6,r4
    79b4:	003fee06 	br	7970 <__alt_data_end+0xff007970>

000079b8 <memmove>:
    79b8:	2005883a 	mov	r2,r4
    79bc:	29000b2e 	bgeu	r5,r4,79ec <memmove+0x34>
    79c0:	298f883a 	add	r7,r5,r6
    79c4:	21c0092e 	bgeu	r4,r7,79ec <memmove+0x34>
    79c8:	2187883a 	add	r3,r4,r6
    79cc:	198bc83a 	sub	r5,r3,r6
    79d0:	30004826 	beq	r6,zero,7af4 <memmove+0x13c>
    79d4:	39ffffc4 	addi	r7,r7,-1
    79d8:	39000003 	ldbu	r4,0(r7)
    79dc:	18ffffc4 	addi	r3,r3,-1
    79e0:	19000005 	stb	r4,0(r3)
    79e4:	28fffb1e 	bne	r5,r3,79d4 <__alt_data_end+0xff0079d4>
    79e8:	f800283a 	ret
    79ec:	00c003c4 	movi	r3,15
    79f0:	1980412e 	bgeu	r3,r6,7af8 <memmove+0x140>
    79f4:	2886b03a 	or	r3,r5,r2
    79f8:	18c000cc 	andi	r3,r3,3
    79fc:	1800401e 	bne	r3,zero,7b00 <memmove+0x148>
    7a00:	33fffc04 	addi	r15,r6,-16
    7a04:	781ed13a 	srli	r15,r15,4
    7a08:	28c00104 	addi	r3,r5,4
    7a0c:	13400104 	addi	r13,r2,4
    7a10:	781c913a 	slli	r14,r15,4
    7a14:	2b000204 	addi	r12,r5,8
    7a18:	12c00204 	addi	r11,r2,8
    7a1c:	73800504 	addi	r14,r14,20
    7a20:	2a800304 	addi	r10,r5,12
    7a24:	12400304 	addi	r9,r2,12
    7a28:	2b9d883a 	add	r14,r5,r14
    7a2c:	2811883a 	mov	r8,r5
    7a30:	100f883a 	mov	r7,r2
    7a34:	41000017 	ldw	r4,0(r8)
    7a38:	39c00404 	addi	r7,r7,16
    7a3c:	18c00404 	addi	r3,r3,16
    7a40:	393ffc15 	stw	r4,-16(r7)
    7a44:	193ffc17 	ldw	r4,-16(r3)
    7a48:	6b400404 	addi	r13,r13,16
    7a4c:	5ac00404 	addi	r11,r11,16
    7a50:	693ffc15 	stw	r4,-16(r13)
    7a54:	61000017 	ldw	r4,0(r12)
    7a58:	4a400404 	addi	r9,r9,16
    7a5c:	42000404 	addi	r8,r8,16
    7a60:	593ffc15 	stw	r4,-16(r11)
    7a64:	51000017 	ldw	r4,0(r10)
    7a68:	63000404 	addi	r12,r12,16
    7a6c:	52800404 	addi	r10,r10,16
    7a70:	493ffc15 	stw	r4,-16(r9)
    7a74:	1bbfef1e 	bne	r3,r14,7a34 <__alt_data_end+0xff007a34>
    7a78:	79000044 	addi	r4,r15,1
    7a7c:	2008913a 	slli	r4,r4,4
    7a80:	328003cc 	andi	r10,r6,15
    7a84:	02c000c4 	movi	r11,3
    7a88:	1107883a 	add	r3,r2,r4
    7a8c:	290b883a 	add	r5,r5,r4
    7a90:	5a801e2e 	bgeu	r11,r10,7b0c <memmove+0x154>
    7a94:	1813883a 	mov	r9,r3
    7a98:	2811883a 	mov	r8,r5
    7a9c:	500f883a 	mov	r7,r10
    7aa0:	41000017 	ldw	r4,0(r8)
    7aa4:	4a400104 	addi	r9,r9,4
    7aa8:	39ffff04 	addi	r7,r7,-4
    7aac:	493fff15 	stw	r4,-4(r9)
    7ab0:	42000104 	addi	r8,r8,4
    7ab4:	59fffa36 	bltu	r11,r7,7aa0 <__alt_data_end+0xff007aa0>
    7ab8:	513fff04 	addi	r4,r10,-4
    7abc:	2008d0ba 	srli	r4,r4,2
    7ac0:	318000cc 	andi	r6,r6,3
    7ac4:	21000044 	addi	r4,r4,1
    7ac8:	2109883a 	add	r4,r4,r4
    7acc:	2109883a 	add	r4,r4,r4
    7ad0:	1907883a 	add	r3,r3,r4
    7ad4:	290b883a 	add	r5,r5,r4
    7ad8:	30000b26 	beq	r6,zero,7b08 <memmove+0x150>
    7adc:	198d883a 	add	r6,r3,r6
    7ae0:	29c00003 	ldbu	r7,0(r5)
    7ae4:	18c00044 	addi	r3,r3,1
    7ae8:	29400044 	addi	r5,r5,1
    7aec:	19ffffc5 	stb	r7,-1(r3)
    7af0:	19bffb1e 	bne	r3,r6,7ae0 <__alt_data_end+0xff007ae0>
    7af4:	f800283a 	ret
    7af8:	1007883a 	mov	r3,r2
    7afc:	003ff606 	br	7ad8 <__alt_data_end+0xff007ad8>
    7b00:	1007883a 	mov	r3,r2
    7b04:	003ff506 	br	7adc <__alt_data_end+0xff007adc>
    7b08:	f800283a 	ret
    7b0c:	500d883a 	mov	r6,r10
    7b10:	003ff106 	br	7ad8 <__alt_data_end+0xff007ad8>

00007b14 <memset>:
    7b14:	20c000cc 	andi	r3,r4,3
    7b18:	2005883a 	mov	r2,r4
    7b1c:	18004426 	beq	r3,zero,7c30 <memset+0x11c>
    7b20:	31ffffc4 	addi	r7,r6,-1
    7b24:	30004026 	beq	r6,zero,7c28 <memset+0x114>
    7b28:	2813883a 	mov	r9,r5
    7b2c:	200d883a 	mov	r6,r4
    7b30:	2007883a 	mov	r3,r4
    7b34:	00000406 	br	7b48 <memset+0x34>
    7b38:	3a3fffc4 	addi	r8,r7,-1
    7b3c:	31800044 	addi	r6,r6,1
    7b40:	38003926 	beq	r7,zero,7c28 <memset+0x114>
    7b44:	400f883a 	mov	r7,r8
    7b48:	18c00044 	addi	r3,r3,1
    7b4c:	32400005 	stb	r9,0(r6)
    7b50:	1a0000cc 	andi	r8,r3,3
    7b54:	403ff81e 	bne	r8,zero,7b38 <__alt_data_end+0xff007b38>
    7b58:	010000c4 	movi	r4,3
    7b5c:	21c02d2e 	bgeu	r4,r7,7c14 <memset+0x100>
    7b60:	29003fcc 	andi	r4,r5,255
    7b64:	200c923a 	slli	r6,r4,8
    7b68:	3108b03a 	or	r4,r6,r4
    7b6c:	200c943a 	slli	r6,r4,16
    7b70:	218cb03a 	or	r6,r4,r6
    7b74:	010003c4 	movi	r4,15
    7b78:	21c0182e 	bgeu	r4,r7,7bdc <memset+0xc8>
    7b7c:	3b3ffc04 	addi	r12,r7,-16
    7b80:	6018d13a 	srli	r12,r12,4
    7b84:	1a000104 	addi	r8,r3,4
    7b88:	1ac00204 	addi	r11,r3,8
    7b8c:	6008913a 	slli	r4,r12,4
    7b90:	1a800304 	addi	r10,r3,12
    7b94:	1813883a 	mov	r9,r3
    7b98:	21000504 	addi	r4,r4,20
    7b9c:	1909883a 	add	r4,r3,r4
    7ba0:	49800015 	stw	r6,0(r9)
    7ba4:	41800015 	stw	r6,0(r8)
    7ba8:	59800015 	stw	r6,0(r11)
    7bac:	51800015 	stw	r6,0(r10)
    7bb0:	42000404 	addi	r8,r8,16
    7bb4:	4a400404 	addi	r9,r9,16
    7bb8:	5ac00404 	addi	r11,r11,16
    7bbc:	52800404 	addi	r10,r10,16
    7bc0:	413ff71e 	bne	r8,r4,7ba0 <__alt_data_end+0xff007ba0>
    7bc4:	63000044 	addi	r12,r12,1
    7bc8:	6018913a 	slli	r12,r12,4
    7bcc:	39c003cc 	andi	r7,r7,15
    7bd0:	010000c4 	movi	r4,3
    7bd4:	1b07883a 	add	r3,r3,r12
    7bd8:	21c00e2e 	bgeu	r4,r7,7c14 <memset+0x100>
    7bdc:	1813883a 	mov	r9,r3
    7be0:	3811883a 	mov	r8,r7
    7be4:	010000c4 	movi	r4,3
    7be8:	49800015 	stw	r6,0(r9)
    7bec:	423fff04 	addi	r8,r8,-4
    7bf0:	4a400104 	addi	r9,r9,4
    7bf4:	223ffc36 	bltu	r4,r8,7be8 <__alt_data_end+0xff007be8>
    7bf8:	393fff04 	addi	r4,r7,-4
    7bfc:	2008d0ba 	srli	r4,r4,2
    7c00:	39c000cc 	andi	r7,r7,3
    7c04:	21000044 	addi	r4,r4,1
    7c08:	2109883a 	add	r4,r4,r4
    7c0c:	2109883a 	add	r4,r4,r4
    7c10:	1907883a 	add	r3,r3,r4
    7c14:	38000526 	beq	r7,zero,7c2c <memset+0x118>
    7c18:	19cf883a 	add	r7,r3,r7
    7c1c:	19400005 	stb	r5,0(r3)
    7c20:	18c00044 	addi	r3,r3,1
    7c24:	38fffd1e 	bne	r7,r3,7c1c <__alt_data_end+0xff007c1c>
    7c28:	f800283a 	ret
    7c2c:	f800283a 	ret
    7c30:	2007883a 	mov	r3,r4
    7c34:	300f883a 	mov	r7,r6
    7c38:	003fc706 	br	7b58 <__alt_data_end+0xff007b58>

00007c3c <_Balloc>:
    7c3c:	20801317 	ldw	r2,76(r4)
    7c40:	defffc04 	addi	sp,sp,-16
    7c44:	dc400115 	stw	r17,4(sp)
    7c48:	dc000015 	stw	r16,0(sp)
    7c4c:	dfc00315 	stw	ra,12(sp)
    7c50:	dc800215 	stw	r18,8(sp)
    7c54:	2023883a 	mov	r17,r4
    7c58:	2821883a 	mov	r16,r5
    7c5c:	10000f26 	beq	r2,zero,7c9c <_Balloc+0x60>
    7c60:	8407883a 	add	r3,r16,r16
    7c64:	18c7883a 	add	r3,r3,r3
    7c68:	10c7883a 	add	r3,r2,r3
    7c6c:	18800017 	ldw	r2,0(r3)
    7c70:	10001126 	beq	r2,zero,7cb8 <_Balloc+0x7c>
    7c74:	11000017 	ldw	r4,0(r2)
    7c78:	19000015 	stw	r4,0(r3)
    7c7c:	10000415 	stw	zero,16(r2)
    7c80:	10000315 	stw	zero,12(r2)
    7c84:	dfc00317 	ldw	ra,12(sp)
    7c88:	dc800217 	ldw	r18,8(sp)
    7c8c:	dc400117 	ldw	r17,4(sp)
    7c90:	dc000017 	ldw	r16,0(sp)
    7c94:	dec00404 	addi	sp,sp,16
    7c98:	f800283a 	ret
    7c9c:	01800844 	movi	r6,33
    7ca0:	01400104 	movi	r5,4
    7ca4:	000ab240 	call	ab24 <_calloc_r>
    7ca8:	88801315 	stw	r2,76(r17)
    7cac:	103fec1e 	bne	r2,zero,7c60 <__alt_data_end+0xff007c60>
    7cb0:	0005883a 	mov	r2,zero
    7cb4:	003ff306 	br	7c84 <__alt_data_end+0xff007c84>
    7cb8:	01400044 	movi	r5,1
    7cbc:	2c24983a 	sll	r18,r5,r16
    7cc0:	8809883a 	mov	r4,r17
    7cc4:	91800144 	addi	r6,r18,5
    7cc8:	318d883a 	add	r6,r6,r6
    7ccc:	318d883a 	add	r6,r6,r6
    7cd0:	000ab240 	call	ab24 <_calloc_r>
    7cd4:	103ff626 	beq	r2,zero,7cb0 <__alt_data_end+0xff007cb0>
    7cd8:	14000115 	stw	r16,4(r2)
    7cdc:	14800215 	stw	r18,8(r2)
    7ce0:	003fe606 	br	7c7c <__alt_data_end+0xff007c7c>

00007ce4 <_Bfree>:
    7ce4:	28000826 	beq	r5,zero,7d08 <_Bfree+0x24>
    7ce8:	28c00117 	ldw	r3,4(r5)
    7cec:	20801317 	ldw	r2,76(r4)
    7cf0:	18c7883a 	add	r3,r3,r3
    7cf4:	18c7883a 	add	r3,r3,r3
    7cf8:	10c5883a 	add	r2,r2,r3
    7cfc:	10c00017 	ldw	r3,0(r2)
    7d00:	28c00015 	stw	r3,0(r5)
    7d04:	11400015 	stw	r5,0(r2)
    7d08:	f800283a 	ret

00007d0c <__multadd>:
    7d0c:	defffa04 	addi	sp,sp,-24
    7d10:	dc800315 	stw	r18,12(sp)
    7d14:	dc400215 	stw	r17,8(sp)
    7d18:	dc000115 	stw	r16,4(sp)
    7d1c:	2823883a 	mov	r17,r5
    7d20:	2c000417 	ldw	r16,16(r5)
    7d24:	dfc00515 	stw	ra,20(sp)
    7d28:	dcc00415 	stw	r19,16(sp)
    7d2c:	2025883a 	mov	r18,r4
    7d30:	29400504 	addi	r5,r5,20
    7d34:	0011883a 	mov	r8,zero
    7d38:	28c00017 	ldw	r3,0(r5)
    7d3c:	29400104 	addi	r5,r5,4
    7d40:	42000044 	addi	r8,r8,1
    7d44:	18bfffcc 	andi	r2,r3,65535
    7d48:	1185383a 	mul	r2,r2,r6
    7d4c:	1806d43a 	srli	r3,r3,16
    7d50:	11cf883a 	add	r7,r2,r7
    7d54:	3808d43a 	srli	r4,r7,16
    7d58:	1987383a 	mul	r3,r3,r6
    7d5c:	38bfffcc 	andi	r2,r7,65535
    7d60:	1907883a 	add	r3,r3,r4
    7d64:	1808943a 	slli	r4,r3,16
    7d68:	180ed43a 	srli	r7,r3,16
    7d6c:	2085883a 	add	r2,r4,r2
    7d70:	28bfff15 	stw	r2,-4(r5)
    7d74:	443ff016 	blt	r8,r16,7d38 <__alt_data_end+0xff007d38>
    7d78:	38000926 	beq	r7,zero,7da0 <__multadd+0x94>
    7d7c:	88800217 	ldw	r2,8(r17)
    7d80:	80800f0e 	bge	r16,r2,7dc0 <__multadd+0xb4>
    7d84:	80800144 	addi	r2,r16,5
    7d88:	1085883a 	add	r2,r2,r2
    7d8c:	1085883a 	add	r2,r2,r2
    7d90:	8885883a 	add	r2,r17,r2
    7d94:	11c00015 	stw	r7,0(r2)
    7d98:	84000044 	addi	r16,r16,1
    7d9c:	8c000415 	stw	r16,16(r17)
    7da0:	8805883a 	mov	r2,r17
    7da4:	dfc00517 	ldw	ra,20(sp)
    7da8:	dcc00417 	ldw	r19,16(sp)
    7dac:	dc800317 	ldw	r18,12(sp)
    7db0:	dc400217 	ldw	r17,8(sp)
    7db4:	dc000117 	ldw	r16,4(sp)
    7db8:	dec00604 	addi	sp,sp,24
    7dbc:	f800283a 	ret
    7dc0:	89400117 	ldw	r5,4(r17)
    7dc4:	9009883a 	mov	r4,r18
    7dc8:	d9c00015 	stw	r7,0(sp)
    7dcc:	29400044 	addi	r5,r5,1
    7dd0:	0007c3c0 	call	7c3c <_Balloc>
    7dd4:	89800417 	ldw	r6,16(r17)
    7dd8:	89400304 	addi	r5,r17,12
    7ddc:	11000304 	addi	r4,r2,12
    7de0:	31800084 	addi	r6,r6,2
    7de4:	318d883a 	add	r6,r6,r6
    7de8:	318d883a 	add	r6,r6,r6
    7dec:	1027883a 	mov	r19,r2
    7df0:	00078700 	call	7870 <memcpy>
    7df4:	d9c00017 	ldw	r7,0(sp)
    7df8:	88000a26 	beq	r17,zero,7e24 <__multadd+0x118>
    7dfc:	88c00117 	ldw	r3,4(r17)
    7e00:	90801317 	ldw	r2,76(r18)
    7e04:	18c7883a 	add	r3,r3,r3
    7e08:	18c7883a 	add	r3,r3,r3
    7e0c:	10c5883a 	add	r2,r2,r3
    7e10:	10c00017 	ldw	r3,0(r2)
    7e14:	88c00015 	stw	r3,0(r17)
    7e18:	14400015 	stw	r17,0(r2)
    7e1c:	9823883a 	mov	r17,r19
    7e20:	003fd806 	br	7d84 <__alt_data_end+0xff007d84>
    7e24:	9823883a 	mov	r17,r19
    7e28:	003fd606 	br	7d84 <__alt_data_end+0xff007d84>

00007e2c <__s2b>:
    7e2c:	defff904 	addi	sp,sp,-28
    7e30:	dc400115 	stw	r17,4(sp)
    7e34:	dc000015 	stw	r16,0(sp)
    7e38:	2023883a 	mov	r17,r4
    7e3c:	2821883a 	mov	r16,r5
    7e40:	39000204 	addi	r4,r7,8
    7e44:	01400244 	movi	r5,9
    7e48:	dcc00315 	stw	r19,12(sp)
    7e4c:	dc800215 	stw	r18,8(sp)
    7e50:	dfc00615 	stw	ra,24(sp)
    7e54:	dd400515 	stw	r21,20(sp)
    7e58:	dd000415 	stw	r20,16(sp)
    7e5c:	3825883a 	mov	r18,r7
    7e60:	3027883a 	mov	r19,r6
    7e64:	0001b740 	call	1b74 <__divsi3>
    7e68:	00c00044 	movi	r3,1
    7e6c:	000b883a 	mov	r5,zero
    7e70:	1880030e 	bge	r3,r2,7e80 <__s2b+0x54>
    7e74:	18c7883a 	add	r3,r3,r3
    7e78:	29400044 	addi	r5,r5,1
    7e7c:	18bffd16 	blt	r3,r2,7e74 <__alt_data_end+0xff007e74>
    7e80:	8809883a 	mov	r4,r17
    7e84:	0007c3c0 	call	7c3c <_Balloc>
    7e88:	d8c00717 	ldw	r3,28(sp)
    7e8c:	10c00515 	stw	r3,20(r2)
    7e90:	00c00044 	movi	r3,1
    7e94:	10c00415 	stw	r3,16(r2)
    7e98:	00c00244 	movi	r3,9
    7e9c:	1cc0210e 	bge	r3,r19,7f24 <__s2b+0xf8>
    7ea0:	80eb883a 	add	r21,r16,r3
    7ea4:	a829883a 	mov	r20,r21
    7ea8:	84e1883a 	add	r16,r16,r19
    7eac:	a1c00007 	ldb	r7,0(r20)
    7eb0:	01800284 	movi	r6,10
    7eb4:	a5000044 	addi	r20,r20,1
    7eb8:	100b883a 	mov	r5,r2
    7ebc:	39fff404 	addi	r7,r7,-48
    7ec0:	8809883a 	mov	r4,r17
    7ec4:	0007d0c0 	call	7d0c <__multadd>
    7ec8:	a43ff81e 	bne	r20,r16,7eac <__alt_data_end+0xff007eac>
    7ecc:	ace1883a 	add	r16,r21,r19
    7ed0:	843ffe04 	addi	r16,r16,-8
    7ed4:	9c800a0e 	bge	r19,r18,7f00 <__s2b+0xd4>
    7ed8:	94e5c83a 	sub	r18,r18,r19
    7edc:	84a5883a 	add	r18,r16,r18
    7ee0:	81c00007 	ldb	r7,0(r16)
    7ee4:	01800284 	movi	r6,10
    7ee8:	84000044 	addi	r16,r16,1
    7eec:	100b883a 	mov	r5,r2
    7ef0:	39fff404 	addi	r7,r7,-48
    7ef4:	8809883a 	mov	r4,r17
    7ef8:	0007d0c0 	call	7d0c <__multadd>
    7efc:	84bff81e 	bne	r16,r18,7ee0 <__alt_data_end+0xff007ee0>
    7f00:	dfc00617 	ldw	ra,24(sp)
    7f04:	dd400517 	ldw	r21,20(sp)
    7f08:	dd000417 	ldw	r20,16(sp)
    7f0c:	dcc00317 	ldw	r19,12(sp)
    7f10:	dc800217 	ldw	r18,8(sp)
    7f14:	dc400117 	ldw	r17,4(sp)
    7f18:	dc000017 	ldw	r16,0(sp)
    7f1c:	dec00704 	addi	sp,sp,28
    7f20:	f800283a 	ret
    7f24:	84000284 	addi	r16,r16,10
    7f28:	1827883a 	mov	r19,r3
    7f2c:	003fe906 	br	7ed4 <__alt_data_end+0xff007ed4>

00007f30 <__hi0bits>:
    7f30:	20bfffec 	andhi	r2,r4,65535
    7f34:	1000141e 	bne	r2,zero,7f88 <__hi0bits+0x58>
    7f38:	2008943a 	slli	r4,r4,16
    7f3c:	00800404 	movi	r2,16
    7f40:	20ffc02c 	andhi	r3,r4,65280
    7f44:	1800021e 	bne	r3,zero,7f50 <__hi0bits+0x20>
    7f48:	2008923a 	slli	r4,r4,8
    7f4c:	10800204 	addi	r2,r2,8
    7f50:	20fc002c 	andhi	r3,r4,61440
    7f54:	1800021e 	bne	r3,zero,7f60 <__hi0bits+0x30>
    7f58:	2008913a 	slli	r4,r4,4
    7f5c:	10800104 	addi	r2,r2,4
    7f60:	20f0002c 	andhi	r3,r4,49152
    7f64:	1800031e 	bne	r3,zero,7f74 <__hi0bits+0x44>
    7f68:	2109883a 	add	r4,r4,r4
    7f6c:	10800084 	addi	r2,r2,2
    7f70:	2109883a 	add	r4,r4,r4
    7f74:	20000316 	blt	r4,zero,7f84 <__hi0bits+0x54>
    7f78:	2110002c 	andhi	r4,r4,16384
    7f7c:	2000041e 	bne	r4,zero,7f90 <__hi0bits+0x60>
    7f80:	00800804 	movi	r2,32
    7f84:	f800283a 	ret
    7f88:	0005883a 	mov	r2,zero
    7f8c:	003fec06 	br	7f40 <__alt_data_end+0xff007f40>
    7f90:	10800044 	addi	r2,r2,1
    7f94:	f800283a 	ret

00007f98 <__lo0bits>:
    7f98:	20c00017 	ldw	r3,0(r4)
    7f9c:	188001cc 	andi	r2,r3,7
    7fa0:	10000826 	beq	r2,zero,7fc4 <__lo0bits+0x2c>
    7fa4:	1880004c 	andi	r2,r3,1
    7fa8:	1000211e 	bne	r2,zero,8030 <__lo0bits+0x98>
    7fac:	1880008c 	andi	r2,r3,2
    7fb0:	1000211e 	bne	r2,zero,8038 <__lo0bits+0xa0>
    7fb4:	1806d0ba 	srli	r3,r3,2
    7fb8:	00800084 	movi	r2,2
    7fbc:	20c00015 	stw	r3,0(r4)
    7fc0:	f800283a 	ret
    7fc4:	18bfffcc 	andi	r2,r3,65535
    7fc8:	10001326 	beq	r2,zero,8018 <__lo0bits+0x80>
    7fcc:	0005883a 	mov	r2,zero
    7fd0:	19403fcc 	andi	r5,r3,255
    7fd4:	2800021e 	bne	r5,zero,7fe0 <__lo0bits+0x48>
    7fd8:	1806d23a 	srli	r3,r3,8
    7fdc:	10800204 	addi	r2,r2,8
    7fe0:	194003cc 	andi	r5,r3,15
    7fe4:	2800021e 	bne	r5,zero,7ff0 <__lo0bits+0x58>
    7fe8:	1806d13a 	srli	r3,r3,4
    7fec:	10800104 	addi	r2,r2,4
    7ff0:	194000cc 	andi	r5,r3,3
    7ff4:	2800021e 	bne	r5,zero,8000 <__lo0bits+0x68>
    7ff8:	1806d0ba 	srli	r3,r3,2
    7ffc:	10800084 	addi	r2,r2,2
    8000:	1940004c 	andi	r5,r3,1
    8004:	2800081e 	bne	r5,zero,8028 <__lo0bits+0x90>
    8008:	1806d07a 	srli	r3,r3,1
    800c:	1800051e 	bne	r3,zero,8024 <__lo0bits+0x8c>
    8010:	00800804 	movi	r2,32
    8014:	f800283a 	ret
    8018:	1806d43a 	srli	r3,r3,16
    801c:	00800404 	movi	r2,16
    8020:	003feb06 	br	7fd0 <__alt_data_end+0xff007fd0>
    8024:	10800044 	addi	r2,r2,1
    8028:	20c00015 	stw	r3,0(r4)
    802c:	f800283a 	ret
    8030:	0005883a 	mov	r2,zero
    8034:	f800283a 	ret
    8038:	1806d07a 	srli	r3,r3,1
    803c:	00800044 	movi	r2,1
    8040:	20c00015 	stw	r3,0(r4)
    8044:	f800283a 	ret

00008048 <__i2b>:
    8048:	defffd04 	addi	sp,sp,-12
    804c:	dc000015 	stw	r16,0(sp)
    8050:	04000044 	movi	r16,1
    8054:	dc400115 	stw	r17,4(sp)
    8058:	2823883a 	mov	r17,r5
    805c:	800b883a 	mov	r5,r16
    8060:	dfc00215 	stw	ra,8(sp)
    8064:	0007c3c0 	call	7c3c <_Balloc>
    8068:	14400515 	stw	r17,20(r2)
    806c:	14000415 	stw	r16,16(r2)
    8070:	dfc00217 	ldw	ra,8(sp)
    8074:	dc400117 	ldw	r17,4(sp)
    8078:	dc000017 	ldw	r16,0(sp)
    807c:	dec00304 	addi	sp,sp,12
    8080:	f800283a 	ret

00008084 <__multiply>:
    8084:	defffa04 	addi	sp,sp,-24
    8088:	dcc00315 	stw	r19,12(sp)
    808c:	dc800215 	stw	r18,8(sp)
    8090:	34c00417 	ldw	r19,16(r6)
    8094:	2c800417 	ldw	r18,16(r5)
    8098:	dd000415 	stw	r20,16(sp)
    809c:	dc400115 	stw	r17,4(sp)
    80a0:	dfc00515 	stw	ra,20(sp)
    80a4:	dc000015 	stw	r16,0(sp)
    80a8:	2829883a 	mov	r20,r5
    80ac:	3023883a 	mov	r17,r6
    80b0:	94c0050e 	bge	r18,r19,80c8 <__multiply+0x44>
    80b4:	9007883a 	mov	r3,r18
    80b8:	3029883a 	mov	r20,r6
    80bc:	9825883a 	mov	r18,r19
    80c0:	2823883a 	mov	r17,r5
    80c4:	1827883a 	mov	r19,r3
    80c8:	a0800217 	ldw	r2,8(r20)
    80cc:	94e1883a 	add	r16,r18,r19
    80d0:	a1400117 	ldw	r5,4(r20)
    80d4:	1400010e 	bge	r2,r16,80dc <__multiply+0x58>
    80d8:	29400044 	addi	r5,r5,1
    80dc:	0007c3c0 	call	7c3c <_Balloc>
    80e0:	8415883a 	add	r10,r16,r16
    80e4:	12c00504 	addi	r11,r2,20
    80e8:	5295883a 	add	r10,r10,r10
    80ec:	5a95883a 	add	r10,r11,r10
    80f0:	5807883a 	mov	r3,r11
    80f4:	5a80032e 	bgeu	r11,r10,8104 <__multiply+0x80>
    80f8:	18000015 	stw	zero,0(r3)
    80fc:	18c00104 	addi	r3,r3,4
    8100:	1abffd36 	bltu	r3,r10,80f8 <__alt_data_end+0xff0080f8>
    8104:	9ce7883a 	add	r19,r19,r19
    8108:	94a5883a 	add	r18,r18,r18
    810c:	89800504 	addi	r6,r17,20
    8110:	9ce7883a 	add	r19,r19,r19
    8114:	a3400504 	addi	r13,r20,20
    8118:	94a5883a 	add	r18,r18,r18
    811c:	34d9883a 	add	r12,r6,r19
    8120:	6c93883a 	add	r9,r13,r18
    8124:	3300422e 	bgeu	r6,r12,8230 <__multiply+0x1ac>
    8128:	37c00017 	ldw	ra,0(r6)
    812c:	fbffffcc 	andi	r15,ra,65535
    8130:	78001b26 	beq	r15,zero,81a0 <__multiply+0x11c>
    8134:	5811883a 	mov	r8,r11
    8138:	681d883a 	mov	r14,r13
    813c:	000f883a 	mov	r7,zero
    8140:	71000017 	ldw	r4,0(r14)
    8144:	40c00017 	ldw	r3,0(r8)
    8148:	73800104 	addi	r14,r14,4
    814c:	217fffcc 	andi	r5,r4,65535
    8150:	2bcb383a 	mul	r5,r5,r15
    8154:	2008d43a 	srli	r4,r4,16
    8158:	1c7fffcc 	andi	r17,r3,65535
    815c:	2c4b883a 	add	r5,r5,r17
    8160:	29cb883a 	add	r5,r5,r7
    8164:	23c9383a 	mul	r4,r4,r15
    8168:	1806d43a 	srli	r3,r3,16
    816c:	280ed43a 	srli	r7,r5,16
    8170:	297fffcc 	andi	r5,r5,65535
    8174:	20c7883a 	add	r3,r4,r3
    8178:	19c7883a 	add	r3,r3,r7
    817c:	1808943a 	slli	r4,r3,16
    8180:	4023883a 	mov	r17,r8
    8184:	180ed43a 	srli	r7,r3,16
    8188:	214ab03a 	or	r5,r4,r5
    818c:	41400015 	stw	r5,0(r8)
    8190:	42000104 	addi	r8,r8,4
    8194:	727fea36 	bltu	r14,r9,8140 <__alt_data_end+0xff008140>
    8198:	89c00115 	stw	r7,4(r17)
    819c:	37c00017 	ldw	ra,0(r6)
    81a0:	f83ed43a 	srli	ra,ra,16
    81a4:	f8001f26 	beq	ra,zero,8224 <__multiply+0x1a0>
    81a8:	58c00017 	ldw	r3,0(r11)
    81ac:	681d883a 	mov	r14,r13
    81b0:	581f883a 	mov	r15,r11
    81b4:	1811883a 	mov	r8,r3
    81b8:	5825883a 	mov	r18,r11
    81bc:	000f883a 	mov	r7,zero
    81c0:	00000106 	br	81c8 <__multiply+0x144>
    81c4:	8825883a 	mov	r18,r17
    81c8:	7140000b 	ldhu	r5,0(r14)
    81cc:	4010d43a 	srli	r8,r8,16
    81d0:	193fffcc 	andi	r4,r3,65535
    81d4:	2fcb383a 	mul	r5,r5,ra
    81d8:	7bc00104 	addi	r15,r15,4
    81dc:	73800104 	addi	r14,r14,4
    81e0:	2a0b883a 	add	r5,r5,r8
    81e4:	29cb883a 	add	r5,r5,r7
    81e8:	2806943a 	slli	r3,r5,16
    81ec:	94400104 	addi	r17,r18,4
    81f0:	280ad43a 	srli	r5,r5,16
    81f4:	1908b03a 	or	r4,r3,r4
    81f8:	793fff15 	stw	r4,-4(r15)
    81fc:	70ffff17 	ldw	r3,-4(r14)
    8200:	8a000017 	ldw	r8,0(r17)
    8204:	1806d43a 	srli	r3,r3,16
    8208:	413fffcc 	andi	r4,r8,65535
    820c:	1fc7383a 	mul	r3,r3,ra
    8210:	1907883a 	add	r3,r3,r4
    8214:	1947883a 	add	r3,r3,r5
    8218:	180ed43a 	srli	r7,r3,16
    821c:	727fe936 	bltu	r14,r9,81c4 <__alt_data_end+0xff0081c4>
    8220:	90c00115 	stw	r3,4(r18)
    8224:	31800104 	addi	r6,r6,4
    8228:	5ac00104 	addi	r11,r11,4
    822c:	333fbe36 	bltu	r6,r12,8128 <__alt_data_end+0xff008128>
    8230:	0400090e 	bge	zero,r16,8258 <__multiply+0x1d4>
    8234:	50ffff17 	ldw	r3,-4(r10)
    8238:	52bfff04 	addi	r10,r10,-4
    823c:	18000326 	beq	r3,zero,824c <__multiply+0x1c8>
    8240:	00000506 	br	8258 <__multiply+0x1d4>
    8244:	50c00017 	ldw	r3,0(r10)
    8248:	1800031e 	bne	r3,zero,8258 <__multiply+0x1d4>
    824c:	843fffc4 	addi	r16,r16,-1
    8250:	52bfff04 	addi	r10,r10,-4
    8254:	803ffb1e 	bne	r16,zero,8244 <__alt_data_end+0xff008244>
    8258:	14000415 	stw	r16,16(r2)
    825c:	dfc00517 	ldw	ra,20(sp)
    8260:	dd000417 	ldw	r20,16(sp)
    8264:	dcc00317 	ldw	r19,12(sp)
    8268:	dc800217 	ldw	r18,8(sp)
    826c:	dc400117 	ldw	r17,4(sp)
    8270:	dc000017 	ldw	r16,0(sp)
    8274:	dec00604 	addi	sp,sp,24
    8278:	f800283a 	ret

0000827c <__pow5mult>:
    827c:	defffa04 	addi	sp,sp,-24
    8280:	dcc00315 	stw	r19,12(sp)
    8284:	dc000015 	stw	r16,0(sp)
    8288:	dfc00515 	stw	ra,20(sp)
    828c:	dd000415 	stw	r20,16(sp)
    8290:	dc800215 	stw	r18,8(sp)
    8294:	dc400115 	stw	r17,4(sp)
    8298:	308000cc 	andi	r2,r6,3
    829c:	3021883a 	mov	r16,r6
    82a0:	2027883a 	mov	r19,r4
    82a4:	10002f1e 	bne	r2,zero,8364 <__pow5mult+0xe8>
    82a8:	2825883a 	mov	r18,r5
    82ac:	8021d0ba 	srai	r16,r16,2
    82b0:	80001a26 	beq	r16,zero,831c <__pow5mult+0xa0>
    82b4:	9c401217 	ldw	r17,72(r19)
    82b8:	8800061e 	bne	r17,zero,82d4 <__pow5mult+0x58>
    82bc:	00003406 	br	8390 <__pow5mult+0x114>
    82c0:	8021d07a 	srai	r16,r16,1
    82c4:	80001526 	beq	r16,zero,831c <__pow5mult+0xa0>
    82c8:	88800017 	ldw	r2,0(r17)
    82cc:	10001c26 	beq	r2,zero,8340 <__pow5mult+0xc4>
    82d0:	1023883a 	mov	r17,r2
    82d4:	8080004c 	andi	r2,r16,1
    82d8:	103ff926 	beq	r2,zero,82c0 <__alt_data_end+0xff0082c0>
    82dc:	880d883a 	mov	r6,r17
    82e0:	900b883a 	mov	r5,r18
    82e4:	9809883a 	mov	r4,r19
    82e8:	00080840 	call	8084 <__multiply>
    82ec:	90001b26 	beq	r18,zero,835c <__pow5mult+0xe0>
    82f0:	91000117 	ldw	r4,4(r18)
    82f4:	98c01317 	ldw	r3,76(r19)
    82f8:	8021d07a 	srai	r16,r16,1
    82fc:	2109883a 	add	r4,r4,r4
    8300:	2109883a 	add	r4,r4,r4
    8304:	1907883a 	add	r3,r3,r4
    8308:	19000017 	ldw	r4,0(r3)
    830c:	91000015 	stw	r4,0(r18)
    8310:	1c800015 	stw	r18,0(r3)
    8314:	1025883a 	mov	r18,r2
    8318:	803feb1e 	bne	r16,zero,82c8 <__alt_data_end+0xff0082c8>
    831c:	9005883a 	mov	r2,r18
    8320:	dfc00517 	ldw	ra,20(sp)
    8324:	dd000417 	ldw	r20,16(sp)
    8328:	dcc00317 	ldw	r19,12(sp)
    832c:	dc800217 	ldw	r18,8(sp)
    8330:	dc400117 	ldw	r17,4(sp)
    8334:	dc000017 	ldw	r16,0(sp)
    8338:	dec00604 	addi	sp,sp,24
    833c:	f800283a 	ret
    8340:	880d883a 	mov	r6,r17
    8344:	880b883a 	mov	r5,r17
    8348:	9809883a 	mov	r4,r19
    834c:	00080840 	call	8084 <__multiply>
    8350:	88800015 	stw	r2,0(r17)
    8354:	10000015 	stw	zero,0(r2)
    8358:	003fdd06 	br	82d0 <__alt_data_end+0xff0082d0>
    835c:	1025883a 	mov	r18,r2
    8360:	003fd706 	br	82c0 <__alt_data_end+0xff0082c0>
    8364:	10bfffc4 	addi	r2,r2,-1
    8368:	1085883a 	add	r2,r2,r2
    836c:	00c00074 	movhi	r3,1
    8370:	18c51904 	addi	r3,r3,5220
    8374:	1085883a 	add	r2,r2,r2
    8378:	1885883a 	add	r2,r3,r2
    837c:	11800017 	ldw	r6,0(r2)
    8380:	000f883a 	mov	r7,zero
    8384:	0007d0c0 	call	7d0c <__multadd>
    8388:	1025883a 	mov	r18,r2
    838c:	003fc706 	br	82ac <__alt_data_end+0xff0082ac>
    8390:	05000044 	movi	r20,1
    8394:	a00b883a 	mov	r5,r20
    8398:	9809883a 	mov	r4,r19
    839c:	0007c3c0 	call	7c3c <_Balloc>
    83a0:	1023883a 	mov	r17,r2
    83a4:	00809c44 	movi	r2,625
    83a8:	88800515 	stw	r2,20(r17)
    83ac:	8d000415 	stw	r20,16(r17)
    83b0:	9c401215 	stw	r17,72(r19)
    83b4:	88000015 	stw	zero,0(r17)
    83b8:	003fc606 	br	82d4 <__alt_data_end+0xff0082d4>

000083bc <__lshift>:
    83bc:	defff904 	addi	sp,sp,-28
    83c0:	dd400515 	stw	r21,20(sp)
    83c4:	dcc00315 	stw	r19,12(sp)
    83c8:	302bd17a 	srai	r21,r6,5
    83cc:	2cc00417 	ldw	r19,16(r5)
    83d0:	28800217 	ldw	r2,8(r5)
    83d4:	dd000415 	stw	r20,16(sp)
    83d8:	ace7883a 	add	r19,r21,r19
    83dc:	dc800215 	stw	r18,8(sp)
    83e0:	dc400115 	stw	r17,4(sp)
    83e4:	dc000015 	stw	r16,0(sp)
    83e8:	dfc00615 	stw	ra,24(sp)
    83ec:	9c000044 	addi	r16,r19,1
    83f0:	2823883a 	mov	r17,r5
    83f4:	3029883a 	mov	r20,r6
    83f8:	2025883a 	mov	r18,r4
    83fc:	29400117 	ldw	r5,4(r5)
    8400:	1400030e 	bge	r2,r16,8410 <__lshift+0x54>
    8404:	1085883a 	add	r2,r2,r2
    8408:	29400044 	addi	r5,r5,1
    840c:	143ffd16 	blt	r2,r16,8404 <__alt_data_end+0xff008404>
    8410:	9009883a 	mov	r4,r18
    8414:	0007c3c0 	call	7c3c <_Balloc>
    8418:	10c00504 	addi	r3,r2,20
    841c:	0540070e 	bge	zero,r21,843c <__lshift+0x80>
    8420:	ad6b883a 	add	r21,r21,r21
    8424:	ad6b883a 	add	r21,r21,r21
    8428:	1809883a 	mov	r4,r3
    842c:	1d47883a 	add	r3,r3,r21
    8430:	20000015 	stw	zero,0(r4)
    8434:	21000104 	addi	r4,r4,4
    8438:	193ffd1e 	bne	r3,r4,8430 <__alt_data_end+0xff008430>
    843c:	8a000417 	ldw	r8,16(r17)
    8440:	89000504 	addi	r4,r17,20
    8444:	a18007cc 	andi	r6,r20,31
    8448:	4211883a 	add	r8,r8,r8
    844c:	4211883a 	add	r8,r8,r8
    8450:	2211883a 	add	r8,r4,r8
    8454:	30002326 	beq	r6,zero,84e4 <__lshift+0x128>
    8458:	02400804 	movi	r9,32
    845c:	4993c83a 	sub	r9,r9,r6
    8460:	000b883a 	mov	r5,zero
    8464:	21c00017 	ldw	r7,0(r4)
    8468:	1815883a 	mov	r10,r3
    846c:	18c00104 	addi	r3,r3,4
    8470:	398e983a 	sll	r7,r7,r6
    8474:	21000104 	addi	r4,r4,4
    8478:	394ab03a 	or	r5,r7,r5
    847c:	197fff15 	stw	r5,-4(r3)
    8480:	217fff17 	ldw	r5,-4(r4)
    8484:	2a4ad83a 	srl	r5,r5,r9
    8488:	223ff636 	bltu	r4,r8,8464 <__alt_data_end+0xff008464>
    848c:	51400115 	stw	r5,4(r10)
    8490:	28001a1e 	bne	r5,zero,84fc <__lshift+0x140>
    8494:	843fffc4 	addi	r16,r16,-1
    8498:	14000415 	stw	r16,16(r2)
    849c:	88000826 	beq	r17,zero,84c0 <__lshift+0x104>
    84a0:	89000117 	ldw	r4,4(r17)
    84a4:	90c01317 	ldw	r3,76(r18)
    84a8:	2109883a 	add	r4,r4,r4
    84ac:	2109883a 	add	r4,r4,r4
    84b0:	1907883a 	add	r3,r3,r4
    84b4:	19000017 	ldw	r4,0(r3)
    84b8:	89000015 	stw	r4,0(r17)
    84bc:	1c400015 	stw	r17,0(r3)
    84c0:	dfc00617 	ldw	ra,24(sp)
    84c4:	dd400517 	ldw	r21,20(sp)
    84c8:	dd000417 	ldw	r20,16(sp)
    84cc:	dcc00317 	ldw	r19,12(sp)
    84d0:	dc800217 	ldw	r18,8(sp)
    84d4:	dc400117 	ldw	r17,4(sp)
    84d8:	dc000017 	ldw	r16,0(sp)
    84dc:	dec00704 	addi	sp,sp,28
    84e0:	f800283a 	ret
    84e4:	21400017 	ldw	r5,0(r4)
    84e8:	18c00104 	addi	r3,r3,4
    84ec:	21000104 	addi	r4,r4,4
    84f0:	197fff15 	stw	r5,-4(r3)
    84f4:	223ffb36 	bltu	r4,r8,84e4 <__alt_data_end+0xff0084e4>
    84f8:	003fe606 	br	8494 <__alt_data_end+0xff008494>
    84fc:	9c000084 	addi	r16,r19,2
    8500:	003fe406 	br	8494 <__alt_data_end+0xff008494>

00008504 <__mcmp>:
    8504:	20800417 	ldw	r2,16(r4)
    8508:	28c00417 	ldw	r3,16(r5)
    850c:	10c5c83a 	sub	r2,r2,r3
    8510:	1000111e 	bne	r2,zero,8558 <__mcmp+0x54>
    8514:	18c7883a 	add	r3,r3,r3
    8518:	18c7883a 	add	r3,r3,r3
    851c:	21000504 	addi	r4,r4,20
    8520:	29400504 	addi	r5,r5,20
    8524:	20c5883a 	add	r2,r4,r3
    8528:	28cb883a 	add	r5,r5,r3
    852c:	00000106 	br	8534 <__mcmp+0x30>
    8530:	20800a2e 	bgeu	r4,r2,855c <__mcmp+0x58>
    8534:	10bfff04 	addi	r2,r2,-4
    8538:	297fff04 	addi	r5,r5,-4
    853c:	11800017 	ldw	r6,0(r2)
    8540:	28c00017 	ldw	r3,0(r5)
    8544:	30fffa26 	beq	r6,r3,8530 <__alt_data_end+0xff008530>
    8548:	30c00236 	bltu	r6,r3,8554 <__mcmp+0x50>
    854c:	00800044 	movi	r2,1
    8550:	f800283a 	ret
    8554:	00bfffc4 	movi	r2,-1
    8558:	f800283a 	ret
    855c:	0005883a 	mov	r2,zero
    8560:	f800283a 	ret

00008564 <__mdiff>:
    8564:	28c00417 	ldw	r3,16(r5)
    8568:	30800417 	ldw	r2,16(r6)
    856c:	defffa04 	addi	sp,sp,-24
    8570:	dcc00315 	stw	r19,12(sp)
    8574:	dc800215 	stw	r18,8(sp)
    8578:	dfc00515 	stw	ra,20(sp)
    857c:	dd000415 	stw	r20,16(sp)
    8580:	dc400115 	stw	r17,4(sp)
    8584:	dc000015 	stw	r16,0(sp)
    8588:	1887c83a 	sub	r3,r3,r2
    858c:	2825883a 	mov	r18,r5
    8590:	3027883a 	mov	r19,r6
    8594:	1800141e 	bne	r3,zero,85e8 <__mdiff+0x84>
    8598:	1085883a 	add	r2,r2,r2
    859c:	1085883a 	add	r2,r2,r2
    85a0:	2a000504 	addi	r8,r5,20
    85a4:	34000504 	addi	r16,r6,20
    85a8:	4087883a 	add	r3,r8,r2
    85ac:	8085883a 	add	r2,r16,r2
    85b0:	00000106 	br	85b8 <__mdiff+0x54>
    85b4:	40c0592e 	bgeu	r8,r3,871c <__mdiff+0x1b8>
    85b8:	18ffff04 	addi	r3,r3,-4
    85bc:	10bfff04 	addi	r2,r2,-4
    85c0:	19c00017 	ldw	r7,0(r3)
    85c4:	11400017 	ldw	r5,0(r2)
    85c8:	397ffa26 	beq	r7,r5,85b4 <__alt_data_end+0xff0085b4>
    85cc:	3940592e 	bgeu	r7,r5,8734 <__mdiff+0x1d0>
    85d0:	9005883a 	mov	r2,r18
    85d4:	4023883a 	mov	r17,r8
    85d8:	9825883a 	mov	r18,r19
    85dc:	05000044 	movi	r20,1
    85e0:	1027883a 	mov	r19,r2
    85e4:	00000406 	br	85f8 <__mdiff+0x94>
    85e8:	18005616 	blt	r3,zero,8744 <__mdiff+0x1e0>
    85ec:	34400504 	addi	r17,r6,20
    85f0:	2c000504 	addi	r16,r5,20
    85f4:	0029883a 	mov	r20,zero
    85f8:	91400117 	ldw	r5,4(r18)
    85fc:	0007c3c0 	call	7c3c <_Balloc>
    8600:	92400417 	ldw	r9,16(r18)
    8604:	9b000417 	ldw	r12,16(r19)
    8608:	12c00504 	addi	r11,r2,20
    860c:	4a51883a 	add	r8,r9,r9
    8610:	6319883a 	add	r12,r12,r12
    8614:	4211883a 	add	r8,r8,r8
    8618:	6319883a 	add	r12,r12,r12
    861c:	15000315 	stw	r20,12(r2)
    8620:	8211883a 	add	r8,r16,r8
    8624:	8b19883a 	add	r12,r17,r12
    8628:	0007883a 	mov	r3,zero
    862c:	81400017 	ldw	r5,0(r16)
    8630:	89c00017 	ldw	r7,0(r17)
    8634:	59800104 	addi	r6,r11,4
    8638:	293fffcc 	andi	r4,r5,65535
    863c:	20c7883a 	add	r3,r4,r3
    8640:	393fffcc 	andi	r4,r7,65535
    8644:	1909c83a 	sub	r4,r3,r4
    8648:	280ad43a 	srli	r5,r5,16
    864c:	380ed43a 	srli	r7,r7,16
    8650:	2007d43a 	srai	r3,r4,16
    8654:	213fffcc 	andi	r4,r4,65535
    8658:	29cbc83a 	sub	r5,r5,r7
    865c:	28c7883a 	add	r3,r5,r3
    8660:	180a943a 	slli	r5,r3,16
    8664:	8c400104 	addi	r17,r17,4
    8668:	84000104 	addi	r16,r16,4
    866c:	2908b03a 	or	r4,r5,r4
    8670:	59000015 	stw	r4,0(r11)
    8674:	1807d43a 	srai	r3,r3,16
    8678:	3015883a 	mov	r10,r6
    867c:	3017883a 	mov	r11,r6
    8680:	8b3fea36 	bltu	r17,r12,862c <__alt_data_end+0xff00862c>
    8684:	8200162e 	bgeu	r16,r8,86e0 <__mdiff+0x17c>
    8688:	8017883a 	mov	r11,r16
    868c:	59400017 	ldw	r5,0(r11)
    8690:	31800104 	addi	r6,r6,4
    8694:	5ac00104 	addi	r11,r11,4
    8698:	293fffcc 	andi	r4,r5,65535
    869c:	20c7883a 	add	r3,r4,r3
    86a0:	280ed43a 	srli	r7,r5,16
    86a4:	180bd43a 	srai	r5,r3,16
    86a8:	193fffcc 	andi	r4,r3,65535
    86ac:	3947883a 	add	r3,r7,r5
    86b0:	180a943a 	slli	r5,r3,16
    86b4:	1807d43a 	srai	r3,r3,16
    86b8:	2908b03a 	or	r4,r5,r4
    86bc:	313fff15 	stw	r4,-4(r6)
    86c0:	5a3ff236 	bltu	r11,r8,868c <__alt_data_end+0xff00868c>
    86c4:	0406303a 	nor	r3,zero,r16
    86c8:	1a07883a 	add	r3,r3,r8
    86cc:	1806d0ba 	srli	r3,r3,2
    86d0:	18c00044 	addi	r3,r3,1
    86d4:	18c7883a 	add	r3,r3,r3
    86d8:	18c7883a 	add	r3,r3,r3
    86dc:	50d5883a 	add	r10,r10,r3
    86e0:	50ffff04 	addi	r3,r10,-4
    86e4:	2000041e 	bne	r4,zero,86f8 <__mdiff+0x194>
    86e8:	18ffff04 	addi	r3,r3,-4
    86ec:	19000017 	ldw	r4,0(r3)
    86f0:	4a7fffc4 	addi	r9,r9,-1
    86f4:	203ffc26 	beq	r4,zero,86e8 <__alt_data_end+0xff0086e8>
    86f8:	12400415 	stw	r9,16(r2)
    86fc:	dfc00517 	ldw	ra,20(sp)
    8700:	dd000417 	ldw	r20,16(sp)
    8704:	dcc00317 	ldw	r19,12(sp)
    8708:	dc800217 	ldw	r18,8(sp)
    870c:	dc400117 	ldw	r17,4(sp)
    8710:	dc000017 	ldw	r16,0(sp)
    8714:	dec00604 	addi	sp,sp,24
    8718:	f800283a 	ret
    871c:	000b883a 	mov	r5,zero
    8720:	0007c3c0 	call	7c3c <_Balloc>
    8724:	00c00044 	movi	r3,1
    8728:	10c00415 	stw	r3,16(r2)
    872c:	10000515 	stw	zero,20(r2)
    8730:	003ff206 	br	86fc <__alt_data_end+0xff0086fc>
    8734:	8023883a 	mov	r17,r16
    8738:	0029883a 	mov	r20,zero
    873c:	4021883a 	mov	r16,r8
    8740:	003fad06 	br	85f8 <__alt_data_end+0xff0085f8>
    8744:	9005883a 	mov	r2,r18
    8748:	94400504 	addi	r17,r18,20
    874c:	9c000504 	addi	r16,r19,20
    8750:	9825883a 	mov	r18,r19
    8754:	05000044 	movi	r20,1
    8758:	1027883a 	mov	r19,r2
    875c:	003fa606 	br	85f8 <__alt_data_end+0xff0085f8>

00008760 <__ulp>:
    8760:	295ffc2c 	andhi	r5,r5,32752
    8764:	00bf3034 	movhi	r2,64704
    8768:	2887883a 	add	r3,r5,r2
    876c:	00c0020e 	bge	zero,r3,8778 <__ulp+0x18>
    8770:	0005883a 	mov	r2,zero
    8774:	f800283a 	ret
    8778:	00c7c83a 	sub	r3,zero,r3
    877c:	1807d53a 	srai	r3,r3,20
    8780:	008004c4 	movi	r2,19
    8784:	10c00b0e 	bge	r2,r3,87b4 <__ulp+0x54>
    8788:	18bffb04 	addi	r2,r3,-20
    878c:	01000784 	movi	r4,30
    8790:	0007883a 	mov	r3,zero
    8794:	20800516 	blt	r4,r2,87ac <__ulp+0x4c>
    8798:	010007c4 	movi	r4,31
    879c:	2089c83a 	sub	r4,r4,r2
    87a0:	00800044 	movi	r2,1
    87a4:	1104983a 	sll	r2,r2,r4
    87a8:	f800283a 	ret
    87ac:	00800044 	movi	r2,1
    87b0:	f800283a 	ret
    87b4:	01400234 	movhi	r5,8
    87b8:	28c7d83a 	sra	r3,r5,r3
    87bc:	0005883a 	mov	r2,zero
    87c0:	f800283a 	ret

000087c4 <__b2d>:
    87c4:	defffa04 	addi	sp,sp,-24
    87c8:	dc000015 	stw	r16,0(sp)
    87cc:	24000417 	ldw	r16,16(r4)
    87d0:	dc400115 	stw	r17,4(sp)
    87d4:	24400504 	addi	r17,r4,20
    87d8:	8421883a 	add	r16,r16,r16
    87dc:	8421883a 	add	r16,r16,r16
    87e0:	8c21883a 	add	r16,r17,r16
    87e4:	dc800215 	stw	r18,8(sp)
    87e8:	84bfff17 	ldw	r18,-4(r16)
    87ec:	dd000415 	stw	r20,16(sp)
    87f0:	dcc00315 	stw	r19,12(sp)
    87f4:	9009883a 	mov	r4,r18
    87f8:	2829883a 	mov	r20,r5
    87fc:	dfc00515 	stw	ra,20(sp)
    8800:	0007f300 	call	7f30 <__hi0bits>
    8804:	00c00804 	movi	r3,32
    8808:	1889c83a 	sub	r4,r3,r2
    880c:	a1000015 	stw	r4,0(r20)
    8810:	01000284 	movi	r4,10
    8814:	84ffff04 	addi	r19,r16,-4
    8818:	20801216 	blt	r4,r2,8864 <__b2d+0xa0>
    881c:	018002c4 	movi	r6,11
    8820:	308dc83a 	sub	r6,r6,r2
    8824:	9186d83a 	srl	r3,r18,r6
    8828:	18cffc34 	orhi	r3,r3,16368
    882c:	8cc0212e 	bgeu	r17,r19,88b4 <__b2d+0xf0>
    8830:	813ffe17 	ldw	r4,-8(r16)
    8834:	218cd83a 	srl	r6,r4,r6
    8838:	10800544 	addi	r2,r2,21
    883c:	9084983a 	sll	r2,r18,r2
    8840:	1184b03a 	or	r2,r2,r6
    8844:	dfc00517 	ldw	ra,20(sp)
    8848:	dd000417 	ldw	r20,16(sp)
    884c:	dcc00317 	ldw	r19,12(sp)
    8850:	dc800217 	ldw	r18,8(sp)
    8854:	dc400117 	ldw	r17,4(sp)
    8858:	dc000017 	ldw	r16,0(sp)
    885c:	dec00604 	addi	sp,sp,24
    8860:	f800283a 	ret
    8864:	8cc00f2e 	bgeu	r17,r19,88a4 <__b2d+0xe0>
    8868:	117ffd44 	addi	r5,r2,-11
    886c:	80bffe17 	ldw	r2,-8(r16)
    8870:	28000e26 	beq	r5,zero,88ac <__b2d+0xe8>
    8874:	1949c83a 	sub	r4,r3,r5
    8878:	9164983a 	sll	r18,r18,r5
    887c:	1106d83a 	srl	r3,r2,r4
    8880:	81bffe04 	addi	r6,r16,-8
    8884:	948ffc34 	orhi	r18,r18,16368
    8888:	90c6b03a 	or	r3,r18,r3
    888c:	89800e2e 	bgeu	r17,r6,88c8 <__b2d+0x104>
    8890:	81bffd17 	ldw	r6,-12(r16)
    8894:	1144983a 	sll	r2,r2,r5
    8898:	310ad83a 	srl	r5,r6,r4
    889c:	2884b03a 	or	r2,r5,r2
    88a0:	003fe806 	br	8844 <__alt_data_end+0xff008844>
    88a4:	10bffd44 	addi	r2,r2,-11
    88a8:	1000041e 	bne	r2,zero,88bc <__b2d+0xf8>
    88ac:	90cffc34 	orhi	r3,r18,16368
    88b0:	003fe406 	br	8844 <__alt_data_end+0xff008844>
    88b4:	000d883a 	mov	r6,zero
    88b8:	003fdf06 	br	8838 <__alt_data_end+0xff008838>
    88bc:	90a4983a 	sll	r18,r18,r2
    88c0:	0005883a 	mov	r2,zero
    88c4:	003ff906 	br	88ac <__alt_data_end+0xff0088ac>
    88c8:	1144983a 	sll	r2,r2,r5
    88cc:	003fdd06 	br	8844 <__alt_data_end+0xff008844>

000088d0 <__d2b>:
    88d0:	defff804 	addi	sp,sp,-32
    88d4:	dc000215 	stw	r16,8(sp)
    88d8:	3021883a 	mov	r16,r6
    88dc:	dc400315 	stw	r17,12(sp)
    88e0:	8022907a 	slli	r17,r16,1
    88e4:	dd000615 	stw	r20,24(sp)
    88e8:	2829883a 	mov	r20,r5
    88ec:	01400044 	movi	r5,1
    88f0:	dcc00515 	stw	r19,20(sp)
    88f4:	dc800415 	stw	r18,16(sp)
    88f8:	dfc00715 	stw	ra,28(sp)
    88fc:	3825883a 	mov	r18,r7
    8900:	8822d57a 	srli	r17,r17,21
    8904:	0007c3c0 	call	7c3c <_Balloc>
    8908:	1027883a 	mov	r19,r2
    890c:	00800434 	movhi	r2,16
    8910:	10bfffc4 	addi	r2,r2,-1
    8914:	808c703a 	and	r6,r16,r2
    8918:	88000126 	beq	r17,zero,8920 <__d2b+0x50>
    891c:	31800434 	orhi	r6,r6,16
    8920:	d9800015 	stw	r6,0(sp)
    8924:	a0002426 	beq	r20,zero,89b8 <__d2b+0xe8>
    8928:	d9000104 	addi	r4,sp,4
    892c:	dd000115 	stw	r20,4(sp)
    8930:	0007f980 	call	7f98 <__lo0bits>
    8934:	d8c00017 	ldw	r3,0(sp)
    8938:	10002f1e 	bne	r2,zero,89f8 <__d2b+0x128>
    893c:	d9000117 	ldw	r4,4(sp)
    8940:	99000515 	stw	r4,20(r19)
    8944:	1821003a 	cmpeq	r16,r3,zero
    8948:	01000084 	movi	r4,2
    894c:	2421c83a 	sub	r16,r4,r16
    8950:	98c00615 	stw	r3,24(r19)
    8954:	9c000415 	stw	r16,16(r19)
    8958:	88001f1e 	bne	r17,zero,89d8 <__d2b+0x108>
    895c:	10bef384 	addi	r2,r2,-1074
    8960:	90800015 	stw	r2,0(r18)
    8964:	00900034 	movhi	r2,16384
    8968:	10bfffc4 	addi	r2,r2,-1
    896c:	8085883a 	add	r2,r16,r2
    8970:	1085883a 	add	r2,r2,r2
    8974:	1085883a 	add	r2,r2,r2
    8978:	9885883a 	add	r2,r19,r2
    897c:	11000517 	ldw	r4,20(r2)
    8980:	8020917a 	slli	r16,r16,5
    8984:	0007f300 	call	7f30 <__hi0bits>
    8988:	d8c00817 	ldw	r3,32(sp)
    898c:	8085c83a 	sub	r2,r16,r2
    8990:	18800015 	stw	r2,0(r3)
    8994:	9805883a 	mov	r2,r19
    8998:	dfc00717 	ldw	ra,28(sp)
    899c:	dd000617 	ldw	r20,24(sp)
    89a0:	dcc00517 	ldw	r19,20(sp)
    89a4:	dc800417 	ldw	r18,16(sp)
    89a8:	dc400317 	ldw	r17,12(sp)
    89ac:	dc000217 	ldw	r16,8(sp)
    89b0:	dec00804 	addi	sp,sp,32
    89b4:	f800283a 	ret
    89b8:	d809883a 	mov	r4,sp
    89bc:	0007f980 	call	7f98 <__lo0bits>
    89c0:	d8c00017 	ldw	r3,0(sp)
    89c4:	04000044 	movi	r16,1
    89c8:	9c000415 	stw	r16,16(r19)
    89cc:	98c00515 	stw	r3,20(r19)
    89d0:	10800804 	addi	r2,r2,32
    89d4:	883fe126 	beq	r17,zero,895c <__alt_data_end+0xff00895c>
    89d8:	00c00d44 	movi	r3,53
    89dc:	8c7ef344 	addi	r17,r17,-1075
    89e0:	88a3883a 	add	r17,r17,r2
    89e4:	1885c83a 	sub	r2,r3,r2
    89e8:	d8c00817 	ldw	r3,32(sp)
    89ec:	94400015 	stw	r17,0(r18)
    89f0:	18800015 	stw	r2,0(r3)
    89f4:	003fe706 	br	8994 <__alt_data_end+0xff008994>
    89f8:	01000804 	movi	r4,32
    89fc:	2089c83a 	sub	r4,r4,r2
    8a00:	1908983a 	sll	r4,r3,r4
    8a04:	d9400117 	ldw	r5,4(sp)
    8a08:	1886d83a 	srl	r3,r3,r2
    8a0c:	2148b03a 	or	r4,r4,r5
    8a10:	99000515 	stw	r4,20(r19)
    8a14:	d8c00015 	stw	r3,0(sp)
    8a18:	003fca06 	br	8944 <__alt_data_end+0xff008944>

00008a1c <__ratio>:
    8a1c:	defff904 	addi	sp,sp,-28
    8a20:	dc400315 	stw	r17,12(sp)
    8a24:	2823883a 	mov	r17,r5
    8a28:	d9400104 	addi	r5,sp,4
    8a2c:	dfc00615 	stw	ra,24(sp)
    8a30:	dcc00515 	stw	r19,20(sp)
    8a34:	dc800415 	stw	r18,16(sp)
    8a38:	2027883a 	mov	r19,r4
    8a3c:	dc000215 	stw	r16,8(sp)
    8a40:	00087c40 	call	87c4 <__b2d>
    8a44:	d80b883a 	mov	r5,sp
    8a48:	8809883a 	mov	r4,r17
    8a4c:	1025883a 	mov	r18,r2
    8a50:	1821883a 	mov	r16,r3
    8a54:	00087c40 	call	87c4 <__b2d>
    8a58:	8a000417 	ldw	r8,16(r17)
    8a5c:	99000417 	ldw	r4,16(r19)
    8a60:	d9400117 	ldw	r5,4(sp)
    8a64:	2209c83a 	sub	r4,r4,r8
    8a68:	2010917a 	slli	r8,r4,5
    8a6c:	d9000017 	ldw	r4,0(sp)
    8a70:	2909c83a 	sub	r4,r5,r4
    8a74:	4109883a 	add	r4,r8,r4
    8a78:	01000e0e 	bge	zero,r4,8ab4 <__ratio+0x98>
    8a7c:	2008953a 	slli	r4,r4,20
    8a80:	2421883a 	add	r16,r4,r16
    8a84:	100d883a 	mov	r6,r2
    8a88:	180f883a 	mov	r7,r3
    8a8c:	9009883a 	mov	r4,r18
    8a90:	800b883a 	mov	r5,r16
    8a94:	000c7000 	call	c700 <__divdf3>
    8a98:	dfc00617 	ldw	ra,24(sp)
    8a9c:	dcc00517 	ldw	r19,20(sp)
    8aa0:	dc800417 	ldw	r18,16(sp)
    8aa4:	dc400317 	ldw	r17,12(sp)
    8aa8:	dc000217 	ldw	r16,8(sp)
    8aac:	dec00704 	addi	sp,sp,28
    8ab0:	f800283a 	ret
    8ab4:	2008953a 	slli	r4,r4,20
    8ab8:	1907c83a 	sub	r3,r3,r4
    8abc:	003ff106 	br	8a84 <__alt_data_end+0xff008a84>

00008ac0 <_mprec_log10>:
    8ac0:	defffe04 	addi	sp,sp,-8
    8ac4:	dc000015 	stw	r16,0(sp)
    8ac8:	dfc00115 	stw	ra,4(sp)
    8acc:	008005c4 	movi	r2,23
    8ad0:	2021883a 	mov	r16,r4
    8ad4:	11000d0e 	bge	r2,r4,8b0c <_mprec_log10+0x4c>
    8ad8:	0005883a 	mov	r2,zero
    8adc:	00cffc34 	movhi	r3,16368
    8ae0:	843fffc4 	addi	r16,r16,-1
    8ae4:	000d883a 	mov	r6,zero
    8ae8:	01d00934 	movhi	r7,16420
    8aec:	1009883a 	mov	r4,r2
    8af0:	180b883a 	mov	r5,r3
    8af4:	000d2400 	call	d240 <__muldf3>
    8af8:	803ff91e 	bne	r16,zero,8ae0 <__alt_data_end+0xff008ae0>
    8afc:	dfc00117 	ldw	ra,4(sp)
    8b00:	dc000017 	ldw	r16,0(sp)
    8b04:	dec00204 	addi	sp,sp,8
    8b08:	f800283a 	ret
    8b0c:	202090fa 	slli	r16,r4,3
    8b10:	00800074 	movhi	r2,1
    8b14:	10853004 	addi	r2,r2,5312
    8b18:	1421883a 	add	r16,r2,r16
    8b1c:	80800017 	ldw	r2,0(r16)
    8b20:	80c00117 	ldw	r3,4(r16)
    8b24:	dfc00117 	ldw	ra,4(sp)
    8b28:	dc000017 	ldw	r16,0(sp)
    8b2c:	dec00204 	addi	sp,sp,8
    8b30:	f800283a 	ret

00008b34 <__copybits>:
    8b34:	297fffc4 	addi	r5,r5,-1
    8b38:	280fd17a 	srai	r7,r5,5
    8b3c:	30c00417 	ldw	r3,16(r6)
    8b40:	30800504 	addi	r2,r6,20
    8b44:	39c00044 	addi	r7,r7,1
    8b48:	18c7883a 	add	r3,r3,r3
    8b4c:	39cf883a 	add	r7,r7,r7
    8b50:	18c7883a 	add	r3,r3,r3
    8b54:	39cf883a 	add	r7,r7,r7
    8b58:	10c7883a 	add	r3,r2,r3
    8b5c:	21cf883a 	add	r7,r4,r7
    8b60:	10c00d2e 	bgeu	r2,r3,8b98 <__copybits+0x64>
    8b64:	200b883a 	mov	r5,r4
    8b68:	12000017 	ldw	r8,0(r2)
    8b6c:	29400104 	addi	r5,r5,4
    8b70:	10800104 	addi	r2,r2,4
    8b74:	2a3fff15 	stw	r8,-4(r5)
    8b78:	10fffb36 	bltu	r2,r3,8b68 <__alt_data_end+0xff008b68>
    8b7c:	1985c83a 	sub	r2,r3,r6
    8b80:	10bffac4 	addi	r2,r2,-21
    8b84:	1004d0ba 	srli	r2,r2,2
    8b88:	10800044 	addi	r2,r2,1
    8b8c:	1085883a 	add	r2,r2,r2
    8b90:	1085883a 	add	r2,r2,r2
    8b94:	2089883a 	add	r4,r4,r2
    8b98:	21c0032e 	bgeu	r4,r7,8ba8 <__copybits+0x74>
    8b9c:	20000015 	stw	zero,0(r4)
    8ba0:	21000104 	addi	r4,r4,4
    8ba4:	21fffd36 	bltu	r4,r7,8b9c <__alt_data_end+0xff008b9c>
    8ba8:	f800283a 	ret

00008bac <__any_on>:
    8bac:	20c00417 	ldw	r3,16(r4)
    8bb0:	2805d17a 	srai	r2,r5,5
    8bb4:	21000504 	addi	r4,r4,20
    8bb8:	18800d0e 	bge	r3,r2,8bf0 <__any_on+0x44>
    8bbc:	18c7883a 	add	r3,r3,r3
    8bc0:	18c7883a 	add	r3,r3,r3
    8bc4:	20c7883a 	add	r3,r4,r3
    8bc8:	20c0192e 	bgeu	r4,r3,8c30 <__any_on+0x84>
    8bcc:	18bfff17 	ldw	r2,-4(r3)
    8bd0:	18ffff04 	addi	r3,r3,-4
    8bd4:	1000041e 	bne	r2,zero,8be8 <__any_on+0x3c>
    8bd8:	20c0142e 	bgeu	r4,r3,8c2c <__any_on+0x80>
    8bdc:	18ffff04 	addi	r3,r3,-4
    8be0:	19400017 	ldw	r5,0(r3)
    8be4:	283ffc26 	beq	r5,zero,8bd8 <__alt_data_end+0xff008bd8>
    8be8:	00800044 	movi	r2,1
    8bec:	f800283a 	ret
    8bf0:	10c00a0e 	bge	r2,r3,8c1c <__any_on+0x70>
    8bf4:	1085883a 	add	r2,r2,r2
    8bf8:	1085883a 	add	r2,r2,r2
    8bfc:	294007cc 	andi	r5,r5,31
    8c00:	2087883a 	add	r3,r4,r2
    8c04:	283ff026 	beq	r5,zero,8bc8 <__alt_data_end+0xff008bc8>
    8c08:	19800017 	ldw	r6,0(r3)
    8c0c:	3144d83a 	srl	r2,r6,r5
    8c10:	114a983a 	sll	r5,r2,r5
    8c14:	317ff41e 	bne	r6,r5,8be8 <__alt_data_end+0xff008be8>
    8c18:	003feb06 	br	8bc8 <__alt_data_end+0xff008bc8>
    8c1c:	1085883a 	add	r2,r2,r2
    8c20:	1085883a 	add	r2,r2,r2
    8c24:	2087883a 	add	r3,r4,r2
    8c28:	003fe706 	br	8bc8 <__alt_data_end+0xff008bc8>
    8c2c:	f800283a 	ret
    8c30:	0005883a 	mov	r2,zero
    8c34:	f800283a 	ret

00008c38 <_realloc_r>:
    8c38:	defff604 	addi	sp,sp,-40
    8c3c:	dc800215 	stw	r18,8(sp)
    8c40:	dfc00915 	stw	ra,36(sp)
    8c44:	df000815 	stw	fp,32(sp)
    8c48:	ddc00715 	stw	r23,28(sp)
    8c4c:	dd800615 	stw	r22,24(sp)
    8c50:	dd400515 	stw	r21,20(sp)
    8c54:	dd000415 	stw	r20,16(sp)
    8c58:	dcc00315 	stw	r19,12(sp)
    8c5c:	dc400115 	stw	r17,4(sp)
    8c60:	dc000015 	stw	r16,0(sp)
    8c64:	3025883a 	mov	r18,r6
    8c68:	2800b726 	beq	r5,zero,8f48 <_realloc_r+0x310>
    8c6c:	282b883a 	mov	r21,r5
    8c70:	2029883a 	mov	r20,r4
    8c74:	000ea380 	call	ea38 <__malloc_lock>
    8c78:	a8bfff17 	ldw	r2,-4(r21)
    8c7c:	043fff04 	movi	r16,-4
    8c80:	90c002c4 	addi	r3,r18,11
    8c84:	01000584 	movi	r4,22
    8c88:	acfffe04 	addi	r19,r21,-8
    8c8c:	1420703a 	and	r16,r2,r16
    8c90:	20c0332e 	bgeu	r4,r3,8d60 <_realloc_r+0x128>
    8c94:	047ffe04 	movi	r17,-8
    8c98:	1c62703a 	and	r17,r3,r17
    8c9c:	8807883a 	mov	r3,r17
    8ca0:	88005816 	blt	r17,zero,8e04 <_realloc_r+0x1cc>
    8ca4:	8c805736 	bltu	r17,r18,8e04 <_realloc_r+0x1cc>
    8ca8:	80c0300e 	bge	r16,r3,8d6c <_realloc_r+0x134>
    8cac:	07000074 	movhi	fp,1
    8cb0:	e705f504 	addi	fp,fp,6100
    8cb4:	e1c00217 	ldw	r7,8(fp)
    8cb8:	9c09883a 	add	r4,r19,r16
    8cbc:	22000117 	ldw	r8,4(r4)
    8cc0:	21c06326 	beq	r4,r7,8e50 <_realloc_r+0x218>
    8cc4:	017fff84 	movi	r5,-2
    8cc8:	414a703a 	and	r5,r8,r5
    8ccc:	214b883a 	add	r5,r4,r5
    8cd0:	29800117 	ldw	r6,4(r5)
    8cd4:	3180004c 	andi	r6,r6,1
    8cd8:	30003f26 	beq	r6,zero,8dd8 <_realloc_r+0x1a0>
    8cdc:	1080004c 	andi	r2,r2,1
    8ce0:	10008326 	beq	r2,zero,8ef0 <_realloc_r+0x2b8>
    8ce4:	900b883a 	mov	r5,r18
    8ce8:	a009883a 	mov	r4,r20
    8cec:	0001d500 	call	1d50 <_malloc_r>
    8cf0:	1025883a 	mov	r18,r2
    8cf4:	10011e26 	beq	r2,zero,9170 <_realloc_r+0x538>
    8cf8:	a93fff17 	ldw	r4,-4(r21)
    8cfc:	10fffe04 	addi	r3,r2,-8
    8d00:	00bfff84 	movi	r2,-2
    8d04:	2084703a 	and	r2,r4,r2
    8d08:	9885883a 	add	r2,r19,r2
    8d0c:	1880ee26 	beq	r3,r2,90c8 <_realloc_r+0x490>
    8d10:	81bfff04 	addi	r6,r16,-4
    8d14:	00800904 	movi	r2,36
    8d18:	1180b836 	bltu	r2,r6,8ffc <_realloc_r+0x3c4>
    8d1c:	00c004c4 	movi	r3,19
    8d20:	19809636 	bltu	r3,r6,8f7c <_realloc_r+0x344>
    8d24:	9005883a 	mov	r2,r18
    8d28:	a807883a 	mov	r3,r21
    8d2c:	19000017 	ldw	r4,0(r3)
    8d30:	11000015 	stw	r4,0(r2)
    8d34:	19000117 	ldw	r4,4(r3)
    8d38:	11000115 	stw	r4,4(r2)
    8d3c:	18c00217 	ldw	r3,8(r3)
    8d40:	10c00215 	stw	r3,8(r2)
    8d44:	a80b883a 	mov	r5,r21
    8d48:	a009883a 	mov	r4,r20
    8d4c:	0006ba00 	call	6ba0 <_free_r>
    8d50:	a009883a 	mov	r4,r20
    8d54:	000ea5c0 	call	ea5c <__malloc_unlock>
    8d58:	9005883a 	mov	r2,r18
    8d5c:	00001206 	br	8da8 <_realloc_r+0x170>
    8d60:	00c00404 	movi	r3,16
    8d64:	1823883a 	mov	r17,r3
    8d68:	003fce06 	br	8ca4 <__alt_data_end+0xff008ca4>
    8d6c:	a825883a 	mov	r18,r21
    8d70:	8445c83a 	sub	r2,r16,r17
    8d74:	00c003c4 	movi	r3,15
    8d78:	18802636 	bltu	r3,r2,8e14 <_realloc_r+0x1dc>
    8d7c:	99800117 	ldw	r6,4(r19)
    8d80:	9c07883a 	add	r3,r19,r16
    8d84:	3180004c 	andi	r6,r6,1
    8d88:	3420b03a 	or	r16,r6,r16
    8d8c:	9c000115 	stw	r16,4(r19)
    8d90:	18800117 	ldw	r2,4(r3)
    8d94:	10800054 	ori	r2,r2,1
    8d98:	18800115 	stw	r2,4(r3)
    8d9c:	a009883a 	mov	r4,r20
    8da0:	000ea5c0 	call	ea5c <__malloc_unlock>
    8da4:	9005883a 	mov	r2,r18
    8da8:	dfc00917 	ldw	ra,36(sp)
    8dac:	df000817 	ldw	fp,32(sp)
    8db0:	ddc00717 	ldw	r23,28(sp)
    8db4:	dd800617 	ldw	r22,24(sp)
    8db8:	dd400517 	ldw	r21,20(sp)
    8dbc:	dd000417 	ldw	r20,16(sp)
    8dc0:	dcc00317 	ldw	r19,12(sp)
    8dc4:	dc800217 	ldw	r18,8(sp)
    8dc8:	dc400117 	ldw	r17,4(sp)
    8dcc:	dc000017 	ldw	r16,0(sp)
    8dd0:	dec00a04 	addi	sp,sp,40
    8dd4:	f800283a 	ret
    8dd8:	017fff04 	movi	r5,-4
    8ddc:	414a703a 	and	r5,r8,r5
    8de0:	814d883a 	add	r6,r16,r5
    8de4:	30c01f16 	blt	r6,r3,8e64 <_realloc_r+0x22c>
    8de8:	20800317 	ldw	r2,12(r4)
    8dec:	20c00217 	ldw	r3,8(r4)
    8df0:	a825883a 	mov	r18,r21
    8df4:	3021883a 	mov	r16,r6
    8df8:	18800315 	stw	r2,12(r3)
    8dfc:	10c00215 	stw	r3,8(r2)
    8e00:	003fdb06 	br	8d70 <__alt_data_end+0xff008d70>
    8e04:	00800304 	movi	r2,12
    8e08:	a0800015 	stw	r2,0(r20)
    8e0c:	0005883a 	mov	r2,zero
    8e10:	003fe506 	br	8da8 <__alt_data_end+0xff008da8>
    8e14:	98c00117 	ldw	r3,4(r19)
    8e18:	9c4b883a 	add	r5,r19,r17
    8e1c:	11000054 	ori	r4,r2,1
    8e20:	18c0004c 	andi	r3,r3,1
    8e24:	1c62b03a 	or	r17,r3,r17
    8e28:	9c400115 	stw	r17,4(r19)
    8e2c:	29000115 	stw	r4,4(r5)
    8e30:	2885883a 	add	r2,r5,r2
    8e34:	10c00117 	ldw	r3,4(r2)
    8e38:	29400204 	addi	r5,r5,8
    8e3c:	a009883a 	mov	r4,r20
    8e40:	18c00054 	ori	r3,r3,1
    8e44:	10c00115 	stw	r3,4(r2)
    8e48:	0006ba00 	call	6ba0 <_free_r>
    8e4c:	003fd306 	br	8d9c <__alt_data_end+0xff008d9c>
    8e50:	017fff04 	movi	r5,-4
    8e54:	414a703a 	and	r5,r8,r5
    8e58:	89800404 	addi	r6,r17,16
    8e5c:	8151883a 	add	r8,r16,r5
    8e60:	4180590e 	bge	r8,r6,8fc8 <_realloc_r+0x390>
    8e64:	1080004c 	andi	r2,r2,1
    8e68:	103f9e1e 	bne	r2,zero,8ce4 <__alt_data_end+0xff008ce4>
    8e6c:	adbffe17 	ldw	r22,-8(r21)
    8e70:	00bfff04 	movi	r2,-4
    8e74:	9dadc83a 	sub	r22,r19,r22
    8e78:	b1800117 	ldw	r6,4(r22)
    8e7c:	3084703a 	and	r2,r6,r2
    8e80:	20002026 	beq	r4,zero,8f04 <_realloc_r+0x2cc>
    8e84:	80af883a 	add	r23,r16,r2
    8e88:	b96f883a 	add	r23,r23,r5
    8e8c:	21c05f26 	beq	r4,r7,900c <_realloc_r+0x3d4>
    8e90:	b8c01c16 	blt	r23,r3,8f04 <_realloc_r+0x2cc>
    8e94:	20800317 	ldw	r2,12(r4)
    8e98:	20c00217 	ldw	r3,8(r4)
    8e9c:	81bfff04 	addi	r6,r16,-4
    8ea0:	01000904 	movi	r4,36
    8ea4:	18800315 	stw	r2,12(r3)
    8ea8:	10c00215 	stw	r3,8(r2)
    8eac:	b0c00217 	ldw	r3,8(r22)
    8eb0:	b0800317 	ldw	r2,12(r22)
    8eb4:	b4800204 	addi	r18,r22,8
    8eb8:	18800315 	stw	r2,12(r3)
    8ebc:	10c00215 	stw	r3,8(r2)
    8ec0:	21801b36 	bltu	r4,r6,8f30 <_realloc_r+0x2f8>
    8ec4:	008004c4 	movi	r2,19
    8ec8:	1180352e 	bgeu	r2,r6,8fa0 <_realloc_r+0x368>
    8ecc:	a8800017 	ldw	r2,0(r21)
    8ed0:	b0800215 	stw	r2,8(r22)
    8ed4:	a8800117 	ldw	r2,4(r21)
    8ed8:	b0800315 	stw	r2,12(r22)
    8edc:	008006c4 	movi	r2,27
    8ee0:	11807f36 	bltu	r2,r6,90e0 <_realloc_r+0x4a8>
    8ee4:	b0800404 	addi	r2,r22,16
    8ee8:	ad400204 	addi	r21,r21,8
    8eec:	00002d06 	br	8fa4 <_realloc_r+0x36c>
    8ef0:	adbffe17 	ldw	r22,-8(r21)
    8ef4:	00bfff04 	movi	r2,-4
    8ef8:	9dadc83a 	sub	r22,r19,r22
    8efc:	b1000117 	ldw	r4,4(r22)
    8f00:	2084703a 	and	r2,r4,r2
    8f04:	b03f7726 	beq	r22,zero,8ce4 <__alt_data_end+0xff008ce4>
    8f08:	80af883a 	add	r23,r16,r2
    8f0c:	b8ff7516 	blt	r23,r3,8ce4 <__alt_data_end+0xff008ce4>
    8f10:	b0800317 	ldw	r2,12(r22)
    8f14:	b0c00217 	ldw	r3,8(r22)
    8f18:	81bfff04 	addi	r6,r16,-4
    8f1c:	01000904 	movi	r4,36
    8f20:	18800315 	stw	r2,12(r3)
    8f24:	10c00215 	stw	r3,8(r2)
    8f28:	b4800204 	addi	r18,r22,8
    8f2c:	21bfe52e 	bgeu	r4,r6,8ec4 <__alt_data_end+0xff008ec4>
    8f30:	a80b883a 	mov	r5,r21
    8f34:	9009883a 	mov	r4,r18
    8f38:	00079b80 	call	79b8 <memmove>
    8f3c:	b821883a 	mov	r16,r23
    8f40:	b027883a 	mov	r19,r22
    8f44:	003f8a06 	br	8d70 <__alt_data_end+0xff008d70>
    8f48:	300b883a 	mov	r5,r6
    8f4c:	dfc00917 	ldw	ra,36(sp)
    8f50:	df000817 	ldw	fp,32(sp)
    8f54:	ddc00717 	ldw	r23,28(sp)
    8f58:	dd800617 	ldw	r22,24(sp)
    8f5c:	dd400517 	ldw	r21,20(sp)
    8f60:	dd000417 	ldw	r20,16(sp)
    8f64:	dcc00317 	ldw	r19,12(sp)
    8f68:	dc800217 	ldw	r18,8(sp)
    8f6c:	dc400117 	ldw	r17,4(sp)
    8f70:	dc000017 	ldw	r16,0(sp)
    8f74:	dec00a04 	addi	sp,sp,40
    8f78:	0001d501 	jmpi	1d50 <_malloc_r>
    8f7c:	a8c00017 	ldw	r3,0(r21)
    8f80:	90c00015 	stw	r3,0(r18)
    8f84:	a8c00117 	ldw	r3,4(r21)
    8f88:	90c00115 	stw	r3,4(r18)
    8f8c:	00c006c4 	movi	r3,27
    8f90:	19804536 	bltu	r3,r6,90a8 <_realloc_r+0x470>
    8f94:	90800204 	addi	r2,r18,8
    8f98:	a8c00204 	addi	r3,r21,8
    8f9c:	003f6306 	br	8d2c <__alt_data_end+0xff008d2c>
    8fa0:	9005883a 	mov	r2,r18
    8fa4:	a8c00017 	ldw	r3,0(r21)
    8fa8:	b821883a 	mov	r16,r23
    8fac:	b027883a 	mov	r19,r22
    8fb0:	10c00015 	stw	r3,0(r2)
    8fb4:	a8c00117 	ldw	r3,4(r21)
    8fb8:	10c00115 	stw	r3,4(r2)
    8fbc:	a8c00217 	ldw	r3,8(r21)
    8fc0:	10c00215 	stw	r3,8(r2)
    8fc4:	003f6a06 	br	8d70 <__alt_data_end+0xff008d70>
    8fc8:	9c67883a 	add	r19,r19,r17
    8fcc:	4445c83a 	sub	r2,r8,r17
    8fd0:	e4c00215 	stw	r19,8(fp)
    8fd4:	10800054 	ori	r2,r2,1
    8fd8:	98800115 	stw	r2,4(r19)
    8fdc:	a8bfff17 	ldw	r2,-4(r21)
    8fe0:	a009883a 	mov	r4,r20
    8fe4:	1080004c 	andi	r2,r2,1
    8fe8:	1462b03a 	or	r17,r2,r17
    8fec:	ac7fff15 	stw	r17,-4(r21)
    8ff0:	000ea5c0 	call	ea5c <__malloc_unlock>
    8ff4:	a805883a 	mov	r2,r21
    8ff8:	003f6b06 	br	8da8 <__alt_data_end+0xff008da8>
    8ffc:	a80b883a 	mov	r5,r21
    9000:	9009883a 	mov	r4,r18
    9004:	00079b80 	call	79b8 <memmove>
    9008:	003f4e06 	br	8d44 <__alt_data_end+0xff008d44>
    900c:	89000404 	addi	r4,r17,16
    9010:	b93fbc16 	blt	r23,r4,8f04 <__alt_data_end+0xff008f04>
    9014:	b0800317 	ldw	r2,12(r22)
    9018:	b0c00217 	ldw	r3,8(r22)
    901c:	81bfff04 	addi	r6,r16,-4
    9020:	01000904 	movi	r4,36
    9024:	18800315 	stw	r2,12(r3)
    9028:	10c00215 	stw	r3,8(r2)
    902c:	b4800204 	addi	r18,r22,8
    9030:	21804336 	bltu	r4,r6,9140 <_realloc_r+0x508>
    9034:	008004c4 	movi	r2,19
    9038:	11803f2e 	bgeu	r2,r6,9138 <_realloc_r+0x500>
    903c:	a8800017 	ldw	r2,0(r21)
    9040:	b0800215 	stw	r2,8(r22)
    9044:	a8800117 	ldw	r2,4(r21)
    9048:	b0800315 	stw	r2,12(r22)
    904c:	008006c4 	movi	r2,27
    9050:	11803f36 	bltu	r2,r6,9150 <_realloc_r+0x518>
    9054:	b0800404 	addi	r2,r22,16
    9058:	ad400204 	addi	r21,r21,8
    905c:	a8c00017 	ldw	r3,0(r21)
    9060:	10c00015 	stw	r3,0(r2)
    9064:	a8c00117 	ldw	r3,4(r21)
    9068:	10c00115 	stw	r3,4(r2)
    906c:	a8c00217 	ldw	r3,8(r21)
    9070:	10c00215 	stw	r3,8(r2)
    9074:	b447883a 	add	r3,r22,r17
    9078:	bc45c83a 	sub	r2,r23,r17
    907c:	e0c00215 	stw	r3,8(fp)
    9080:	10800054 	ori	r2,r2,1
    9084:	18800115 	stw	r2,4(r3)
    9088:	b0800117 	ldw	r2,4(r22)
    908c:	a009883a 	mov	r4,r20
    9090:	1080004c 	andi	r2,r2,1
    9094:	1462b03a 	or	r17,r2,r17
    9098:	b4400115 	stw	r17,4(r22)
    909c:	000ea5c0 	call	ea5c <__malloc_unlock>
    90a0:	9005883a 	mov	r2,r18
    90a4:	003f4006 	br	8da8 <__alt_data_end+0xff008da8>
    90a8:	a8c00217 	ldw	r3,8(r21)
    90ac:	90c00215 	stw	r3,8(r18)
    90b0:	a8c00317 	ldw	r3,12(r21)
    90b4:	90c00315 	stw	r3,12(r18)
    90b8:	30801126 	beq	r6,r2,9100 <_realloc_r+0x4c8>
    90bc:	90800404 	addi	r2,r18,16
    90c0:	a8c00404 	addi	r3,r21,16
    90c4:	003f1906 	br	8d2c <__alt_data_end+0xff008d2c>
    90c8:	90ffff17 	ldw	r3,-4(r18)
    90cc:	00bfff04 	movi	r2,-4
    90d0:	a825883a 	mov	r18,r21
    90d4:	1884703a 	and	r2,r3,r2
    90d8:	80a1883a 	add	r16,r16,r2
    90dc:	003f2406 	br	8d70 <__alt_data_end+0xff008d70>
    90e0:	a8800217 	ldw	r2,8(r21)
    90e4:	b0800415 	stw	r2,16(r22)
    90e8:	a8800317 	ldw	r2,12(r21)
    90ec:	b0800515 	stw	r2,20(r22)
    90f0:	31000a26 	beq	r6,r4,911c <_realloc_r+0x4e4>
    90f4:	b0800604 	addi	r2,r22,24
    90f8:	ad400404 	addi	r21,r21,16
    90fc:	003fa906 	br	8fa4 <__alt_data_end+0xff008fa4>
    9100:	a9000417 	ldw	r4,16(r21)
    9104:	90800604 	addi	r2,r18,24
    9108:	a8c00604 	addi	r3,r21,24
    910c:	91000415 	stw	r4,16(r18)
    9110:	a9000517 	ldw	r4,20(r21)
    9114:	91000515 	stw	r4,20(r18)
    9118:	003f0406 	br	8d2c <__alt_data_end+0xff008d2c>
    911c:	a8c00417 	ldw	r3,16(r21)
    9120:	ad400604 	addi	r21,r21,24
    9124:	b0800804 	addi	r2,r22,32
    9128:	b0c00615 	stw	r3,24(r22)
    912c:	a8ffff17 	ldw	r3,-4(r21)
    9130:	b0c00715 	stw	r3,28(r22)
    9134:	003f9b06 	br	8fa4 <__alt_data_end+0xff008fa4>
    9138:	9005883a 	mov	r2,r18
    913c:	003fc706 	br	905c <__alt_data_end+0xff00905c>
    9140:	a80b883a 	mov	r5,r21
    9144:	9009883a 	mov	r4,r18
    9148:	00079b80 	call	79b8 <memmove>
    914c:	003fc906 	br	9074 <__alt_data_end+0xff009074>
    9150:	a8800217 	ldw	r2,8(r21)
    9154:	b0800415 	stw	r2,16(r22)
    9158:	a8800317 	ldw	r2,12(r21)
    915c:	b0800515 	stw	r2,20(r22)
    9160:	31000726 	beq	r6,r4,9180 <_realloc_r+0x548>
    9164:	b0800604 	addi	r2,r22,24
    9168:	ad400404 	addi	r21,r21,16
    916c:	003fbb06 	br	905c <__alt_data_end+0xff00905c>
    9170:	a009883a 	mov	r4,r20
    9174:	000ea5c0 	call	ea5c <__malloc_unlock>
    9178:	0005883a 	mov	r2,zero
    917c:	003f0a06 	br	8da8 <__alt_data_end+0xff008da8>
    9180:	a8c00417 	ldw	r3,16(r21)
    9184:	ad400604 	addi	r21,r21,24
    9188:	b0800804 	addi	r2,r22,32
    918c:	b0c00615 	stw	r3,24(r22)
    9190:	a8ffff17 	ldw	r3,-4(r21)
    9194:	b0c00715 	stw	r3,28(r22)
    9198:	003fb006 	br	905c <__alt_data_end+0xff00905c>

0000919c <__fpclassifyd>:
    919c:	00a00034 	movhi	r2,32768
    91a0:	10bfffc4 	addi	r2,r2,-1
    91a4:	2884703a 	and	r2,r5,r2
    91a8:	10000726 	beq	r2,zero,91c8 <__fpclassifyd+0x2c>
    91ac:	00fffc34 	movhi	r3,65520
    91b0:	019ff834 	movhi	r6,32736
    91b4:	28c7883a 	add	r3,r5,r3
    91b8:	31bfffc4 	addi	r6,r6,-1
    91bc:	30c00536 	bltu	r6,r3,91d4 <__fpclassifyd+0x38>
    91c0:	00800104 	movi	r2,4
    91c4:	f800283a 	ret
    91c8:	2000021e 	bne	r4,zero,91d4 <__fpclassifyd+0x38>
    91cc:	00800084 	movi	r2,2
    91d0:	f800283a 	ret
    91d4:	00dffc34 	movhi	r3,32752
    91d8:	019ff834 	movhi	r6,32736
    91dc:	28cb883a 	add	r5,r5,r3
    91e0:	31bfffc4 	addi	r6,r6,-1
    91e4:	317ff62e 	bgeu	r6,r5,91c0 <__alt_data_end+0xff0091c0>
    91e8:	01400434 	movhi	r5,16
    91ec:	297fffc4 	addi	r5,r5,-1
    91f0:	28800236 	bltu	r5,r2,91fc <__fpclassifyd+0x60>
    91f4:	008000c4 	movi	r2,3
    91f8:	f800283a 	ret
    91fc:	10c00226 	beq	r2,r3,9208 <__fpclassifyd+0x6c>
    9200:	0005883a 	mov	r2,zero
    9204:	f800283a 	ret
    9208:	2005003a 	cmpeq	r2,r4,zero
    920c:	f800283a 	ret

00009210 <__sread>:
    9210:	defffe04 	addi	sp,sp,-8
    9214:	dc000015 	stw	r16,0(sp)
    9218:	2821883a 	mov	r16,r5
    921c:	2940038f 	ldh	r5,14(r5)
    9220:	dfc00115 	stw	ra,4(sp)
    9224:	000b0040 	call	b004 <_read_r>
    9228:	10000716 	blt	r2,zero,9248 <__sread+0x38>
    922c:	80c01417 	ldw	r3,80(r16)
    9230:	1887883a 	add	r3,r3,r2
    9234:	80c01415 	stw	r3,80(r16)
    9238:	dfc00117 	ldw	ra,4(sp)
    923c:	dc000017 	ldw	r16,0(sp)
    9240:	dec00204 	addi	sp,sp,8
    9244:	f800283a 	ret
    9248:	80c0030b 	ldhu	r3,12(r16)
    924c:	18fbffcc 	andi	r3,r3,61439
    9250:	80c0030d 	sth	r3,12(r16)
    9254:	dfc00117 	ldw	ra,4(sp)
    9258:	dc000017 	ldw	r16,0(sp)
    925c:	dec00204 	addi	sp,sp,8
    9260:	f800283a 	ret

00009264 <__seofread>:
    9264:	0005883a 	mov	r2,zero
    9268:	f800283a 	ret

0000926c <__swrite>:
    926c:	2880030b 	ldhu	r2,12(r5)
    9270:	defffb04 	addi	sp,sp,-20
    9274:	dcc00315 	stw	r19,12(sp)
    9278:	dc800215 	stw	r18,8(sp)
    927c:	dc400115 	stw	r17,4(sp)
    9280:	dc000015 	stw	r16,0(sp)
    9284:	dfc00415 	stw	ra,16(sp)
    9288:	10c0400c 	andi	r3,r2,256
    928c:	2821883a 	mov	r16,r5
    9290:	2023883a 	mov	r17,r4
    9294:	3025883a 	mov	r18,r6
    9298:	3827883a 	mov	r19,r7
    929c:	18000526 	beq	r3,zero,92b4 <__swrite+0x48>
    92a0:	2940038f 	ldh	r5,14(r5)
    92a4:	01c00084 	movi	r7,2
    92a8:	000d883a 	mov	r6,zero
    92ac:	000afa40 	call	afa4 <_lseek_r>
    92b0:	8080030b 	ldhu	r2,12(r16)
    92b4:	8140038f 	ldh	r5,14(r16)
    92b8:	10bbffcc 	andi	r2,r2,61439
    92bc:	980f883a 	mov	r7,r19
    92c0:	900d883a 	mov	r6,r18
    92c4:	8809883a 	mov	r4,r17
    92c8:	8080030d 	sth	r2,12(r16)
    92cc:	dfc00417 	ldw	ra,16(sp)
    92d0:	dcc00317 	ldw	r19,12(sp)
    92d4:	dc800217 	ldw	r18,8(sp)
    92d8:	dc400117 	ldw	r17,4(sp)
    92dc:	dc000017 	ldw	r16,0(sp)
    92e0:	dec00504 	addi	sp,sp,20
    92e4:	000aa701 	jmpi	aa70 <_write_r>

000092e8 <__sseek>:
    92e8:	defffe04 	addi	sp,sp,-8
    92ec:	dc000015 	stw	r16,0(sp)
    92f0:	2821883a 	mov	r16,r5
    92f4:	2940038f 	ldh	r5,14(r5)
    92f8:	dfc00115 	stw	ra,4(sp)
    92fc:	000afa40 	call	afa4 <_lseek_r>
    9300:	00ffffc4 	movi	r3,-1
    9304:	10c00826 	beq	r2,r3,9328 <__sseek+0x40>
    9308:	80c0030b 	ldhu	r3,12(r16)
    930c:	80801415 	stw	r2,80(r16)
    9310:	18c40014 	ori	r3,r3,4096
    9314:	80c0030d 	sth	r3,12(r16)
    9318:	dfc00117 	ldw	ra,4(sp)
    931c:	dc000017 	ldw	r16,0(sp)
    9320:	dec00204 	addi	sp,sp,8
    9324:	f800283a 	ret
    9328:	80c0030b 	ldhu	r3,12(r16)
    932c:	18fbffcc 	andi	r3,r3,61439
    9330:	80c0030d 	sth	r3,12(r16)
    9334:	dfc00117 	ldw	ra,4(sp)
    9338:	dc000017 	ldw	r16,0(sp)
    933c:	dec00204 	addi	sp,sp,8
    9340:	f800283a 	ret

00009344 <__sclose>:
    9344:	2940038f 	ldh	r5,14(r5)
    9348:	000aad01 	jmpi	aad0 <_close_r>

0000934c <strcmp>:
    934c:	2144b03a 	or	r2,r4,r5
    9350:	108000cc 	andi	r2,r2,3
    9354:	1000171e 	bne	r2,zero,93b4 <strcmp+0x68>
    9358:	20800017 	ldw	r2,0(r4)
    935c:	28c00017 	ldw	r3,0(r5)
    9360:	10c0141e 	bne	r2,r3,93b4 <strcmp+0x68>
    9364:	027fbff4 	movhi	r9,65279
    9368:	4a7fbfc4 	addi	r9,r9,-257
    936c:	0086303a 	nor	r3,zero,r2
    9370:	02202074 	movhi	r8,32897
    9374:	1245883a 	add	r2,r2,r9
    9378:	42202004 	addi	r8,r8,-32640
    937c:	10c4703a 	and	r2,r2,r3
    9380:	1204703a 	and	r2,r2,r8
    9384:	10000226 	beq	r2,zero,9390 <strcmp+0x44>
    9388:	00002306 	br	9418 <strcmp+0xcc>
    938c:	1000221e 	bne	r2,zero,9418 <strcmp+0xcc>
    9390:	21000104 	addi	r4,r4,4
    9394:	20c00017 	ldw	r3,0(r4)
    9398:	29400104 	addi	r5,r5,4
    939c:	29800017 	ldw	r6,0(r5)
    93a0:	1a4f883a 	add	r7,r3,r9
    93a4:	00c4303a 	nor	r2,zero,r3
    93a8:	3884703a 	and	r2,r7,r2
    93ac:	1204703a 	and	r2,r2,r8
    93b0:	19bff626 	beq	r3,r6,938c <__alt_data_end+0xff00938c>
    93b4:	20800003 	ldbu	r2,0(r4)
    93b8:	10c03fcc 	andi	r3,r2,255
    93bc:	18c0201c 	xori	r3,r3,128
    93c0:	18ffe004 	addi	r3,r3,-128
    93c4:	18000c26 	beq	r3,zero,93f8 <strcmp+0xac>
    93c8:	29800007 	ldb	r6,0(r5)
    93cc:	19800326 	beq	r3,r6,93dc <strcmp+0x90>
    93d0:	00001306 	br	9420 <strcmp+0xd4>
    93d4:	29800007 	ldb	r6,0(r5)
    93d8:	11800b1e 	bne	r2,r6,9408 <strcmp+0xbc>
    93dc:	21000044 	addi	r4,r4,1
    93e0:	20c00003 	ldbu	r3,0(r4)
    93e4:	29400044 	addi	r5,r5,1
    93e8:	18803fcc 	andi	r2,r3,255
    93ec:	1080201c 	xori	r2,r2,128
    93f0:	10bfe004 	addi	r2,r2,-128
    93f4:	103ff71e 	bne	r2,zero,93d4 <__alt_data_end+0xff0093d4>
    93f8:	0007883a 	mov	r3,zero
    93fc:	28800003 	ldbu	r2,0(r5)
    9400:	1885c83a 	sub	r2,r3,r2
    9404:	f800283a 	ret
    9408:	28800003 	ldbu	r2,0(r5)
    940c:	18c03fcc 	andi	r3,r3,255
    9410:	1885c83a 	sub	r2,r3,r2
    9414:	f800283a 	ret
    9418:	0005883a 	mov	r2,zero
    941c:	f800283a 	ret
    9420:	10c03fcc 	andi	r3,r2,255
    9424:	003ff506 	br	93fc <__alt_data_end+0xff0093fc>

00009428 <__sprint_r.part.0>:
    9428:	28801917 	ldw	r2,100(r5)
    942c:	defff604 	addi	sp,sp,-40
    9430:	dd400515 	stw	r21,20(sp)
    9434:	dfc00915 	stw	ra,36(sp)
    9438:	df000815 	stw	fp,32(sp)
    943c:	ddc00715 	stw	r23,28(sp)
    9440:	dd800615 	stw	r22,24(sp)
    9444:	dd000415 	stw	r20,16(sp)
    9448:	dcc00315 	stw	r19,12(sp)
    944c:	dc800215 	stw	r18,8(sp)
    9450:	dc400115 	stw	r17,4(sp)
    9454:	dc000015 	stw	r16,0(sp)
    9458:	1088000c 	andi	r2,r2,8192
    945c:	302b883a 	mov	r21,r6
    9460:	10002e26 	beq	r2,zero,951c <__sprint_r.part.0+0xf4>
    9464:	30800217 	ldw	r2,8(r6)
    9468:	35800017 	ldw	r22,0(r6)
    946c:	10002926 	beq	r2,zero,9514 <__sprint_r.part.0+0xec>
    9470:	2827883a 	mov	r19,r5
    9474:	2029883a 	mov	r20,r4
    9478:	b5c00104 	addi	r23,r22,4
    947c:	04bfffc4 	movi	r18,-1
    9480:	bc400017 	ldw	r17,0(r23)
    9484:	b4000017 	ldw	r16,0(r22)
    9488:	0039883a 	mov	fp,zero
    948c:	8822d0ba 	srli	r17,r17,2
    9490:	8800031e 	bne	r17,zero,94a0 <__sprint_r.part.0+0x78>
    9494:	00001806 	br	94f8 <__sprint_r.part.0+0xd0>
    9498:	84000104 	addi	r16,r16,4
    949c:	8f001526 	beq	r17,fp,94f4 <__sprint_r.part.0+0xcc>
    94a0:	81400017 	ldw	r5,0(r16)
    94a4:	980d883a 	mov	r6,r19
    94a8:	a009883a 	mov	r4,r20
    94ac:	000ae500 	call	ae50 <_fputwc_r>
    94b0:	e7000044 	addi	fp,fp,1
    94b4:	14bff81e 	bne	r2,r18,9498 <__alt_data_end+0xff009498>
    94b8:	9005883a 	mov	r2,r18
    94bc:	a8000215 	stw	zero,8(r21)
    94c0:	a8000115 	stw	zero,4(r21)
    94c4:	dfc00917 	ldw	ra,36(sp)
    94c8:	df000817 	ldw	fp,32(sp)
    94cc:	ddc00717 	ldw	r23,28(sp)
    94d0:	dd800617 	ldw	r22,24(sp)
    94d4:	dd400517 	ldw	r21,20(sp)
    94d8:	dd000417 	ldw	r20,16(sp)
    94dc:	dcc00317 	ldw	r19,12(sp)
    94e0:	dc800217 	ldw	r18,8(sp)
    94e4:	dc400117 	ldw	r17,4(sp)
    94e8:	dc000017 	ldw	r16,0(sp)
    94ec:	dec00a04 	addi	sp,sp,40
    94f0:	f800283a 	ret
    94f4:	a8800217 	ldw	r2,8(r21)
    94f8:	8c63883a 	add	r17,r17,r17
    94fc:	8c63883a 	add	r17,r17,r17
    9500:	1445c83a 	sub	r2,r2,r17
    9504:	a8800215 	stw	r2,8(r21)
    9508:	b5800204 	addi	r22,r22,8
    950c:	bdc00204 	addi	r23,r23,8
    9510:	103fdb1e 	bne	r2,zero,9480 <__alt_data_end+0xff009480>
    9514:	0005883a 	mov	r2,zero
    9518:	003fe806 	br	94bc <__alt_data_end+0xff0094bc>
    951c:	0006eb00 	call	6eb0 <__sfvwrite_r>
    9520:	003fe606 	br	94bc <__alt_data_end+0xff0094bc>

00009524 <__sprint_r>:
    9524:	30c00217 	ldw	r3,8(r6)
    9528:	18000126 	beq	r3,zero,9530 <__sprint_r+0xc>
    952c:	00094281 	jmpi	9428 <__sprint_r.part.0>
    9530:	30000115 	stw	zero,4(r6)
    9534:	0005883a 	mov	r2,zero
    9538:	f800283a 	ret

0000953c <___vfiprintf_internal_r>:
    953c:	deffc904 	addi	sp,sp,-220
    9540:	df003515 	stw	fp,212(sp)
    9544:	dd003115 	stw	r20,196(sp)
    9548:	dfc03615 	stw	ra,216(sp)
    954c:	ddc03415 	stw	r23,208(sp)
    9550:	dd803315 	stw	r22,204(sp)
    9554:	dd403215 	stw	r21,200(sp)
    9558:	dcc03015 	stw	r19,192(sp)
    955c:	dc802f15 	stw	r18,188(sp)
    9560:	dc402e15 	stw	r17,184(sp)
    9564:	dc002d15 	stw	r16,180(sp)
    9568:	d9002015 	stw	r4,128(sp)
    956c:	d9c02215 	stw	r7,136(sp)
    9570:	2829883a 	mov	r20,r5
    9574:	3039883a 	mov	fp,r6
    9578:	20000226 	beq	r4,zero,9584 <___vfiprintf_internal_r+0x48>
    957c:	20800e17 	ldw	r2,56(r4)
    9580:	1000cf26 	beq	r2,zero,98c0 <___vfiprintf_internal_r+0x384>
    9584:	a080030b 	ldhu	r2,12(r20)
    9588:	10c8000c 	andi	r3,r2,8192
    958c:	1800061e 	bne	r3,zero,95a8 <___vfiprintf_internal_r+0x6c>
    9590:	a1001917 	ldw	r4,100(r20)
    9594:	00f7ffc4 	movi	r3,-8193
    9598:	10880014 	ori	r2,r2,8192
    959c:	20c6703a 	and	r3,r4,r3
    95a0:	a080030d 	sth	r2,12(r20)
    95a4:	a0c01915 	stw	r3,100(r20)
    95a8:	10c0020c 	andi	r3,r2,8
    95ac:	1800a926 	beq	r3,zero,9854 <___vfiprintf_internal_r+0x318>
    95b0:	a0c00417 	ldw	r3,16(r20)
    95b4:	1800a726 	beq	r3,zero,9854 <___vfiprintf_internal_r+0x318>
    95b8:	1080068c 	andi	r2,r2,26
    95bc:	00c00284 	movi	r3,10
    95c0:	10c0ac26 	beq	r2,r3,9874 <___vfiprintf_internal_r+0x338>
    95c4:	da801a04 	addi	r10,sp,104
    95c8:	da801e15 	stw	r10,120(sp)
    95cc:	d8801e17 	ldw	r2,120(sp)
    95d0:	da8019c4 	addi	r10,sp,103
    95d4:	05800074 	movhi	r22,1
    95d8:	05c00074 	movhi	r23,1
    95dc:	da801f15 	stw	r10,124(sp)
    95e0:	1295c83a 	sub	r10,r2,r10
    95e4:	b5856604 	addi	r22,r22,5528
    95e8:	bdc56204 	addi	r23,r23,5512
    95ec:	dec01a15 	stw	sp,104(sp)
    95f0:	d8001c15 	stw	zero,112(sp)
    95f4:	d8001b15 	stw	zero,108(sp)
    95f8:	d8002615 	stw	zero,152(sp)
    95fc:	d8002315 	stw	zero,140(sp)
    9600:	da802715 	stw	r10,156(sp)
    9604:	d811883a 	mov	r8,sp
    9608:	dd002115 	stw	r20,132(sp)
    960c:	e021883a 	mov	r16,fp
    9610:	80800007 	ldb	r2,0(r16)
    9614:	1003ea26 	beq	r2,zero,a5c0 <___vfiprintf_internal_r+0x1084>
    9618:	00c00944 	movi	r3,37
    961c:	8025883a 	mov	r18,r16
    9620:	10c0021e 	bne	r2,r3,962c <___vfiprintf_internal_r+0xf0>
    9624:	00001606 	br	9680 <___vfiprintf_internal_r+0x144>
    9628:	10c00326 	beq	r2,r3,9638 <___vfiprintf_internal_r+0xfc>
    962c:	94800044 	addi	r18,r18,1
    9630:	90800007 	ldb	r2,0(r18)
    9634:	103ffc1e 	bne	r2,zero,9628 <__alt_data_end+0xff009628>
    9638:	9423c83a 	sub	r17,r18,r16
    963c:	88001026 	beq	r17,zero,9680 <___vfiprintf_internal_r+0x144>
    9640:	d8c01c17 	ldw	r3,112(sp)
    9644:	d8801b17 	ldw	r2,108(sp)
    9648:	44000015 	stw	r16,0(r8)
    964c:	88c7883a 	add	r3,r17,r3
    9650:	10800044 	addi	r2,r2,1
    9654:	44400115 	stw	r17,4(r8)
    9658:	d8c01c15 	stw	r3,112(sp)
    965c:	d8801b15 	stw	r2,108(sp)
    9660:	010001c4 	movi	r4,7
    9664:	2080760e 	bge	r4,r2,9840 <___vfiprintf_internal_r+0x304>
    9668:	1803821e 	bne	r3,zero,a474 <___vfiprintf_internal_r+0xf38>
    966c:	da802317 	ldw	r10,140(sp)
    9670:	d8001b15 	stw	zero,108(sp)
    9674:	d811883a 	mov	r8,sp
    9678:	5455883a 	add	r10,r10,r17
    967c:	da802315 	stw	r10,140(sp)
    9680:	90800007 	ldb	r2,0(r18)
    9684:	10044626 	beq	r2,zero,a7a0 <___vfiprintf_internal_r+0x1264>
    9688:	90c00047 	ldb	r3,1(r18)
    968c:	94000044 	addi	r16,r18,1
    9690:	d8001d85 	stb	zero,118(sp)
    9694:	0009883a 	mov	r4,zero
    9698:	000f883a 	mov	r7,zero
    969c:	027fffc4 	movi	r9,-1
    96a0:	0023883a 	mov	r17,zero
    96a4:	0029883a 	mov	r20,zero
    96a8:	01401604 	movi	r5,88
    96ac:	01800244 	movi	r6,9
    96b0:	03400a84 	movi	r13,42
    96b4:	03001b04 	movi	r12,108
    96b8:	84000044 	addi	r16,r16,1
    96bc:	18bff804 	addi	r2,r3,-32
    96c0:	28827336 	bltu	r5,r2,a090 <___vfiprintf_internal_r+0xb54>
    96c4:	100490ba 	slli	r2,r2,2
    96c8:	02800074 	movhi	r10,1
    96cc:	52a5b704 	addi	r10,r10,-26916
    96d0:	1285883a 	add	r2,r2,r10
    96d4:	10800017 	ldw	r2,0(r2)
    96d8:	1000683a 	jmp	r2
    96dc:	00009dc4 	movi	zero,631
    96e0:	0000a090 	cmplti	zero,zero,642
    96e4:	0000a090 	cmplti	zero,zero,642
    96e8:	00009de4 	muli	zero,zero,631
    96ec:	0000a090 	cmplti	zero,zero,642
    96f0:	0000a090 	cmplti	zero,zero,642
    96f4:	0000a090 	cmplti	zero,zero,642
    96f8:	0000a090 	cmplti	zero,zero,642
    96fc:	0000a090 	cmplti	zero,zero,642
    9700:	0000a090 	cmplti	zero,zero,642
    9704:	00009fcc 	andi	zero,zero,639
    9708:	00009fe8 	cmpgeui	zero,zero,639
    970c:	0000a090 	cmplti	zero,zero,642
    9710:	000098d0 	cmplti	zero,zero,611
    9714:	00009ff8 	rdprs	zero,zero,639
    9718:	0000a090 	cmplti	zero,zero,642
    971c:	00009df0 	cmpltui	zero,zero,631
    9720:	00009dfc 	xorhi	zero,zero,631
    9724:	00009dfc 	xorhi	zero,zero,631
    9728:	00009dfc 	xorhi	zero,zero,631
    972c:	00009dfc 	xorhi	zero,zero,631
    9730:	00009dfc 	xorhi	zero,zero,631
    9734:	00009dfc 	xorhi	zero,zero,631
    9738:	00009dfc 	xorhi	zero,zero,631
    973c:	00009dfc 	xorhi	zero,zero,631
    9740:	00009dfc 	xorhi	zero,zero,631
    9744:	0000a090 	cmplti	zero,zero,642
    9748:	0000a090 	cmplti	zero,zero,642
    974c:	0000a090 	cmplti	zero,zero,642
    9750:	0000a090 	cmplti	zero,zero,642
    9754:	0000a090 	cmplti	zero,zero,642
    9758:	0000a090 	cmplti	zero,zero,642
    975c:	0000a090 	cmplti	zero,zero,642
    9760:	0000a090 	cmplti	zero,zero,642
    9764:	0000a090 	cmplti	zero,zero,642
    9768:	0000a090 	cmplti	zero,zero,642
    976c:	00009e28 	cmpgeui	zero,zero,632
    9770:	0000a090 	cmplti	zero,zero,642
    9774:	0000a090 	cmplti	zero,zero,642
    9778:	0000a090 	cmplti	zero,zero,642
    977c:	0000a090 	cmplti	zero,zero,642
    9780:	0000a090 	cmplti	zero,zero,642
    9784:	0000a090 	cmplti	zero,zero,642
    9788:	0000a090 	cmplti	zero,zero,642
    978c:	0000a090 	cmplti	zero,zero,642
    9790:	0000a090 	cmplti	zero,zero,642
    9794:	0000a090 	cmplti	zero,zero,642
    9798:	00009e60 	cmpeqi	zero,zero,633
    979c:	0000a090 	cmplti	zero,zero,642
    97a0:	0000a090 	cmplti	zero,zero,642
    97a4:	0000a090 	cmplti	zero,zero,642
    97a8:	0000a090 	cmplti	zero,zero,642
    97ac:	0000a090 	cmplti	zero,zero,642
    97b0:	00009eb8 	rdprs	zero,zero,634
    97b4:	0000a090 	cmplti	zero,zero,642
    97b8:	0000a090 	cmplti	zero,zero,642
    97bc:	00009f28 	cmpgeui	zero,zero,636
    97c0:	0000a090 	cmplti	zero,zero,642
    97c4:	0000a090 	cmplti	zero,zero,642
    97c8:	0000a090 	cmplti	zero,zero,642
    97cc:	0000a090 	cmplti	zero,zero,642
    97d0:	0000a090 	cmplti	zero,zero,642
    97d4:	0000a090 	cmplti	zero,zero,642
    97d8:	0000a090 	cmplti	zero,zero,642
    97dc:	0000a090 	cmplti	zero,zero,642
    97e0:	0000a090 	cmplti	zero,zero,642
    97e4:	0000a090 	cmplti	zero,zero,642
    97e8:	00009cd4 	movui	zero,627
    97ec:	00009d00 	call	9d0 <i2c_short_read+0x38>
    97f0:	0000a090 	cmplti	zero,zero,642
    97f4:	0000a090 	cmplti	zero,zero,642
    97f8:	0000a090 	cmplti	zero,zero,642
    97fc:	0000a038 	rdprs	zero,zero,640
    9800:	00009d00 	call	9d0 <i2c_short_read+0x38>
    9804:	0000a090 	cmplti	zero,zero,642
    9808:	0000a090 	cmplti	zero,zero,642
    980c:	00009b94 	movui	zero,622
    9810:	0000a090 	cmplti	zero,zero,642
    9814:	00009ba4 	muli	zero,zero,622
    9818:	00009be0 	cmpeqi	zero,zero,623
    981c:	000098dc 	xori	zero,zero,611
    9820:	00009b88 	cmpgei	zero,zero,622
    9824:	0000a090 	cmplti	zero,zero,642
    9828:	00009f64 	muli	zero,zero,637
    982c:	0000a090 	cmplti	zero,zero,642
    9830:	00009fbc 	xorhi	zero,zero,638
    9834:	0000a090 	cmplti	zero,zero,642
    9838:	0000a090 	cmplti	zero,zero,642
    983c:	00009c80 	call	9c8 <i2c_short_read+0x30>
    9840:	42000204 	addi	r8,r8,8
    9844:	da802317 	ldw	r10,140(sp)
    9848:	5455883a 	add	r10,r10,r17
    984c:	da802315 	stw	r10,140(sp)
    9850:	003f8b06 	br	9680 <__alt_data_end+0xff009680>
    9854:	d9002017 	ldw	r4,128(sp)
    9858:	a00b883a 	mov	r5,r20
    985c:	0004a580 	call	4a58 <__swsetup_r>
    9860:	1003b11e 	bne	r2,zero,a728 <___vfiprintf_internal_r+0x11ec>
    9864:	a080030b 	ldhu	r2,12(r20)
    9868:	00c00284 	movi	r3,10
    986c:	1080068c 	andi	r2,r2,26
    9870:	10ff541e 	bne	r2,r3,95c4 <__alt_data_end+0xff0095c4>
    9874:	a080038f 	ldh	r2,14(r20)
    9878:	103f5216 	blt	r2,zero,95c4 <__alt_data_end+0xff0095c4>
    987c:	d9c02217 	ldw	r7,136(sp)
    9880:	d9002017 	ldw	r4,128(sp)
    9884:	e00d883a 	mov	r6,fp
    9888:	a00b883a 	mov	r5,r20
    988c:	000a9b40 	call	a9b4 <__sbprintf>
    9890:	dfc03617 	ldw	ra,216(sp)
    9894:	df003517 	ldw	fp,212(sp)
    9898:	ddc03417 	ldw	r23,208(sp)
    989c:	dd803317 	ldw	r22,204(sp)
    98a0:	dd403217 	ldw	r21,200(sp)
    98a4:	dd003117 	ldw	r20,196(sp)
    98a8:	dcc03017 	ldw	r19,192(sp)
    98ac:	dc802f17 	ldw	r18,188(sp)
    98b0:	dc402e17 	ldw	r17,184(sp)
    98b4:	dc002d17 	ldw	r16,180(sp)
    98b8:	dec03704 	addi	sp,sp,220
    98bc:	f800283a 	ret
    98c0:	0006a2c0 	call	6a2c <__sinit>
    98c4:	003f2f06 	br	9584 <__alt_data_end+0xff009584>
    98c8:	0463c83a 	sub	r17,zero,r17
    98cc:	d8802215 	stw	r2,136(sp)
    98d0:	a5000114 	ori	r20,r20,4
    98d4:	80c00007 	ldb	r3,0(r16)
    98d8:	003f7706 	br	96b8 <__alt_data_end+0xff0096b8>
    98dc:	00800c04 	movi	r2,48
    98e0:	da802217 	ldw	r10,136(sp)
    98e4:	d8801d05 	stb	r2,116(sp)
    98e8:	00801e04 	movi	r2,120
    98ec:	d8801d45 	stb	r2,117(sp)
    98f0:	d8001d85 	stb	zero,118(sp)
    98f4:	50c00104 	addi	r3,r10,4
    98f8:	54800017 	ldw	r18,0(r10)
    98fc:	0027883a 	mov	r19,zero
    9900:	a0800094 	ori	r2,r20,2
    9904:	48030b16 	blt	r9,zero,a534 <___vfiprintf_internal_r+0xff8>
    9908:	00bfdfc4 	movi	r2,-129
    990c:	a096703a 	and	r11,r20,r2
    9910:	d8c02215 	stw	r3,136(sp)
    9914:	5d000094 	ori	r20,r11,2
    9918:	90032b1e 	bne	r18,zero,a5c8 <___vfiprintf_internal_r+0x108c>
    991c:	00800074 	movhi	r2,1
    9920:	10850104 	addi	r2,r2,5124
    9924:	d8802615 	stw	r2,152(sp)
    9928:	0039883a 	mov	fp,zero
    992c:	48017b1e 	bne	r9,zero,9f1c <___vfiprintf_internal_r+0x9e0>
    9930:	0013883a 	mov	r9,zero
    9934:	0027883a 	mov	r19,zero
    9938:	dd401a04 	addi	r21,sp,104
    993c:	4825883a 	mov	r18,r9
    9940:	4cc0010e 	bge	r9,r19,9948 <___vfiprintf_internal_r+0x40c>
    9944:	9825883a 	mov	r18,r19
    9948:	e7003fcc 	andi	fp,fp,255
    994c:	e700201c 	xori	fp,fp,128
    9950:	e73fe004 	addi	fp,fp,-128
    9954:	e0000126 	beq	fp,zero,995c <___vfiprintf_internal_r+0x420>
    9958:	94800044 	addi	r18,r18,1
    995c:	a380008c 	andi	r14,r20,2
    9960:	70000126 	beq	r14,zero,9968 <___vfiprintf_internal_r+0x42c>
    9964:	94800084 	addi	r18,r18,2
    9968:	a700210c 	andi	fp,r20,132
    996c:	e001df1e 	bne	fp,zero,a0ec <___vfiprintf_internal_r+0xbb0>
    9970:	8c87c83a 	sub	r3,r17,r18
    9974:	00c1dd0e 	bge	zero,r3,a0ec <___vfiprintf_internal_r+0xbb0>
    9978:	01c00404 	movi	r7,16
    997c:	d8801c17 	ldw	r2,112(sp)
    9980:	38c3ad0e 	bge	r7,r3,a838 <___vfiprintf_internal_r+0x12fc>
    9984:	02800074 	movhi	r10,1
    9988:	52856604 	addi	r10,r10,5528
    998c:	dc002915 	stw	r16,164(sp)
    9990:	d9801b17 	ldw	r6,108(sp)
    9994:	da802415 	stw	r10,144(sp)
    9998:	03c001c4 	movi	r15,7
    999c:	da402515 	stw	r9,148(sp)
    99a0:	db802815 	stw	r14,160(sp)
    99a4:	1821883a 	mov	r16,r3
    99a8:	00000506 	br	99c0 <___vfiprintf_internal_r+0x484>
    99ac:	31400084 	addi	r5,r6,2
    99b0:	42000204 	addi	r8,r8,8
    99b4:	200d883a 	mov	r6,r4
    99b8:	843ffc04 	addi	r16,r16,-16
    99bc:	3c000d0e 	bge	r7,r16,99f4 <___vfiprintf_internal_r+0x4b8>
    99c0:	10800404 	addi	r2,r2,16
    99c4:	31000044 	addi	r4,r6,1
    99c8:	45800015 	stw	r22,0(r8)
    99cc:	41c00115 	stw	r7,4(r8)
    99d0:	d8801c15 	stw	r2,112(sp)
    99d4:	d9001b15 	stw	r4,108(sp)
    99d8:	793ff40e 	bge	r15,r4,99ac <__alt_data_end+0xff0099ac>
    99dc:	1001b51e 	bne	r2,zero,a0b4 <___vfiprintf_internal_r+0xb78>
    99e0:	843ffc04 	addi	r16,r16,-16
    99e4:	000d883a 	mov	r6,zero
    99e8:	01400044 	movi	r5,1
    99ec:	d811883a 	mov	r8,sp
    99f0:	3c3ff316 	blt	r7,r16,99c0 <__alt_data_end+0xff0099c0>
    99f4:	8007883a 	mov	r3,r16
    99f8:	da402517 	ldw	r9,148(sp)
    99fc:	db802817 	ldw	r14,160(sp)
    9a00:	dc002917 	ldw	r16,164(sp)
    9a04:	da802417 	ldw	r10,144(sp)
    9a08:	1885883a 	add	r2,r3,r2
    9a0c:	40c00115 	stw	r3,4(r8)
    9a10:	42800015 	stw	r10,0(r8)
    9a14:	d8801c15 	stw	r2,112(sp)
    9a18:	d9401b15 	stw	r5,108(sp)
    9a1c:	00c001c4 	movi	r3,7
    9a20:	19426016 	blt	r3,r5,a3a4 <___vfiprintf_internal_r+0xe68>
    9a24:	d8c01d87 	ldb	r3,118(sp)
    9a28:	42000204 	addi	r8,r8,8
    9a2c:	29000044 	addi	r4,r5,1
    9a30:	1801b31e 	bne	r3,zero,a100 <___vfiprintf_internal_r+0xbc4>
    9a34:	7001c026 	beq	r14,zero,a138 <___vfiprintf_internal_r+0xbfc>
    9a38:	d8c01d04 	addi	r3,sp,116
    9a3c:	10800084 	addi	r2,r2,2
    9a40:	40c00015 	stw	r3,0(r8)
    9a44:	00c00084 	movi	r3,2
    9a48:	40c00115 	stw	r3,4(r8)
    9a4c:	d8801c15 	stw	r2,112(sp)
    9a50:	d9001b15 	stw	r4,108(sp)
    9a54:	00c001c4 	movi	r3,7
    9a58:	1902650e 	bge	r3,r4,a3f0 <___vfiprintf_internal_r+0xeb4>
    9a5c:	10029a1e 	bne	r2,zero,a4c8 <___vfiprintf_internal_r+0xf8c>
    9a60:	00c02004 	movi	r3,128
    9a64:	01000044 	movi	r4,1
    9a68:	000b883a 	mov	r5,zero
    9a6c:	d811883a 	mov	r8,sp
    9a70:	e0c1b31e 	bne	fp,r3,a140 <___vfiprintf_internal_r+0xc04>
    9a74:	8cb9c83a 	sub	fp,r17,r18
    9a78:	0701b10e 	bge	zero,fp,a140 <___vfiprintf_internal_r+0xc04>
    9a7c:	01c00404 	movi	r7,16
    9a80:	3f03890e 	bge	r7,fp,a8a8 <___vfiprintf_internal_r+0x136c>
    9a84:	00c00074 	movhi	r3,1
    9a88:	18c56204 	addi	r3,r3,5512
    9a8c:	d8c02415 	stw	r3,144(sp)
    9a90:	8007883a 	mov	r3,r16
    9a94:	034001c4 	movi	r13,7
    9a98:	e021883a 	mov	r16,fp
    9a9c:	da402515 	stw	r9,148(sp)
    9aa0:	1839883a 	mov	fp,r3
    9aa4:	00000506 	br	9abc <___vfiprintf_internal_r+0x580>
    9aa8:	29800084 	addi	r6,r5,2
    9aac:	42000204 	addi	r8,r8,8
    9ab0:	180b883a 	mov	r5,r3
    9ab4:	843ffc04 	addi	r16,r16,-16
    9ab8:	3c000d0e 	bge	r7,r16,9af0 <___vfiprintf_internal_r+0x5b4>
    9abc:	10800404 	addi	r2,r2,16
    9ac0:	28c00044 	addi	r3,r5,1
    9ac4:	45c00015 	stw	r23,0(r8)
    9ac8:	41c00115 	stw	r7,4(r8)
    9acc:	d8801c15 	stw	r2,112(sp)
    9ad0:	d8c01b15 	stw	r3,108(sp)
    9ad4:	68fff40e 	bge	r13,r3,9aa8 <__alt_data_end+0xff009aa8>
    9ad8:	1002241e 	bne	r2,zero,a36c <___vfiprintf_internal_r+0xe30>
    9adc:	843ffc04 	addi	r16,r16,-16
    9ae0:	01800044 	movi	r6,1
    9ae4:	000b883a 	mov	r5,zero
    9ae8:	d811883a 	mov	r8,sp
    9aec:	3c3ff316 	blt	r7,r16,9abc <__alt_data_end+0xff009abc>
    9af0:	da402517 	ldw	r9,148(sp)
    9af4:	e007883a 	mov	r3,fp
    9af8:	8039883a 	mov	fp,r16
    9afc:	1821883a 	mov	r16,r3
    9b00:	d8c02417 	ldw	r3,144(sp)
    9b04:	1705883a 	add	r2,r2,fp
    9b08:	47000115 	stw	fp,4(r8)
    9b0c:	40c00015 	stw	r3,0(r8)
    9b10:	d8801c15 	stw	r2,112(sp)
    9b14:	d9801b15 	stw	r6,108(sp)
    9b18:	00c001c4 	movi	r3,7
    9b1c:	19827616 	blt	r3,r6,a4f8 <___vfiprintf_internal_r+0xfbc>
    9b20:	4cf9c83a 	sub	fp,r9,r19
    9b24:	42000204 	addi	r8,r8,8
    9b28:	31000044 	addi	r4,r6,1
    9b2c:	300b883a 	mov	r5,r6
    9b30:	07018516 	blt	zero,fp,a148 <___vfiprintf_internal_r+0xc0c>
    9b34:	9885883a 	add	r2,r19,r2
    9b38:	45400015 	stw	r21,0(r8)
    9b3c:	44c00115 	stw	r19,4(r8)
    9b40:	d8801c15 	stw	r2,112(sp)
    9b44:	d9001b15 	stw	r4,108(sp)
    9b48:	00c001c4 	movi	r3,7
    9b4c:	1901dd0e 	bge	r3,r4,a2c4 <___vfiprintf_internal_r+0xd88>
    9b50:	1002401e 	bne	r2,zero,a454 <___vfiprintf_internal_r+0xf18>
    9b54:	d8001b15 	stw	zero,108(sp)
    9b58:	a2c0010c 	andi	r11,r20,4
    9b5c:	58000226 	beq	r11,zero,9b68 <___vfiprintf_internal_r+0x62c>
    9b60:	8ca7c83a 	sub	r19,r17,r18
    9b64:	04c2f216 	blt	zero,r19,a730 <___vfiprintf_internal_r+0x11f4>
    9b68:	8c80010e 	bge	r17,r18,9b70 <___vfiprintf_internal_r+0x634>
    9b6c:	9023883a 	mov	r17,r18
    9b70:	da802317 	ldw	r10,140(sp)
    9b74:	5455883a 	add	r10,r10,r17
    9b78:	da802315 	stw	r10,140(sp)
    9b7c:	d8001b15 	stw	zero,108(sp)
    9b80:	d811883a 	mov	r8,sp
    9b84:	003ea206 	br	9610 <__alt_data_end+0xff009610>
    9b88:	a5000814 	ori	r20,r20,32
    9b8c:	80c00007 	ldb	r3,0(r16)
    9b90:	003ec906 	br	96b8 <__alt_data_end+0xff0096b8>
    9b94:	80c00007 	ldb	r3,0(r16)
    9b98:	1b030926 	beq	r3,r12,a7c0 <___vfiprintf_internal_r+0x1284>
    9b9c:	a5000414 	ori	r20,r20,16
    9ba0:	003ec506 	br	96b8 <__alt_data_end+0xff0096b8>
    9ba4:	21003fcc 	andi	r4,r4,255
    9ba8:	20035e1e 	bne	r4,zero,a924 <___vfiprintf_internal_r+0x13e8>
    9bac:	a080080c 	andi	r2,r20,32
    9bb0:	1002a526 	beq	r2,zero,a648 <___vfiprintf_internal_r+0x110c>
    9bb4:	da802217 	ldw	r10,136(sp)
    9bb8:	50800017 	ldw	r2,0(r10)
    9bbc:	da802317 	ldw	r10,140(sp)
    9bc0:	5007d7fa 	srai	r3,r10,31
    9bc4:	da802217 	ldw	r10,136(sp)
    9bc8:	10c00115 	stw	r3,4(r2)
    9bcc:	52800104 	addi	r10,r10,4
    9bd0:	da802215 	stw	r10,136(sp)
    9bd4:	da802317 	ldw	r10,140(sp)
    9bd8:	12800015 	stw	r10,0(r2)
    9bdc:	003e8c06 	br	9610 <__alt_data_end+0xff009610>
    9be0:	21003fcc 	andi	r4,r4,255
    9be4:	2003511e 	bne	r4,zero,a92c <___vfiprintf_internal_r+0x13f0>
    9be8:	a080080c 	andi	r2,r20,32
    9bec:	1000a126 	beq	r2,zero,9e74 <___vfiprintf_internal_r+0x938>
    9bf0:	da802217 	ldw	r10,136(sp)
    9bf4:	d8001d85 	stb	zero,118(sp)
    9bf8:	50800204 	addi	r2,r10,8
    9bfc:	54800017 	ldw	r18,0(r10)
    9c00:	54c00117 	ldw	r19,4(r10)
    9c04:	4802b416 	blt	r9,zero,a6d8 <___vfiprintf_internal_r+0x119c>
    9c08:	013fdfc4 	movi	r4,-129
    9c0c:	94c6b03a 	or	r3,r18,r19
    9c10:	d8802215 	stw	r2,136(sp)
    9c14:	a128703a 	and	r20,r20,r4
    9c18:	1800a226 	beq	r3,zero,9ea4 <___vfiprintf_internal_r+0x968>
    9c1c:	0039883a 	mov	fp,zero
    9c20:	dd401a04 	addi	r21,sp,104
    9c24:	9006d0fa 	srli	r3,r18,3
    9c28:	9808977a 	slli	r4,r19,29
    9c2c:	9826d0fa 	srli	r19,r19,3
    9c30:	948001cc 	andi	r18,r18,7
    9c34:	90800c04 	addi	r2,r18,48
    9c38:	ad7fffc4 	addi	r21,r21,-1
    9c3c:	20e4b03a 	or	r18,r4,r3
    9c40:	a8800005 	stb	r2,0(r21)
    9c44:	94c6b03a 	or	r3,r18,r19
    9c48:	183ff61e 	bne	r3,zero,9c24 <__alt_data_end+0xff009c24>
    9c4c:	a0c0004c 	andi	r3,r20,1
    9c50:	18005926 	beq	r3,zero,9db8 <___vfiprintf_internal_r+0x87c>
    9c54:	10803fcc 	andi	r2,r2,255
    9c58:	1080201c 	xori	r2,r2,128
    9c5c:	10bfe004 	addi	r2,r2,-128
    9c60:	00c00c04 	movi	r3,48
    9c64:	10c05426 	beq	r2,r3,9db8 <___vfiprintf_internal_r+0x87c>
    9c68:	da801e17 	ldw	r10,120(sp)
    9c6c:	a8bfffc4 	addi	r2,r21,-1
    9c70:	a8ffffc5 	stb	r3,-1(r21)
    9c74:	50a7c83a 	sub	r19,r10,r2
    9c78:	102b883a 	mov	r21,r2
    9c7c:	003f2f06 	br	993c <__alt_data_end+0xff00993c>
    9c80:	21003fcc 	andi	r4,r4,255
    9c84:	2003421e 	bne	r4,zero,a990 <___vfiprintf_internal_r+0x1454>
    9c88:	00800074 	movhi	r2,1
    9c8c:	10850104 	addi	r2,r2,5124
    9c90:	d8802615 	stw	r2,152(sp)
    9c94:	a080080c 	andi	r2,r20,32
    9c98:	1000aa26 	beq	r2,zero,9f44 <___vfiprintf_internal_r+0xa08>
    9c9c:	da802217 	ldw	r10,136(sp)
    9ca0:	54800017 	ldw	r18,0(r10)
    9ca4:	54c00117 	ldw	r19,4(r10)
    9ca8:	52800204 	addi	r10,r10,8
    9cac:	da802215 	stw	r10,136(sp)
    9cb0:	a080004c 	andi	r2,r20,1
    9cb4:	1001d226 	beq	r2,zero,a400 <___vfiprintf_internal_r+0xec4>
    9cb8:	94c4b03a 	or	r2,r18,r19
    9cbc:	1002351e 	bne	r2,zero,a594 <___vfiprintf_internal_r+0x1058>
    9cc0:	d8001d85 	stb	zero,118(sp)
    9cc4:	48022216 	blt	r9,zero,a550 <___vfiprintf_internal_r+0x1014>
    9cc8:	00bfdfc4 	movi	r2,-129
    9ccc:	a0a8703a 	and	r20,r20,r2
    9cd0:	003f1506 	br	9928 <__alt_data_end+0xff009928>
    9cd4:	da802217 	ldw	r10,136(sp)
    9cd8:	04800044 	movi	r18,1
    9cdc:	d8001d85 	stb	zero,118(sp)
    9ce0:	50800017 	ldw	r2,0(r10)
    9ce4:	52800104 	addi	r10,r10,4
    9ce8:	da802215 	stw	r10,136(sp)
    9cec:	d8801005 	stb	r2,64(sp)
    9cf0:	9027883a 	mov	r19,r18
    9cf4:	dd401004 	addi	r21,sp,64
    9cf8:	0013883a 	mov	r9,zero
    9cfc:	003f1706 	br	995c <__alt_data_end+0xff00995c>
    9d00:	21003fcc 	andi	r4,r4,255
    9d04:	2003201e 	bne	r4,zero,a988 <___vfiprintf_internal_r+0x144c>
    9d08:	a080080c 	andi	r2,r20,32
    9d0c:	10004b26 	beq	r2,zero,9e3c <___vfiprintf_internal_r+0x900>
    9d10:	da802217 	ldw	r10,136(sp)
    9d14:	50800117 	ldw	r2,4(r10)
    9d18:	54800017 	ldw	r18,0(r10)
    9d1c:	52800204 	addi	r10,r10,8
    9d20:	da802215 	stw	r10,136(sp)
    9d24:	1027883a 	mov	r19,r2
    9d28:	10022c16 	blt	r2,zero,a5dc <___vfiprintf_internal_r+0x10a0>
    9d2c:	df001d83 	ldbu	fp,118(sp)
    9d30:	48007216 	blt	r9,zero,9efc <___vfiprintf_internal_r+0x9c0>
    9d34:	00ffdfc4 	movi	r3,-129
    9d38:	94c4b03a 	or	r2,r18,r19
    9d3c:	a0e8703a 	and	r20,r20,r3
    9d40:	1000cc26 	beq	r2,zero,a074 <___vfiprintf_internal_r+0xb38>
    9d44:	98021026 	beq	r19,zero,a588 <___vfiprintf_internal_r+0x104c>
    9d48:	dc402415 	stw	r17,144(sp)
    9d4c:	dc002515 	stw	r16,148(sp)
    9d50:	9823883a 	mov	r17,r19
    9d54:	9021883a 	mov	r16,r18
    9d58:	dd401a04 	addi	r21,sp,104
    9d5c:	4825883a 	mov	r18,r9
    9d60:	4027883a 	mov	r19,r8
    9d64:	8009883a 	mov	r4,r16
    9d68:	880b883a 	mov	r5,r17
    9d6c:	01800284 	movi	r6,10
    9d70:	000f883a 	mov	r7,zero
    9d74:	000b91c0 	call	b91c <__umoddi3>
    9d78:	10800c04 	addi	r2,r2,48
    9d7c:	ad7fffc4 	addi	r21,r21,-1
    9d80:	8009883a 	mov	r4,r16
    9d84:	880b883a 	mov	r5,r17
    9d88:	a8800005 	stb	r2,0(r21)
    9d8c:	01800284 	movi	r6,10
    9d90:	000f883a 	mov	r7,zero
    9d94:	000b3a40 	call	b3a4 <__udivdi3>
    9d98:	1021883a 	mov	r16,r2
    9d9c:	10c4b03a 	or	r2,r2,r3
    9da0:	1823883a 	mov	r17,r3
    9da4:	103fef1e 	bne	r2,zero,9d64 <__alt_data_end+0xff009d64>
    9da8:	dc402417 	ldw	r17,144(sp)
    9dac:	dc002517 	ldw	r16,148(sp)
    9db0:	9013883a 	mov	r9,r18
    9db4:	9811883a 	mov	r8,r19
    9db8:	da801e17 	ldw	r10,120(sp)
    9dbc:	5567c83a 	sub	r19,r10,r21
    9dc0:	003ede06 	br	993c <__alt_data_end+0xff00993c>
    9dc4:	38803fcc 	andi	r2,r7,255
    9dc8:	1080201c 	xori	r2,r2,128
    9dcc:	10bfe004 	addi	r2,r2,-128
    9dd0:	1002371e 	bne	r2,zero,a6b0 <___vfiprintf_internal_r+0x1174>
    9dd4:	01000044 	movi	r4,1
    9dd8:	01c00804 	movi	r7,32
    9ddc:	80c00007 	ldb	r3,0(r16)
    9de0:	003e3506 	br	96b8 <__alt_data_end+0xff0096b8>
    9de4:	a5000054 	ori	r20,r20,1
    9de8:	80c00007 	ldb	r3,0(r16)
    9dec:	003e3206 	br	96b8 <__alt_data_end+0xff0096b8>
    9df0:	a5002014 	ori	r20,r20,128
    9df4:	80c00007 	ldb	r3,0(r16)
    9df8:	003e2f06 	br	96b8 <__alt_data_end+0xff0096b8>
    9dfc:	8015883a 	mov	r10,r16
    9e00:	0023883a 	mov	r17,zero
    9e04:	18bff404 	addi	r2,r3,-48
    9e08:	50c00007 	ldb	r3,0(r10)
    9e0c:	8c4002a4 	muli	r17,r17,10
    9e10:	84000044 	addi	r16,r16,1
    9e14:	8015883a 	mov	r10,r16
    9e18:	1463883a 	add	r17,r2,r17
    9e1c:	18bff404 	addi	r2,r3,-48
    9e20:	30bff92e 	bgeu	r6,r2,9e08 <__alt_data_end+0xff009e08>
    9e24:	003e2506 	br	96bc <__alt_data_end+0xff0096bc>
    9e28:	21003fcc 	andi	r4,r4,255
    9e2c:	2002d41e 	bne	r4,zero,a980 <___vfiprintf_internal_r+0x1444>
    9e30:	a5000414 	ori	r20,r20,16
    9e34:	a080080c 	andi	r2,r20,32
    9e38:	103fb51e 	bne	r2,zero,9d10 <__alt_data_end+0xff009d10>
    9e3c:	a080040c 	andi	r2,r20,16
    9e40:	1001f826 	beq	r2,zero,a624 <___vfiprintf_internal_r+0x10e8>
    9e44:	da802217 	ldw	r10,136(sp)
    9e48:	54800017 	ldw	r18,0(r10)
    9e4c:	52800104 	addi	r10,r10,4
    9e50:	da802215 	stw	r10,136(sp)
    9e54:	9027d7fa 	srai	r19,r18,31
    9e58:	9805883a 	mov	r2,r19
    9e5c:	003fb206 	br	9d28 <__alt_data_end+0xff009d28>
    9e60:	21003fcc 	andi	r4,r4,255
    9e64:	2002c41e 	bne	r4,zero,a978 <___vfiprintf_internal_r+0x143c>
    9e68:	a5000414 	ori	r20,r20,16
    9e6c:	a080080c 	andi	r2,r20,32
    9e70:	103f5f1e 	bne	r2,zero,9bf0 <__alt_data_end+0xff009bf0>
    9e74:	a080040c 	andi	r2,r20,16
    9e78:	10020f26 	beq	r2,zero,a6b8 <___vfiprintf_internal_r+0x117c>
    9e7c:	da802217 	ldw	r10,136(sp)
    9e80:	d8001d85 	stb	zero,118(sp)
    9e84:	0027883a 	mov	r19,zero
    9e88:	50800104 	addi	r2,r10,4
    9e8c:	54800017 	ldw	r18,0(r10)
    9e90:	48021116 	blt	r9,zero,a6d8 <___vfiprintf_internal_r+0x119c>
    9e94:	00ffdfc4 	movi	r3,-129
    9e98:	d8802215 	stw	r2,136(sp)
    9e9c:	a0e8703a 	and	r20,r20,r3
    9ea0:	903f5e1e 	bne	r18,zero,9c1c <__alt_data_end+0xff009c1c>
    9ea4:	0039883a 	mov	fp,zero
    9ea8:	4802a626 	beq	r9,zero,a944 <___vfiprintf_internal_r+0x1408>
    9eac:	0025883a 	mov	r18,zero
    9eb0:	0027883a 	mov	r19,zero
    9eb4:	003f5a06 	br	9c20 <__alt_data_end+0xff009c20>
    9eb8:	21003fcc 	andi	r4,r4,255
    9ebc:	20029f1e 	bne	r4,zero,a93c <___vfiprintf_internal_r+0x1400>
    9ec0:	a5000414 	ori	r20,r20,16
    9ec4:	a080080c 	andi	r2,r20,32
    9ec8:	10005e1e 	bne	r2,zero,a044 <___vfiprintf_internal_r+0xb08>
    9ecc:	a080040c 	andi	r2,r20,16
    9ed0:	1001a21e 	bne	r2,zero,a55c <___vfiprintf_internal_r+0x1020>
    9ed4:	a080100c 	andi	r2,r20,64
    9ed8:	d8001d85 	stb	zero,118(sp)
    9edc:	da802217 	ldw	r10,136(sp)
    9ee0:	1002231e 	bne	r2,zero,a770 <___vfiprintf_internal_r+0x1234>
    9ee4:	50800104 	addi	r2,r10,4
    9ee8:	54800017 	ldw	r18,0(r10)
    9eec:	0027883a 	mov	r19,zero
    9ef0:	4801a00e 	bge	r9,zero,a574 <___vfiprintf_internal_r+0x1038>
    9ef4:	d8802215 	stw	r2,136(sp)
    9ef8:	0039883a 	mov	fp,zero
    9efc:	94c4b03a 	or	r2,r18,r19
    9f00:	103f901e 	bne	r2,zero,9d44 <__alt_data_end+0xff009d44>
    9f04:	00800044 	movi	r2,1
    9f08:	10803fcc 	andi	r2,r2,255
    9f0c:	00c00044 	movi	r3,1
    9f10:	10c05926 	beq	r2,r3,a078 <___vfiprintf_internal_r+0xb3c>
    9f14:	00c00084 	movi	r3,2
    9f18:	10ffe41e 	bne	r2,r3,9eac <__alt_data_end+0xff009eac>
    9f1c:	0025883a 	mov	r18,zero
    9f20:	0027883a 	mov	r19,zero
    9f24:	00013d06 	br	a41c <___vfiprintf_internal_r+0xee0>
    9f28:	21003fcc 	andi	r4,r4,255
    9f2c:	2002811e 	bne	r4,zero,a934 <___vfiprintf_internal_r+0x13f8>
    9f30:	00800074 	movhi	r2,1
    9f34:	1084fc04 	addi	r2,r2,5104
    9f38:	d8802615 	stw	r2,152(sp)
    9f3c:	a080080c 	andi	r2,r20,32
    9f40:	103f561e 	bne	r2,zero,9c9c <__alt_data_end+0xff009c9c>
    9f44:	a080040c 	andi	r2,r20,16
    9f48:	1001d126 	beq	r2,zero,a690 <___vfiprintf_internal_r+0x1154>
    9f4c:	da802217 	ldw	r10,136(sp)
    9f50:	0027883a 	mov	r19,zero
    9f54:	54800017 	ldw	r18,0(r10)
    9f58:	52800104 	addi	r10,r10,4
    9f5c:	da802215 	stw	r10,136(sp)
    9f60:	003f5306 	br	9cb0 <__alt_data_end+0xff009cb0>
    9f64:	da802217 	ldw	r10,136(sp)
    9f68:	d8001d85 	stb	zero,118(sp)
    9f6c:	55400017 	ldw	r21,0(r10)
    9f70:	50c00104 	addi	r3,r10,4
    9f74:	a8024226 	beq	r21,zero,a880 <___vfiprintf_internal_r+0x1344>
    9f78:	48021816 	blt	r9,zero,a7dc <___vfiprintf_internal_r+0x12a0>
    9f7c:	480d883a 	mov	r6,r9
    9f80:	000b883a 	mov	r5,zero
    9f84:	a809883a 	mov	r4,r21
    9f88:	d8c02a15 	stw	r3,168(sp)
    9f8c:	da002b15 	stw	r8,172(sp)
    9f90:	da402c15 	stw	r9,176(sp)
    9f94:	000778c0 	call	778c <memchr>
    9f98:	d8c02a17 	ldw	r3,168(sp)
    9f9c:	da002b17 	ldw	r8,172(sp)
    9fa0:	da402c17 	ldw	r9,176(sp)
    9fa4:	10024826 	beq	r2,zero,a8c8 <___vfiprintf_internal_r+0x138c>
    9fa8:	1567c83a 	sub	r19,r2,r21
    9fac:	df001d83 	ldbu	fp,118(sp)
    9fb0:	d8c02215 	stw	r3,136(sp)
    9fb4:	0013883a 	mov	r9,zero
    9fb8:	003e6006 	br	993c <__alt_data_end+0xff00993c>
    9fbc:	21003fcc 	andi	r4,r4,255
    9fc0:	203fc026 	beq	r4,zero,9ec4 <__alt_data_end+0xff009ec4>
    9fc4:	d9c01d85 	stb	r7,118(sp)
    9fc8:	003fbe06 	br	9ec4 <__alt_data_end+0xff009ec4>
    9fcc:	da802217 	ldw	r10,136(sp)
    9fd0:	54400017 	ldw	r17,0(r10)
    9fd4:	50800104 	addi	r2,r10,4
    9fd8:	883e3b16 	blt	r17,zero,98c8 <__alt_data_end+0xff0098c8>
    9fdc:	d8802215 	stw	r2,136(sp)
    9fe0:	80c00007 	ldb	r3,0(r16)
    9fe4:	003db406 	br	96b8 <__alt_data_end+0xff0096b8>
    9fe8:	01000044 	movi	r4,1
    9fec:	01c00ac4 	movi	r7,43
    9ff0:	80c00007 	ldb	r3,0(r16)
    9ff4:	003db006 	br	96b8 <__alt_data_end+0xff0096b8>
    9ff8:	80c00007 	ldb	r3,0(r16)
    9ffc:	82800044 	addi	r10,r16,1
    a000:	1b423c26 	beq	r3,r13,a8f4 <___vfiprintf_internal_r+0x13b8>
    a004:	18bff404 	addi	r2,r3,-48
    a008:	0013883a 	mov	r9,zero
    a00c:	30822b36 	bltu	r6,r2,a8bc <___vfiprintf_internal_r+0x1380>
    a010:	50c00007 	ldb	r3,0(r10)
    a014:	4a4002a4 	muli	r9,r9,10
    a018:	54000044 	addi	r16,r10,1
    a01c:	8015883a 	mov	r10,r16
    a020:	4893883a 	add	r9,r9,r2
    a024:	18bff404 	addi	r2,r3,-48
    a028:	30bff92e 	bgeu	r6,r2,a010 <__alt_data_end+0xff00a010>
    a02c:	483da30e 	bge	r9,zero,96bc <__alt_data_end+0xff0096bc>
    a030:	027fffc4 	movi	r9,-1
    a034:	003da106 	br	96bc <__alt_data_end+0xff0096bc>
    a038:	a5001014 	ori	r20,r20,64
    a03c:	80c00007 	ldb	r3,0(r16)
    a040:	003d9d06 	br	96b8 <__alt_data_end+0xff0096b8>
    a044:	da802217 	ldw	r10,136(sp)
    a048:	d8001d85 	stb	zero,118(sp)
    a04c:	50c00204 	addi	r3,r10,8
    a050:	54800017 	ldw	r18,0(r10)
    a054:	54c00117 	ldw	r19,4(r10)
    a058:	4801ca16 	blt	r9,zero,a784 <___vfiprintf_internal_r+0x1248>
    a05c:	013fdfc4 	movi	r4,-129
    a060:	94c4b03a 	or	r2,r18,r19
    a064:	d8c02215 	stw	r3,136(sp)
    a068:	a128703a 	and	r20,r20,r4
    a06c:	0039883a 	mov	fp,zero
    a070:	103f341e 	bne	r2,zero,9d44 <__alt_data_end+0xff009d44>
    a074:	483e2e26 	beq	r9,zero,9930 <__alt_data_end+0xff009930>
    a078:	0025883a 	mov	r18,zero
    a07c:	94800c04 	addi	r18,r18,48
    a080:	dc8019c5 	stb	r18,103(sp)
    a084:	dcc02717 	ldw	r19,156(sp)
    a088:	dd4019c4 	addi	r21,sp,103
    a08c:	003e2b06 	br	993c <__alt_data_end+0xff00993c>
    a090:	21003fcc 	andi	r4,r4,255
    a094:	2002361e 	bne	r4,zero,a970 <___vfiprintf_internal_r+0x1434>
    a098:	1801c126 	beq	r3,zero,a7a0 <___vfiprintf_internal_r+0x1264>
    a09c:	04800044 	movi	r18,1
    a0a0:	d8c01005 	stb	r3,64(sp)
    a0a4:	d8001d85 	stb	zero,118(sp)
    a0a8:	9027883a 	mov	r19,r18
    a0ac:	dd401004 	addi	r21,sp,64
    a0b0:	003f1106 	br	9cf8 <__alt_data_end+0xff009cf8>
    a0b4:	d9402117 	ldw	r5,132(sp)
    a0b8:	d9002017 	ldw	r4,128(sp)
    a0bc:	d9801a04 	addi	r6,sp,104
    a0c0:	d9c02b15 	stw	r7,172(sp)
    a0c4:	dbc02a15 	stw	r15,168(sp)
    a0c8:	00094280 	call	9428 <__sprint_r.part.0>
    a0cc:	d9c02b17 	ldw	r7,172(sp)
    a0d0:	dbc02a17 	ldw	r15,168(sp)
    a0d4:	10006d1e 	bne	r2,zero,a28c <___vfiprintf_internal_r+0xd50>
    a0d8:	d9801b17 	ldw	r6,108(sp)
    a0dc:	d8801c17 	ldw	r2,112(sp)
    a0e0:	d811883a 	mov	r8,sp
    a0e4:	31400044 	addi	r5,r6,1
    a0e8:	003e3306 	br	99b8 <__alt_data_end+0xff0099b8>
    a0ec:	d9401b17 	ldw	r5,108(sp)
    a0f0:	d8801c17 	ldw	r2,112(sp)
    a0f4:	29000044 	addi	r4,r5,1
    a0f8:	d8c01d87 	ldb	r3,118(sp)
    a0fc:	183e4d26 	beq	r3,zero,9a34 <__alt_data_end+0xff009a34>
    a100:	00c00044 	movi	r3,1
    a104:	d9401d84 	addi	r5,sp,118
    a108:	10c5883a 	add	r2,r2,r3
    a10c:	41400015 	stw	r5,0(r8)
    a110:	40c00115 	stw	r3,4(r8)
    a114:	d8801c15 	stw	r2,112(sp)
    a118:	d9001b15 	stw	r4,108(sp)
    a11c:	014001c4 	movi	r5,7
    a120:	2900a90e 	bge	r5,r4,a3c8 <___vfiprintf_internal_r+0xe8c>
    a124:	1000da1e 	bne	r2,zero,a490 <___vfiprintf_internal_r+0xf54>
    a128:	7000ab1e 	bne	r14,zero,a3d8 <___vfiprintf_internal_r+0xe9c>
    a12c:	000b883a 	mov	r5,zero
    a130:	1809883a 	mov	r4,r3
    a134:	d811883a 	mov	r8,sp
    a138:	00c02004 	movi	r3,128
    a13c:	e0fe4d26 	beq	fp,r3,9a74 <__alt_data_end+0xff009a74>
    a140:	4cf9c83a 	sub	fp,r9,r19
    a144:	073e7b0e 	bge	zero,fp,9b34 <__alt_data_end+0xff009b34>
    a148:	01c00404 	movi	r7,16
    a14c:	3f01900e 	bge	r7,fp,a790 <___vfiprintf_internal_r+0x1254>
    a150:	00c00074 	movhi	r3,1
    a154:	18c56204 	addi	r3,r3,5512
    a158:	d8c02415 	stw	r3,144(sp)
    a15c:	034001c4 	movi	r13,7
    a160:	00000506 	br	a178 <___vfiprintf_internal_r+0xc3c>
    a164:	29000084 	addi	r4,r5,2
    a168:	42000204 	addi	r8,r8,8
    a16c:	180b883a 	mov	r5,r3
    a170:	e73ffc04 	addi	fp,fp,-16
    a174:	3f000d0e 	bge	r7,fp,a1ac <___vfiprintf_internal_r+0xc70>
    a178:	10800404 	addi	r2,r2,16
    a17c:	28c00044 	addi	r3,r5,1
    a180:	45c00015 	stw	r23,0(r8)
    a184:	41c00115 	stw	r7,4(r8)
    a188:	d8801c15 	stw	r2,112(sp)
    a18c:	d8c01b15 	stw	r3,108(sp)
    a190:	68fff40e 	bge	r13,r3,a164 <__alt_data_end+0xff00a164>
    a194:	1000101e 	bne	r2,zero,a1d8 <___vfiprintf_internal_r+0xc9c>
    a198:	e73ffc04 	addi	fp,fp,-16
    a19c:	01000044 	movi	r4,1
    a1a0:	000b883a 	mov	r5,zero
    a1a4:	d811883a 	mov	r8,sp
    a1a8:	3f3ff316 	blt	r7,fp,a178 <__alt_data_end+0xff00a178>
    a1ac:	da802417 	ldw	r10,144(sp)
    a1b0:	1705883a 	add	r2,r2,fp
    a1b4:	47000115 	stw	fp,4(r8)
    a1b8:	42800015 	stw	r10,0(r8)
    a1bc:	d8801c15 	stw	r2,112(sp)
    a1c0:	d9001b15 	stw	r4,108(sp)
    a1c4:	00c001c4 	movi	r3,7
    a1c8:	19003616 	blt	r3,r4,a2a4 <___vfiprintf_internal_r+0xd68>
    a1cc:	42000204 	addi	r8,r8,8
    a1d0:	21000044 	addi	r4,r4,1
    a1d4:	003e5706 	br	9b34 <__alt_data_end+0xff009b34>
    a1d8:	d9402117 	ldw	r5,132(sp)
    a1dc:	d9002017 	ldw	r4,128(sp)
    a1e0:	d9801a04 	addi	r6,sp,104
    a1e4:	d9c02b15 	stw	r7,172(sp)
    a1e8:	db402a15 	stw	r13,168(sp)
    a1ec:	00094280 	call	9428 <__sprint_r.part.0>
    a1f0:	d9c02b17 	ldw	r7,172(sp)
    a1f4:	db402a17 	ldw	r13,168(sp)
    a1f8:	1000241e 	bne	r2,zero,a28c <___vfiprintf_internal_r+0xd50>
    a1fc:	d9401b17 	ldw	r5,108(sp)
    a200:	d8801c17 	ldw	r2,112(sp)
    a204:	d811883a 	mov	r8,sp
    a208:	29000044 	addi	r4,r5,1
    a20c:	003fd806 	br	a170 <__alt_data_end+0xff00a170>
    a210:	d9401b17 	ldw	r5,108(sp)
    a214:	00c00074 	movhi	r3,1
    a218:	18c56604 	addi	r3,r3,5528
    a21c:	d8c02415 	stw	r3,144(sp)
    a220:	29400044 	addi	r5,r5,1
    a224:	d8c02417 	ldw	r3,144(sp)
    a228:	14c5883a 	add	r2,r2,r19
    a22c:	44c00115 	stw	r19,4(r8)
    a230:	40c00015 	stw	r3,0(r8)
    a234:	d8801c15 	stw	r2,112(sp)
    a238:	d9401b15 	stw	r5,108(sp)
    a23c:	00c001c4 	movi	r3,7
    a240:	1940070e 	bge	r3,r5,a260 <___vfiprintf_internal_r+0xd24>
    a244:	103e4826 	beq	r2,zero,9b68 <__alt_data_end+0xff009b68>
    a248:	d9402117 	ldw	r5,132(sp)
    a24c:	d9002017 	ldw	r4,128(sp)
    a250:	d9801a04 	addi	r6,sp,104
    a254:	00094280 	call	9428 <__sprint_r.part.0>
    a258:	10000c1e 	bne	r2,zero,a28c <___vfiprintf_internal_r+0xd50>
    a25c:	d8801c17 	ldw	r2,112(sp)
    a260:	8c80010e 	bge	r17,r18,a268 <___vfiprintf_internal_r+0xd2c>
    a264:	9023883a 	mov	r17,r18
    a268:	da802317 	ldw	r10,140(sp)
    a26c:	5455883a 	add	r10,r10,r17
    a270:	da802315 	stw	r10,140(sp)
    a274:	103e4126 	beq	r2,zero,9b7c <__alt_data_end+0xff009b7c>
    a278:	d9402117 	ldw	r5,132(sp)
    a27c:	d9002017 	ldw	r4,128(sp)
    a280:	d9801a04 	addi	r6,sp,104
    a284:	00094280 	call	9428 <__sprint_r.part.0>
    a288:	103e3c26 	beq	r2,zero,9b7c <__alt_data_end+0xff009b7c>
    a28c:	dd002117 	ldw	r20,132(sp)
    a290:	a080030b 	ldhu	r2,12(r20)
    a294:	1080100c 	andi	r2,r2,64
    a298:	1001231e 	bne	r2,zero,a728 <___vfiprintf_internal_r+0x11ec>
    a29c:	d8802317 	ldw	r2,140(sp)
    a2a0:	003d7b06 	br	9890 <__alt_data_end+0xff009890>
    a2a4:	1000991e 	bne	r2,zero,a50c <___vfiprintf_internal_r+0xfd0>
    a2a8:	00c00044 	movi	r3,1
    a2ac:	9805883a 	mov	r2,r19
    a2b0:	dd400015 	stw	r21,0(sp)
    a2b4:	dcc00115 	stw	r19,4(sp)
    a2b8:	dcc01c15 	stw	r19,112(sp)
    a2bc:	d8c01b15 	stw	r3,108(sp)
    a2c0:	d811883a 	mov	r8,sp
    a2c4:	42000204 	addi	r8,r8,8
    a2c8:	a2c0010c 	andi	r11,r20,4
    a2cc:	583fe426 	beq	r11,zero,a260 <__alt_data_end+0xff00a260>
    a2d0:	8ca7c83a 	sub	r19,r17,r18
    a2d4:	04ffe20e 	bge	zero,r19,a260 <__alt_data_end+0xff00a260>
    a2d8:	01c00404 	movi	r7,16
    a2dc:	3cffcc0e 	bge	r7,r19,a210 <__alt_data_end+0xff00a210>
    a2e0:	02800074 	movhi	r10,1
    a2e4:	52856604 	addi	r10,r10,5528
    a2e8:	d9001b17 	ldw	r4,108(sp)
    a2ec:	da802415 	stw	r10,144(sp)
    a2f0:	382b883a 	mov	r21,r7
    a2f4:	050001c4 	movi	r20,7
    a2f8:	df002017 	ldw	fp,128(sp)
    a2fc:	00000506 	br	a314 <___vfiprintf_internal_r+0xdd8>
    a300:	21400084 	addi	r5,r4,2
    a304:	42000204 	addi	r8,r8,8
    a308:	1809883a 	mov	r4,r3
    a30c:	9cfffc04 	addi	r19,r19,-16
    a310:	acffc40e 	bge	r21,r19,a224 <__alt_data_end+0xff00a224>
    a314:	10800404 	addi	r2,r2,16
    a318:	20c00044 	addi	r3,r4,1
    a31c:	45800015 	stw	r22,0(r8)
    a320:	45400115 	stw	r21,4(r8)
    a324:	d8801c15 	stw	r2,112(sp)
    a328:	d8c01b15 	stw	r3,108(sp)
    a32c:	a0fff40e 	bge	r20,r3,a300 <__alt_data_end+0xff00a300>
    a330:	1000041e 	bne	r2,zero,a344 <___vfiprintf_internal_r+0xe08>
    a334:	01400044 	movi	r5,1
    a338:	0009883a 	mov	r4,zero
    a33c:	d811883a 	mov	r8,sp
    a340:	003ff206 	br	a30c <__alt_data_end+0xff00a30c>
    a344:	d9402117 	ldw	r5,132(sp)
    a348:	d9801a04 	addi	r6,sp,104
    a34c:	e009883a 	mov	r4,fp
    a350:	00094280 	call	9428 <__sprint_r.part.0>
    a354:	103fcd1e 	bne	r2,zero,a28c <__alt_data_end+0xff00a28c>
    a358:	d9001b17 	ldw	r4,108(sp)
    a35c:	d8801c17 	ldw	r2,112(sp)
    a360:	d811883a 	mov	r8,sp
    a364:	21400044 	addi	r5,r4,1
    a368:	003fe806 	br	a30c <__alt_data_end+0xff00a30c>
    a36c:	d9402117 	ldw	r5,132(sp)
    a370:	d9002017 	ldw	r4,128(sp)
    a374:	d9801a04 	addi	r6,sp,104
    a378:	d9c02b15 	stw	r7,172(sp)
    a37c:	db402a15 	stw	r13,168(sp)
    a380:	00094280 	call	9428 <__sprint_r.part.0>
    a384:	d9c02b17 	ldw	r7,172(sp)
    a388:	db402a17 	ldw	r13,168(sp)
    a38c:	103fbf1e 	bne	r2,zero,a28c <__alt_data_end+0xff00a28c>
    a390:	d9401b17 	ldw	r5,108(sp)
    a394:	d8801c17 	ldw	r2,112(sp)
    a398:	d811883a 	mov	r8,sp
    a39c:	29800044 	addi	r6,r5,1
    a3a0:	003dc406 	br	9ab4 <__alt_data_end+0xff009ab4>
    a3a4:	1000d21e 	bne	r2,zero,a6f0 <___vfiprintf_internal_r+0x11b4>
    a3a8:	d8c01d87 	ldb	r3,118(sp)
    a3ac:	18009526 	beq	r3,zero,a604 <___vfiprintf_internal_r+0x10c8>
    a3b0:	00800044 	movi	r2,1
    a3b4:	d8c01d84 	addi	r3,sp,118
    a3b8:	1009883a 	mov	r4,r2
    a3bc:	d8c00015 	stw	r3,0(sp)
    a3c0:	d8800115 	stw	r2,4(sp)
    a3c4:	d811883a 	mov	r8,sp
    a3c8:	200b883a 	mov	r5,r4
    a3cc:	42000204 	addi	r8,r8,8
    a3d0:	21000044 	addi	r4,r4,1
    a3d4:	003d9706 	br	9a34 <__alt_data_end+0xff009a34>
    a3d8:	d9001d04 	addi	r4,sp,116
    a3dc:	00800084 	movi	r2,2
    a3e0:	d9000015 	stw	r4,0(sp)
    a3e4:	d8800115 	stw	r2,4(sp)
    a3e8:	1809883a 	mov	r4,r3
    a3ec:	d811883a 	mov	r8,sp
    a3f0:	200b883a 	mov	r5,r4
    a3f4:	42000204 	addi	r8,r8,8
    a3f8:	21000044 	addi	r4,r4,1
    a3fc:	003f4e06 	br	a138 <__alt_data_end+0xff00a138>
    a400:	d8001d85 	stb	zero,118(sp)
    a404:	48005016 	blt	r9,zero,a548 <___vfiprintf_internal_r+0x100c>
    a408:	00ffdfc4 	movi	r3,-129
    a40c:	94c4b03a 	or	r2,r18,r19
    a410:	a0e8703a 	and	r20,r20,r3
    a414:	103d4426 	beq	r2,zero,9928 <__alt_data_end+0xff009928>
    a418:	0039883a 	mov	fp,zero
    a41c:	d9002617 	ldw	r4,152(sp)
    a420:	dd401a04 	addi	r21,sp,104
    a424:	908003cc 	andi	r2,r18,15
    a428:	9806973a 	slli	r3,r19,28
    a42c:	2085883a 	add	r2,r4,r2
    a430:	9024d13a 	srli	r18,r18,4
    a434:	10800003 	ldbu	r2,0(r2)
    a438:	9826d13a 	srli	r19,r19,4
    a43c:	ad7fffc4 	addi	r21,r21,-1
    a440:	1ca4b03a 	or	r18,r3,r18
    a444:	a8800005 	stb	r2,0(r21)
    a448:	94c4b03a 	or	r2,r18,r19
    a44c:	103ff51e 	bne	r2,zero,a424 <__alt_data_end+0xff00a424>
    a450:	003e5906 	br	9db8 <__alt_data_end+0xff009db8>
    a454:	d9402117 	ldw	r5,132(sp)
    a458:	d9002017 	ldw	r4,128(sp)
    a45c:	d9801a04 	addi	r6,sp,104
    a460:	00094280 	call	9428 <__sprint_r.part.0>
    a464:	103f891e 	bne	r2,zero,a28c <__alt_data_end+0xff00a28c>
    a468:	d8801c17 	ldw	r2,112(sp)
    a46c:	d811883a 	mov	r8,sp
    a470:	003f9506 	br	a2c8 <__alt_data_end+0xff00a2c8>
    a474:	d9402117 	ldw	r5,132(sp)
    a478:	d9002017 	ldw	r4,128(sp)
    a47c:	d9801a04 	addi	r6,sp,104
    a480:	00094280 	call	9428 <__sprint_r.part.0>
    a484:	103f811e 	bne	r2,zero,a28c <__alt_data_end+0xff00a28c>
    a488:	d811883a 	mov	r8,sp
    a48c:	003ced06 	br	9844 <__alt_data_end+0xff009844>
    a490:	d9402117 	ldw	r5,132(sp)
    a494:	d9002017 	ldw	r4,128(sp)
    a498:	d9801a04 	addi	r6,sp,104
    a49c:	da402c15 	stw	r9,176(sp)
    a4a0:	db802a15 	stw	r14,168(sp)
    a4a4:	00094280 	call	9428 <__sprint_r.part.0>
    a4a8:	da402c17 	ldw	r9,176(sp)
    a4ac:	db802a17 	ldw	r14,168(sp)
    a4b0:	103f761e 	bne	r2,zero,a28c <__alt_data_end+0xff00a28c>
    a4b4:	d9401b17 	ldw	r5,108(sp)
    a4b8:	d8801c17 	ldw	r2,112(sp)
    a4bc:	d811883a 	mov	r8,sp
    a4c0:	29000044 	addi	r4,r5,1
    a4c4:	003d5b06 	br	9a34 <__alt_data_end+0xff009a34>
    a4c8:	d9402117 	ldw	r5,132(sp)
    a4cc:	d9002017 	ldw	r4,128(sp)
    a4d0:	d9801a04 	addi	r6,sp,104
    a4d4:	da402c15 	stw	r9,176(sp)
    a4d8:	00094280 	call	9428 <__sprint_r.part.0>
    a4dc:	da402c17 	ldw	r9,176(sp)
    a4e0:	103f6a1e 	bne	r2,zero,a28c <__alt_data_end+0xff00a28c>
    a4e4:	d9401b17 	ldw	r5,108(sp)
    a4e8:	d8801c17 	ldw	r2,112(sp)
    a4ec:	d811883a 	mov	r8,sp
    a4f0:	29000044 	addi	r4,r5,1
    a4f4:	003f1006 	br	a138 <__alt_data_end+0xff00a138>
    a4f8:	1000c31e 	bne	r2,zero,a808 <___vfiprintf_internal_r+0x12cc>
    a4fc:	01000044 	movi	r4,1
    a500:	000b883a 	mov	r5,zero
    a504:	d811883a 	mov	r8,sp
    a508:	003f0d06 	br	a140 <__alt_data_end+0xff00a140>
    a50c:	d9402117 	ldw	r5,132(sp)
    a510:	d9002017 	ldw	r4,128(sp)
    a514:	d9801a04 	addi	r6,sp,104
    a518:	00094280 	call	9428 <__sprint_r.part.0>
    a51c:	103f5b1e 	bne	r2,zero,a28c <__alt_data_end+0xff00a28c>
    a520:	d9001b17 	ldw	r4,108(sp)
    a524:	d8801c17 	ldw	r2,112(sp)
    a528:	d811883a 	mov	r8,sp
    a52c:	21000044 	addi	r4,r4,1
    a530:	003d8006 	br	9b34 <__alt_data_end+0xff009b34>
    a534:	01000074 	movhi	r4,1
    a538:	21050104 	addi	r4,r4,5124
    a53c:	d9002615 	stw	r4,152(sp)
    a540:	d8c02215 	stw	r3,136(sp)
    a544:	1029883a 	mov	r20,r2
    a548:	94c4b03a 	or	r2,r18,r19
    a54c:	103fb21e 	bne	r2,zero,a418 <__alt_data_end+0xff00a418>
    a550:	0039883a 	mov	fp,zero
    a554:	00800084 	movi	r2,2
    a558:	003e6b06 	br	9f08 <__alt_data_end+0xff009f08>
    a55c:	da802217 	ldw	r10,136(sp)
    a560:	d8001d85 	stb	zero,118(sp)
    a564:	0027883a 	mov	r19,zero
    a568:	50800104 	addi	r2,r10,4
    a56c:	54800017 	ldw	r18,0(r10)
    a570:	483e6016 	blt	r9,zero,9ef4 <__alt_data_end+0xff009ef4>
    a574:	00ffdfc4 	movi	r3,-129
    a578:	d8802215 	stw	r2,136(sp)
    a57c:	a0e8703a 	and	r20,r20,r3
    a580:	0039883a 	mov	fp,zero
    a584:	903ebb26 	beq	r18,zero,a074 <__alt_data_end+0xff00a074>
    a588:	00800244 	movi	r2,9
    a58c:	14bdee36 	bltu	r2,r18,9d48 <__alt_data_end+0xff009d48>
    a590:	003eba06 	br	a07c <__alt_data_end+0xff00a07c>
    a594:	00800c04 	movi	r2,48
    a598:	d8c01d45 	stb	r3,117(sp)
    a59c:	d8801d05 	stb	r2,116(sp)
    a5a0:	d8001d85 	stb	zero,118(sp)
    a5a4:	a0c00094 	ori	r3,r20,2
    a5a8:	4800a916 	blt	r9,zero,a850 <___vfiprintf_internal_r+0x1314>
    a5ac:	00bfdfc4 	movi	r2,-129
    a5b0:	a096703a 	and	r11,r20,r2
    a5b4:	5d000094 	ori	r20,r11,2
    a5b8:	0039883a 	mov	fp,zero
    a5bc:	003f9706 	br	a41c <__alt_data_end+0xff00a41c>
    a5c0:	8025883a 	mov	r18,r16
    a5c4:	003c2e06 	br	9680 <__alt_data_end+0xff009680>
    a5c8:	00800074 	movhi	r2,1
    a5cc:	10850104 	addi	r2,r2,5124
    a5d0:	0039883a 	mov	fp,zero
    a5d4:	d8802615 	stw	r2,152(sp)
    a5d8:	003f9006 	br	a41c <__alt_data_end+0xff00a41c>
    a5dc:	04a5c83a 	sub	r18,zero,r18
    a5e0:	07000b44 	movi	fp,45
    a5e4:	9004c03a 	cmpne	r2,r18,zero
    a5e8:	04e7c83a 	sub	r19,zero,r19
    a5ec:	df001d85 	stb	fp,118(sp)
    a5f0:	98a7c83a 	sub	r19,r19,r2
    a5f4:	48009f16 	blt	r9,zero,a874 <___vfiprintf_internal_r+0x1338>
    a5f8:	00bfdfc4 	movi	r2,-129
    a5fc:	a0a8703a 	and	r20,r20,r2
    a600:	003dd006 	br	9d44 <__alt_data_end+0xff009d44>
    a604:	70004c26 	beq	r14,zero,a738 <___vfiprintf_internal_r+0x11fc>
    a608:	00800084 	movi	r2,2
    a60c:	d8c01d04 	addi	r3,sp,116
    a610:	d8c00015 	stw	r3,0(sp)
    a614:	d8800115 	stw	r2,4(sp)
    a618:	01000044 	movi	r4,1
    a61c:	d811883a 	mov	r8,sp
    a620:	003f7306 	br	a3f0 <__alt_data_end+0xff00a3f0>
    a624:	a080100c 	andi	r2,r20,64
    a628:	da802217 	ldw	r10,136(sp)
    a62c:	103e0626 	beq	r2,zero,9e48 <__alt_data_end+0xff009e48>
    a630:	5480000f 	ldh	r18,0(r10)
    a634:	52800104 	addi	r10,r10,4
    a638:	da802215 	stw	r10,136(sp)
    a63c:	9027d7fa 	srai	r19,r18,31
    a640:	9805883a 	mov	r2,r19
    a644:	003db806 	br	9d28 <__alt_data_end+0xff009d28>
    a648:	a080040c 	andi	r2,r20,16
    a64c:	1000091e 	bne	r2,zero,a674 <___vfiprintf_internal_r+0x1138>
    a650:	a2c0100c 	andi	r11,r20,64
    a654:	58000726 	beq	r11,zero,a674 <___vfiprintf_internal_r+0x1138>
    a658:	da802217 	ldw	r10,136(sp)
    a65c:	50800017 	ldw	r2,0(r10)
    a660:	52800104 	addi	r10,r10,4
    a664:	da802215 	stw	r10,136(sp)
    a668:	da802317 	ldw	r10,140(sp)
    a66c:	1280000d 	sth	r10,0(r2)
    a670:	003be706 	br	9610 <__alt_data_end+0xff009610>
    a674:	da802217 	ldw	r10,136(sp)
    a678:	50800017 	ldw	r2,0(r10)
    a67c:	52800104 	addi	r10,r10,4
    a680:	da802215 	stw	r10,136(sp)
    a684:	da802317 	ldw	r10,140(sp)
    a688:	12800015 	stw	r10,0(r2)
    a68c:	003be006 	br	9610 <__alt_data_end+0xff009610>
    a690:	a080100c 	andi	r2,r20,64
    a694:	da802217 	ldw	r10,136(sp)
    a698:	10003026 	beq	r2,zero,a75c <___vfiprintf_internal_r+0x1220>
    a69c:	5480000b 	ldhu	r18,0(r10)
    a6a0:	52800104 	addi	r10,r10,4
    a6a4:	0027883a 	mov	r19,zero
    a6a8:	da802215 	stw	r10,136(sp)
    a6ac:	003d8006 	br	9cb0 <__alt_data_end+0xff009cb0>
    a6b0:	80c00007 	ldb	r3,0(r16)
    a6b4:	003c0006 	br	96b8 <__alt_data_end+0xff0096b8>
    a6b8:	a080100c 	andi	r2,r20,64
    a6bc:	d8001d85 	stb	zero,118(sp)
    a6c0:	da802217 	ldw	r10,136(sp)
    a6c4:	1000201e 	bne	r2,zero,a748 <___vfiprintf_internal_r+0x120c>
    a6c8:	50800104 	addi	r2,r10,4
    a6cc:	54800017 	ldw	r18,0(r10)
    a6d0:	0027883a 	mov	r19,zero
    a6d4:	483def0e 	bge	r9,zero,9e94 <__alt_data_end+0xff009e94>
    a6d8:	94c6b03a 	or	r3,r18,r19
    a6dc:	d8802215 	stw	r2,136(sp)
    a6e0:	183d4e1e 	bne	r3,zero,9c1c <__alt_data_end+0xff009c1c>
    a6e4:	0039883a 	mov	fp,zero
    a6e8:	0005883a 	mov	r2,zero
    a6ec:	003e0606 	br	9f08 <__alt_data_end+0xff009f08>
    a6f0:	d9402117 	ldw	r5,132(sp)
    a6f4:	d9002017 	ldw	r4,128(sp)
    a6f8:	d9801a04 	addi	r6,sp,104
    a6fc:	da402c15 	stw	r9,176(sp)
    a700:	db802a15 	stw	r14,168(sp)
    a704:	00094280 	call	9428 <__sprint_r.part.0>
    a708:	da402c17 	ldw	r9,176(sp)
    a70c:	db802a17 	ldw	r14,168(sp)
    a710:	103ede1e 	bne	r2,zero,a28c <__alt_data_end+0xff00a28c>
    a714:	d9401b17 	ldw	r5,108(sp)
    a718:	d8801c17 	ldw	r2,112(sp)
    a71c:	d811883a 	mov	r8,sp
    a720:	29000044 	addi	r4,r5,1
    a724:	003e7406 	br	a0f8 <__alt_data_end+0xff00a0f8>
    a728:	00bfffc4 	movi	r2,-1
    a72c:	003c5806 	br	9890 <__alt_data_end+0xff009890>
    a730:	d811883a 	mov	r8,sp
    a734:	003ee806 	br	a2d8 <__alt_data_end+0xff00a2d8>
    a738:	000b883a 	mov	r5,zero
    a73c:	01000044 	movi	r4,1
    a740:	d811883a 	mov	r8,sp
    a744:	003e7c06 	br	a138 <__alt_data_end+0xff00a138>
    a748:	50800104 	addi	r2,r10,4
    a74c:	5480000b 	ldhu	r18,0(r10)
    a750:	0027883a 	mov	r19,zero
    a754:	483dcf0e 	bge	r9,zero,9e94 <__alt_data_end+0xff009e94>
    a758:	003fdf06 	br	a6d8 <__alt_data_end+0xff00a6d8>
    a75c:	54800017 	ldw	r18,0(r10)
    a760:	52800104 	addi	r10,r10,4
    a764:	0027883a 	mov	r19,zero
    a768:	da802215 	stw	r10,136(sp)
    a76c:	003d5006 	br	9cb0 <__alt_data_end+0xff009cb0>
    a770:	50800104 	addi	r2,r10,4
    a774:	5480000b 	ldhu	r18,0(r10)
    a778:	0027883a 	mov	r19,zero
    a77c:	483f7d0e 	bge	r9,zero,a574 <__alt_data_end+0xff00a574>
    a780:	003ddc06 	br	9ef4 <__alt_data_end+0xff009ef4>
    a784:	d8c02215 	stw	r3,136(sp)
    a788:	0039883a 	mov	fp,zero
    a78c:	003ddb06 	br	9efc <__alt_data_end+0xff009efc>
    a790:	02800074 	movhi	r10,1
    a794:	52856204 	addi	r10,r10,5512
    a798:	da802415 	stw	r10,144(sp)
    a79c:	003e8306 	br	a1ac <__alt_data_end+0xff00a1ac>
    a7a0:	d8801c17 	ldw	r2,112(sp)
    a7a4:	dd002117 	ldw	r20,132(sp)
    a7a8:	103eb926 	beq	r2,zero,a290 <__alt_data_end+0xff00a290>
    a7ac:	d9002017 	ldw	r4,128(sp)
    a7b0:	d9801a04 	addi	r6,sp,104
    a7b4:	a00b883a 	mov	r5,r20
    a7b8:	00094280 	call	9428 <__sprint_r.part.0>
    a7bc:	003eb406 	br	a290 <__alt_data_end+0xff00a290>
    a7c0:	80c00043 	ldbu	r3,1(r16)
    a7c4:	a5000814 	ori	r20,r20,32
    a7c8:	84000044 	addi	r16,r16,1
    a7cc:	18c03fcc 	andi	r3,r3,255
    a7d0:	18c0201c 	xori	r3,r3,128
    a7d4:	18ffe004 	addi	r3,r3,-128
    a7d8:	003bb706 	br	96b8 <__alt_data_end+0xff0096b8>
    a7dc:	a809883a 	mov	r4,r21
    a7e0:	d8c02a15 	stw	r3,168(sp)
    a7e4:	da002b15 	stw	r8,172(sp)
    a7e8:	00026f00 	call	26f0 <strlen>
    a7ec:	d8c02a17 	ldw	r3,168(sp)
    a7f0:	1027883a 	mov	r19,r2
    a7f4:	df001d83 	ldbu	fp,118(sp)
    a7f8:	d8c02215 	stw	r3,136(sp)
    a7fc:	0013883a 	mov	r9,zero
    a800:	da002b17 	ldw	r8,172(sp)
    a804:	003c4d06 	br	993c <__alt_data_end+0xff00993c>
    a808:	d9402117 	ldw	r5,132(sp)
    a80c:	d9002017 	ldw	r4,128(sp)
    a810:	d9801a04 	addi	r6,sp,104
    a814:	da402c15 	stw	r9,176(sp)
    a818:	00094280 	call	9428 <__sprint_r.part.0>
    a81c:	da402c17 	ldw	r9,176(sp)
    a820:	103e9a1e 	bne	r2,zero,a28c <__alt_data_end+0xff00a28c>
    a824:	d9401b17 	ldw	r5,108(sp)
    a828:	d8801c17 	ldw	r2,112(sp)
    a82c:	d811883a 	mov	r8,sp
    a830:	29000044 	addi	r4,r5,1
    a834:	003e4206 	br	a140 <__alt_data_end+0xff00a140>
    a838:	d9401b17 	ldw	r5,108(sp)
    a83c:	01000074 	movhi	r4,1
    a840:	21056604 	addi	r4,r4,5528
    a844:	d9002415 	stw	r4,144(sp)
    a848:	29400044 	addi	r5,r5,1
    a84c:	003c6d06 	br	9a04 <__alt_data_end+0xff009a04>
    a850:	0039883a 	mov	fp,zero
    a854:	00800084 	movi	r2,2
    a858:	10803fcc 	andi	r2,r2,255
    a85c:	01000044 	movi	r4,1
    a860:	11001e26 	beq	r2,r4,a8dc <___vfiprintf_internal_r+0x13a0>
    a864:	01000084 	movi	r4,2
    a868:	11001e1e 	bne	r2,r4,a8e4 <___vfiprintf_internal_r+0x13a8>
    a86c:	1829883a 	mov	r20,r3
    a870:	003eea06 	br	a41c <__alt_data_end+0xff00a41c>
    a874:	a007883a 	mov	r3,r20
    a878:	00800044 	movi	r2,1
    a87c:	003ff606 	br	a858 <__alt_data_end+0xff00a858>
    a880:	00800184 	movi	r2,6
    a884:	1240012e 	bgeu	r2,r9,a88c <___vfiprintf_internal_r+0x1350>
    a888:	1013883a 	mov	r9,r2
    a88c:	4827883a 	mov	r19,r9
    a890:	4825883a 	mov	r18,r9
    a894:	48001516 	blt	r9,zero,a8ec <___vfiprintf_internal_r+0x13b0>
    a898:	05400074 	movhi	r21,1
    a89c:	d8c02215 	stw	r3,136(sp)
    a8a0:	ad450604 	addi	r21,r21,5144
    a8a4:	003d1406 	br	9cf8 <__alt_data_end+0xff009cf8>
    a8a8:	02800074 	movhi	r10,1
    a8ac:	52856204 	addi	r10,r10,5512
    a8b0:	da802415 	stw	r10,144(sp)
    a8b4:	200d883a 	mov	r6,r4
    a8b8:	003c9106 	br	9b00 <__alt_data_end+0xff009b00>
    a8bc:	5021883a 	mov	r16,r10
    a8c0:	0013883a 	mov	r9,zero
    a8c4:	003b7d06 	br	96bc <__alt_data_end+0xff0096bc>
    a8c8:	4827883a 	mov	r19,r9
    a8cc:	df001d83 	ldbu	fp,118(sp)
    a8d0:	d8c02215 	stw	r3,136(sp)
    a8d4:	0013883a 	mov	r9,zero
    a8d8:	003c1806 	br	993c <__alt_data_end+0xff00993c>
    a8dc:	1829883a 	mov	r20,r3
    a8e0:	003d1806 	br	9d44 <__alt_data_end+0xff009d44>
    a8e4:	1829883a 	mov	r20,r3
    a8e8:	003ccd06 	br	9c20 <__alt_data_end+0xff009c20>
    a8ec:	0025883a 	mov	r18,zero
    a8f0:	003fe906 	br	a898 <__alt_data_end+0xff00a898>
    a8f4:	d8802217 	ldw	r2,136(sp)
    a8f8:	80c00043 	ldbu	r3,1(r16)
    a8fc:	5021883a 	mov	r16,r10
    a900:	12400017 	ldw	r9,0(r2)
    a904:	10800104 	addi	r2,r2,4
    a908:	d8802215 	stw	r2,136(sp)
    a90c:	483faf0e 	bge	r9,zero,a7cc <__alt_data_end+0xff00a7cc>
    a910:	18c03fcc 	andi	r3,r3,255
    a914:	18c0201c 	xori	r3,r3,128
    a918:	027fffc4 	movi	r9,-1
    a91c:	18ffe004 	addi	r3,r3,-128
    a920:	003b6506 	br	96b8 <__alt_data_end+0xff0096b8>
    a924:	d9c01d85 	stb	r7,118(sp)
    a928:	003ca006 	br	9bac <__alt_data_end+0xff009bac>
    a92c:	d9c01d85 	stb	r7,118(sp)
    a930:	003cad06 	br	9be8 <__alt_data_end+0xff009be8>
    a934:	d9c01d85 	stb	r7,118(sp)
    a938:	003d7d06 	br	9f30 <__alt_data_end+0xff009f30>
    a93c:	d9c01d85 	stb	r7,118(sp)
    a940:	003d5f06 	br	9ec0 <__alt_data_end+0xff009ec0>
    a944:	a080004c 	andi	r2,r20,1
    a948:	0039883a 	mov	fp,zero
    a94c:	10000526 	beq	r2,zero,a964 <___vfiprintf_internal_r+0x1428>
    a950:	00800c04 	movi	r2,48
    a954:	d88019c5 	stb	r2,103(sp)
    a958:	dcc02717 	ldw	r19,156(sp)
    a95c:	dd4019c4 	addi	r21,sp,103
    a960:	003bf606 	br	993c <__alt_data_end+0xff00993c>
    a964:	0027883a 	mov	r19,zero
    a968:	dd401a04 	addi	r21,sp,104
    a96c:	003bf306 	br	993c <__alt_data_end+0xff00993c>
    a970:	d9c01d85 	stb	r7,118(sp)
    a974:	003dc806 	br	a098 <__alt_data_end+0xff00a098>
    a978:	d9c01d85 	stb	r7,118(sp)
    a97c:	003d3a06 	br	9e68 <__alt_data_end+0xff009e68>
    a980:	d9c01d85 	stb	r7,118(sp)
    a984:	003d2a06 	br	9e30 <__alt_data_end+0xff009e30>
    a988:	d9c01d85 	stb	r7,118(sp)
    a98c:	003cde06 	br	9d08 <__alt_data_end+0xff009d08>
    a990:	d9c01d85 	stb	r7,118(sp)
    a994:	003cbc06 	br	9c88 <__alt_data_end+0xff009c88>

0000a998 <__vfiprintf_internal>:
    a998:	00800074 	movhi	r2,1
    a99c:	108ca304 	addi	r2,r2,12940
    a9a0:	300f883a 	mov	r7,r6
    a9a4:	280d883a 	mov	r6,r5
    a9a8:	200b883a 	mov	r5,r4
    a9ac:	11000017 	ldw	r4,0(r2)
    a9b0:	000953c1 	jmpi	953c <___vfiprintf_internal_r>

0000a9b4 <__sbprintf>:
    a9b4:	2880030b 	ldhu	r2,12(r5)
    a9b8:	2ac01917 	ldw	r11,100(r5)
    a9bc:	2a80038b 	ldhu	r10,14(r5)
    a9c0:	2a400717 	ldw	r9,28(r5)
    a9c4:	2a000917 	ldw	r8,36(r5)
    a9c8:	defee204 	addi	sp,sp,-1144
    a9cc:	00c10004 	movi	r3,1024
    a9d0:	dc011a15 	stw	r16,1128(sp)
    a9d4:	10bfff4c 	andi	r2,r2,65533
    a9d8:	2821883a 	mov	r16,r5
    a9dc:	d8cb883a 	add	r5,sp,r3
    a9e0:	dc811c15 	stw	r18,1136(sp)
    a9e4:	dc411b15 	stw	r17,1132(sp)
    a9e8:	dfc11d15 	stw	ra,1140(sp)
    a9ec:	2025883a 	mov	r18,r4
    a9f0:	d881030d 	sth	r2,1036(sp)
    a9f4:	dac11915 	stw	r11,1124(sp)
    a9f8:	da81038d 	sth	r10,1038(sp)
    a9fc:	da410715 	stw	r9,1052(sp)
    aa00:	da010915 	stw	r8,1060(sp)
    aa04:	dec10015 	stw	sp,1024(sp)
    aa08:	dec10415 	stw	sp,1040(sp)
    aa0c:	d8c10215 	stw	r3,1032(sp)
    aa10:	d8c10515 	stw	r3,1044(sp)
    aa14:	d8010615 	stw	zero,1048(sp)
    aa18:	000953c0 	call	953c <___vfiprintf_internal_r>
    aa1c:	1023883a 	mov	r17,r2
    aa20:	10000416 	blt	r2,zero,aa34 <__sbprintf+0x80>
    aa24:	d9410004 	addi	r5,sp,1024
    aa28:	9009883a 	mov	r4,r18
    aa2c:	00066500 	call	6650 <_fflush_r>
    aa30:	10000d1e 	bne	r2,zero,aa68 <__sbprintf+0xb4>
    aa34:	d881030b 	ldhu	r2,1036(sp)
    aa38:	1080100c 	andi	r2,r2,64
    aa3c:	10000326 	beq	r2,zero,aa4c <__sbprintf+0x98>
    aa40:	8080030b 	ldhu	r2,12(r16)
    aa44:	10801014 	ori	r2,r2,64
    aa48:	8080030d 	sth	r2,12(r16)
    aa4c:	8805883a 	mov	r2,r17
    aa50:	dfc11d17 	ldw	ra,1140(sp)
    aa54:	dc811c17 	ldw	r18,1136(sp)
    aa58:	dc411b17 	ldw	r17,1132(sp)
    aa5c:	dc011a17 	ldw	r16,1128(sp)
    aa60:	dec11e04 	addi	sp,sp,1144
    aa64:	f800283a 	ret
    aa68:	047fffc4 	movi	r17,-1
    aa6c:	003ff106 	br	aa34 <__alt_data_end+0xff00aa34>

0000aa70 <_write_r>:
    aa70:	defffd04 	addi	sp,sp,-12
    aa74:	2805883a 	mov	r2,r5
    aa78:	dc000015 	stw	r16,0(sp)
    aa7c:	04000074 	movhi	r16,1
    aa80:	dc400115 	stw	r17,4(sp)
    aa84:	300b883a 	mov	r5,r6
    aa88:	8413b804 	addi	r16,r16,20192
    aa8c:	2023883a 	mov	r17,r4
    aa90:	380d883a 	mov	r6,r7
    aa94:	1009883a 	mov	r4,r2
    aa98:	dfc00215 	stw	ra,8(sp)
    aa9c:	80000015 	stw	zero,0(r16)
    aaa0:	000ed380 	call	ed38 <write>
    aaa4:	00ffffc4 	movi	r3,-1
    aaa8:	10c00526 	beq	r2,r3,aac0 <_write_r+0x50>
    aaac:	dfc00217 	ldw	ra,8(sp)
    aab0:	dc400117 	ldw	r17,4(sp)
    aab4:	dc000017 	ldw	r16,0(sp)
    aab8:	dec00304 	addi	sp,sp,12
    aabc:	f800283a 	ret
    aac0:	80c00017 	ldw	r3,0(r16)
    aac4:	183ff926 	beq	r3,zero,aaac <__alt_data_end+0xff00aaac>
    aac8:	88c00015 	stw	r3,0(r17)
    aacc:	003ff706 	br	aaac <__alt_data_end+0xff00aaac>

0000aad0 <_close_r>:
    aad0:	defffd04 	addi	sp,sp,-12
    aad4:	dc000015 	stw	r16,0(sp)
    aad8:	04000074 	movhi	r16,1
    aadc:	dc400115 	stw	r17,4(sp)
    aae0:	8413b804 	addi	r16,r16,20192
    aae4:	2023883a 	mov	r17,r4
    aae8:	2809883a 	mov	r4,r5
    aaec:	dfc00215 	stw	ra,8(sp)
    aaf0:	80000015 	stw	zero,0(r16)
    aaf4:	000e4f80 	call	e4f8 <close>
    aaf8:	00ffffc4 	movi	r3,-1
    aafc:	10c00526 	beq	r2,r3,ab14 <_close_r+0x44>
    ab00:	dfc00217 	ldw	ra,8(sp)
    ab04:	dc400117 	ldw	r17,4(sp)
    ab08:	dc000017 	ldw	r16,0(sp)
    ab0c:	dec00304 	addi	sp,sp,12
    ab10:	f800283a 	ret
    ab14:	80c00017 	ldw	r3,0(r16)
    ab18:	183ff926 	beq	r3,zero,ab00 <__alt_data_end+0xff00ab00>
    ab1c:	88c00015 	stw	r3,0(r17)
    ab20:	003ff706 	br	ab00 <__alt_data_end+0xff00ab00>

0000ab24 <_calloc_r>:
    ab24:	298b383a 	mul	r5,r5,r6
    ab28:	defffe04 	addi	sp,sp,-8
    ab2c:	dfc00115 	stw	ra,4(sp)
    ab30:	dc000015 	stw	r16,0(sp)
    ab34:	0001d500 	call	1d50 <_malloc_r>
    ab38:	10002926 	beq	r2,zero,abe0 <_calloc_r+0xbc>
    ab3c:	11bfff17 	ldw	r6,-4(r2)
    ab40:	1021883a 	mov	r16,r2
    ab44:	00bfff04 	movi	r2,-4
    ab48:	308c703a 	and	r6,r6,r2
    ab4c:	00c00904 	movi	r3,36
    ab50:	308d883a 	add	r6,r6,r2
    ab54:	19801636 	bltu	r3,r6,abb0 <_calloc_r+0x8c>
    ab58:	008004c4 	movi	r2,19
    ab5c:	11800b2e 	bgeu	r2,r6,ab8c <_calloc_r+0x68>
    ab60:	80000015 	stw	zero,0(r16)
    ab64:	80000115 	stw	zero,4(r16)
    ab68:	008006c4 	movi	r2,27
    ab6c:	11801a2e 	bgeu	r2,r6,abd8 <_calloc_r+0xb4>
    ab70:	80000215 	stw	zero,8(r16)
    ab74:	80000315 	stw	zero,12(r16)
    ab78:	30c0151e 	bne	r6,r3,abd0 <_calloc_r+0xac>
    ab7c:	80000415 	stw	zero,16(r16)
    ab80:	80800604 	addi	r2,r16,24
    ab84:	80000515 	stw	zero,20(r16)
    ab88:	00000106 	br	ab90 <_calloc_r+0x6c>
    ab8c:	8005883a 	mov	r2,r16
    ab90:	10000015 	stw	zero,0(r2)
    ab94:	10000115 	stw	zero,4(r2)
    ab98:	10000215 	stw	zero,8(r2)
    ab9c:	8005883a 	mov	r2,r16
    aba0:	dfc00117 	ldw	ra,4(sp)
    aba4:	dc000017 	ldw	r16,0(sp)
    aba8:	dec00204 	addi	sp,sp,8
    abac:	f800283a 	ret
    abb0:	000b883a 	mov	r5,zero
    abb4:	8009883a 	mov	r4,r16
    abb8:	0007b140 	call	7b14 <memset>
    abbc:	8005883a 	mov	r2,r16
    abc0:	dfc00117 	ldw	ra,4(sp)
    abc4:	dc000017 	ldw	r16,0(sp)
    abc8:	dec00204 	addi	sp,sp,8
    abcc:	f800283a 	ret
    abd0:	80800404 	addi	r2,r16,16
    abd4:	003fee06 	br	ab90 <__alt_data_end+0xff00ab90>
    abd8:	80800204 	addi	r2,r16,8
    abdc:	003fec06 	br	ab90 <__alt_data_end+0xff00ab90>
    abe0:	0005883a 	mov	r2,zero
    abe4:	003fee06 	br	aba0 <__alt_data_end+0xff00aba0>

0000abe8 <_fclose_r>:
    abe8:	28003926 	beq	r5,zero,acd0 <_fclose_r+0xe8>
    abec:	defffc04 	addi	sp,sp,-16
    abf0:	dc400115 	stw	r17,4(sp)
    abf4:	dc000015 	stw	r16,0(sp)
    abf8:	dfc00315 	stw	ra,12(sp)
    abfc:	dc800215 	stw	r18,8(sp)
    ac00:	2023883a 	mov	r17,r4
    ac04:	2821883a 	mov	r16,r5
    ac08:	20000226 	beq	r4,zero,ac14 <_fclose_r+0x2c>
    ac0c:	20800e17 	ldw	r2,56(r4)
    ac10:	10002726 	beq	r2,zero,acb0 <_fclose_r+0xc8>
    ac14:	8080030f 	ldh	r2,12(r16)
    ac18:	1000071e 	bne	r2,zero,ac38 <_fclose_r+0x50>
    ac1c:	0005883a 	mov	r2,zero
    ac20:	dfc00317 	ldw	ra,12(sp)
    ac24:	dc800217 	ldw	r18,8(sp)
    ac28:	dc400117 	ldw	r17,4(sp)
    ac2c:	dc000017 	ldw	r16,0(sp)
    ac30:	dec00404 	addi	sp,sp,16
    ac34:	f800283a 	ret
    ac38:	800b883a 	mov	r5,r16
    ac3c:	8809883a 	mov	r4,r17
    ac40:	00064340 	call	6434 <__sflush_r>
    ac44:	1025883a 	mov	r18,r2
    ac48:	80800b17 	ldw	r2,44(r16)
    ac4c:	10000426 	beq	r2,zero,ac60 <_fclose_r+0x78>
    ac50:	81400717 	ldw	r5,28(r16)
    ac54:	8809883a 	mov	r4,r17
    ac58:	103ee83a 	callr	r2
    ac5c:	10001616 	blt	r2,zero,acb8 <_fclose_r+0xd0>
    ac60:	8080030b 	ldhu	r2,12(r16)
    ac64:	1080200c 	andi	r2,r2,128
    ac68:	1000151e 	bne	r2,zero,acc0 <_fclose_r+0xd8>
    ac6c:	81400c17 	ldw	r5,48(r16)
    ac70:	28000526 	beq	r5,zero,ac88 <_fclose_r+0xa0>
    ac74:	80801004 	addi	r2,r16,64
    ac78:	28800226 	beq	r5,r2,ac84 <_fclose_r+0x9c>
    ac7c:	8809883a 	mov	r4,r17
    ac80:	0006ba00 	call	6ba0 <_free_r>
    ac84:	80000c15 	stw	zero,48(r16)
    ac88:	81401117 	ldw	r5,68(r16)
    ac8c:	28000326 	beq	r5,zero,ac9c <_fclose_r+0xb4>
    ac90:	8809883a 	mov	r4,r17
    ac94:	0006ba00 	call	6ba0 <_free_r>
    ac98:	80001115 	stw	zero,68(r16)
    ac9c:	0006a3c0 	call	6a3c <__sfp_lock_acquire>
    aca0:	8000030d 	sth	zero,12(r16)
    aca4:	0006a400 	call	6a40 <__sfp_lock_release>
    aca8:	9005883a 	mov	r2,r18
    acac:	003fdc06 	br	ac20 <__alt_data_end+0xff00ac20>
    acb0:	0006a2c0 	call	6a2c <__sinit>
    acb4:	003fd706 	br	ac14 <__alt_data_end+0xff00ac14>
    acb8:	04bfffc4 	movi	r18,-1
    acbc:	003fe806 	br	ac60 <__alt_data_end+0xff00ac60>
    acc0:	81400417 	ldw	r5,16(r16)
    acc4:	8809883a 	mov	r4,r17
    acc8:	0006ba00 	call	6ba0 <_free_r>
    accc:	003fe706 	br	ac6c <__alt_data_end+0xff00ac6c>
    acd0:	0005883a 	mov	r2,zero
    acd4:	f800283a 	ret

0000acd8 <fclose>:
    acd8:	00800074 	movhi	r2,1
    acdc:	108ca304 	addi	r2,r2,12940
    ace0:	200b883a 	mov	r5,r4
    ace4:	11000017 	ldw	r4,0(r2)
    ace8:	000abe81 	jmpi	abe8 <_fclose_r>

0000acec <__fputwc>:
    acec:	defff804 	addi	sp,sp,-32
    acf0:	dcc00415 	stw	r19,16(sp)
    acf4:	dc800315 	stw	r18,12(sp)
    acf8:	dc000115 	stw	r16,4(sp)
    acfc:	dfc00715 	stw	ra,28(sp)
    ad00:	dd400615 	stw	r21,24(sp)
    ad04:	dd000515 	stw	r20,20(sp)
    ad08:	dc400215 	stw	r17,8(sp)
    ad0c:	2027883a 	mov	r19,r4
    ad10:	2825883a 	mov	r18,r5
    ad14:	3021883a 	mov	r16,r6
    ad18:	000757c0 	call	757c <__locale_mb_cur_max>
    ad1c:	00c00044 	movi	r3,1
    ad20:	10c03e26 	beq	r2,r3,ae1c <__fputwc+0x130>
    ad24:	81c01704 	addi	r7,r16,92
    ad28:	900d883a 	mov	r6,r18
    ad2c:	d80b883a 	mov	r5,sp
    ad30:	9809883a 	mov	r4,r19
    ad34:	000b1bc0 	call	b1bc <_wcrtomb_r>
    ad38:	1029883a 	mov	r20,r2
    ad3c:	00bfffc4 	movi	r2,-1
    ad40:	a0802026 	beq	r20,r2,adc4 <__fputwc+0xd8>
    ad44:	d9400003 	ldbu	r5,0(sp)
    ad48:	a0001c26 	beq	r20,zero,adbc <__fputwc+0xd0>
    ad4c:	0023883a 	mov	r17,zero
    ad50:	05400284 	movi	r21,10
    ad54:	00000906 	br	ad7c <__fputwc+0x90>
    ad58:	80800017 	ldw	r2,0(r16)
    ad5c:	11400005 	stb	r5,0(r2)
    ad60:	80c00017 	ldw	r3,0(r16)
    ad64:	18c00044 	addi	r3,r3,1
    ad68:	80c00015 	stw	r3,0(r16)
    ad6c:	8c400044 	addi	r17,r17,1
    ad70:	dc45883a 	add	r2,sp,r17
    ad74:	8d00112e 	bgeu	r17,r20,adbc <__fputwc+0xd0>
    ad78:	11400003 	ldbu	r5,0(r2)
    ad7c:	80c00217 	ldw	r3,8(r16)
    ad80:	18ffffc4 	addi	r3,r3,-1
    ad84:	80c00215 	stw	r3,8(r16)
    ad88:	183ff30e 	bge	r3,zero,ad58 <__alt_data_end+0xff00ad58>
    ad8c:	80800617 	ldw	r2,24(r16)
    ad90:	18801916 	blt	r3,r2,adf8 <__fputwc+0x10c>
    ad94:	80800017 	ldw	r2,0(r16)
    ad98:	11400005 	stb	r5,0(r2)
    ad9c:	80800017 	ldw	r2,0(r16)
    ada0:	10c00003 	ldbu	r3,0(r2)
    ada4:	10800044 	addi	r2,r2,1
    ada8:	1d402326 	beq	r3,r21,ae38 <__fputwc+0x14c>
    adac:	80800015 	stw	r2,0(r16)
    adb0:	8c400044 	addi	r17,r17,1
    adb4:	dc45883a 	add	r2,sp,r17
    adb8:	8d3fef36 	bltu	r17,r20,ad78 <__alt_data_end+0xff00ad78>
    adbc:	9005883a 	mov	r2,r18
    adc0:	00000406 	br	add4 <__fputwc+0xe8>
    adc4:	80c0030b 	ldhu	r3,12(r16)
    adc8:	a005883a 	mov	r2,r20
    adcc:	18c01014 	ori	r3,r3,64
    add0:	80c0030d 	sth	r3,12(r16)
    add4:	dfc00717 	ldw	ra,28(sp)
    add8:	dd400617 	ldw	r21,24(sp)
    addc:	dd000517 	ldw	r20,20(sp)
    ade0:	dcc00417 	ldw	r19,16(sp)
    ade4:	dc800317 	ldw	r18,12(sp)
    ade8:	dc400217 	ldw	r17,8(sp)
    adec:	dc000117 	ldw	r16,4(sp)
    adf0:	dec00804 	addi	sp,sp,32
    adf4:	f800283a 	ret
    adf8:	800d883a 	mov	r6,r16
    adfc:	29403fcc 	andi	r5,r5,255
    ae00:	9809883a 	mov	r4,r19
    ae04:	000b0640 	call	b064 <__swbuf_r>
    ae08:	10bfffe0 	cmpeqi	r2,r2,-1
    ae0c:	10803fcc 	andi	r2,r2,255
    ae10:	103fd626 	beq	r2,zero,ad6c <__alt_data_end+0xff00ad6c>
    ae14:	00bfffc4 	movi	r2,-1
    ae18:	003fee06 	br	add4 <__alt_data_end+0xff00add4>
    ae1c:	90ffffc4 	addi	r3,r18,-1
    ae20:	01003f84 	movi	r4,254
    ae24:	20ffbf36 	bltu	r4,r3,ad24 <__alt_data_end+0xff00ad24>
    ae28:	900b883a 	mov	r5,r18
    ae2c:	dc800005 	stb	r18,0(sp)
    ae30:	1029883a 	mov	r20,r2
    ae34:	003fc506 	br	ad4c <__alt_data_end+0xff00ad4c>
    ae38:	800d883a 	mov	r6,r16
    ae3c:	a80b883a 	mov	r5,r21
    ae40:	9809883a 	mov	r4,r19
    ae44:	000b0640 	call	b064 <__swbuf_r>
    ae48:	10bfffe0 	cmpeqi	r2,r2,-1
    ae4c:	003fef06 	br	ae0c <__alt_data_end+0xff00ae0c>

0000ae50 <_fputwc_r>:
    ae50:	3080030b 	ldhu	r2,12(r6)
    ae54:	10c8000c 	andi	r3,r2,8192
    ae58:	1800051e 	bne	r3,zero,ae70 <_fputwc_r+0x20>
    ae5c:	30c01917 	ldw	r3,100(r6)
    ae60:	10880014 	ori	r2,r2,8192
    ae64:	3080030d 	sth	r2,12(r6)
    ae68:	18880014 	ori	r2,r3,8192
    ae6c:	30801915 	stw	r2,100(r6)
    ae70:	000acec1 	jmpi	acec <__fputwc>

0000ae74 <fputwc>:
    ae74:	00800074 	movhi	r2,1
    ae78:	defffc04 	addi	sp,sp,-16
    ae7c:	108ca304 	addi	r2,r2,12940
    ae80:	dc000115 	stw	r16,4(sp)
    ae84:	14000017 	ldw	r16,0(r2)
    ae88:	dc400215 	stw	r17,8(sp)
    ae8c:	dfc00315 	stw	ra,12(sp)
    ae90:	2023883a 	mov	r17,r4
    ae94:	80000226 	beq	r16,zero,aea0 <fputwc+0x2c>
    ae98:	80800e17 	ldw	r2,56(r16)
    ae9c:	10001026 	beq	r2,zero,aee0 <fputwc+0x6c>
    aea0:	2880030b 	ldhu	r2,12(r5)
    aea4:	10c8000c 	andi	r3,r2,8192
    aea8:	1800051e 	bne	r3,zero,aec0 <fputwc+0x4c>
    aeac:	28c01917 	ldw	r3,100(r5)
    aeb0:	10880014 	ori	r2,r2,8192
    aeb4:	2880030d 	sth	r2,12(r5)
    aeb8:	18880014 	ori	r2,r3,8192
    aebc:	28801915 	stw	r2,100(r5)
    aec0:	280d883a 	mov	r6,r5
    aec4:	8009883a 	mov	r4,r16
    aec8:	880b883a 	mov	r5,r17
    aecc:	dfc00317 	ldw	ra,12(sp)
    aed0:	dc400217 	ldw	r17,8(sp)
    aed4:	dc000117 	ldw	r16,4(sp)
    aed8:	dec00404 	addi	sp,sp,16
    aedc:	000acec1 	jmpi	acec <__fputwc>
    aee0:	8009883a 	mov	r4,r16
    aee4:	d9400015 	stw	r5,0(sp)
    aee8:	0006a2c0 	call	6a2c <__sinit>
    aeec:	d9400017 	ldw	r5,0(sp)
    aef0:	003feb06 	br	aea0 <__alt_data_end+0xff00aea0>

0000aef4 <_fstat_r>:
    aef4:	defffd04 	addi	sp,sp,-12
    aef8:	2805883a 	mov	r2,r5
    aefc:	dc000015 	stw	r16,0(sp)
    af00:	04000074 	movhi	r16,1
    af04:	dc400115 	stw	r17,4(sp)
    af08:	8413b804 	addi	r16,r16,20192
    af0c:	2023883a 	mov	r17,r4
    af10:	300b883a 	mov	r5,r6
    af14:	1009883a 	mov	r4,r2
    af18:	dfc00215 	stw	ra,8(sp)
    af1c:	80000015 	stw	zero,0(r16)
    af20:	000e6300 	call	e630 <fstat>
    af24:	00ffffc4 	movi	r3,-1
    af28:	10c00526 	beq	r2,r3,af40 <_fstat_r+0x4c>
    af2c:	dfc00217 	ldw	ra,8(sp)
    af30:	dc400117 	ldw	r17,4(sp)
    af34:	dc000017 	ldw	r16,0(sp)
    af38:	dec00304 	addi	sp,sp,12
    af3c:	f800283a 	ret
    af40:	80c00017 	ldw	r3,0(r16)
    af44:	183ff926 	beq	r3,zero,af2c <__alt_data_end+0xff00af2c>
    af48:	88c00015 	stw	r3,0(r17)
    af4c:	003ff706 	br	af2c <__alt_data_end+0xff00af2c>

0000af50 <_isatty_r>:
    af50:	defffd04 	addi	sp,sp,-12
    af54:	dc000015 	stw	r16,0(sp)
    af58:	04000074 	movhi	r16,1
    af5c:	dc400115 	stw	r17,4(sp)
    af60:	8413b804 	addi	r16,r16,20192
    af64:	2023883a 	mov	r17,r4
    af68:	2809883a 	mov	r4,r5
    af6c:	dfc00215 	stw	ra,8(sp)
    af70:	80000015 	stw	zero,0(r16)
    af74:	000e71c0 	call	e71c <isatty>
    af78:	00ffffc4 	movi	r3,-1
    af7c:	10c00526 	beq	r2,r3,af94 <_isatty_r+0x44>
    af80:	dfc00217 	ldw	ra,8(sp)
    af84:	dc400117 	ldw	r17,4(sp)
    af88:	dc000017 	ldw	r16,0(sp)
    af8c:	dec00304 	addi	sp,sp,12
    af90:	f800283a 	ret
    af94:	80c00017 	ldw	r3,0(r16)
    af98:	183ff926 	beq	r3,zero,af80 <__alt_data_end+0xff00af80>
    af9c:	88c00015 	stw	r3,0(r17)
    afa0:	003ff706 	br	af80 <__alt_data_end+0xff00af80>

0000afa4 <_lseek_r>:
    afa4:	defffd04 	addi	sp,sp,-12
    afa8:	2805883a 	mov	r2,r5
    afac:	dc000015 	stw	r16,0(sp)
    afb0:	04000074 	movhi	r16,1
    afb4:	dc400115 	stw	r17,4(sp)
    afb8:	300b883a 	mov	r5,r6
    afbc:	8413b804 	addi	r16,r16,20192
    afc0:	2023883a 	mov	r17,r4
    afc4:	380d883a 	mov	r6,r7
    afc8:	1009883a 	mov	r4,r2
    afcc:	dfc00215 	stw	ra,8(sp)
    afd0:	80000015 	stw	zero,0(r16)
    afd4:	000e8e80 	call	e8e8 <lseek>
    afd8:	00ffffc4 	movi	r3,-1
    afdc:	10c00526 	beq	r2,r3,aff4 <_lseek_r+0x50>
    afe0:	dfc00217 	ldw	ra,8(sp)
    afe4:	dc400117 	ldw	r17,4(sp)
    afe8:	dc000017 	ldw	r16,0(sp)
    afec:	dec00304 	addi	sp,sp,12
    aff0:	f800283a 	ret
    aff4:	80c00017 	ldw	r3,0(r16)
    aff8:	183ff926 	beq	r3,zero,afe0 <__alt_data_end+0xff00afe0>
    affc:	88c00015 	stw	r3,0(r17)
    b000:	003ff706 	br	afe0 <__alt_data_end+0xff00afe0>

0000b004 <_read_r>:
    b004:	defffd04 	addi	sp,sp,-12
    b008:	2805883a 	mov	r2,r5
    b00c:	dc000015 	stw	r16,0(sp)
    b010:	04000074 	movhi	r16,1
    b014:	dc400115 	stw	r17,4(sp)
    b018:	300b883a 	mov	r5,r6
    b01c:	8413b804 	addi	r16,r16,20192
    b020:	2023883a 	mov	r17,r4
    b024:	380d883a 	mov	r6,r7
    b028:	1009883a 	mov	r4,r2
    b02c:	dfc00215 	stw	ra,8(sp)
    b030:	80000015 	stw	zero,0(r16)
    b034:	000eabc0 	call	eabc <read>
    b038:	00ffffc4 	movi	r3,-1
    b03c:	10c00526 	beq	r2,r3,b054 <_read_r+0x50>
    b040:	dfc00217 	ldw	ra,8(sp)
    b044:	dc400117 	ldw	r17,4(sp)
    b048:	dc000017 	ldw	r16,0(sp)
    b04c:	dec00304 	addi	sp,sp,12
    b050:	f800283a 	ret
    b054:	80c00017 	ldw	r3,0(r16)
    b058:	183ff926 	beq	r3,zero,b040 <__alt_data_end+0xff00b040>
    b05c:	88c00015 	stw	r3,0(r17)
    b060:	003ff706 	br	b040 <__alt_data_end+0xff00b040>

0000b064 <__swbuf_r>:
    b064:	defffb04 	addi	sp,sp,-20
    b068:	dcc00315 	stw	r19,12(sp)
    b06c:	dc800215 	stw	r18,8(sp)
    b070:	dc000015 	stw	r16,0(sp)
    b074:	dfc00415 	stw	ra,16(sp)
    b078:	dc400115 	stw	r17,4(sp)
    b07c:	2025883a 	mov	r18,r4
    b080:	2827883a 	mov	r19,r5
    b084:	3021883a 	mov	r16,r6
    b088:	20000226 	beq	r4,zero,b094 <__swbuf_r+0x30>
    b08c:	20800e17 	ldw	r2,56(r4)
    b090:	10004226 	beq	r2,zero,b19c <__swbuf_r+0x138>
    b094:	80800617 	ldw	r2,24(r16)
    b098:	8100030b 	ldhu	r4,12(r16)
    b09c:	80800215 	stw	r2,8(r16)
    b0a0:	2080020c 	andi	r2,r4,8
    b0a4:	10003626 	beq	r2,zero,b180 <__swbuf_r+0x11c>
    b0a8:	80c00417 	ldw	r3,16(r16)
    b0ac:	18003426 	beq	r3,zero,b180 <__swbuf_r+0x11c>
    b0b0:	2088000c 	andi	r2,r4,8192
    b0b4:	9c403fcc 	andi	r17,r19,255
    b0b8:	10001a26 	beq	r2,zero,b124 <__swbuf_r+0xc0>
    b0bc:	80800017 	ldw	r2,0(r16)
    b0c0:	81000517 	ldw	r4,20(r16)
    b0c4:	10c7c83a 	sub	r3,r2,r3
    b0c8:	1900200e 	bge	r3,r4,b14c <__swbuf_r+0xe8>
    b0cc:	18c00044 	addi	r3,r3,1
    b0d0:	81000217 	ldw	r4,8(r16)
    b0d4:	11400044 	addi	r5,r2,1
    b0d8:	81400015 	stw	r5,0(r16)
    b0dc:	213fffc4 	addi	r4,r4,-1
    b0e0:	81000215 	stw	r4,8(r16)
    b0e4:	14c00005 	stb	r19,0(r2)
    b0e8:	80800517 	ldw	r2,20(r16)
    b0ec:	10c01e26 	beq	r2,r3,b168 <__swbuf_r+0x104>
    b0f0:	8080030b 	ldhu	r2,12(r16)
    b0f4:	1080004c 	andi	r2,r2,1
    b0f8:	10000226 	beq	r2,zero,b104 <__swbuf_r+0xa0>
    b0fc:	00800284 	movi	r2,10
    b100:	88801926 	beq	r17,r2,b168 <__swbuf_r+0x104>
    b104:	8805883a 	mov	r2,r17
    b108:	dfc00417 	ldw	ra,16(sp)
    b10c:	dcc00317 	ldw	r19,12(sp)
    b110:	dc800217 	ldw	r18,8(sp)
    b114:	dc400117 	ldw	r17,4(sp)
    b118:	dc000017 	ldw	r16,0(sp)
    b11c:	dec00504 	addi	sp,sp,20
    b120:	f800283a 	ret
    b124:	81401917 	ldw	r5,100(r16)
    b128:	00b7ffc4 	movi	r2,-8193
    b12c:	21080014 	ori	r4,r4,8192
    b130:	2884703a 	and	r2,r5,r2
    b134:	80801915 	stw	r2,100(r16)
    b138:	80800017 	ldw	r2,0(r16)
    b13c:	8100030d 	sth	r4,12(r16)
    b140:	81000517 	ldw	r4,20(r16)
    b144:	10c7c83a 	sub	r3,r2,r3
    b148:	193fe016 	blt	r3,r4,b0cc <__alt_data_end+0xff00b0cc>
    b14c:	800b883a 	mov	r5,r16
    b150:	9009883a 	mov	r4,r18
    b154:	00066500 	call	6650 <_fflush_r>
    b158:	1000071e 	bne	r2,zero,b178 <__swbuf_r+0x114>
    b15c:	80800017 	ldw	r2,0(r16)
    b160:	00c00044 	movi	r3,1
    b164:	003fda06 	br	b0d0 <__alt_data_end+0xff00b0d0>
    b168:	800b883a 	mov	r5,r16
    b16c:	9009883a 	mov	r4,r18
    b170:	00066500 	call	6650 <_fflush_r>
    b174:	103fe326 	beq	r2,zero,b104 <__alt_data_end+0xff00b104>
    b178:	00bfffc4 	movi	r2,-1
    b17c:	003fe206 	br	b108 <__alt_data_end+0xff00b108>
    b180:	800b883a 	mov	r5,r16
    b184:	9009883a 	mov	r4,r18
    b188:	0004a580 	call	4a58 <__swsetup_r>
    b18c:	103ffa1e 	bne	r2,zero,b178 <__alt_data_end+0xff00b178>
    b190:	8100030b 	ldhu	r4,12(r16)
    b194:	80c00417 	ldw	r3,16(r16)
    b198:	003fc506 	br	b0b0 <__alt_data_end+0xff00b0b0>
    b19c:	0006a2c0 	call	6a2c <__sinit>
    b1a0:	003fbc06 	br	b094 <__alt_data_end+0xff00b094>

0000b1a4 <__swbuf>:
    b1a4:	00800074 	movhi	r2,1
    b1a8:	108ca304 	addi	r2,r2,12940
    b1ac:	280d883a 	mov	r6,r5
    b1b0:	200b883a 	mov	r5,r4
    b1b4:	11000017 	ldw	r4,0(r2)
    b1b8:	000b0641 	jmpi	b064 <__swbuf_r>

0000b1bc <_wcrtomb_r>:
    b1bc:	defff604 	addi	sp,sp,-40
    b1c0:	00800074 	movhi	r2,1
    b1c4:	dc800815 	stw	r18,32(sp)
    b1c8:	dc400715 	stw	r17,28(sp)
    b1cc:	dc000615 	stw	r16,24(sp)
    b1d0:	108ca504 	addi	r2,r2,12948
    b1d4:	dfc00915 	stw	ra,36(sp)
    b1d8:	2021883a 	mov	r16,r4
    b1dc:	3823883a 	mov	r17,r7
    b1e0:	14800017 	ldw	r18,0(r2)
    b1e4:	28001426 	beq	r5,zero,b238 <_wcrtomb_r+0x7c>
    b1e8:	d9400415 	stw	r5,16(sp)
    b1ec:	d9800515 	stw	r6,20(sp)
    b1f0:	00075700 	call	7570 <__locale_charset>
    b1f4:	d9800517 	ldw	r6,20(sp)
    b1f8:	d9400417 	ldw	r5,16(sp)
    b1fc:	100f883a 	mov	r7,r2
    b200:	dc400015 	stw	r17,0(sp)
    b204:	8009883a 	mov	r4,r16
    b208:	903ee83a 	callr	r18
    b20c:	00ffffc4 	movi	r3,-1
    b210:	10c0031e 	bne	r2,r3,b220 <_wcrtomb_r+0x64>
    b214:	88000015 	stw	zero,0(r17)
    b218:	00c02284 	movi	r3,138
    b21c:	80c00015 	stw	r3,0(r16)
    b220:	dfc00917 	ldw	ra,36(sp)
    b224:	dc800817 	ldw	r18,32(sp)
    b228:	dc400717 	ldw	r17,28(sp)
    b22c:	dc000617 	ldw	r16,24(sp)
    b230:	dec00a04 	addi	sp,sp,40
    b234:	f800283a 	ret
    b238:	00075700 	call	7570 <__locale_charset>
    b23c:	100f883a 	mov	r7,r2
    b240:	dc400015 	stw	r17,0(sp)
    b244:	000d883a 	mov	r6,zero
    b248:	d9400104 	addi	r5,sp,4
    b24c:	8009883a 	mov	r4,r16
    b250:	903ee83a 	callr	r18
    b254:	003fed06 	br	b20c <__alt_data_end+0xff00b20c>

0000b258 <wcrtomb>:
    b258:	defff604 	addi	sp,sp,-40
    b25c:	00800074 	movhi	r2,1
    b260:	dc800615 	stw	r18,24(sp)
    b264:	dc400515 	stw	r17,20(sp)
    b268:	108ca304 	addi	r2,r2,12940
    b26c:	dfc00915 	stw	ra,36(sp)
    b270:	dd000815 	stw	r20,32(sp)
    b274:	dcc00715 	stw	r19,28(sp)
    b278:	dc000415 	stw	r16,16(sp)
    b27c:	3025883a 	mov	r18,r6
    b280:	14400017 	ldw	r17,0(r2)
    b284:	20001926 	beq	r4,zero,b2ec <wcrtomb+0x94>
    b288:	00800074 	movhi	r2,1
    b28c:	108ca504 	addi	r2,r2,12948
    b290:	15000017 	ldw	r20,0(r2)
    b294:	2021883a 	mov	r16,r4
    b298:	2827883a 	mov	r19,r5
    b29c:	00075700 	call	7570 <__locale_charset>
    b2a0:	100f883a 	mov	r7,r2
    b2a4:	dc800015 	stw	r18,0(sp)
    b2a8:	980d883a 	mov	r6,r19
    b2ac:	800b883a 	mov	r5,r16
    b2b0:	8809883a 	mov	r4,r17
    b2b4:	a03ee83a 	callr	r20
    b2b8:	00ffffc4 	movi	r3,-1
    b2bc:	10c0031e 	bne	r2,r3,b2cc <wcrtomb+0x74>
    b2c0:	90000015 	stw	zero,0(r18)
    b2c4:	00c02284 	movi	r3,138
    b2c8:	88c00015 	stw	r3,0(r17)
    b2cc:	dfc00917 	ldw	ra,36(sp)
    b2d0:	dd000817 	ldw	r20,32(sp)
    b2d4:	dcc00717 	ldw	r19,28(sp)
    b2d8:	dc800617 	ldw	r18,24(sp)
    b2dc:	dc400517 	ldw	r17,20(sp)
    b2e0:	dc000417 	ldw	r16,16(sp)
    b2e4:	dec00a04 	addi	sp,sp,40
    b2e8:	f800283a 	ret
    b2ec:	00800074 	movhi	r2,1
    b2f0:	108ca504 	addi	r2,r2,12948
    b2f4:	14000017 	ldw	r16,0(r2)
    b2f8:	00075700 	call	7570 <__locale_charset>
    b2fc:	100f883a 	mov	r7,r2
    b300:	dc800015 	stw	r18,0(sp)
    b304:	000d883a 	mov	r6,zero
    b308:	d9400104 	addi	r5,sp,4
    b30c:	8809883a 	mov	r4,r17
    b310:	803ee83a 	callr	r16
    b314:	003fe806 	br	b2b8 <__alt_data_end+0xff00b2b8>

0000b318 <__ascii_wctomb>:
    b318:	28000526 	beq	r5,zero,b330 <__ascii_wctomb+0x18>
    b31c:	00803fc4 	movi	r2,255
    b320:	11800536 	bltu	r2,r6,b338 <__ascii_wctomb+0x20>
    b324:	29800005 	stb	r6,0(r5)
    b328:	00800044 	movi	r2,1
    b32c:	f800283a 	ret
    b330:	0005883a 	mov	r2,zero
    b334:	f800283a 	ret
    b338:	00802284 	movi	r2,138
    b33c:	20800015 	stw	r2,0(r4)
    b340:	00bfffc4 	movi	r2,-1
    b344:	f800283a 	ret

0000b348 <_wctomb_r>:
    b348:	00800074 	movhi	r2,1
    b34c:	defff904 	addi	sp,sp,-28
    b350:	108ca504 	addi	r2,r2,12948
    b354:	dfc00615 	stw	ra,24(sp)
    b358:	dc400515 	stw	r17,20(sp)
    b35c:	dc000415 	stw	r16,16(sp)
    b360:	3823883a 	mov	r17,r7
    b364:	14000017 	ldw	r16,0(r2)
    b368:	d9000115 	stw	r4,4(sp)
    b36c:	d9400215 	stw	r5,8(sp)
    b370:	d9800315 	stw	r6,12(sp)
    b374:	00075700 	call	7570 <__locale_charset>
    b378:	d9800317 	ldw	r6,12(sp)
    b37c:	d9400217 	ldw	r5,8(sp)
    b380:	d9000117 	ldw	r4,4(sp)
    b384:	100f883a 	mov	r7,r2
    b388:	dc400015 	stw	r17,0(sp)
    b38c:	803ee83a 	callr	r16
    b390:	dfc00617 	ldw	ra,24(sp)
    b394:	dc400517 	ldw	r17,20(sp)
    b398:	dc000417 	ldw	r16,16(sp)
    b39c:	dec00704 	addi	sp,sp,28
    b3a0:	f800283a 	ret

0000b3a4 <__udivdi3>:
    b3a4:	defff504 	addi	sp,sp,-44
    b3a8:	dcc00415 	stw	r19,16(sp)
    b3ac:	dc000115 	stw	r16,4(sp)
    b3b0:	dfc00a15 	stw	ra,40(sp)
    b3b4:	df000915 	stw	fp,36(sp)
    b3b8:	ddc00815 	stw	r23,32(sp)
    b3bc:	dd800715 	stw	r22,28(sp)
    b3c0:	dd400615 	stw	r21,24(sp)
    b3c4:	dd000515 	stw	r20,20(sp)
    b3c8:	dc800315 	stw	r18,12(sp)
    b3cc:	dc400215 	stw	r17,8(sp)
    b3d0:	2027883a 	mov	r19,r4
    b3d4:	2821883a 	mov	r16,r5
    b3d8:	3800411e 	bne	r7,zero,b4e0 <__udivdi3+0x13c>
    b3dc:	3023883a 	mov	r17,r6
    b3e0:	2025883a 	mov	r18,r4
    b3e4:	2980522e 	bgeu	r5,r6,b530 <__udivdi3+0x18c>
    b3e8:	00bfffd4 	movui	r2,65535
    b3ec:	282d883a 	mov	r22,r5
    b3f0:	1180a836 	bltu	r2,r6,b694 <__udivdi3+0x2f0>
    b3f4:	00803fc4 	movi	r2,255
    b3f8:	1185803a 	cmpltu	r2,r2,r6
    b3fc:	100490fa 	slli	r2,r2,3
    b400:	3086d83a 	srl	r3,r6,r2
    b404:	01000074 	movhi	r4,1
    b408:	21056a04 	addi	r4,r4,5544
    b40c:	20c7883a 	add	r3,r4,r3
    b410:	18c00003 	ldbu	r3,0(r3)
    b414:	1885883a 	add	r2,r3,r2
    b418:	00c00804 	movi	r3,32
    b41c:	1887c83a 	sub	r3,r3,r2
    b420:	18000526 	beq	r3,zero,b438 <__udivdi3+0x94>
    b424:	80e0983a 	sll	r16,r16,r3
    b428:	9884d83a 	srl	r2,r19,r2
    b42c:	30e2983a 	sll	r17,r6,r3
    b430:	98e4983a 	sll	r18,r19,r3
    b434:	142cb03a 	or	r22,r2,r16
    b438:	882ad43a 	srli	r21,r17,16
    b43c:	b009883a 	mov	r4,r22
    b440:	8d3fffcc 	andi	r20,r17,65535
    b444:	a80b883a 	mov	r5,r21
    b448:	0001cd00 	call	1cd0 <__umodsi3>
    b44c:	b009883a 	mov	r4,r22
    b450:	a80b883a 	mov	r5,r21
    b454:	1027883a 	mov	r19,r2
    b458:	0001c6c0 	call	1c6c <__udivsi3>
    b45c:	102d883a 	mov	r22,r2
    b460:	9826943a 	slli	r19,r19,16
    b464:	9004d43a 	srli	r2,r18,16
    b468:	a5a1383a 	mul	r16,r20,r22
    b46c:	14c4b03a 	or	r2,r2,r19
    b470:	1400052e 	bgeu	r2,r16,b488 <__udivdi3+0xe4>
    b474:	1445883a 	add	r2,r2,r17
    b478:	b0ffffc4 	addi	r3,r22,-1
    b47c:	14400136 	bltu	r2,r17,b484 <__udivdi3+0xe0>
    b480:	14012336 	bltu	r2,r16,b910 <__udivdi3+0x56c>
    b484:	182d883a 	mov	r22,r3
    b488:	1421c83a 	sub	r16,r2,r16
    b48c:	a80b883a 	mov	r5,r21
    b490:	8009883a 	mov	r4,r16
    b494:	0001cd00 	call	1cd0 <__umodsi3>
    b498:	1027883a 	mov	r19,r2
    b49c:	a80b883a 	mov	r5,r21
    b4a0:	8009883a 	mov	r4,r16
    b4a4:	0001c6c0 	call	1c6c <__udivsi3>
    b4a8:	9826943a 	slli	r19,r19,16
    b4ac:	a0a9383a 	mul	r20,r20,r2
    b4b0:	94bfffcc 	andi	r18,r18,65535
    b4b4:	94e4b03a 	or	r18,r18,r19
    b4b8:	9500052e 	bgeu	r18,r20,b4d0 <__udivdi3+0x12c>
    b4bc:	8ca5883a 	add	r18,r17,r18
    b4c0:	10ffffc4 	addi	r3,r2,-1
    b4c4:	9440f136 	bltu	r18,r17,b88c <__udivdi3+0x4e8>
    b4c8:	9500f02e 	bgeu	r18,r20,b88c <__udivdi3+0x4e8>
    b4cc:	10bfff84 	addi	r2,r2,-2
    b4d0:	b00c943a 	slli	r6,r22,16
    b4d4:	0007883a 	mov	r3,zero
    b4d8:	3084b03a 	or	r2,r6,r2
    b4dc:	00005906 	br	b644 <__udivdi3+0x2a0>
    b4e0:	29c05636 	bltu	r5,r7,b63c <__udivdi3+0x298>
    b4e4:	00bfffd4 	movui	r2,65535
    b4e8:	11c0622e 	bgeu	r2,r7,b674 <__udivdi3+0x2d0>
    b4ec:	00804034 	movhi	r2,256
    b4f0:	10bfffc4 	addi	r2,r2,-1
    b4f4:	11c0ee36 	bltu	r2,r7,b8b0 <__udivdi3+0x50c>
    b4f8:	00800404 	movi	r2,16
    b4fc:	3886d83a 	srl	r3,r7,r2
    b500:	01000074 	movhi	r4,1
    b504:	21056a04 	addi	r4,r4,5544
    b508:	20c7883a 	add	r3,r4,r3
    b50c:	18c00003 	ldbu	r3,0(r3)
    b510:	05400804 	movi	r21,32
    b514:	1885883a 	add	r2,r3,r2
    b518:	a8abc83a 	sub	r21,r21,r2
    b51c:	a800621e 	bne	r21,zero,b6a8 <__udivdi3+0x304>
    b520:	3c00e936 	bltu	r7,r16,b8c8 <__udivdi3+0x524>
    b524:	9985403a 	cmpgeu	r2,r19,r6
    b528:	0007883a 	mov	r3,zero
    b52c:	00004506 	br	b644 <__udivdi3+0x2a0>
    b530:	3000041e 	bne	r6,zero,b544 <__udivdi3+0x1a0>
    b534:	000b883a 	mov	r5,zero
    b538:	01000044 	movi	r4,1
    b53c:	0001c6c0 	call	1c6c <__udivsi3>
    b540:	1023883a 	mov	r17,r2
    b544:	00bfffd4 	movui	r2,65535
    b548:	14404e2e 	bgeu	r2,r17,b684 <__udivdi3+0x2e0>
    b54c:	00804034 	movhi	r2,256
    b550:	10bfffc4 	addi	r2,r2,-1
    b554:	1440d836 	bltu	r2,r17,b8b8 <__udivdi3+0x514>
    b558:	00800404 	movi	r2,16
    b55c:	8886d83a 	srl	r3,r17,r2
    b560:	01000074 	movhi	r4,1
    b564:	21056a04 	addi	r4,r4,5544
    b568:	20c7883a 	add	r3,r4,r3
    b56c:	18c00003 	ldbu	r3,0(r3)
    b570:	1885883a 	add	r2,r3,r2
    b574:	00c00804 	movi	r3,32
    b578:	1887c83a 	sub	r3,r3,r2
    b57c:	18008f1e 	bne	r3,zero,b7bc <__udivdi3+0x418>
    b580:	882ad43a 	srli	r21,r17,16
    b584:	8461c83a 	sub	r16,r16,r17
    b588:	8d3fffcc 	andi	r20,r17,65535
    b58c:	00c00044 	movi	r3,1
    b590:	8009883a 	mov	r4,r16
    b594:	a80b883a 	mov	r5,r21
    b598:	d8c00015 	stw	r3,0(sp)
    b59c:	0001cd00 	call	1cd0 <__umodsi3>
    b5a0:	8009883a 	mov	r4,r16
    b5a4:	a80b883a 	mov	r5,r21
    b5a8:	1027883a 	mov	r19,r2
    b5ac:	0001c6c0 	call	1c6c <__udivsi3>
    b5b0:	9826943a 	slli	r19,r19,16
    b5b4:	9008d43a 	srli	r4,r18,16
    b5b8:	1521383a 	mul	r16,r2,r20
    b5bc:	102d883a 	mov	r22,r2
    b5c0:	24c8b03a 	or	r4,r4,r19
    b5c4:	d8c00017 	ldw	r3,0(sp)
    b5c8:	2400052e 	bgeu	r4,r16,b5e0 <__udivdi3+0x23c>
    b5cc:	2449883a 	add	r4,r4,r17
    b5d0:	b0bfffc4 	addi	r2,r22,-1
    b5d4:	24400136 	bltu	r4,r17,b5dc <__udivdi3+0x238>
    b5d8:	2400ca36 	bltu	r4,r16,b904 <__udivdi3+0x560>
    b5dc:	102d883a 	mov	r22,r2
    b5e0:	2421c83a 	sub	r16,r4,r16
    b5e4:	a80b883a 	mov	r5,r21
    b5e8:	8009883a 	mov	r4,r16
    b5ec:	d8c00015 	stw	r3,0(sp)
    b5f0:	0001cd00 	call	1cd0 <__umodsi3>
    b5f4:	1027883a 	mov	r19,r2
    b5f8:	a80b883a 	mov	r5,r21
    b5fc:	8009883a 	mov	r4,r16
    b600:	0001c6c0 	call	1c6c <__udivsi3>
    b604:	9826943a 	slli	r19,r19,16
    b608:	1529383a 	mul	r20,r2,r20
    b60c:	94bfffcc 	andi	r18,r18,65535
    b610:	94e4b03a 	or	r18,r18,r19
    b614:	d8c00017 	ldw	r3,0(sp)
    b618:	9500052e 	bgeu	r18,r20,b630 <__udivdi3+0x28c>
    b61c:	8ca5883a 	add	r18,r17,r18
    b620:	113fffc4 	addi	r4,r2,-1
    b624:	94409736 	bltu	r18,r17,b884 <__udivdi3+0x4e0>
    b628:	9500962e 	bgeu	r18,r20,b884 <__udivdi3+0x4e0>
    b62c:	10bfff84 	addi	r2,r2,-2
    b630:	b00c943a 	slli	r6,r22,16
    b634:	3084b03a 	or	r2,r6,r2
    b638:	00000206 	br	b644 <__udivdi3+0x2a0>
    b63c:	0007883a 	mov	r3,zero
    b640:	0005883a 	mov	r2,zero
    b644:	dfc00a17 	ldw	ra,40(sp)
    b648:	df000917 	ldw	fp,36(sp)
    b64c:	ddc00817 	ldw	r23,32(sp)
    b650:	dd800717 	ldw	r22,28(sp)
    b654:	dd400617 	ldw	r21,24(sp)
    b658:	dd000517 	ldw	r20,20(sp)
    b65c:	dcc00417 	ldw	r19,16(sp)
    b660:	dc800317 	ldw	r18,12(sp)
    b664:	dc400217 	ldw	r17,8(sp)
    b668:	dc000117 	ldw	r16,4(sp)
    b66c:	dec00b04 	addi	sp,sp,44
    b670:	f800283a 	ret
    b674:	00803fc4 	movi	r2,255
    b678:	11c5803a 	cmpltu	r2,r2,r7
    b67c:	100490fa 	slli	r2,r2,3
    b680:	003f9e06 	br	b4fc <__alt_data_end+0xff00b4fc>
    b684:	00803fc4 	movi	r2,255
    b688:	1445803a 	cmpltu	r2,r2,r17
    b68c:	100490fa 	slli	r2,r2,3
    b690:	003fb206 	br	b55c <__alt_data_end+0xff00b55c>
    b694:	00804034 	movhi	r2,256
    b698:	10bfffc4 	addi	r2,r2,-1
    b69c:	11808836 	bltu	r2,r6,b8c0 <__udivdi3+0x51c>
    b6a0:	00800404 	movi	r2,16
    b6a4:	003f5606 	br	b400 <__alt_data_end+0xff00b400>
    b6a8:	30aed83a 	srl	r23,r6,r2
    b6ac:	3d4e983a 	sll	r7,r7,r21
    b6b0:	80acd83a 	srl	r22,r16,r2
    b6b4:	9884d83a 	srl	r2,r19,r2
    b6b8:	3deeb03a 	or	r23,r7,r23
    b6bc:	b824d43a 	srli	r18,r23,16
    b6c0:	8560983a 	sll	r16,r16,r21
    b6c4:	b009883a 	mov	r4,r22
    b6c8:	900b883a 	mov	r5,r18
    b6cc:	3568983a 	sll	r20,r6,r21
    b6d0:	1420b03a 	or	r16,r2,r16
    b6d4:	0001cd00 	call	1cd0 <__umodsi3>
    b6d8:	b009883a 	mov	r4,r22
    b6dc:	900b883a 	mov	r5,r18
    b6e0:	1023883a 	mov	r17,r2
    b6e4:	0001c6c0 	call	1c6c <__udivsi3>
    b6e8:	8808943a 	slli	r4,r17,16
    b6ec:	bf3fffcc 	andi	fp,r23,65535
    b6f0:	8006d43a 	srli	r3,r16,16
    b6f4:	e0a3383a 	mul	r17,fp,r2
    b6f8:	100d883a 	mov	r6,r2
    b6fc:	1906b03a 	or	r3,r3,r4
    b700:	1c40042e 	bgeu	r3,r17,b714 <__udivdi3+0x370>
    b704:	1dc7883a 	add	r3,r3,r23
    b708:	10bfffc4 	addi	r2,r2,-1
    b70c:	1dc0752e 	bgeu	r3,r23,b8e4 <__udivdi3+0x540>
    b710:	100d883a 	mov	r6,r2
    b714:	1c63c83a 	sub	r17,r3,r17
    b718:	900b883a 	mov	r5,r18
    b71c:	8809883a 	mov	r4,r17
    b720:	d9800015 	stw	r6,0(sp)
    b724:	0001cd00 	call	1cd0 <__umodsi3>
    b728:	102d883a 	mov	r22,r2
    b72c:	8809883a 	mov	r4,r17
    b730:	900b883a 	mov	r5,r18
    b734:	0001c6c0 	call	1c6c <__udivsi3>
    b738:	b02c943a 	slli	r22,r22,16
    b73c:	e089383a 	mul	r4,fp,r2
    b740:	843fffcc 	andi	r16,r16,65535
    b744:	85a0b03a 	or	r16,r16,r22
    b748:	d9800017 	ldw	r6,0(sp)
    b74c:	8100042e 	bgeu	r16,r4,b760 <__udivdi3+0x3bc>
    b750:	85e1883a 	add	r16,r16,r23
    b754:	10ffffc4 	addi	r3,r2,-1
    b758:	85c05e2e 	bgeu	r16,r23,b8d4 <__udivdi3+0x530>
    b75c:	1805883a 	mov	r2,r3
    b760:	300c943a 	slli	r6,r6,16
    b764:	a17fffcc 	andi	r5,r20,65535
    b768:	a028d43a 	srli	r20,r20,16
    b76c:	3084b03a 	or	r2,r6,r2
    b770:	10ffffcc 	andi	r3,r2,65535
    b774:	100cd43a 	srli	r6,r2,16
    b778:	194f383a 	mul	r7,r3,r5
    b77c:	1d07383a 	mul	r3,r3,r20
    b780:	314b383a 	mul	r5,r6,r5
    b784:	3810d43a 	srli	r8,r7,16
    b788:	8121c83a 	sub	r16,r16,r4
    b78c:	1947883a 	add	r3,r3,r5
    b790:	40c7883a 	add	r3,r8,r3
    b794:	350d383a 	mul	r6,r6,r20
    b798:	1940022e 	bgeu	r3,r5,b7a4 <__udivdi3+0x400>
    b79c:	01000074 	movhi	r4,1
    b7a0:	310d883a 	add	r6,r6,r4
    b7a4:	1828d43a 	srli	r20,r3,16
    b7a8:	a18d883a 	add	r6,r20,r6
    b7ac:	81803e36 	bltu	r16,r6,b8a8 <__udivdi3+0x504>
    b7b0:	81803826 	beq	r16,r6,b894 <__udivdi3+0x4f0>
    b7b4:	0007883a 	mov	r3,zero
    b7b8:	003fa206 	br	b644 <__alt_data_end+0xff00b644>
    b7bc:	88e2983a 	sll	r17,r17,r3
    b7c0:	80a8d83a 	srl	r20,r16,r2
    b7c4:	80e0983a 	sll	r16,r16,r3
    b7c8:	882ad43a 	srli	r21,r17,16
    b7cc:	9884d83a 	srl	r2,r19,r2
    b7d0:	a009883a 	mov	r4,r20
    b7d4:	a80b883a 	mov	r5,r21
    b7d8:	142eb03a 	or	r23,r2,r16
    b7dc:	98e4983a 	sll	r18,r19,r3
    b7e0:	0001cd00 	call	1cd0 <__umodsi3>
    b7e4:	a009883a 	mov	r4,r20
    b7e8:	a80b883a 	mov	r5,r21
    b7ec:	1021883a 	mov	r16,r2
    b7f0:	0001c6c0 	call	1c6c <__udivsi3>
    b7f4:	1039883a 	mov	fp,r2
    b7f8:	8d3fffcc 	andi	r20,r17,65535
    b7fc:	8020943a 	slli	r16,r16,16
    b800:	b804d43a 	srli	r2,r23,16
    b804:	a72d383a 	mul	r22,r20,fp
    b808:	1404b03a 	or	r2,r2,r16
    b80c:	1580062e 	bgeu	r2,r22,b828 <__udivdi3+0x484>
    b810:	1445883a 	add	r2,r2,r17
    b814:	e0ffffc4 	addi	r3,fp,-1
    b818:	14403836 	bltu	r2,r17,b8fc <__udivdi3+0x558>
    b81c:	1580372e 	bgeu	r2,r22,b8fc <__udivdi3+0x558>
    b820:	e73fff84 	addi	fp,fp,-2
    b824:	1445883a 	add	r2,r2,r17
    b828:	15adc83a 	sub	r22,r2,r22
    b82c:	a80b883a 	mov	r5,r21
    b830:	b009883a 	mov	r4,r22
    b834:	0001cd00 	call	1cd0 <__umodsi3>
    b838:	1027883a 	mov	r19,r2
    b83c:	b009883a 	mov	r4,r22
    b840:	a80b883a 	mov	r5,r21
    b844:	0001c6c0 	call	1c6c <__udivsi3>
    b848:	9826943a 	slli	r19,r19,16
    b84c:	a0a1383a 	mul	r16,r20,r2
    b850:	b93fffcc 	andi	r4,r23,65535
    b854:	24c8b03a 	or	r4,r4,r19
    b858:	2400062e 	bgeu	r4,r16,b874 <__udivdi3+0x4d0>
    b85c:	2449883a 	add	r4,r4,r17
    b860:	10ffffc4 	addi	r3,r2,-1
    b864:	24402336 	bltu	r4,r17,b8f4 <__udivdi3+0x550>
    b868:	2400222e 	bgeu	r4,r16,b8f4 <__udivdi3+0x550>
    b86c:	10bfff84 	addi	r2,r2,-2
    b870:	2449883a 	add	r4,r4,r17
    b874:	e038943a 	slli	fp,fp,16
    b878:	2421c83a 	sub	r16,r4,r16
    b87c:	e086b03a 	or	r3,fp,r2
    b880:	003f4306 	br	b590 <__alt_data_end+0xff00b590>
    b884:	2005883a 	mov	r2,r4
    b888:	003f6906 	br	b630 <__alt_data_end+0xff00b630>
    b88c:	1805883a 	mov	r2,r3
    b890:	003f0f06 	br	b4d0 <__alt_data_end+0xff00b4d0>
    b894:	1806943a 	slli	r3,r3,16
    b898:	9d66983a 	sll	r19,r19,r21
    b89c:	39ffffcc 	andi	r7,r7,65535
    b8a0:	19c7883a 	add	r3,r3,r7
    b8a4:	98ffc32e 	bgeu	r19,r3,b7b4 <__alt_data_end+0xff00b7b4>
    b8a8:	10bfffc4 	addi	r2,r2,-1
    b8ac:	003fc106 	br	b7b4 <__alt_data_end+0xff00b7b4>
    b8b0:	00800604 	movi	r2,24
    b8b4:	003f1106 	br	b4fc <__alt_data_end+0xff00b4fc>
    b8b8:	00800604 	movi	r2,24
    b8bc:	003f2706 	br	b55c <__alt_data_end+0xff00b55c>
    b8c0:	00800604 	movi	r2,24
    b8c4:	003ece06 	br	b400 <__alt_data_end+0xff00b400>
    b8c8:	0007883a 	mov	r3,zero
    b8cc:	00800044 	movi	r2,1
    b8d0:	003f5c06 	br	b644 <__alt_data_end+0xff00b644>
    b8d4:	813fa12e 	bgeu	r16,r4,b75c <__alt_data_end+0xff00b75c>
    b8d8:	10bfff84 	addi	r2,r2,-2
    b8dc:	85e1883a 	add	r16,r16,r23
    b8e0:	003f9f06 	br	b760 <__alt_data_end+0xff00b760>
    b8e4:	1c7f8a2e 	bgeu	r3,r17,b710 <__alt_data_end+0xff00b710>
    b8e8:	31bfff84 	addi	r6,r6,-2
    b8ec:	1dc7883a 	add	r3,r3,r23
    b8f0:	003f8806 	br	b714 <__alt_data_end+0xff00b714>
    b8f4:	1805883a 	mov	r2,r3
    b8f8:	003fde06 	br	b874 <__alt_data_end+0xff00b874>
    b8fc:	1839883a 	mov	fp,r3
    b900:	003fc906 	br	b828 <__alt_data_end+0xff00b828>
    b904:	b5bfff84 	addi	r22,r22,-2
    b908:	2449883a 	add	r4,r4,r17
    b90c:	003f3406 	br	b5e0 <__alt_data_end+0xff00b5e0>
    b910:	b5bfff84 	addi	r22,r22,-2
    b914:	1445883a 	add	r2,r2,r17
    b918:	003edb06 	br	b488 <__alt_data_end+0xff00b488>

0000b91c <__umoddi3>:
    b91c:	defff404 	addi	sp,sp,-48
    b920:	df000a15 	stw	fp,40(sp)
    b924:	dc400315 	stw	r17,12(sp)
    b928:	dc000215 	stw	r16,8(sp)
    b92c:	dfc00b15 	stw	ra,44(sp)
    b930:	ddc00915 	stw	r23,36(sp)
    b934:	dd800815 	stw	r22,32(sp)
    b938:	dd400715 	stw	r21,28(sp)
    b93c:	dd000615 	stw	r20,24(sp)
    b940:	dcc00515 	stw	r19,20(sp)
    b944:	dc800415 	stw	r18,16(sp)
    b948:	2021883a 	mov	r16,r4
    b94c:	2823883a 	mov	r17,r5
    b950:	2839883a 	mov	fp,r5
    b954:	38003c1e 	bne	r7,zero,ba48 <__umoddi3+0x12c>
    b958:	3027883a 	mov	r19,r6
    b95c:	2029883a 	mov	r20,r4
    b960:	2980512e 	bgeu	r5,r6,baa8 <__umoddi3+0x18c>
    b964:	00bfffd4 	movui	r2,65535
    b968:	11809a36 	bltu	r2,r6,bbd4 <__umoddi3+0x2b8>
    b96c:	01003fc4 	movi	r4,255
    b970:	2189803a 	cmpltu	r4,r4,r6
    b974:	200890fa 	slli	r4,r4,3
    b978:	3104d83a 	srl	r2,r6,r4
    b97c:	00c00074 	movhi	r3,1
    b980:	18c56a04 	addi	r3,r3,5544
    b984:	1885883a 	add	r2,r3,r2
    b988:	10c00003 	ldbu	r3,0(r2)
    b98c:	00800804 	movi	r2,32
    b990:	1909883a 	add	r4,r3,r4
    b994:	1125c83a 	sub	r18,r2,r4
    b998:	90000526 	beq	r18,zero,b9b0 <__umoddi3+0x94>
    b99c:	8ca2983a 	sll	r17,r17,r18
    b9a0:	8108d83a 	srl	r4,r16,r4
    b9a4:	34a6983a 	sll	r19,r6,r18
    b9a8:	84a8983a 	sll	r20,r16,r18
    b9ac:	2478b03a 	or	fp,r4,r17
    b9b0:	982ed43a 	srli	r23,r19,16
    b9b4:	e009883a 	mov	r4,fp
    b9b8:	9dbfffcc 	andi	r22,r19,65535
    b9bc:	b80b883a 	mov	r5,r23
    b9c0:	0001cd00 	call	1cd0 <__umodsi3>
    b9c4:	e009883a 	mov	r4,fp
    b9c8:	b80b883a 	mov	r5,r23
    b9cc:	102b883a 	mov	r21,r2
    b9d0:	0001c6c0 	call	1c6c <__udivsi3>
    b9d4:	a806943a 	slli	r3,r21,16
    b9d8:	a008d43a 	srli	r4,r20,16
    b9dc:	b085383a 	mul	r2,r22,r2
    b9e0:	20c8b03a 	or	r4,r4,r3
    b9e4:	2080032e 	bgeu	r4,r2,b9f4 <__umoddi3+0xd8>
    b9e8:	24c9883a 	add	r4,r4,r19
    b9ec:	24c00136 	bltu	r4,r19,b9f4 <__umoddi3+0xd8>
    b9f0:	20811036 	bltu	r4,r2,be34 <__umoddi3+0x518>
    b9f4:	20abc83a 	sub	r21,r4,r2
    b9f8:	b80b883a 	mov	r5,r23
    b9fc:	a809883a 	mov	r4,r21
    ba00:	0001cd00 	call	1cd0 <__umodsi3>
    ba04:	1023883a 	mov	r17,r2
    ba08:	b80b883a 	mov	r5,r23
    ba0c:	a809883a 	mov	r4,r21
    ba10:	0001c6c0 	call	1c6c <__udivsi3>
    ba14:	8822943a 	slli	r17,r17,16
    ba18:	b085383a 	mul	r2,r22,r2
    ba1c:	a0ffffcc 	andi	r3,r20,65535
    ba20:	1c46b03a 	or	r3,r3,r17
    ba24:	1880042e 	bgeu	r3,r2,ba38 <__umoddi3+0x11c>
    ba28:	1cc7883a 	add	r3,r3,r19
    ba2c:	1cc00236 	bltu	r3,r19,ba38 <__umoddi3+0x11c>
    ba30:	1880012e 	bgeu	r3,r2,ba38 <__umoddi3+0x11c>
    ba34:	1cc7883a 	add	r3,r3,r19
    ba38:	1885c83a 	sub	r2,r3,r2
    ba3c:	1484d83a 	srl	r2,r2,r18
    ba40:	0007883a 	mov	r3,zero
    ba44:	00004f06 	br	bb84 <__umoddi3+0x268>
    ba48:	29c04c36 	bltu	r5,r7,bb7c <__umoddi3+0x260>
    ba4c:	00bfffd4 	movui	r2,65535
    ba50:	11c0582e 	bgeu	r2,r7,bbb4 <__umoddi3+0x298>
    ba54:	00804034 	movhi	r2,256
    ba58:	10bfffc4 	addi	r2,r2,-1
    ba5c:	11c0e736 	bltu	r2,r7,bdfc <__umoddi3+0x4e0>
    ba60:	01000404 	movi	r4,16
    ba64:	3904d83a 	srl	r2,r7,r4
    ba68:	00c00074 	movhi	r3,1
    ba6c:	18c56a04 	addi	r3,r3,5544
    ba70:	1885883a 	add	r2,r3,r2
    ba74:	14c00003 	ldbu	r19,0(r2)
    ba78:	00c00804 	movi	r3,32
    ba7c:	9927883a 	add	r19,r19,r4
    ba80:	1ce9c83a 	sub	r20,r3,r19
    ba84:	a000581e 	bne	r20,zero,bbe8 <__umoddi3+0x2cc>
    ba88:	3c400136 	bltu	r7,r17,ba90 <__umoddi3+0x174>
    ba8c:	8180eb36 	bltu	r16,r6,be3c <__umoddi3+0x520>
    ba90:	8185c83a 	sub	r2,r16,r6
    ba94:	89e3c83a 	sub	r17,r17,r7
    ba98:	8089803a 	cmpltu	r4,r16,r2
    ba9c:	8939c83a 	sub	fp,r17,r4
    baa0:	e007883a 	mov	r3,fp
    baa4:	00003706 	br	bb84 <__umoddi3+0x268>
    baa8:	3000041e 	bne	r6,zero,babc <__umoddi3+0x1a0>
    baac:	000b883a 	mov	r5,zero
    bab0:	01000044 	movi	r4,1
    bab4:	0001c6c0 	call	1c6c <__udivsi3>
    bab8:	1027883a 	mov	r19,r2
    babc:	00bfffd4 	movui	r2,65535
    bac0:	14c0402e 	bgeu	r2,r19,bbc4 <__umoddi3+0x2a8>
    bac4:	00804034 	movhi	r2,256
    bac8:	10bfffc4 	addi	r2,r2,-1
    bacc:	14c0cd36 	bltu	r2,r19,be04 <__umoddi3+0x4e8>
    bad0:	00800404 	movi	r2,16
    bad4:	9886d83a 	srl	r3,r19,r2
    bad8:	01000074 	movhi	r4,1
    badc:	21056a04 	addi	r4,r4,5544
    bae0:	20c7883a 	add	r3,r4,r3
    bae4:	18c00003 	ldbu	r3,0(r3)
    bae8:	1887883a 	add	r3,r3,r2
    baec:	00800804 	movi	r2,32
    baf0:	10e5c83a 	sub	r18,r2,r3
    baf4:	9000901e 	bne	r18,zero,bd38 <__umoddi3+0x41c>
    baf8:	982cd43a 	srli	r22,r19,16
    bafc:	8ce3c83a 	sub	r17,r17,r19
    bb00:	9d7fffcc 	andi	r21,r19,65535
    bb04:	b00b883a 	mov	r5,r22
    bb08:	8809883a 	mov	r4,r17
    bb0c:	0001cd00 	call	1cd0 <__umodsi3>
    bb10:	8809883a 	mov	r4,r17
    bb14:	b00b883a 	mov	r5,r22
    bb18:	1021883a 	mov	r16,r2
    bb1c:	0001c6c0 	call	1c6c <__udivsi3>
    bb20:	8006943a 	slli	r3,r16,16
    bb24:	a008d43a 	srli	r4,r20,16
    bb28:	1545383a 	mul	r2,r2,r21
    bb2c:	20c8b03a 	or	r4,r4,r3
    bb30:	2080042e 	bgeu	r4,r2,bb44 <__umoddi3+0x228>
    bb34:	24c9883a 	add	r4,r4,r19
    bb38:	24c00236 	bltu	r4,r19,bb44 <__umoddi3+0x228>
    bb3c:	2080012e 	bgeu	r4,r2,bb44 <__umoddi3+0x228>
    bb40:	24c9883a 	add	r4,r4,r19
    bb44:	20a1c83a 	sub	r16,r4,r2
    bb48:	b00b883a 	mov	r5,r22
    bb4c:	8009883a 	mov	r4,r16
    bb50:	0001cd00 	call	1cd0 <__umodsi3>
    bb54:	1023883a 	mov	r17,r2
    bb58:	b00b883a 	mov	r5,r22
    bb5c:	8009883a 	mov	r4,r16
    bb60:	0001c6c0 	call	1c6c <__udivsi3>
    bb64:	8822943a 	slli	r17,r17,16
    bb68:	1545383a 	mul	r2,r2,r21
    bb6c:	a53fffcc 	andi	r20,r20,65535
    bb70:	a446b03a 	or	r3,r20,r17
    bb74:	18bfb02e 	bgeu	r3,r2,ba38 <__alt_data_end+0xff00ba38>
    bb78:	003fab06 	br	ba28 <__alt_data_end+0xff00ba28>
    bb7c:	2005883a 	mov	r2,r4
    bb80:	2807883a 	mov	r3,r5
    bb84:	dfc00b17 	ldw	ra,44(sp)
    bb88:	df000a17 	ldw	fp,40(sp)
    bb8c:	ddc00917 	ldw	r23,36(sp)
    bb90:	dd800817 	ldw	r22,32(sp)
    bb94:	dd400717 	ldw	r21,28(sp)
    bb98:	dd000617 	ldw	r20,24(sp)
    bb9c:	dcc00517 	ldw	r19,20(sp)
    bba0:	dc800417 	ldw	r18,16(sp)
    bba4:	dc400317 	ldw	r17,12(sp)
    bba8:	dc000217 	ldw	r16,8(sp)
    bbac:	dec00c04 	addi	sp,sp,48
    bbb0:	f800283a 	ret
    bbb4:	04c03fc4 	movi	r19,255
    bbb8:	99c9803a 	cmpltu	r4,r19,r7
    bbbc:	200890fa 	slli	r4,r4,3
    bbc0:	003fa806 	br	ba64 <__alt_data_end+0xff00ba64>
    bbc4:	00803fc4 	movi	r2,255
    bbc8:	14c5803a 	cmpltu	r2,r2,r19
    bbcc:	100490fa 	slli	r2,r2,3
    bbd0:	003fc006 	br	bad4 <__alt_data_end+0xff00bad4>
    bbd4:	00804034 	movhi	r2,256
    bbd8:	10bfffc4 	addi	r2,r2,-1
    bbdc:	11808b36 	bltu	r2,r6,be0c <__umoddi3+0x4f0>
    bbe0:	01000404 	movi	r4,16
    bbe4:	003f6406 	br	b978 <__alt_data_end+0xff00b978>
    bbe8:	34c4d83a 	srl	r2,r6,r19
    bbec:	3d0e983a 	sll	r7,r7,r20
    bbf0:	8cf8d83a 	srl	fp,r17,r19
    bbf4:	8d10983a 	sll	r8,r17,r20
    bbf8:	38aab03a 	or	r21,r7,r2
    bbfc:	a82cd43a 	srli	r22,r21,16
    bc00:	84e2d83a 	srl	r17,r16,r19
    bc04:	e009883a 	mov	r4,fp
    bc08:	b00b883a 	mov	r5,r22
    bc0c:	8a22b03a 	or	r17,r17,r8
    bc10:	3524983a 	sll	r18,r6,r20
    bc14:	0001cd00 	call	1cd0 <__umodsi3>
    bc18:	e009883a 	mov	r4,fp
    bc1c:	b00b883a 	mov	r5,r22
    bc20:	102f883a 	mov	r23,r2
    bc24:	0001c6c0 	call	1c6c <__udivsi3>
    bc28:	100d883a 	mov	r6,r2
    bc2c:	b808943a 	slli	r4,r23,16
    bc30:	aa3fffcc 	andi	r8,r21,65535
    bc34:	8804d43a 	srli	r2,r17,16
    bc38:	41af383a 	mul	r23,r8,r6
    bc3c:	8520983a 	sll	r16,r16,r20
    bc40:	1104b03a 	or	r2,r2,r4
    bc44:	15c0042e 	bgeu	r2,r23,bc58 <__umoddi3+0x33c>
    bc48:	1545883a 	add	r2,r2,r21
    bc4c:	30ffffc4 	addi	r3,r6,-1
    bc50:	1540742e 	bgeu	r2,r21,be24 <__umoddi3+0x508>
    bc54:	180d883a 	mov	r6,r3
    bc58:	15efc83a 	sub	r23,r2,r23
    bc5c:	b00b883a 	mov	r5,r22
    bc60:	b809883a 	mov	r4,r23
    bc64:	d9800115 	stw	r6,4(sp)
    bc68:	da000015 	stw	r8,0(sp)
    bc6c:	0001cd00 	call	1cd0 <__umodsi3>
    bc70:	b00b883a 	mov	r5,r22
    bc74:	b809883a 	mov	r4,r23
    bc78:	1039883a 	mov	fp,r2
    bc7c:	0001c6c0 	call	1c6c <__udivsi3>
    bc80:	da000017 	ldw	r8,0(sp)
    bc84:	e038943a 	slli	fp,fp,16
    bc88:	100b883a 	mov	r5,r2
    bc8c:	4089383a 	mul	r4,r8,r2
    bc90:	8a3fffcc 	andi	r8,r17,65535
    bc94:	4710b03a 	or	r8,r8,fp
    bc98:	d9800117 	ldw	r6,4(sp)
    bc9c:	4100042e 	bgeu	r8,r4,bcb0 <__umoddi3+0x394>
    bca0:	4551883a 	add	r8,r8,r21
    bca4:	10bfffc4 	addi	r2,r2,-1
    bca8:	45405a2e 	bgeu	r8,r21,be14 <__umoddi3+0x4f8>
    bcac:	100b883a 	mov	r5,r2
    bcb0:	300c943a 	slli	r6,r6,16
    bcb4:	91ffffcc 	andi	r7,r18,65535
    bcb8:	9004d43a 	srli	r2,r18,16
    bcbc:	314cb03a 	or	r6,r6,r5
    bcc0:	317fffcc 	andi	r5,r6,65535
    bcc4:	300cd43a 	srli	r6,r6,16
    bcc8:	29d3383a 	mul	r9,r5,r7
    bccc:	288b383a 	mul	r5,r5,r2
    bcd0:	31cf383a 	mul	r7,r6,r7
    bcd4:	4806d43a 	srli	r3,r9,16
    bcd8:	4111c83a 	sub	r8,r8,r4
    bcdc:	29cb883a 	add	r5,r5,r7
    bce0:	194b883a 	add	r5,r3,r5
    bce4:	3085383a 	mul	r2,r6,r2
    bce8:	29c0022e 	bgeu	r5,r7,bcf4 <__umoddi3+0x3d8>
    bcec:	00c00074 	movhi	r3,1
    bcf0:	10c5883a 	add	r2,r2,r3
    bcf4:	2808d43a 	srli	r4,r5,16
    bcf8:	280a943a 	slli	r5,r5,16
    bcfc:	4a7fffcc 	andi	r9,r9,65535
    bd00:	2085883a 	add	r2,r4,r2
    bd04:	2a4b883a 	add	r5,r5,r9
    bd08:	40803636 	bltu	r8,r2,bde4 <__umoddi3+0x4c8>
    bd0c:	40804d26 	beq	r8,r2,be44 <__umoddi3+0x528>
    bd10:	4089c83a 	sub	r4,r8,r2
    bd14:	280f883a 	mov	r7,r5
    bd18:	81cfc83a 	sub	r7,r16,r7
    bd1c:	81c7803a 	cmpltu	r3,r16,r7
    bd20:	20c7c83a 	sub	r3,r4,r3
    bd24:	1cc4983a 	sll	r2,r3,r19
    bd28:	3d0ed83a 	srl	r7,r7,r20
    bd2c:	1d06d83a 	srl	r3,r3,r20
    bd30:	11c4b03a 	or	r2,r2,r7
    bd34:	003f9306 	br	bb84 <__alt_data_end+0xff00bb84>
    bd38:	9ca6983a 	sll	r19,r19,r18
    bd3c:	88e8d83a 	srl	r20,r17,r3
    bd40:	80c4d83a 	srl	r2,r16,r3
    bd44:	982cd43a 	srli	r22,r19,16
    bd48:	8ca2983a 	sll	r17,r17,r18
    bd4c:	a009883a 	mov	r4,r20
    bd50:	b00b883a 	mov	r5,r22
    bd54:	1478b03a 	or	fp,r2,r17
    bd58:	0001cd00 	call	1cd0 <__umodsi3>
    bd5c:	a009883a 	mov	r4,r20
    bd60:	b00b883a 	mov	r5,r22
    bd64:	1023883a 	mov	r17,r2
    bd68:	0001c6c0 	call	1c6c <__udivsi3>
    bd6c:	9d7fffcc 	andi	r21,r19,65535
    bd70:	880a943a 	slli	r5,r17,16
    bd74:	e008d43a 	srli	r4,fp,16
    bd78:	a885383a 	mul	r2,r21,r2
    bd7c:	84a8983a 	sll	r20,r16,r18
    bd80:	2148b03a 	or	r4,r4,r5
    bd84:	2080042e 	bgeu	r4,r2,bd98 <__umoddi3+0x47c>
    bd88:	24c9883a 	add	r4,r4,r19
    bd8c:	24c00236 	bltu	r4,r19,bd98 <__umoddi3+0x47c>
    bd90:	2080012e 	bgeu	r4,r2,bd98 <__umoddi3+0x47c>
    bd94:	24c9883a 	add	r4,r4,r19
    bd98:	20a3c83a 	sub	r17,r4,r2
    bd9c:	b00b883a 	mov	r5,r22
    bda0:	8809883a 	mov	r4,r17
    bda4:	0001cd00 	call	1cd0 <__umodsi3>
    bda8:	102f883a 	mov	r23,r2
    bdac:	8809883a 	mov	r4,r17
    bdb0:	b00b883a 	mov	r5,r22
    bdb4:	0001c6c0 	call	1c6c <__udivsi3>
    bdb8:	b82e943a 	slli	r23,r23,16
    bdbc:	a885383a 	mul	r2,r21,r2
    bdc0:	e13fffcc 	andi	r4,fp,65535
    bdc4:	25c8b03a 	or	r4,r4,r23
    bdc8:	2080042e 	bgeu	r4,r2,bddc <__umoddi3+0x4c0>
    bdcc:	24c9883a 	add	r4,r4,r19
    bdd0:	24c00236 	bltu	r4,r19,bddc <__umoddi3+0x4c0>
    bdd4:	2080012e 	bgeu	r4,r2,bddc <__umoddi3+0x4c0>
    bdd8:	24c9883a 	add	r4,r4,r19
    bddc:	20a3c83a 	sub	r17,r4,r2
    bde0:	003f4806 	br	bb04 <__alt_data_end+0xff00bb04>
    bde4:	2c8fc83a 	sub	r7,r5,r18
    bde8:	1545c83a 	sub	r2,r2,r21
    bdec:	29cb803a 	cmpltu	r5,r5,r7
    bdf0:	1145c83a 	sub	r2,r2,r5
    bdf4:	4089c83a 	sub	r4,r8,r2
    bdf8:	003fc706 	br	bd18 <__alt_data_end+0xff00bd18>
    bdfc:	01000604 	movi	r4,24
    be00:	003f1806 	br	ba64 <__alt_data_end+0xff00ba64>
    be04:	00800604 	movi	r2,24
    be08:	003f3206 	br	bad4 <__alt_data_end+0xff00bad4>
    be0c:	01000604 	movi	r4,24
    be10:	003ed906 	br	b978 <__alt_data_end+0xff00b978>
    be14:	413fa52e 	bgeu	r8,r4,bcac <__alt_data_end+0xff00bcac>
    be18:	297fff84 	addi	r5,r5,-2
    be1c:	4551883a 	add	r8,r8,r21
    be20:	003fa306 	br	bcb0 <__alt_data_end+0xff00bcb0>
    be24:	15ff8b2e 	bgeu	r2,r23,bc54 <__alt_data_end+0xff00bc54>
    be28:	31bfff84 	addi	r6,r6,-2
    be2c:	1545883a 	add	r2,r2,r21
    be30:	003f8906 	br	bc58 <__alt_data_end+0xff00bc58>
    be34:	24c9883a 	add	r4,r4,r19
    be38:	003eee06 	br	b9f4 <__alt_data_end+0xff00b9f4>
    be3c:	8005883a 	mov	r2,r16
    be40:	003f1706 	br	baa0 <__alt_data_end+0xff00baa0>
    be44:	817fe736 	bltu	r16,r5,bde4 <__alt_data_end+0xff00bde4>
    be48:	280f883a 	mov	r7,r5
    be4c:	0009883a 	mov	r4,zero
    be50:	003fb106 	br	bd18 <__alt_data_end+0xff00bd18>

0000be54 <__adddf3>:
    be54:	02c00434 	movhi	r11,16
    be58:	5affffc4 	addi	r11,r11,-1
    be5c:	2806d7fa 	srli	r3,r5,31
    be60:	2ad4703a 	and	r10,r5,r11
    be64:	3ad2703a 	and	r9,r7,r11
    be68:	3804d53a 	srli	r2,r7,20
    be6c:	3018d77a 	srli	r12,r6,29
    be70:	280ad53a 	srli	r5,r5,20
    be74:	501490fa 	slli	r10,r10,3
    be78:	2010d77a 	srli	r8,r4,29
    be7c:	481290fa 	slli	r9,r9,3
    be80:	380ed7fa 	srli	r7,r7,31
    be84:	defffb04 	addi	sp,sp,-20
    be88:	dc800215 	stw	r18,8(sp)
    be8c:	dc400115 	stw	r17,4(sp)
    be90:	dc000015 	stw	r16,0(sp)
    be94:	dfc00415 	stw	ra,16(sp)
    be98:	dcc00315 	stw	r19,12(sp)
    be9c:	1c803fcc 	andi	r18,r3,255
    bea0:	2c01ffcc 	andi	r16,r5,2047
    bea4:	5210b03a 	or	r8,r10,r8
    bea8:	202290fa 	slli	r17,r4,3
    beac:	1081ffcc 	andi	r2,r2,2047
    beb0:	4b12b03a 	or	r9,r9,r12
    beb4:	300c90fa 	slli	r6,r6,3
    beb8:	91c07526 	beq	r18,r7,c090 <__adddf3+0x23c>
    bebc:	8087c83a 	sub	r3,r16,r2
    bec0:	00c0ab0e 	bge	zero,r3,c170 <__adddf3+0x31c>
    bec4:	10002a1e 	bne	r2,zero,bf70 <__adddf3+0x11c>
    bec8:	4984b03a 	or	r2,r9,r6
    becc:	1000961e 	bne	r2,zero,c128 <__adddf3+0x2d4>
    bed0:	888001cc 	andi	r2,r17,7
    bed4:	10000726 	beq	r2,zero,bef4 <__adddf3+0xa0>
    bed8:	888003cc 	andi	r2,r17,15
    bedc:	00c00104 	movi	r3,4
    bee0:	10c00426 	beq	r2,r3,bef4 <__adddf3+0xa0>
    bee4:	88c7883a 	add	r3,r17,r3
    bee8:	1c63803a 	cmpltu	r17,r3,r17
    beec:	4451883a 	add	r8,r8,r17
    bef0:	1823883a 	mov	r17,r3
    bef4:	4080202c 	andhi	r2,r8,128
    bef8:	10005926 	beq	r2,zero,c060 <__adddf3+0x20c>
    befc:	84000044 	addi	r16,r16,1
    bf00:	0081ffc4 	movi	r2,2047
    bf04:	8080ba26 	beq	r16,r2,c1f0 <__adddf3+0x39c>
    bf08:	00bfe034 	movhi	r2,65408
    bf0c:	10bfffc4 	addi	r2,r2,-1
    bf10:	4090703a 	and	r8,r8,r2
    bf14:	4004977a 	slli	r2,r8,29
    bf18:	4010927a 	slli	r8,r8,9
    bf1c:	8822d0fa 	srli	r17,r17,3
    bf20:	8401ffcc 	andi	r16,r16,2047
    bf24:	4010d33a 	srli	r8,r8,12
    bf28:	9007883a 	mov	r3,r18
    bf2c:	1444b03a 	or	r2,r2,r17
    bf30:	8401ffcc 	andi	r16,r16,2047
    bf34:	8020953a 	slli	r16,r16,20
    bf38:	18c03fcc 	andi	r3,r3,255
    bf3c:	01000434 	movhi	r4,16
    bf40:	213fffc4 	addi	r4,r4,-1
    bf44:	180697fa 	slli	r3,r3,31
    bf48:	4110703a 	and	r8,r8,r4
    bf4c:	4410b03a 	or	r8,r8,r16
    bf50:	40c6b03a 	or	r3,r8,r3
    bf54:	dfc00417 	ldw	ra,16(sp)
    bf58:	dcc00317 	ldw	r19,12(sp)
    bf5c:	dc800217 	ldw	r18,8(sp)
    bf60:	dc400117 	ldw	r17,4(sp)
    bf64:	dc000017 	ldw	r16,0(sp)
    bf68:	dec00504 	addi	sp,sp,20
    bf6c:	f800283a 	ret
    bf70:	0081ffc4 	movi	r2,2047
    bf74:	80bfd626 	beq	r16,r2,bed0 <__alt_data_end+0xff00bed0>
    bf78:	4a402034 	orhi	r9,r9,128
    bf7c:	00800e04 	movi	r2,56
    bf80:	10c09f16 	blt	r2,r3,c200 <__adddf3+0x3ac>
    bf84:	008007c4 	movi	r2,31
    bf88:	10c0c216 	blt	r2,r3,c294 <__adddf3+0x440>
    bf8c:	00800804 	movi	r2,32
    bf90:	10c5c83a 	sub	r2,r2,r3
    bf94:	488a983a 	sll	r5,r9,r2
    bf98:	30c8d83a 	srl	r4,r6,r3
    bf9c:	3084983a 	sll	r2,r6,r2
    bfa0:	48c6d83a 	srl	r3,r9,r3
    bfa4:	290cb03a 	or	r6,r5,r4
    bfa8:	1004c03a 	cmpne	r2,r2,zero
    bfac:	308cb03a 	or	r6,r6,r2
    bfb0:	898dc83a 	sub	r6,r17,r6
    bfb4:	89a3803a 	cmpltu	r17,r17,r6
    bfb8:	40d1c83a 	sub	r8,r8,r3
    bfbc:	4451c83a 	sub	r8,r8,r17
    bfc0:	3023883a 	mov	r17,r6
    bfc4:	4080202c 	andhi	r2,r8,128
    bfc8:	10002326 	beq	r2,zero,c058 <__adddf3+0x204>
    bfcc:	04c02034 	movhi	r19,128
    bfd0:	9cffffc4 	addi	r19,r19,-1
    bfd4:	44e6703a 	and	r19,r8,r19
    bfd8:	98007626 	beq	r19,zero,c1b4 <__adddf3+0x360>
    bfdc:	9809883a 	mov	r4,r19
    bfe0:	000e4580 	call	e458 <__clzsi2>
    bfe4:	10fffe04 	addi	r3,r2,-8
    bfe8:	010007c4 	movi	r4,31
    bfec:	20c07716 	blt	r4,r3,c1cc <__adddf3+0x378>
    bff0:	00800804 	movi	r2,32
    bff4:	10c5c83a 	sub	r2,r2,r3
    bff8:	8884d83a 	srl	r2,r17,r2
    bffc:	98d0983a 	sll	r8,r19,r3
    c000:	88e2983a 	sll	r17,r17,r3
    c004:	1204b03a 	or	r2,r2,r8
    c008:	1c007416 	blt	r3,r16,c1dc <__adddf3+0x388>
    c00c:	1c21c83a 	sub	r16,r3,r16
    c010:	82000044 	addi	r8,r16,1
    c014:	00c007c4 	movi	r3,31
    c018:	1a009116 	blt	r3,r8,c260 <__adddf3+0x40c>
    c01c:	00c00804 	movi	r3,32
    c020:	1a07c83a 	sub	r3,r3,r8
    c024:	8a08d83a 	srl	r4,r17,r8
    c028:	88e2983a 	sll	r17,r17,r3
    c02c:	10c6983a 	sll	r3,r2,r3
    c030:	1210d83a 	srl	r8,r2,r8
    c034:	8804c03a 	cmpne	r2,r17,zero
    c038:	1906b03a 	or	r3,r3,r4
    c03c:	18a2b03a 	or	r17,r3,r2
    c040:	0021883a 	mov	r16,zero
    c044:	003fa206 	br	bed0 <__alt_data_end+0xff00bed0>
    c048:	1890b03a 	or	r8,r3,r2
    c04c:	40017d26 	beq	r8,zero,c644 <__adddf3+0x7f0>
    c050:	1011883a 	mov	r8,r2
    c054:	1823883a 	mov	r17,r3
    c058:	888001cc 	andi	r2,r17,7
    c05c:	103f9e1e 	bne	r2,zero,bed8 <__alt_data_end+0xff00bed8>
    c060:	4004977a 	slli	r2,r8,29
    c064:	8822d0fa 	srli	r17,r17,3
    c068:	4010d0fa 	srli	r8,r8,3
    c06c:	9007883a 	mov	r3,r18
    c070:	1444b03a 	or	r2,r2,r17
    c074:	0101ffc4 	movi	r4,2047
    c078:	81002426 	beq	r16,r4,c10c <__adddf3+0x2b8>
    c07c:	8120703a 	and	r16,r16,r4
    c080:	01000434 	movhi	r4,16
    c084:	213fffc4 	addi	r4,r4,-1
    c088:	4110703a 	and	r8,r8,r4
    c08c:	003fa806 	br	bf30 <__alt_data_end+0xff00bf30>
    c090:	8089c83a 	sub	r4,r16,r2
    c094:	01005e0e 	bge	zero,r4,c210 <__adddf3+0x3bc>
    c098:	10002b26 	beq	r2,zero,c148 <__adddf3+0x2f4>
    c09c:	0081ffc4 	movi	r2,2047
    c0a0:	80bf8b26 	beq	r16,r2,bed0 <__alt_data_end+0xff00bed0>
    c0a4:	4a402034 	orhi	r9,r9,128
    c0a8:	00800e04 	movi	r2,56
    c0ac:	1100a40e 	bge	r2,r4,c340 <__adddf3+0x4ec>
    c0b0:	498cb03a 	or	r6,r9,r6
    c0b4:	300ac03a 	cmpne	r5,r6,zero
    c0b8:	0013883a 	mov	r9,zero
    c0bc:	2c4b883a 	add	r5,r5,r17
    c0c0:	2c63803a 	cmpltu	r17,r5,r17
    c0c4:	4a11883a 	add	r8,r9,r8
    c0c8:	8a11883a 	add	r8,r17,r8
    c0cc:	2823883a 	mov	r17,r5
    c0d0:	4080202c 	andhi	r2,r8,128
    c0d4:	103fe026 	beq	r2,zero,c058 <__alt_data_end+0xff00c058>
    c0d8:	84000044 	addi	r16,r16,1
    c0dc:	0081ffc4 	movi	r2,2047
    c0e0:	8080d226 	beq	r16,r2,c42c <__adddf3+0x5d8>
    c0e4:	00bfe034 	movhi	r2,65408
    c0e8:	10bfffc4 	addi	r2,r2,-1
    c0ec:	4090703a 	and	r8,r8,r2
    c0f0:	880ad07a 	srli	r5,r17,1
    c0f4:	400897fa 	slli	r4,r8,31
    c0f8:	88c0004c 	andi	r3,r17,1
    c0fc:	28e2b03a 	or	r17,r5,r3
    c100:	4010d07a 	srli	r8,r8,1
    c104:	2462b03a 	or	r17,r4,r17
    c108:	003f7106 	br	bed0 <__alt_data_end+0xff00bed0>
    c10c:	4088b03a 	or	r4,r8,r2
    c110:	20014526 	beq	r4,zero,c628 <__adddf3+0x7d4>
    c114:	01000434 	movhi	r4,16
    c118:	42000234 	orhi	r8,r8,8
    c11c:	213fffc4 	addi	r4,r4,-1
    c120:	4110703a 	and	r8,r8,r4
    c124:	003f8206 	br	bf30 <__alt_data_end+0xff00bf30>
    c128:	18ffffc4 	addi	r3,r3,-1
    c12c:	1800491e 	bne	r3,zero,c254 <__adddf3+0x400>
    c130:	898bc83a 	sub	r5,r17,r6
    c134:	8963803a 	cmpltu	r17,r17,r5
    c138:	4251c83a 	sub	r8,r8,r9
    c13c:	4451c83a 	sub	r8,r8,r17
    c140:	2823883a 	mov	r17,r5
    c144:	003f9f06 	br	bfc4 <__alt_data_end+0xff00bfc4>
    c148:	4984b03a 	or	r2,r9,r6
    c14c:	103f6026 	beq	r2,zero,bed0 <__alt_data_end+0xff00bed0>
    c150:	213fffc4 	addi	r4,r4,-1
    c154:	2000931e 	bne	r4,zero,c3a4 <__adddf3+0x550>
    c158:	898d883a 	add	r6,r17,r6
    c15c:	3463803a 	cmpltu	r17,r6,r17
    c160:	4251883a 	add	r8,r8,r9
    c164:	8a11883a 	add	r8,r17,r8
    c168:	3023883a 	mov	r17,r6
    c16c:	003fd806 	br	c0d0 <__alt_data_end+0xff00c0d0>
    c170:	1800541e 	bne	r3,zero,c2c4 <__adddf3+0x470>
    c174:	80800044 	addi	r2,r16,1
    c178:	1081ffcc 	andi	r2,r2,2047
    c17c:	00c00044 	movi	r3,1
    c180:	1880a00e 	bge	r3,r2,c404 <__adddf3+0x5b0>
    c184:	8989c83a 	sub	r4,r17,r6
    c188:	8905803a 	cmpltu	r2,r17,r4
    c18c:	4267c83a 	sub	r19,r8,r9
    c190:	98a7c83a 	sub	r19,r19,r2
    c194:	9880202c 	andhi	r2,r19,128
    c198:	10006326 	beq	r2,zero,c328 <__adddf3+0x4d4>
    c19c:	3463c83a 	sub	r17,r6,r17
    c1a0:	4a07c83a 	sub	r3,r9,r8
    c1a4:	344d803a 	cmpltu	r6,r6,r17
    c1a8:	19a7c83a 	sub	r19,r3,r6
    c1ac:	3825883a 	mov	r18,r7
    c1b0:	983f8a1e 	bne	r19,zero,bfdc <__alt_data_end+0xff00bfdc>
    c1b4:	8809883a 	mov	r4,r17
    c1b8:	000e4580 	call	e458 <__clzsi2>
    c1bc:	10800804 	addi	r2,r2,32
    c1c0:	10fffe04 	addi	r3,r2,-8
    c1c4:	010007c4 	movi	r4,31
    c1c8:	20ff890e 	bge	r4,r3,bff0 <__alt_data_end+0xff00bff0>
    c1cc:	10bff604 	addi	r2,r2,-40
    c1d0:	8884983a 	sll	r2,r17,r2
    c1d4:	0023883a 	mov	r17,zero
    c1d8:	1c3f8c0e 	bge	r3,r16,c00c <__alt_data_end+0xff00c00c>
    c1dc:	023fe034 	movhi	r8,65408
    c1e0:	423fffc4 	addi	r8,r8,-1
    c1e4:	80e1c83a 	sub	r16,r16,r3
    c1e8:	1210703a 	and	r8,r2,r8
    c1ec:	003f3806 	br	bed0 <__alt_data_end+0xff00bed0>
    c1f0:	9007883a 	mov	r3,r18
    c1f4:	0011883a 	mov	r8,zero
    c1f8:	0005883a 	mov	r2,zero
    c1fc:	003f4c06 	br	bf30 <__alt_data_end+0xff00bf30>
    c200:	498cb03a 	or	r6,r9,r6
    c204:	300cc03a 	cmpne	r6,r6,zero
    c208:	0007883a 	mov	r3,zero
    c20c:	003f6806 	br	bfb0 <__alt_data_end+0xff00bfb0>
    c210:	20009c1e 	bne	r4,zero,c484 <__adddf3+0x630>
    c214:	80800044 	addi	r2,r16,1
    c218:	1141ffcc 	andi	r5,r2,2047
    c21c:	01000044 	movi	r4,1
    c220:	2140670e 	bge	r4,r5,c3c0 <__adddf3+0x56c>
    c224:	0101ffc4 	movi	r4,2047
    c228:	11007f26 	beq	r2,r4,c428 <__adddf3+0x5d4>
    c22c:	898d883a 	add	r6,r17,r6
    c230:	4247883a 	add	r3,r8,r9
    c234:	3451803a 	cmpltu	r8,r6,r17
    c238:	40d1883a 	add	r8,r8,r3
    c23c:	402297fa 	slli	r17,r8,31
    c240:	300cd07a 	srli	r6,r6,1
    c244:	4010d07a 	srli	r8,r8,1
    c248:	1021883a 	mov	r16,r2
    c24c:	89a2b03a 	or	r17,r17,r6
    c250:	003f1f06 	br	bed0 <__alt_data_end+0xff00bed0>
    c254:	0081ffc4 	movi	r2,2047
    c258:	80bf481e 	bne	r16,r2,bf7c <__alt_data_end+0xff00bf7c>
    c25c:	003f1c06 	br	bed0 <__alt_data_end+0xff00bed0>
    c260:	843ff844 	addi	r16,r16,-31
    c264:	01000804 	movi	r4,32
    c268:	1406d83a 	srl	r3,r2,r16
    c26c:	41005026 	beq	r8,r4,c3b0 <__adddf3+0x55c>
    c270:	01001004 	movi	r4,64
    c274:	2211c83a 	sub	r8,r4,r8
    c278:	1204983a 	sll	r2,r2,r8
    c27c:	88a2b03a 	or	r17,r17,r2
    c280:	8822c03a 	cmpne	r17,r17,zero
    c284:	1c62b03a 	or	r17,r3,r17
    c288:	0011883a 	mov	r8,zero
    c28c:	0021883a 	mov	r16,zero
    c290:	003f7106 	br	c058 <__alt_data_end+0xff00c058>
    c294:	193ff804 	addi	r4,r3,-32
    c298:	00800804 	movi	r2,32
    c29c:	4908d83a 	srl	r4,r9,r4
    c2a0:	18804526 	beq	r3,r2,c3b8 <__adddf3+0x564>
    c2a4:	00801004 	movi	r2,64
    c2a8:	10c5c83a 	sub	r2,r2,r3
    c2ac:	4886983a 	sll	r3,r9,r2
    c2b0:	198cb03a 	or	r6,r3,r6
    c2b4:	300cc03a 	cmpne	r6,r6,zero
    c2b8:	218cb03a 	or	r6,r4,r6
    c2bc:	0007883a 	mov	r3,zero
    c2c0:	003f3b06 	br	bfb0 <__alt_data_end+0xff00bfb0>
    c2c4:	80002a26 	beq	r16,zero,c370 <__adddf3+0x51c>
    c2c8:	0101ffc4 	movi	r4,2047
    c2cc:	11006826 	beq	r2,r4,c470 <__adddf3+0x61c>
    c2d0:	00c7c83a 	sub	r3,zero,r3
    c2d4:	42002034 	orhi	r8,r8,128
    c2d8:	01000e04 	movi	r4,56
    c2dc:	20c07c16 	blt	r4,r3,c4d0 <__adddf3+0x67c>
    c2e0:	010007c4 	movi	r4,31
    c2e4:	20c0da16 	blt	r4,r3,c650 <__adddf3+0x7fc>
    c2e8:	01000804 	movi	r4,32
    c2ec:	20c9c83a 	sub	r4,r4,r3
    c2f0:	4114983a 	sll	r10,r8,r4
    c2f4:	88cad83a 	srl	r5,r17,r3
    c2f8:	8908983a 	sll	r4,r17,r4
    c2fc:	40c6d83a 	srl	r3,r8,r3
    c300:	5162b03a 	or	r17,r10,r5
    c304:	2008c03a 	cmpne	r4,r4,zero
    c308:	8922b03a 	or	r17,r17,r4
    c30c:	3463c83a 	sub	r17,r6,r17
    c310:	48c7c83a 	sub	r3,r9,r3
    c314:	344d803a 	cmpltu	r6,r6,r17
    c318:	1991c83a 	sub	r8,r3,r6
    c31c:	1021883a 	mov	r16,r2
    c320:	3825883a 	mov	r18,r7
    c324:	003f2706 	br	bfc4 <__alt_data_end+0xff00bfc4>
    c328:	24d0b03a 	or	r8,r4,r19
    c32c:	40001b1e 	bne	r8,zero,c39c <__adddf3+0x548>
    c330:	0005883a 	mov	r2,zero
    c334:	0007883a 	mov	r3,zero
    c338:	0021883a 	mov	r16,zero
    c33c:	003f4d06 	br	c074 <__alt_data_end+0xff00c074>
    c340:	008007c4 	movi	r2,31
    c344:	11003c16 	blt	r2,r4,c438 <__adddf3+0x5e4>
    c348:	00800804 	movi	r2,32
    c34c:	1105c83a 	sub	r2,r2,r4
    c350:	488e983a 	sll	r7,r9,r2
    c354:	310ad83a 	srl	r5,r6,r4
    c358:	3084983a 	sll	r2,r6,r2
    c35c:	4912d83a 	srl	r9,r9,r4
    c360:	394ab03a 	or	r5,r7,r5
    c364:	1004c03a 	cmpne	r2,r2,zero
    c368:	288ab03a 	or	r5,r5,r2
    c36c:	003f5306 	br	c0bc <__alt_data_end+0xff00c0bc>
    c370:	4448b03a 	or	r4,r8,r17
    c374:	20003e26 	beq	r4,zero,c470 <__adddf3+0x61c>
    c378:	00c6303a 	nor	r3,zero,r3
    c37c:	18003a1e 	bne	r3,zero,c468 <__adddf3+0x614>
    c380:	3463c83a 	sub	r17,r6,r17
    c384:	4a07c83a 	sub	r3,r9,r8
    c388:	344d803a 	cmpltu	r6,r6,r17
    c38c:	1991c83a 	sub	r8,r3,r6
    c390:	1021883a 	mov	r16,r2
    c394:	3825883a 	mov	r18,r7
    c398:	003f0a06 	br	bfc4 <__alt_data_end+0xff00bfc4>
    c39c:	2023883a 	mov	r17,r4
    c3a0:	003f0d06 	br	bfd8 <__alt_data_end+0xff00bfd8>
    c3a4:	0081ffc4 	movi	r2,2047
    c3a8:	80bf3f1e 	bne	r16,r2,c0a8 <__alt_data_end+0xff00c0a8>
    c3ac:	003ec806 	br	bed0 <__alt_data_end+0xff00bed0>
    c3b0:	0005883a 	mov	r2,zero
    c3b4:	003fb106 	br	c27c <__alt_data_end+0xff00c27c>
    c3b8:	0007883a 	mov	r3,zero
    c3bc:	003fbc06 	br	c2b0 <__alt_data_end+0xff00c2b0>
    c3c0:	4444b03a 	or	r2,r8,r17
    c3c4:	8000871e 	bne	r16,zero,c5e4 <__adddf3+0x790>
    c3c8:	1000ba26 	beq	r2,zero,c6b4 <__adddf3+0x860>
    c3cc:	4984b03a 	or	r2,r9,r6
    c3d0:	103ebf26 	beq	r2,zero,bed0 <__alt_data_end+0xff00bed0>
    c3d4:	8985883a 	add	r2,r17,r6
    c3d8:	4247883a 	add	r3,r8,r9
    c3dc:	1451803a 	cmpltu	r8,r2,r17
    c3e0:	40d1883a 	add	r8,r8,r3
    c3e4:	40c0202c 	andhi	r3,r8,128
    c3e8:	1023883a 	mov	r17,r2
    c3ec:	183f1a26 	beq	r3,zero,c058 <__alt_data_end+0xff00c058>
    c3f0:	00bfe034 	movhi	r2,65408
    c3f4:	10bfffc4 	addi	r2,r2,-1
    c3f8:	2021883a 	mov	r16,r4
    c3fc:	4090703a 	and	r8,r8,r2
    c400:	003eb306 	br	bed0 <__alt_data_end+0xff00bed0>
    c404:	4444b03a 	or	r2,r8,r17
    c408:	8000291e 	bne	r16,zero,c4b0 <__adddf3+0x65c>
    c40c:	10004b1e 	bne	r2,zero,c53c <__adddf3+0x6e8>
    c410:	4990b03a 	or	r8,r9,r6
    c414:	40008b26 	beq	r8,zero,c644 <__adddf3+0x7f0>
    c418:	4811883a 	mov	r8,r9
    c41c:	3023883a 	mov	r17,r6
    c420:	3825883a 	mov	r18,r7
    c424:	003eaa06 	br	bed0 <__alt_data_end+0xff00bed0>
    c428:	1021883a 	mov	r16,r2
    c42c:	0011883a 	mov	r8,zero
    c430:	0005883a 	mov	r2,zero
    c434:	003f0f06 	br	c074 <__alt_data_end+0xff00c074>
    c438:	217ff804 	addi	r5,r4,-32
    c43c:	00800804 	movi	r2,32
    c440:	494ad83a 	srl	r5,r9,r5
    c444:	20807d26 	beq	r4,r2,c63c <__adddf3+0x7e8>
    c448:	00801004 	movi	r2,64
    c44c:	1109c83a 	sub	r4,r2,r4
    c450:	4912983a 	sll	r9,r9,r4
    c454:	498cb03a 	or	r6,r9,r6
    c458:	300cc03a 	cmpne	r6,r6,zero
    c45c:	298ab03a 	or	r5,r5,r6
    c460:	0013883a 	mov	r9,zero
    c464:	003f1506 	br	c0bc <__alt_data_end+0xff00c0bc>
    c468:	0101ffc4 	movi	r4,2047
    c46c:	113f9a1e 	bne	r2,r4,c2d8 <__alt_data_end+0xff00c2d8>
    c470:	4811883a 	mov	r8,r9
    c474:	3023883a 	mov	r17,r6
    c478:	1021883a 	mov	r16,r2
    c47c:	3825883a 	mov	r18,r7
    c480:	003e9306 	br	bed0 <__alt_data_end+0xff00bed0>
    c484:	8000161e 	bne	r16,zero,c4e0 <__adddf3+0x68c>
    c488:	444ab03a 	or	r5,r8,r17
    c48c:	28005126 	beq	r5,zero,c5d4 <__adddf3+0x780>
    c490:	0108303a 	nor	r4,zero,r4
    c494:	20004d1e 	bne	r4,zero,c5cc <__adddf3+0x778>
    c498:	89a3883a 	add	r17,r17,r6
    c49c:	4253883a 	add	r9,r8,r9
    c4a0:	898d803a 	cmpltu	r6,r17,r6
    c4a4:	3251883a 	add	r8,r6,r9
    c4a8:	1021883a 	mov	r16,r2
    c4ac:	003f0806 	br	c0d0 <__alt_data_end+0xff00c0d0>
    c4b0:	1000301e 	bne	r2,zero,c574 <__adddf3+0x720>
    c4b4:	4984b03a 	or	r2,r9,r6
    c4b8:	10007126 	beq	r2,zero,c680 <__adddf3+0x82c>
    c4bc:	4811883a 	mov	r8,r9
    c4c0:	3023883a 	mov	r17,r6
    c4c4:	3825883a 	mov	r18,r7
    c4c8:	0401ffc4 	movi	r16,2047
    c4cc:	003e8006 	br	bed0 <__alt_data_end+0xff00bed0>
    c4d0:	4462b03a 	or	r17,r8,r17
    c4d4:	8822c03a 	cmpne	r17,r17,zero
    c4d8:	0007883a 	mov	r3,zero
    c4dc:	003f8b06 	br	c30c <__alt_data_end+0xff00c30c>
    c4e0:	0141ffc4 	movi	r5,2047
    c4e4:	11403b26 	beq	r2,r5,c5d4 <__adddf3+0x780>
    c4e8:	0109c83a 	sub	r4,zero,r4
    c4ec:	42002034 	orhi	r8,r8,128
    c4f0:	01400e04 	movi	r5,56
    c4f4:	29006716 	blt	r5,r4,c694 <__adddf3+0x840>
    c4f8:	014007c4 	movi	r5,31
    c4fc:	29007016 	blt	r5,r4,c6c0 <__adddf3+0x86c>
    c500:	01400804 	movi	r5,32
    c504:	290bc83a 	sub	r5,r5,r4
    c508:	4154983a 	sll	r10,r8,r5
    c50c:	890ed83a 	srl	r7,r17,r4
    c510:	894a983a 	sll	r5,r17,r5
    c514:	4108d83a 	srl	r4,r8,r4
    c518:	51e2b03a 	or	r17,r10,r7
    c51c:	280ac03a 	cmpne	r5,r5,zero
    c520:	8962b03a 	or	r17,r17,r5
    c524:	89a3883a 	add	r17,r17,r6
    c528:	2253883a 	add	r9,r4,r9
    c52c:	898d803a 	cmpltu	r6,r17,r6
    c530:	3251883a 	add	r8,r6,r9
    c534:	1021883a 	mov	r16,r2
    c538:	003ee506 	br	c0d0 <__alt_data_end+0xff00c0d0>
    c53c:	4984b03a 	or	r2,r9,r6
    c540:	103e6326 	beq	r2,zero,bed0 <__alt_data_end+0xff00bed0>
    c544:	8987c83a 	sub	r3,r17,r6
    c548:	88c9803a 	cmpltu	r4,r17,r3
    c54c:	4245c83a 	sub	r2,r8,r9
    c550:	1105c83a 	sub	r2,r2,r4
    c554:	1100202c 	andhi	r4,r2,128
    c558:	203ebb26 	beq	r4,zero,c048 <__alt_data_end+0xff00c048>
    c55c:	3463c83a 	sub	r17,r6,r17
    c560:	4a07c83a 	sub	r3,r9,r8
    c564:	344d803a 	cmpltu	r6,r6,r17
    c568:	1991c83a 	sub	r8,r3,r6
    c56c:	3825883a 	mov	r18,r7
    c570:	003e5706 	br	bed0 <__alt_data_end+0xff00bed0>
    c574:	4984b03a 	or	r2,r9,r6
    c578:	10002e26 	beq	r2,zero,c634 <__adddf3+0x7e0>
    c57c:	4004d0fa 	srli	r2,r8,3
    c580:	8822d0fa 	srli	r17,r17,3
    c584:	4010977a 	slli	r8,r8,29
    c588:	10c0022c 	andhi	r3,r2,8
    c58c:	4462b03a 	or	r17,r8,r17
    c590:	18000826 	beq	r3,zero,c5b4 <__adddf3+0x760>
    c594:	4808d0fa 	srli	r4,r9,3
    c598:	20c0022c 	andhi	r3,r4,8
    c59c:	1800051e 	bne	r3,zero,c5b4 <__adddf3+0x760>
    c5a0:	300cd0fa 	srli	r6,r6,3
    c5a4:	4806977a 	slli	r3,r9,29
    c5a8:	2005883a 	mov	r2,r4
    c5ac:	3825883a 	mov	r18,r7
    c5b0:	19a2b03a 	or	r17,r3,r6
    c5b4:	8810d77a 	srli	r8,r17,29
    c5b8:	100490fa 	slli	r2,r2,3
    c5bc:	882290fa 	slli	r17,r17,3
    c5c0:	0401ffc4 	movi	r16,2047
    c5c4:	4090b03a 	or	r8,r8,r2
    c5c8:	003e4106 	br	bed0 <__alt_data_end+0xff00bed0>
    c5cc:	0141ffc4 	movi	r5,2047
    c5d0:	117fc71e 	bne	r2,r5,c4f0 <__alt_data_end+0xff00c4f0>
    c5d4:	4811883a 	mov	r8,r9
    c5d8:	3023883a 	mov	r17,r6
    c5dc:	1021883a 	mov	r16,r2
    c5e0:	003e3b06 	br	bed0 <__alt_data_end+0xff00bed0>
    c5e4:	10002f26 	beq	r2,zero,c6a4 <__adddf3+0x850>
    c5e8:	4984b03a 	or	r2,r9,r6
    c5ec:	10001126 	beq	r2,zero,c634 <__adddf3+0x7e0>
    c5f0:	4004d0fa 	srli	r2,r8,3
    c5f4:	8822d0fa 	srli	r17,r17,3
    c5f8:	4010977a 	slli	r8,r8,29
    c5fc:	10c0022c 	andhi	r3,r2,8
    c600:	4462b03a 	or	r17,r8,r17
    c604:	183feb26 	beq	r3,zero,c5b4 <__alt_data_end+0xff00c5b4>
    c608:	4808d0fa 	srli	r4,r9,3
    c60c:	20c0022c 	andhi	r3,r4,8
    c610:	183fe81e 	bne	r3,zero,c5b4 <__alt_data_end+0xff00c5b4>
    c614:	300cd0fa 	srli	r6,r6,3
    c618:	4806977a 	slli	r3,r9,29
    c61c:	2005883a 	mov	r2,r4
    c620:	19a2b03a 	or	r17,r3,r6
    c624:	003fe306 	br	c5b4 <__alt_data_end+0xff00c5b4>
    c628:	0011883a 	mov	r8,zero
    c62c:	0005883a 	mov	r2,zero
    c630:	003e3f06 	br	bf30 <__alt_data_end+0xff00bf30>
    c634:	0401ffc4 	movi	r16,2047
    c638:	003e2506 	br	bed0 <__alt_data_end+0xff00bed0>
    c63c:	0013883a 	mov	r9,zero
    c640:	003f8406 	br	c454 <__alt_data_end+0xff00c454>
    c644:	0005883a 	mov	r2,zero
    c648:	0007883a 	mov	r3,zero
    c64c:	003e8906 	br	c074 <__alt_data_end+0xff00c074>
    c650:	197ff804 	addi	r5,r3,-32
    c654:	01000804 	movi	r4,32
    c658:	414ad83a 	srl	r5,r8,r5
    c65c:	19002426 	beq	r3,r4,c6f0 <__adddf3+0x89c>
    c660:	01001004 	movi	r4,64
    c664:	20c7c83a 	sub	r3,r4,r3
    c668:	40c6983a 	sll	r3,r8,r3
    c66c:	1c46b03a 	or	r3,r3,r17
    c670:	1806c03a 	cmpne	r3,r3,zero
    c674:	28e2b03a 	or	r17,r5,r3
    c678:	0007883a 	mov	r3,zero
    c67c:	003f2306 	br	c30c <__alt_data_end+0xff00c30c>
    c680:	0007883a 	mov	r3,zero
    c684:	5811883a 	mov	r8,r11
    c688:	00bfffc4 	movi	r2,-1
    c68c:	0401ffc4 	movi	r16,2047
    c690:	003e7806 	br	c074 <__alt_data_end+0xff00c074>
    c694:	4462b03a 	or	r17,r8,r17
    c698:	8822c03a 	cmpne	r17,r17,zero
    c69c:	0009883a 	mov	r4,zero
    c6a0:	003fa006 	br	c524 <__alt_data_end+0xff00c524>
    c6a4:	4811883a 	mov	r8,r9
    c6a8:	3023883a 	mov	r17,r6
    c6ac:	0401ffc4 	movi	r16,2047
    c6b0:	003e0706 	br	bed0 <__alt_data_end+0xff00bed0>
    c6b4:	4811883a 	mov	r8,r9
    c6b8:	3023883a 	mov	r17,r6
    c6bc:	003e0406 	br	bed0 <__alt_data_end+0xff00bed0>
    c6c0:	21fff804 	addi	r7,r4,-32
    c6c4:	01400804 	movi	r5,32
    c6c8:	41ced83a 	srl	r7,r8,r7
    c6cc:	21400a26 	beq	r4,r5,c6f8 <__adddf3+0x8a4>
    c6d0:	01401004 	movi	r5,64
    c6d4:	2909c83a 	sub	r4,r5,r4
    c6d8:	4108983a 	sll	r4,r8,r4
    c6dc:	2448b03a 	or	r4,r4,r17
    c6e0:	2008c03a 	cmpne	r4,r4,zero
    c6e4:	3922b03a 	or	r17,r7,r4
    c6e8:	0009883a 	mov	r4,zero
    c6ec:	003f8d06 	br	c524 <__alt_data_end+0xff00c524>
    c6f0:	0007883a 	mov	r3,zero
    c6f4:	003fdd06 	br	c66c <__alt_data_end+0xff00c66c>
    c6f8:	0009883a 	mov	r4,zero
    c6fc:	003ff706 	br	c6dc <__alt_data_end+0xff00c6dc>

0000c700 <__divdf3>:
    c700:	defff204 	addi	sp,sp,-56
    c704:	dd400915 	stw	r21,36(sp)
    c708:	282ad53a 	srli	r21,r5,20
    c70c:	dd000815 	stw	r20,32(sp)
    c710:	2828d7fa 	srli	r20,r5,31
    c714:	dc000415 	stw	r16,16(sp)
    c718:	04000434 	movhi	r16,16
    c71c:	df000c15 	stw	fp,48(sp)
    c720:	843fffc4 	addi	r16,r16,-1
    c724:	dfc00d15 	stw	ra,52(sp)
    c728:	ddc00b15 	stw	r23,44(sp)
    c72c:	dd800a15 	stw	r22,40(sp)
    c730:	dcc00715 	stw	r19,28(sp)
    c734:	dc800615 	stw	r18,24(sp)
    c738:	dc400515 	stw	r17,20(sp)
    c73c:	ad41ffcc 	andi	r21,r21,2047
    c740:	2c20703a 	and	r16,r5,r16
    c744:	a7003fcc 	andi	fp,r20,255
    c748:	a8006126 	beq	r21,zero,c8d0 <__divdf3+0x1d0>
    c74c:	0081ffc4 	movi	r2,2047
    c750:	2025883a 	mov	r18,r4
    c754:	a8803726 	beq	r21,r2,c834 <__divdf3+0x134>
    c758:	80800434 	orhi	r2,r16,16
    c75c:	100490fa 	slli	r2,r2,3
    c760:	2020d77a 	srli	r16,r4,29
    c764:	202490fa 	slli	r18,r4,3
    c768:	ad7f0044 	addi	r21,r21,-1023
    c76c:	80a0b03a 	or	r16,r16,r2
    c770:	0027883a 	mov	r19,zero
    c774:	0013883a 	mov	r9,zero
    c778:	3804d53a 	srli	r2,r7,20
    c77c:	382cd7fa 	srli	r22,r7,31
    c780:	04400434 	movhi	r17,16
    c784:	8c7fffc4 	addi	r17,r17,-1
    c788:	1081ffcc 	andi	r2,r2,2047
    c78c:	3011883a 	mov	r8,r6
    c790:	3c62703a 	and	r17,r7,r17
    c794:	b5c03fcc 	andi	r23,r22,255
    c798:	10006c26 	beq	r2,zero,c94c <__divdf3+0x24c>
    c79c:	00c1ffc4 	movi	r3,2047
    c7a0:	10c06426 	beq	r2,r3,c934 <__divdf3+0x234>
    c7a4:	88c00434 	orhi	r3,r17,16
    c7a8:	180690fa 	slli	r3,r3,3
    c7ac:	3022d77a 	srli	r17,r6,29
    c7b0:	301090fa 	slli	r8,r6,3
    c7b4:	10bf0044 	addi	r2,r2,-1023
    c7b8:	88e2b03a 	or	r17,r17,r3
    c7bc:	000f883a 	mov	r7,zero
    c7c0:	a58cf03a 	xor	r6,r20,r22
    c7c4:	3cc8b03a 	or	r4,r7,r19
    c7c8:	a8abc83a 	sub	r21,r21,r2
    c7cc:	008003c4 	movi	r2,15
    c7d0:	3007883a 	mov	r3,r6
    c7d4:	34c03fcc 	andi	r19,r6,255
    c7d8:	11009036 	bltu	r2,r4,ca1c <__divdf3+0x31c>
    c7dc:	200890ba 	slli	r4,r4,2
    c7e0:	00800074 	movhi	r2,1
    c7e4:	10b1fd04 	addi	r2,r2,-14348
    c7e8:	2089883a 	add	r4,r4,r2
    c7ec:	20800017 	ldw	r2,0(r4)
    c7f0:	1000683a 	jmp	r2
    c7f4:	0000ca1c 	xori	zero,zero,808
    c7f8:	0000c86c 	andhi	zero,zero,801
    c7fc:	0000ca0c 	andi	zero,zero,808
    c800:	0000c860 	cmpeqi	zero,zero,801
    c804:	0000ca0c 	andi	zero,zero,808
    c808:	0000c9e0 	cmpeqi	zero,zero,807
    c80c:	0000ca0c 	andi	zero,zero,808
    c810:	0000c860 	cmpeqi	zero,zero,801
    c814:	0000c86c 	andhi	zero,zero,801
    c818:	0000c86c 	andhi	zero,zero,801
    c81c:	0000c9e0 	cmpeqi	zero,zero,807
    c820:	0000c860 	cmpeqi	zero,zero,801
    c824:	0000c850 	cmplti	zero,zero,801
    c828:	0000c850 	cmplti	zero,zero,801
    c82c:	0000c850 	cmplti	zero,zero,801
    c830:	0000cd00 	call	cd0 <init_LCD+0x22c>
    c834:	2404b03a 	or	r2,r4,r16
    c838:	1000661e 	bne	r2,zero,c9d4 <__divdf3+0x2d4>
    c83c:	04c00204 	movi	r19,8
    c840:	0021883a 	mov	r16,zero
    c844:	0025883a 	mov	r18,zero
    c848:	02400084 	movi	r9,2
    c84c:	003fca06 	br	c778 <__alt_data_end+0xff00c778>
    c850:	8023883a 	mov	r17,r16
    c854:	9011883a 	mov	r8,r18
    c858:	e02f883a 	mov	r23,fp
    c85c:	480f883a 	mov	r7,r9
    c860:	00800084 	movi	r2,2
    c864:	3881311e 	bne	r7,r2,cd2c <__divdf3+0x62c>
    c868:	b827883a 	mov	r19,r23
    c86c:	98c0004c 	andi	r3,r19,1
    c870:	0081ffc4 	movi	r2,2047
    c874:	000b883a 	mov	r5,zero
    c878:	0025883a 	mov	r18,zero
    c87c:	1004953a 	slli	r2,r2,20
    c880:	18c03fcc 	andi	r3,r3,255
    c884:	04400434 	movhi	r17,16
    c888:	8c7fffc4 	addi	r17,r17,-1
    c88c:	180697fa 	slli	r3,r3,31
    c890:	2c4a703a 	and	r5,r5,r17
    c894:	288ab03a 	or	r5,r5,r2
    c898:	28c6b03a 	or	r3,r5,r3
    c89c:	9005883a 	mov	r2,r18
    c8a0:	dfc00d17 	ldw	ra,52(sp)
    c8a4:	df000c17 	ldw	fp,48(sp)
    c8a8:	ddc00b17 	ldw	r23,44(sp)
    c8ac:	dd800a17 	ldw	r22,40(sp)
    c8b0:	dd400917 	ldw	r21,36(sp)
    c8b4:	dd000817 	ldw	r20,32(sp)
    c8b8:	dcc00717 	ldw	r19,28(sp)
    c8bc:	dc800617 	ldw	r18,24(sp)
    c8c0:	dc400517 	ldw	r17,20(sp)
    c8c4:	dc000417 	ldw	r16,16(sp)
    c8c8:	dec00e04 	addi	sp,sp,56
    c8cc:	f800283a 	ret
    c8d0:	2404b03a 	or	r2,r4,r16
    c8d4:	2027883a 	mov	r19,r4
    c8d8:	10003926 	beq	r2,zero,c9c0 <__divdf3+0x2c0>
    c8dc:	80012e26 	beq	r16,zero,cd98 <__divdf3+0x698>
    c8e0:	8009883a 	mov	r4,r16
    c8e4:	d9800315 	stw	r6,12(sp)
    c8e8:	d9c00215 	stw	r7,8(sp)
    c8ec:	000e4580 	call	e458 <__clzsi2>
    c8f0:	d9800317 	ldw	r6,12(sp)
    c8f4:	d9c00217 	ldw	r7,8(sp)
    c8f8:	113ffd44 	addi	r4,r2,-11
    c8fc:	00c00704 	movi	r3,28
    c900:	19012116 	blt	r3,r4,cd88 <__divdf3+0x688>
    c904:	00c00744 	movi	r3,29
    c908:	147ffe04 	addi	r17,r2,-8
    c90c:	1907c83a 	sub	r3,r3,r4
    c910:	8460983a 	sll	r16,r16,r17
    c914:	98c6d83a 	srl	r3,r19,r3
    c918:	9c64983a 	sll	r18,r19,r17
    c91c:	1c20b03a 	or	r16,r3,r16
    c920:	1080fcc4 	addi	r2,r2,1011
    c924:	00abc83a 	sub	r21,zero,r2
    c928:	0027883a 	mov	r19,zero
    c92c:	0013883a 	mov	r9,zero
    c930:	003f9106 	br	c778 <__alt_data_end+0xff00c778>
    c934:	3446b03a 	or	r3,r6,r17
    c938:	18001f1e 	bne	r3,zero,c9b8 <__divdf3+0x2b8>
    c93c:	0023883a 	mov	r17,zero
    c940:	0011883a 	mov	r8,zero
    c944:	01c00084 	movi	r7,2
    c948:	003f9d06 	br	c7c0 <__alt_data_end+0xff00c7c0>
    c94c:	3446b03a 	or	r3,r6,r17
    c950:	18001526 	beq	r3,zero,c9a8 <__divdf3+0x2a8>
    c954:	88011b26 	beq	r17,zero,cdc4 <__divdf3+0x6c4>
    c958:	8809883a 	mov	r4,r17
    c95c:	d9800315 	stw	r6,12(sp)
    c960:	da400115 	stw	r9,4(sp)
    c964:	000e4580 	call	e458 <__clzsi2>
    c968:	d9800317 	ldw	r6,12(sp)
    c96c:	da400117 	ldw	r9,4(sp)
    c970:	113ffd44 	addi	r4,r2,-11
    c974:	00c00704 	movi	r3,28
    c978:	19010e16 	blt	r3,r4,cdb4 <__divdf3+0x6b4>
    c97c:	00c00744 	movi	r3,29
    c980:	123ffe04 	addi	r8,r2,-8
    c984:	1907c83a 	sub	r3,r3,r4
    c988:	8a22983a 	sll	r17,r17,r8
    c98c:	30c6d83a 	srl	r3,r6,r3
    c990:	3210983a 	sll	r8,r6,r8
    c994:	1c62b03a 	or	r17,r3,r17
    c998:	1080fcc4 	addi	r2,r2,1011
    c99c:	0085c83a 	sub	r2,zero,r2
    c9a0:	000f883a 	mov	r7,zero
    c9a4:	003f8606 	br	c7c0 <__alt_data_end+0xff00c7c0>
    c9a8:	0023883a 	mov	r17,zero
    c9ac:	0011883a 	mov	r8,zero
    c9b0:	01c00044 	movi	r7,1
    c9b4:	003f8206 	br	c7c0 <__alt_data_end+0xff00c7c0>
    c9b8:	01c000c4 	movi	r7,3
    c9bc:	003f8006 	br	c7c0 <__alt_data_end+0xff00c7c0>
    c9c0:	04c00104 	movi	r19,4
    c9c4:	0021883a 	mov	r16,zero
    c9c8:	0025883a 	mov	r18,zero
    c9cc:	02400044 	movi	r9,1
    c9d0:	003f6906 	br	c778 <__alt_data_end+0xff00c778>
    c9d4:	04c00304 	movi	r19,12
    c9d8:	024000c4 	movi	r9,3
    c9dc:	003f6606 	br	c778 <__alt_data_end+0xff00c778>
    c9e0:	01400434 	movhi	r5,16
    c9e4:	0007883a 	mov	r3,zero
    c9e8:	297fffc4 	addi	r5,r5,-1
    c9ec:	04bfffc4 	movi	r18,-1
    c9f0:	0081ffc4 	movi	r2,2047
    c9f4:	003fa106 	br	c87c <__alt_data_end+0xff00c87c>
    c9f8:	00c00044 	movi	r3,1
    c9fc:	1887c83a 	sub	r3,r3,r2
    ca00:	01000e04 	movi	r4,56
    ca04:	20c1210e 	bge	r4,r3,ce8c <__divdf3+0x78c>
    ca08:	98c0004c 	andi	r3,r19,1
    ca0c:	0005883a 	mov	r2,zero
    ca10:	000b883a 	mov	r5,zero
    ca14:	0025883a 	mov	r18,zero
    ca18:	003f9806 	br	c87c <__alt_data_end+0xff00c87c>
    ca1c:	8c00fd36 	bltu	r17,r16,ce14 <__divdf3+0x714>
    ca20:	8440fb26 	beq	r16,r17,ce10 <__divdf3+0x710>
    ca24:	8007883a 	mov	r3,r16
    ca28:	ad7fffc4 	addi	r21,r21,-1
    ca2c:	0021883a 	mov	r16,zero
    ca30:	4004d63a 	srli	r2,r8,24
    ca34:	8822923a 	slli	r17,r17,8
    ca38:	1809883a 	mov	r4,r3
    ca3c:	402c923a 	slli	r22,r8,8
    ca40:	88b8b03a 	or	fp,r17,r2
    ca44:	e028d43a 	srli	r20,fp,16
    ca48:	d8c00015 	stw	r3,0(sp)
    ca4c:	e5ffffcc 	andi	r23,fp,65535
    ca50:	a00b883a 	mov	r5,r20
    ca54:	0001c6c0 	call	1c6c <__udivsi3>
    ca58:	d8c00017 	ldw	r3,0(sp)
    ca5c:	a00b883a 	mov	r5,r20
    ca60:	d8800315 	stw	r2,12(sp)
    ca64:	1809883a 	mov	r4,r3
    ca68:	0001cd00 	call	1cd0 <__umodsi3>
    ca6c:	d9800317 	ldw	r6,12(sp)
    ca70:	1006943a 	slli	r3,r2,16
    ca74:	9004d43a 	srli	r2,r18,16
    ca78:	b9a3383a 	mul	r17,r23,r6
    ca7c:	10c4b03a 	or	r2,r2,r3
    ca80:	1440062e 	bgeu	r2,r17,ca9c <__divdf3+0x39c>
    ca84:	1705883a 	add	r2,r2,fp
    ca88:	30ffffc4 	addi	r3,r6,-1
    ca8c:	1700ee36 	bltu	r2,fp,ce48 <__divdf3+0x748>
    ca90:	1440ed2e 	bgeu	r2,r17,ce48 <__divdf3+0x748>
    ca94:	31bfff84 	addi	r6,r6,-2
    ca98:	1705883a 	add	r2,r2,fp
    ca9c:	1463c83a 	sub	r17,r2,r17
    caa0:	a00b883a 	mov	r5,r20
    caa4:	8809883a 	mov	r4,r17
    caa8:	d9800315 	stw	r6,12(sp)
    caac:	0001c6c0 	call	1c6c <__udivsi3>
    cab0:	a00b883a 	mov	r5,r20
    cab4:	8809883a 	mov	r4,r17
    cab8:	d8800215 	stw	r2,8(sp)
    cabc:	0001cd00 	call	1cd0 <__umodsi3>
    cac0:	d9c00217 	ldw	r7,8(sp)
    cac4:	1004943a 	slli	r2,r2,16
    cac8:	94bfffcc 	andi	r18,r18,65535
    cacc:	b9d1383a 	mul	r8,r23,r7
    cad0:	90a4b03a 	or	r18,r18,r2
    cad4:	d9800317 	ldw	r6,12(sp)
    cad8:	9200062e 	bgeu	r18,r8,caf4 <__divdf3+0x3f4>
    cadc:	9725883a 	add	r18,r18,fp
    cae0:	38bfffc4 	addi	r2,r7,-1
    cae4:	9700d636 	bltu	r18,fp,ce40 <__divdf3+0x740>
    cae8:	9200d52e 	bgeu	r18,r8,ce40 <__divdf3+0x740>
    caec:	39ffff84 	addi	r7,r7,-2
    caf0:	9725883a 	add	r18,r18,fp
    caf4:	3004943a 	slli	r2,r6,16
    caf8:	b012d43a 	srli	r9,r22,16
    cafc:	b1bfffcc 	andi	r6,r22,65535
    cb00:	11e2b03a 	or	r17,r2,r7
    cb04:	8806d43a 	srli	r3,r17,16
    cb08:	893fffcc 	andi	r4,r17,65535
    cb0c:	218b383a 	mul	r5,r4,r6
    cb10:	30c5383a 	mul	r2,r6,r3
    cb14:	2249383a 	mul	r4,r4,r9
    cb18:	280ed43a 	srli	r7,r5,16
    cb1c:	9225c83a 	sub	r18,r18,r8
    cb20:	2089883a 	add	r4,r4,r2
    cb24:	3909883a 	add	r4,r7,r4
    cb28:	1a47383a 	mul	r3,r3,r9
    cb2c:	2080022e 	bgeu	r4,r2,cb38 <__divdf3+0x438>
    cb30:	00800074 	movhi	r2,1
    cb34:	1887883a 	add	r3,r3,r2
    cb38:	2004d43a 	srli	r2,r4,16
    cb3c:	2008943a 	slli	r4,r4,16
    cb40:	297fffcc 	andi	r5,r5,65535
    cb44:	10c7883a 	add	r3,r2,r3
    cb48:	2149883a 	add	r4,r4,r5
    cb4c:	90c0a536 	bltu	r18,r3,cde4 <__divdf3+0x6e4>
    cb50:	90c0bf26 	beq	r18,r3,ce50 <__divdf3+0x750>
    cb54:	90c7c83a 	sub	r3,r18,r3
    cb58:	810fc83a 	sub	r7,r16,r4
    cb5c:	81e5803a 	cmpltu	r18,r16,r7
    cb60:	1ca5c83a 	sub	r18,r3,r18
    cb64:	e480c126 	beq	fp,r18,ce6c <__divdf3+0x76c>
    cb68:	a00b883a 	mov	r5,r20
    cb6c:	9009883a 	mov	r4,r18
    cb70:	d9800315 	stw	r6,12(sp)
    cb74:	d9c00215 	stw	r7,8(sp)
    cb78:	da400115 	stw	r9,4(sp)
    cb7c:	0001c6c0 	call	1c6c <__udivsi3>
    cb80:	a00b883a 	mov	r5,r20
    cb84:	9009883a 	mov	r4,r18
    cb88:	d8800015 	stw	r2,0(sp)
    cb8c:	0001cd00 	call	1cd0 <__umodsi3>
    cb90:	d9c00217 	ldw	r7,8(sp)
    cb94:	da000017 	ldw	r8,0(sp)
    cb98:	1006943a 	slli	r3,r2,16
    cb9c:	3804d43a 	srli	r2,r7,16
    cba0:	ba21383a 	mul	r16,r23,r8
    cba4:	d9800317 	ldw	r6,12(sp)
    cba8:	10c4b03a 	or	r2,r2,r3
    cbac:	da400117 	ldw	r9,4(sp)
    cbb0:	1400062e 	bgeu	r2,r16,cbcc <__divdf3+0x4cc>
    cbb4:	1705883a 	add	r2,r2,fp
    cbb8:	40ffffc4 	addi	r3,r8,-1
    cbbc:	1700ad36 	bltu	r2,fp,ce74 <__divdf3+0x774>
    cbc0:	1400ac2e 	bgeu	r2,r16,ce74 <__divdf3+0x774>
    cbc4:	423fff84 	addi	r8,r8,-2
    cbc8:	1705883a 	add	r2,r2,fp
    cbcc:	1421c83a 	sub	r16,r2,r16
    cbd0:	a00b883a 	mov	r5,r20
    cbd4:	8009883a 	mov	r4,r16
    cbd8:	d9800315 	stw	r6,12(sp)
    cbdc:	d9c00215 	stw	r7,8(sp)
    cbe0:	da000015 	stw	r8,0(sp)
    cbe4:	da400115 	stw	r9,4(sp)
    cbe8:	0001c6c0 	call	1c6c <__udivsi3>
    cbec:	8009883a 	mov	r4,r16
    cbf0:	a00b883a 	mov	r5,r20
    cbf4:	1025883a 	mov	r18,r2
    cbf8:	0001cd00 	call	1cd0 <__umodsi3>
    cbfc:	d9c00217 	ldw	r7,8(sp)
    cc00:	1004943a 	slli	r2,r2,16
    cc04:	bcaf383a 	mul	r23,r23,r18
    cc08:	393fffcc 	andi	r4,r7,65535
    cc0c:	2088b03a 	or	r4,r4,r2
    cc10:	d9800317 	ldw	r6,12(sp)
    cc14:	da000017 	ldw	r8,0(sp)
    cc18:	da400117 	ldw	r9,4(sp)
    cc1c:	25c0062e 	bgeu	r4,r23,cc38 <__divdf3+0x538>
    cc20:	2709883a 	add	r4,r4,fp
    cc24:	90bfffc4 	addi	r2,r18,-1
    cc28:	27009436 	bltu	r4,fp,ce7c <__divdf3+0x77c>
    cc2c:	25c0932e 	bgeu	r4,r23,ce7c <__divdf3+0x77c>
    cc30:	94bfff84 	addi	r18,r18,-2
    cc34:	2709883a 	add	r4,r4,fp
    cc38:	4004943a 	slli	r2,r8,16
    cc3c:	25efc83a 	sub	r23,r4,r23
    cc40:	1490b03a 	or	r8,r2,r18
    cc44:	4008d43a 	srli	r4,r8,16
    cc48:	40ffffcc 	andi	r3,r8,65535
    cc4c:	30c5383a 	mul	r2,r6,r3
    cc50:	1a47383a 	mul	r3,r3,r9
    cc54:	310d383a 	mul	r6,r6,r4
    cc58:	100ad43a 	srli	r5,r2,16
    cc5c:	4913383a 	mul	r9,r9,r4
    cc60:	1987883a 	add	r3,r3,r6
    cc64:	28c7883a 	add	r3,r5,r3
    cc68:	1980022e 	bgeu	r3,r6,cc74 <__divdf3+0x574>
    cc6c:	01000074 	movhi	r4,1
    cc70:	4913883a 	add	r9,r9,r4
    cc74:	1808d43a 	srli	r4,r3,16
    cc78:	1806943a 	slli	r3,r3,16
    cc7c:	10bfffcc 	andi	r2,r2,65535
    cc80:	2253883a 	add	r9,r4,r9
    cc84:	1887883a 	add	r3,r3,r2
    cc88:	ba403836 	bltu	r23,r9,cd6c <__divdf3+0x66c>
    cc8c:	ba403626 	beq	r23,r9,cd68 <__divdf3+0x668>
    cc90:	42000054 	ori	r8,r8,1
    cc94:	a880ffc4 	addi	r2,r21,1023
    cc98:	00bf570e 	bge	zero,r2,c9f8 <__alt_data_end+0xff00c9f8>
    cc9c:	40c001cc 	andi	r3,r8,7
    cca0:	18000726 	beq	r3,zero,ccc0 <__divdf3+0x5c0>
    cca4:	40c003cc 	andi	r3,r8,15
    cca8:	01000104 	movi	r4,4
    ccac:	19000426 	beq	r3,r4,ccc0 <__divdf3+0x5c0>
    ccb0:	4107883a 	add	r3,r8,r4
    ccb4:	1a11803a 	cmpltu	r8,r3,r8
    ccb8:	8a23883a 	add	r17,r17,r8
    ccbc:	1811883a 	mov	r8,r3
    ccc0:	88c0402c 	andhi	r3,r17,256
    ccc4:	18000426 	beq	r3,zero,ccd8 <__divdf3+0x5d8>
    ccc8:	00ffc034 	movhi	r3,65280
    cccc:	18ffffc4 	addi	r3,r3,-1
    ccd0:	a8810004 	addi	r2,r21,1024
    ccd4:	88e2703a 	and	r17,r17,r3
    ccd8:	00c1ff84 	movi	r3,2046
    ccdc:	18bee316 	blt	r3,r2,c86c <__alt_data_end+0xff00c86c>
    cce0:	8824977a 	slli	r18,r17,29
    cce4:	4010d0fa 	srli	r8,r8,3
    cce8:	8822927a 	slli	r17,r17,9
    ccec:	1081ffcc 	andi	r2,r2,2047
    ccf0:	9224b03a 	or	r18,r18,r8
    ccf4:	880ad33a 	srli	r5,r17,12
    ccf8:	98c0004c 	andi	r3,r19,1
    ccfc:	003edf06 	br	c87c <__alt_data_end+0xff00c87c>
    cd00:	8080022c 	andhi	r2,r16,8
    cd04:	10001226 	beq	r2,zero,cd50 <__divdf3+0x650>
    cd08:	8880022c 	andhi	r2,r17,8
    cd0c:	1000101e 	bne	r2,zero,cd50 <__divdf3+0x650>
    cd10:	00800434 	movhi	r2,16
    cd14:	89400234 	orhi	r5,r17,8
    cd18:	10bfffc4 	addi	r2,r2,-1
    cd1c:	b007883a 	mov	r3,r22
    cd20:	288a703a 	and	r5,r5,r2
    cd24:	4025883a 	mov	r18,r8
    cd28:	003f3106 	br	c9f0 <__alt_data_end+0xff00c9f0>
    cd2c:	008000c4 	movi	r2,3
    cd30:	3880a626 	beq	r7,r2,cfcc <__divdf3+0x8cc>
    cd34:	00800044 	movi	r2,1
    cd38:	3880521e 	bne	r7,r2,ce84 <__divdf3+0x784>
    cd3c:	b807883a 	mov	r3,r23
    cd40:	0005883a 	mov	r2,zero
    cd44:	000b883a 	mov	r5,zero
    cd48:	0025883a 	mov	r18,zero
    cd4c:	003ecb06 	br	c87c <__alt_data_end+0xff00c87c>
    cd50:	00800434 	movhi	r2,16
    cd54:	81400234 	orhi	r5,r16,8
    cd58:	10bfffc4 	addi	r2,r2,-1
    cd5c:	a007883a 	mov	r3,r20
    cd60:	288a703a 	and	r5,r5,r2
    cd64:	003f2206 	br	c9f0 <__alt_data_end+0xff00c9f0>
    cd68:	183fca26 	beq	r3,zero,cc94 <__alt_data_end+0xff00cc94>
    cd6c:	e5ef883a 	add	r23,fp,r23
    cd70:	40bfffc4 	addi	r2,r8,-1
    cd74:	bf00392e 	bgeu	r23,fp,ce5c <__divdf3+0x75c>
    cd78:	1011883a 	mov	r8,r2
    cd7c:	ba7fc41e 	bne	r23,r9,cc90 <__alt_data_end+0xff00cc90>
    cd80:	b0ffc31e 	bne	r22,r3,cc90 <__alt_data_end+0xff00cc90>
    cd84:	003fc306 	br	cc94 <__alt_data_end+0xff00cc94>
    cd88:	143ff604 	addi	r16,r2,-40
    cd8c:	9c20983a 	sll	r16,r19,r16
    cd90:	0025883a 	mov	r18,zero
    cd94:	003ee206 	br	c920 <__alt_data_end+0xff00c920>
    cd98:	d9800315 	stw	r6,12(sp)
    cd9c:	d9c00215 	stw	r7,8(sp)
    cda0:	000e4580 	call	e458 <__clzsi2>
    cda4:	10800804 	addi	r2,r2,32
    cda8:	d9c00217 	ldw	r7,8(sp)
    cdac:	d9800317 	ldw	r6,12(sp)
    cdb0:	003ed106 	br	c8f8 <__alt_data_end+0xff00c8f8>
    cdb4:	147ff604 	addi	r17,r2,-40
    cdb8:	3462983a 	sll	r17,r6,r17
    cdbc:	0011883a 	mov	r8,zero
    cdc0:	003ef506 	br	c998 <__alt_data_end+0xff00c998>
    cdc4:	3009883a 	mov	r4,r6
    cdc8:	d9800315 	stw	r6,12(sp)
    cdcc:	da400115 	stw	r9,4(sp)
    cdd0:	000e4580 	call	e458 <__clzsi2>
    cdd4:	10800804 	addi	r2,r2,32
    cdd8:	da400117 	ldw	r9,4(sp)
    cddc:	d9800317 	ldw	r6,12(sp)
    cde0:	003ee306 	br	c970 <__alt_data_end+0xff00c970>
    cde4:	85a1883a 	add	r16,r16,r22
    cde8:	8585803a 	cmpltu	r2,r16,r22
    cdec:	1705883a 	add	r2,r2,fp
    cdf0:	14a5883a 	add	r18,r2,r18
    cdf4:	88bfffc4 	addi	r2,r17,-1
    cdf8:	e4800c2e 	bgeu	fp,r18,ce2c <__divdf3+0x72c>
    cdfc:	90c03e36 	bltu	r18,r3,cef8 <__divdf3+0x7f8>
    ce00:	1c806926 	beq	r3,r18,cfa8 <__divdf3+0x8a8>
    ce04:	90c7c83a 	sub	r3,r18,r3
    ce08:	1023883a 	mov	r17,r2
    ce0c:	003f5206 	br	cb58 <__alt_data_end+0xff00cb58>
    ce10:	923f0436 	bltu	r18,r8,ca24 <__alt_data_end+0xff00ca24>
    ce14:	800897fa 	slli	r4,r16,31
    ce18:	9004d07a 	srli	r2,r18,1
    ce1c:	8006d07a 	srli	r3,r16,1
    ce20:	902097fa 	slli	r16,r18,31
    ce24:	20a4b03a 	or	r18,r4,r2
    ce28:	003f0106 	br	ca30 <__alt_data_end+0xff00ca30>
    ce2c:	e4bff51e 	bne	fp,r18,ce04 <__alt_data_end+0xff00ce04>
    ce30:	85bff22e 	bgeu	r16,r22,cdfc <__alt_data_end+0xff00cdfc>
    ce34:	e0c7c83a 	sub	r3,fp,r3
    ce38:	1023883a 	mov	r17,r2
    ce3c:	003f4606 	br	cb58 <__alt_data_end+0xff00cb58>
    ce40:	100f883a 	mov	r7,r2
    ce44:	003f2b06 	br	caf4 <__alt_data_end+0xff00caf4>
    ce48:	180d883a 	mov	r6,r3
    ce4c:	003f1306 	br	ca9c <__alt_data_end+0xff00ca9c>
    ce50:	813fe436 	bltu	r16,r4,cde4 <__alt_data_end+0xff00cde4>
    ce54:	0007883a 	mov	r3,zero
    ce58:	003f3f06 	br	cb58 <__alt_data_end+0xff00cb58>
    ce5c:	ba402c36 	bltu	r23,r9,cf10 <__divdf3+0x810>
    ce60:	4dc05426 	beq	r9,r23,cfb4 <__divdf3+0x8b4>
    ce64:	1011883a 	mov	r8,r2
    ce68:	003f8906 	br	cc90 <__alt_data_end+0xff00cc90>
    ce6c:	023fffc4 	movi	r8,-1
    ce70:	003f8806 	br	cc94 <__alt_data_end+0xff00cc94>
    ce74:	1811883a 	mov	r8,r3
    ce78:	003f5406 	br	cbcc <__alt_data_end+0xff00cbcc>
    ce7c:	1025883a 	mov	r18,r2
    ce80:	003f6d06 	br	cc38 <__alt_data_end+0xff00cc38>
    ce84:	b827883a 	mov	r19,r23
    ce88:	003f8206 	br	cc94 <__alt_data_end+0xff00cc94>
    ce8c:	010007c4 	movi	r4,31
    ce90:	20c02616 	blt	r4,r3,cf2c <__divdf3+0x82c>
    ce94:	00800804 	movi	r2,32
    ce98:	10c5c83a 	sub	r2,r2,r3
    ce9c:	888a983a 	sll	r5,r17,r2
    cea0:	40c8d83a 	srl	r4,r8,r3
    cea4:	4084983a 	sll	r2,r8,r2
    cea8:	88e2d83a 	srl	r17,r17,r3
    ceac:	2906b03a 	or	r3,r5,r4
    ceb0:	1004c03a 	cmpne	r2,r2,zero
    ceb4:	1886b03a 	or	r3,r3,r2
    ceb8:	188001cc 	andi	r2,r3,7
    cebc:	10000726 	beq	r2,zero,cedc <__divdf3+0x7dc>
    cec0:	188003cc 	andi	r2,r3,15
    cec4:	01000104 	movi	r4,4
    cec8:	11000426 	beq	r2,r4,cedc <__divdf3+0x7dc>
    cecc:	1805883a 	mov	r2,r3
    ced0:	10c00104 	addi	r3,r2,4
    ced4:	1885803a 	cmpltu	r2,r3,r2
    ced8:	88a3883a 	add	r17,r17,r2
    cedc:	8880202c 	andhi	r2,r17,128
    cee0:	10002726 	beq	r2,zero,cf80 <__divdf3+0x880>
    cee4:	98c0004c 	andi	r3,r19,1
    cee8:	00800044 	movi	r2,1
    ceec:	000b883a 	mov	r5,zero
    cef0:	0025883a 	mov	r18,zero
    cef4:	003e6106 	br	c87c <__alt_data_end+0xff00c87c>
    cef8:	85a1883a 	add	r16,r16,r22
    cefc:	8585803a 	cmpltu	r2,r16,r22
    cf00:	1705883a 	add	r2,r2,fp
    cf04:	14a5883a 	add	r18,r2,r18
    cf08:	8c7fff84 	addi	r17,r17,-2
    cf0c:	003f1106 	br	cb54 <__alt_data_end+0xff00cb54>
    cf10:	b589883a 	add	r4,r22,r22
    cf14:	25ad803a 	cmpltu	r22,r4,r22
    cf18:	b739883a 	add	fp,r22,fp
    cf1c:	40bfff84 	addi	r2,r8,-2
    cf20:	bf2f883a 	add	r23,r23,fp
    cf24:	202d883a 	mov	r22,r4
    cf28:	003f9306 	br	cd78 <__alt_data_end+0xff00cd78>
    cf2c:	013ff844 	movi	r4,-31
    cf30:	2085c83a 	sub	r2,r4,r2
    cf34:	8888d83a 	srl	r4,r17,r2
    cf38:	00800804 	movi	r2,32
    cf3c:	18802126 	beq	r3,r2,cfc4 <__divdf3+0x8c4>
    cf40:	00801004 	movi	r2,64
    cf44:	10c5c83a 	sub	r2,r2,r3
    cf48:	8884983a 	sll	r2,r17,r2
    cf4c:	1204b03a 	or	r2,r2,r8
    cf50:	1004c03a 	cmpne	r2,r2,zero
    cf54:	2084b03a 	or	r2,r4,r2
    cf58:	144001cc 	andi	r17,r2,7
    cf5c:	88000d1e 	bne	r17,zero,cf94 <__divdf3+0x894>
    cf60:	000b883a 	mov	r5,zero
    cf64:	1024d0fa 	srli	r18,r2,3
    cf68:	98c0004c 	andi	r3,r19,1
    cf6c:	0005883a 	mov	r2,zero
    cf70:	9464b03a 	or	r18,r18,r17
    cf74:	003e4106 	br	c87c <__alt_data_end+0xff00c87c>
    cf78:	1007883a 	mov	r3,r2
    cf7c:	0023883a 	mov	r17,zero
    cf80:	880a927a 	slli	r5,r17,9
    cf84:	1805883a 	mov	r2,r3
    cf88:	8822977a 	slli	r17,r17,29
    cf8c:	280ad33a 	srli	r5,r5,12
    cf90:	003ff406 	br	cf64 <__alt_data_end+0xff00cf64>
    cf94:	10c003cc 	andi	r3,r2,15
    cf98:	01000104 	movi	r4,4
    cf9c:	193ff626 	beq	r3,r4,cf78 <__alt_data_end+0xff00cf78>
    cfa0:	0023883a 	mov	r17,zero
    cfa4:	003fca06 	br	ced0 <__alt_data_end+0xff00ced0>
    cfa8:	813fd336 	bltu	r16,r4,cef8 <__alt_data_end+0xff00cef8>
    cfac:	1023883a 	mov	r17,r2
    cfb0:	003fa806 	br	ce54 <__alt_data_end+0xff00ce54>
    cfb4:	b0ffd636 	bltu	r22,r3,cf10 <__alt_data_end+0xff00cf10>
    cfb8:	1011883a 	mov	r8,r2
    cfbc:	b0ff341e 	bne	r22,r3,cc90 <__alt_data_end+0xff00cc90>
    cfc0:	003f3406 	br	cc94 <__alt_data_end+0xff00cc94>
    cfc4:	0005883a 	mov	r2,zero
    cfc8:	003fe006 	br	cf4c <__alt_data_end+0xff00cf4c>
    cfcc:	00800434 	movhi	r2,16
    cfd0:	89400234 	orhi	r5,r17,8
    cfd4:	10bfffc4 	addi	r2,r2,-1
    cfd8:	b807883a 	mov	r3,r23
    cfdc:	288a703a 	and	r5,r5,r2
    cfe0:	4025883a 	mov	r18,r8
    cfe4:	003e8206 	br	c9f0 <__alt_data_end+0xff00c9f0>

0000cfe8 <__eqdf2>:
    cfe8:	2804d53a 	srli	r2,r5,20
    cfec:	3806d53a 	srli	r3,r7,20
    cff0:	02000434 	movhi	r8,16
    cff4:	423fffc4 	addi	r8,r8,-1
    cff8:	1081ffcc 	andi	r2,r2,2047
    cffc:	0281ffc4 	movi	r10,2047
    d000:	2a12703a 	and	r9,r5,r8
    d004:	18c1ffcc 	andi	r3,r3,2047
    d008:	3a10703a 	and	r8,r7,r8
    d00c:	280ad7fa 	srli	r5,r5,31
    d010:	380ed7fa 	srli	r7,r7,31
    d014:	12801026 	beq	r2,r10,d058 <__eqdf2+0x70>
    d018:	0281ffc4 	movi	r10,2047
    d01c:	1a800a26 	beq	r3,r10,d048 <__eqdf2+0x60>
    d020:	10c00226 	beq	r2,r3,d02c <__eqdf2+0x44>
    d024:	00800044 	movi	r2,1
    d028:	f800283a 	ret
    d02c:	4a3ffd1e 	bne	r9,r8,d024 <__alt_data_end+0xff00d024>
    d030:	21bffc1e 	bne	r4,r6,d024 <__alt_data_end+0xff00d024>
    d034:	29c00c26 	beq	r5,r7,d068 <__eqdf2+0x80>
    d038:	103ffa1e 	bne	r2,zero,d024 <__alt_data_end+0xff00d024>
    d03c:	2244b03a 	or	r2,r4,r9
    d040:	1004c03a 	cmpne	r2,r2,zero
    d044:	f800283a 	ret
    d048:	3214b03a 	or	r10,r6,r8
    d04c:	503ff426 	beq	r10,zero,d020 <__alt_data_end+0xff00d020>
    d050:	00800044 	movi	r2,1
    d054:	f800283a 	ret
    d058:	2254b03a 	or	r10,r4,r9
    d05c:	503fee26 	beq	r10,zero,d018 <__alt_data_end+0xff00d018>
    d060:	00800044 	movi	r2,1
    d064:	f800283a 	ret
    d068:	0005883a 	mov	r2,zero
    d06c:	f800283a 	ret

0000d070 <__gedf2>:
    d070:	2804d53a 	srli	r2,r5,20
    d074:	3806d53a 	srli	r3,r7,20
    d078:	02000434 	movhi	r8,16
    d07c:	423fffc4 	addi	r8,r8,-1
    d080:	1081ffcc 	andi	r2,r2,2047
    d084:	0241ffc4 	movi	r9,2047
    d088:	2a14703a 	and	r10,r5,r8
    d08c:	18c1ffcc 	andi	r3,r3,2047
    d090:	3a10703a 	and	r8,r7,r8
    d094:	280ad7fa 	srli	r5,r5,31
    d098:	380ed7fa 	srli	r7,r7,31
    d09c:	12401d26 	beq	r2,r9,d114 <__gedf2+0xa4>
    d0a0:	0241ffc4 	movi	r9,2047
    d0a4:	1a401226 	beq	r3,r9,d0f0 <__gedf2+0x80>
    d0a8:	1000081e 	bne	r2,zero,d0cc <__gedf2+0x5c>
    d0ac:	2296b03a 	or	r11,r4,r10
    d0b0:	5813003a 	cmpeq	r9,r11,zero
    d0b4:	1800091e 	bne	r3,zero,d0dc <__gedf2+0x6c>
    d0b8:	3218b03a 	or	r12,r6,r8
    d0bc:	6000071e 	bne	r12,zero,d0dc <__gedf2+0x6c>
    d0c0:	0005883a 	mov	r2,zero
    d0c4:	5800101e 	bne	r11,zero,d108 <__gedf2+0x98>
    d0c8:	f800283a 	ret
    d0cc:	18000c1e 	bne	r3,zero,d100 <__gedf2+0x90>
    d0d0:	3212b03a 	or	r9,r6,r8
    d0d4:	48000c26 	beq	r9,zero,d108 <__gedf2+0x98>
    d0d8:	0013883a 	mov	r9,zero
    d0dc:	39c03fcc 	andi	r7,r7,255
    d0e0:	48000826 	beq	r9,zero,d104 <__gedf2+0x94>
    d0e4:	38000926 	beq	r7,zero,d10c <__gedf2+0x9c>
    d0e8:	00800044 	movi	r2,1
    d0ec:	f800283a 	ret
    d0f0:	3212b03a 	or	r9,r6,r8
    d0f4:	483fec26 	beq	r9,zero,d0a8 <__alt_data_end+0xff00d0a8>
    d0f8:	00bfff84 	movi	r2,-2
    d0fc:	f800283a 	ret
    d100:	39c03fcc 	andi	r7,r7,255
    d104:	29c00626 	beq	r5,r7,d120 <__gedf2+0xb0>
    d108:	283ff726 	beq	r5,zero,d0e8 <__alt_data_end+0xff00d0e8>
    d10c:	00bfffc4 	movi	r2,-1
    d110:	f800283a 	ret
    d114:	2292b03a 	or	r9,r4,r10
    d118:	483fe126 	beq	r9,zero,d0a0 <__alt_data_end+0xff00d0a0>
    d11c:	003ff606 	br	d0f8 <__alt_data_end+0xff00d0f8>
    d120:	18bff916 	blt	r3,r2,d108 <__alt_data_end+0xff00d108>
    d124:	10c00316 	blt	r2,r3,d134 <__gedf2+0xc4>
    d128:	42bff736 	bltu	r8,r10,d108 <__alt_data_end+0xff00d108>
    d12c:	52000326 	beq	r10,r8,d13c <__gedf2+0xcc>
    d130:	5200042e 	bgeu	r10,r8,d144 <__gedf2+0xd4>
    d134:	283fec1e 	bne	r5,zero,d0e8 <__alt_data_end+0xff00d0e8>
    d138:	003ff406 	br	d10c <__alt_data_end+0xff00d10c>
    d13c:	313ff236 	bltu	r6,r4,d108 <__alt_data_end+0xff00d108>
    d140:	21bffc36 	bltu	r4,r6,d134 <__alt_data_end+0xff00d134>
    d144:	0005883a 	mov	r2,zero
    d148:	f800283a 	ret

0000d14c <__ledf2>:
    d14c:	2804d53a 	srli	r2,r5,20
    d150:	3810d53a 	srli	r8,r7,20
    d154:	00c00434 	movhi	r3,16
    d158:	18ffffc4 	addi	r3,r3,-1
    d15c:	1081ffcc 	andi	r2,r2,2047
    d160:	0241ffc4 	movi	r9,2047
    d164:	28d4703a 	and	r10,r5,r3
    d168:	4201ffcc 	andi	r8,r8,2047
    d16c:	38c6703a 	and	r3,r7,r3
    d170:	280ad7fa 	srli	r5,r5,31
    d174:	380ed7fa 	srli	r7,r7,31
    d178:	12401f26 	beq	r2,r9,d1f8 <__ledf2+0xac>
    d17c:	0241ffc4 	movi	r9,2047
    d180:	42401426 	beq	r8,r9,d1d4 <__ledf2+0x88>
    d184:	1000091e 	bne	r2,zero,d1ac <__ledf2+0x60>
    d188:	2296b03a 	or	r11,r4,r10
    d18c:	5813003a 	cmpeq	r9,r11,zero
    d190:	29403fcc 	andi	r5,r5,255
    d194:	40000a1e 	bne	r8,zero,d1c0 <__ledf2+0x74>
    d198:	30d8b03a 	or	r12,r6,r3
    d19c:	6000081e 	bne	r12,zero,d1c0 <__ledf2+0x74>
    d1a0:	0005883a 	mov	r2,zero
    d1a4:	5800111e 	bne	r11,zero,d1ec <__ledf2+0xa0>
    d1a8:	f800283a 	ret
    d1ac:	29403fcc 	andi	r5,r5,255
    d1b0:	40000c1e 	bne	r8,zero,d1e4 <__ledf2+0x98>
    d1b4:	30d2b03a 	or	r9,r6,r3
    d1b8:	48000c26 	beq	r9,zero,d1ec <__ledf2+0xa0>
    d1bc:	0013883a 	mov	r9,zero
    d1c0:	39c03fcc 	andi	r7,r7,255
    d1c4:	48000826 	beq	r9,zero,d1e8 <__ledf2+0x9c>
    d1c8:	38001126 	beq	r7,zero,d210 <__ledf2+0xc4>
    d1cc:	00800044 	movi	r2,1
    d1d0:	f800283a 	ret
    d1d4:	30d2b03a 	or	r9,r6,r3
    d1d8:	483fea26 	beq	r9,zero,d184 <__alt_data_end+0xff00d184>
    d1dc:	00800084 	movi	r2,2
    d1e0:	f800283a 	ret
    d1e4:	39c03fcc 	andi	r7,r7,255
    d1e8:	39400726 	beq	r7,r5,d208 <__ledf2+0xbc>
    d1ec:	2800081e 	bne	r5,zero,d210 <__ledf2+0xc4>
    d1f0:	00800044 	movi	r2,1
    d1f4:	f800283a 	ret
    d1f8:	2292b03a 	or	r9,r4,r10
    d1fc:	483fdf26 	beq	r9,zero,d17c <__alt_data_end+0xff00d17c>
    d200:	00800084 	movi	r2,2
    d204:	f800283a 	ret
    d208:	4080030e 	bge	r8,r2,d218 <__ledf2+0xcc>
    d20c:	383fef26 	beq	r7,zero,d1cc <__alt_data_end+0xff00d1cc>
    d210:	00bfffc4 	movi	r2,-1
    d214:	f800283a 	ret
    d218:	123feb16 	blt	r2,r8,d1c8 <__alt_data_end+0xff00d1c8>
    d21c:	1abff336 	bltu	r3,r10,d1ec <__alt_data_end+0xff00d1ec>
    d220:	50c00326 	beq	r10,r3,d230 <__ledf2+0xe4>
    d224:	50c0042e 	bgeu	r10,r3,d238 <__ledf2+0xec>
    d228:	283fe81e 	bne	r5,zero,d1cc <__alt_data_end+0xff00d1cc>
    d22c:	003ff806 	br	d210 <__alt_data_end+0xff00d210>
    d230:	313fee36 	bltu	r6,r4,d1ec <__alt_data_end+0xff00d1ec>
    d234:	21bffc36 	bltu	r4,r6,d228 <__alt_data_end+0xff00d228>
    d238:	0005883a 	mov	r2,zero
    d23c:	f800283a 	ret

0000d240 <__muldf3>:
    d240:	defff304 	addi	sp,sp,-52
    d244:	2804d53a 	srli	r2,r5,20
    d248:	dd800915 	stw	r22,36(sp)
    d24c:	282cd7fa 	srli	r22,r5,31
    d250:	dc000315 	stw	r16,12(sp)
    d254:	04000434 	movhi	r16,16
    d258:	dd400815 	stw	r21,32(sp)
    d25c:	dc800515 	stw	r18,20(sp)
    d260:	843fffc4 	addi	r16,r16,-1
    d264:	dfc00c15 	stw	ra,48(sp)
    d268:	df000b15 	stw	fp,44(sp)
    d26c:	ddc00a15 	stw	r23,40(sp)
    d270:	dd000715 	stw	r20,28(sp)
    d274:	dcc00615 	stw	r19,24(sp)
    d278:	dc400415 	stw	r17,16(sp)
    d27c:	1481ffcc 	andi	r18,r2,2047
    d280:	2c20703a 	and	r16,r5,r16
    d284:	b02b883a 	mov	r21,r22
    d288:	b2403fcc 	andi	r9,r22,255
    d28c:	90006026 	beq	r18,zero,d410 <__muldf3+0x1d0>
    d290:	0081ffc4 	movi	r2,2047
    d294:	2029883a 	mov	r20,r4
    d298:	90803626 	beq	r18,r2,d374 <__muldf3+0x134>
    d29c:	80800434 	orhi	r2,r16,16
    d2a0:	100490fa 	slli	r2,r2,3
    d2a4:	2020d77a 	srli	r16,r4,29
    d2a8:	202890fa 	slli	r20,r4,3
    d2ac:	94bf0044 	addi	r18,r18,-1023
    d2b0:	80a0b03a 	or	r16,r16,r2
    d2b4:	0027883a 	mov	r19,zero
    d2b8:	0039883a 	mov	fp,zero
    d2bc:	3804d53a 	srli	r2,r7,20
    d2c0:	382ed7fa 	srli	r23,r7,31
    d2c4:	04400434 	movhi	r17,16
    d2c8:	8c7fffc4 	addi	r17,r17,-1
    d2cc:	1081ffcc 	andi	r2,r2,2047
    d2d0:	3011883a 	mov	r8,r6
    d2d4:	3c62703a 	and	r17,r7,r17
    d2d8:	ba803fcc 	andi	r10,r23,255
    d2dc:	10006d26 	beq	r2,zero,d494 <__muldf3+0x254>
    d2e0:	00c1ffc4 	movi	r3,2047
    d2e4:	10c06526 	beq	r2,r3,d47c <__muldf3+0x23c>
    d2e8:	88c00434 	orhi	r3,r17,16
    d2ec:	180690fa 	slli	r3,r3,3
    d2f0:	3022d77a 	srli	r17,r6,29
    d2f4:	301090fa 	slli	r8,r6,3
    d2f8:	10bf0044 	addi	r2,r2,-1023
    d2fc:	88e2b03a 	or	r17,r17,r3
    d300:	000b883a 	mov	r5,zero
    d304:	9085883a 	add	r2,r18,r2
    d308:	2cc8b03a 	or	r4,r5,r19
    d30c:	00c003c4 	movi	r3,15
    d310:	bdacf03a 	xor	r22,r23,r22
    d314:	12c00044 	addi	r11,r2,1
    d318:	19009936 	bltu	r3,r4,d580 <__muldf3+0x340>
    d31c:	200890ba 	slli	r4,r4,2
    d320:	00c00074 	movhi	r3,1
    d324:	18f4cd04 	addi	r3,r3,-11468
    d328:	20c9883a 	add	r4,r4,r3
    d32c:	20c00017 	ldw	r3,0(r4)
    d330:	1800683a 	jmp	r3
    d334:	0000d580 	call	d58 <init_LCD+0x2b4>
    d338:	0000d394 	movui	zero,846
    d33c:	0000d394 	movui	zero,846
    d340:	0000d390 	cmplti	zero,zero,846
    d344:	0000d55c 	xori	zero,zero,853
    d348:	0000d55c 	xori	zero,zero,853
    d34c:	0000d544 	movi	zero,853
    d350:	0000d390 	cmplti	zero,zero,846
    d354:	0000d55c 	xori	zero,zero,853
    d358:	0000d544 	movi	zero,853
    d35c:	0000d55c 	xori	zero,zero,853
    d360:	0000d390 	cmplti	zero,zero,846
    d364:	0000d56c 	andhi	zero,zero,853
    d368:	0000d56c 	andhi	zero,zero,853
    d36c:	0000d56c 	andhi	zero,zero,853
    d370:	0000d788 	cmpgei	zero,zero,862
    d374:	2404b03a 	or	r2,r4,r16
    d378:	10006f1e 	bne	r2,zero,d538 <__muldf3+0x2f8>
    d37c:	04c00204 	movi	r19,8
    d380:	0021883a 	mov	r16,zero
    d384:	0029883a 	mov	r20,zero
    d388:	07000084 	movi	fp,2
    d38c:	003fcb06 	br	d2bc <__alt_data_end+0xff00d2bc>
    d390:	502d883a 	mov	r22,r10
    d394:	00800084 	movi	r2,2
    d398:	28805726 	beq	r5,r2,d4f8 <__muldf3+0x2b8>
    d39c:	008000c4 	movi	r2,3
    d3a0:	28816626 	beq	r5,r2,d93c <__muldf3+0x6fc>
    d3a4:	00800044 	movi	r2,1
    d3a8:	2881411e 	bne	r5,r2,d8b0 <__muldf3+0x670>
    d3ac:	b02b883a 	mov	r21,r22
    d3b0:	0005883a 	mov	r2,zero
    d3b4:	000b883a 	mov	r5,zero
    d3b8:	0029883a 	mov	r20,zero
    d3bc:	1004953a 	slli	r2,r2,20
    d3c0:	a8c03fcc 	andi	r3,r21,255
    d3c4:	04400434 	movhi	r17,16
    d3c8:	8c7fffc4 	addi	r17,r17,-1
    d3cc:	180697fa 	slli	r3,r3,31
    d3d0:	2c4a703a 	and	r5,r5,r17
    d3d4:	288ab03a 	or	r5,r5,r2
    d3d8:	28c6b03a 	or	r3,r5,r3
    d3dc:	a005883a 	mov	r2,r20
    d3e0:	dfc00c17 	ldw	ra,48(sp)
    d3e4:	df000b17 	ldw	fp,44(sp)
    d3e8:	ddc00a17 	ldw	r23,40(sp)
    d3ec:	dd800917 	ldw	r22,36(sp)
    d3f0:	dd400817 	ldw	r21,32(sp)
    d3f4:	dd000717 	ldw	r20,28(sp)
    d3f8:	dcc00617 	ldw	r19,24(sp)
    d3fc:	dc800517 	ldw	r18,20(sp)
    d400:	dc400417 	ldw	r17,16(sp)
    d404:	dc000317 	ldw	r16,12(sp)
    d408:	dec00d04 	addi	sp,sp,52
    d40c:	f800283a 	ret
    d410:	2404b03a 	or	r2,r4,r16
    d414:	2027883a 	mov	r19,r4
    d418:	10004226 	beq	r2,zero,d524 <__muldf3+0x2e4>
    d41c:	8000fc26 	beq	r16,zero,d810 <__muldf3+0x5d0>
    d420:	8009883a 	mov	r4,r16
    d424:	d9800215 	stw	r6,8(sp)
    d428:	d9c00015 	stw	r7,0(sp)
    d42c:	da400115 	stw	r9,4(sp)
    d430:	000e4580 	call	e458 <__clzsi2>
    d434:	d9800217 	ldw	r6,8(sp)
    d438:	d9c00017 	ldw	r7,0(sp)
    d43c:	da400117 	ldw	r9,4(sp)
    d440:	113ffd44 	addi	r4,r2,-11
    d444:	00c00704 	movi	r3,28
    d448:	1900ed16 	blt	r3,r4,d800 <__muldf3+0x5c0>
    d44c:	00c00744 	movi	r3,29
    d450:	147ffe04 	addi	r17,r2,-8
    d454:	1907c83a 	sub	r3,r3,r4
    d458:	8460983a 	sll	r16,r16,r17
    d45c:	98c6d83a 	srl	r3,r19,r3
    d460:	9c68983a 	sll	r20,r19,r17
    d464:	1c20b03a 	or	r16,r3,r16
    d468:	1080fcc4 	addi	r2,r2,1011
    d46c:	00a5c83a 	sub	r18,zero,r2
    d470:	0027883a 	mov	r19,zero
    d474:	0039883a 	mov	fp,zero
    d478:	003f9006 	br	d2bc <__alt_data_end+0xff00d2bc>
    d47c:	3446b03a 	or	r3,r6,r17
    d480:	1800261e 	bne	r3,zero,d51c <__muldf3+0x2dc>
    d484:	0023883a 	mov	r17,zero
    d488:	0011883a 	mov	r8,zero
    d48c:	01400084 	movi	r5,2
    d490:	003f9c06 	br	d304 <__alt_data_end+0xff00d304>
    d494:	3446b03a 	or	r3,r6,r17
    d498:	18001c26 	beq	r3,zero,d50c <__muldf3+0x2cc>
    d49c:	8800ce26 	beq	r17,zero,d7d8 <__muldf3+0x598>
    d4a0:	8809883a 	mov	r4,r17
    d4a4:	d9800215 	stw	r6,8(sp)
    d4a8:	da400115 	stw	r9,4(sp)
    d4ac:	da800015 	stw	r10,0(sp)
    d4b0:	000e4580 	call	e458 <__clzsi2>
    d4b4:	d9800217 	ldw	r6,8(sp)
    d4b8:	da400117 	ldw	r9,4(sp)
    d4bc:	da800017 	ldw	r10,0(sp)
    d4c0:	113ffd44 	addi	r4,r2,-11
    d4c4:	00c00704 	movi	r3,28
    d4c8:	1900bf16 	blt	r3,r4,d7c8 <__muldf3+0x588>
    d4cc:	00c00744 	movi	r3,29
    d4d0:	123ffe04 	addi	r8,r2,-8
    d4d4:	1907c83a 	sub	r3,r3,r4
    d4d8:	8a22983a 	sll	r17,r17,r8
    d4dc:	30c6d83a 	srl	r3,r6,r3
    d4e0:	3210983a 	sll	r8,r6,r8
    d4e4:	1c62b03a 	or	r17,r3,r17
    d4e8:	1080fcc4 	addi	r2,r2,1011
    d4ec:	0085c83a 	sub	r2,zero,r2
    d4f0:	000b883a 	mov	r5,zero
    d4f4:	003f8306 	br	d304 <__alt_data_end+0xff00d304>
    d4f8:	b02b883a 	mov	r21,r22
    d4fc:	0081ffc4 	movi	r2,2047
    d500:	000b883a 	mov	r5,zero
    d504:	0029883a 	mov	r20,zero
    d508:	003fac06 	br	d3bc <__alt_data_end+0xff00d3bc>
    d50c:	0023883a 	mov	r17,zero
    d510:	0011883a 	mov	r8,zero
    d514:	01400044 	movi	r5,1
    d518:	003f7a06 	br	d304 <__alt_data_end+0xff00d304>
    d51c:	014000c4 	movi	r5,3
    d520:	003f7806 	br	d304 <__alt_data_end+0xff00d304>
    d524:	04c00104 	movi	r19,4
    d528:	0021883a 	mov	r16,zero
    d52c:	0029883a 	mov	r20,zero
    d530:	07000044 	movi	fp,1
    d534:	003f6106 	br	d2bc <__alt_data_end+0xff00d2bc>
    d538:	04c00304 	movi	r19,12
    d53c:	070000c4 	movi	fp,3
    d540:	003f5e06 	br	d2bc <__alt_data_end+0xff00d2bc>
    d544:	01400434 	movhi	r5,16
    d548:	002b883a 	mov	r21,zero
    d54c:	297fffc4 	addi	r5,r5,-1
    d550:	053fffc4 	movi	r20,-1
    d554:	0081ffc4 	movi	r2,2047
    d558:	003f9806 	br	d3bc <__alt_data_end+0xff00d3bc>
    d55c:	8023883a 	mov	r17,r16
    d560:	a011883a 	mov	r8,r20
    d564:	e00b883a 	mov	r5,fp
    d568:	003f8a06 	br	d394 <__alt_data_end+0xff00d394>
    d56c:	8023883a 	mov	r17,r16
    d570:	a011883a 	mov	r8,r20
    d574:	482d883a 	mov	r22,r9
    d578:	e00b883a 	mov	r5,fp
    d57c:	003f8506 	br	d394 <__alt_data_end+0xff00d394>
    d580:	a00ad43a 	srli	r5,r20,16
    d584:	401ad43a 	srli	r13,r8,16
    d588:	a53fffcc 	andi	r20,r20,65535
    d58c:	423fffcc 	andi	r8,r8,65535
    d590:	4519383a 	mul	r12,r8,r20
    d594:	4147383a 	mul	r3,r8,r5
    d598:	6d09383a 	mul	r4,r13,r20
    d59c:	600cd43a 	srli	r6,r12,16
    d5a0:	2b5d383a 	mul	r14,r5,r13
    d5a4:	20c9883a 	add	r4,r4,r3
    d5a8:	310d883a 	add	r6,r6,r4
    d5ac:	30c0022e 	bgeu	r6,r3,d5b8 <__muldf3+0x378>
    d5b0:	00c00074 	movhi	r3,1
    d5b4:	70dd883a 	add	r14,r14,r3
    d5b8:	8826d43a 	srli	r19,r17,16
    d5bc:	8bffffcc 	andi	r15,r17,65535
    d5c0:	7d23383a 	mul	r17,r15,r20
    d5c4:	7949383a 	mul	r4,r15,r5
    d5c8:	9d29383a 	mul	r20,r19,r20
    d5cc:	8814d43a 	srli	r10,r17,16
    d5d0:	3012943a 	slli	r9,r6,16
    d5d4:	a129883a 	add	r20,r20,r4
    d5d8:	633fffcc 	andi	r12,r12,65535
    d5dc:	5515883a 	add	r10,r10,r20
    d5e0:	3006d43a 	srli	r3,r6,16
    d5e4:	4b13883a 	add	r9,r9,r12
    d5e8:	2ccb383a 	mul	r5,r5,r19
    d5ec:	5100022e 	bgeu	r10,r4,d5f8 <__muldf3+0x3b8>
    d5f0:	01000074 	movhi	r4,1
    d5f4:	290b883a 	add	r5,r5,r4
    d5f8:	802ad43a 	srli	r21,r16,16
    d5fc:	843fffcc 	andi	r16,r16,65535
    d600:	440d383a 	mul	r6,r8,r16
    d604:	4565383a 	mul	r18,r8,r21
    d608:	8349383a 	mul	r4,r16,r13
    d60c:	500e943a 	slli	r7,r10,16
    d610:	3010d43a 	srli	r8,r6,16
    d614:	5028d43a 	srli	r20,r10,16
    d618:	2489883a 	add	r4,r4,r18
    d61c:	8abfffcc 	andi	r10,r17,65535
    d620:	3a95883a 	add	r10,r7,r10
    d624:	4119883a 	add	r12,r8,r4
    d628:	a169883a 	add	r20,r20,r5
    d62c:	1a87883a 	add	r3,r3,r10
    d630:	6d5b383a 	mul	r13,r13,r21
    d634:	6480022e 	bgeu	r12,r18,d640 <__muldf3+0x400>
    d638:	01000074 	movhi	r4,1
    d63c:	691b883a 	add	r13,r13,r4
    d640:	7c25383a 	mul	r18,r15,r16
    d644:	7d4b383a 	mul	r5,r15,r21
    d648:	84cf383a 	mul	r7,r16,r19
    d64c:	901ed43a 	srli	r15,r18,16
    d650:	6008d43a 	srli	r4,r12,16
    d654:	6010943a 	slli	r8,r12,16
    d658:	394f883a 	add	r7,r7,r5
    d65c:	333fffcc 	andi	r12,r6,65535
    d660:	79df883a 	add	r15,r15,r7
    d664:	235b883a 	add	r13,r4,r13
    d668:	9d63383a 	mul	r17,r19,r21
    d66c:	4309883a 	add	r4,r8,r12
    d670:	7940022e 	bgeu	r15,r5,d67c <__muldf3+0x43c>
    d674:	01400074 	movhi	r5,1
    d678:	8963883a 	add	r17,r17,r5
    d67c:	780a943a 	slli	r5,r15,16
    d680:	91bfffcc 	andi	r6,r18,65535
    d684:	70c7883a 	add	r3,r14,r3
    d688:	298d883a 	add	r6,r5,r6
    d68c:	1a8f803a 	cmpltu	r7,r3,r10
    d690:	350b883a 	add	r5,r6,r20
    d694:	20c7883a 	add	r3,r4,r3
    d698:	3955883a 	add	r10,r7,r5
    d69c:	1909803a 	cmpltu	r4,r3,r4
    d6a0:	6a91883a 	add	r8,r13,r10
    d6a4:	780cd43a 	srli	r6,r15,16
    d6a8:	2219883a 	add	r12,r4,r8
    d6ac:	2d0b803a 	cmpltu	r5,r5,r20
    d6b0:	51cf803a 	cmpltu	r7,r10,r7
    d6b4:	29ceb03a 	or	r7,r5,r7
    d6b8:	4351803a 	cmpltu	r8,r8,r13
    d6bc:	610b803a 	cmpltu	r5,r12,r4
    d6c0:	4148b03a 	or	r4,r8,r5
    d6c4:	398f883a 	add	r7,r7,r6
    d6c8:	3909883a 	add	r4,r7,r4
    d6cc:	1810927a 	slli	r8,r3,9
    d6d0:	2449883a 	add	r4,r4,r17
    d6d4:	2008927a 	slli	r4,r4,9
    d6d8:	6022d5fa 	srli	r17,r12,23
    d6dc:	1806d5fa 	srli	r3,r3,23
    d6e0:	4252b03a 	or	r9,r8,r9
    d6e4:	600a927a 	slli	r5,r12,9
    d6e8:	4810c03a 	cmpne	r8,r9,zero
    d6ec:	2462b03a 	or	r17,r4,r17
    d6f0:	40c6b03a 	or	r3,r8,r3
    d6f4:	8900402c 	andhi	r4,r17,256
    d6f8:	1950b03a 	or	r8,r3,r5
    d6fc:	20000726 	beq	r4,zero,d71c <__muldf3+0x4dc>
    d700:	4006d07a 	srli	r3,r8,1
    d704:	880497fa 	slli	r2,r17,31
    d708:	4200004c 	andi	r8,r8,1
    d70c:	8822d07a 	srli	r17,r17,1
    d710:	1a10b03a 	or	r8,r3,r8
    d714:	1210b03a 	or	r8,r2,r8
    d718:	5805883a 	mov	r2,r11
    d71c:	1140ffc4 	addi	r5,r2,1023
    d720:	0140440e 	bge	zero,r5,d834 <__muldf3+0x5f4>
    d724:	40c001cc 	andi	r3,r8,7
    d728:	18000726 	beq	r3,zero,d748 <__muldf3+0x508>
    d72c:	40c003cc 	andi	r3,r8,15
    d730:	01000104 	movi	r4,4
    d734:	19000426 	beq	r3,r4,d748 <__muldf3+0x508>
    d738:	4107883a 	add	r3,r8,r4
    d73c:	1a11803a 	cmpltu	r8,r3,r8
    d740:	8a23883a 	add	r17,r17,r8
    d744:	1811883a 	mov	r8,r3
    d748:	88c0402c 	andhi	r3,r17,256
    d74c:	18000426 	beq	r3,zero,d760 <__muldf3+0x520>
    d750:	11410004 	addi	r5,r2,1024
    d754:	00bfc034 	movhi	r2,65280
    d758:	10bfffc4 	addi	r2,r2,-1
    d75c:	88a2703a 	and	r17,r17,r2
    d760:	0081ff84 	movi	r2,2046
    d764:	117f6416 	blt	r2,r5,d4f8 <__alt_data_end+0xff00d4f8>
    d768:	8828977a 	slli	r20,r17,29
    d76c:	4010d0fa 	srli	r8,r8,3
    d770:	8822927a 	slli	r17,r17,9
    d774:	2881ffcc 	andi	r2,r5,2047
    d778:	a228b03a 	or	r20,r20,r8
    d77c:	880ad33a 	srli	r5,r17,12
    d780:	b02b883a 	mov	r21,r22
    d784:	003f0d06 	br	d3bc <__alt_data_end+0xff00d3bc>
    d788:	8080022c 	andhi	r2,r16,8
    d78c:	10000926 	beq	r2,zero,d7b4 <__muldf3+0x574>
    d790:	8880022c 	andhi	r2,r17,8
    d794:	1000071e 	bne	r2,zero,d7b4 <__muldf3+0x574>
    d798:	00800434 	movhi	r2,16
    d79c:	89400234 	orhi	r5,r17,8
    d7a0:	10bfffc4 	addi	r2,r2,-1
    d7a4:	b82b883a 	mov	r21,r23
    d7a8:	288a703a 	and	r5,r5,r2
    d7ac:	4029883a 	mov	r20,r8
    d7b0:	003f6806 	br	d554 <__alt_data_end+0xff00d554>
    d7b4:	00800434 	movhi	r2,16
    d7b8:	81400234 	orhi	r5,r16,8
    d7bc:	10bfffc4 	addi	r2,r2,-1
    d7c0:	288a703a 	and	r5,r5,r2
    d7c4:	003f6306 	br	d554 <__alt_data_end+0xff00d554>
    d7c8:	147ff604 	addi	r17,r2,-40
    d7cc:	3462983a 	sll	r17,r6,r17
    d7d0:	0011883a 	mov	r8,zero
    d7d4:	003f4406 	br	d4e8 <__alt_data_end+0xff00d4e8>
    d7d8:	3009883a 	mov	r4,r6
    d7dc:	d9800215 	stw	r6,8(sp)
    d7e0:	da400115 	stw	r9,4(sp)
    d7e4:	da800015 	stw	r10,0(sp)
    d7e8:	000e4580 	call	e458 <__clzsi2>
    d7ec:	10800804 	addi	r2,r2,32
    d7f0:	da800017 	ldw	r10,0(sp)
    d7f4:	da400117 	ldw	r9,4(sp)
    d7f8:	d9800217 	ldw	r6,8(sp)
    d7fc:	003f3006 	br	d4c0 <__alt_data_end+0xff00d4c0>
    d800:	143ff604 	addi	r16,r2,-40
    d804:	9c20983a 	sll	r16,r19,r16
    d808:	0029883a 	mov	r20,zero
    d80c:	003f1606 	br	d468 <__alt_data_end+0xff00d468>
    d810:	d9800215 	stw	r6,8(sp)
    d814:	d9c00015 	stw	r7,0(sp)
    d818:	da400115 	stw	r9,4(sp)
    d81c:	000e4580 	call	e458 <__clzsi2>
    d820:	10800804 	addi	r2,r2,32
    d824:	da400117 	ldw	r9,4(sp)
    d828:	d9c00017 	ldw	r7,0(sp)
    d82c:	d9800217 	ldw	r6,8(sp)
    d830:	003f0306 	br	d440 <__alt_data_end+0xff00d440>
    d834:	00c00044 	movi	r3,1
    d838:	1947c83a 	sub	r3,r3,r5
    d83c:	00800e04 	movi	r2,56
    d840:	10feda16 	blt	r2,r3,d3ac <__alt_data_end+0xff00d3ac>
    d844:	008007c4 	movi	r2,31
    d848:	10c01b16 	blt	r2,r3,d8b8 <__muldf3+0x678>
    d84c:	00800804 	movi	r2,32
    d850:	10c5c83a 	sub	r2,r2,r3
    d854:	888a983a 	sll	r5,r17,r2
    d858:	40c8d83a 	srl	r4,r8,r3
    d85c:	4084983a 	sll	r2,r8,r2
    d860:	88e2d83a 	srl	r17,r17,r3
    d864:	2906b03a 	or	r3,r5,r4
    d868:	1004c03a 	cmpne	r2,r2,zero
    d86c:	1886b03a 	or	r3,r3,r2
    d870:	188001cc 	andi	r2,r3,7
    d874:	10000726 	beq	r2,zero,d894 <__muldf3+0x654>
    d878:	188003cc 	andi	r2,r3,15
    d87c:	01000104 	movi	r4,4
    d880:	11000426 	beq	r2,r4,d894 <__muldf3+0x654>
    d884:	1805883a 	mov	r2,r3
    d888:	10c00104 	addi	r3,r2,4
    d88c:	1885803a 	cmpltu	r2,r3,r2
    d890:	88a3883a 	add	r17,r17,r2
    d894:	8880202c 	andhi	r2,r17,128
    d898:	10001c26 	beq	r2,zero,d90c <__muldf3+0x6cc>
    d89c:	b02b883a 	mov	r21,r22
    d8a0:	00800044 	movi	r2,1
    d8a4:	000b883a 	mov	r5,zero
    d8a8:	0029883a 	mov	r20,zero
    d8ac:	003ec306 	br	d3bc <__alt_data_end+0xff00d3bc>
    d8b0:	5805883a 	mov	r2,r11
    d8b4:	003f9906 	br	d71c <__alt_data_end+0xff00d71c>
    d8b8:	00bff844 	movi	r2,-31
    d8bc:	1145c83a 	sub	r2,r2,r5
    d8c0:	8888d83a 	srl	r4,r17,r2
    d8c4:	00800804 	movi	r2,32
    d8c8:	18801a26 	beq	r3,r2,d934 <__muldf3+0x6f4>
    d8cc:	00801004 	movi	r2,64
    d8d0:	10c5c83a 	sub	r2,r2,r3
    d8d4:	8884983a 	sll	r2,r17,r2
    d8d8:	1204b03a 	or	r2,r2,r8
    d8dc:	1004c03a 	cmpne	r2,r2,zero
    d8e0:	2084b03a 	or	r2,r4,r2
    d8e4:	144001cc 	andi	r17,r2,7
    d8e8:	88000d1e 	bne	r17,zero,d920 <__muldf3+0x6e0>
    d8ec:	000b883a 	mov	r5,zero
    d8f0:	1028d0fa 	srli	r20,r2,3
    d8f4:	b02b883a 	mov	r21,r22
    d8f8:	0005883a 	mov	r2,zero
    d8fc:	a468b03a 	or	r20,r20,r17
    d900:	003eae06 	br	d3bc <__alt_data_end+0xff00d3bc>
    d904:	1007883a 	mov	r3,r2
    d908:	0023883a 	mov	r17,zero
    d90c:	880a927a 	slli	r5,r17,9
    d910:	1805883a 	mov	r2,r3
    d914:	8822977a 	slli	r17,r17,29
    d918:	280ad33a 	srli	r5,r5,12
    d91c:	003ff406 	br	d8f0 <__alt_data_end+0xff00d8f0>
    d920:	10c003cc 	andi	r3,r2,15
    d924:	01000104 	movi	r4,4
    d928:	193ff626 	beq	r3,r4,d904 <__alt_data_end+0xff00d904>
    d92c:	0023883a 	mov	r17,zero
    d930:	003fd506 	br	d888 <__alt_data_end+0xff00d888>
    d934:	0005883a 	mov	r2,zero
    d938:	003fe706 	br	d8d8 <__alt_data_end+0xff00d8d8>
    d93c:	00800434 	movhi	r2,16
    d940:	89400234 	orhi	r5,r17,8
    d944:	10bfffc4 	addi	r2,r2,-1
    d948:	b02b883a 	mov	r21,r22
    d94c:	288a703a 	and	r5,r5,r2
    d950:	4029883a 	mov	r20,r8
    d954:	003eff06 	br	d554 <__alt_data_end+0xff00d554>

0000d958 <__subdf3>:
    d958:	02000434 	movhi	r8,16
    d95c:	423fffc4 	addi	r8,r8,-1
    d960:	defffb04 	addi	sp,sp,-20
    d964:	2a14703a 	and	r10,r5,r8
    d968:	3812d53a 	srli	r9,r7,20
    d96c:	3a10703a 	and	r8,r7,r8
    d970:	2006d77a 	srli	r3,r4,29
    d974:	3004d77a 	srli	r2,r6,29
    d978:	dc000015 	stw	r16,0(sp)
    d97c:	501490fa 	slli	r10,r10,3
    d980:	2820d53a 	srli	r16,r5,20
    d984:	401090fa 	slli	r8,r8,3
    d988:	dc800215 	stw	r18,8(sp)
    d98c:	dc400115 	stw	r17,4(sp)
    d990:	dfc00415 	stw	ra,16(sp)
    d994:	202290fa 	slli	r17,r4,3
    d998:	dcc00315 	stw	r19,12(sp)
    d99c:	4a41ffcc 	andi	r9,r9,2047
    d9a0:	0101ffc4 	movi	r4,2047
    d9a4:	2824d7fa 	srli	r18,r5,31
    d9a8:	8401ffcc 	andi	r16,r16,2047
    d9ac:	50c6b03a 	or	r3,r10,r3
    d9b0:	380ed7fa 	srli	r7,r7,31
    d9b4:	408ab03a 	or	r5,r8,r2
    d9b8:	300c90fa 	slli	r6,r6,3
    d9bc:	49009626 	beq	r9,r4,dc18 <__subdf3+0x2c0>
    d9c0:	39c0005c 	xori	r7,r7,1
    d9c4:	8245c83a 	sub	r2,r16,r9
    d9c8:	3c807426 	beq	r7,r18,db9c <__subdf3+0x244>
    d9cc:	0080af0e 	bge	zero,r2,dc8c <__subdf3+0x334>
    d9d0:	48002a1e 	bne	r9,zero,da7c <__subdf3+0x124>
    d9d4:	2988b03a 	or	r4,r5,r6
    d9d8:	20009a1e 	bne	r4,zero,dc44 <__subdf3+0x2ec>
    d9dc:	888001cc 	andi	r2,r17,7
    d9e0:	10000726 	beq	r2,zero,da00 <__subdf3+0xa8>
    d9e4:	888003cc 	andi	r2,r17,15
    d9e8:	01000104 	movi	r4,4
    d9ec:	11000426 	beq	r2,r4,da00 <__subdf3+0xa8>
    d9f0:	890b883a 	add	r5,r17,r4
    d9f4:	2c63803a 	cmpltu	r17,r5,r17
    d9f8:	1c47883a 	add	r3,r3,r17
    d9fc:	2823883a 	mov	r17,r5
    da00:	1880202c 	andhi	r2,r3,128
    da04:	10005926 	beq	r2,zero,db6c <__subdf3+0x214>
    da08:	84000044 	addi	r16,r16,1
    da0c:	0081ffc4 	movi	r2,2047
    da10:	8080be26 	beq	r16,r2,dd0c <__subdf3+0x3b4>
    da14:	017fe034 	movhi	r5,65408
    da18:	297fffc4 	addi	r5,r5,-1
    da1c:	1946703a 	and	r3,r3,r5
    da20:	1804977a 	slli	r2,r3,29
    da24:	1806927a 	slli	r3,r3,9
    da28:	8822d0fa 	srli	r17,r17,3
    da2c:	8401ffcc 	andi	r16,r16,2047
    da30:	180ad33a 	srli	r5,r3,12
    da34:	9100004c 	andi	r4,r18,1
    da38:	1444b03a 	or	r2,r2,r17
    da3c:	80c1ffcc 	andi	r3,r16,2047
    da40:	1820953a 	slli	r16,r3,20
    da44:	20c03fcc 	andi	r3,r4,255
    da48:	180897fa 	slli	r4,r3,31
    da4c:	00c00434 	movhi	r3,16
    da50:	18ffffc4 	addi	r3,r3,-1
    da54:	28c6703a 	and	r3,r5,r3
    da58:	1c06b03a 	or	r3,r3,r16
    da5c:	1906b03a 	or	r3,r3,r4
    da60:	dfc00417 	ldw	ra,16(sp)
    da64:	dcc00317 	ldw	r19,12(sp)
    da68:	dc800217 	ldw	r18,8(sp)
    da6c:	dc400117 	ldw	r17,4(sp)
    da70:	dc000017 	ldw	r16,0(sp)
    da74:	dec00504 	addi	sp,sp,20
    da78:	f800283a 	ret
    da7c:	0101ffc4 	movi	r4,2047
    da80:	813fd626 	beq	r16,r4,d9dc <__alt_data_end+0xff00d9dc>
    da84:	29402034 	orhi	r5,r5,128
    da88:	01000e04 	movi	r4,56
    da8c:	2080a316 	blt	r4,r2,dd1c <__subdf3+0x3c4>
    da90:	010007c4 	movi	r4,31
    da94:	2080c616 	blt	r4,r2,ddb0 <__subdf3+0x458>
    da98:	01000804 	movi	r4,32
    da9c:	2089c83a 	sub	r4,r4,r2
    daa0:	2910983a 	sll	r8,r5,r4
    daa4:	308ed83a 	srl	r7,r6,r2
    daa8:	3108983a 	sll	r4,r6,r4
    daac:	2884d83a 	srl	r2,r5,r2
    dab0:	41ccb03a 	or	r6,r8,r7
    dab4:	2008c03a 	cmpne	r4,r4,zero
    dab8:	310cb03a 	or	r6,r6,r4
    dabc:	898dc83a 	sub	r6,r17,r6
    dac0:	89a3803a 	cmpltu	r17,r17,r6
    dac4:	1887c83a 	sub	r3,r3,r2
    dac8:	1c47c83a 	sub	r3,r3,r17
    dacc:	3023883a 	mov	r17,r6
    dad0:	1880202c 	andhi	r2,r3,128
    dad4:	10002326 	beq	r2,zero,db64 <__subdf3+0x20c>
    dad8:	04c02034 	movhi	r19,128
    dadc:	9cffffc4 	addi	r19,r19,-1
    dae0:	1ce6703a 	and	r19,r3,r19
    dae4:	98007a26 	beq	r19,zero,dcd0 <__subdf3+0x378>
    dae8:	9809883a 	mov	r4,r19
    daec:	000e4580 	call	e458 <__clzsi2>
    daf0:	113ffe04 	addi	r4,r2,-8
    daf4:	00c007c4 	movi	r3,31
    daf8:	19007b16 	blt	r3,r4,dce8 <__subdf3+0x390>
    dafc:	00800804 	movi	r2,32
    db00:	1105c83a 	sub	r2,r2,r4
    db04:	8884d83a 	srl	r2,r17,r2
    db08:	9906983a 	sll	r3,r19,r4
    db0c:	8922983a 	sll	r17,r17,r4
    db10:	10c4b03a 	or	r2,r2,r3
    db14:	24007816 	blt	r4,r16,dcf8 <__subdf3+0x3a0>
    db18:	2421c83a 	sub	r16,r4,r16
    db1c:	80c00044 	addi	r3,r16,1
    db20:	010007c4 	movi	r4,31
    db24:	20c09516 	blt	r4,r3,dd7c <__subdf3+0x424>
    db28:	01400804 	movi	r5,32
    db2c:	28cbc83a 	sub	r5,r5,r3
    db30:	88c8d83a 	srl	r4,r17,r3
    db34:	8962983a 	sll	r17,r17,r5
    db38:	114a983a 	sll	r5,r2,r5
    db3c:	10c6d83a 	srl	r3,r2,r3
    db40:	8804c03a 	cmpne	r2,r17,zero
    db44:	290ab03a 	or	r5,r5,r4
    db48:	28a2b03a 	or	r17,r5,r2
    db4c:	0021883a 	mov	r16,zero
    db50:	003fa206 	br	d9dc <__alt_data_end+0xff00d9dc>
    db54:	2090b03a 	or	r8,r4,r2
    db58:	40018e26 	beq	r8,zero,e194 <__subdf3+0x83c>
    db5c:	1007883a 	mov	r3,r2
    db60:	2023883a 	mov	r17,r4
    db64:	888001cc 	andi	r2,r17,7
    db68:	103f9e1e 	bne	r2,zero,d9e4 <__alt_data_end+0xff00d9e4>
    db6c:	1804977a 	slli	r2,r3,29
    db70:	8822d0fa 	srli	r17,r17,3
    db74:	1810d0fa 	srli	r8,r3,3
    db78:	9100004c 	andi	r4,r18,1
    db7c:	1444b03a 	or	r2,r2,r17
    db80:	00c1ffc4 	movi	r3,2047
    db84:	80c02826 	beq	r16,r3,dc28 <__subdf3+0x2d0>
    db88:	01400434 	movhi	r5,16
    db8c:	297fffc4 	addi	r5,r5,-1
    db90:	80e0703a 	and	r16,r16,r3
    db94:	414a703a 	and	r5,r8,r5
    db98:	003fa806 	br	da3c <__alt_data_end+0xff00da3c>
    db9c:	0080630e 	bge	zero,r2,dd2c <__subdf3+0x3d4>
    dba0:	48003026 	beq	r9,zero,dc64 <__subdf3+0x30c>
    dba4:	0101ffc4 	movi	r4,2047
    dba8:	813f8c26 	beq	r16,r4,d9dc <__alt_data_end+0xff00d9dc>
    dbac:	29402034 	orhi	r5,r5,128
    dbb0:	01000e04 	movi	r4,56
    dbb4:	2080a90e 	bge	r4,r2,de5c <__subdf3+0x504>
    dbb8:	298cb03a 	or	r6,r5,r6
    dbbc:	3012c03a 	cmpne	r9,r6,zero
    dbc0:	0005883a 	mov	r2,zero
    dbc4:	4c53883a 	add	r9,r9,r17
    dbc8:	4c63803a 	cmpltu	r17,r9,r17
    dbcc:	10c7883a 	add	r3,r2,r3
    dbd0:	88c7883a 	add	r3,r17,r3
    dbd4:	4823883a 	mov	r17,r9
    dbd8:	1880202c 	andhi	r2,r3,128
    dbdc:	1000d026 	beq	r2,zero,df20 <__subdf3+0x5c8>
    dbe0:	84000044 	addi	r16,r16,1
    dbe4:	0081ffc4 	movi	r2,2047
    dbe8:	8080fe26 	beq	r16,r2,dfe4 <__subdf3+0x68c>
    dbec:	00bfe034 	movhi	r2,65408
    dbf0:	10bfffc4 	addi	r2,r2,-1
    dbf4:	1886703a 	and	r3,r3,r2
    dbf8:	880ad07a 	srli	r5,r17,1
    dbfc:	180497fa 	slli	r2,r3,31
    dc00:	8900004c 	andi	r4,r17,1
    dc04:	2922b03a 	or	r17,r5,r4
    dc08:	1806d07a 	srli	r3,r3,1
    dc0c:	1462b03a 	or	r17,r2,r17
    dc10:	3825883a 	mov	r18,r7
    dc14:	003f7106 	br	d9dc <__alt_data_end+0xff00d9dc>
    dc18:	2984b03a 	or	r2,r5,r6
    dc1c:	103f6826 	beq	r2,zero,d9c0 <__alt_data_end+0xff00d9c0>
    dc20:	39c03fcc 	andi	r7,r7,255
    dc24:	003f6706 	br	d9c4 <__alt_data_end+0xff00d9c4>
    dc28:	4086b03a 	or	r3,r8,r2
    dc2c:	18015226 	beq	r3,zero,e178 <__subdf3+0x820>
    dc30:	00c00434 	movhi	r3,16
    dc34:	41400234 	orhi	r5,r8,8
    dc38:	18ffffc4 	addi	r3,r3,-1
    dc3c:	28ca703a 	and	r5,r5,r3
    dc40:	003f7e06 	br	da3c <__alt_data_end+0xff00da3c>
    dc44:	10bfffc4 	addi	r2,r2,-1
    dc48:	1000491e 	bne	r2,zero,dd70 <__subdf3+0x418>
    dc4c:	898fc83a 	sub	r7,r17,r6
    dc50:	89e3803a 	cmpltu	r17,r17,r7
    dc54:	1947c83a 	sub	r3,r3,r5
    dc58:	1c47c83a 	sub	r3,r3,r17
    dc5c:	3823883a 	mov	r17,r7
    dc60:	003f9b06 	br	dad0 <__alt_data_end+0xff00dad0>
    dc64:	2988b03a 	or	r4,r5,r6
    dc68:	203f5c26 	beq	r4,zero,d9dc <__alt_data_end+0xff00d9dc>
    dc6c:	10bfffc4 	addi	r2,r2,-1
    dc70:	1000931e 	bne	r2,zero,dec0 <__subdf3+0x568>
    dc74:	898d883a 	add	r6,r17,r6
    dc78:	3463803a 	cmpltu	r17,r6,r17
    dc7c:	1947883a 	add	r3,r3,r5
    dc80:	88c7883a 	add	r3,r17,r3
    dc84:	3023883a 	mov	r17,r6
    dc88:	003fd306 	br	dbd8 <__alt_data_end+0xff00dbd8>
    dc8c:	1000541e 	bne	r2,zero,dde0 <__subdf3+0x488>
    dc90:	80800044 	addi	r2,r16,1
    dc94:	1081ffcc 	andi	r2,r2,2047
    dc98:	01000044 	movi	r4,1
    dc9c:	2080a20e 	bge	r4,r2,df28 <__subdf3+0x5d0>
    dca0:	8989c83a 	sub	r4,r17,r6
    dca4:	8905803a 	cmpltu	r2,r17,r4
    dca8:	1967c83a 	sub	r19,r3,r5
    dcac:	98a7c83a 	sub	r19,r19,r2
    dcb0:	9880202c 	andhi	r2,r19,128
    dcb4:	10006326 	beq	r2,zero,de44 <__subdf3+0x4ec>
    dcb8:	3463c83a 	sub	r17,r6,r17
    dcbc:	28c7c83a 	sub	r3,r5,r3
    dcc0:	344d803a 	cmpltu	r6,r6,r17
    dcc4:	19a7c83a 	sub	r19,r3,r6
    dcc8:	3825883a 	mov	r18,r7
    dccc:	983f861e 	bne	r19,zero,dae8 <__alt_data_end+0xff00dae8>
    dcd0:	8809883a 	mov	r4,r17
    dcd4:	000e4580 	call	e458 <__clzsi2>
    dcd8:	10800804 	addi	r2,r2,32
    dcdc:	113ffe04 	addi	r4,r2,-8
    dce0:	00c007c4 	movi	r3,31
    dce4:	193f850e 	bge	r3,r4,dafc <__alt_data_end+0xff00dafc>
    dce8:	10bff604 	addi	r2,r2,-40
    dcec:	8884983a 	sll	r2,r17,r2
    dcf0:	0023883a 	mov	r17,zero
    dcf4:	243f880e 	bge	r4,r16,db18 <__alt_data_end+0xff00db18>
    dcf8:	00ffe034 	movhi	r3,65408
    dcfc:	18ffffc4 	addi	r3,r3,-1
    dd00:	8121c83a 	sub	r16,r16,r4
    dd04:	10c6703a 	and	r3,r2,r3
    dd08:	003f3406 	br	d9dc <__alt_data_end+0xff00d9dc>
    dd0c:	9100004c 	andi	r4,r18,1
    dd10:	000b883a 	mov	r5,zero
    dd14:	0005883a 	mov	r2,zero
    dd18:	003f4806 	br	da3c <__alt_data_end+0xff00da3c>
    dd1c:	298cb03a 	or	r6,r5,r6
    dd20:	300cc03a 	cmpne	r6,r6,zero
    dd24:	0005883a 	mov	r2,zero
    dd28:	003f6406 	br	dabc <__alt_data_end+0xff00dabc>
    dd2c:	10009a1e 	bne	r2,zero,df98 <__subdf3+0x640>
    dd30:	82400044 	addi	r9,r16,1
    dd34:	4881ffcc 	andi	r2,r9,2047
    dd38:	02800044 	movi	r10,1
    dd3c:	5080670e 	bge	r10,r2,dedc <__subdf3+0x584>
    dd40:	0081ffc4 	movi	r2,2047
    dd44:	4880af26 	beq	r9,r2,e004 <__subdf3+0x6ac>
    dd48:	898d883a 	add	r6,r17,r6
    dd4c:	1945883a 	add	r2,r3,r5
    dd50:	3447803a 	cmpltu	r3,r6,r17
    dd54:	1887883a 	add	r3,r3,r2
    dd58:	182297fa 	slli	r17,r3,31
    dd5c:	300cd07a 	srli	r6,r6,1
    dd60:	1806d07a 	srli	r3,r3,1
    dd64:	4821883a 	mov	r16,r9
    dd68:	89a2b03a 	or	r17,r17,r6
    dd6c:	003f1b06 	br	d9dc <__alt_data_end+0xff00d9dc>
    dd70:	0101ffc4 	movi	r4,2047
    dd74:	813f441e 	bne	r16,r4,da88 <__alt_data_end+0xff00da88>
    dd78:	003f1806 	br	d9dc <__alt_data_end+0xff00d9dc>
    dd7c:	843ff844 	addi	r16,r16,-31
    dd80:	01400804 	movi	r5,32
    dd84:	1408d83a 	srl	r4,r2,r16
    dd88:	19405026 	beq	r3,r5,decc <__subdf3+0x574>
    dd8c:	01401004 	movi	r5,64
    dd90:	28c7c83a 	sub	r3,r5,r3
    dd94:	10c4983a 	sll	r2,r2,r3
    dd98:	88a2b03a 	or	r17,r17,r2
    dd9c:	8822c03a 	cmpne	r17,r17,zero
    dda0:	2462b03a 	or	r17,r4,r17
    dda4:	0007883a 	mov	r3,zero
    dda8:	0021883a 	mov	r16,zero
    ddac:	003f6d06 	br	db64 <__alt_data_end+0xff00db64>
    ddb0:	11fff804 	addi	r7,r2,-32
    ddb4:	01000804 	movi	r4,32
    ddb8:	29ced83a 	srl	r7,r5,r7
    ddbc:	11004526 	beq	r2,r4,ded4 <__subdf3+0x57c>
    ddc0:	01001004 	movi	r4,64
    ddc4:	2089c83a 	sub	r4,r4,r2
    ddc8:	2904983a 	sll	r2,r5,r4
    ddcc:	118cb03a 	or	r6,r2,r6
    ddd0:	300cc03a 	cmpne	r6,r6,zero
    ddd4:	398cb03a 	or	r6,r7,r6
    ddd8:	0005883a 	mov	r2,zero
    dddc:	003f3706 	br	dabc <__alt_data_end+0xff00dabc>
    dde0:	80002a26 	beq	r16,zero,de8c <__subdf3+0x534>
    dde4:	0101ffc4 	movi	r4,2047
    dde8:	49006626 	beq	r9,r4,df84 <__subdf3+0x62c>
    ddec:	0085c83a 	sub	r2,zero,r2
    ddf0:	18c02034 	orhi	r3,r3,128
    ddf4:	01000e04 	movi	r4,56
    ddf8:	20807e16 	blt	r4,r2,dff4 <__subdf3+0x69c>
    ddfc:	010007c4 	movi	r4,31
    de00:	2080e716 	blt	r4,r2,e1a0 <__subdf3+0x848>
    de04:	01000804 	movi	r4,32
    de08:	2089c83a 	sub	r4,r4,r2
    de0c:	1914983a 	sll	r10,r3,r4
    de10:	8890d83a 	srl	r8,r17,r2
    de14:	8908983a 	sll	r4,r17,r4
    de18:	1884d83a 	srl	r2,r3,r2
    de1c:	5222b03a 	or	r17,r10,r8
    de20:	2006c03a 	cmpne	r3,r4,zero
    de24:	88e2b03a 	or	r17,r17,r3
    de28:	3463c83a 	sub	r17,r6,r17
    de2c:	2885c83a 	sub	r2,r5,r2
    de30:	344d803a 	cmpltu	r6,r6,r17
    de34:	1187c83a 	sub	r3,r2,r6
    de38:	4821883a 	mov	r16,r9
    de3c:	3825883a 	mov	r18,r7
    de40:	003f2306 	br	dad0 <__alt_data_end+0xff00dad0>
    de44:	24d0b03a 	or	r8,r4,r19
    de48:	40001b1e 	bne	r8,zero,deb8 <__subdf3+0x560>
    de4c:	0005883a 	mov	r2,zero
    de50:	0009883a 	mov	r4,zero
    de54:	0021883a 	mov	r16,zero
    de58:	003f4906 	br	db80 <__alt_data_end+0xff00db80>
    de5c:	010007c4 	movi	r4,31
    de60:	20803a16 	blt	r4,r2,df4c <__subdf3+0x5f4>
    de64:	01000804 	movi	r4,32
    de68:	2089c83a 	sub	r4,r4,r2
    de6c:	2912983a 	sll	r9,r5,r4
    de70:	3090d83a 	srl	r8,r6,r2
    de74:	3108983a 	sll	r4,r6,r4
    de78:	2884d83a 	srl	r2,r5,r2
    de7c:	4a12b03a 	or	r9,r9,r8
    de80:	2008c03a 	cmpne	r4,r4,zero
    de84:	4912b03a 	or	r9,r9,r4
    de88:	003f4e06 	br	dbc4 <__alt_data_end+0xff00dbc4>
    de8c:	1c48b03a 	or	r4,r3,r17
    de90:	20003c26 	beq	r4,zero,df84 <__subdf3+0x62c>
    de94:	0084303a 	nor	r2,zero,r2
    de98:	1000381e 	bne	r2,zero,df7c <__subdf3+0x624>
    de9c:	3463c83a 	sub	r17,r6,r17
    dea0:	28c5c83a 	sub	r2,r5,r3
    dea4:	344d803a 	cmpltu	r6,r6,r17
    dea8:	1187c83a 	sub	r3,r2,r6
    deac:	4821883a 	mov	r16,r9
    deb0:	3825883a 	mov	r18,r7
    deb4:	003f0606 	br	dad0 <__alt_data_end+0xff00dad0>
    deb8:	2023883a 	mov	r17,r4
    debc:	003f0906 	br	dae4 <__alt_data_end+0xff00dae4>
    dec0:	0101ffc4 	movi	r4,2047
    dec4:	813f3a1e 	bne	r16,r4,dbb0 <__alt_data_end+0xff00dbb0>
    dec8:	003ec406 	br	d9dc <__alt_data_end+0xff00d9dc>
    decc:	0005883a 	mov	r2,zero
    ded0:	003fb106 	br	dd98 <__alt_data_end+0xff00dd98>
    ded4:	0005883a 	mov	r2,zero
    ded8:	003fbc06 	br	ddcc <__alt_data_end+0xff00ddcc>
    dedc:	1c44b03a 	or	r2,r3,r17
    dee0:	80008e1e 	bne	r16,zero,e11c <__subdf3+0x7c4>
    dee4:	1000c826 	beq	r2,zero,e208 <__subdf3+0x8b0>
    dee8:	2984b03a 	or	r2,r5,r6
    deec:	103ebb26 	beq	r2,zero,d9dc <__alt_data_end+0xff00d9dc>
    def0:	8989883a 	add	r4,r17,r6
    def4:	1945883a 	add	r2,r3,r5
    def8:	2447803a 	cmpltu	r3,r4,r17
    defc:	1887883a 	add	r3,r3,r2
    df00:	1880202c 	andhi	r2,r3,128
    df04:	2023883a 	mov	r17,r4
    df08:	103f1626 	beq	r2,zero,db64 <__alt_data_end+0xff00db64>
    df0c:	00bfe034 	movhi	r2,65408
    df10:	10bfffc4 	addi	r2,r2,-1
    df14:	5021883a 	mov	r16,r10
    df18:	1886703a 	and	r3,r3,r2
    df1c:	003eaf06 	br	d9dc <__alt_data_end+0xff00d9dc>
    df20:	3825883a 	mov	r18,r7
    df24:	003f0f06 	br	db64 <__alt_data_end+0xff00db64>
    df28:	1c44b03a 	or	r2,r3,r17
    df2c:	8000251e 	bne	r16,zero,dfc4 <__subdf3+0x66c>
    df30:	1000661e 	bne	r2,zero,e0cc <__subdf3+0x774>
    df34:	2990b03a 	or	r8,r5,r6
    df38:	40009626 	beq	r8,zero,e194 <__subdf3+0x83c>
    df3c:	2807883a 	mov	r3,r5
    df40:	3023883a 	mov	r17,r6
    df44:	3825883a 	mov	r18,r7
    df48:	003ea406 	br	d9dc <__alt_data_end+0xff00d9dc>
    df4c:	127ff804 	addi	r9,r2,-32
    df50:	01000804 	movi	r4,32
    df54:	2a52d83a 	srl	r9,r5,r9
    df58:	11008c26 	beq	r2,r4,e18c <__subdf3+0x834>
    df5c:	01001004 	movi	r4,64
    df60:	2085c83a 	sub	r2,r4,r2
    df64:	2884983a 	sll	r2,r5,r2
    df68:	118cb03a 	or	r6,r2,r6
    df6c:	300cc03a 	cmpne	r6,r6,zero
    df70:	4992b03a 	or	r9,r9,r6
    df74:	0005883a 	mov	r2,zero
    df78:	003f1206 	br	dbc4 <__alt_data_end+0xff00dbc4>
    df7c:	0101ffc4 	movi	r4,2047
    df80:	493f9c1e 	bne	r9,r4,ddf4 <__alt_data_end+0xff00ddf4>
    df84:	2807883a 	mov	r3,r5
    df88:	3023883a 	mov	r17,r6
    df8c:	4821883a 	mov	r16,r9
    df90:	3825883a 	mov	r18,r7
    df94:	003e9106 	br	d9dc <__alt_data_end+0xff00d9dc>
    df98:	80001f1e 	bne	r16,zero,e018 <__subdf3+0x6c0>
    df9c:	1c48b03a 	or	r4,r3,r17
    dfa0:	20005a26 	beq	r4,zero,e10c <__subdf3+0x7b4>
    dfa4:	0084303a 	nor	r2,zero,r2
    dfa8:	1000561e 	bne	r2,zero,e104 <__subdf3+0x7ac>
    dfac:	89a3883a 	add	r17,r17,r6
    dfb0:	1945883a 	add	r2,r3,r5
    dfb4:	898d803a 	cmpltu	r6,r17,r6
    dfb8:	3087883a 	add	r3,r6,r2
    dfbc:	4821883a 	mov	r16,r9
    dfc0:	003f0506 	br	dbd8 <__alt_data_end+0xff00dbd8>
    dfc4:	10002b1e 	bne	r2,zero,e074 <__subdf3+0x71c>
    dfc8:	2984b03a 	or	r2,r5,r6
    dfcc:	10008026 	beq	r2,zero,e1d0 <__subdf3+0x878>
    dfd0:	2807883a 	mov	r3,r5
    dfd4:	3023883a 	mov	r17,r6
    dfd8:	3825883a 	mov	r18,r7
    dfdc:	0401ffc4 	movi	r16,2047
    dfe0:	003e7e06 	br	d9dc <__alt_data_end+0xff00d9dc>
    dfe4:	3809883a 	mov	r4,r7
    dfe8:	0011883a 	mov	r8,zero
    dfec:	0005883a 	mov	r2,zero
    dff0:	003ee306 	br	db80 <__alt_data_end+0xff00db80>
    dff4:	1c62b03a 	or	r17,r3,r17
    dff8:	8822c03a 	cmpne	r17,r17,zero
    dffc:	0005883a 	mov	r2,zero
    e000:	003f8906 	br	de28 <__alt_data_end+0xff00de28>
    e004:	3809883a 	mov	r4,r7
    e008:	4821883a 	mov	r16,r9
    e00c:	0011883a 	mov	r8,zero
    e010:	0005883a 	mov	r2,zero
    e014:	003eda06 	br	db80 <__alt_data_end+0xff00db80>
    e018:	0101ffc4 	movi	r4,2047
    e01c:	49003b26 	beq	r9,r4,e10c <__subdf3+0x7b4>
    e020:	0085c83a 	sub	r2,zero,r2
    e024:	18c02034 	orhi	r3,r3,128
    e028:	01000e04 	movi	r4,56
    e02c:	20806e16 	blt	r4,r2,e1e8 <__subdf3+0x890>
    e030:	010007c4 	movi	r4,31
    e034:	20807716 	blt	r4,r2,e214 <__subdf3+0x8bc>
    e038:	01000804 	movi	r4,32
    e03c:	2089c83a 	sub	r4,r4,r2
    e040:	1914983a 	sll	r10,r3,r4
    e044:	8890d83a 	srl	r8,r17,r2
    e048:	8908983a 	sll	r4,r17,r4
    e04c:	1884d83a 	srl	r2,r3,r2
    e050:	5222b03a 	or	r17,r10,r8
    e054:	2006c03a 	cmpne	r3,r4,zero
    e058:	88e2b03a 	or	r17,r17,r3
    e05c:	89a3883a 	add	r17,r17,r6
    e060:	1145883a 	add	r2,r2,r5
    e064:	898d803a 	cmpltu	r6,r17,r6
    e068:	3087883a 	add	r3,r6,r2
    e06c:	4821883a 	mov	r16,r9
    e070:	003ed906 	br	dbd8 <__alt_data_end+0xff00dbd8>
    e074:	2984b03a 	or	r2,r5,r6
    e078:	10004226 	beq	r2,zero,e184 <__subdf3+0x82c>
    e07c:	1808d0fa 	srli	r4,r3,3
    e080:	8822d0fa 	srli	r17,r17,3
    e084:	1806977a 	slli	r3,r3,29
    e088:	2080022c 	andhi	r2,r4,8
    e08c:	1c62b03a 	or	r17,r3,r17
    e090:	10000826 	beq	r2,zero,e0b4 <__subdf3+0x75c>
    e094:	2812d0fa 	srli	r9,r5,3
    e098:	4880022c 	andhi	r2,r9,8
    e09c:	1000051e 	bne	r2,zero,e0b4 <__subdf3+0x75c>
    e0a0:	300cd0fa 	srli	r6,r6,3
    e0a4:	2804977a 	slli	r2,r5,29
    e0a8:	4809883a 	mov	r4,r9
    e0ac:	3825883a 	mov	r18,r7
    e0b0:	11a2b03a 	or	r17,r2,r6
    e0b4:	8806d77a 	srli	r3,r17,29
    e0b8:	200890fa 	slli	r4,r4,3
    e0bc:	882290fa 	slli	r17,r17,3
    e0c0:	0401ffc4 	movi	r16,2047
    e0c4:	1906b03a 	or	r3,r3,r4
    e0c8:	003e4406 	br	d9dc <__alt_data_end+0xff00d9dc>
    e0cc:	2984b03a 	or	r2,r5,r6
    e0d0:	103e4226 	beq	r2,zero,d9dc <__alt_data_end+0xff00d9dc>
    e0d4:	8989c83a 	sub	r4,r17,r6
    e0d8:	8911803a 	cmpltu	r8,r17,r4
    e0dc:	1945c83a 	sub	r2,r3,r5
    e0e0:	1205c83a 	sub	r2,r2,r8
    e0e4:	1200202c 	andhi	r8,r2,128
    e0e8:	403e9a26 	beq	r8,zero,db54 <__alt_data_end+0xff00db54>
    e0ec:	3463c83a 	sub	r17,r6,r17
    e0f0:	28c5c83a 	sub	r2,r5,r3
    e0f4:	344d803a 	cmpltu	r6,r6,r17
    e0f8:	1187c83a 	sub	r3,r2,r6
    e0fc:	3825883a 	mov	r18,r7
    e100:	003e3606 	br	d9dc <__alt_data_end+0xff00d9dc>
    e104:	0101ffc4 	movi	r4,2047
    e108:	493fc71e 	bne	r9,r4,e028 <__alt_data_end+0xff00e028>
    e10c:	2807883a 	mov	r3,r5
    e110:	3023883a 	mov	r17,r6
    e114:	4821883a 	mov	r16,r9
    e118:	003e3006 	br	d9dc <__alt_data_end+0xff00d9dc>
    e11c:	10003626 	beq	r2,zero,e1f8 <__subdf3+0x8a0>
    e120:	2984b03a 	or	r2,r5,r6
    e124:	10001726 	beq	r2,zero,e184 <__subdf3+0x82c>
    e128:	1808d0fa 	srli	r4,r3,3
    e12c:	8822d0fa 	srli	r17,r17,3
    e130:	1806977a 	slli	r3,r3,29
    e134:	2080022c 	andhi	r2,r4,8
    e138:	1c62b03a 	or	r17,r3,r17
    e13c:	10000726 	beq	r2,zero,e15c <__subdf3+0x804>
    e140:	2812d0fa 	srli	r9,r5,3
    e144:	4880022c 	andhi	r2,r9,8
    e148:	1000041e 	bne	r2,zero,e15c <__subdf3+0x804>
    e14c:	300cd0fa 	srli	r6,r6,3
    e150:	2804977a 	slli	r2,r5,29
    e154:	4809883a 	mov	r4,r9
    e158:	11a2b03a 	or	r17,r2,r6
    e15c:	8806d77a 	srli	r3,r17,29
    e160:	200890fa 	slli	r4,r4,3
    e164:	882290fa 	slli	r17,r17,3
    e168:	3825883a 	mov	r18,r7
    e16c:	1906b03a 	or	r3,r3,r4
    e170:	0401ffc4 	movi	r16,2047
    e174:	003e1906 	br	d9dc <__alt_data_end+0xff00d9dc>
    e178:	000b883a 	mov	r5,zero
    e17c:	0005883a 	mov	r2,zero
    e180:	003e2e06 	br	da3c <__alt_data_end+0xff00da3c>
    e184:	0401ffc4 	movi	r16,2047
    e188:	003e1406 	br	d9dc <__alt_data_end+0xff00d9dc>
    e18c:	0005883a 	mov	r2,zero
    e190:	003f7506 	br	df68 <__alt_data_end+0xff00df68>
    e194:	0005883a 	mov	r2,zero
    e198:	0009883a 	mov	r4,zero
    e19c:	003e7806 	br	db80 <__alt_data_end+0xff00db80>
    e1a0:	123ff804 	addi	r8,r2,-32
    e1a4:	01000804 	movi	r4,32
    e1a8:	1a10d83a 	srl	r8,r3,r8
    e1ac:	11002526 	beq	r2,r4,e244 <__subdf3+0x8ec>
    e1b0:	01001004 	movi	r4,64
    e1b4:	2085c83a 	sub	r2,r4,r2
    e1b8:	1884983a 	sll	r2,r3,r2
    e1bc:	1444b03a 	or	r2,r2,r17
    e1c0:	1004c03a 	cmpne	r2,r2,zero
    e1c4:	40a2b03a 	or	r17,r8,r2
    e1c8:	0005883a 	mov	r2,zero
    e1cc:	003f1606 	br	de28 <__alt_data_end+0xff00de28>
    e1d0:	02000434 	movhi	r8,16
    e1d4:	0009883a 	mov	r4,zero
    e1d8:	423fffc4 	addi	r8,r8,-1
    e1dc:	00bfffc4 	movi	r2,-1
    e1e0:	0401ffc4 	movi	r16,2047
    e1e4:	003e6606 	br	db80 <__alt_data_end+0xff00db80>
    e1e8:	1c62b03a 	or	r17,r3,r17
    e1ec:	8822c03a 	cmpne	r17,r17,zero
    e1f0:	0005883a 	mov	r2,zero
    e1f4:	003f9906 	br	e05c <__alt_data_end+0xff00e05c>
    e1f8:	2807883a 	mov	r3,r5
    e1fc:	3023883a 	mov	r17,r6
    e200:	0401ffc4 	movi	r16,2047
    e204:	003df506 	br	d9dc <__alt_data_end+0xff00d9dc>
    e208:	2807883a 	mov	r3,r5
    e20c:	3023883a 	mov	r17,r6
    e210:	003df206 	br	d9dc <__alt_data_end+0xff00d9dc>
    e214:	123ff804 	addi	r8,r2,-32
    e218:	01000804 	movi	r4,32
    e21c:	1a10d83a 	srl	r8,r3,r8
    e220:	11000a26 	beq	r2,r4,e24c <__subdf3+0x8f4>
    e224:	01001004 	movi	r4,64
    e228:	2085c83a 	sub	r2,r4,r2
    e22c:	1884983a 	sll	r2,r3,r2
    e230:	1444b03a 	or	r2,r2,r17
    e234:	1004c03a 	cmpne	r2,r2,zero
    e238:	40a2b03a 	or	r17,r8,r2
    e23c:	0005883a 	mov	r2,zero
    e240:	003f8606 	br	e05c <__alt_data_end+0xff00e05c>
    e244:	0005883a 	mov	r2,zero
    e248:	003fdc06 	br	e1bc <__alt_data_end+0xff00e1bc>
    e24c:	0005883a 	mov	r2,zero
    e250:	003ff706 	br	e230 <__alt_data_end+0xff00e230>

0000e254 <__fixdfsi>:
    e254:	280cd53a 	srli	r6,r5,20
    e258:	00c00434 	movhi	r3,16
    e25c:	18ffffc4 	addi	r3,r3,-1
    e260:	3181ffcc 	andi	r6,r6,2047
    e264:	01c0ff84 	movi	r7,1022
    e268:	28c6703a 	and	r3,r5,r3
    e26c:	280ad7fa 	srli	r5,r5,31
    e270:	3980120e 	bge	r7,r6,e2bc <__fixdfsi+0x68>
    e274:	00810744 	movi	r2,1053
    e278:	11800c16 	blt	r2,r6,e2ac <__fixdfsi+0x58>
    e27c:	00810cc4 	movi	r2,1075
    e280:	1185c83a 	sub	r2,r2,r6
    e284:	01c007c4 	movi	r7,31
    e288:	18c00434 	orhi	r3,r3,16
    e28c:	38800d16 	blt	r7,r2,e2c4 <__fixdfsi+0x70>
    e290:	31befb44 	addi	r6,r6,-1043
    e294:	2084d83a 	srl	r2,r4,r2
    e298:	1986983a 	sll	r3,r3,r6
    e29c:	1884b03a 	or	r2,r3,r2
    e2a0:	28000726 	beq	r5,zero,e2c0 <__fixdfsi+0x6c>
    e2a4:	0085c83a 	sub	r2,zero,r2
    e2a8:	f800283a 	ret
    e2ac:	00a00034 	movhi	r2,32768
    e2b0:	10bfffc4 	addi	r2,r2,-1
    e2b4:	2885883a 	add	r2,r5,r2
    e2b8:	f800283a 	ret
    e2bc:	0005883a 	mov	r2,zero
    e2c0:	f800283a 	ret
    e2c4:	008104c4 	movi	r2,1043
    e2c8:	1185c83a 	sub	r2,r2,r6
    e2cc:	1884d83a 	srl	r2,r3,r2
    e2d0:	003ff306 	br	e2a0 <__alt_data_end+0xff00e2a0>

0000e2d4 <__floatsidf>:
    e2d4:	defffd04 	addi	sp,sp,-12
    e2d8:	dfc00215 	stw	ra,8(sp)
    e2dc:	dc400115 	stw	r17,4(sp)
    e2e0:	dc000015 	stw	r16,0(sp)
    e2e4:	20002b26 	beq	r4,zero,e394 <__floatsidf+0xc0>
    e2e8:	2023883a 	mov	r17,r4
    e2ec:	2020d7fa 	srli	r16,r4,31
    e2f0:	20002d16 	blt	r4,zero,e3a8 <__floatsidf+0xd4>
    e2f4:	8809883a 	mov	r4,r17
    e2f8:	000e4580 	call	e458 <__clzsi2>
    e2fc:	01410784 	movi	r5,1054
    e300:	288bc83a 	sub	r5,r5,r2
    e304:	01010cc4 	movi	r4,1075
    e308:	2149c83a 	sub	r4,r4,r5
    e30c:	00c007c4 	movi	r3,31
    e310:	1900160e 	bge	r3,r4,e36c <__floatsidf+0x98>
    e314:	00c104c4 	movi	r3,1043
    e318:	1947c83a 	sub	r3,r3,r5
    e31c:	88c6983a 	sll	r3,r17,r3
    e320:	00800434 	movhi	r2,16
    e324:	10bfffc4 	addi	r2,r2,-1
    e328:	1886703a 	and	r3,r3,r2
    e32c:	2941ffcc 	andi	r5,r5,2047
    e330:	800d883a 	mov	r6,r16
    e334:	0005883a 	mov	r2,zero
    e338:	280a953a 	slli	r5,r5,20
    e33c:	31803fcc 	andi	r6,r6,255
    e340:	01000434 	movhi	r4,16
    e344:	300c97fa 	slli	r6,r6,31
    e348:	213fffc4 	addi	r4,r4,-1
    e34c:	1906703a 	and	r3,r3,r4
    e350:	1946b03a 	or	r3,r3,r5
    e354:	1986b03a 	or	r3,r3,r6
    e358:	dfc00217 	ldw	ra,8(sp)
    e35c:	dc400117 	ldw	r17,4(sp)
    e360:	dc000017 	ldw	r16,0(sp)
    e364:	dec00304 	addi	sp,sp,12
    e368:	f800283a 	ret
    e36c:	00c002c4 	movi	r3,11
    e370:	1887c83a 	sub	r3,r3,r2
    e374:	88c6d83a 	srl	r3,r17,r3
    e378:	8904983a 	sll	r2,r17,r4
    e37c:	01000434 	movhi	r4,16
    e380:	213fffc4 	addi	r4,r4,-1
    e384:	2941ffcc 	andi	r5,r5,2047
    e388:	1906703a 	and	r3,r3,r4
    e38c:	800d883a 	mov	r6,r16
    e390:	003fe906 	br	e338 <__alt_data_end+0xff00e338>
    e394:	000d883a 	mov	r6,zero
    e398:	000b883a 	mov	r5,zero
    e39c:	0007883a 	mov	r3,zero
    e3a0:	0005883a 	mov	r2,zero
    e3a4:	003fe406 	br	e338 <__alt_data_end+0xff00e338>
    e3a8:	0123c83a 	sub	r17,zero,r4
    e3ac:	003fd106 	br	e2f4 <__alt_data_end+0xff00e2f4>

0000e3b0 <__floatunsidf>:
    e3b0:	defffe04 	addi	sp,sp,-8
    e3b4:	dc000015 	stw	r16,0(sp)
    e3b8:	dfc00115 	stw	ra,4(sp)
    e3bc:	2021883a 	mov	r16,r4
    e3c0:	20002226 	beq	r4,zero,e44c <__floatunsidf+0x9c>
    e3c4:	000e4580 	call	e458 <__clzsi2>
    e3c8:	01010784 	movi	r4,1054
    e3cc:	2089c83a 	sub	r4,r4,r2
    e3d0:	01810cc4 	movi	r6,1075
    e3d4:	310dc83a 	sub	r6,r6,r4
    e3d8:	00c007c4 	movi	r3,31
    e3dc:	1980120e 	bge	r3,r6,e428 <__floatunsidf+0x78>
    e3e0:	00c104c4 	movi	r3,1043
    e3e4:	1907c83a 	sub	r3,r3,r4
    e3e8:	80ca983a 	sll	r5,r16,r3
    e3ec:	00800434 	movhi	r2,16
    e3f0:	10bfffc4 	addi	r2,r2,-1
    e3f4:	2101ffcc 	andi	r4,r4,2047
    e3f8:	0021883a 	mov	r16,zero
    e3fc:	288a703a 	and	r5,r5,r2
    e400:	2008953a 	slli	r4,r4,20
    e404:	00c00434 	movhi	r3,16
    e408:	18ffffc4 	addi	r3,r3,-1
    e40c:	28c6703a 	and	r3,r5,r3
    e410:	8005883a 	mov	r2,r16
    e414:	1906b03a 	or	r3,r3,r4
    e418:	dfc00117 	ldw	ra,4(sp)
    e41c:	dc000017 	ldw	r16,0(sp)
    e420:	dec00204 	addi	sp,sp,8
    e424:	f800283a 	ret
    e428:	00c002c4 	movi	r3,11
    e42c:	188bc83a 	sub	r5,r3,r2
    e430:	814ad83a 	srl	r5,r16,r5
    e434:	00c00434 	movhi	r3,16
    e438:	18ffffc4 	addi	r3,r3,-1
    e43c:	81a0983a 	sll	r16,r16,r6
    e440:	2101ffcc 	andi	r4,r4,2047
    e444:	28ca703a 	and	r5,r5,r3
    e448:	003fed06 	br	e400 <__alt_data_end+0xff00e400>
    e44c:	0009883a 	mov	r4,zero
    e450:	000b883a 	mov	r5,zero
    e454:	003fea06 	br	e400 <__alt_data_end+0xff00e400>

0000e458 <__clzsi2>:
    e458:	00bfffd4 	movui	r2,65535
    e45c:	11000536 	bltu	r2,r4,e474 <__clzsi2+0x1c>
    e460:	00803fc4 	movi	r2,255
    e464:	11000f36 	bltu	r2,r4,e4a4 <__clzsi2+0x4c>
    e468:	00800804 	movi	r2,32
    e46c:	0007883a 	mov	r3,zero
    e470:	00000506 	br	e488 <__clzsi2+0x30>
    e474:	00804034 	movhi	r2,256
    e478:	10bfffc4 	addi	r2,r2,-1
    e47c:	11000c2e 	bgeu	r2,r4,e4b0 <__clzsi2+0x58>
    e480:	00800204 	movi	r2,8
    e484:	00c00604 	movi	r3,24
    e488:	20c8d83a 	srl	r4,r4,r3
    e48c:	00c00074 	movhi	r3,1
    e490:	18c56a04 	addi	r3,r3,5544
    e494:	1909883a 	add	r4,r3,r4
    e498:	20c00003 	ldbu	r3,0(r4)
    e49c:	10c5c83a 	sub	r2,r2,r3
    e4a0:	f800283a 	ret
    e4a4:	00800604 	movi	r2,24
    e4a8:	00c00204 	movi	r3,8
    e4ac:	003ff606 	br	e488 <__alt_data_end+0xff00e488>
    e4b0:	00800404 	movi	r2,16
    e4b4:	1007883a 	mov	r3,r2
    e4b8:	003ff306 	br	e488 <__alt_data_end+0xff00e488>

0000e4bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e4bc:	defffe04 	addi	sp,sp,-8
    e4c0:	dfc00115 	stw	ra,4(sp)
    e4c4:	df000015 	stw	fp,0(sp)
    e4c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e4cc:	d0a00b17 	ldw	r2,-32724(gp)
    e4d0:	10000326 	beq	r2,zero,e4e0 <alt_get_errno+0x24>
    e4d4:	d0a00b17 	ldw	r2,-32724(gp)
    e4d8:	103ee83a 	callr	r2
    e4dc:	00000106 	br	e4e4 <alt_get_errno+0x28>
    e4e0:	d0a71804 	addi	r2,gp,-25504
}
    e4e4:	e037883a 	mov	sp,fp
    e4e8:	dfc00117 	ldw	ra,4(sp)
    e4ec:	df000017 	ldw	fp,0(sp)
    e4f0:	dec00204 	addi	sp,sp,8
    e4f4:	f800283a 	ret

0000e4f8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e4f8:	defffb04 	addi	sp,sp,-20
    e4fc:	dfc00415 	stw	ra,16(sp)
    e500:	df000315 	stw	fp,12(sp)
    e504:	df000304 	addi	fp,sp,12
    e508:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e50c:	e0bfff17 	ldw	r2,-4(fp)
    e510:	10000616 	blt	r2,zero,e52c <close+0x34>
    e514:	e0bfff17 	ldw	r2,-4(fp)
    e518:	10c00324 	muli	r3,r2,12
    e51c:	00800074 	movhi	r2,1
    e520:	10882804 	addi	r2,r2,8352
    e524:	1885883a 	add	r2,r3,r2
    e528:	00000106 	br	e530 <close+0x38>
    e52c:	0005883a 	mov	r2,zero
    e530:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e534:	e0bffd17 	ldw	r2,-12(fp)
    e538:	10001926 	beq	r2,zero,e5a0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e53c:	e0bffd17 	ldw	r2,-12(fp)
    e540:	10800017 	ldw	r2,0(r2)
    e544:	10800417 	ldw	r2,16(r2)
    e548:	10000626 	beq	r2,zero,e564 <close+0x6c>
    e54c:	e0bffd17 	ldw	r2,-12(fp)
    e550:	10800017 	ldw	r2,0(r2)
    e554:	10800417 	ldw	r2,16(r2)
    e558:	e13ffd17 	ldw	r4,-12(fp)
    e55c:	103ee83a 	callr	r2
    e560:	00000106 	br	e568 <close+0x70>
    e564:	0005883a 	mov	r2,zero
    e568:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e56c:	e13fff17 	ldw	r4,-4(fp)
    e570:	000ebb80 	call	ebb8 <alt_release_fd>
    if (rval < 0)
    e574:	e0bffe17 	ldw	r2,-8(fp)
    e578:	1000070e 	bge	r2,zero,e598 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e57c:	000e4bc0 	call	e4bc <alt_get_errno>
    e580:	1007883a 	mov	r3,r2
    e584:	e0bffe17 	ldw	r2,-8(fp)
    e588:	0085c83a 	sub	r2,zero,r2
    e58c:	18800015 	stw	r2,0(r3)
      return -1;
    e590:	00bfffc4 	movi	r2,-1
    e594:	00000706 	br	e5b4 <close+0xbc>
    }
    return 0;
    e598:	0005883a 	mov	r2,zero
    e59c:	00000506 	br	e5b4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e5a0:	000e4bc0 	call	e4bc <alt_get_errno>
    e5a4:	1007883a 	mov	r3,r2
    e5a8:	00801444 	movi	r2,81
    e5ac:	18800015 	stw	r2,0(r3)
    return -1;
    e5b0:	00bfffc4 	movi	r2,-1
  }
}
    e5b4:	e037883a 	mov	sp,fp
    e5b8:	dfc00117 	ldw	ra,4(sp)
    e5bc:	df000017 	ldw	fp,0(sp)
    e5c0:	dec00204 	addi	sp,sp,8
    e5c4:	f800283a 	ret

0000e5c8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e5c8:	defffc04 	addi	sp,sp,-16
    e5cc:	df000315 	stw	fp,12(sp)
    e5d0:	df000304 	addi	fp,sp,12
    e5d4:	e13ffd15 	stw	r4,-12(fp)
    e5d8:	e17ffe15 	stw	r5,-8(fp)
    e5dc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e5e0:	e0bfff17 	ldw	r2,-4(fp)
}
    e5e4:	e037883a 	mov	sp,fp
    e5e8:	df000017 	ldw	fp,0(sp)
    e5ec:	dec00104 	addi	sp,sp,4
    e5f0:	f800283a 	ret

0000e5f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e5f4:	defffe04 	addi	sp,sp,-8
    e5f8:	dfc00115 	stw	ra,4(sp)
    e5fc:	df000015 	stw	fp,0(sp)
    e600:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e604:	d0a00b17 	ldw	r2,-32724(gp)
    e608:	10000326 	beq	r2,zero,e618 <alt_get_errno+0x24>
    e60c:	d0a00b17 	ldw	r2,-32724(gp)
    e610:	103ee83a 	callr	r2
    e614:	00000106 	br	e61c <alt_get_errno+0x28>
    e618:	d0a71804 	addi	r2,gp,-25504
}
    e61c:	e037883a 	mov	sp,fp
    e620:	dfc00117 	ldw	ra,4(sp)
    e624:	df000017 	ldw	fp,0(sp)
    e628:	dec00204 	addi	sp,sp,8
    e62c:	f800283a 	ret

0000e630 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e630:	defffb04 	addi	sp,sp,-20
    e634:	dfc00415 	stw	ra,16(sp)
    e638:	df000315 	stw	fp,12(sp)
    e63c:	df000304 	addi	fp,sp,12
    e640:	e13ffe15 	stw	r4,-8(fp)
    e644:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e648:	e0bffe17 	ldw	r2,-8(fp)
    e64c:	10000616 	blt	r2,zero,e668 <fstat+0x38>
    e650:	e0bffe17 	ldw	r2,-8(fp)
    e654:	10c00324 	muli	r3,r2,12
    e658:	00800074 	movhi	r2,1
    e65c:	10882804 	addi	r2,r2,8352
    e660:	1885883a 	add	r2,r3,r2
    e664:	00000106 	br	e66c <fstat+0x3c>
    e668:	0005883a 	mov	r2,zero
    e66c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e670:	e0bffd17 	ldw	r2,-12(fp)
    e674:	10001026 	beq	r2,zero,e6b8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e678:	e0bffd17 	ldw	r2,-12(fp)
    e67c:	10800017 	ldw	r2,0(r2)
    e680:	10800817 	ldw	r2,32(r2)
    e684:	10000726 	beq	r2,zero,e6a4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e688:	e0bffd17 	ldw	r2,-12(fp)
    e68c:	10800017 	ldw	r2,0(r2)
    e690:	10800817 	ldw	r2,32(r2)
    e694:	e17fff17 	ldw	r5,-4(fp)
    e698:	e13ffd17 	ldw	r4,-12(fp)
    e69c:	103ee83a 	callr	r2
    e6a0:	00000a06 	br	e6cc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e6a4:	e0bfff17 	ldw	r2,-4(fp)
    e6a8:	00c80004 	movi	r3,8192
    e6ac:	10c00115 	stw	r3,4(r2)
      return 0;
    e6b0:	0005883a 	mov	r2,zero
    e6b4:	00000506 	br	e6cc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e6b8:	000e5f40 	call	e5f4 <alt_get_errno>
    e6bc:	1007883a 	mov	r3,r2
    e6c0:	00801444 	movi	r2,81
    e6c4:	18800015 	stw	r2,0(r3)
    return -1;
    e6c8:	00bfffc4 	movi	r2,-1
  }
}
    e6cc:	e037883a 	mov	sp,fp
    e6d0:	dfc00117 	ldw	ra,4(sp)
    e6d4:	df000017 	ldw	fp,0(sp)
    e6d8:	dec00204 	addi	sp,sp,8
    e6dc:	f800283a 	ret

0000e6e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e6e0:	defffe04 	addi	sp,sp,-8
    e6e4:	dfc00115 	stw	ra,4(sp)
    e6e8:	df000015 	stw	fp,0(sp)
    e6ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e6f0:	d0a00b17 	ldw	r2,-32724(gp)
    e6f4:	10000326 	beq	r2,zero,e704 <alt_get_errno+0x24>
    e6f8:	d0a00b17 	ldw	r2,-32724(gp)
    e6fc:	103ee83a 	callr	r2
    e700:	00000106 	br	e708 <alt_get_errno+0x28>
    e704:	d0a71804 	addi	r2,gp,-25504
}
    e708:	e037883a 	mov	sp,fp
    e70c:	dfc00117 	ldw	ra,4(sp)
    e710:	df000017 	ldw	fp,0(sp)
    e714:	dec00204 	addi	sp,sp,8
    e718:	f800283a 	ret

0000e71c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e71c:	deffed04 	addi	sp,sp,-76
    e720:	dfc01215 	stw	ra,72(sp)
    e724:	df001115 	stw	fp,68(sp)
    e728:	df001104 	addi	fp,sp,68
    e72c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e730:	e0bfff17 	ldw	r2,-4(fp)
    e734:	10000616 	blt	r2,zero,e750 <isatty+0x34>
    e738:	e0bfff17 	ldw	r2,-4(fp)
    e73c:	10c00324 	muli	r3,r2,12
    e740:	00800074 	movhi	r2,1
    e744:	10882804 	addi	r2,r2,8352
    e748:	1885883a 	add	r2,r3,r2
    e74c:	00000106 	br	e754 <isatty+0x38>
    e750:	0005883a 	mov	r2,zero
    e754:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e758:	e0bfef17 	ldw	r2,-68(fp)
    e75c:	10000e26 	beq	r2,zero,e798 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e760:	e0bfef17 	ldw	r2,-68(fp)
    e764:	10800017 	ldw	r2,0(r2)
    e768:	10800817 	ldw	r2,32(r2)
    e76c:	1000021e 	bne	r2,zero,e778 <isatty+0x5c>
    {
      return 1;
    e770:	00800044 	movi	r2,1
    e774:	00000d06 	br	e7ac <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e778:	e0bff004 	addi	r2,fp,-64
    e77c:	100b883a 	mov	r5,r2
    e780:	e13fff17 	ldw	r4,-4(fp)
    e784:	000e6300 	call	e630 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e788:	e0bff117 	ldw	r2,-60(fp)
    e78c:	10880020 	cmpeqi	r2,r2,8192
    e790:	10803fcc 	andi	r2,r2,255
    e794:	00000506 	br	e7ac <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e798:	000e6e00 	call	e6e0 <alt_get_errno>
    e79c:	1007883a 	mov	r3,r2
    e7a0:	00801444 	movi	r2,81
    e7a4:	18800015 	stw	r2,0(r3)
    return 0;
    e7a8:	0005883a 	mov	r2,zero
  }
}
    e7ac:	e037883a 	mov	sp,fp
    e7b0:	dfc00117 	ldw	ra,4(sp)
    e7b4:	df000017 	ldw	fp,0(sp)
    e7b8:	dec00204 	addi	sp,sp,8
    e7bc:	f800283a 	ret

0000e7c0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    e7c0:	defffc04 	addi	sp,sp,-16
    e7c4:	df000315 	stw	fp,12(sp)
    e7c8:	df000304 	addi	fp,sp,12
    e7cc:	e13ffd15 	stw	r4,-12(fp)
    e7d0:	e17ffe15 	stw	r5,-8(fp)
    e7d4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    e7d8:	e0fffe17 	ldw	r3,-8(fp)
    e7dc:	e0bffd17 	ldw	r2,-12(fp)
    e7e0:	18800c26 	beq	r3,r2,e814 <alt_load_section+0x54>
  {
    while( to != end )
    e7e4:	00000806 	br	e808 <alt_load_section+0x48>
    {
      *to++ = *from++;
    e7e8:	e0bffe17 	ldw	r2,-8(fp)
    e7ec:	10c00104 	addi	r3,r2,4
    e7f0:	e0fffe15 	stw	r3,-8(fp)
    e7f4:	e0fffd17 	ldw	r3,-12(fp)
    e7f8:	19000104 	addi	r4,r3,4
    e7fc:	e13ffd15 	stw	r4,-12(fp)
    e800:	18c00017 	ldw	r3,0(r3)
    e804:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    e808:	e0fffe17 	ldw	r3,-8(fp)
    e80c:	e0bfff17 	ldw	r2,-4(fp)
    e810:	18bff51e 	bne	r3,r2,e7e8 <__alt_data_end+0xff00e7e8>
    {
      *to++ = *from++;
    }
  }
}
    e814:	0001883a 	nop
    e818:	e037883a 	mov	sp,fp
    e81c:	df000017 	ldw	fp,0(sp)
    e820:	dec00104 	addi	sp,sp,4
    e824:	f800283a 	ret

0000e828 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e828:	defffe04 	addi	sp,sp,-8
    e82c:	dfc00115 	stw	ra,4(sp)
    e830:	df000015 	stw	fp,0(sp)
    e834:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    e838:	01800074 	movhi	r6,1
    e83c:	318cb004 	addi	r6,r6,12992
    e840:	01400074 	movhi	r5,1
    e844:	2945b504 	addi	r5,r5,5844
    e848:	01000074 	movhi	r4,1
    e84c:	210cb004 	addi	r4,r4,12992
    e850:	000e7c00 	call	e7c0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    e854:	01800034 	movhi	r6,0
    e858:	31809104 	addi	r6,r6,580
    e85c:	01400034 	movhi	r5,0
    e860:	29400804 	addi	r5,r5,32
    e864:	01000034 	movhi	r4,0
    e868:	21000804 	addi	r4,r4,32
    e86c:	000e7c00 	call	e7c0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    e870:	01800074 	movhi	r6,1
    e874:	3185b504 	addi	r6,r6,5844
    e878:	01400074 	movhi	r5,1
    e87c:	2943bf04 	addi	r5,r5,3836
    e880:	01000074 	movhi	r4,1
    e884:	2103bf04 	addi	r4,r4,3836
    e888:	000e7c00 	call	e7c0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e88c:	000fe100 	call	fe10 <alt_dcache_flush_all>
  alt_icache_flush_all();
    e890:	000ffd00 	call	ffd0 <alt_icache_flush_all>
}
    e894:	0001883a 	nop
    e898:	e037883a 	mov	sp,fp
    e89c:	dfc00117 	ldw	ra,4(sp)
    e8a0:	df000017 	ldw	fp,0(sp)
    e8a4:	dec00204 	addi	sp,sp,8
    e8a8:	f800283a 	ret

0000e8ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e8ac:	defffe04 	addi	sp,sp,-8
    e8b0:	dfc00115 	stw	ra,4(sp)
    e8b4:	df000015 	stw	fp,0(sp)
    e8b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e8bc:	d0a00b17 	ldw	r2,-32724(gp)
    e8c0:	10000326 	beq	r2,zero,e8d0 <alt_get_errno+0x24>
    e8c4:	d0a00b17 	ldw	r2,-32724(gp)
    e8c8:	103ee83a 	callr	r2
    e8cc:	00000106 	br	e8d4 <alt_get_errno+0x28>
    e8d0:	d0a71804 	addi	r2,gp,-25504
}
    e8d4:	e037883a 	mov	sp,fp
    e8d8:	dfc00117 	ldw	ra,4(sp)
    e8dc:	df000017 	ldw	fp,0(sp)
    e8e0:	dec00204 	addi	sp,sp,8
    e8e4:	f800283a 	ret

0000e8e8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e8e8:	defff904 	addi	sp,sp,-28
    e8ec:	dfc00615 	stw	ra,24(sp)
    e8f0:	df000515 	stw	fp,20(sp)
    e8f4:	df000504 	addi	fp,sp,20
    e8f8:	e13ffd15 	stw	r4,-12(fp)
    e8fc:	e17ffe15 	stw	r5,-8(fp)
    e900:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e904:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e908:	e0bffd17 	ldw	r2,-12(fp)
    e90c:	10000616 	blt	r2,zero,e928 <lseek+0x40>
    e910:	e0bffd17 	ldw	r2,-12(fp)
    e914:	10c00324 	muli	r3,r2,12
    e918:	00800074 	movhi	r2,1
    e91c:	10882804 	addi	r2,r2,8352
    e920:	1885883a 	add	r2,r3,r2
    e924:	00000106 	br	e92c <lseek+0x44>
    e928:	0005883a 	mov	r2,zero
    e92c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    e930:	e0bffc17 	ldw	r2,-16(fp)
    e934:	10001026 	beq	r2,zero,e978 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e938:	e0bffc17 	ldw	r2,-16(fp)
    e93c:	10800017 	ldw	r2,0(r2)
    e940:	10800717 	ldw	r2,28(r2)
    e944:	10000926 	beq	r2,zero,e96c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e948:	e0bffc17 	ldw	r2,-16(fp)
    e94c:	10800017 	ldw	r2,0(r2)
    e950:	10800717 	ldw	r2,28(r2)
    e954:	e1bfff17 	ldw	r6,-4(fp)
    e958:	e17ffe17 	ldw	r5,-8(fp)
    e95c:	e13ffc17 	ldw	r4,-16(fp)
    e960:	103ee83a 	callr	r2
    e964:	e0bffb15 	stw	r2,-20(fp)
    e968:	00000506 	br	e980 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e96c:	00bfde84 	movi	r2,-134
    e970:	e0bffb15 	stw	r2,-20(fp)
    e974:	00000206 	br	e980 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    e978:	00bfebc4 	movi	r2,-81
    e97c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    e980:	e0bffb17 	ldw	r2,-20(fp)
    e984:	1000070e 	bge	r2,zero,e9a4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    e988:	000e8ac0 	call	e8ac <alt_get_errno>
    e98c:	1007883a 	mov	r3,r2
    e990:	e0bffb17 	ldw	r2,-20(fp)
    e994:	0085c83a 	sub	r2,zero,r2
    e998:	18800015 	stw	r2,0(r3)
    rc = -1;
    e99c:	00bfffc4 	movi	r2,-1
    e9a0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    e9a4:	e0bffb17 	ldw	r2,-20(fp)
}
    e9a8:	e037883a 	mov	sp,fp
    e9ac:	dfc00117 	ldw	ra,4(sp)
    e9b0:	df000017 	ldw	fp,0(sp)
    e9b4:	dec00204 	addi	sp,sp,8
    e9b8:	f800283a 	ret

0000e9bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e9bc:	defffd04 	addi	sp,sp,-12
    e9c0:	dfc00215 	stw	ra,8(sp)
    e9c4:	df000115 	stw	fp,4(sp)
    e9c8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e9cc:	0009883a 	mov	r4,zero
    e9d0:	000ee640 	call	ee64 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    e9d4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e9d8:	000ee9c0 	call	ee9c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e9dc:	01800074 	movhi	r6,1
    e9e0:	3185ad04 	addi	r6,r6,5812
    e9e4:	01400074 	movhi	r5,1
    e9e8:	2945ad04 	addi	r5,r5,5812
    e9ec:	01000074 	movhi	r4,1
    e9f0:	2105ad04 	addi	r4,r4,5812
    e9f4:	00103680 	call	10368 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e9f8:	000ff100 	call	ff10 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e9fc:	01000074 	movhi	r4,1
    ea00:	213fdc04 	addi	r4,r4,-144
    ea04:	0010b680 	call	10b68 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ea08:	d0a71c17 	ldw	r2,-25488(gp)
    ea0c:	d0e71d17 	ldw	r3,-25484(gp)
    ea10:	d1271e17 	ldw	r4,-25480(gp)
    ea14:	200d883a 	mov	r6,r4
    ea18:	180b883a 	mov	r5,r3
    ea1c:	1009883a 	mov	r4,r2
    ea20:	0000fbc0 	call	fbc <main>
    ea24:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    ea28:	01000044 	movi	r4,1
    ea2c:	000e4f80 	call	e4f8 <close>
  exit (result);
    ea30:	e13fff17 	ldw	r4,-4(fp)
    ea34:	0010b7c0 	call	10b7c <exit>

0000ea38 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    ea38:	defffe04 	addi	sp,sp,-8
    ea3c:	df000115 	stw	fp,4(sp)
    ea40:	df000104 	addi	fp,sp,4
    ea44:	e13fff15 	stw	r4,-4(fp)
}
    ea48:	0001883a 	nop
    ea4c:	e037883a 	mov	sp,fp
    ea50:	df000017 	ldw	fp,0(sp)
    ea54:	dec00104 	addi	sp,sp,4
    ea58:	f800283a 	ret

0000ea5c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    ea5c:	defffe04 	addi	sp,sp,-8
    ea60:	df000115 	stw	fp,4(sp)
    ea64:	df000104 	addi	fp,sp,4
    ea68:	e13fff15 	stw	r4,-4(fp)
}
    ea6c:	0001883a 	nop
    ea70:	e037883a 	mov	sp,fp
    ea74:	df000017 	ldw	fp,0(sp)
    ea78:	dec00104 	addi	sp,sp,4
    ea7c:	f800283a 	ret

0000ea80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ea80:	defffe04 	addi	sp,sp,-8
    ea84:	dfc00115 	stw	ra,4(sp)
    ea88:	df000015 	stw	fp,0(sp)
    ea8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ea90:	d0a00b17 	ldw	r2,-32724(gp)
    ea94:	10000326 	beq	r2,zero,eaa4 <alt_get_errno+0x24>
    ea98:	d0a00b17 	ldw	r2,-32724(gp)
    ea9c:	103ee83a 	callr	r2
    eaa0:	00000106 	br	eaa8 <alt_get_errno+0x28>
    eaa4:	d0a71804 	addi	r2,gp,-25504
}
    eaa8:	e037883a 	mov	sp,fp
    eaac:	dfc00117 	ldw	ra,4(sp)
    eab0:	df000017 	ldw	fp,0(sp)
    eab4:	dec00204 	addi	sp,sp,8
    eab8:	f800283a 	ret

0000eabc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    eabc:	defff904 	addi	sp,sp,-28
    eac0:	dfc00615 	stw	ra,24(sp)
    eac4:	df000515 	stw	fp,20(sp)
    eac8:	df000504 	addi	fp,sp,20
    eacc:	e13ffd15 	stw	r4,-12(fp)
    ead0:	e17ffe15 	stw	r5,-8(fp)
    ead4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ead8:	e0bffd17 	ldw	r2,-12(fp)
    eadc:	10000616 	blt	r2,zero,eaf8 <read+0x3c>
    eae0:	e0bffd17 	ldw	r2,-12(fp)
    eae4:	10c00324 	muli	r3,r2,12
    eae8:	00800074 	movhi	r2,1
    eaec:	10882804 	addi	r2,r2,8352
    eaf0:	1885883a 	add	r2,r3,r2
    eaf4:	00000106 	br	eafc <read+0x40>
    eaf8:	0005883a 	mov	r2,zero
    eafc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    eb00:	e0bffb17 	ldw	r2,-20(fp)
    eb04:	10002226 	beq	r2,zero,eb90 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    eb08:	e0bffb17 	ldw	r2,-20(fp)
    eb0c:	10800217 	ldw	r2,8(r2)
    eb10:	108000cc 	andi	r2,r2,3
    eb14:	10800060 	cmpeqi	r2,r2,1
    eb18:	1000181e 	bne	r2,zero,eb7c <read+0xc0>
        (fd->dev->read))
    eb1c:	e0bffb17 	ldw	r2,-20(fp)
    eb20:	10800017 	ldw	r2,0(r2)
    eb24:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    eb28:	10001426 	beq	r2,zero,eb7c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    eb2c:	e0bffb17 	ldw	r2,-20(fp)
    eb30:	10800017 	ldw	r2,0(r2)
    eb34:	10800517 	ldw	r2,20(r2)
    eb38:	e0ffff17 	ldw	r3,-4(fp)
    eb3c:	180d883a 	mov	r6,r3
    eb40:	e17ffe17 	ldw	r5,-8(fp)
    eb44:	e13ffb17 	ldw	r4,-20(fp)
    eb48:	103ee83a 	callr	r2
    eb4c:	e0bffc15 	stw	r2,-16(fp)
    eb50:	e0bffc17 	ldw	r2,-16(fp)
    eb54:	1000070e 	bge	r2,zero,eb74 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    eb58:	000ea800 	call	ea80 <alt_get_errno>
    eb5c:	1007883a 	mov	r3,r2
    eb60:	e0bffc17 	ldw	r2,-16(fp)
    eb64:	0085c83a 	sub	r2,zero,r2
    eb68:	18800015 	stw	r2,0(r3)
          return -1;
    eb6c:	00bfffc4 	movi	r2,-1
    eb70:	00000c06 	br	eba4 <read+0xe8>
        }
        return rval;
    eb74:	e0bffc17 	ldw	r2,-16(fp)
    eb78:	00000a06 	br	eba4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    eb7c:	000ea800 	call	ea80 <alt_get_errno>
    eb80:	1007883a 	mov	r3,r2
    eb84:	00800344 	movi	r2,13
    eb88:	18800015 	stw	r2,0(r3)
    eb8c:	00000406 	br	eba0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    eb90:	000ea800 	call	ea80 <alt_get_errno>
    eb94:	1007883a 	mov	r3,r2
    eb98:	00801444 	movi	r2,81
    eb9c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    eba0:	00bfffc4 	movi	r2,-1
}
    eba4:	e037883a 	mov	sp,fp
    eba8:	dfc00117 	ldw	ra,4(sp)
    ebac:	df000017 	ldw	fp,0(sp)
    ebb0:	dec00204 	addi	sp,sp,8
    ebb4:	f800283a 	ret

0000ebb8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ebb8:	defffe04 	addi	sp,sp,-8
    ebbc:	df000115 	stw	fp,4(sp)
    ebc0:	df000104 	addi	fp,sp,4
    ebc4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ebc8:	e0bfff17 	ldw	r2,-4(fp)
    ebcc:	108000d0 	cmplti	r2,r2,3
    ebd0:	10000d1e 	bne	r2,zero,ec08 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    ebd4:	00800074 	movhi	r2,1
    ebd8:	10882804 	addi	r2,r2,8352
    ebdc:	e0ffff17 	ldw	r3,-4(fp)
    ebe0:	18c00324 	muli	r3,r3,12
    ebe4:	10c5883a 	add	r2,r2,r3
    ebe8:	10800204 	addi	r2,r2,8
    ebec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ebf0:	00800074 	movhi	r2,1
    ebf4:	10882804 	addi	r2,r2,8352
    ebf8:	e0ffff17 	ldw	r3,-4(fp)
    ebfc:	18c00324 	muli	r3,r3,12
    ec00:	10c5883a 	add	r2,r2,r3
    ec04:	10000015 	stw	zero,0(r2)
  }
}
    ec08:	0001883a 	nop
    ec0c:	e037883a 	mov	sp,fp
    ec10:	df000017 	ldw	fp,0(sp)
    ec14:	dec00104 	addi	sp,sp,4
    ec18:	f800283a 	ret

0000ec1c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ec1c:	defff904 	addi	sp,sp,-28
    ec20:	df000615 	stw	fp,24(sp)
    ec24:	df000604 	addi	fp,sp,24
    ec28:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ec2c:	0005303a 	rdctl	r2,status
    ec30:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec34:	e0fffe17 	ldw	r3,-8(fp)
    ec38:	00bfff84 	movi	r2,-2
    ec3c:	1884703a 	and	r2,r3,r2
    ec40:	1001703a 	wrctl	status,r2
  
  return context;
    ec44:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    ec48:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ec4c:	d0a00c17 	ldw	r2,-32720(gp)
    ec50:	10c000c4 	addi	r3,r2,3
    ec54:	00bfff04 	movi	r2,-4
    ec58:	1884703a 	and	r2,r3,r2
    ec5c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ec60:	d0e00c17 	ldw	r3,-32720(gp)
    ec64:	e0bfff17 	ldw	r2,-4(fp)
    ec68:	1887883a 	add	r3,r3,r2
    ec6c:	00804034 	movhi	r2,256
    ec70:	10800004 	addi	r2,r2,0
    ec74:	10c0062e 	bgeu	r2,r3,ec90 <sbrk+0x74>
    ec78:	e0bffb17 	ldw	r2,-20(fp)
    ec7c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ec80:	e0bffa17 	ldw	r2,-24(fp)
    ec84:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ec88:	00bfffc4 	movi	r2,-1
    ec8c:	00000b06 	br	ecbc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    ec90:	d0a00c17 	ldw	r2,-32720(gp)
    ec94:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    ec98:	d0e00c17 	ldw	r3,-32720(gp)
    ec9c:	e0bfff17 	ldw	r2,-4(fp)
    eca0:	1885883a 	add	r2,r3,r2
    eca4:	d0a00c15 	stw	r2,-32720(gp)
    eca8:	e0bffb17 	ldw	r2,-20(fp)
    ecac:	e0bffc15 	stw	r2,-16(fp)
    ecb0:	e0bffc17 	ldw	r2,-16(fp)
    ecb4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    ecb8:	e0bffd17 	ldw	r2,-12(fp)
} 
    ecbc:	e037883a 	mov	sp,fp
    ecc0:	df000017 	ldw	fp,0(sp)
    ecc4:	dec00104 	addi	sp,sp,4
    ecc8:	f800283a 	ret

0000eccc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    eccc:	defffd04 	addi	sp,sp,-12
    ecd0:	dfc00215 	stw	ra,8(sp)
    ecd4:	df000115 	stw	fp,4(sp)
    ecd8:	df000104 	addi	fp,sp,4
    ecdc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    ece0:	e13fff17 	ldw	r4,-4(fp)
    ece4:	000fcb80 	call	fcb8 <alt_busy_sleep>
}
    ece8:	e037883a 	mov	sp,fp
    ecec:	dfc00117 	ldw	ra,4(sp)
    ecf0:	df000017 	ldw	fp,0(sp)
    ecf4:	dec00204 	addi	sp,sp,8
    ecf8:	f800283a 	ret

0000ecfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ecfc:	defffe04 	addi	sp,sp,-8
    ed00:	dfc00115 	stw	ra,4(sp)
    ed04:	df000015 	stw	fp,0(sp)
    ed08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ed0c:	d0a00b17 	ldw	r2,-32724(gp)
    ed10:	10000326 	beq	r2,zero,ed20 <alt_get_errno+0x24>
    ed14:	d0a00b17 	ldw	r2,-32724(gp)
    ed18:	103ee83a 	callr	r2
    ed1c:	00000106 	br	ed24 <alt_get_errno+0x28>
    ed20:	d0a71804 	addi	r2,gp,-25504
}
    ed24:	e037883a 	mov	sp,fp
    ed28:	dfc00117 	ldw	ra,4(sp)
    ed2c:	df000017 	ldw	fp,0(sp)
    ed30:	dec00204 	addi	sp,sp,8
    ed34:	f800283a 	ret

0000ed38 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    ed38:	defff904 	addi	sp,sp,-28
    ed3c:	dfc00615 	stw	ra,24(sp)
    ed40:	df000515 	stw	fp,20(sp)
    ed44:	df000504 	addi	fp,sp,20
    ed48:	e13ffd15 	stw	r4,-12(fp)
    ed4c:	e17ffe15 	stw	r5,-8(fp)
    ed50:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ed54:	e0bffd17 	ldw	r2,-12(fp)
    ed58:	10000616 	blt	r2,zero,ed74 <write+0x3c>
    ed5c:	e0bffd17 	ldw	r2,-12(fp)
    ed60:	10c00324 	muli	r3,r2,12
    ed64:	00800074 	movhi	r2,1
    ed68:	10882804 	addi	r2,r2,8352
    ed6c:	1885883a 	add	r2,r3,r2
    ed70:	00000106 	br	ed78 <write+0x40>
    ed74:	0005883a 	mov	r2,zero
    ed78:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ed7c:	e0bffb17 	ldw	r2,-20(fp)
    ed80:	10002126 	beq	r2,zero,ee08 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ed84:	e0bffb17 	ldw	r2,-20(fp)
    ed88:	10800217 	ldw	r2,8(r2)
    ed8c:	108000cc 	andi	r2,r2,3
    ed90:	10001826 	beq	r2,zero,edf4 <write+0xbc>
    ed94:	e0bffb17 	ldw	r2,-20(fp)
    ed98:	10800017 	ldw	r2,0(r2)
    ed9c:	10800617 	ldw	r2,24(r2)
    eda0:	10001426 	beq	r2,zero,edf4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    eda4:	e0bffb17 	ldw	r2,-20(fp)
    eda8:	10800017 	ldw	r2,0(r2)
    edac:	10800617 	ldw	r2,24(r2)
    edb0:	e0ffff17 	ldw	r3,-4(fp)
    edb4:	180d883a 	mov	r6,r3
    edb8:	e17ffe17 	ldw	r5,-8(fp)
    edbc:	e13ffb17 	ldw	r4,-20(fp)
    edc0:	103ee83a 	callr	r2
    edc4:	e0bffc15 	stw	r2,-16(fp)
    edc8:	e0bffc17 	ldw	r2,-16(fp)
    edcc:	1000070e 	bge	r2,zero,edec <write+0xb4>
      {
        ALT_ERRNO = -rval;
    edd0:	000ecfc0 	call	ecfc <alt_get_errno>
    edd4:	1007883a 	mov	r3,r2
    edd8:	e0bffc17 	ldw	r2,-16(fp)
    eddc:	0085c83a 	sub	r2,zero,r2
    ede0:	18800015 	stw	r2,0(r3)
        return -1;
    ede4:	00bfffc4 	movi	r2,-1
    ede8:	00000c06 	br	ee1c <write+0xe4>
      }
      return rval;
    edec:	e0bffc17 	ldw	r2,-16(fp)
    edf0:	00000a06 	br	ee1c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    edf4:	000ecfc0 	call	ecfc <alt_get_errno>
    edf8:	1007883a 	mov	r3,r2
    edfc:	00800344 	movi	r2,13
    ee00:	18800015 	stw	r2,0(r3)
    ee04:	00000406 	br	ee18 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    ee08:	000ecfc0 	call	ecfc <alt_get_errno>
    ee0c:	1007883a 	mov	r3,r2
    ee10:	00801444 	movi	r2,81
    ee14:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ee18:	00bfffc4 	movi	r2,-1
}
    ee1c:	e037883a 	mov	sp,fp
    ee20:	dfc00117 	ldw	ra,4(sp)
    ee24:	df000017 	ldw	fp,0(sp)
    ee28:	dec00204 	addi	sp,sp,8
    ee2c:	f800283a 	ret

0000ee30 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    ee30:	defffd04 	addi	sp,sp,-12
    ee34:	dfc00215 	stw	ra,8(sp)
    ee38:	df000115 	stw	fp,4(sp)
    ee3c:	df000104 	addi	fp,sp,4
    ee40:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    ee44:	d1600804 	addi	r5,gp,-32736
    ee48:	e13fff17 	ldw	r4,-4(fp)
    ee4c:	000fe6c0 	call	fe6c <alt_dev_llist_insert>
}
    ee50:	e037883a 	mov	sp,fp
    ee54:	dfc00117 	ldw	ra,4(sp)
    ee58:	df000017 	ldw	fp,0(sp)
    ee5c:	dec00204 	addi	sp,sp,8
    ee60:	f800283a 	ret

0000ee64 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ee64:	defffd04 	addi	sp,sp,-12
    ee68:	dfc00215 	stw	ra,8(sp)
    ee6c:	df000115 	stw	fp,4(sp)
    ee70:	df000104 	addi	fp,sp,4
    ee74:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    ee78:	00107dc0 	call	107dc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ee7c:	00800044 	movi	r2,1
    ee80:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ee84:	0001883a 	nop
    ee88:	e037883a 	mov	sp,fp
    ee8c:	dfc00117 	ldw	ra,4(sp)
    ee90:	df000017 	ldw	fp,0(sp)
    ee94:	dec00204 	addi	sp,sp,8
    ee98:	f800283a 	ret

0000ee9c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ee9c:	defffe04 	addi	sp,sp,-8
    eea0:	dfc00115 	stw	ra,4(sp)
    eea4:	df000015 	stw	fp,0(sp)
    eea8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    eeac:	00804034 	movhi	r2,256
    eeb0:	10840004 	addi	r2,r2,4096
    eeb4:	d0a71f15 	stw	r2,-25476(gp)
    eeb8:	0080bef4 	movhi	r2,763
    eebc:	10bc2004 	addi	r2,r2,-3968
    eec0:	d0a72015 	stw	r2,-25472(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    eec4:	01c0fa04 	movi	r7,1000
    eec8:	01800104 	movi	r6,4
    eecc:	000b883a 	mov	r5,zero
    eed0:	01004034 	movhi	r4,256
    eed4:	21040804 	addi	r4,r4,4128
    eed8:	000f9f80 	call	f9f8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    eedc:	000d883a 	mov	r6,zero
    eee0:	000b883a 	mov	r5,zero
    eee4:	01000074 	movhi	r4,1
    eee8:	21089204 	addi	r4,r4,8776
    eeec:	000f07c0 	call	f07c <altera_avalon_jtag_uart_init>
    eef0:	01000074 	movhi	r4,1
    eef4:	21088804 	addi	r4,r4,8736
    eef8:	000ee300 	call	ee30 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    eefc:	0001883a 	nop
}
    ef00:	0001883a 	nop
    ef04:	e037883a 	mov	sp,fp
    ef08:	dfc00117 	ldw	ra,4(sp)
    ef0c:	df000017 	ldw	fp,0(sp)
    ef10:	dec00204 	addi	sp,sp,8
    ef14:	f800283a 	ret

0000ef18 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    ef18:	defffa04 	addi	sp,sp,-24
    ef1c:	dfc00515 	stw	ra,20(sp)
    ef20:	df000415 	stw	fp,16(sp)
    ef24:	df000404 	addi	fp,sp,16
    ef28:	e13ffd15 	stw	r4,-12(fp)
    ef2c:	e17ffe15 	stw	r5,-8(fp)
    ef30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ef34:	e0bffd17 	ldw	r2,-12(fp)
    ef38:	10800017 	ldw	r2,0(r2)
    ef3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ef40:	e0bffc17 	ldw	r2,-16(fp)
    ef44:	10c00a04 	addi	r3,r2,40
    ef48:	e0bffd17 	ldw	r2,-12(fp)
    ef4c:	10800217 	ldw	r2,8(r2)
    ef50:	100f883a 	mov	r7,r2
    ef54:	e1bfff17 	ldw	r6,-4(fp)
    ef58:	e17ffe17 	ldw	r5,-8(fp)
    ef5c:	1809883a 	mov	r4,r3
    ef60:	000f5400 	call	f540 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    ef64:	e037883a 	mov	sp,fp
    ef68:	dfc00117 	ldw	ra,4(sp)
    ef6c:	df000017 	ldw	fp,0(sp)
    ef70:	dec00204 	addi	sp,sp,8
    ef74:	f800283a 	ret

0000ef78 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ef78:	defffa04 	addi	sp,sp,-24
    ef7c:	dfc00515 	stw	ra,20(sp)
    ef80:	df000415 	stw	fp,16(sp)
    ef84:	df000404 	addi	fp,sp,16
    ef88:	e13ffd15 	stw	r4,-12(fp)
    ef8c:	e17ffe15 	stw	r5,-8(fp)
    ef90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ef94:	e0bffd17 	ldw	r2,-12(fp)
    ef98:	10800017 	ldw	r2,0(r2)
    ef9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    efa0:	e0bffc17 	ldw	r2,-16(fp)
    efa4:	10c00a04 	addi	r3,r2,40
    efa8:	e0bffd17 	ldw	r2,-12(fp)
    efac:	10800217 	ldw	r2,8(r2)
    efb0:	100f883a 	mov	r7,r2
    efb4:	e1bfff17 	ldw	r6,-4(fp)
    efb8:	e17ffe17 	ldw	r5,-8(fp)
    efbc:	1809883a 	mov	r4,r3
    efc0:	000f75c0 	call	f75c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    efc4:	e037883a 	mov	sp,fp
    efc8:	dfc00117 	ldw	ra,4(sp)
    efcc:	df000017 	ldw	fp,0(sp)
    efd0:	dec00204 	addi	sp,sp,8
    efd4:	f800283a 	ret

0000efd8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    efd8:	defffc04 	addi	sp,sp,-16
    efdc:	dfc00315 	stw	ra,12(sp)
    efe0:	df000215 	stw	fp,8(sp)
    efe4:	df000204 	addi	fp,sp,8
    efe8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    efec:	e0bfff17 	ldw	r2,-4(fp)
    eff0:	10800017 	ldw	r2,0(r2)
    eff4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    eff8:	e0bffe17 	ldw	r2,-8(fp)
    effc:	10c00a04 	addi	r3,r2,40
    f000:	e0bfff17 	ldw	r2,-4(fp)
    f004:	10800217 	ldw	r2,8(r2)
    f008:	100b883a 	mov	r5,r2
    f00c:	1809883a 	mov	r4,r3
    f010:	000f3e80 	call	f3e8 <altera_avalon_jtag_uart_close>
}
    f014:	e037883a 	mov	sp,fp
    f018:	dfc00117 	ldw	ra,4(sp)
    f01c:	df000017 	ldw	fp,0(sp)
    f020:	dec00204 	addi	sp,sp,8
    f024:	f800283a 	ret

0000f028 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f028:	defffa04 	addi	sp,sp,-24
    f02c:	dfc00515 	stw	ra,20(sp)
    f030:	df000415 	stw	fp,16(sp)
    f034:	df000404 	addi	fp,sp,16
    f038:	e13ffd15 	stw	r4,-12(fp)
    f03c:	e17ffe15 	stw	r5,-8(fp)
    f040:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f044:	e0bffd17 	ldw	r2,-12(fp)
    f048:	10800017 	ldw	r2,0(r2)
    f04c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f050:	e0bffc17 	ldw	r2,-16(fp)
    f054:	10800a04 	addi	r2,r2,40
    f058:	e1bfff17 	ldw	r6,-4(fp)
    f05c:	e17ffe17 	ldw	r5,-8(fp)
    f060:	1009883a 	mov	r4,r2
    f064:	000f4500 	call	f450 <altera_avalon_jtag_uart_ioctl>
}
    f068:	e037883a 	mov	sp,fp
    f06c:	dfc00117 	ldw	ra,4(sp)
    f070:	df000017 	ldw	fp,0(sp)
    f074:	dec00204 	addi	sp,sp,8
    f078:	f800283a 	ret

0000f07c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f07c:	defffa04 	addi	sp,sp,-24
    f080:	dfc00515 	stw	ra,20(sp)
    f084:	df000415 	stw	fp,16(sp)
    f088:	df000404 	addi	fp,sp,16
    f08c:	e13ffd15 	stw	r4,-12(fp)
    f090:	e17ffe15 	stw	r5,-8(fp)
    f094:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f098:	e0bffd17 	ldw	r2,-12(fp)
    f09c:	00c00044 	movi	r3,1
    f0a0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f0a4:	e0bffd17 	ldw	r2,-12(fp)
    f0a8:	10800017 	ldw	r2,0(r2)
    f0ac:	10800104 	addi	r2,r2,4
    f0b0:	1007883a 	mov	r3,r2
    f0b4:	e0bffd17 	ldw	r2,-12(fp)
    f0b8:	10800817 	ldw	r2,32(r2)
    f0bc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f0c0:	e0bffe17 	ldw	r2,-8(fp)
    f0c4:	e0ffff17 	ldw	r3,-4(fp)
    f0c8:	d8000015 	stw	zero,0(sp)
    f0cc:	e1fffd17 	ldw	r7,-12(fp)
    f0d0:	01800074 	movhi	r6,1
    f0d4:	31bc4f04 	addi	r6,r6,-3780
    f0d8:	180b883a 	mov	r5,r3
    f0dc:	1009883a 	mov	r4,r2
    f0e0:	00100040 	call	10004 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f0e4:	e0bffd17 	ldw	r2,-12(fp)
    f0e8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f0ec:	e0bffd17 	ldw	r2,-12(fp)
    f0f0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f0f4:	d0e72217 	ldw	r3,-25464(gp)
    f0f8:	e1fffd17 	ldw	r7,-12(fp)
    f0fc:	01800074 	movhi	r6,1
    f100:	31bcd204 	addi	r6,r6,-3256
    f104:	180b883a 	mov	r5,r3
    f108:	1009883a 	mov	r4,r2
    f10c:	000fb8c0 	call	fb8c <alt_alarm_start>
    f110:	1000040e 	bge	r2,zero,f124 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f114:	e0fffd17 	ldw	r3,-12(fp)
    f118:	00a00034 	movhi	r2,32768
    f11c:	10bfffc4 	addi	r2,r2,-1
    f120:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f124:	0001883a 	nop
    f128:	e037883a 	mov	sp,fp
    f12c:	dfc00117 	ldw	ra,4(sp)
    f130:	df000017 	ldw	fp,0(sp)
    f134:	dec00204 	addi	sp,sp,8
    f138:	f800283a 	ret

0000f13c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f13c:	defff804 	addi	sp,sp,-32
    f140:	df000715 	stw	fp,28(sp)
    f144:	df000704 	addi	fp,sp,28
    f148:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f14c:	e0bfff17 	ldw	r2,-4(fp)
    f150:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f154:	e0bffb17 	ldw	r2,-20(fp)
    f158:	10800017 	ldw	r2,0(r2)
    f15c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f160:	e0bffc17 	ldw	r2,-16(fp)
    f164:	10800104 	addi	r2,r2,4
    f168:	10800037 	ldwio	r2,0(r2)
    f16c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f170:	e0bffd17 	ldw	r2,-12(fp)
    f174:	1080c00c 	andi	r2,r2,768
    f178:	10006d26 	beq	r2,zero,f330 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f17c:	e0bffd17 	ldw	r2,-12(fp)
    f180:	1080400c 	andi	r2,r2,256
    f184:	10003526 	beq	r2,zero,f25c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f188:	00800074 	movhi	r2,1
    f18c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f190:	e0bffb17 	ldw	r2,-20(fp)
    f194:	10800a17 	ldw	r2,40(r2)
    f198:	10800044 	addi	r2,r2,1
    f19c:	1081ffcc 	andi	r2,r2,2047
    f1a0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f1a4:	e0bffb17 	ldw	r2,-20(fp)
    f1a8:	10c00b17 	ldw	r3,44(r2)
    f1ac:	e0bffe17 	ldw	r2,-8(fp)
    f1b0:	18801526 	beq	r3,r2,f208 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f1b4:	e0bffc17 	ldw	r2,-16(fp)
    f1b8:	10800037 	ldwio	r2,0(r2)
    f1bc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f1c0:	e0bff917 	ldw	r2,-28(fp)
    f1c4:	10a0000c 	andi	r2,r2,32768
    f1c8:	10001126 	beq	r2,zero,f210 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f1cc:	e0bffb17 	ldw	r2,-20(fp)
    f1d0:	10800a17 	ldw	r2,40(r2)
    f1d4:	e0fff917 	ldw	r3,-28(fp)
    f1d8:	1809883a 	mov	r4,r3
    f1dc:	e0fffb17 	ldw	r3,-20(fp)
    f1e0:	1885883a 	add	r2,r3,r2
    f1e4:	10800e04 	addi	r2,r2,56
    f1e8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f1ec:	e0bffb17 	ldw	r2,-20(fp)
    f1f0:	10800a17 	ldw	r2,40(r2)
    f1f4:	10800044 	addi	r2,r2,1
    f1f8:	10c1ffcc 	andi	r3,r2,2047
    f1fc:	e0bffb17 	ldw	r2,-20(fp)
    f200:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f204:	003fe206 	br	f190 <__alt_data_end+0xff00f190>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f208:	0001883a 	nop
    f20c:	00000106 	br	f214 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f210:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f214:	e0bff917 	ldw	r2,-28(fp)
    f218:	10bfffec 	andhi	r2,r2,65535
    f21c:	10000f26 	beq	r2,zero,f25c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f220:	e0bffb17 	ldw	r2,-20(fp)
    f224:	10c00817 	ldw	r3,32(r2)
    f228:	00bfff84 	movi	r2,-2
    f22c:	1886703a 	and	r3,r3,r2
    f230:	e0bffb17 	ldw	r2,-20(fp)
    f234:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f238:	e0bffc17 	ldw	r2,-16(fp)
    f23c:	10800104 	addi	r2,r2,4
    f240:	1007883a 	mov	r3,r2
    f244:	e0bffb17 	ldw	r2,-20(fp)
    f248:	10800817 	ldw	r2,32(r2)
    f24c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f250:	e0bffc17 	ldw	r2,-16(fp)
    f254:	10800104 	addi	r2,r2,4
    f258:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f25c:	e0bffd17 	ldw	r2,-12(fp)
    f260:	1080800c 	andi	r2,r2,512
    f264:	103fbe26 	beq	r2,zero,f160 <__alt_data_end+0xff00f160>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f268:	e0bffd17 	ldw	r2,-12(fp)
    f26c:	1004d43a 	srli	r2,r2,16
    f270:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f274:	00001406 	br	f2c8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f278:	e0bffc17 	ldw	r2,-16(fp)
    f27c:	e0fffb17 	ldw	r3,-20(fp)
    f280:	18c00d17 	ldw	r3,52(r3)
    f284:	e13ffb17 	ldw	r4,-20(fp)
    f288:	20c7883a 	add	r3,r4,r3
    f28c:	18c20e04 	addi	r3,r3,2104
    f290:	18c00003 	ldbu	r3,0(r3)
    f294:	18c03fcc 	andi	r3,r3,255
    f298:	18c0201c 	xori	r3,r3,128
    f29c:	18ffe004 	addi	r3,r3,-128
    f2a0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f2a4:	e0bffb17 	ldw	r2,-20(fp)
    f2a8:	10800d17 	ldw	r2,52(r2)
    f2ac:	10800044 	addi	r2,r2,1
    f2b0:	10c1ffcc 	andi	r3,r2,2047
    f2b4:	e0bffb17 	ldw	r2,-20(fp)
    f2b8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f2bc:	e0bffa17 	ldw	r2,-24(fp)
    f2c0:	10bfffc4 	addi	r2,r2,-1
    f2c4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f2c8:	e0bffa17 	ldw	r2,-24(fp)
    f2cc:	10000526 	beq	r2,zero,f2e4 <altera_avalon_jtag_uart_irq+0x1a8>
    f2d0:	e0bffb17 	ldw	r2,-20(fp)
    f2d4:	10c00d17 	ldw	r3,52(r2)
    f2d8:	e0bffb17 	ldw	r2,-20(fp)
    f2dc:	10800c17 	ldw	r2,48(r2)
    f2e0:	18bfe51e 	bne	r3,r2,f278 <__alt_data_end+0xff00f278>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f2e4:	e0bffa17 	ldw	r2,-24(fp)
    f2e8:	103f9d26 	beq	r2,zero,f160 <__alt_data_end+0xff00f160>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f2ec:	e0bffb17 	ldw	r2,-20(fp)
    f2f0:	10c00817 	ldw	r3,32(r2)
    f2f4:	00bfff44 	movi	r2,-3
    f2f8:	1886703a 	and	r3,r3,r2
    f2fc:	e0bffb17 	ldw	r2,-20(fp)
    f300:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f304:	e0bffb17 	ldw	r2,-20(fp)
    f308:	10800017 	ldw	r2,0(r2)
    f30c:	10800104 	addi	r2,r2,4
    f310:	1007883a 	mov	r3,r2
    f314:	e0bffb17 	ldw	r2,-20(fp)
    f318:	10800817 	ldw	r2,32(r2)
    f31c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f320:	e0bffc17 	ldw	r2,-16(fp)
    f324:	10800104 	addi	r2,r2,4
    f328:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f32c:	003f8c06 	br	f160 <__alt_data_end+0xff00f160>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    f330:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    f334:	0001883a 	nop
    f338:	e037883a 	mov	sp,fp
    f33c:	df000017 	ldw	fp,0(sp)
    f340:	dec00104 	addi	sp,sp,4
    f344:	f800283a 	ret

0000f348 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f348:	defff804 	addi	sp,sp,-32
    f34c:	df000715 	stw	fp,28(sp)
    f350:	df000704 	addi	fp,sp,28
    f354:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f358:	e0bffb17 	ldw	r2,-20(fp)
    f35c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f360:	e0bff917 	ldw	r2,-28(fp)
    f364:	10800017 	ldw	r2,0(r2)
    f368:	10800104 	addi	r2,r2,4
    f36c:	10800037 	ldwio	r2,0(r2)
    f370:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f374:	e0bffa17 	ldw	r2,-24(fp)
    f378:	1081000c 	andi	r2,r2,1024
    f37c:	10000b26 	beq	r2,zero,f3ac <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f380:	e0bff917 	ldw	r2,-28(fp)
    f384:	10800017 	ldw	r2,0(r2)
    f388:	10800104 	addi	r2,r2,4
    f38c:	1007883a 	mov	r3,r2
    f390:	e0bff917 	ldw	r2,-28(fp)
    f394:	10800817 	ldw	r2,32(r2)
    f398:	10810014 	ori	r2,r2,1024
    f39c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f3a0:	e0bff917 	ldw	r2,-28(fp)
    f3a4:	10000915 	stw	zero,36(r2)
    f3a8:	00000a06 	br	f3d4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f3ac:	e0bff917 	ldw	r2,-28(fp)
    f3b0:	10c00917 	ldw	r3,36(r2)
    f3b4:	00a00034 	movhi	r2,32768
    f3b8:	10bfff04 	addi	r2,r2,-4
    f3bc:	10c00536 	bltu	r2,r3,f3d4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f3c0:	e0bff917 	ldw	r2,-28(fp)
    f3c4:	10800917 	ldw	r2,36(r2)
    f3c8:	10c00044 	addi	r3,r2,1
    f3cc:	e0bff917 	ldw	r2,-28(fp)
    f3d0:	10c00915 	stw	r3,36(r2)
    f3d4:	d0a72217 	ldw	r2,-25464(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f3d8:	e037883a 	mov	sp,fp
    f3dc:	df000017 	ldw	fp,0(sp)
    f3e0:	dec00104 	addi	sp,sp,4
    f3e4:	f800283a 	ret

0000f3e8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f3e8:	defffd04 	addi	sp,sp,-12
    f3ec:	df000215 	stw	fp,8(sp)
    f3f0:	df000204 	addi	fp,sp,8
    f3f4:	e13ffe15 	stw	r4,-8(fp)
    f3f8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f3fc:	00000506 	br	f414 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f400:	e0bfff17 	ldw	r2,-4(fp)
    f404:	1090000c 	andi	r2,r2,16384
    f408:	10000226 	beq	r2,zero,f414 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f40c:	00bffd44 	movi	r2,-11
    f410:	00000b06 	br	f440 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f414:	e0bffe17 	ldw	r2,-8(fp)
    f418:	10c00d17 	ldw	r3,52(r2)
    f41c:	e0bffe17 	ldw	r2,-8(fp)
    f420:	10800c17 	ldw	r2,48(r2)
    f424:	18800526 	beq	r3,r2,f43c <altera_avalon_jtag_uart_close+0x54>
    f428:	e0bffe17 	ldw	r2,-8(fp)
    f42c:	10c00917 	ldw	r3,36(r2)
    f430:	e0bffe17 	ldw	r2,-8(fp)
    f434:	10800117 	ldw	r2,4(r2)
    f438:	18bff136 	bltu	r3,r2,f400 <__alt_data_end+0xff00f400>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f43c:	0005883a 	mov	r2,zero
}
    f440:	e037883a 	mov	sp,fp
    f444:	df000017 	ldw	fp,0(sp)
    f448:	dec00104 	addi	sp,sp,4
    f44c:	f800283a 	ret

0000f450 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f450:	defffa04 	addi	sp,sp,-24
    f454:	df000515 	stw	fp,20(sp)
    f458:	df000504 	addi	fp,sp,20
    f45c:	e13ffd15 	stw	r4,-12(fp)
    f460:	e17ffe15 	stw	r5,-8(fp)
    f464:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f468:	00bff9c4 	movi	r2,-25
    f46c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f470:	e0bffe17 	ldw	r2,-8(fp)
    f474:	10da8060 	cmpeqi	r3,r2,27137
    f478:	1800031e 	bne	r3,zero,f488 <altera_avalon_jtag_uart_ioctl+0x38>
    f47c:	109a80a0 	cmpeqi	r2,r2,27138
    f480:	1000181e 	bne	r2,zero,f4e4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    f484:	00002906 	br	f52c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f488:	e0bffd17 	ldw	r2,-12(fp)
    f48c:	10c00117 	ldw	r3,4(r2)
    f490:	00a00034 	movhi	r2,32768
    f494:	10bfffc4 	addi	r2,r2,-1
    f498:	18802126 	beq	r3,r2,f520 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    f49c:	e0bfff17 	ldw	r2,-4(fp)
    f4a0:	10800017 	ldw	r2,0(r2)
    f4a4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f4a8:	e0bffc17 	ldw	r2,-16(fp)
    f4ac:	10800090 	cmplti	r2,r2,2
    f4b0:	1000061e 	bne	r2,zero,f4cc <altera_avalon_jtag_uart_ioctl+0x7c>
    f4b4:	e0fffc17 	ldw	r3,-16(fp)
    f4b8:	00a00034 	movhi	r2,32768
    f4bc:	10bfffc4 	addi	r2,r2,-1
    f4c0:	18800226 	beq	r3,r2,f4cc <altera_avalon_jtag_uart_ioctl+0x7c>
    f4c4:	e0bffc17 	ldw	r2,-16(fp)
    f4c8:	00000206 	br	f4d4 <altera_avalon_jtag_uart_ioctl+0x84>
    f4cc:	00a00034 	movhi	r2,32768
    f4d0:	10bfff84 	addi	r2,r2,-2
    f4d4:	e0fffd17 	ldw	r3,-12(fp)
    f4d8:	18800115 	stw	r2,4(r3)
      rc = 0;
    f4dc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f4e0:	00000f06 	br	f520 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f4e4:	e0bffd17 	ldw	r2,-12(fp)
    f4e8:	10c00117 	ldw	r3,4(r2)
    f4ec:	00a00034 	movhi	r2,32768
    f4f0:	10bfffc4 	addi	r2,r2,-1
    f4f4:	18800c26 	beq	r3,r2,f528 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f4f8:	e0bffd17 	ldw	r2,-12(fp)
    f4fc:	10c00917 	ldw	r3,36(r2)
    f500:	e0bffd17 	ldw	r2,-12(fp)
    f504:	10800117 	ldw	r2,4(r2)
    f508:	1885803a 	cmpltu	r2,r3,r2
    f50c:	10c03fcc 	andi	r3,r2,255
    f510:	e0bfff17 	ldw	r2,-4(fp)
    f514:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f518:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f51c:	00000206 	br	f528 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    f520:	0001883a 	nop
    f524:	00000106 	br	f52c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    f528:	0001883a 	nop

  default:
    break;
  }

  return rc;
    f52c:	e0bffb17 	ldw	r2,-20(fp)
}
    f530:	e037883a 	mov	sp,fp
    f534:	df000017 	ldw	fp,0(sp)
    f538:	dec00104 	addi	sp,sp,4
    f53c:	f800283a 	ret

0000f540 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f540:	defff304 	addi	sp,sp,-52
    f544:	dfc00c15 	stw	ra,48(sp)
    f548:	df000b15 	stw	fp,44(sp)
    f54c:	df000b04 	addi	fp,sp,44
    f550:	e13ffc15 	stw	r4,-16(fp)
    f554:	e17ffd15 	stw	r5,-12(fp)
    f558:	e1bffe15 	stw	r6,-8(fp)
    f55c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    f560:	e0bffd17 	ldw	r2,-12(fp)
    f564:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f568:	00004706 	br	f688 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f56c:	e0bffc17 	ldw	r2,-16(fp)
    f570:	10800a17 	ldw	r2,40(r2)
    f574:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    f578:	e0bffc17 	ldw	r2,-16(fp)
    f57c:	10800b17 	ldw	r2,44(r2)
    f580:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    f584:	e0fff717 	ldw	r3,-36(fp)
    f588:	e0bff817 	ldw	r2,-32(fp)
    f58c:	18800536 	bltu	r3,r2,f5a4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    f590:	e0fff717 	ldw	r3,-36(fp)
    f594:	e0bff817 	ldw	r2,-32(fp)
    f598:	1885c83a 	sub	r2,r3,r2
    f59c:	e0bff615 	stw	r2,-40(fp)
    f5a0:	00000406 	br	f5b4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f5a4:	00c20004 	movi	r3,2048
    f5a8:	e0bff817 	ldw	r2,-32(fp)
    f5ac:	1885c83a 	sub	r2,r3,r2
    f5b0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f5b4:	e0bff617 	ldw	r2,-40(fp)
    f5b8:	10001e26 	beq	r2,zero,f634 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    f5bc:	e0fffe17 	ldw	r3,-8(fp)
    f5c0:	e0bff617 	ldw	r2,-40(fp)
    f5c4:	1880022e 	bgeu	r3,r2,f5d0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    f5c8:	e0bffe17 	ldw	r2,-8(fp)
    f5cc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    f5d0:	e0bffc17 	ldw	r2,-16(fp)
    f5d4:	10c00e04 	addi	r3,r2,56
    f5d8:	e0bff817 	ldw	r2,-32(fp)
    f5dc:	1885883a 	add	r2,r3,r2
    f5e0:	e1bff617 	ldw	r6,-40(fp)
    f5e4:	100b883a 	mov	r5,r2
    f5e8:	e13ff517 	ldw	r4,-44(fp)
    f5ec:	00078700 	call	7870 <memcpy>
      ptr   += n;
    f5f0:	e0fff517 	ldw	r3,-44(fp)
    f5f4:	e0bff617 	ldw	r2,-40(fp)
    f5f8:	1885883a 	add	r2,r3,r2
    f5fc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    f600:	e0fffe17 	ldw	r3,-8(fp)
    f604:	e0bff617 	ldw	r2,-40(fp)
    f608:	1885c83a 	sub	r2,r3,r2
    f60c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f610:	e0fff817 	ldw	r3,-32(fp)
    f614:	e0bff617 	ldw	r2,-40(fp)
    f618:	1885883a 	add	r2,r3,r2
    f61c:	10c1ffcc 	andi	r3,r2,2047
    f620:	e0bffc17 	ldw	r2,-16(fp)
    f624:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    f628:	e0bffe17 	ldw	r2,-8(fp)
    f62c:	00bfcf16 	blt	zero,r2,f56c <__alt_data_end+0xff00f56c>
    f630:	00000106 	br	f638 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    f634:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    f638:	e0fff517 	ldw	r3,-44(fp)
    f63c:	e0bffd17 	ldw	r2,-12(fp)
    f640:	1880141e 	bne	r3,r2,f694 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f644:	e0bfff17 	ldw	r2,-4(fp)
    f648:	1090000c 	andi	r2,r2,16384
    f64c:	1000131e 	bne	r2,zero,f69c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f650:	0001883a 	nop
    f654:	e0bffc17 	ldw	r2,-16(fp)
    f658:	10c00a17 	ldw	r3,40(r2)
    f65c:	e0bff717 	ldw	r2,-36(fp)
    f660:	1880051e 	bne	r3,r2,f678 <altera_avalon_jtag_uart_read+0x138>
    f664:	e0bffc17 	ldw	r2,-16(fp)
    f668:	10c00917 	ldw	r3,36(r2)
    f66c:	e0bffc17 	ldw	r2,-16(fp)
    f670:	10800117 	ldw	r2,4(r2)
    f674:	18bff736 	bltu	r3,r2,f654 <__alt_data_end+0xff00f654>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f678:	e0bffc17 	ldw	r2,-16(fp)
    f67c:	10c00a17 	ldw	r3,40(r2)
    f680:	e0bff717 	ldw	r2,-36(fp)
    f684:	18800726 	beq	r3,r2,f6a4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f688:	e0bffe17 	ldw	r2,-8(fp)
    f68c:	00bfb716 	blt	zero,r2,f56c <__alt_data_end+0xff00f56c>
    f690:	00000506 	br	f6a8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    f694:	0001883a 	nop
    f698:	00000306 	br	f6a8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    f69c:	0001883a 	nop
    f6a0:	00000106 	br	f6a8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    f6a4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    f6a8:	e0fff517 	ldw	r3,-44(fp)
    f6ac:	e0bffd17 	ldw	r2,-12(fp)
    f6b0:	18801826 	beq	r3,r2,f714 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f6b4:	0005303a 	rdctl	r2,status
    f6b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f6bc:	e0fffb17 	ldw	r3,-20(fp)
    f6c0:	00bfff84 	movi	r2,-2
    f6c4:	1884703a 	and	r2,r3,r2
    f6c8:	1001703a 	wrctl	status,r2
  
  return context;
    f6cc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    f6d0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f6d4:	e0bffc17 	ldw	r2,-16(fp)
    f6d8:	10800817 	ldw	r2,32(r2)
    f6dc:	10c00054 	ori	r3,r2,1
    f6e0:	e0bffc17 	ldw	r2,-16(fp)
    f6e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f6e8:	e0bffc17 	ldw	r2,-16(fp)
    f6ec:	10800017 	ldw	r2,0(r2)
    f6f0:	10800104 	addi	r2,r2,4
    f6f4:	1007883a 	mov	r3,r2
    f6f8:	e0bffc17 	ldw	r2,-16(fp)
    f6fc:	10800817 	ldw	r2,32(r2)
    f700:	18800035 	stwio	r2,0(r3)
    f704:	e0bffa17 	ldw	r2,-24(fp)
    f708:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f70c:	e0bff917 	ldw	r2,-28(fp)
    f710:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    f714:	e0fff517 	ldw	r3,-44(fp)
    f718:	e0bffd17 	ldw	r2,-12(fp)
    f71c:	18800426 	beq	r3,r2,f730 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    f720:	e0fff517 	ldw	r3,-44(fp)
    f724:	e0bffd17 	ldw	r2,-12(fp)
    f728:	1885c83a 	sub	r2,r3,r2
    f72c:	00000606 	br	f748 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    f730:	e0bfff17 	ldw	r2,-4(fp)
    f734:	1090000c 	andi	r2,r2,16384
    f738:	10000226 	beq	r2,zero,f744 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    f73c:	00bffd44 	movi	r2,-11
    f740:	00000106 	br	f748 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    f744:	00bffec4 	movi	r2,-5
}
    f748:	e037883a 	mov	sp,fp
    f74c:	dfc00117 	ldw	ra,4(sp)
    f750:	df000017 	ldw	fp,0(sp)
    f754:	dec00204 	addi	sp,sp,8
    f758:	f800283a 	ret

0000f75c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f75c:	defff304 	addi	sp,sp,-52
    f760:	dfc00c15 	stw	ra,48(sp)
    f764:	df000b15 	stw	fp,44(sp)
    f768:	df000b04 	addi	fp,sp,44
    f76c:	e13ffc15 	stw	r4,-16(fp)
    f770:	e17ffd15 	stw	r5,-12(fp)
    f774:	e1bffe15 	stw	r6,-8(fp)
    f778:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    f77c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    f780:	e0bffd17 	ldw	r2,-12(fp)
    f784:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f788:	00003706 	br	f868 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f78c:	e0bffc17 	ldw	r2,-16(fp)
    f790:	10800c17 	ldw	r2,48(r2)
    f794:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    f798:	e0bffc17 	ldw	r2,-16(fp)
    f79c:	10800d17 	ldw	r2,52(r2)
    f7a0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    f7a4:	e0fff917 	ldw	r3,-28(fp)
    f7a8:	e0bff517 	ldw	r2,-44(fp)
    f7ac:	1880062e 	bgeu	r3,r2,f7c8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    f7b0:	e0fff517 	ldw	r3,-44(fp)
    f7b4:	e0bff917 	ldw	r2,-28(fp)
    f7b8:	1885c83a 	sub	r2,r3,r2
    f7bc:	10bfffc4 	addi	r2,r2,-1
    f7c0:	e0bff615 	stw	r2,-40(fp)
    f7c4:	00000b06 	br	f7f4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    f7c8:	e0bff517 	ldw	r2,-44(fp)
    f7cc:	10000526 	beq	r2,zero,f7e4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f7d0:	00c20004 	movi	r3,2048
    f7d4:	e0bff917 	ldw	r2,-28(fp)
    f7d8:	1885c83a 	sub	r2,r3,r2
    f7dc:	e0bff615 	stw	r2,-40(fp)
    f7e0:	00000406 	br	f7f4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f7e4:	00c1ffc4 	movi	r3,2047
    f7e8:	e0bff917 	ldw	r2,-28(fp)
    f7ec:	1885c83a 	sub	r2,r3,r2
    f7f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f7f4:	e0bff617 	ldw	r2,-40(fp)
    f7f8:	10001e26 	beq	r2,zero,f874 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    f7fc:	e0fffe17 	ldw	r3,-8(fp)
    f800:	e0bff617 	ldw	r2,-40(fp)
    f804:	1880022e 	bgeu	r3,r2,f810 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    f808:	e0bffe17 	ldw	r2,-8(fp)
    f80c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    f810:	e0bffc17 	ldw	r2,-16(fp)
    f814:	10c20e04 	addi	r3,r2,2104
    f818:	e0bff917 	ldw	r2,-28(fp)
    f81c:	1885883a 	add	r2,r3,r2
    f820:	e1bff617 	ldw	r6,-40(fp)
    f824:	e17ffd17 	ldw	r5,-12(fp)
    f828:	1009883a 	mov	r4,r2
    f82c:	00078700 	call	7870 <memcpy>
      ptr   += n;
    f830:	e0fffd17 	ldw	r3,-12(fp)
    f834:	e0bff617 	ldw	r2,-40(fp)
    f838:	1885883a 	add	r2,r3,r2
    f83c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    f840:	e0fffe17 	ldw	r3,-8(fp)
    f844:	e0bff617 	ldw	r2,-40(fp)
    f848:	1885c83a 	sub	r2,r3,r2
    f84c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f850:	e0fff917 	ldw	r3,-28(fp)
    f854:	e0bff617 	ldw	r2,-40(fp)
    f858:	1885883a 	add	r2,r3,r2
    f85c:	10c1ffcc 	andi	r3,r2,2047
    f860:	e0bffc17 	ldw	r2,-16(fp)
    f864:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f868:	e0bffe17 	ldw	r2,-8(fp)
    f86c:	00bfc716 	blt	zero,r2,f78c <__alt_data_end+0xff00f78c>
    f870:	00000106 	br	f878 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    f874:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f878:	0005303a 	rdctl	r2,status
    f87c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f880:	e0fffb17 	ldw	r3,-20(fp)
    f884:	00bfff84 	movi	r2,-2
    f888:	1884703a 	and	r2,r3,r2
    f88c:	1001703a 	wrctl	status,r2
  
  return context;
    f890:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    f894:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f898:	e0bffc17 	ldw	r2,-16(fp)
    f89c:	10800817 	ldw	r2,32(r2)
    f8a0:	10c00094 	ori	r3,r2,2
    f8a4:	e0bffc17 	ldw	r2,-16(fp)
    f8a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f8ac:	e0bffc17 	ldw	r2,-16(fp)
    f8b0:	10800017 	ldw	r2,0(r2)
    f8b4:	10800104 	addi	r2,r2,4
    f8b8:	1007883a 	mov	r3,r2
    f8bc:	e0bffc17 	ldw	r2,-16(fp)
    f8c0:	10800817 	ldw	r2,32(r2)
    f8c4:	18800035 	stwio	r2,0(r3)
    f8c8:	e0bffa17 	ldw	r2,-24(fp)
    f8cc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f8d0:	e0bff817 	ldw	r2,-32(fp)
    f8d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f8d8:	e0bffe17 	ldw	r2,-8(fp)
    f8dc:	0080100e 	bge	zero,r2,f920 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    f8e0:	e0bfff17 	ldw	r2,-4(fp)
    f8e4:	1090000c 	andi	r2,r2,16384
    f8e8:	1000101e 	bne	r2,zero,f92c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f8ec:	0001883a 	nop
    f8f0:	e0bffc17 	ldw	r2,-16(fp)
    f8f4:	10c00d17 	ldw	r3,52(r2)
    f8f8:	e0bff517 	ldw	r2,-44(fp)
    f8fc:	1880051e 	bne	r3,r2,f914 <altera_avalon_jtag_uart_write+0x1b8>
    f900:	e0bffc17 	ldw	r2,-16(fp)
    f904:	10c00917 	ldw	r3,36(r2)
    f908:	e0bffc17 	ldw	r2,-16(fp)
    f90c:	10800117 	ldw	r2,4(r2)
    f910:	18bff736 	bltu	r3,r2,f8f0 <__alt_data_end+0xff00f8f0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f914:	e0bffc17 	ldw	r2,-16(fp)
    f918:	10800917 	ldw	r2,36(r2)
    f91c:	1000051e 	bne	r2,zero,f934 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    f920:	e0bffe17 	ldw	r2,-8(fp)
    f924:	00bfd016 	blt	zero,r2,f868 <__alt_data_end+0xff00f868>
    f928:	00000306 	br	f938 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    f92c:	0001883a 	nop
    f930:	00000106 	br	f938 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    f934:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f938:	e0fffd17 	ldw	r3,-12(fp)
    f93c:	e0bff717 	ldw	r2,-36(fp)
    f940:	18800426 	beq	r3,r2,f954 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    f944:	e0fffd17 	ldw	r3,-12(fp)
    f948:	e0bff717 	ldw	r2,-36(fp)
    f94c:	1885c83a 	sub	r2,r3,r2
    f950:	00000606 	br	f96c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    f954:	e0bfff17 	ldw	r2,-4(fp)
    f958:	1090000c 	andi	r2,r2,16384
    f95c:	10000226 	beq	r2,zero,f968 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    f960:	00bffd44 	movi	r2,-11
    f964:	00000106 	br	f96c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f968:	00bffec4 	movi	r2,-5
}
    f96c:	e037883a 	mov	sp,fp
    f970:	dfc00117 	ldw	ra,4(sp)
    f974:	df000017 	ldw	fp,0(sp)
    f978:	dec00204 	addi	sp,sp,8
    f97c:	f800283a 	ret

0000f980 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    f980:	defffa04 	addi	sp,sp,-24
    f984:	dfc00515 	stw	ra,20(sp)
    f988:	df000415 	stw	fp,16(sp)
    f98c:	df000404 	addi	fp,sp,16
    f990:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    f994:	0007883a 	mov	r3,zero
    f998:	e0bfff17 	ldw	r2,-4(fp)
    f99c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    f9a0:	e0bfff17 	ldw	r2,-4(fp)
    f9a4:	10800104 	addi	r2,r2,4
    f9a8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f9ac:	0005303a 	rdctl	r2,status
    f9b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f9b4:	e0fffd17 	ldw	r3,-12(fp)
    f9b8:	00bfff84 	movi	r2,-2
    f9bc:	1884703a 	and	r2,r3,r2
    f9c0:	1001703a 	wrctl	status,r2
  
  return context;
    f9c4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    f9c8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    f9cc:	00106d40 	call	106d4 <alt_tick>
    f9d0:	e0bffc17 	ldw	r2,-16(fp)
    f9d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f9d8:	e0bffe17 	ldw	r2,-8(fp)
    f9dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    f9e0:	0001883a 	nop
    f9e4:	e037883a 	mov	sp,fp
    f9e8:	dfc00117 	ldw	ra,4(sp)
    f9ec:	df000017 	ldw	fp,0(sp)
    f9f0:	dec00204 	addi	sp,sp,8
    f9f4:	f800283a 	ret

0000f9f8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    f9f8:	defff804 	addi	sp,sp,-32
    f9fc:	dfc00715 	stw	ra,28(sp)
    fa00:	df000615 	stw	fp,24(sp)
    fa04:	df000604 	addi	fp,sp,24
    fa08:	e13ffc15 	stw	r4,-16(fp)
    fa0c:	e17ffd15 	stw	r5,-12(fp)
    fa10:	e1bffe15 	stw	r6,-8(fp)
    fa14:	e1ffff15 	stw	r7,-4(fp)
    fa18:	e0bfff17 	ldw	r2,-4(fp)
    fa1c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    fa20:	d0a72217 	ldw	r2,-25464(gp)
    fa24:	1000021e 	bne	r2,zero,fa30 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    fa28:	e0bffb17 	ldw	r2,-20(fp)
    fa2c:	d0a72215 	stw	r2,-25464(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    fa30:	e0bffc17 	ldw	r2,-16(fp)
    fa34:	10800104 	addi	r2,r2,4
    fa38:	00c001c4 	movi	r3,7
    fa3c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    fa40:	d8000015 	stw	zero,0(sp)
    fa44:	e1fffc17 	ldw	r7,-16(fp)
    fa48:	01800074 	movhi	r6,1
    fa4c:	31be6004 	addi	r6,r6,-1664
    fa50:	e17ffe17 	ldw	r5,-8(fp)
    fa54:	e13ffd17 	ldw	r4,-12(fp)
    fa58:	00100040 	call	10004 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    fa5c:	0001883a 	nop
    fa60:	e037883a 	mov	sp,fp
    fa64:	dfc00117 	ldw	ra,4(sp)
    fa68:	df000017 	ldw	fp,0(sp)
    fa6c:	dec00204 	addi	sp,sp,8
    fa70:	f800283a 	ret

0000fa74 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    fa74:	defffe04 	addi	sp,sp,-8
    fa78:	df000115 	stw	fp,4(sp)
    fa7c:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
    fa80:	d0a71f17 	ldw	r2,-25476(gp)
    fa84:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
    fa88:	d0a72017 	ldw	r2,-25472(gp)
    fa8c:	1000021e 	bne	r2,zero,fa98 <alt_timestamp_start+0x24>
  {
    return -1;
    fa90:	00bfffc4 	movi	r2,-1
    fa94:	00001106 	br	fadc <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    fa98:	e0bfff17 	ldw	r2,-4(fp)
    fa9c:	10800104 	addi	r2,r2,4
    faa0:	00c00204 	movi	r3,8
    faa4:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    faa8:	e0bfff17 	ldw	r2,-4(fp)
    faac:	10800204 	addi	r2,r2,8
    fab0:	00ffffd4 	movui	r3,65535
    fab4:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    fab8:	e0bfff17 	ldw	r2,-4(fp)
    fabc:	10800304 	addi	r2,r2,12
    fac0:	00ffffd4 	movui	r3,65535
    fac4:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    fac8:	e0bfff17 	ldw	r2,-4(fp)
    facc:	10800104 	addi	r2,r2,4
    fad0:	00c00104 	movi	r3,4
    fad4:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
    fad8:	0005883a 	mov	r2,zero
}
    fadc:	e037883a 	mov	sp,fp
    fae0:	df000017 	ldw	fp,0(sp)
    fae4:	dec00104 	addi	sp,sp,4
    fae8:	f800283a 	ret

0000faec <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    faec:	defffc04 	addi	sp,sp,-16
    faf0:	df000315 	stw	fp,12(sp)
    faf4:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
    faf8:	d0a71f17 	ldw	r2,-25476(gp)
    fafc:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
    fb00:	d0a72017 	ldw	r2,-25472(gp)
    fb04:	1000021e 	bne	r2,zero,fb10 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    fb08:	00bfffc4 	movi	r2,-1
    fb0c:	00001306 	br	fb5c <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    fb10:	e0bffd17 	ldw	r2,-12(fp)
    fb14:	10800404 	addi	r2,r2,16
    fb18:	0007883a 	mov	r3,zero
    fb1c:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    fb20:	e0bffd17 	ldw	r2,-12(fp)
    fb24:	10800404 	addi	r2,r2,16
    fb28:	10800037 	ldwio	r2,0(r2)
    fb2c:	10bfffcc 	andi	r2,r2,65535
    fb30:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    fb34:	e0bffd17 	ldw	r2,-12(fp)
    fb38:	10800504 	addi	r2,r2,20
    fb3c:	10800037 	ldwio	r2,0(r2)
    fb40:	10bfffcc 	andi	r2,r2,65535
    fb44:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    fb48:	e0bfff17 	ldw	r2,-4(fp)
    fb4c:	1006943a 	slli	r3,r2,16
    fb50:	e0bffe17 	ldw	r2,-8(fp)
    fb54:	1884b03a 	or	r2,r3,r2
    fb58:	0084303a 	nor	r2,zero,r2
#endif
  }
}
    fb5c:	e037883a 	mov	sp,fp
    fb60:	df000017 	ldw	fp,0(sp)
    fb64:	dec00104 	addi	sp,sp,4
    fb68:	f800283a 	ret

0000fb6c <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    fb6c:	deffff04 	addi	sp,sp,-4
    fb70:	df000015 	stw	fp,0(sp)
    fb74:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    fb78:	d0a72017 	ldw	r2,-25472(gp)
}
    fb7c:	e037883a 	mov	sp,fp
    fb80:	df000017 	ldw	fp,0(sp)
    fb84:	dec00104 	addi	sp,sp,4
    fb88:	f800283a 	ret

0000fb8c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    fb8c:	defff504 	addi	sp,sp,-44
    fb90:	df000a15 	stw	fp,40(sp)
    fb94:	df000a04 	addi	fp,sp,40
    fb98:	e13ffc15 	stw	r4,-16(fp)
    fb9c:	e17ffd15 	stw	r5,-12(fp)
    fba0:	e1bffe15 	stw	r6,-8(fp)
    fba4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    fba8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    fbac:	d0a72217 	ldw	r2,-25464(gp)
  
  if (alt_ticks_per_second ())
    fbb0:	10003c26 	beq	r2,zero,fca4 <alt_alarm_start+0x118>
  {
    if (alarm)
    fbb4:	e0bffc17 	ldw	r2,-16(fp)
    fbb8:	10003826 	beq	r2,zero,fc9c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    fbbc:	e0bffc17 	ldw	r2,-16(fp)
    fbc0:	e0fffe17 	ldw	r3,-8(fp)
    fbc4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    fbc8:	e0bffc17 	ldw	r2,-16(fp)
    fbcc:	e0ffff17 	ldw	r3,-4(fp)
    fbd0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fbd4:	0005303a 	rdctl	r2,status
    fbd8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fbdc:	e0fff917 	ldw	r3,-28(fp)
    fbe0:	00bfff84 	movi	r2,-2
    fbe4:	1884703a 	and	r2,r3,r2
    fbe8:	1001703a 	wrctl	status,r2
  
  return context;
    fbec:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    fbf0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    fbf4:	d0a72317 	ldw	r2,-25460(gp)
      
      current_nticks = alt_nticks();
    fbf8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    fbfc:	e0fffd17 	ldw	r3,-12(fp)
    fc00:	e0bff617 	ldw	r2,-40(fp)
    fc04:	1885883a 	add	r2,r3,r2
    fc08:	10c00044 	addi	r3,r2,1
    fc0c:	e0bffc17 	ldw	r2,-16(fp)
    fc10:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    fc14:	e0bffc17 	ldw	r2,-16(fp)
    fc18:	10c00217 	ldw	r3,8(r2)
    fc1c:	e0bff617 	ldw	r2,-40(fp)
    fc20:	1880042e 	bgeu	r3,r2,fc34 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    fc24:	e0bffc17 	ldw	r2,-16(fp)
    fc28:	00c00044 	movi	r3,1
    fc2c:	10c00405 	stb	r3,16(r2)
    fc30:	00000206 	br	fc3c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    fc34:	e0bffc17 	ldw	r2,-16(fp)
    fc38:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    fc3c:	e0bffc17 	ldw	r2,-16(fp)
    fc40:	d0e00e04 	addi	r3,gp,-32712
    fc44:	e0fffa15 	stw	r3,-24(fp)
    fc48:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fc4c:	e0bffb17 	ldw	r2,-20(fp)
    fc50:	e0fffa17 	ldw	r3,-24(fp)
    fc54:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fc58:	e0bffa17 	ldw	r2,-24(fp)
    fc5c:	10c00017 	ldw	r3,0(r2)
    fc60:	e0bffb17 	ldw	r2,-20(fp)
    fc64:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fc68:	e0bffa17 	ldw	r2,-24(fp)
    fc6c:	10800017 	ldw	r2,0(r2)
    fc70:	e0fffb17 	ldw	r3,-20(fp)
    fc74:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fc78:	e0bffa17 	ldw	r2,-24(fp)
    fc7c:	e0fffb17 	ldw	r3,-20(fp)
    fc80:	10c00015 	stw	r3,0(r2)
    fc84:	e0bff817 	ldw	r2,-32(fp)
    fc88:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc8c:	e0bff717 	ldw	r2,-36(fp)
    fc90:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    fc94:	0005883a 	mov	r2,zero
    fc98:	00000306 	br	fca8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    fc9c:	00bffa84 	movi	r2,-22
    fca0:	00000106 	br	fca8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    fca4:	00bfde84 	movi	r2,-134
  }
}
    fca8:	e037883a 	mov	sp,fp
    fcac:	df000017 	ldw	fp,0(sp)
    fcb0:	dec00104 	addi	sp,sp,4
    fcb4:	f800283a 	ret

0000fcb8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    fcb8:	defffa04 	addi	sp,sp,-24
    fcbc:	dfc00515 	stw	ra,20(sp)
    fcc0:	df000415 	stw	fp,16(sp)
    fcc4:	df000404 	addi	fp,sp,16
    fcc8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    fccc:	008000c4 	movi	r2,3
    fcd0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    fcd4:	e0fffd17 	ldw	r3,-12(fp)
    fcd8:	008003f4 	movhi	r2,15
    fcdc:	10909004 	addi	r2,r2,16960
    fce0:	1885383a 	mul	r2,r3,r2
    fce4:	100b883a 	mov	r5,r2
    fce8:	0100bef4 	movhi	r4,763
    fcec:	213c2004 	addi	r4,r4,-3968
    fcf0:	0001c6c0 	call	1c6c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    fcf4:	100b883a 	mov	r5,r2
    fcf8:	01200034 	movhi	r4,32768
    fcfc:	213fffc4 	addi	r4,r4,-1
    fd00:	0001c6c0 	call	1c6c <__udivsi3>
    fd04:	100b883a 	mov	r5,r2
    fd08:	e13fff17 	ldw	r4,-4(fp)
    fd0c:	0001c6c0 	call	1c6c <__udivsi3>
    fd10:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    fd14:	e0bffe17 	ldw	r2,-8(fp)
    fd18:	10002a26 	beq	r2,zero,fdc4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    fd1c:	e03ffc15 	stw	zero,-16(fp)
    fd20:	00001706 	br	fd80 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    fd24:	00a00034 	movhi	r2,32768
    fd28:	10bfffc4 	addi	r2,r2,-1
    fd2c:	10bfffc4 	addi	r2,r2,-1
    fd30:	103ffe1e 	bne	r2,zero,fd2c <__alt_data_end+0xff00fd2c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    fd34:	e0fffd17 	ldw	r3,-12(fp)
    fd38:	008003f4 	movhi	r2,15
    fd3c:	10909004 	addi	r2,r2,16960
    fd40:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    fd44:	100b883a 	mov	r5,r2
    fd48:	0100bef4 	movhi	r4,763
    fd4c:	213c2004 	addi	r4,r4,-3968
    fd50:	0001c6c0 	call	1c6c <__udivsi3>
    fd54:	100b883a 	mov	r5,r2
    fd58:	01200034 	movhi	r4,32768
    fd5c:	213fffc4 	addi	r4,r4,-1
    fd60:	0001c6c0 	call	1c6c <__udivsi3>
    fd64:	1007883a 	mov	r3,r2
    fd68:	e0bfff17 	ldw	r2,-4(fp)
    fd6c:	10c5c83a 	sub	r2,r2,r3
    fd70:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    fd74:	e0bffc17 	ldw	r2,-16(fp)
    fd78:	10800044 	addi	r2,r2,1
    fd7c:	e0bffc15 	stw	r2,-16(fp)
    fd80:	e0fffc17 	ldw	r3,-16(fp)
    fd84:	e0bffe17 	ldw	r2,-8(fp)
    fd88:	18bfe616 	blt	r3,r2,fd24 <__alt_data_end+0xff00fd24>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fd8c:	e0fffd17 	ldw	r3,-12(fp)
    fd90:	008003f4 	movhi	r2,15
    fd94:	10909004 	addi	r2,r2,16960
    fd98:	1885383a 	mul	r2,r3,r2
    fd9c:	100b883a 	mov	r5,r2
    fda0:	0100bef4 	movhi	r4,763
    fda4:	213c2004 	addi	r4,r4,-3968
    fda8:	0001c6c0 	call	1c6c <__udivsi3>
    fdac:	1007883a 	mov	r3,r2
    fdb0:	e0bfff17 	ldw	r2,-4(fp)
    fdb4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    fdb8:	10bfffc4 	addi	r2,r2,-1
    fdbc:	103ffe1e 	bne	r2,zero,fdb8 <__alt_data_end+0xff00fdb8>
    fdc0:	00000d06 	br	fdf8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fdc4:	e0fffd17 	ldw	r3,-12(fp)
    fdc8:	008003f4 	movhi	r2,15
    fdcc:	10909004 	addi	r2,r2,16960
    fdd0:	1885383a 	mul	r2,r3,r2
    fdd4:	100b883a 	mov	r5,r2
    fdd8:	0100bef4 	movhi	r4,763
    fddc:	213c2004 	addi	r4,r4,-3968
    fde0:	0001c6c0 	call	1c6c <__udivsi3>
    fde4:	1007883a 	mov	r3,r2
    fde8:	e0bfff17 	ldw	r2,-4(fp)
    fdec:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    fdf0:	10bfffc4 	addi	r2,r2,-1
    fdf4:	00bffe16 	blt	zero,r2,fdf0 <__alt_data_end+0xff00fdf0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    fdf8:	0005883a 	mov	r2,zero
}
    fdfc:	e037883a 	mov	sp,fp
    fe00:	dfc00117 	ldw	ra,4(sp)
    fe04:	df000017 	ldw	fp,0(sp)
    fe08:	dec00204 	addi	sp,sp,8
    fe0c:	f800283a 	ret

0000fe10 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    fe10:	deffff04 	addi	sp,sp,-4
    fe14:	df000015 	stw	fp,0(sp)
    fe18:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    fe1c:	0001883a 	nop
    fe20:	e037883a 	mov	sp,fp
    fe24:	df000017 	ldw	fp,0(sp)
    fe28:	dec00104 	addi	sp,sp,4
    fe2c:	f800283a 	ret

0000fe30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fe30:	defffe04 	addi	sp,sp,-8
    fe34:	dfc00115 	stw	ra,4(sp)
    fe38:	df000015 	stw	fp,0(sp)
    fe3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fe40:	d0a00b17 	ldw	r2,-32724(gp)
    fe44:	10000326 	beq	r2,zero,fe54 <alt_get_errno+0x24>
    fe48:	d0a00b17 	ldw	r2,-32724(gp)
    fe4c:	103ee83a 	callr	r2
    fe50:	00000106 	br	fe58 <alt_get_errno+0x28>
    fe54:	d0a71804 	addi	r2,gp,-25504
}
    fe58:	e037883a 	mov	sp,fp
    fe5c:	dfc00117 	ldw	ra,4(sp)
    fe60:	df000017 	ldw	fp,0(sp)
    fe64:	dec00204 	addi	sp,sp,8
    fe68:	f800283a 	ret

0000fe6c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    fe6c:	defffa04 	addi	sp,sp,-24
    fe70:	dfc00515 	stw	ra,20(sp)
    fe74:	df000415 	stw	fp,16(sp)
    fe78:	df000404 	addi	fp,sp,16
    fe7c:	e13ffe15 	stw	r4,-8(fp)
    fe80:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    fe84:	e0bffe17 	ldw	r2,-8(fp)
    fe88:	10000326 	beq	r2,zero,fe98 <alt_dev_llist_insert+0x2c>
    fe8c:	e0bffe17 	ldw	r2,-8(fp)
    fe90:	10800217 	ldw	r2,8(r2)
    fe94:	1000061e 	bne	r2,zero,feb0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    fe98:	000fe300 	call	fe30 <alt_get_errno>
    fe9c:	1007883a 	mov	r3,r2
    fea0:	00800584 	movi	r2,22
    fea4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    fea8:	00bffa84 	movi	r2,-22
    feac:	00001306 	br	fefc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    feb0:	e0bffe17 	ldw	r2,-8(fp)
    feb4:	e0ffff17 	ldw	r3,-4(fp)
    feb8:	e0fffc15 	stw	r3,-16(fp)
    febc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fec0:	e0bffd17 	ldw	r2,-12(fp)
    fec4:	e0fffc17 	ldw	r3,-16(fp)
    fec8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fecc:	e0bffc17 	ldw	r2,-16(fp)
    fed0:	10c00017 	ldw	r3,0(r2)
    fed4:	e0bffd17 	ldw	r2,-12(fp)
    fed8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fedc:	e0bffc17 	ldw	r2,-16(fp)
    fee0:	10800017 	ldw	r2,0(r2)
    fee4:	e0fffd17 	ldw	r3,-12(fp)
    fee8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    feec:	e0bffc17 	ldw	r2,-16(fp)
    fef0:	e0fffd17 	ldw	r3,-12(fp)
    fef4:	10c00015 	stw	r3,0(r2)

  return 0;  
    fef8:	0005883a 	mov	r2,zero
}
    fefc:	e037883a 	mov	sp,fp
    ff00:	dfc00117 	ldw	ra,4(sp)
    ff04:	df000017 	ldw	fp,0(sp)
    ff08:	dec00204 	addi	sp,sp,8
    ff0c:	f800283a 	ret

0000ff10 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    ff10:	defffd04 	addi	sp,sp,-12
    ff14:	dfc00215 	stw	ra,8(sp)
    ff18:	df000115 	stw	fp,4(sp)
    ff1c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ff20:	00800074 	movhi	r2,1
    ff24:	1083be04 	addi	r2,r2,3832
    ff28:	e0bfff15 	stw	r2,-4(fp)
    ff2c:	00000606 	br	ff48 <_do_ctors+0x38>
        (*ctor) (); 
    ff30:	e0bfff17 	ldw	r2,-4(fp)
    ff34:	10800017 	ldw	r2,0(r2)
    ff38:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ff3c:	e0bfff17 	ldw	r2,-4(fp)
    ff40:	10bfff04 	addi	r2,r2,-4
    ff44:	e0bfff15 	stw	r2,-4(fp)
    ff48:	e0ffff17 	ldw	r3,-4(fp)
    ff4c:	00800074 	movhi	r2,1
    ff50:	1083bf04 	addi	r2,r2,3836
    ff54:	18bff62e 	bgeu	r3,r2,ff30 <__alt_data_end+0xff00ff30>
        (*ctor) (); 
}
    ff58:	0001883a 	nop
    ff5c:	e037883a 	mov	sp,fp
    ff60:	dfc00117 	ldw	ra,4(sp)
    ff64:	df000017 	ldw	fp,0(sp)
    ff68:	dec00204 	addi	sp,sp,8
    ff6c:	f800283a 	ret

0000ff70 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    ff70:	defffd04 	addi	sp,sp,-12
    ff74:	dfc00215 	stw	ra,8(sp)
    ff78:	df000115 	stw	fp,4(sp)
    ff7c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ff80:	00800074 	movhi	r2,1
    ff84:	1083be04 	addi	r2,r2,3832
    ff88:	e0bfff15 	stw	r2,-4(fp)
    ff8c:	00000606 	br	ffa8 <_do_dtors+0x38>
        (*dtor) (); 
    ff90:	e0bfff17 	ldw	r2,-4(fp)
    ff94:	10800017 	ldw	r2,0(r2)
    ff98:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ff9c:	e0bfff17 	ldw	r2,-4(fp)
    ffa0:	10bfff04 	addi	r2,r2,-4
    ffa4:	e0bfff15 	stw	r2,-4(fp)
    ffa8:	e0ffff17 	ldw	r3,-4(fp)
    ffac:	00800074 	movhi	r2,1
    ffb0:	1083bf04 	addi	r2,r2,3836
    ffb4:	18bff62e 	bgeu	r3,r2,ff90 <__alt_data_end+0xff00ff90>
        (*dtor) (); 
}
    ffb8:	0001883a 	nop
    ffbc:	e037883a 	mov	sp,fp
    ffc0:	dfc00117 	ldw	ra,4(sp)
    ffc4:	df000017 	ldw	fp,0(sp)
    ffc8:	dec00204 	addi	sp,sp,8
    ffcc:	f800283a 	ret

0000ffd0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    ffd0:	defffe04 	addi	sp,sp,-8
    ffd4:	dfc00115 	stw	ra,4(sp)
    ffd8:	df000015 	stw	fp,0(sp)
    ffdc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    ffe0:	01440004 	movi	r5,4096
    ffe4:	0009883a 	mov	r4,zero
    ffe8:	0010a3c0 	call	10a3c <alt_icache_flush>
#endif
}
    ffec:	0001883a 	nop
    fff0:	e037883a 	mov	sp,fp
    fff4:	dfc00117 	ldw	ra,4(sp)
    fff8:	df000017 	ldw	fp,0(sp)
    fffc:	dec00204 	addi	sp,sp,8
   10000:	f800283a 	ret

00010004 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10004:	defff904 	addi	sp,sp,-28
   10008:	dfc00615 	stw	ra,24(sp)
   1000c:	df000515 	stw	fp,20(sp)
   10010:	df000504 	addi	fp,sp,20
   10014:	e13ffc15 	stw	r4,-16(fp)
   10018:	e17ffd15 	stw	r5,-12(fp)
   1001c:	e1bffe15 	stw	r6,-8(fp)
   10020:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10024:	e0800217 	ldw	r2,8(fp)
   10028:	d8800015 	stw	r2,0(sp)
   1002c:	e1ffff17 	ldw	r7,-4(fp)
   10030:	e1bffe17 	ldw	r6,-8(fp)
   10034:	e17ffd17 	ldw	r5,-12(fp)
   10038:	e13ffc17 	ldw	r4,-16(fp)
   1003c:	00101b40 	call	101b4 <alt_iic_isr_register>
}  
   10040:	e037883a 	mov	sp,fp
   10044:	dfc00117 	ldw	ra,4(sp)
   10048:	df000017 	ldw	fp,0(sp)
   1004c:	dec00204 	addi	sp,sp,8
   10050:	f800283a 	ret

00010054 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10054:	defff904 	addi	sp,sp,-28
   10058:	df000615 	stw	fp,24(sp)
   1005c:	df000604 	addi	fp,sp,24
   10060:	e13ffe15 	stw	r4,-8(fp)
   10064:	e17fff15 	stw	r5,-4(fp)
   10068:	e0bfff17 	ldw	r2,-4(fp)
   1006c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10070:	0005303a 	rdctl	r2,status
   10074:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10078:	e0fffb17 	ldw	r3,-20(fp)
   1007c:	00bfff84 	movi	r2,-2
   10080:	1884703a 	and	r2,r3,r2
   10084:	1001703a 	wrctl	status,r2
  
  return context;
   10088:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1008c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10090:	00c00044 	movi	r3,1
   10094:	e0bffa17 	ldw	r2,-24(fp)
   10098:	1884983a 	sll	r2,r3,r2
   1009c:	1007883a 	mov	r3,r2
   100a0:	d0a72117 	ldw	r2,-25468(gp)
   100a4:	1884b03a 	or	r2,r3,r2
   100a8:	d0a72115 	stw	r2,-25468(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   100ac:	d0a72117 	ldw	r2,-25468(gp)
   100b0:	100170fa 	wrctl	ienable,r2
   100b4:	e0bffc17 	ldw	r2,-16(fp)
   100b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   100bc:	e0bffd17 	ldw	r2,-12(fp)
   100c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   100c4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   100c8:	0001883a 	nop
}
   100cc:	e037883a 	mov	sp,fp
   100d0:	df000017 	ldw	fp,0(sp)
   100d4:	dec00104 	addi	sp,sp,4
   100d8:	f800283a 	ret

000100dc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   100dc:	defff904 	addi	sp,sp,-28
   100e0:	df000615 	stw	fp,24(sp)
   100e4:	df000604 	addi	fp,sp,24
   100e8:	e13ffe15 	stw	r4,-8(fp)
   100ec:	e17fff15 	stw	r5,-4(fp)
   100f0:	e0bfff17 	ldw	r2,-4(fp)
   100f4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   100f8:	0005303a 	rdctl	r2,status
   100fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10100:	e0fffb17 	ldw	r3,-20(fp)
   10104:	00bfff84 	movi	r2,-2
   10108:	1884703a 	and	r2,r3,r2
   1010c:	1001703a 	wrctl	status,r2
  
  return context;
   10110:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10114:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10118:	00c00044 	movi	r3,1
   1011c:	e0bffa17 	ldw	r2,-24(fp)
   10120:	1884983a 	sll	r2,r3,r2
   10124:	0084303a 	nor	r2,zero,r2
   10128:	1007883a 	mov	r3,r2
   1012c:	d0a72117 	ldw	r2,-25468(gp)
   10130:	1884703a 	and	r2,r3,r2
   10134:	d0a72115 	stw	r2,-25468(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10138:	d0a72117 	ldw	r2,-25468(gp)
   1013c:	100170fa 	wrctl	ienable,r2
   10140:	e0bffc17 	ldw	r2,-16(fp)
   10144:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10148:	e0bffd17 	ldw	r2,-12(fp)
   1014c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10150:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10154:	0001883a 	nop
}
   10158:	e037883a 	mov	sp,fp
   1015c:	df000017 	ldw	fp,0(sp)
   10160:	dec00104 	addi	sp,sp,4
   10164:	f800283a 	ret

00010168 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10168:	defffc04 	addi	sp,sp,-16
   1016c:	df000315 	stw	fp,12(sp)
   10170:	df000304 	addi	fp,sp,12
   10174:	e13ffe15 	stw	r4,-8(fp)
   10178:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1017c:	000530fa 	rdctl	r2,ienable
   10180:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10184:	00c00044 	movi	r3,1
   10188:	e0bfff17 	ldw	r2,-4(fp)
   1018c:	1884983a 	sll	r2,r3,r2
   10190:	1007883a 	mov	r3,r2
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	1884703a 	and	r2,r3,r2
   1019c:	1004c03a 	cmpne	r2,r2,zero
   101a0:	10803fcc 	andi	r2,r2,255
}
   101a4:	e037883a 	mov	sp,fp
   101a8:	df000017 	ldw	fp,0(sp)
   101ac:	dec00104 	addi	sp,sp,4
   101b0:	f800283a 	ret

000101b4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   101b4:	defff504 	addi	sp,sp,-44
   101b8:	dfc00a15 	stw	ra,40(sp)
   101bc:	df000915 	stw	fp,36(sp)
   101c0:	df000904 	addi	fp,sp,36
   101c4:	e13ffc15 	stw	r4,-16(fp)
   101c8:	e17ffd15 	stw	r5,-12(fp)
   101cc:	e1bffe15 	stw	r6,-8(fp)
   101d0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   101d4:	00bffa84 	movi	r2,-22
   101d8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   101dc:	e0bffd17 	ldw	r2,-12(fp)
   101e0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   101e4:	e0bff817 	ldw	r2,-32(fp)
   101e8:	10800808 	cmpgei	r2,r2,32
   101ec:	1000271e 	bne	r2,zero,1028c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   101f0:	0005303a 	rdctl	r2,status
   101f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   101f8:	e0fffb17 	ldw	r3,-20(fp)
   101fc:	00bfff84 	movi	r2,-2
   10200:	1884703a 	and	r2,r3,r2
   10204:	1001703a 	wrctl	status,r2
  
  return context;
   10208:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1020c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10210:	00800074 	movhi	r2,1
   10214:	1093cf04 	addi	r2,r2,20284
   10218:	e0fff817 	ldw	r3,-32(fp)
   1021c:	180690fa 	slli	r3,r3,3
   10220:	10c5883a 	add	r2,r2,r3
   10224:	e0fffe17 	ldw	r3,-8(fp)
   10228:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1022c:	00800074 	movhi	r2,1
   10230:	1093cf04 	addi	r2,r2,20284
   10234:	e0fff817 	ldw	r3,-32(fp)
   10238:	180690fa 	slli	r3,r3,3
   1023c:	10c5883a 	add	r2,r2,r3
   10240:	10800104 	addi	r2,r2,4
   10244:	e0ffff17 	ldw	r3,-4(fp)
   10248:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1024c:	e0bffe17 	ldw	r2,-8(fp)
   10250:	10000526 	beq	r2,zero,10268 <alt_iic_isr_register+0xb4>
   10254:	e0bff817 	ldw	r2,-32(fp)
   10258:	100b883a 	mov	r5,r2
   1025c:	e13ffc17 	ldw	r4,-16(fp)
   10260:	00100540 	call	10054 <alt_ic_irq_enable>
   10264:	00000406 	br	10278 <alt_iic_isr_register+0xc4>
   10268:	e0bff817 	ldw	r2,-32(fp)
   1026c:	100b883a 	mov	r5,r2
   10270:	e13ffc17 	ldw	r4,-16(fp)
   10274:	00100dc0 	call	100dc <alt_ic_irq_disable>
   10278:	e0bff715 	stw	r2,-36(fp)
   1027c:	e0bffa17 	ldw	r2,-24(fp)
   10280:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10284:	e0bff917 	ldw	r2,-28(fp)
   10288:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1028c:	e0bff717 	ldw	r2,-36(fp)
}
   10290:	e037883a 	mov	sp,fp
   10294:	dfc00117 	ldw	ra,4(sp)
   10298:	df000017 	ldw	fp,0(sp)
   1029c:	dec00204 	addi	sp,sp,8
   102a0:	f800283a 	ret

000102a4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   102a4:	defff904 	addi	sp,sp,-28
   102a8:	dfc00615 	stw	ra,24(sp)
   102ac:	df000515 	stw	fp,20(sp)
   102b0:	df000504 	addi	fp,sp,20
   102b4:	e13ffc15 	stw	r4,-16(fp)
   102b8:	e17ffd15 	stw	r5,-12(fp)
   102bc:	e1bffe15 	stw	r6,-8(fp)
   102c0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   102c4:	e1bfff17 	ldw	r6,-4(fp)
   102c8:	e17ffe17 	ldw	r5,-8(fp)
   102cc:	e13ffd17 	ldw	r4,-12(fp)
   102d0:	00104e40 	call	104e4 <open>
   102d4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   102d8:	e0bffb17 	ldw	r2,-20(fp)
   102dc:	10001c16 	blt	r2,zero,10350 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   102e0:	00800074 	movhi	r2,1
   102e4:	10882804 	addi	r2,r2,8352
   102e8:	e0fffb17 	ldw	r3,-20(fp)
   102ec:	18c00324 	muli	r3,r3,12
   102f0:	10c5883a 	add	r2,r2,r3
   102f4:	10c00017 	ldw	r3,0(r2)
   102f8:	e0bffc17 	ldw	r2,-16(fp)
   102fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10300:	00800074 	movhi	r2,1
   10304:	10882804 	addi	r2,r2,8352
   10308:	e0fffb17 	ldw	r3,-20(fp)
   1030c:	18c00324 	muli	r3,r3,12
   10310:	10c5883a 	add	r2,r2,r3
   10314:	10800104 	addi	r2,r2,4
   10318:	10c00017 	ldw	r3,0(r2)
   1031c:	e0bffc17 	ldw	r2,-16(fp)
   10320:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10324:	00800074 	movhi	r2,1
   10328:	10882804 	addi	r2,r2,8352
   1032c:	e0fffb17 	ldw	r3,-20(fp)
   10330:	18c00324 	muli	r3,r3,12
   10334:	10c5883a 	add	r2,r2,r3
   10338:	10800204 	addi	r2,r2,8
   1033c:	10c00017 	ldw	r3,0(r2)
   10340:	e0bffc17 	ldw	r2,-16(fp)
   10344:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10348:	e13ffb17 	ldw	r4,-20(fp)
   1034c:	000ebb80 	call	ebb8 <alt_release_fd>
  }
} 
   10350:	0001883a 	nop
   10354:	e037883a 	mov	sp,fp
   10358:	dfc00117 	ldw	ra,4(sp)
   1035c:	df000017 	ldw	fp,0(sp)
   10360:	dec00204 	addi	sp,sp,8
   10364:	f800283a 	ret

00010368 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10368:	defffb04 	addi	sp,sp,-20
   1036c:	dfc00415 	stw	ra,16(sp)
   10370:	df000315 	stw	fp,12(sp)
   10374:	df000304 	addi	fp,sp,12
   10378:	e13ffd15 	stw	r4,-12(fp)
   1037c:	e17ffe15 	stw	r5,-8(fp)
   10380:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10384:	01c07fc4 	movi	r7,511
   10388:	01800044 	movi	r6,1
   1038c:	e17ffd17 	ldw	r5,-12(fp)
   10390:	01000074 	movhi	r4,1
   10394:	21082b04 	addi	r4,r4,8364
   10398:	00102a40 	call	102a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1039c:	01c07fc4 	movi	r7,511
   103a0:	000d883a 	mov	r6,zero
   103a4:	e17ffe17 	ldw	r5,-8(fp)
   103a8:	01000074 	movhi	r4,1
   103ac:	21082804 	addi	r4,r4,8352
   103b0:	00102a40 	call	102a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   103b4:	01c07fc4 	movi	r7,511
   103b8:	01800044 	movi	r6,1
   103bc:	e17fff17 	ldw	r5,-4(fp)
   103c0:	01000074 	movhi	r4,1
   103c4:	21082e04 	addi	r4,r4,8376
   103c8:	00102a40 	call	102a4 <alt_open_fd>
}  
   103cc:	0001883a 	nop
   103d0:	e037883a 	mov	sp,fp
   103d4:	dfc00117 	ldw	ra,4(sp)
   103d8:	df000017 	ldw	fp,0(sp)
   103dc:	dec00204 	addi	sp,sp,8
   103e0:	f800283a 	ret

000103e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   103e4:	defffe04 	addi	sp,sp,-8
   103e8:	dfc00115 	stw	ra,4(sp)
   103ec:	df000015 	stw	fp,0(sp)
   103f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   103f4:	d0a00b17 	ldw	r2,-32724(gp)
   103f8:	10000326 	beq	r2,zero,10408 <alt_get_errno+0x24>
   103fc:	d0a00b17 	ldw	r2,-32724(gp)
   10400:	103ee83a 	callr	r2
   10404:	00000106 	br	1040c <alt_get_errno+0x28>
   10408:	d0a71804 	addi	r2,gp,-25504
}
   1040c:	e037883a 	mov	sp,fp
   10410:	dfc00117 	ldw	ra,4(sp)
   10414:	df000017 	ldw	fp,0(sp)
   10418:	dec00204 	addi	sp,sp,8
   1041c:	f800283a 	ret

00010420 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10420:	defffd04 	addi	sp,sp,-12
   10424:	df000215 	stw	fp,8(sp)
   10428:	df000204 	addi	fp,sp,8
   1042c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10430:	e0bfff17 	ldw	r2,-4(fp)
   10434:	10800217 	ldw	r2,8(r2)
   10438:	10d00034 	orhi	r3,r2,16384
   1043c:	e0bfff17 	ldw	r2,-4(fp)
   10440:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10444:	e03ffe15 	stw	zero,-8(fp)
   10448:	00001d06 	br	104c0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1044c:	00800074 	movhi	r2,1
   10450:	10882804 	addi	r2,r2,8352
   10454:	e0fffe17 	ldw	r3,-8(fp)
   10458:	18c00324 	muli	r3,r3,12
   1045c:	10c5883a 	add	r2,r2,r3
   10460:	10c00017 	ldw	r3,0(r2)
   10464:	e0bfff17 	ldw	r2,-4(fp)
   10468:	10800017 	ldw	r2,0(r2)
   1046c:	1880111e 	bne	r3,r2,104b4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10470:	00800074 	movhi	r2,1
   10474:	10882804 	addi	r2,r2,8352
   10478:	e0fffe17 	ldw	r3,-8(fp)
   1047c:	18c00324 	muli	r3,r3,12
   10480:	10c5883a 	add	r2,r2,r3
   10484:	10800204 	addi	r2,r2,8
   10488:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1048c:	1000090e 	bge	r2,zero,104b4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   10490:	e0bffe17 	ldw	r2,-8(fp)
   10494:	10c00324 	muli	r3,r2,12
   10498:	00800074 	movhi	r2,1
   1049c:	10882804 	addi	r2,r2,8352
   104a0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   104a4:	e0bfff17 	ldw	r2,-4(fp)
   104a8:	18800226 	beq	r3,r2,104b4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   104ac:	00bffcc4 	movi	r2,-13
   104b0:	00000806 	br	104d4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   104b4:	e0bffe17 	ldw	r2,-8(fp)
   104b8:	10800044 	addi	r2,r2,1
   104bc:	e0bffe15 	stw	r2,-8(fp)
   104c0:	d0a00a17 	ldw	r2,-32728(gp)
   104c4:	1007883a 	mov	r3,r2
   104c8:	e0bffe17 	ldw	r2,-8(fp)
   104cc:	18bfdf2e 	bgeu	r3,r2,1044c <__alt_data_end+0xff01044c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   104d0:	0005883a 	mov	r2,zero
}
   104d4:	e037883a 	mov	sp,fp
   104d8:	df000017 	ldw	fp,0(sp)
   104dc:	dec00104 	addi	sp,sp,4
   104e0:	f800283a 	ret

000104e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   104e4:	defff604 	addi	sp,sp,-40
   104e8:	dfc00915 	stw	ra,36(sp)
   104ec:	df000815 	stw	fp,32(sp)
   104f0:	df000804 	addi	fp,sp,32
   104f4:	e13ffd15 	stw	r4,-12(fp)
   104f8:	e17ffe15 	stw	r5,-8(fp)
   104fc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10500:	00bfffc4 	movi	r2,-1
   10504:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10508:	00bffb44 	movi	r2,-19
   1050c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10510:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10514:	d1600804 	addi	r5,gp,-32736
   10518:	e13ffd17 	ldw	r4,-12(fp)
   1051c:	00108000 	call	10800 <alt_find_dev>
   10520:	e0bff815 	stw	r2,-32(fp)
   10524:	e0bff817 	ldw	r2,-32(fp)
   10528:	1000051e 	bne	r2,zero,10540 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1052c:	e13ffd17 	ldw	r4,-12(fp)
   10530:	00108900 	call	10890 <alt_find_file>
   10534:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10538:	00800044 	movi	r2,1
   1053c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10540:	e0bff817 	ldw	r2,-32(fp)
   10544:	10002926 	beq	r2,zero,105ec <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10548:	e13ff817 	ldw	r4,-32(fp)
   1054c:	00109980 	call	10998 <alt_get_fd>
   10550:	e0bff915 	stw	r2,-28(fp)
   10554:	e0bff917 	ldw	r2,-28(fp)
   10558:	1000030e 	bge	r2,zero,10568 <open+0x84>
    {
      status = index;
   1055c:	e0bff917 	ldw	r2,-28(fp)
   10560:	e0bffa15 	stw	r2,-24(fp)
   10564:	00002306 	br	105f4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   10568:	e0bff917 	ldw	r2,-28(fp)
   1056c:	10c00324 	muli	r3,r2,12
   10570:	00800074 	movhi	r2,1
   10574:	10882804 	addi	r2,r2,8352
   10578:	1885883a 	add	r2,r3,r2
   1057c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10580:	e0fffe17 	ldw	r3,-8(fp)
   10584:	00900034 	movhi	r2,16384
   10588:	10bfffc4 	addi	r2,r2,-1
   1058c:	1886703a 	and	r3,r3,r2
   10590:	e0bffc17 	ldw	r2,-16(fp)
   10594:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10598:	e0bffb17 	ldw	r2,-20(fp)
   1059c:	1000051e 	bne	r2,zero,105b4 <open+0xd0>
   105a0:	e13ffc17 	ldw	r4,-16(fp)
   105a4:	00104200 	call	10420 <alt_file_locked>
   105a8:	e0bffa15 	stw	r2,-24(fp)
   105ac:	e0bffa17 	ldw	r2,-24(fp)
   105b0:	10001016 	blt	r2,zero,105f4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   105b4:	e0bff817 	ldw	r2,-32(fp)
   105b8:	10800317 	ldw	r2,12(r2)
   105bc:	10000826 	beq	r2,zero,105e0 <open+0xfc>
   105c0:	e0bff817 	ldw	r2,-32(fp)
   105c4:	10800317 	ldw	r2,12(r2)
   105c8:	e1ffff17 	ldw	r7,-4(fp)
   105cc:	e1bffe17 	ldw	r6,-8(fp)
   105d0:	e17ffd17 	ldw	r5,-12(fp)
   105d4:	e13ffc17 	ldw	r4,-16(fp)
   105d8:	103ee83a 	callr	r2
   105dc:	00000106 	br	105e4 <open+0x100>
   105e0:	0005883a 	mov	r2,zero
   105e4:	e0bffa15 	stw	r2,-24(fp)
   105e8:	00000206 	br	105f4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   105ec:	00bffb44 	movi	r2,-19
   105f0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   105f4:	e0bffa17 	ldw	r2,-24(fp)
   105f8:	1000090e 	bge	r2,zero,10620 <open+0x13c>
  {
    alt_release_fd (index);  
   105fc:	e13ff917 	ldw	r4,-28(fp)
   10600:	000ebb80 	call	ebb8 <alt_release_fd>
    ALT_ERRNO = -status;
   10604:	00103e40 	call	103e4 <alt_get_errno>
   10608:	1007883a 	mov	r3,r2
   1060c:	e0bffa17 	ldw	r2,-24(fp)
   10610:	0085c83a 	sub	r2,zero,r2
   10614:	18800015 	stw	r2,0(r3)
    return -1;
   10618:	00bfffc4 	movi	r2,-1
   1061c:	00000106 	br	10624 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   10620:	e0bff917 	ldw	r2,-28(fp)
}
   10624:	e037883a 	mov	sp,fp
   10628:	dfc00117 	ldw	ra,4(sp)
   1062c:	df000017 	ldw	fp,0(sp)
   10630:	dec00204 	addi	sp,sp,8
   10634:	f800283a 	ret

00010638 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10638:	defffa04 	addi	sp,sp,-24
   1063c:	df000515 	stw	fp,20(sp)
   10640:	df000504 	addi	fp,sp,20
   10644:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10648:	0005303a 	rdctl	r2,status
   1064c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10650:	e0fffc17 	ldw	r3,-16(fp)
   10654:	00bfff84 	movi	r2,-2
   10658:	1884703a 	and	r2,r3,r2
   1065c:	1001703a 	wrctl	status,r2
  
  return context;
   10660:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10664:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10668:	e0bfff17 	ldw	r2,-4(fp)
   1066c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10670:	e0bffd17 	ldw	r2,-12(fp)
   10674:	10800017 	ldw	r2,0(r2)
   10678:	e0fffd17 	ldw	r3,-12(fp)
   1067c:	18c00117 	ldw	r3,4(r3)
   10680:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10684:	e0bffd17 	ldw	r2,-12(fp)
   10688:	10800117 	ldw	r2,4(r2)
   1068c:	e0fffd17 	ldw	r3,-12(fp)
   10690:	18c00017 	ldw	r3,0(r3)
   10694:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10698:	e0bffd17 	ldw	r2,-12(fp)
   1069c:	e0fffd17 	ldw	r3,-12(fp)
   106a0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   106a4:	e0bffd17 	ldw	r2,-12(fp)
   106a8:	e0fffd17 	ldw	r3,-12(fp)
   106ac:	10c00015 	stw	r3,0(r2)
   106b0:	e0bffb17 	ldw	r2,-20(fp)
   106b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   106b8:	e0bffe17 	ldw	r2,-8(fp)
   106bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   106c0:	0001883a 	nop
   106c4:	e037883a 	mov	sp,fp
   106c8:	df000017 	ldw	fp,0(sp)
   106cc:	dec00104 	addi	sp,sp,4
   106d0:	f800283a 	ret

000106d4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   106d4:	defffb04 	addi	sp,sp,-20
   106d8:	dfc00415 	stw	ra,16(sp)
   106dc:	df000315 	stw	fp,12(sp)
   106e0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   106e4:	d0a00e17 	ldw	r2,-32712(gp)
   106e8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   106ec:	d0a72317 	ldw	r2,-25460(gp)
   106f0:	10800044 	addi	r2,r2,1
   106f4:	d0a72315 	stw	r2,-25460(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   106f8:	00002e06 	br	107b4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   106fc:	e0bffd17 	ldw	r2,-12(fp)
   10700:	10800017 	ldw	r2,0(r2)
   10704:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10708:	e0bffd17 	ldw	r2,-12(fp)
   1070c:	10800403 	ldbu	r2,16(r2)
   10710:	10803fcc 	andi	r2,r2,255
   10714:	10000426 	beq	r2,zero,10728 <alt_tick+0x54>
   10718:	d0a72317 	ldw	r2,-25460(gp)
   1071c:	1000021e 	bne	r2,zero,10728 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10720:	e0bffd17 	ldw	r2,-12(fp)
   10724:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10728:	e0bffd17 	ldw	r2,-12(fp)
   1072c:	10800217 	ldw	r2,8(r2)
   10730:	d0e72317 	ldw	r3,-25460(gp)
   10734:	18801d36 	bltu	r3,r2,107ac <alt_tick+0xd8>
   10738:	e0bffd17 	ldw	r2,-12(fp)
   1073c:	10800403 	ldbu	r2,16(r2)
   10740:	10803fcc 	andi	r2,r2,255
   10744:	1000191e 	bne	r2,zero,107ac <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10748:	e0bffd17 	ldw	r2,-12(fp)
   1074c:	10800317 	ldw	r2,12(r2)
   10750:	e0fffd17 	ldw	r3,-12(fp)
   10754:	18c00517 	ldw	r3,20(r3)
   10758:	1809883a 	mov	r4,r3
   1075c:	103ee83a 	callr	r2
   10760:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10764:	e0bfff17 	ldw	r2,-4(fp)
   10768:	1000031e 	bne	r2,zero,10778 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1076c:	e13ffd17 	ldw	r4,-12(fp)
   10770:	00106380 	call	10638 <alt_alarm_stop>
   10774:	00000d06 	br	107ac <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   10778:	e0bffd17 	ldw	r2,-12(fp)
   1077c:	10c00217 	ldw	r3,8(r2)
   10780:	e0bfff17 	ldw	r2,-4(fp)
   10784:	1887883a 	add	r3,r3,r2
   10788:	e0bffd17 	ldw	r2,-12(fp)
   1078c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10790:	e0bffd17 	ldw	r2,-12(fp)
   10794:	10c00217 	ldw	r3,8(r2)
   10798:	d0a72317 	ldw	r2,-25460(gp)
   1079c:	1880032e 	bgeu	r3,r2,107ac <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   107a0:	e0bffd17 	ldw	r2,-12(fp)
   107a4:	00c00044 	movi	r3,1
   107a8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   107ac:	e0bffe17 	ldw	r2,-8(fp)
   107b0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   107b4:	e0fffd17 	ldw	r3,-12(fp)
   107b8:	d0a00e04 	addi	r2,gp,-32712
   107bc:	18bfcf1e 	bne	r3,r2,106fc <__alt_data_end+0xff0106fc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   107c0:	0001883a 	nop
}
   107c4:	0001883a 	nop
   107c8:	e037883a 	mov	sp,fp
   107cc:	dfc00117 	ldw	ra,4(sp)
   107d0:	df000017 	ldw	fp,0(sp)
   107d4:	dec00204 	addi	sp,sp,8
   107d8:	f800283a 	ret

000107dc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   107dc:	deffff04 	addi	sp,sp,-4
   107e0:	df000015 	stw	fp,0(sp)
   107e4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   107e8:	000170fa 	wrctl	ienable,zero
}
   107ec:	0001883a 	nop
   107f0:	e037883a 	mov	sp,fp
   107f4:	df000017 	ldw	fp,0(sp)
   107f8:	dec00104 	addi	sp,sp,4
   107fc:	f800283a 	ret

00010800 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10800:	defffa04 	addi	sp,sp,-24
   10804:	dfc00515 	stw	ra,20(sp)
   10808:	df000415 	stw	fp,16(sp)
   1080c:	df000404 	addi	fp,sp,16
   10810:	e13ffe15 	stw	r4,-8(fp)
   10814:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10818:	e0bfff17 	ldw	r2,-4(fp)
   1081c:	10800017 	ldw	r2,0(r2)
   10820:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10824:	e13ffe17 	ldw	r4,-8(fp)
   10828:	00026f00 	call	26f0 <strlen>
   1082c:	10800044 	addi	r2,r2,1
   10830:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10834:	00000d06 	br	1086c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10838:	e0bffc17 	ldw	r2,-16(fp)
   1083c:	10800217 	ldw	r2,8(r2)
   10840:	e0fffd17 	ldw	r3,-12(fp)
   10844:	180d883a 	mov	r6,r3
   10848:	e17ffe17 	ldw	r5,-8(fp)
   1084c:	1009883a 	mov	r4,r2
   10850:	0010bb40 	call	10bb4 <memcmp>
   10854:	1000021e 	bne	r2,zero,10860 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10858:	e0bffc17 	ldw	r2,-16(fp)
   1085c:	00000706 	br	1087c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10860:	e0bffc17 	ldw	r2,-16(fp)
   10864:	10800017 	ldw	r2,0(r2)
   10868:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1086c:	e0fffc17 	ldw	r3,-16(fp)
   10870:	e0bfff17 	ldw	r2,-4(fp)
   10874:	18bff01e 	bne	r3,r2,10838 <__alt_data_end+0xff010838>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10878:	0005883a 	mov	r2,zero
}
   1087c:	e037883a 	mov	sp,fp
   10880:	dfc00117 	ldw	ra,4(sp)
   10884:	df000017 	ldw	fp,0(sp)
   10888:	dec00204 	addi	sp,sp,8
   1088c:	f800283a 	ret

00010890 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10890:	defffb04 	addi	sp,sp,-20
   10894:	dfc00415 	stw	ra,16(sp)
   10898:	df000315 	stw	fp,12(sp)
   1089c:	df000304 	addi	fp,sp,12
   108a0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   108a4:	d0a00617 	ldw	r2,-32744(gp)
   108a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   108ac:	00003106 	br	10974 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   108b0:	e0bffd17 	ldw	r2,-12(fp)
   108b4:	10800217 	ldw	r2,8(r2)
   108b8:	1009883a 	mov	r4,r2
   108bc:	00026f00 	call	26f0 <strlen>
   108c0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   108c4:	e0bffd17 	ldw	r2,-12(fp)
   108c8:	10c00217 	ldw	r3,8(r2)
   108cc:	e0bffe17 	ldw	r2,-8(fp)
   108d0:	10bfffc4 	addi	r2,r2,-1
   108d4:	1885883a 	add	r2,r3,r2
   108d8:	10800003 	ldbu	r2,0(r2)
   108dc:	10803fcc 	andi	r2,r2,255
   108e0:	1080201c 	xori	r2,r2,128
   108e4:	10bfe004 	addi	r2,r2,-128
   108e8:	10800bd8 	cmpnei	r2,r2,47
   108ec:	1000031e 	bne	r2,zero,108fc <alt_find_file+0x6c>
    {
      len -= 1;
   108f0:	e0bffe17 	ldw	r2,-8(fp)
   108f4:	10bfffc4 	addi	r2,r2,-1
   108f8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   108fc:	e0bffe17 	ldw	r2,-8(fp)
   10900:	e0ffff17 	ldw	r3,-4(fp)
   10904:	1885883a 	add	r2,r3,r2
   10908:	10800003 	ldbu	r2,0(r2)
   1090c:	10803fcc 	andi	r2,r2,255
   10910:	1080201c 	xori	r2,r2,128
   10914:	10bfe004 	addi	r2,r2,-128
   10918:	10800be0 	cmpeqi	r2,r2,47
   1091c:	1000081e 	bne	r2,zero,10940 <alt_find_file+0xb0>
   10920:	e0bffe17 	ldw	r2,-8(fp)
   10924:	e0ffff17 	ldw	r3,-4(fp)
   10928:	1885883a 	add	r2,r3,r2
   1092c:	10800003 	ldbu	r2,0(r2)
   10930:	10803fcc 	andi	r2,r2,255
   10934:	1080201c 	xori	r2,r2,128
   10938:	10bfe004 	addi	r2,r2,-128
   1093c:	10000a1e 	bne	r2,zero,10968 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   10940:	e0bffd17 	ldw	r2,-12(fp)
   10944:	10800217 	ldw	r2,8(r2)
   10948:	e0fffe17 	ldw	r3,-8(fp)
   1094c:	180d883a 	mov	r6,r3
   10950:	e17fff17 	ldw	r5,-4(fp)
   10954:	1009883a 	mov	r4,r2
   10958:	0010bb40 	call	10bb4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1095c:	1000021e 	bne	r2,zero,10968 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10960:	e0bffd17 	ldw	r2,-12(fp)
   10964:	00000706 	br	10984 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   10968:	e0bffd17 	ldw	r2,-12(fp)
   1096c:	10800017 	ldw	r2,0(r2)
   10970:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10974:	e0fffd17 	ldw	r3,-12(fp)
   10978:	d0a00604 	addi	r2,gp,-32744
   1097c:	18bfcc1e 	bne	r3,r2,108b0 <__alt_data_end+0xff0108b0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10980:	0005883a 	mov	r2,zero
}
   10984:	e037883a 	mov	sp,fp
   10988:	dfc00117 	ldw	ra,4(sp)
   1098c:	df000017 	ldw	fp,0(sp)
   10990:	dec00204 	addi	sp,sp,8
   10994:	f800283a 	ret

00010998 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10998:	defffc04 	addi	sp,sp,-16
   1099c:	df000315 	stw	fp,12(sp)
   109a0:	df000304 	addi	fp,sp,12
   109a4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   109a8:	00bffa04 	movi	r2,-24
   109ac:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   109b0:	e03ffd15 	stw	zero,-12(fp)
   109b4:	00001906 	br	10a1c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   109b8:	00800074 	movhi	r2,1
   109bc:	10882804 	addi	r2,r2,8352
   109c0:	e0fffd17 	ldw	r3,-12(fp)
   109c4:	18c00324 	muli	r3,r3,12
   109c8:	10c5883a 	add	r2,r2,r3
   109cc:	10800017 	ldw	r2,0(r2)
   109d0:	10000f1e 	bne	r2,zero,10a10 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   109d4:	00800074 	movhi	r2,1
   109d8:	10882804 	addi	r2,r2,8352
   109dc:	e0fffd17 	ldw	r3,-12(fp)
   109e0:	18c00324 	muli	r3,r3,12
   109e4:	10c5883a 	add	r2,r2,r3
   109e8:	e0ffff17 	ldw	r3,-4(fp)
   109ec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   109f0:	d0e00a17 	ldw	r3,-32728(gp)
   109f4:	e0bffd17 	ldw	r2,-12(fp)
   109f8:	1880020e 	bge	r3,r2,10a04 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   109fc:	e0bffd17 	ldw	r2,-12(fp)
   10a00:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   10a04:	e0bffd17 	ldw	r2,-12(fp)
   10a08:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   10a0c:	00000606 	br	10a28 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10a10:	e0bffd17 	ldw	r2,-12(fp)
   10a14:	10800044 	addi	r2,r2,1
   10a18:	e0bffd15 	stw	r2,-12(fp)
   10a1c:	e0bffd17 	ldw	r2,-12(fp)
   10a20:	10800810 	cmplti	r2,r2,32
   10a24:	103fe41e 	bne	r2,zero,109b8 <__alt_data_end+0xff0109b8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10a28:	e0bffe17 	ldw	r2,-8(fp)
}
   10a2c:	e037883a 	mov	sp,fp
   10a30:	df000017 	ldw	fp,0(sp)
   10a34:	dec00104 	addi	sp,sp,4
   10a38:	f800283a 	ret

00010a3c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   10a3c:	defffb04 	addi	sp,sp,-20
   10a40:	df000415 	stw	fp,16(sp)
   10a44:	df000404 	addi	fp,sp,16
   10a48:	e13ffe15 	stw	r4,-8(fp)
   10a4c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   10a50:	e0bfff17 	ldw	r2,-4(fp)
   10a54:	10840070 	cmpltui	r2,r2,4097
   10a58:	1000021e 	bne	r2,zero,10a64 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   10a5c:	00840004 	movi	r2,4096
   10a60:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   10a64:	e0fffe17 	ldw	r3,-8(fp)
   10a68:	e0bfff17 	ldw	r2,-4(fp)
   10a6c:	1885883a 	add	r2,r3,r2
   10a70:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10a74:	e0bffe17 	ldw	r2,-8(fp)
   10a78:	e0bffc15 	stw	r2,-16(fp)
   10a7c:	00000506 	br	10a94 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10a80:	e0bffc17 	ldw	r2,-16(fp)
   10a84:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10a88:	e0bffc17 	ldw	r2,-16(fp)
   10a8c:	10800804 	addi	r2,r2,32
   10a90:	e0bffc15 	stw	r2,-16(fp)
   10a94:	e0fffc17 	ldw	r3,-16(fp)
   10a98:	e0bffd17 	ldw	r2,-12(fp)
   10a9c:	18bff836 	bltu	r3,r2,10a80 <__alt_data_end+0xff010a80>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10aa0:	e0bffe17 	ldw	r2,-8(fp)
   10aa4:	108007cc 	andi	r2,r2,31
   10aa8:	10000226 	beq	r2,zero,10ab4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10aac:	e0bffc17 	ldw	r2,-16(fp)
   10ab0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10ab4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10ab8:	0001883a 	nop
   10abc:	e037883a 	mov	sp,fp
   10ac0:	df000017 	ldw	fp,0(sp)
   10ac4:	dec00104 	addi	sp,sp,4
   10ac8:	f800283a 	ret

00010acc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10acc:	defffe04 	addi	sp,sp,-8
   10ad0:	df000115 	stw	fp,4(sp)
   10ad4:	df000104 	addi	fp,sp,4
   10ad8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10adc:	e0bfff17 	ldw	r2,-4(fp)
   10ae0:	10bffe84 	addi	r2,r2,-6
   10ae4:	10c00428 	cmpgeui	r3,r2,16
   10ae8:	18001a1e 	bne	r3,zero,10b54 <alt_exception_cause_generated_bad_addr+0x88>
   10aec:	100690ba 	slli	r3,r2,2
   10af0:	00800074 	movhi	r2,1
   10af4:	1082c104 	addi	r2,r2,2820
   10af8:	1885883a 	add	r2,r3,r2
   10afc:	10800017 	ldw	r2,0(r2)
   10b00:	1000683a 	jmp	r2
   10b04:	00010b44 	movi	zero,1069
   10b08:	00010b44 	movi	zero,1069
   10b0c:	00010b54 	movui	zero,1069
   10b10:	00010b54 	movui	zero,1069
   10b14:	00010b54 	movui	zero,1069
   10b18:	00010b44 	movi	zero,1069
   10b1c:	00010b4c 	andi	zero,zero,1069
   10b20:	00010b54 	movui	zero,1069
   10b24:	00010b44 	movi	zero,1069
   10b28:	00010b44 	movi	zero,1069
   10b2c:	00010b54 	movui	zero,1069
   10b30:	00010b44 	movi	zero,1069
   10b34:	00010b4c 	andi	zero,zero,1069
   10b38:	00010b54 	movui	zero,1069
   10b3c:	00010b54 	movui	zero,1069
   10b40:	00010b44 	movi	zero,1069
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10b44:	00800044 	movi	r2,1
   10b48:	00000306 	br	10b58 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10b4c:	0005883a 	mov	r2,zero
   10b50:	00000106 	br	10b58 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10b54:	0005883a 	mov	r2,zero
  }
}
   10b58:	e037883a 	mov	sp,fp
   10b5c:	df000017 	ldw	fp,0(sp)
   10b60:	dec00104 	addi	sp,sp,4
   10b64:	f800283a 	ret

00010b68 <atexit>:
   10b68:	200b883a 	mov	r5,r4
   10b6c:	000f883a 	mov	r7,zero
   10b70:	000d883a 	mov	r6,zero
   10b74:	0009883a 	mov	r4,zero
   10b78:	0010c301 	jmpi	10c30 <__register_exitproc>

00010b7c <exit>:
   10b7c:	defffe04 	addi	sp,sp,-8
   10b80:	000b883a 	mov	r5,zero
   10b84:	dc000015 	stw	r16,0(sp)
   10b88:	dfc00115 	stw	ra,4(sp)
   10b8c:	2021883a 	mov	r16,r4
   10b90:	0010d480 	call	10d48 <__call_exitprocs>
   10b94:	00800074 	movhi	r2,1
   10b98:	108ca204 	addi	r2,r2,12936
   10b9c:	11000017 	ldw	r4,0(r2)
   10ba0:	20800f17 	ldw	r2,60(r4)
   10ba4:	10000126 	beq	r2,zero,10bac <exit+0x30>
   10ba8:	103ee83a 	callr	r2
   10bac:	8009883a 	mov	r4,r16
   10bb0:	0010ec80 	call	10ec8 <_exit>

00010bb4 <memcmp>:
   10bb4:	01c000c4 	movi	r7,3
   10bb8:	3980192e 	bgeu	r7,r6,10c20 <memcmp+0x6c>
   10bbc:	2144b03a 	or	r2,r4,r5
   10bc0:	11c4703a 	and	r2,r2,r7
   10bc4:	10000f26 	beq	r2,zero,10c04 <memcmp+0x50>
   10bc8:	20800003 	ldbu	r2,0(r4)
   10bcc:	28c00003 	ldbu	r3,0(r5)
   10bd0:	10c0151e 	bne	r2,r3,10c28 <memcmp+0x74>
   10bd4:	31bfff84 	addi	r6,r6,-2
   10bd8:	01ffffc4 	movi	r7,-1
   10bdc:	00000406 	br	10bf0 <memcmp+0x3c>
   10be0:	20800003 	ldbu	r2,0(r4)
   10be4:	28c00003 	ldbu	r3,0(r5)
   10be8:	31bfffc4 	addi	r6,r6,-1
   10bec:	10c00e1e 	bne	r2,r3,10c28 <memcmp+0x74>
   10bf0:	21000044 	addi	r4,r4,1
   10bf4:	29400044 	addi	r5,r5,1
   10bf8:	31fff91e 	bne	r6,r7,10be0 <__alt_data_end+0xff010be0>
   10bfc:	0005883a 	mov	r2,zero
   10c00:	f800283a 	ret
   10c04:	20c00017 	ldw	r3,0(r4)
   10c08:	28800017 	ldw	r2,0(r5)
   10c0c:	18bfee1e 	bne	r3,r2,10bc8 <__alt_data_end+0xff010bc8>
   10c10:	31bfff04 	addi	r6,r6,-4
   10c14:	21000104 	addi	r4,r4,4
   10c18:	29400104 	addi	r5,r5,4
   10c1c:	39bff936 	bltu	r7,r6,10c04 <__alt_data_end+0xff010c04>
   10c20:	303fe91e 	bne	r6,zero,10bc8 <__alt_data_end+0xff010bc8>
   10c24:	003ff506 	br	10bfc <__alt_data_end+0xff010bfc>
   10c28:	10c5c83a 	sub	r2,r2,r3
   10c2c:	f800283a 	ret

00010c30 <__register_exitproc>:
   10c30:	defffa04 	addi	sp,sp,-24
   10c34:	dc000315 	stw	r16,12(sp)
   10c38:	04000074 	movhi	r16,1
   10c3c:	840ca204 	addi	r16,r16,12936
   10c40:	80c00017 	ldw	r3,0(r16)
   10c44:	dc400415 	stw	r17,16(sp)
   10c48:	dfc00515 	stw	ra,20(sp)
   10c4c:	18805217 	ldw	r2,328(r3)
   10c50:	2023883a 	mov	r17,r4
   10c54:	10003726 	beq	r2,zero,10d34 <__register_exitproc+0x104>
   10c58:	10c00117 	ldw	r3,4(r2)
   10c5c:	010007c4 	movi	r4,31
   10c60:	20c00e16 	blt	r4,r3,10c9c <__register_exitproc+0x6c>
   10c64:	1a000044 	addi	r8,r3,1
   10c68:	8800221e 	bne	r17,zero,10cf4 <__register_exitproc+0xc4>
   10c6c:	18c00084 	addi	r3,r3,2
   10c70:	18c7883a 	add	r3,r3,r3
   10c74:	18c7883a 	add	r3,r3,r3
   10c78:	12000115 	stw	r8,4(r2)
   10c7c:	10c7883a 	add	r3,r2,r3
   10c80:	19400015 	stw	r5,0(r3)
   10c84:	0005883a 	mov	r2,zero
   10c88:	dfc00517 	ldw	ra,20(sp)
   10c8c:	dc400417 	ldw	r17,16(sp)
   10c90:	dc000317 	ldw	r16,12(sp)
   10c94:	dec00604 	addi	sp,sp,24
   10c98:	f800283a 	ret
   10c9c:	00800034 	movhi	r2,0
   10ca0:	10874a04 	addi	r2,r2,7464
   10ca4:	10002626 	beq	r2,zero,10d40 <__register_exitproc+0x110>
   10ca8:	01006404 	movi	r4,400
   10cac:	d9400015 	stw	r5,0(sp)
   10cb0:	d9800115 	stw	r6,4(sp)
   10cb4:	d9c00215 	stw	r7,8(sp)
   10cb8:	0001d280 	call	1d28 <malloc>
   10cbc:	d9400017 	ldw	r5,0(sp)
   10cc0:	d9800117 	ldw	r6,4(sp)
   10cc4:	d9c00217 	ldw	r7,8(sp)
   10cc8:	10001d26 	beq	r2,zero,10d40 <__register_exitproc+0x110>
   10ccc:	81000017 	ldw	r4,0(r16)
   10cd0:	10000115 	stw	zero,4(r2)
   10cd4:	02000044 	movi	r8,1
   10cd8:	22405217 	ldw	r9,328(r4)
   10cdc:	0007883a 	mov	r3,zero
   10ce0:	12400015 	stw	r9,0(r2)
   10ce4:	20805215 	stw	r2,328(r4)
   10ce8:	10006215 	stw	zero,392(r2)
   10cec:	10006315 	stw	zero,396(r2)
   10cf0:	883fde26 	beq	r17,zero,10c6c <__alt_data_end+0xff010c6c>
   10cf4:	18c9883a 	add	r4,r3,r3
   10cf8:	2109883a 	add	r4,r4,r4
   10cfc:	1109883a 	add	r4,r2,r4
   10d00:	21802215 	stw	r6,136(r4)
   10d04:	01800044 	movi	r6,1
   10d08:	12406217 	ldw	r9,392(r2)
   10d0c:	30cc983a 	sll	r6,r6,r3
   10d10:	4992b03a 	or	r9,r9,r6
   10d14:	12406215 	stw	r9,392(r2)
   10d18:	21c04215 	stw	r7,264(r4)
   10d1c:	01000084 	movi	r4,2
   10d20:	893fd21e 	bne	r17,r4,10c6c <__alt_data_end+0xff010c6c>
   10d24:	11006317 	ldw	r4,396(r2)
   10d28:	218cb03a 	or	r6,r4,r6
   10d2c:	11806315 	stw	r6,396(r2)
   10d30:	003fce06 	br	10c6c <__alt_data_end+0xff010c6c>
   10d34:	18805304 	addi	r2,r3,332
   10d38:	18805215 	stw	r2,328(r3)
   10d3c:	003fc606 	br	10c58 <__alt_data_end+0xff010c58>
   10d40:	00bfffc4 	movi	r2,-1
   10d44:	003fd006 	br	10c88 <__alt_data_end+0xff010c88>

00010d48 <__call_exitprocs>:
   10d48:	defff504 	addi	sp,sp,-44
   10d4c:	df000915 	stw	fp,36(sp)
   10d50:	dd400615 	stw	r21,24(sp)
   10d54:	dc800315 	stw	r18,12(sp)
   10d58:	dfc00a15 	stw	ra,40(sp)
   10d5c:	ddc00815 	stw	r23,32(sp)
   10d60:	dd800715 	stw	r22,28(sp)
   10d64:	dd000515 	stw	r20,20(sp)
   10d68:	dcc00415 	stw	r19,16(sp)
   10d6c:	dc400215 	stw	r17,8(sp)
   10d70:	dc000115 	stw	r16,4(sp)
   10d74:	d9000015 	stw	r4,0(sp)
   10d78:	2839883a 	mov	fp,r5
   10d7c:	04800044 	movi	r18,1
   10d80:	057fffc4 	movi	r21,-1
   10d84:	00800074 	movhi	r2,1
   10d88:	108ca204 	addi	r2,r2,12936
   10d8c:	12000017 	ldw	r8,0(r2)
   10d90:	45005217 	ldw	r20,328(r8)
   10d94:	44c05204 	addi	r19,r8,328
   10d98:	a0001c26 	beq	r20,zero,10e0c <__call_exitprocs+0xc4>
   10d9c:	a0800117 	ldw	r2,4(r20)
   10da0:	15ffffc4 	addi	r23,r2,-1
   10da4:	b8000d16 	blt	r23,zero,10ddc <__call_exitprocs+0x94>
   10da8:	14000044 	addi	r16,r2,1
   10dac:	8421883a 	add	r16,r16,r16
   10db0:	8421883a 	add	r16,r16,r16
   10db4:	84402004 	addi	r17,r16,128
   10db8:	a463883a 	add	r17,r20,r17
   10dbc:	a421883a 	add	r16,r20,r16
   10dc0:	e0001e26 	beq	fp,zero,10e3c <__call_exitprocs+0xf4>
   10dc4:	80804017 	ldw	r2,256(r16)
   10dc8:	e0801c26 	beq	fp,r2,10e3c <__call_exitprocs+0xf4>
   10dcc:	bdffffc4 	addi	r23,r23,-1
   10dd0:	843fff04 	addi	r16,r16,-4
   10dd4:	8c7fff04 	addi	r17,r17,-4
   10dd8:	bd7ff91e 	bne	r23,r21,10dc0 <__alt_data_end+0xff010dc0>
   10ddc:	00800034 	movhi	r2,0
   10de0:	10874f04 	addi	r2,r2,7484
   10de4:	10000926 	beq	r2,zero,10e0c <__call_exitprocs+0xc4>
   10de8:	a0800117 	ldw	r2,4(r20)
   10dec:	1000301e 	bne	r2,zero,10eb0 <__call_exitprocs+0x168>
   10df0:	a0800017 	ldw	r2,0(r20)
   10df4:	10003226 	beq	r2,zero,10ec0 <__call_exitprocs+0x178>
   10df8:	a009883a 	mov	r4,r20
   10dfc:	98800015 	stw	r2,0(r19)
   10e00:	0001d3c0 	call	1d3c <free>
   10e04:	9d000017 	ldw	r20,0(r19)
   10e08:	a03fe41e 	bne	r20,zero,10d9c <__alt_data_end+0xff010d9c>
   10e0c:	dfc00a17 	ldw	ra,40(sp)
   10e10:	df000917 	ldw	fp,36(sp)
   10e14:	ddc00817 	ldw	r23,32(sp)
   10e18:	dd800717 	ldw	r22,28(sp)
   10e1c:	dd400617 	ldw	r21,24(sp)
   10e20:	dd000517 	ldw	r20,20(sp)
   10e24:	dcc00417 	ldw	r19,16(sp)
   10e28:	dc800317 	ldw	r18,12(sp)
   10e2c:	dc400217 	ldw	r17,8(sp)
   10e30:	dc000117 	ldw	r16,4(sp)
   10e34:	dec00b04 	addi	sp,sp,44
   10e38:	f800283a 	ret
   10e3c:	a0800117 	ldw	r2,4(r20)
   10e40:	80c00017 	ldw	r3,0(r16)
   10e44:	10bfffc4 	addi	r2,r2,-1
   10e48:	15c01426 	beq	r2,r23,10e9c <__call_exitprocs+0x154>
   10e4c:	80000015 	stw	zero,0(r16)
   10e50:	183fde26 	beq	r3,zero,10dcc <__alt_data_end+0xff010dcc>
   10e54:	95c8983a 	sll	r4,r18,r23
   10e58:	a0806217 	ldw	r2,392(r20)
   10e5c:	a5800117 	ldw	r22,4(r20)
   10e60:	2084703a 	and	r2,r4,r2
   10e64:	10000b26 	beq	r2,zero,10e94 <__call_exitprocs+0x14c>
   10e68:	a0806317 	ldw	r2,396(r20)
   10e6c:	2088703a 	and	r4,r4,r2
   10e70:	20000c1e 	bne	r4,zero,10ea4 <__call_exitprocs+0x15c>
   10e74:	89400017 	ldw	r5,0(r17)
   10e78:	d9000017 	ldw	r4,0(sp)
   10e7c:	183ee83a 	callr	r3
   10e80:	a0800117 	ldw	r2,4(r20)
   10e84:	15bfbf1e 	bne	r2,r22,10d84 <__alt_data_end+0xff010d84>
   10e88:	98800017 	ldw	r2,0(r19)
   10e8c:	153fcf26 	beq	r2,r20,10dcc <__alt_data_end+0xff010dcc>
   10e90:	003fbc06 	br	10d84 <__alt_data_end+0xff010d84>
   10e94:	183ee83a 	callr	r3
   10e98:	003ff906 	br	10e80 <__alt_data_end+0xff010e80>
   10e9c:	a5c00115 	stw	r23,4(r20)
   10ea0:	003feb06 	br	10e50 <__alt_data_end+0xff010e50>
   10ea4:	89000017 	ldw	r4,0(r17)
   10ea8:	183ee83a 	callr	r3
   10eac:	003ff406 	br	10e80 <__alt_data_end+0xff010e80>
   10eb0:	a0800017 	ldw	r2,0(r20)
   10eb4:	a027883a 	mov	r19,r20
   10eb8:	1029883a 	mov	r20,r2
   10ebc:	003fb606 	br	10d98 <__alt_data_end+0xff010d98>
   10ec0:	0005883a 	mov	r2,zero
   10ec4:	003ffb06 	br	10eb4 <__alt_data_end+0xff010eb4>

00010ec8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   10ec8:	defffd04 	addi	sp,sp,-12
   10ecc:	df000215 	stw	fp,8(sp)
   10ed0:	df000204 	addi	fp,sp,8
   10ed4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   10ed8:	0001883a 	nop
   10edc:	e0bfff17 	ldw	r2,-4(fp)
   10ee0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   10ee4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10ee8:	10000226 	beq	r2,zero,10ef4 <_exit+0x2c>
    ALT_SIM_FAIL();
   10eec:	002af070 	cmpltui	zero,zero,43969
   10ef0:	00000106 	br	10ef8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   10ef4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   10ef8:	003fff06 	br	10ef8 <__alt_data_end+0xff010ef8>


sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011720 memsz 0x00011720 flags r-x
    LOAD off    0x00012740 vaddr 0x00011740 paddr 0x0001322c align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00014d18 vaddr 0x00014d18 paddr 0x00014d18 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010d5c  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007a0  00010fa0  00010fa0  00011fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00011740  0001322c  00012740  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00014d18  00014d18  00014d18  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00014ea8  00014ea8  0001422c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001422c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f38  00000000  00000000  00014250  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000240d7  00000000  00000000  00015188  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009371  00000000  00000000  0003925f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b7d2  00000000  00000000  000425d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002158  00000000  00000000  0004dda4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000038a0  00000000  00000000  0004fefc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000178c0  00000000  00000000  0005379c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0006b05c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d8  00000000  00000000  0006b0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007039e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000703a1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000703ad  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000703ae  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000703af  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000703b3  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000703b7  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000703bb  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000703c4  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000703cd  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000703d6  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000057  00000000  00000000  000703e1  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  00070438  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00074695  00000000  00000000  00075f10  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00010fa0 l    d  .rodata	00000000 .rodata
00011740 l    d  .rwdata	00000000 .rwdata
00014d18 l    d  .bss	00000000 .bss
00014ea8 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/adrie/OneDrive/Documents/HES/Master/TSM_EmbHardw/Labo/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001148e l     O .rodata	00000010 zeroes.4404
00004a18 l     F .text	000000bc __sbprintf
0001149e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004c28 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006758 l     F .text	00000008 __fp_unlock
0000676c l     F .text	0000019c __sinit.part.1
00006908 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00011b48 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00011f8c l     O .rwdata	00000020 lc_ctype_charset
00011f6c l     O .rwdata	00000020 lc_message_charset
00011fac l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000114d0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000094a4 l     F .text	000000fc __sprint_r.part.0
00011604 l     O .rodata	00000010 blanks.4348
000115f4 l     O .rodata	00000010 zeroes.4349
0000aa30 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e538 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e644 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e670 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e75c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000e83c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e928 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000eafc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001321c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000ed78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000eeac l     F .text	00000034 alt_dev_reg
0001218c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f1b8 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000f3c4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000f9fc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000fed4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010348 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00010488 l     F .text	0000003c alt_get_errno
000104c4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00014d7c g     O .bss	00000004 alt_instruction_exception_handler
00008b3c g     F .text	00000074 _mprec_log10
00001a64 g     F .text	0000015c sobel
00008c28 g     F .text	0000008c __any_on
0000afcc g     F .text	00000054 _isatty_r
000114dc g     O .rodata	00000028 __mprec_tinytens
0000ea38 g     F .text	0000007c alt_main
00002644 g     F .text	000000c0 _puts_r
00014da8 g     O .bss	00000100 alt_irq
0000b020 g     F .text	00000060 _lseek_r
0001143a g     O .rodata	00000009 gy_array
0001322c g       *ABS*	00000000 __flash_rwdata_start
0000d064 g     F .text	00000088 .hidden __eqdf2
00014ea8 g       *ABS*	00000000 __alt_heap_start
00002608 g     F .text	0000003c printf
0000b238 g     F .text	0000009c _wcrtomb_r
00009364 g     F .text	0000005c __sseek
00006aa8 g     F .text	00000010 __sinit
0000b0e0 g     F .text	00000140 __swbuf_r
00007570 g     F .text	0000007c _setlocale_r
00006910 g     F .text	00000068 __sfmoreglue
0000ead8 g     F .text	00000024 __malloc_unlock
00000a10 g     F .text	00000014 LCD_Write_Command
00014d28 g     O .bss	00000004 sobel_width
00014d6c g     O .bss	00000004 altera_avalon_timer_ts_freq
00007a34 g     F .text	0000015c memmove
00000a24 g     F .text	00000014 LCD_Write_Data
00006a90 g     F .text	00000018 _cleanup
00007cb8 g     F .text	000000a8 _Balloc
0000d0ec g     F .text	000000dc .hidden __gtdf2
00010880 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000005a8 g     F .text	00000024 cam_get_xsize
0000af70 g     F .text	0000005c _fstat_r
00014d4c g     O .bss	00000004 errno
000092e0 g     F .text	00000008 __seofread
00014d60 g     O .bss	00000004 alt_argv
0001b1ec g       *ABS*	00000000 _gp
0000ed48 g     F .text	00000030 usleep
00000668 g     F .text	00000074 cam_set_image_pointer
0001200c g     O .rwdata	00000180 alt_fd_list
00001bd0 g     F .text	00000010 vga_set_pointer
000108a4 g     F .text	00000090 alt_find_dev
000078ec g     F .text	00000148 memcpy
00006760 g     F .text	0000000c _cleanup_r
0000e350 g     F .text	000000dc .hidden __floatsidf
0001040c g     F .text	0000007c alt_io_redirect
0000d1c8 g     F .text	000000f4 .hidden __ltdf2
00010fa0 g       *ABS*	00000000 __DTOR_END__
00002704 g     F .text	00000014 puts
00010b70 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009218 g     F .text	00000074 __fpclassifyd
00008a98 g     F .text	000000a4 __ratio
0000aa14 g     F .text	0000001c __vfiprintf_internal
0000f5bc g     F .text	0000021c altera_avalon_jtag_uart_read
00001da4 g     F .text	00000014 malloc
000025d8 g     F .text	00000030 _printf_r
00000864 g     F .text	00000008 get_grayscale_picture
00001ce8 g     F .text	00000064 .hidden __udivsi3
00011000 g     O .rodata	00000128 lens_roll_off_tbl
00000290 g     F .text	00000318 init_camera
0000e798 g     F .text	000000a4 isatty
0001152c g     O .rodata	000000c8 __mprec_tens
000075ec g     F .text	0000000c __locale_charset
00010ae0 g     F .text	00000090 alt_icache_flush
00014d48 g     O .bss	00000004 __malloc_top_pad
000131fc g     O .rwdata	00000004 __mb_cur_max
0000761c g     F .text	0000000c _localeconv_r
000014d0 g     F .text	00000100 sobel_x
000080c4 g     F .text	0000003c __i2b
00006f2c g     F .text	000004bc __sfvwrite_r
00000a38 g     F .text	00000414 init_LCD
00002718 g     F .text	00000054 _sbrk_r
000005f0 g     F .text	00000078 cam_get_profiling
0000b080 g     F .text	00000060 _read_r
00014d2c g     O .bss	00000004 sobel_result
00013214 g     O .rwdata	00000004 alt_max_fd
0000ac64 g     F .text	000000f0 _fclose_r
00006728 g     F .text	00000030 fflush
00014d44 g     O .bss	00000004 __malloc_max_sbrked_mem
00014d20 g     O .bss	00000004 grayscale_array
0000bed0 g     F .text	000008ac .hidden __adddf3
000005cc g     F .text	00000024 cam_get_ysize
00008840 g     F .text	0000010c __b2d
0000b998 g     F .text	00000538 .hidden __umoddi3
0000e964 g     F .text	000000d4 lseek
0000092c g     F .text	0000008c i2c_short_read
000131f4 g     O .rwdata	00000004 _global_impure_ptr
00008cb4 g     F .text	00000564 _realloc_r
00014ea8 g       *ABS*	00000000 __bss_end
00010258 g     F .text	000000f0 alt_iic_isr_register
00010778 g     F .text	00000108 alt_tick
0000b420 g     F .text	00000578 .hidden __udivdi3
0000aecc g     F .text	00000024 _fputwc_r
00011504 g     O .rodata	00000028 __mprec_bigtens
00007ea8 g     F .text	00000104 __s2b
0000e42c g     F .text	000000a8 .hidden __floatunsidf
00008580 g     F .text	00000060 __mcmp
00006ac8 g     F .text	00000018 __fp_lock_all
0001020c g     F .text	0000004c alt_ic_irq_enabled
00014d18 g     O .bss	00000004 grayscape_height
000106dc g     F .text	0000009c alt_alarm_stop
00014d70 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00011fe4 g     O .rwdata	00000028 alt_dev_null
00000ed8 g     F .text	00000078 transfer_LCD_with_dma
0000fe8c g     F .text	00000048 alt_dcache_flush_all
00007fac g     F .text	00000068 __hi0bits
0000e2d0 g     F .text	00000080 .hidden __fixdfsi
0001322c g       *ABS*	00000000 __ram_rwdata_end
0001320c g     O .rwdata	00000008 alt_dev_list
0000edb4 g     F .text	000000f8 write
0000fbe8 g     F .text	00000020 alt_timestamp_freq
00011740 g       *ABS*	00000000 __ram_rodata_end
0000e6ac g     F .text	000000b0 fstat
0000d1c8 g     F .text	000000f4 .hidden __ledf2
000082f8 g     F .text	00000140 __pow5mult
000095b8 g     F .text	0000145c ___vfiprintf_internal_r
00014d58 g     O .bss	00000004 __nlocale_changed
00001d4c g     F .text	00000058 .hidden __umodsi3
00001bc0 g     F .text	00000008 GetSobel_rgb
00014ea8 g       *ABS*	00000000 end
00001bc8 g     F .text	00000008 GetSobelResult
00000700 g     F .text	00000020 take_picture_blocking
00000760 g     F .text	00000014 DIPSW_get_value
00001848 g     F .text	00000168 sobel_y_with_rgb
0000f0f8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006f0 g     F .text	00000010 current_image_pointer
00010fa0 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000fa74 g     F .text	0000007c alt_avalon_timer_sc_init
0000e4d4 g     F .text	00000064 .hidden __clzsi2
0000f7d8 g     F .text	00000224 altera_avalon_jtag_uart_write
00006ab8 g     F .text	00000004 __sfp_lock_acquire
00007808 g     F .text	000000e4 memchr
00002804 g     F .text	000021f8 ___vfprintf_internal_r
00006c1c g     F .text	00000310 _free_r
000075f8 g     F .text	00000010 __locale_mb_cur_max
0000174c g     F .text	000000fc sobel_y
00011128 g     O .rodata	00000140 noise_reduction_reg_settings_array
00010dec g     F .text	00000180 __call_exitprocs
00014d54 g     O .bss	00000004 __mlocale_changed
000131ec g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00014d74 g     O .bss	00000004 _alt_tick_rate
00008438 g     F .text	00000148 __lshift
00014d78 g     O .bss	00000004 _alt_nticks
0000eb38 g     F .text	000000fc read
0000ef18 g     F .text	0000007c alt_sys_init
000015d0 g     F .text	0000017c sobel_x_with_rgb
00010cd4 g     F .text	00000118 __register_exitproc
00008100 g     F .text	000001f8 __multiply
0000f464 g     F .text	00000068 altera_avalon_jtag_uart_close
00011740 g       *ABS*	00000000 __ram_rwdata_start
00010fa0 g       *ABS*	00000000 __ram_rodata_start
00014d80 g     O .bss	00000028 __malloc_current_mallinfo
0000894c g     F .text	0000014c __d2b
00014d30 g     O .bss	00000004 sobel_height
00000720 g     F .text	00000014 enable_continues_mode
0000ef94 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001330 g     F .text	000000e4 init_sobel_arrays
00010a3c g     F .text	000000a4 alt_get_fd
0000fd34 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000ab4c g     F .text	00000054 _close_r
00010c58 g     F .text	0000007c memcmp
0000f054 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00014ea8 g       *ABS*	00000000 __alt_stack_base
0000f0a4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00004ad4 g     F .text	00000154 __swsetup_r
0000c77c g     F .text	000008e8 .hidden __divdf3
00006978 g     F .text	00000118 __sfp
00008bb0 g     F .text	00000078 __copybits
00011740 g     O .rwdata	00000408 __malloc_av_
00006ac4 g     F .text	00000004 __sinit_lock_release
0000d2bc g     F .text	00000718 .hidden __muldf3
0000928c g     F .text	00000054 __sread
00010934 g     F .text	00000108 alt_find_file
0000ff10 g     F .text	000000a4 alt_dev_llist_insert
0000eab4 g     F .text	00000024 __malloc_lock
0000ec98 g     F .text	000000b0 sbrk
000066cc g     F .text	0000005c _fflush_r
0000aba0 g     F .text	000000c4 _calloc_r
00014d18 g       *ABS*	00000000 __bss_start
00007b90 g     F .text	00000128 memset
00000f50 g     F .text	000003e0 main
00014d64 g     O .bss	00000004 alt_envp
00014d40 g     O .bss	00000004 __malloc_max_total_mem
00000854 g     F .text	00000008 get_grayscale_width
0000eff4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000b220 g     F .text	00000018 __swbuf
00014d34 g     O .bss	00000004 sobel_x_result
000093c0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000ad54 g     F .text	00000014 fclose
0000faf0 g     F .text	00000078 alt_timestamp_start
00004e28 g     F .text	00001688 _dtoa_r
00001dcc g     F .text	0000080c _malloc_r
0000b394 g     F .text	00000030 __ascii_wctomb
00013218 g     O .rwdata	00000004 alt_errno
000073e8 g     F .text	000000c4 _fwalk
00001bf0 g     F .text	00000084 .hidden __divsi3
00006af8 g     F .text	00000124 _malloc_trim_r
00010fa0 g       *ABS*	00000000 __CTOR_END__
00014d1c g     O .bss	00000004 grayscale_width
000093c8 g     F .text	000000dc strcmp
00000e4c g     F .text	0000008c transfer_LCD_no_dma
00010fa0 g       *ABS*	00000000 __flash_rodata_start
00010fa0 g       *ABS*	00000000 __DTOR_LIST__
0000d064 g     F .text	00000088 .hidden __nedf2
00011268 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000eee0 g     F .text	00000038 alt_irq_init
0000ec34 g     F .text	00000064 alt_release_fd
00000884 g     F .text	000000a8 i2c_auto_detect
00011614 g     O .rodata	00000100 .hidden __clz_tab
000006dc g     F .text	00000014 current_image_valid
00014d50 g     O .bss	00000004 _PathLocale
0000086c g     F .text	00000018 i2c_busy_wait
00010c0c g     F .text	00000014 atexit
0000aaec g     F .text	00000060 _write_r
00007628 g     F .text	00000018 setlocale
000131f8 g     O .rwdata	00000004 _impure_ptr
00014d5c g     O .bss	00000004 alt_argc
000064b0 g     F .text	0000021c __sflush_r
00014d68 g     O .bss	00000004 altera_avalon_timer_ts_base
00010014 g     F .text	00000060 _do_dtors
00007614 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
000087dc g     F .text	00000064 __ulp
00006ae0 g     F .text	00000018 __fp_unlock_all
00013204 g     O .rwdata	00000008 alt_fs_list
00014d38 g     O .bss	00000004 sobel_y_result
000009b8 g     F .text	00000058 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00014d24 g     O .bss	00000002 LCD_height
00007640 g     F .text	0000000c localeconv
0000fb68 g     F .text	00000080 alt_timestamp
00001be0 g     F .text	00000010 vga_set_swap
000100a8 g     F .text	00000050 alt_ic_isr_register
000019b0 g     F .text	000000b4 sobel_threshold
0001322c g       *ABS*	00000000 _edata
00014ea8 g       *ABS*	00000000 _end
0000ad68 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000f4cc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00011443 g     O .rodata	00000009 gx_array
00010180 g     F .text	0000008c alt_ic_irq_disable
000092e8 g     F .text	0000007c __swrite
000131f0 g     O .rwdata	00000004 __malloc_trim_threshold
00014d26 g     O .bss	00000002 LCD_width
00000774 g     F .text	000000e0 conv_grayscale
00007608 g     F .text	0000000c __locale_msgcharset
00010c20 g     F .text	00000038 exit
000074ac g     F .text	000000c4 _fwalk_reent
000085e0 g     F .text	000001fc __mdiff
00001c74 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006abc g     F .text	00000004 __sfp_lock_release
0000085c g     F .text	00000008 get_grayscale_height
00010f6c g     F .text	00000034 _exit
00001414 g     F .text	000000bc sobel_mac
0000fc08 g     F .text	0000012c alt_alarm_start
0000764c g     F .text	000001bc __smakebuf_r
00014d3c g     O .bss	00000004 sobel_rgb565
0000276c g     F .text	00000098 strlen
00010588 g     F .text	00000154 open
0000d0ec g     F .text	000000dc .hidden __gedf2
00013200 g     O .rwdata	00000004 __wctomb
000095a0 g     F .text	00000018 __sprint_r
00010074 g     F .text	00000034 alt_icache_flush_all
00013220 g     O .rwdata	00000004 alt_priority_mask
000100f8 g     F .text	00000088 alt_ic_irq_enable
000049fc g     F .text	0000001c __vfprintf_internal
0000b3c4 g     F .text	0000005c _wctomb_r
0000d9d4 g     F .text	000008fc .hidden __subdf3
00008014 g     F .text	000000b0 __lo0bits
00013224 g     O .rwdata	00000008 alt_alarm_list
0000ffb4 g     F .text	00000060 _do_ctors
0000b2d4 g     F .text	000000c0 wcrtomb
0000e574 g     F .text	000000d0 close
0000e8a4 g     F .text	00000084 alt_load
0000aef0 g     F .text	00000080 fputwc
00001db8 g     F .text	00000014 free
00006ac0 g     F .text	00000004 __sinit_lock_acquire
00007d88 g     F .text	00000120 __multadd
00007d60 g     F .text	00000028 _Bfree
00000734 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00900014 	movui	r2,16384
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10936a04 	addi	r2,r2,19880
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10936a04 	addi	r2,r2,19880
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6e417 	ldw	r2,-25712(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6e417 	ldw	r2,-25712(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6ac7b14 	ori	gp,gp,45548
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	10934614 	ori	r2,r2,19736

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18d3aa14 	ori	r3,r3,20136

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000e8a40 	call	e8a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000ea380 	call	ea38 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_data_end+0xff00028c>

00000290 <init_camera>:
     290:	00804034 	movhi	r2,256
     294:	10842744 	addi	r2,r2,4253
     298:	00c00084 	movi	r3,2
     29c:	10c00025 	stbio	r3,0(r2)
     2a0:	00804034 	movhi	r2,256
     2a4:	10841304 	addi	r2,r2,4172
     2a8:	00c00044 	movi	r3,1
     2ac:	10c00025 	stbio	r3,0(r2)
     2b0:	008003f4 	movhi	r2,15
     2b4:	10909004 	addi	r2,r2,16960
     2b8:	0001883a 	nop
     2bc:	10bfffc4 	addi	r2,r2,-1
     2c0:	103ffd1e 	bne	r2,zero,2b8 <__alt_data_end+0xff0002b8>
     2c4:	00804034 	movhi	r2,256
     2c8:	10841304 	addi	r2,r2,4172
     2cc:	10000025 	stbio	zero,0(r2)
     2d0:	008003f4 	movhi	r2,15
     2d4:	10909004 	addi	r2,r2,16960
     2d8:	0001883a 	nop
     2dc:	10bfffc4 	addi	r2,r2,-1
     2e0:	103ffd1e 	bne	r2,zero,2d8 <__alt_data_end+0xff0002d8>
     2e4:	defffc04 	addi	sp,sp,-16
     2e8:	01800044 	movi	r6,1
     2ec:	014ce184 	movi	r5,13190
     2f0:	01001e04 	movi	r4,120
     2f4:	dfc00315 	stw	ra,12(sp)
     2f8:	dc800215 	stw	r18,8(sp)
     2fc:	dc400115 	stw	r17,4(sp)
     300:	dc000015 	stw	r16,0(sp)
     304:	00009b80 	call	9b8 <i2c_short_write>
     308:	000d883a 	mov	r6,zero
     30c:	014ce184 	movi	r5,13190
     310:	01001e04 	movi	r4,120
     314:	00009b80 	call	9b8 <i2c_short_write>
     318:	008003f4 	movhi	r2,15
     31c:	10909004 	addi	r2,r2,16960
     320:	0001883a 	nop
     324:	10bfffc4 	addi	r2,r2,-1
     328:	103ffd1e 	bne	r2,zero,320 <__alt_data_end+0xff000320>
     32c:	01803104 	movi	r6,196
     330:	014c0684 	movi	r5,12314
     334:	01001e04 	movi	r4,120
     338:	00009b80 	call	9b8 <i2c_short_write>
     33c:	01800204 	movi	r6,8
     340:	014c8084 	movi	r5,12802
     344:	01001e04 	movi	r4,120
     348:	00009b80 	call	9b8 <i2c_short_write>
     34c:	0180c744 	movi	r6,797
     350:	014cfd04 	movi	r5,13300
     354:	01001e04 	movi	r4,120
     358:	00009b80 	call	9b8 <i2c_short_write>
     35c:	008000b4 	movhi	r2,2
     360:	10a1a804 	addi	r2,r2,-31072
     364:	0001883a 	nop
     368:	10bfffc4 	addi	r2,r2,-1
     36c:	103ffd1e 	bne	r2,zero,364 <__alt_data_end+0xff000364>
     370:	01a3c254 	movui	r6,36617
     374:	014d0784 	movi	r5,13342
     378:	01001e04 	movi	r4,120
     37c:	00009b80 	call	9b8 <i2c_short_write>
     380:	01805404 	movi	r6,336
     384:	014d0704 	movi	r5,13340
     388:	01001e04 	movi	r4,120
     38c:	00009b80 	call	9b8 <i2c_short_write>
     390:	01a3c254 	movui	r6,36617
     394:	014d0784 	movi	r5,13342
     398:	01001e04 	movi	r4,120
     39c:	00009b80 	call	9b8 <i2c_short_write>
     3a0:	008000b4 	movhi	r2,2
     3a4:	10a1a804 	addi	r2,r2,-31072
     3a8:	0001883a 	nop
     3ac:	10bfffc4 	addi	r2,r2,-1
     3b0:	103ffd1e 	bne	r2,zero,3a8 <__alt_data_end+0xff0003a8>
     3b4:	04000074 	movhi	r16,1
     3b8:	84049a04 	addi	r16,r16,4712
     3bc:	01a3c214 	movui	r6,36616
     3c0:	014d0784 	movi	r5,13342
     3c4:	01001e04 	movi	r4,120
     3c8:	00009b80 	call	9b8 <i2c_short_write>
     3cc:	84400084 	addi	r17,r16,2
     3d0:	84804604 	addi	r18,r16,280
     3d4:	8980000b 	ldhu	r6,0(r17)
     3d8:	8140000b 	ldhu	r5,0(r16)
     3dc:	01001e04 	movi	r4,120
     3e0:	84000104 	addi	r16,r16,4
     3e4:	00009b80 	call	9b8 <i2c_short_write>
     3e8:	8c400104 	addi	r17,r17,4
     3ec:	84bff91e 	bne	r16,r18,3d4 <__alt_data_end+0xff0003d4>
     3f0:	04000074 	movhi	r16,1
     3f4:	84044a04 	addi	r16,r16,4392
     3f8:	84400084 	addi	r17,r16,2
     3fc:	84805004 	addi	r18,r16,320
     400:	8980000b 	ldhu	r6,0(r17)
     404:	8140000b 	ldhu	r5,0(r16)
     408:	01001e04 	movi	r4,120
     40c:	84000104 	addi	r16,r16,4
     410:	00009b80 	call	9b8 <i2c_short_write>
     414:	8c400104 	addi	r17,r17,4
     418:	943ff91e 	bne	r18,r16,400 <__alt_data_end+0xff000400>
     41c:	018164c4 	movi	r6,1427
     420:	014d6904 	movi	r5,13732
     424:	01001e04 	movi	r4,120
     428:	00009b80 	call	9b8 <i2c_short_write>
     42c:	0189e644 	movi	r6,10137
     430:	014ce304 	movi	r5,13196
     434:	01001e04 	movi	r4,120
     438:	00009b80 	call	9b8 <i2c_short_write>
     43c:	01991004 	movi	r6,25664
     440:	014ce404 	movi	r5,13200
     444:	01001e04 	movi	r4,120
     448:	00009b80 	call	9b8 <i2c_short_write>
     44c:	008000b4 	movhi	r2,2
     450:	10a1a804 	addi	r2,r2,-31072
     454:	0001883a 	nop
     458:	10bfffc4 	addi	r2,r2,-1
     45c:	103ffd1e 	bne	r2,zero,454 <__alt_data_end+0xff000454>
     460:	0189e6c4 	movi	r6,10139
     464:	014ce304 	movi	r5,13196
     468:	01001e04 	movi	r4,120
     46c:	00009b80 	call	9b8 <i2c_short_write>
     470:	01991004 	movi	r6,25664
     474:	014ce404 	movi	r5,13200
     478:	01001e04 	movi	r4,120
     47c:	00009b80 	call	9b8 <i2c_short_write>
     480:	008000b4 	movhi	r2,2
     484:	10a1a804 	addi	r2,r2,-31072
     488:	0001883a 	nop
     48c:	10bfffc4 	addi	r2,r2,-1
     490:	103ffd1e 	bne	r2,zero,488 <__alt_data_end+0xff000488>
     494:	01a840d4 	movui	r6,41219
     498:	014ce304 	movi	r5,13196
     49c:	01001e04 	movi	r4,120
     4a0:	00009b80 	call	9b8 <i2c_short_write>
     4a4:	01800144 	movi	r6,5
     4a8:	014ce404 	movi	r5,13200
     4ac:	01001e04 	movi	r4,120
     4b0:	00009b80 	call	9b8 <i2c_short_write>
     4b4:	008000b4 	movhi	r2,2
     4b8:	10a1a804 	addi	r2,r2,-31072
     4bc:	0001883a 	nop
     4c0:	10bfffc4 	addi	r2,r2,-1
     4c4:	103ffd1e 	bne	r2,zero,4bc <__alt_data_end+0xff0004bc>
     4c8:	01a840d4 	movui	r6,41219
     4cc:	014ce304 	movi	r5,13196
     4d0:	01001e04 	movi	r4,120
     4d4:	00009b80 	call	9b8 <i2c_short_write>
     4d8:	01800184 	movi	r6,6
     4dc:	014ce404 	movi	r5,13200
     4e0:	01001e04 	movi	r4,120
     4e4:	00009b80 	call	9b8 <i2c_short_write>
     4e8:	008000b4 	movhi	r2,2
     4ec:	10a1a804 	addi	r2,r2,-31072
     4f0:	0001883a 	nop
     4f4:	10bfffc4 	addi	r2,r2,-1
     4f8:	103ffd1e 	bne	r2,zero,4f0 <__alt_data_end+0xff0004f0>
     4fc:	04000074 	movhi	r16,1
     500:	84040004 	addi	r16,r16,4096
     504:	84400084 	addi	r17,r16,2
     508:	84804a04 	addi	r18,r16,296
     50c:	8980000b 	ldhu	r6,0(r17)
     510:	8140000b 	ldhu	r5,0(r16)
     514:	01001e04 	movi	r4,120
     518:	84000104 	addi	r16,r16,4
     51c:	00009b80 	call	9b8 <i2c_short_write>
     520:	8c400104 	addi	r17,r17,4
     524:	943ff91e 	bne	r18,r16,50c <__alt_data_end+0xff00050c>
     528:	008003f4 	movhi	r2,15
     52c:	10909004 	addi	r2,r2,16960
     530:	0001883a 	nop
     534:	10bfffc4 	addi	r2,r2,-1
     538:	103ffd1e 	bne	r2,zero,530 <__alt_data_end+0xff000530>
     53c:	01800804 	movi	r6,32
     540:	014ccb84 	movi	r5,13102
     544:	01001e04 	movi	r4,120
     548:	00009b80 	call	9b8 <i2c_short_write>
     54c:	008003f4 	movhi	r2,15
     550:	10909004 	addi	r2,r2,16960
     554:	0001883a 	nop
     558:	10bfffc4 	addi	r2,r2,-1
     55c:	103ffd1e 	bne	r2,zero,554 <__alt_data_end+0xff000554>
     560:	01800884 	movi	r6,34
     564:	014d0104 	movi	r5,13316
     568:	01001e04 	movi	r4,120
     56c:	00009b80 	call	9b8 <i2c_short_write>
     570:	008003f4 	movhi	r2,15
     574:	10909004 	addi	r2,r2,16960
     578:	0001883a 	nop
     57c:	10bfffc4 	addi	r2,r2,-1
     580:	103ffd1e 	bne	r2,zero,578 <__alt_data_end+0xff000578>
     584:	018009c4 	movi	r6,39
     588:	014c1004 	movi	r5,12352
     58c:	01001e04 	movi	r4,120
     590:	dfc00317 	ldw	ra,12(sp)
     594:	dc800217 	ldw	r18,8(sp)
     598:	dc400117 	ldw	r17,4(sp)
     59c:	dc000017 	ldw	r16,0(sp)
     5a0:	dec00404 	addi	sp,sp,16
     5a4:	00009b81 	jmpi	9b8 <i2c_short_write>

000005a8 <cam_get_xsize>:
     5a8:	00c04034 	movhi	r3,256
     5ac:	18c41304 	addi	r3,r3,4172
     5b0:	18800023 	ldbuio	r2,0(r3)
     5b4:	1080010c 	andi	r2,r2,4
     5b8:	103ffd26 	beq	r2,zero,5b0 <__alt_data_end+0xff0005b0>
     5bc:	00804034 	movhi	r2,256
     5c0:	10841004 	addi	r2,r2,4160
     5c4:	1080002b 	ldhuio	r2,0(r2)
     5c8:	f800283a 	ret

000005cc <cam_get_ysize>:
     5cc:	00c04034 	movhi	r3,256
     5d0:	18c41304 	addi	r3,r3,4172
     5d4:	18800023 	ldbuio	r2,0(r3)
     5d8:	1080010c 	andi	r2,r2,4
     5dc:	103ffd26 	beq	r2,zero,5d4 <__alt_data_end+0xff0005d4>
     5e0:	00804034 	movhi	r2,256
     5e4:	10841104 	addi	r2,r2,4164
     5e8:	1080002b 	ldhuio	r2,0(r2)
     5ec:	f800283a 	ret

000005f0 <cam_get_profiling>:
     5f0:	00c04034 	movhi	r3,256
     5f4:	18c41304 	addi	r3,r3,4172
     5f8:	18800023 	ldbuio	r2,0(r3)
     5fc:	1080010c 	andi	r2,r2,4
     600:	103ffd26 	beq	r2,zero,5f8 <__alt_data_end+0xff0005f8>
     604:	00804034 	movhi	r2,256
     608:	deffff04 	addi	sp,sp,-4
     60c:	10841004 	addi	r2,r2,4160
     610:	dfc00015 	stw	ra,0(sp)
     614:	1140002b 	ldhuio	r5,0(r2)
     618:	01000074 	movhi	r4,1
     61c:	2103e804 	addi	r4,r4,4000
     620:	297fffcc 	andi	r5,r5,65535
     624:	00026080 	call	2608 <printf>
     628:	00804034 	movhi	r2,256
     62c:	10841104 	addi	r2,r2,4164
     630:	1140002b 	ldhuio	r5,0(r2)
     634:	01000074 	movhi	r4,1
     638:	2103f004 	addi	r4,r4,4032
     63c:	297fffcc 	andi	r5,r5,65535
     640:	00026080 	call	2608 <printf>
     644:	00804034 	movhi	r2,256
     648:	10841204 	addi	r2,r2,4168
     64c:	1140002b 	ldhuio	r5,0(r2)
     650:	01000074 	movhi	r4,1
     654:	2103f804 	addi	r4,r4,4064
     658:	297fffcc 	andi	r5,r5,65535
     65c:	dfc00017 	ldw	ra,0(sp)
     660:	dec00104 	addi	sp,sp,4
     664:	00026081 	jmpi	2608 <printf>

00000668 <cam_set_image_pointer>:
     668:	21003fcc 	andi	r4,r4,255
     66c:	2100201c 	xori	r4,r4,128
     670:	213fe004 	addi	r4,r4,-128
     674:	00800044 	movi	r2,1
     678:	20801226 	beq	r4,r2,6c4 <cam_set_image_pointer+0x5c>
     67c:	11000c0e 	bge	r2,r4,6b0 <cam_set_image_pointer+0x48>
     680:	00800084 	movi	r2,2
     684:	20800626 	beq	r4,r2,6a0 <cam_set_image_pointer+0x38>
     688:	008000c4 	movi	r2,3
     68c:	2080111e 	bne	r4,r2,6d4 <cam_set_image_pointer+0x6c>
     690:	00804034 	movhi	r2,256
     694:	10841704 	addi	r2,r2,4188
     698:	11400035 	stwio	r5,0(r2)
     69c:	f800283a 	ret
     6a0:	00804034 	movhi	r2,256
     6a4:	10841604 	addi	r2,r2,4184
     6a8:	11400035 	stwio	r5,0(r2)
     6ac:	f800283a 	ret
     6b0:	2000091e 	bne	r4,zero,6d8 <cam_set_image_pointer+0x70>
     6b4:	00804034 	movhi	r2,256
     6b8:	10841404 	addi	r2,r2,4176
     6bc:	11400035 	stwio	r5,0(r2)
     6c0:	f800283a 	ret
     6c4:	00804034 	movhi	r2,256
     6c8:	10841504 	addi	r2,r2,4180
     6cc:	11400035 	stwio	r5,0(r2)
     6d0:	f800283a 	ret
     6d4:	f800283a 	ret
     6d8:	f800283a 	ret

000006dc <current_image_valid>:
     6dc:	00804034 	movhi	r2,256
     6e0:	10841304 	addi	r2,r2,4172
     6e4:	1080002b 	ldhuio	r2,0(r2)
     6e8:	1080800c 	andi	r2,r2,512
     6ec:	f800283a 	ret

000006f0 <current_image_pointer>:
     6f0:	00804034 	movhi	r2,256
     6f4:	10841404 	addi	r2,r2,4176
     6f8:	10800037 	ldwio	r2,0(r2)
     6fc:	f800283a 	ret

00000700 <take_picture_blocking>:
     700:	00c04034 	movhi	r3,256
     704:	18c41304 	addi	r3,r3,4172
     708:	00800204 	movi	r2,8
     70c:	1880002d 	sthio	r2,0(r3)
     710:	1880002b 	ldhuio	r2,0(r3)
     714:	1080020c 	andi	r2,r2,8
     718:	103ffd1e 	bne	r2,zero,710 <__alt_data_end+0xff000710>
     71c:	f800283a 	ret

00000720 <enable_continues_mode>:
     720:	00804034 	movhi	r2,256
     724:	10841304 	addi	r2,r2,4172
     728:	00c00404 	movi	r3,16
     72c:	10c0002d 	sthio	r3,0(r2)
     730:	f800283a 	ret

00000734 <new_image_available>:
     734:	00c04034 	movhi	r3,256
     738:	18c41304 	addi	r3,r3,4172
     73c:	1880002b 	ldhuio	r2,0(r3)
     740:	1080200c 	andi	r2,r2,128
     744:	1000021e 	bne	r2,zero,750 <new_image_available+0x1c>
     748:	0005883a 	mov	r2,zero
     74c:	f800283a 	ret
     750:	00804004 	movi	r2,256
     754:	1880002d 	sthio	r2,0(r3)
     758:	00800044 	movi	r2,1
     75c:	f800283a 	ret

00000760 <DIPSW_get_value>:
     760:	00804034 	movhi	r2,256
     764:	10842804 	addi	r2,r2,4256
     768:	10800023 	ldbuio	r2,0(r2)
     76c:	0084303a 	nor	r2,zero,r2
     770:	f800283a 	ret

00000774 <conv_grayscale>:
     774:	d0a6cd17 	ldw	r2,-25804(gp)
     778:	defffc04 	addi	sp,sp,-16
     77c:	dc800215 	stw	r18,8(sp)
     780:	dc400115 	stw	r17,4(sp)
     784:	dc000015 	stw	r16,0(sp)
     788:	dfc00315 	stw	ra,12(sp)
     78c:	d166cc15 	stw	r5,-25808(gp)
     790:	d1a6cb15 	stw	r6,-25812(gp)
     794:	2821883a 	mov	r16,r5
     798:	3023883a 	mov	r17,r6
     79c:	2025883a 	mov	r18,r4
     7a0:	10000226 	beq	r2,zero,7ac <conv_grayscale+0x38>
     7a4:	1009883a 	mov	r4,r2
     7a8:	0001db80 	call	1db8 <free>
     7ac:	8449383a 	mul	r4,r16,r17
     7b0:	0001da40 	call	1da4 <malloc>
     7b4:	d0a6cd15 	stw	r2,-25804(gp)
     7b8:	0440200e 	bge	zero,r17,83c <conv_grayscale+0xc8>
     7bc:	840d883a 	add	r6,r16,r16
     7c0:	9009883a 	mov	r4,r18
     7c4:	8017883a 	mov	r11,r16
     7c8:	000b883a 	mov	r5,zero
     7cc:	0400170e 	bge	zero,r16,82c <conv_grayscale+0xb8>
     7d0:	5c13c83a 	sub	r9,r11,r16
     7d4:	2015883a 	mov	r10,r4
     7d8:	5080000b 	ldhu	r2,0(r10)
     7dc:	100ed17a 	srli	r7,r2,5
     7e0:	1010d2fa 	srli	r8,r2,11
     7e4:	100690fa 	slli	r3,r2,3
     7e8:	39cf883a 	add	r7,r7,r7
     7ec:	400490fa 	slli	r2,r8,3
     7f0:	39cf883a 	add	r7,r7,r7
     7f4:	39c03fcc 	andi	r7,r7,255
     7f8:	39c01724 	muli	r7,r7,92
     7fc:	108006e4 	muli	r2,r2,27
     800:	18c03fcc 	andi	r3,r3,255
     804:	18c00264 	muli	r3,r3,9
     808:	3885883a 	add	r2,r7,r2
     80c:	d1e6cd17 	ldw	r7,-25804(gp)
     810:	10c5883a 	add	r2,r2,r3
     814:	1005d1fa 	srai	r2,r2,7
     818:	3a4f883a 	add	r7,r7,r9
     81c:	38800025 	stbio	r2,0(r7)
     820:	4a400044 	addi	r9,r9,1
     824:	52800084 	addi	r10,r10,2
     828:	5a7feb1e 	bne	r11,r9,7d8 <__alt_data_end+0xff0007d8>
     82c:	29400044 	addi	r5,r5,1
     830:	2189883a 	add	r4,r4,r6
     834:	5c17883a 	add	r11,r11,r16
     838:	897fe41e 	bne	r17,r5,7cc <__alt_data_end+0xff0007cc>
     83c:	dfc00317 	ldw	ra,12(sp)
     840:	dc800217 	ldw	r18,8(sp)
     844:	dc400117 	ldw	r17,4(sp)
     848:	dc000017 	ldw	r16,0(sp)
     84c:	dec00404 	addi	sp,sp,16
     850:	f800283a 	ret

00000854 <get_grayscale_width>:
     854:	d0a6cc17 	ldw	r2,-25808(gp)
     858:	f800283a 	ret

0000085c <get_grayscale_height>:
     85c:	d0a6cb17 	ldw	r2,-25812(gp)
     860:	f800283a 	ret

00000864 <get_grayscale_picture>:
     864:	d0a6cd17 	ldw	r2,-25804(gp)
     868:	f800283a 	ret

0000086c <i2c_busy_wait>:
     86c:	00c04034 	movhi	r3,256
     870:	18c42704 	addi	r3,r3,4252
     874:	18800037 	ldwio	r2,0(r3)
     878:	108000cc 	andi	r2,r2,3
     87c:	103ffd1e 	bne	r2,zero,874 <__alt_data_end+0xff000874>
     880:	f800283a 	ret

00000884 <i2c_auto_detect>:
     884:	01004034 	movhi	r4,256
     888:	21042704 	addi	r4,r4,4252
     88c:	00c04034 	movhi	r3,256
     890:	18c42704 	addi	r3,r3,4252
     894:	20800037 	ldwio	r2,0(r4)
     898:	108000cc 	andi	r2,r2,3
     89c:	103ffb1e 	bne	r2,zero,88c <__alt_data_end+0xff00088c>
     8a0:	00800104 	movi	r2,4
     8a4:	18800035 	stwio	r2,0(r3)
     8a8:	18800037 	ldwio	r2,0(r3)
     8ac:	108000cc 	andi	r2,r2,3
     8b0:	103ffd1e 	bne	r2,zero,8a8 <__alt_data_end+0xff0008a8>
     8b4:	00804034 	movhi	r2,256
     8b8:	defffc04 	addi	sp,sp,-16
     8bc:	10842504 	addi	r2,r2,4244
     8c0:	dfc00315 	stw	ra,12(sp)
     8c4:	dc800215 	stw	r18,8(sp)
     8c8:	dc400115 	stw	r17,4(sp)
     8cc:	dc000015 	stw	r16,0(sp)
     8d0:	14800037 	ldwio	r18,0(r2)
     8d4:	01000074 	movhi	r4,1
     8d8:	2104e004 	addi	r4,r4,4992
     8dc:	900b883a 	mov	r5,r18
     8e0:	0021883a 	mov	r16,zero
     8e4:	00026080 	call	2608 <printf>
     8e8:	04800a0e 	bge	zero,r18,914 <i2c_auto_detect+0x90>
     8ec:	04404034 	movhi	r17,256
     8f0:	8c442404 	addi	r17,r17,4240
     8f4:	8c000035 	stwio	r16,0(r17)
     8f8:	89800037 	ldwio	r6,0(r17)
     8fc:	01000074 	movhi	r4,1
     900:	800b883a 	mov	r5,r16
     904:	2104e904 	addi	r4,r4,5028
     908:	84000044 	addi	r16,r16,1
     90c:	00026080 	call	2608 <printf>
     910:	943ff81e 	bne	r18,r16,8f4 <__alt_data_end+0xff0008f4>
     914:	dfc00317 	ldw	ra,12(sp)
     918:	dc800217 	ldw	r18,8(sp)
     91c:	dc400117 	ldw	r17,4(sp)
     920:	dc000017 	ldw	r16,0(sp)
     924:	dec00404 	addi	sp,sp,16
     928:	f800283a 	ret

0000092c <i2c_short_read>:
     92c:	01804034 	movhi	r6,256
     930:	31842704 	addi	r6,r6,4252
     934:	00c04034 	movhi	r3,256
     938:	18c42704 	addi	r3,r3,4252
     93c:	30800037 	ldwio	r2,0(r6)
     940:	108000cc 	andi	r2,r2,3
     944:	103ffb1e 	bne	r2,zero,934 <__alt_data_end+0xff000934>
     948:	00804034 	movhi	r2,256
     94c:	21003fcc 	andi	r4,r4,255
     950:	10842404 	addi	r2,r2,4240
     954:	11000025 	stbio	r4,0(r2)
     958:	00804034 	movhi	r2,256
     95c:	10842504 	addi	r2,r2,4244
     960:	1140002d 	sthio	r5,0(r2)
     964:	008010c4 	movi	r2,67
     968:	18800025 	stbio	r2,0(r3)
     96c:	180b883a 	mov	r5,r3
     970:	00c04034 	movhi	r3,256
     974:	18c42704 	addi	r3,r3,4252
     978:	28800037 	ldwio	r2,0(r5)
     97c:	108000cc 	andi	r2,r2,3
     980:	103ffb1e 	bne	r2,zero,970 <__alt_data_end+0xff000970>
     984:	00804034 	movhi	r2,256
     988:	21000044 	addi	r4,r4,1
     98c:	10842404 	addi	r2,r2,4240
     990:	11000025 	stbio	r4,0(r2)
     994:	00800884 	movi	r2,34
     998:	18800025 	stbio	r2,0(r3)
     99c:	18800037 	ldwio	r2,0(r3)
     9a0:	108000cc 	andi	r2,r2,3
     9a4:	103ffd1e 	bne	r2,zero,99c <__alt_data_end+0xff00099c>
     9a8:	00804034 	movhi	r2,256
     9ac:	10842604 	addi	r2,r2,4248
     9b0:	10800037 	ldwio	r2,0(r2)
     9b4:	f800283a 	ret

000009b8 <i2c_short_write>:
     9b8:	01c04034 	movhi	r7,256
     9bc:	39c42704 	addi	r7,r7,4252
     9c0:	00c04034 	movhi	r3,256
     9c4:	18c42704 	addi	r3,r3,4252
     9c8:	38800037 	ldwio	r2,0(r7)
     9cc:	108000cc 	andi	r2,r2,3
     9d0:	103ffb1e 	bne	r2,zero,9c0 <__alt_data_end+0xff0009c0>
     9d4:	00804034 	movhi	r2,256
     9d8:	10842404 	addi	r2,r2,4240
     9dc:	11000025 	stbio	r4,0(r2)
     9e0:	00804034 	movhi	r2,256
     9e4:	10842504 	addi	r2,r2,4244
     9e8:	1140002d 	sthio	r5,0(r2)
     9ec:	00804034 	movhi	r2,256
     9f0:	10842604 	addi	r2,r2,4248
     9f4:	1180002d 	sthio	r6,0(r2)
     9f8:	00801084 	movi	r2,66
     9fc:	18800025 	stbio	r2,0(r3)
     a00:	18800037 	ldwio	r2,0(r3)
     a04:	108000cc 	andi	r2,r2,3
     a08:	103ffd1e 	bne	r2,zero,a00 <__alt_data_end+0xff000a00>
     a0c:	f800283a 	ret

00000a10 <LCD_Write_Command>:
     a10:	00804034 	movhi	r2,256
     a14:	10841804 	addi	r2,r2,4192
     a18:	1100002d 	sthio	r4,0(r2)
     a1c:	01000284 	movi	r4,10
     a20:	000ed481 	jmpi	ed48 <usleep>

00000a24 <LCD_Write_Data>:
     a24:	00804034 	movhi	r2,256
     a28:	10841904 	addi	r2,r2,4196
     a2c:	1100002d 	sthio	r4,0(r2)
     a30:	01000284 	movi	r4,10
     a34:	000ed481 	jmpi	ed48 <usleep>

00000a38 <init_LCD>:
     a38:	defff704 	addi	sp,sp,-36
     a3c:	00804034 	movhi	r2,256
     a40:	dd400515 	stw	r21,20(sp)
     a44:	dfc00815 	stw	ra,32(sp)
     a48:	ddc00715 	stw	r23,28(sp)
     a4c:	dd800615 	stw	r22,24(sp)
     a50:	dd000415 	stw	r20,16(sp)
     a54:	dcc00315 	stw	r19,12(sp)
     a58:	dc800215 	stw	r18,8(sp)
     a5c:	dc400115 	stw	r17,4(sp)
     a60:	dc000015 	stw	r16,0(sp)
     a64:	05400084 	movi	r21,2
     a68:	10841a04 	addi	r2,r2,4200
     a6c:	1540002d 	sthio	r21,0(r2)
     a70:	04804034 	movhi	r18,256
     a74:	94841804 	addi	r18,r18,4192
     a78:	00800a04 	movi	r2,40
     a7c:	9080002d 	sthio	r2,0(r18)
     a80:	04000284 	movi	r16,10
     a84:	8009883a 	mov	r4,r16
     a88:	000ed480 	call	ed48 <usleep>
     a8c:	05c00444 	movi	r23,17
     a90:	95c0002d 	sthio	r23,0(r18)
     a94:	8009883a 	mov	r4,r16
     a98:	04404034 	movhi	r17,256
     a9c:	8c441904 	addi	r17,r17,4196
     aa0:	000ed480 	call	ed48 <usleep>
     aa4:	0027883a 	mov	r19,zero
     aa8:	8cc0002d 	sthio	r19,0(r17)
     aac:	8009883a 	mov	r4,r16
     ab0:	000ed480 	call	ed48 <usleep>
     ab4:	008032c4 	movi	r2,203
     ab8:	9080002d 	sthio	r2,0(r18)
     abc:	8009883a 	mov	r4,r16
     ac0:	000ed480 	call	ed48 <usleep>
     ac4:	00800e44 	movi	r2,57
     ac8:	8880002d 	sthio	r2,0(r17)
     acc:	8009883a 	mov	r4,r16
     ad0:	000ed480 	call	ed48 <usleep>
     ad4:	00800b04 	movi	r2,44
     ad8:	8880002d 	sthio	r2,0(r17)
     adc:	8009883a 	mov	r4,r16
     ae0:	000ed480 	call	ed48 <usleep>
     ae4:	8cc0002d 	sthio	r19,0(r17)
     ae8:	8009883a 	mov	r4,r16
     aec:	000ed480 	call	ed48 <usleep>
     af0:	00800d04 	movi	r2,52
     af4:	8880002d 	sthio	r2,0(r17)
     af8:	8009883a 	mov	r4,r16
     afc:	000ed480 	call	ed48 <usleep>
     b00:	8d40002d 	sthio	r21,0(r17)
     b04:	8009883a 	mov	r4,r16
     b08:	000ed480 	call	ed48 <usleep>
     b0c:	008033c4 	movi	r2,207
     b10:	9080002d 	sthio	r2,0(r18)
     b14:	8009883a 	mov	r4,r16
     b18:	000ed480 	call	ed48 <usleep>
     b1c:	8cc0002d 	sthio	r19,0(r17)
     b20:	8009883a 	mov	r4,r16
     b24:	000ed480 	call	ed48 <usleep>
     b28:	05802044 	movi	r22,129
     b2c:	8d80002d 	sthio	r22,0(r17)
     b30:	8009883a 	mov	r4,r16
     b34:	000ed480 	call	ed48 <usleep>
     b38:	00800c04 	movi	r2,48
     b3c:	8880002d 	sthio	r2,0(r17)
     b40:	8009883a 	mov	r4,r16
     b44:	000ed480 	call	ed48 <usleep>
     b48:	00803a04 	movi	r2,232
     b4c:	9080002d 	sthio	r2,0(r18)
     b50:	8009883a 	mov	r4,r16
     b54:	000ed480 	call	ed48 <usleep>
     b58:	00802144 	movi	r2,133
     b5c:	8880002d 	sthio	r2,0(r17)
     b60:	8009883a 	mov	r4,r16
     b64:	000ed480 	call	ed48 <usleep>
     b68:	05000044 	movi	r20,1
     b6c:	8d00002d 	sthio	r20,0(r17)
     b70:	8009883a 	mov	r4,r16
     b74:	000ed480 	call	ed48 <usleep>
     b78:	00801e44 	movi	r2,121
     b7c:	8880002d 	sthio	r2,0(r17)
     b80:	8009883a 	mov	r4,r16
     b84:	000ed480 	call	ed48 <usleep>
     b88:	00803a84 	movi	r2,234
     b8c:	9080002d 	sthio	r2,0(r18)
     b90:	8009883a 	mov	r4,r16
     b94:	000ed480 	call	ed48 <usleep>
     b98:	8cc0002d 	sthio	r19,0(r17)
     b9c:	8009883a 	mov	r4,r16
     ba0:	000ed480 	call	ed48 <usleep>
     ba4:	8cc0002d 	sthio	r19,0(r17)
     ba8:	8009883a 	mov	r4,r16
     bac:	000ed480 	call	ed48 <usleep>
     bb0:	00801904 	movi	r2,100
     bb4:	8880002d 	sthio	r2,0(r17)
     bb8:	8009883a 	mov	r4,r16
     bbc:	000ed480 	call	ed48 <usleep>
     bc0:	008000c4 	movi	r2,3
     bc4:	8880002d 	sthio	r2,0(r17)
     bc8:	8009883a 	mov	r4,r16
     bcc:	000ed480 	call	ed48 <usleep>
     bd0:	00800484 	movi	r2,18
     bd4:	8880002d 	sthio	r2,0(r17)
     bd8:	8009883a 	mov	r4,r16
     bdc:	000ed480 	call	ed48 <usleep>
     be0:	8d80002d 	sthio	r22,0(r17)
     be4:	8009883a 	mov	r4,r16
     be8:	000ed480 	call	ed48 <usleep>
     bec:	00803dc4 	movi	r2,247
     bf0:	9080002d 	sthio	r2,0(r18)
     bf4:	8009883a 	mov	r4,r16
     bf8:	000ed480 	call	ed48 <usleep>
     bfc:	00800804 	movi	r2,32
     c00:	8880002d 	sthio	r2,0(r17)
     c04:	8009883a 	mov	r4,r16
     c08:	000ed480 	call	ed48 <usleep>
     c0c:	00803004 	movi	r2,192
     c10:	9080002d 	sthio	r2,0(r18)
     c14:	8009883a 	mov	r4,r16
     c18:	000ed480 	call	ed48 <usleep>
     c1c:	05800984 	movi	r22,38
     c20:	8d80002d 	sthio	r22,0(r17)
     c24:	8009883a 	mov	r4,r16
     c28:	000ed480 	call	ed48 <usleep>
     c2c:	00800104 	movi	r2,4
     c30:	8880002d 	sthio	r2,0(r17)
     c34:	8009883a 	mov	r4,r16
     c38:	000ed480 	call	ed48 <usleep>
     c3c:	00803044 	movi	r2,193
     c40:	9080002d 	sthio	r2,0(r18)
     c44:	8009883a 	mov	r4,r16
     c48:	000ed480 	call	ed48 <usleep>
     c4c:	8dc0002d 	sthio	r23,0(r17)
     c50:	8009883a 	mov	r4,r16
     c54:	000ed480 	call	ed48 <usleep>
     c58:	00803144 	movi	r2,197
     c5c:	9080002d 	sthio	r2,0(r18)
     c60:	8009883a 	mov	r4,r16
     c64:	000ed480 	call	ed48 <usleep>
     c68:	00800d44 	movi	r2,53
     c6c:	8880002d 	sthio	r2,0(r17)
     c70:	8009883a 	mov	r4,r16
     c74:	000ed480 	call	ed48 <usleep>
     c78:	00800f84 	movi	r2,62
     c7c:	8880002d 	sthio	r2,0(r17)
     c80:	8009883a 	mov	r4,r16
     c84:	000ed480 	call	ed48 <usleep>
     c88:	008031c4 	movi	r2,199
     c8c:	9080002d 	sthio	r2,0(r18)
     c90:	8009883a 	mov	r4,r16
     c94:	000ed480 	call	ed48 <usleep>
     c98:	00802f84 	movi	r2,190
     c9c:	8880002d 	sthio	r2,0(r17)
     ca0:	8009883a 	mov	r4,r16
     ca4:	000ed480 	call	ed48 <usleep>
     ca8:	00802c44 	movi	r2,177
     cac:	9080002d 	sthio	r2,0(r18)
     cb0:	8009883a 	mov	r4,r16
     cb4:	000ed480 	call	ed48 <usleep>
     cb8:	8cc0002d 	sthio	r19,0(r17)
     cbc:	8009883a 	mov	r4,r16
     cc0:	000ed480 	call	ed48 <usleep>
     cc4:	00800404 	movi	r2,16
     cc8:	8880002d 	sthio	r2,0(r17)
     ccc:	8009883a 	mov	r4,r16
     cd0:	000ed480 	call	ed48 <usleep>
     cd4:	00800e84 	movi	r2,58
     cd8:	9080002d 	sthio	r2,0(r18)
     cdc:	8009883a 	mov	r4,r16
     ce0:	000ed480 	call	ed48 <usleep>
     ce4:	00801544 	movi	r2,85
     ce8:	8880002d 	sthio	r2,0(r17)
     cec:	8009883a 	mov	r4,r16
     cf0:	000ed480 	call	ed48 <usleep>
     cf4:	00802d84 	movi	r2,182
     cf8:	9080002d 	sthio	r2,0(r18)
     cfc:	8009883a 	mov	r4,r16
     d00:	000ed480 	call	ed48 <usleep>
     d04:	8c00002d 	sthio	r16,0(r17)
     d08:	8009883a 	mov	r4,r16
     d0c:	000ed480 	call	ed48 <usleep>
     d10:	00802884 	movi	r2,162
     d14:	8880002d 	sthio	r2,0(r17)
     d18:	8009883a 	mov	r4,r16
     d1c:	000ed480 	call	ed48 <usleep>
     d20:	00803c84 	movi	r2,242
     d24:	9080002d 	sthio	r2,0(r18)
     d28:	8009883a 	mov	r4,r16
     d2c:	000ed480 	call	ed48 <usleep>
     d30:	8d40002d 	sthio	r21,0(r17)
     d34:	8009883a 	mov	r4,r16
     d38:	000ed480 	call	ed48 <usleep>
     d3c:	9580002d 	sthio	r22,0(r18)
     d40:	8009883a 	mov	r4,r16
     d44:	000ed480 	call	ed48 <usleep>
     d48:	8d00002d 	sthio	r20,0(r17)
     d4c:	8009883a 	mov	r4,r16
     d50:	000ed480 	call	ed48 <usleep>
     d54:	00800d84 	movi	r2,54
     d58:	9080002d 	sthio	r2,0(r18)
     d5c:	8009883a 	mov	r4,r16
     d60:	000ed480 	call	ed48 <usleep>
     d64:	8cc0002d 	sthio	r19,0(r17)
     d68:	8009883a 	mov	r4,r16
     d6c:	000ed480 	call	ed48 <usleep>
     d70:	00800a84 	movi	r2,42
     d74:	9080002d 	sthio	r2,0(r18)
     d78:	8009883a 	mov	r4,r16
     d7c:	000ed480 	call	ed48 <usleep>
     d80:	8cc0002d 	sthio	r19,0(r17)
     d84:	8009883a 	mov	r4,r16
     d88:	000ed480 	call	ed48 <usleep>
     d8c:	8cc0002d 	sthio	r19,0(r17)
     d90:	8009883a 	mov	r4,r16
     d94:	000ed480 	call	ed48 <usleep>
     d98:	8cc0002d 	sthio	r19,0(r17)
     d9c:	8009883a 	mov	r4,r16
     da0:	000ed480 	call	ed48 <usleep>
     da4:	00803bc4 	movi	r2,239
     da8:	8880002d 	sthio	r2,0(r17)
     dac:	8009883a 	mov	r4,r16
     db0:	000ed480 	call	ed48 <usleep>
     db4:	00800ac4 	movi	r2,43
     db8:	9080002d 	sthio	r2,0(r18)
     dbc:	8009883a 	mov	r4,r16
     dc0:	000ed480 	call	ed48 <usleep>
     dc4:	8cc0002d 	sthio	r19,0(r17)
     dc8:	8009883a 	mov	r4,r16
     dcc:	000ed480 	call	ed48 <usleep>
     dd0:	8cc0002d 	sthio	r19,0(r17)
     dd4:	8009883a 	mov	r4,r16
     dd8:	000ed480 	call	ed48 <usleep>
     ddc:	8d00002d 	sthio	r20,0(r17)
     de0:	8009883a 	mov	r4,r16
     de4:	000ed480 	call	ed48 <usleep>
     de8:	00800fc4 	movi	r2,63
     dec:	8880002d 	sthio	r2,0(r17)
     df0:	8009883a 	mov	r4,r16
     df4:	000ed480 	call	ed48 <usleep>
     df8:	00c04034 	movhi	r3,256
     dfc:	00803c04 	movi	r2,240
     e00:	18c41d04 	addi	r3,r3,4212
     e04:	18800035 	stwio	r2,0(r3)
     e08:	d0a6ce8d 	sth	r2,-25798(gp)
     e0c:	00805004 	movi	r2,320
     e10:	d0a6ce0d 	sth	r2,-25800(gp)
     e14:	00800a44 	movi	r2,41
     e18:	9080002d 	sthio	r2,0(r18)
     e1c:	8009883a 	mov	r4,r16
     e20:	dfc00817 	ldw	ra,32(sp)
     e24:	ddc00717 	ldw	r23,28(sp)
     e28:	dd800617 	ldw	r22,24(sp)
     e2c:	dd400517 	ldw	r21,20(sp)
     e30:	dd000417 	ldw	r20,16(sp)
     e34:	dcc00317 	ldw	r19,12(sp)
     e38:	dc800217 	ldw	r18,8(sp)
     e3c:	dc400117 	ldw	r17,4(sp)
     e40:	dc000017 	ldw	r16,0(sp)
     e44:	dec00904 	addi	sp,sp,36
     e48:	000ed481 	jmpi	ed48 <usleep>

00000e4c <transfer_LCD_no_dma>:
     e4c:	defffb04 	addi	sp,sp,-20
     e50:	00804034 	movhi	r2,256
     e54:	dc000015 	stw	r16,0(sp)
     e58:	dfc00415 	stw	ra,16(sp)
     e5c:	dcc00315 	stw	r19,12(sp)
     e60:	dc800215 	stw	r18,8(sp)
     e64:	dc400115 	stw	r17,4(sp)
     e68:	2021883a 	mov	r16,r4
     e6c:	10841e04 	addi	r2,r2,4216
     e70:	11400035 	stwio	r5,0(r2)
     e74:	00804034 	movhi	r2,256
     e78:	10841804 	addi	r2,r2,4192
     e7c:	00c00b04 	movi	r3,44
     e80:	10c0002d 	sthio	r3,0(r2)
     e84:	29a5383a 	mul	r18,r5,r6
     e88:	01000284 	movi	r4,10
     e8c:	000ed480 	call	ed48 <usleep>
     e90:	90000a26 	beq	r18,zero,ebc <transfer_LCD_no_dma+0x70>
     e94:	04c04034 	movhi	r19,256
     e98:	9cc41904 	addi	r19,r19,4196
     e9c:	0023883a 	mov	r17,zero
     ea0:	8080000b 	ldhu	r2,0(r16)
     ea4:	9880002d 	sthio	r2,0(r19)
     ea8:	01000284 	movi	r4,10
     eac:	8c400044 	addi	r17,r17,1
     eb0:	000ed480 	call	ed48 <usleep>
     eb4:	84000084 	addi	r16,r16,2
     eb8:	8cbff91e 	bne	r17,r18,ea0 <__alt_data_end+0xff000ea0>
     ebc:	dfc00417 	ldw	ra,16(sp)
     ec0:	dcc00317 	ldw	r19,12(sp)
     ec4:	dc800217 	ldw	r18,8(sp)
     ec8:	dc400117 	ldw	r17,4(sp)
     ecc:	dc000017 	ldw	r16,0(sp)
     ed0:	dec00504 	addi	sp,sp,20
     ed4:	f800283a 	ret

00000ed8 <transfer_LCD_with_dma>:
     ed8:	d0a6ce0b 	ldhu	r2,-25800(gp)
     edc:	3080010e 	bge	r6,r2,ee4 <transfer_LCD_with_dma+0xc>
     ee0:	3005883a 	mov	r2,r6
     ee4:	d0e6ce8b 	ldhu	r3,-25798(gp)
     ee8:	28c0010e 	bge	r5,r3,ef0 <transfer_LCD_with_dma+0x18>
     eec:	2807883a 	mov	r3,r5
     ef0:	01804034 	movhi	r6,256
     ef4:	31841e04 	addi	r6,r6,4216
     ef8:	31400035 	stwio	r5,0(r6)
     efc:	01404034 	movhi	r5,256
     f00:	29441b04 	addi	r5,r5,4204
     f04:	29000035 	stwio	r4,0(r5)
     f08:	18ffffcc 	andi	r3,r3,65535
     f0c:	10bfffcc 	andi	r2,r2,65535
     f10:	1885383a 	mul	r2,r3,r2
     f14:	00c04034 	movhi	r3,256
     f18:	18c41c04 	addi	r3,r3,4208
     f1c:	18800035 	stwio	r2,0(r3)
     f20:	39c03fcc 	andi	r7,r7,255
     f24:	39c0201c 	xori	r7,r7,128
     f28:	00804034 	movhi	r2,256
     f2c:	39ffe004 	addi	r7,r7,-128
     f30:	10841a04 	addi	r2,r2,4200
     f34:	38000326 	beq	r7,zero,f44 <transfer_LCD_with_dma+0x6c>
     f38:	00c04404 	movi	r3,272
     f3c:	10c0002d 	sthio	r3,0(r2)
     f40:	f800283a 	ret
     f44:	00c04004 	movi	r3,256
     f48:	10c0002d 	sthio	r3,0(r2)
     f4c:	f800283a 	ret

00000f50 <main>:
     f50:	defff804 	addi	sp,sp,-32
     f54:	dfc00715 	stw	ra,28(sp)
     f58:	dd400515 	stw	r21,20(sp)
     f5c:	dd000415 	stw	r20,16(sp)
     f60:	dcc00315 	stw	r19,12(sp)
     f64:	dc800215 	stw	r18,8(sp)
     f68:	dc400115 	stw	r17,4(sp)
     f6c:	dc000015 	stw	r16,0(sp)
     f70:	dd800615 	stw	r22,24(sp)
     f74:	0000a380 	call	a38 <init_LCD>
     f78:	00002900 	call	290 <init_camera>
     f7c:	01000604 	movi	r4,24
     f80:	0001be00 	call	1be0 <vga_set_swap>
     f84:	000faf00 	call	faf0 <alt_timestamp_start>
     f88:	01000074 	movhi	r4,1
     f8c:	2104f204 	addi	r4,r4,5064
     f90:	00027040 	call	2704 <puts>
     f94:	00005f00 	call	5f0 <cam_get_profiling>
     f98:	00005a80 	call	5a8 <cam_get_xsize>
     f9c:	1021883a 	mov	r16,r2
     fa0:	00005cc0 	call	5cc <cam_get_ysize>
     fa4:	10bfffcc 	andi	r2,r2,65535
     fa8:	813fffcc 	andi	r4,r16,65535
     fac:	2089383a 	mul	r4,r4,r2
     fb0:	04800044 	movi	r18,1
     fb4:	04e04414 	movui	r19,33040
     fb8:	0001da40 	call	1da4 <malloc>
     fbc:	102b883a 	mov	r21,r2
     fc0:	00005a80 	call	5a8 <cam_get_xsize>
     fc4:	1021883a 	mov	r16,r2
     fc8:	00005cc0 	call	5cc <cam_get_ysize>
     fcc:	10bfffcc 	andi	r2,r2,65535
     fd0:	813fffcc 	andi	r4,r16,65535
     fd4:	2089383a 	mul	r4,r4,r2
     fd8:	0001da40 	call	1da4 <malloc>
     fdc:	1029883a 	mov	r20,r2
     fe0:	00005a80 	call	5a8 <cam_get_xsize>
     fe4:	1021883a 	mov	r16,r2
     fe8:	00005cc0 	call	5cc <cam_get_ysize>
     fec:	10bfffcc 	andi	r2,r2,65535
     ff0:	813fffcc 	andi	r4,r16,65535
     ff4:	2089383a 	mul	r4,r4,r2
     ff8:	0001da40 	call	1da4 <malloc>
     ffc:	1023883a 	mov	r17,r2
    1000:	00005a80 	call	5a8 <cam_get_xsize>
    1004:	1021883a 	mov	r16,r2
    1008:	00005cc0 	call	5cc <cam_get_ysize>
    100c:	10bfffcc 	andi	r2,r2,65535
    1010:	813fffcc 	andi	r4,r16,65535
    1014:	2089383a 	mul	r4,r4,r2
    1018:	0001da40 	call	1da4 <malloc>
    101c:	a80b883a 	mov	r5,r21
    1020:	0009883a 	mov	r4,zero
    1024:	1021883a 	mov	r16,r2
    1028:	00006680 	call	668 <cam_set_image_pointer>
    102c:	a00b883a 	mov	r5,r20
    1030:	9009883a 	mov	r4,r18
    1034:	00006680 	call	668 <cam_set_image_pointer>
    1038:	880b883a 	mov	r5,r17
    103c:	01000084 	movi	r4,2
    1040:	00006680 	call	668 <cam_set_image_pointer>
    1044:	800b883a 	mov	r5,r16
    1048:	010000c4 	movi	r4,3
    104c:	00006680 	call	668 <cam_set_image_pointer>
    1050:	00007200 	call	720 <enable_continues_mode>
    1054:	00005a80 	call	5a8 <cam_get_xsize>
    1058:	1021883a 	mov	r16,r2
    105c:	00005cc0 	call	5cc <cam_get_ysize>
    1060:	813fffcc 	andi	r4,r16,65535
    1064:	2488d83a 	srl	r4,r4,r18
    1068:	117fffcc 	andi	r5,r2,65535
    106c:	00013300 	call	1330 <init_sobel_arrays>
    1070:	00007340 	call	734 <new_image_available>
    1074:	10803fcc 	andi	r2,r2,255
    1078:	1080201c 	xori	r2,r2,128
    107c:	10bfe004 	addi	r2,r2,-128
    1080:	103ffb26 	beq	r2,zero,1070 <__alt_data_end+0xff001070>
    1084:	00006dc0 	call	6dc <current_image_valid>
    1088:	10bfffcc 	andi	r2,r2,65535
    108c:	10a0001c 	xori	r2,r2,32768
    1090:	10a00004 	addi	r2,r2,-32768
    1094:	103ff626 	beq	r2,zero,1070 <__alt_data_end+0xff001070>
    1098:	00007600 	call	760 <DIPSW_get_value>
    109c:	1021883a 	mov	r16,r2
    10a0:	00006f00 	call	6f0 <current_image_pointer>
    10a4:	1023883a 	mov	r17,r2
    10a8:	808001cc 	andi	r2,r16,7
    10ac:	14807f26 	beq	r2,r18,12ac <main+0x35c>
    10b0:	10006c26 	beq	r2,zero,1264 <main+0x314>
    10b4:	00c00084 	movi	r3,2
    10b8:	10c05e26 	beq	r2,r3,1234 <main+0x2e4>
    10bc:	00c000c4 	movi	r3,3
    10c0:	10c0221e 	bne	r2,r3,114c <main+0x1fc>
    10c4:	00005a80 	call	5a8 <cam_get_xsize>
    10c8:	1029883a 	mov	r20,r2
    10cc:	00005cc0 	call	5cc <cam_get_ysize>
    10d0:	a17fffcc 	andi	r5,r20,65535
    10d4:	280ad07a 	srli	r5,r5,1
    10d8:	8809883a 	mov	r4,r17
    10dc:	11bfffcc 	andi	r6,r2,65535
    10e0:	00007740 	call	774 <conv_grayscale>
    10e4:	00008640 	call	864 <get_grayscale_picture>
    10e8:	1009883a 	mov	r4,r2
    10ec:	1023883a 	mov	r17,r2
    10f0:	00014d00 	call	14d0 <sobel_x>
    10f4:	8809883a 	mov	r4,r17
    10f8:	00018480 	call	1848 <sobel_y_with_rgb>
    10fc:	0001bc00 	call	1bc0 <GetSobel_rgb>
    1100:	1029883a 	mov	r20,r2
    1104:	00005a80 	call	5a8 <cam_get_xsize>
    1108:	1023883a 	mov	r17,r2
    110c:	00005cc0 	call	5cc <cam_get_ysize>
    1110:	897fffcc 	andi	r5,r17,65535
    1114:	280ad07a 	srli	r5,r5,1
    1118:	84003fcc 	andi	r16,r16,255
    111c:	8400201c 	xori	r16,r16,128
    1120:	000f883a 	mov	r7,zero
    1124:	11bfffcc 	andi	r6,r2,65535
    1128:	a4c9883a 	add	r4,r20,r19
    112c:	843fe004 	addi	r16,r16,-128
    1130:	0000ed80 	call	ed8 <transfer_LCD_with_dma>
    1134:	803fce0e 	bge	r16,zero,1070 <__alt_data_end+0xff001070>
    1138:	01000204 	movi	r4,8
    113c:	0001be00 	call	1be0 <vga_set_swap>
    1140:	a009883a 	mov	r4,r20
    1144:	0001bd00 	call	1bd0 <vga_set_pointer>
    1148:	003fc906 	br	1070 <__alt_data_end+0xff001070>
    114c:	000fb680 	call	fb68 <alt_timestamp>
    1150:	1029883a 	mov	r20,r2
    1154:	00005a80 	call	5a8 <cam_get_xsize>
    1158:	102b883a 	mov	r21,r2
    115c:	00005cc0 	call	5cc <cam_get_ysize>
    1160:	a97fffcc 	andi	r5,r21,65535
    1164:	280ad07a 	srli	r5,r5,1
    1168:	11bfffcc 	andi	r6,r2,65535
    116c:	8809883a 	mov	r4,r17
    1170:	00007740 	call	774 <conv_grayscale>
    1174:	00008640 	call	864 <get_grayscale_picture>
    1178:	102b883a 	mov	r21,r2
    117c:	000fb680 	call	fb68 <alt_timestamp>
    1180:	1529c83a 	sub	r20,r2,r20
    1184:	a009883a 	mov	r4,r20
    1188:	014000f4 	movhi	r5,3
    118c:	0001ce80 	call	1ce8 <__udivsi3>
    1190:	01000074 	movhi	r4,1
    1194:	100b883a 	mov	r5,r2
    1198:	2104f704 	addi	r4,r4,5084
    119c:	00026080 	call	2608 <printf>
    11a0:	000fb680 	call	fb68 <alt_timestamp>
    11a4:	a809883a 	mov	r4,r21
    11a8:	01402004 	movi	r5,128
    11ac:	1023883a 	mov	r17,r2
    11b0:	0001a640 	call	1a64 <sobel>
    11b4:	000fb680 	call	fb68 <alt_timestamp>
    11b8:	1463c83a 	sub	r17,r2,r17
    11bc:	8809883a 	mov	r4,r17
    11c0:	014000f4 	movhi	r5,3
    11c4:	0001ce80 	call	1ce8 <__udivsi3>
    11c8:	01000074 	movhi	r4,1
    11cc:	100b883a 	mov	r5,r2
    11d0:	2104ff04 	addi	r4,r4,5116
    11d4:	00026080 	call	2608 <printf>
    11d8:	0001bc80 	call	1bc8 <GetSobelResult>
    11dc:	102d883a 	mov	r22,r2
    11e0:	00005a80 	call	5a8 <cam_get_xsize>
    11e4:	102b883a 	mov	r21,r2
    11e8:	00005cc0 	call	5cc <cam_get_ysize>
    11ec:	a97fffcc 	andi	r5,r21,65535
    11f0:	280ad07a 	srli	r5,r5,1
    11f4:	84003fcc 	andi	r16,r16,255
    11f8:	8400201c 	xori	r16,r16,128
    11fc:	01c00044 	movi	r7,1
    1200:	11bfffcc 	andi	r6,r2,65535
    1204:	b1102204 	addi	r4,r22,16520
    1208:	843fe004 	addi	r16,r16,-128
    120c:	0000ed80 	call	ed8 <transfer_LCD_with_dma>
    1210:	80004216 	blt	r16,zero,131c <main+0x3cc>
    1214:	a449883a 	add	r4,r20,r17
    1218:	014000f4 	movhi	r5,3
    121c:	0001ce80 	call	1ce8 <__udivsi3>
    1220:	01000074 	movhi	r4,1
    1224:	100b883a 	mov	r5,r2
    1228:	21050804 	addi	r4,r4,5152
    122c:	00026080 	call	2608 <printf>
    1230:	003f8f06 	br	1070 <__alt_data_end+0xff001070>
    1234:	00005a80 	call	5a8 <cam_get_xsize>
    1238:	1029883a 	mov	r20,r2
    123c:	00005cc0 	call	5cc <cam_get_ysize>
    1240:	a17fffcc 	andi	r5,r20,65535
    1244:	280ad07a 	srli	r5,r5,1
    1248:	8809883a 	mov	r4,r17
    124c:	11bfffcc 	andi	r6,r2,65535
    1250:	00007740 	call	774 <conv_grayscale>
    1254:	00008640 	call	864 <get_grayscale_picture>
    1258:	1009883a 	mov	r4,r2
    125c:	00015d00 	call	15d0 <sobel_x_with_rgb>
    1260:	003fa606 	br	10fc <__alt_data_end+0xff0010fc>
    1264:	00005a80 	call	5a8 <cam_get_xsize>
    1268:	1029883a 	mov	r20,r2
    126c:	00005cc0 	call	5cc <cam_get_ysize>
    1270:	a17fffcc 	andi	r5,r20,65535
    1274:	280ad07a 	srli	r5,r5,1
    1278:	84003fcc 	andi	r16,r16,255
    127c:	8400201c 	xori	r16,r16,128
    1280:	000f883a 	mov	r7,zero
    1284:	11bfffcc 	andi	r6,r2,65535
    1288:	8cc9883a 	add	r4,r17,r19
    128c:	843fe004 	addi	r16,r16,-128
    1290:	0000ed80 	call	ed8 <transfer_LCD_with_dma>
    1294:	803f760e 	bge	r16,zero,1070 <__alt_data_end+0xff001070>
    1298:	01000204 	movi	r4,8
    129c:	0001be00 	call	1be0 <vga_set_swap>
    12a0:	8809883a 	mov	r4,r17
    12a4:	0001bd00 	call	1bd0 <vga_set_pointer>
    12a8:	003f7106 	br	1070 <__alt_data_end+0xff001070>
    12ac:	00005a80 	call	5a8 <cam_get_xsize>
    12b0:	1029883a 	mov	r20,r2
    12b4:	00005cc0 	call	5cc <cam_get_ysize>
    12b8:	a17fffcc 	andi	r5,r20,65535
    12bc:	280ad07a 	srli	r5,r5,1
    12c0:	8809883a 	mov	r4,r17
    12c4:	11bfffcc 	andi	r6,r2,65535
    12c8:	00007740 	call	774 <conv_grayscale>
    12cc:	00008640 	call	864 <get_grayscale_picture>
    12d0:	1029883a 	mov	r20,r2
    12d4:	00005a80 	call	5a8 <cam_get_xsize>
    12d8:	1023883a 	mov	r17,r2
    12dc:	00005cc0 	call	5cc <cam_get_ysize>
    12e0:	897fffcc 	andi	r5,r17,65535
    12e4:	280ad07a 	srli	r5,r5,1
    12e8:	84003fcc 	andi	r16,r16,255
    12ec:	8400201c 	xori	r16,r16,128
    12f0:	900f883a 	mov	r7,r18
    12f4:	11bfffcc 	andi	r6,r2,65535
    12f8:	a1102204 	addi	r4,r20,16520
    12fc:	843fe004 	addi	r16,r16,-128
    1300:	0000ed80 	call	ed8 <transfer_LCD_with_dma>
    1304:	803f5a0e 	bge	r16,zero,1070 <__alt_data_end+0xff001070>
    1308:	01000604 	movi	r4,24
    130c:	0001be00 	call	1be0 <vga_set_swap>
    1310:	a009883a 	mov	r4,r20
    1314:	0001bd00 	call	1bd0 <vga_set_pointer>
    1318:	003f5506 	br	1070 <__alt_data_end+0xff001070>
    131c:	01000604 	movi	r4,24
    1320:	0001be00 	call	1be0 <vga_set_swap>
    1324:	b009883a 	mov	r4,r22
    1328:	0001bd00 	call	1bd0 <vga_set_pointer>
    132c:	003fb906 	br	1214 <__alt_data_end+0xff001214>

00001330 <init_sobel_arrays>:
    1330:	d0a6d217 	ldw	r2,-25784(gp)
    1334:	defffd04 	addi	sp,sp,-12
    1338:	dc400115 	stw	r17,4(sp)
    133c:	dc000015 	stw	r16,0(sp)
    1340:	dfc00215 	stw	ra,8(sp)
    1344:	d126cf15 	stw	r4,-25796(gp)
    1348:	d166d115 	stw	r5,-25788(gp)
    134c:	2023883a 	mov	r17,r4
    1350:	2821883a 	mov	r16,r5
    1354:	10000226 	beq	r2,zero,1360 <init_sobel_arrays+0x30>
    1358:	1009883a 	mov	r4,r2
    135c:	0001db80 	call	1db8 <free>
    1360:	8c21383a 	mul	r16,r17,r16
    1364:	8423883a 	add	r17,r16,r16
    1368:	8809883a 	mov	r4,r17
    136c:	0001da40 	call	1da4 <malloc>
    1370:	d126d317 	ldw	r4,-25780(gp)
    1374:	d0a6d215 	stw	r2,-25784(gp)
    1378:	20000126 	beq	r4,zero,1380 <init_sobel_arrays+0x50>
    137c:	0001db80 	call	1db8 <free>
    1380:	8809883a 	mov	r4,r17
    1384:	0001da40 	call	1da4 <malloc>
    1388:	d126d017 	ldw	r4,-25792(gp)
    138c:	d0a6d315 	stw	r2,-25780(gp)
    1390:	20000126 	beq	r4,zero,1398 <init_sobel_arrays+0x68>
    1394:	0001db80 	call	1db8 <free>
    1398:	8009883a 	mov	r4,r16
    139c:	0001da40 	call	1da4 <malloc>
    13a0:	d126d417 	ldw	r4,-25776(gp)
    13a4:	d0a6d015 	stw	r2,-25792(gp)
    13a8:	20000126 	beq	r4,zero,13b0 <init_sobel_arrays+0x80>
    13ac:	0001db80 	call	1db8 <free>
    13b0:	8809883a 	mov	r4,r17
    13b4:	0001da40 	call	1da4 <malloc>
    13b8:	d0a6d415 	stw	r2,-25776(gp)
    13bc:	0005883a 	mov	r2,zero
    13c0:	04000f0e 	bge	zero,r16,1400 <init_sobel_arrays+0xd0>
    13c4:	d226d217 	ldw	r8,-25784(gp)
    13c8:	d1e6d317 	ldw	r7,-25780(gp)
    13cc:	d1a6d017 	ldw	r6,-25792(gp)
    13d0:	1087883a 	add	r3,r2,r2
    13d4:	40d1883a 	add	r8,r8,r3
    13d8:	4000000d 	sth	zero,0(r8)
    13dc:	38cf883a 	add	r7,r7,r3
    13e0:	308d883a 	add	r6,r6,r2
    13e4:	3800000d 	sth	zero,0(r7)
    13e8:	30000005 	stb	zero,0(r6)
    13ec:	d1a6d417 	ldw	r6,-25776(gp)
    13f0:	10800044 	addi	r2,r2,1
    13f4:	30c7883a 	add	r3,r6,r3
    13f8:	1800000d 	sth	zero,0(r3)
    13fc:	80bff11e 	bne	r16,r2,13c4 <__alt_data_end+0xff0013c4>
    1400:	dfc00217 	ldw	ra,8(sp)
    1404:	dc400117 	ldw	r17,4(sp)
    1408:	dc000017 	ldw	r16,0(sp)
    140c:	dec00304 	addi	sp,sp,12
    1410:	f800283a 	ret

00001414 <sobel_mac>:
    1414:	da800017 	ldw	r10,0(sp)
    1418:	31bfffc4 	addi	r6,r6,-1
    141c:	38c00047 	ldb	r3,1(r7)
    1420:	328d383a 	mul	r6,r6,r10
    1424:	3b8000c7 	ldb	r14,3(r7)
    1428:	3a000107 	ldb	r8,4(r7)
    142c:	5185883a 	add	r2,r10,r6
    1430:	2893883a 	add	r9,r5,r2
    1434:	314d883a 	add	r6,r6,r5
    1438:	218d883a 	add	r6,r4,r6
    143c:	2253883a 	add	r9,r4,r9
    1440:	33000003 	ldbu	r12,0(r6)
    1444:	5095883a 	add	r10,r10,r2
    1448:	48bfffc3 	ldbu	r2,-1(r9)
    144c:	5155883a 	add	r10,r10,r5
    1450:	4ac00003 	ldbu	r11,0(r9)
    1454:	229b883a 	add	r13,r4,r10
    1458:	49000043 	ldbu	r4,1(r9)
    145c:	3a800147 	ldb	r10,5(r7)
    1460:	139d383a 	mul	r14,r2,r14
    1464:	60d9383a 	mul	r12,r12,r3
    1468:	68800003 	ldbu	r2,0(r13)
    146c:	38c001c7 	ldb	r3,7(r7)
    1470:	5a17383a 	mul	r11,r11,r8
    1474:	33ffffc3 	ldbu	r15,-1(r6)
    1478:	3a000007 	ldb	r8,0(r7)
    147c:	2295383a 	mul	r10,r4,r10
    1480:	31000043 	ldbu	r4,1(r6)
    1484:	39800087 	ldb	r6,2(r7)
    1488:	730b883a 	add	r5,r14,r12
    148c:	10d3383a 	mul	r9,r2,r3
    1490:	6b3fffc3 	ldbu	r12,-1(r13)
    1494:	38c00187 	ldb	r3,6(r7)
    1498:	2acb883a 	add	r5,r5,r11
    149c:	7a11383a 	mul	r8,r15,r8
    14a0:	6ac00043 	ldbu	r11,1(r13)
    14a4:	39c00207 	ldb	r7,8(r7)
    14a8:	2a8b883a 	add	r5,r5,r10
    14ac:	2189383a 	mul	r4,r4,r6
    14b0:	2a45883a 	add	r2,r5,r9
    14b4:	60c7383a 	mul	r3,r12,r3
    14b8:	1205883a 	add	r2,r2,r8
    14bc:	59cb383a 	mul	r5,r11,r7
    14c0:	1105883a 	add	r2,r2,r4
    14c4:	10c5883a 	add	r2,r2,r3
    14c8:	1145883a 	add	r2,r2,r5
    14cc:	f800283a 	ret

000014d0 <sobel_x>:
    14d0:	defff904 	addi	sp,sp,-28
    14d4:	dc400115 	stw	r17,4(sp)
    14d8:	d466d117 	ldw	r17,-25788(gp)
    14dc:	dc000015 	stw	r16,0(sp)
    14e0:	dfc00615 	stw	ra,24(sp)
    14e4:	dd400515 	stw	r21,20(sp)
    14e8:	dd000415 	stw	r20,16(sp)
    14ec:	dcc00315 	stw	r19,12(sp)
    14f0:	dc800215 	stw	r18,8(sp)
    14f4:	04000084 	movi	r16,2
    14f8:	84402c0e 	bge	r16,r17,15ac <sobel_x+0xdc>
    14fc:	d366cf17 	ldw	r13,-25796(gp)
    1500:	d3a6d217 	ldw	r14,-25784(gp)
    1504:	8c7fffc4 	addi	r17,r17,-1
    1508:	6b65883a 	add	r18,r13,r13
    150c:	9405883a 	add	r2,r18,r16
    1510:	2499883a 	add	r12,r4,r18
    1514:	709d883a 	add	r14,r14,r2
    1518:	03c00044 	movi	r15,1
    151c:	6c27883a 	add	r19,r13,r16
    1520:	693f883a 	add	ra,r13,r4
    1524:	83401c0e 	bge	r16,r13,1598 <sobel_x+0xc8>
    1528:	f817883a 	mov	r11,ra
    152c:	22800084 	addi	r10,r4,2
    1530:	990d883a 	add	r6,r19,r4
    1534:	62400084 	addi	r9,r12,2
    1538:	7011883a 	mov	r8,r14
    153c:	600f883a 	mov	r7,r12
    1540:	4d000003 	ldbu	r20,0(r9)
    1544:	50c00003 	ldbu	r3,0(r10)
    1548:	59400003 	ldbu	r5,0(r11)
    154c:	30800003 	ldbu	r2,0(r6)
    1550:	1d07883a 	add	r3,r3,r20
    1554:	25400003 	ldbu	r21,0(r4)
    1558:	1947c83a 	sub	r3,r3,r5
    155c:	3d000003 	ldbu	r20,0(r7)
    1560:	194bc83a 	sub	r5,r3,r5
    1564:	1087883a 	add	r3,r2,r2
    1568:	28c7883a 	add	r3,r5,r3
    156c:	1d45c83a 	sub	r2,r3,r21
    1570:	1505c83a 	sub	r2,r2,r20
    1574:	4080000d 	sth	r2,0(r8)
    1578:	31800044 	addi	r6,r6,1
    157c:	21000044 	addi	r4,r4,1
    1580:	5ac00044 	addi	r11,r11,1
    1584:	52800044 	addi	r10,r10,1
    1588:	39c00044 	addi	r7,r7,1
    158c:	4a400044 	addi	r9,r9,1
    1590:	42000084 	addi	r8,r8,2
    1594:	61bfea1e 	bne	r12,r6,1540 <__alt_data_end+0xff001540>
    1598:	7bc00044 	addi	r15,r15,1
    159c:	f809883a 	mov	r4,ra
    15a0:	6359883a 	add	r12,r12,r13
    15a4:	749d883a 	add	r14,r14,r18
    15a8:	7c7fdd1e 	bne	r15,r17,1520 <__alt_data_end+0xff001520>
    15ac:	dfc00617 	ldw	ra,24(sp)
    15b0:	dd400517 	ldw	r21,20(sp)
    15b4:	dd000417 	ldw	r20,16(sp)
    15b8:	dcc00317 	ldw	r19,12(sp)
    15bc:	dc800217 	ldw	r18,8(sp)
    15c0:	dc400117 	ldw	r17,4(sp)
    15c4:	dc000017 	ldw	r16,0(sp)
    15c8:	dec00704 	addi	sp,sp,28
    15cc:	f800283a 	ret

000015d0 <sobel_x_with_rgb>:
    15d0:	defff504 	addi	sp,sp,-44
    15d4:	dd800715 	stw	r22,28(sp)
    15d8:	d5a6d117 	ldw	r22,-25788(gp)
    15dc:	dfc00a15 	stw	ra,40(sp)
    15e0:	df000915 	stw	fp,36(sp)
    15e4:	ddc00815 	stw	r23,32(sp)
    15e8:	dd400615 	stw	r21,24(sp)
    15ec:	dd000515 	stw	r20,20(sp)
    15f0:	dcc00415 	stw	r19,16(sp)
    15f4:	dc800315 	stw	r18,12(sp)
    15f8:	dc400215 	stw	r17,8(sp)
    15fc:	dc000115 	stw	r16,4(sp)
    1600:	b5bfffc4 	addi	r22,r22,-1
    1604:	00800044 	movi	r2,1
    1608:	1580440e 	bge	r2,r22,171c <sobel_x_with_rgb+0x14c>
    160c:	d7e6cf17 	ldw	ra,-25796(gp)
    1610:	d4a6d217 	ldw	r18,-25784(gp)
    1614:	d466d417 	ldw	r17,-25776(gp)
    1618:	ffe9883a 	add	r20,ra,ra
    161c:	a0800084 	addi	r2,r20,2
    1620:	04000084 	movi	r16,2
    1624:	90a5883a 	add	r18,r18,r2
    1628:	88a3883a 	add	r17,r17,r2
    162c:	fc05883a 	add	r2,ra,r16
    1630:	27df883a 	add	r15,r4,ra
    1634:	802f883a 	mov	r23,r16
    1638:	87f9c83a 	sub	fp,r16,ra
    163c:	d8800015 	stw	r2,0(sp)
    1640:	bfc02f0e 	bge	r23,ra,1700 <sobel_x_with_rgb+0x130>
    1644:	d8800017 	ldw	r2,0(sp)
    1648:	7fe7883a 	add	r19,r15,ra
    164c:	802b883a 	mov	r21,r16
    1650:	7fdbc83a 	sub	r13,r15,ra
    1654:	e3cf883a 	add	r7,fp,r15
    1658:	7b000084 	addi	r12,r15,2
    165c:	9817883a 	mov	r11,r19
    1660:	13d5883a 	add	r10,r2,r15
    1664:	881d883a 	mov	r14,r17
    1668:	9013883a 	mov	r9,r18
    166c:	7811883a 	mov	r8,r15
    1670:	00000b06 	br	16a0 <sobel_x_with_rgb+0xd0>
    1674:	180692fa 	slli	r3,r3,11
    1678:	70c0000d 	sth	r3,0(r14)
    167c:	39c00044 	addi	r7,r7,1
    1680:	6b400044 	addi	r13,r13,1
    1684:	42000044 	addi	r8,r8,1
    1688:	63000044 	addi	r12,r12,1
    168c:	5ac00044 	addi	r11,r11,1
    1690:	52800044 	addi	r10,r10,1
    1694:	4a400084 	addi	r9,r9,2
    1698:	73800084 	addi	r14,r14,2
    169c:	79c01a26 	beq	r15,r7,1708 <sobel_x_with_rgb+0x138>
    16a0:	50800003 	ldbu	r2,0(r10)
    16a4:	39400003 	ldbu	r5,0(r7)
    16a8:	41800003 	ldbu	r6,0(r8)
    16ac:	60c00003 	ldbu	r3,0(r12)
    16b0:	288b883a 	add	r5,r5,r2
    16b4:	298bc83a 	sub	r5,r5,r6
    16b8:	68800003 	ldbu	r2,0(r13)
    16bc:	59000003 	ldbu	r4,0(r11)
    16c0:	298bc83a 	sub	r5,r5,r6
    16c4:	18c7883a 	add	r3,r3,r3
    16c8:	28c7883a 	add	r3,r5,r3
    16cc:	1887c83a 	sub	r3,r3,r2
    16d0:	1905c83a 	sub	r2,r3,r4
    16d4:	4880000d 	sth	r2,0(r9)
    16d8:	10bfffcc 	andi	r2,r2,65535
    16dc:	10a0001c 	xori	r2,r2,32768
    16e0:	10a00004 	addi	r2,r2,-32768
    16e4:	1007d0fa 	srai	r3,r2,3
    16e8:	103fe20e 	bge	r2,zero,1674 <__alt_data_end+0xff001674>
    16ec:	0085c83a 	sub	r2,zero,r2
    16f0:	1005d0ba 	srai	r2,r2,2
    16f4:	1004917a 	slli	r2,r2,5
    16f8:	7080000d 	sth	r2,0(r14)
    16fc:	003fdf06 	br	167c <__alt_data_end+0xff00167c>
    1700:	802b883a 	mov	r21,r16
    1704:	7fe7883a 	add	r19,r15,ra
    1708:	84000044 	addi	r16,r16,1
    170c:	981f883a 	mov	r15,r19
    1710:	9525883a 	add	r18,r18,r20
    1714:	8d23883a 	add	r17,r17,r20
    1718:	adbfc916 	blt	r21,r22,1640 <__alt_data_end+0xff001640>
    171c:	dfc00a17 	ldw	ra,40(sp)
    1720:	df000917 	ldw	fp,36(sp)
    1724:	ddc00817 	ldw	r23,32(sp)
    1728:	dd800717 	ldw	r22,28(sp)
    172c:	dd400617 	ldw	r21,24(sp)
    1730:	dd000517 	ldw	r20,20(sp)
    1734:	dcc00417 	ldw	r19,16(sp)
    1738:	dc800317 	ldw	r18,12(sp)
    173c:	dc400217 	ldw	r17,8(sp)
    1740:	dc000117 	ldw	r16,4(sp)
    1744:	dec00b04 	addi	sp,sp,44
    1748:	f800283a 	ret

0000174c <sobel_y>:
    174c:	defff904 	addi	sp,sp,-28
    1750:	dc800215 	stw	r18,8(sp)
    1754:	d4a6d117 	ldw	r18,-25788(gp)
    1758:	dc400115 	stw	r17,4(sp)
    175c:	dfc00615 	stw	ra,24(sp)
    1760:	dd400515 	stw	r21,20(sp)
    1764:	dd000415 	stw	r20,16(sp)
    1768:	dcc00315 	stw	r19,12(sp)
    176c:	dc000015 	stw	r16,0(sp)
    1770:	04400084 	movi	r17,2
    1774:	8c802b0e 	bge	r17,r18,1824 <sobel_y+0xd8>
    1778:	d3e6cf17 	ldw	r15,-25796(gp)
    177c:	d3a6d317 	ldw	r14,-25780(gp)
    1780:	07c00044 	movi	ra,1
    1784:	7be1883a 	add	r16,r15,r15
    1788:	8467883a 	add	r19,r16,r17
    178c:	74dd883a 	add	r14,r14,r19
    1790:	94bfffc4 	addi	r18,r18,-1
    1794:	87e9883a 	add	r20,r16,ra
    1798:	8bc01e0e 	bge	r17,r15,1814 <sobel_y+0xc8>
    179c:	810f883a 	add	r7,r16,r4
    17a0:	23000044 	addi	r12,r4,1
    17a4:	21800084 	addi	r6,r4,2
    17a8:	a117883a 	add	r11,r20,r4
    17ac:	9915883a 	add	r10,r19,r4
    17b0:	3bdbc83a 	sub	r13,r7,r15
    17b4:	7013883a 	mov	r9,r14
    17b8:	2011883a 	mov	r8,r4
    17bc:	31400003 	ldbu	r5,0(r6)
    17c0:	60800003 	ldbu	r2,0(r12)
    17c4:	40c00003 	ldbu	r3,0(r8)
    17c8:	5d400003 	ldbu	r21,0(r11)
    17cc:	31800044 	addi	r6,r6,1
    17d0:	1947883a 	add	r3,r3,r5
    17d4:	108b883a 	add	r5,r2,r2
    17d8:	1947883a 	add	r3,r3,r5
    17dc:	38800003 	ldbu	r2,0(r7)
    17e0:	51400003 	ldbu	r5,0(r10)
    17e4:	1d47c83a 	sub	r3,r3,r21
    17e8:	1d47c83a 	sub	r3,r3,r21
    17ec:	1885c83a 	sub	r2,r3,r2
    17f0:	1145c83a 	sub	r2,r2,r5
    17f4:	4880000d 	sth	r2,0(r9)
    17f8:	42000044 	addi	r8,r8,1
    17fc:	63000044 	addi	r12,r12,1
    1800:	5ac00044 	addi	r11,r11,1
    1804:	39c00044 	addi	r7,r7,1
    1808:	52800044 	addi	r10,r10,1
    180c:	4a400084 	addi	r9,r9,2
    1810:	69bfea1e 	bne	r13,r6,17bc <__alt_data_end+0xff0017bc>
    1814:	ffc00044 	addi	ra,ra,1
    1818:	23c9883a 	add	r4,r4,r15
    181c:	741d883a 	add	r14,r14,r16
    1820:	97ffdd1e 	bne	r18,ra,1798 <__alt_data_end+0xff001798>
    1824:	dfc00617 	ldw	ra,24(sp)
    1828:	dd400517 	ldw	r21,20(sp)
    182c:	dd000417 	ldw	r20,16(sp)
    1830:	dcc00317 	ldw	r19,12(sp)
    1834:	dc800217 	ldw	r18,8(sp)
    1838:	dc400117 	ldw	r17,4(sp)
    183c:	dc000017 	ldw	r16,0(sp)
    1840:	dec00704 	addi	sp,sp,28
    1844:	f800283a 	ret

00001848 <sobel_y_with_rgb>:
    1848:	defff604 	addi	sp,sp,-40
    184c:	dcc00315 	stw	r19,12(sp)
    1850:	d4e6d117 	ldw	r19,-25788(gp)
    1854:	dfc00915 	stw	ra,36(sp)
    1858:	df000815 	stw	fp,32(sp)
    185c:	ddc00715 	stw	r23,28(sp)
    1860:	dd800615 	stw	r22,24(sp)
    1864:	dd400515 	stw	r21,20(sp)
    1868:	dd000415 	stw	r20,16(sp)
    186c:	dc800215 	stw	r18,8(sp)
    1870:	dc400115 	stw	r17,4(sp)
    1874:	dc000015 	stw	r16,0(sp)
    1878:	9cffffc4 	addi	r19,r19,-1
    187c:	00800044 	movi	r2,1
    1880:	14c03f0e 	bge	r2,r19,1980 <sobel_y_with_rgb+0x138>
    1884:	d466cf17 	ldw	r17,-25796(gp)
    1888:	d426d317 	ldw	r16,-25780(gp)
    188c:	d7e6d417 	ldw	ra,-25776(gp)
    1890:	8c5d883a 	add	r14,r17,r17
    1894:	75000084 	addi	r20,r14,2
    1898:	03c00084 	movi	r15,2
    189c:	8521883a 	add	r16,r16,r20
    18a0:	fd3f883a 	add	ra,ra,r20
    18a4:	782b883a 	mov	r21,r15
    18a8:	70ad883a 	add	r22,r14,r2
    18ac:	7825883a 	mov	r18,r15
    18b0:	ac402e0e 	bge	r21,r17,196c <sobel_y_with_rgb+0x124>
    18b4:	238d883a 	add	r6,r4,r14
    18b8:	7825883a 	mov	r18,r15
    18bc:	22c00044 	addi	r11,r4,1
    18c0:	22800084 	addi	r10,r4,2
    18c4:	b113883a 	add	r9,r22,r4
    18c8:	a10b883a 	add	r5,r20,r4
    18cc:	899b883a 	add	r13,r17,r6
    18d0:	f819883a 	mov	r12,ra
    18d4:	8011883a 	mov	r8,r16
    18d8:	200f883a 	mov	r7,r4
    18dc:	00000b06 	br	190c <sobel_y_with_rgb+0xc4>
    18e0:	180692fa 	slli	r3,r3,11
    18e4:	60c0000d 	sth	r3,0(r12)
    18e8:	29400044 	addi	r5,r5,1
    18ec:	39c00044 	addi	r7,r7,1
    18f0:	5ac00044 	addi	r11,r11,1
    18f4:	52800044 	addi	r10,r10,1
    18f8:	31800044 	addi	r6,r6,1
    18fc:	4a400044 	addi	r9,r9,1
    1900:	42000084 	addi	r8,r8,2
    1904:	63000084 	addi	r12,r12,2
    1908:	69401826 	beq	r13,r5,196c <sobel_y_with_rgb+0x124>
    190c:	50800003 	ldbu	r2,0(r10)
    1910:	3f000003 	ldbu	fp,0(r7)
    1914:	58c00003 	ldbu	r3,0(r11)
    1918:	4dc00003 	ldbu	r23,0(r9)
    191c:	e0b9883a 	add	fp,fp,r2
    1920:	18c7883a 	add	r3,r3,r3
    1924:	30800003 	ldbu	r2,0(r6)
    1928:	e0c7883a 	add	r3,fp,r3
    192c:	1dc7c83a 	sub	r3,r3,r23
    1930:	2f000003 	ldbu	fp,0(r5)
    1934:	1dc7c83a 	sub	r3,r3,r23
    1938:	1885c83a 	sub	r2,r3,r2
    193c:	1705c83a 	sub	r2,r2,fp
    1940:	4080000d 	sth	r2,0(r8)
    1944:	10bfffcc 	andi	r2,r2,65535
    1948:	10a0001c 	xori	r2,r2,32768
    194c:	10a00004 	addi	r2,r2,-32768
    1950:	1007d0fa 	srai	r3,r2,3
    1954:	103fe20e 	bge	r2,zero,18e0 <__alt_data_end+0xff0018e0>
    1958:	0085c83a 	sub	r2,zero,r2
    195c:	1005d0ba 	srai	r2,r2,2
    1960:	1004917a 	slli	r2,r2,5
    1964:	6080000d 	sth	r2,0(r12)
    1968:	003fdf06 	br	18e8 <__alt_data_end+0xff0018e8>
    196c:	7bc00044 	addi	r15,r15,1
    1970:	2449883a 	add	r4,r4,r17
    1974:	83a1883a 	add	r16,r16,r14
    1978:	fbbf883a 	add	ra,ra,r14
    197c:	94ffcb16 	blt	r18,r19,18ac <__alt_data_end+0xff0018ac>
    1980:	dfc00917 	ldw	ra,36(sp)
    1984:	df000817 	ldw	fp,32(sp)
    1988:	ddc00717 	ldw	r23,28(sp)
    198c:	dd800617 	ldw	r22,24(sp)
    1990:	dd400517 	ldw	r21,20(sp)
    1994:	dd000417 	ldw	r20,16(sp)
    1998:	dcc00317 	ldw	r19,12(sp)
    199c:	dc800217 	ldw	r18,8(sp)
    19a0:	dc400117 	ldw	r17,4(sp)
    19a4:	dc000017 	ldw	r16,0(sp)
    19a8:	dec00a04 	addi	sp,sp,40
    19ac:	f800283a 	ret

000019b0 <sobel_threshold>:
    19b0:	d0a6d117 	ldw	r2,-25788(gp)
    19b4:	02400084 	movi	r9,2
    19b8:	4880290e 	bge	r9,r2,1a60 <sobel_threshold+0xb0>
    19bc:	223fffcc 	andi	r8,r4,65535
    19c0:	d0e6cf17 	ldw	r3,-25796(gp)
    19c4:	4220001c 	xori	r8,r8,32768
    19c8:	01c00044 	movi	r7,1
    19cc:	42200004 	addi	r8,r8,-32768
    19d0:	48c0200e 	bge	r9,r3,1a54 <sobel_threshold+0xa4>
    19d4:	01400044 	movi	r5,1
    19d8:	00000c06 	br	1a0c <sobel_threshold+0x5c>
    19dc:	2080000f 	ldh	r2,0(r4)
    19e0:	10001916 	blt	r2,zero,1a48 <sobel_threshold+0x98>
    19e4:	3085883a 	add	r2,r6,r2
    19e8:	10bfffcc 	andi	r2,r2,65535
    19ec:	10a0001c 	xori	r2,r2,32768
    19f0:	10a00004 	addi	r2,r2,-32768
    19f4:	4084803a 	cmplt	r2,r8,r2
    19f8:	0085c83a 	sub	r2,zero,r2
    19fc:	18800005 	stb	r2,0(r3)
    1a00:	d0e6cf17 	ldw	r3,-25796(gp)
    1a04:	18bfffc4 	addi	r2,r3,-1
    1a08:	2880110e 	bge	r5,r2,1a50 <sobel_threshold+0xa0>
    1a0c:	38c7383a 	mul	r3,r7,r3
    1a10:	d1a6d317 	ldw	r6,-25780(gp)
    1a14:	d126d217 	ldw	r4,-25784(gp)
    1a18:	1947883a 	add	r3,r3,r5
    1a1c:	18c5883a 	add	r2,r3,r3
    1a20:	308d883a 	add	r6,r6,r2
    1a24:	2089883a 	add	r4,r4,r2
    1a28:	3180000f 	ldh	r6,0(r6)
    1a2c:	d0a6d017 	ldw	r2,-25792(gp)
    1a30:	29400044 	addi	r5,r5,1
    1a34:	10c7883a 	add	r3,r2,r3
    1a38:	303fe80e 	bge	r6,zero,19dc <__alt_data_end+0xff0019dc>
    1a3c:	2080000f 	ldh	r2,0(r4)
    1a40:	018dc83a 	sub	r6,zero,r6
    1a44:	103fe70e 	bge	r2,zero,19e4 <__alt_data_end+0xff0019e4>
    1a48:	0085c83a 	sub	r2,zero,r2
    1a4c:	003fe506 	br	19e4 <__alt_data_end+0xff0019e4>
    1a50:	d0a6d117 	ldw	r2,-25788(gp)
    1a54:	39c00044 	addi	r7,r7,1
    1a58:	113fffc4 	addi	r4,r2,-1
    1a5c:	393fdc16 	blt	r7,r4,19d0 <__alt_data_end+0xff0019d0>
    1a60:	f800283a 	ret

00001a64 <sobel>:
    1a64:	d0e6d117 	ldw	r3,-25788(gp)
    1a68:	03400084 	movi	r13,2
    1a6c:	68c0530e 	bge	r13,r3,1bbc <sobel+0x158>
    1a70:	2b3fffcc 	andi	r12,r5,65535
    1a74:	d0a6cf17 	ldw	r2,-25796(gp)
    1a78:	defffd04 	addi	sp,sp,-12
    1a7c:	6320001c 	xori	r12,r12,32768
    1a80:	dfc00215 	stw	ra,8(sp)
    1a84:	dc400115 	stw	r17,4(sp)
    1a88:	dc000015 	stw	r16,0(sp)
    1a8c:	02c00044 	movi	r11,1
    1a90:	63200004 	addi	r12,r12,-32768
    1a94:	6880420e 	bge	r13,r2,1ba0 <sobel+0x13c>
    1a98:	0013883a 	mov	r9,zero
    1a9c:	04400044 	movi	r17,1
    1aa0:	00001606 	br	1afc <sobel+0x98>
    1aa4:	81c00003 	ldbu	r7,0(r16)
    1aa8:	18c00003 	ldbu	r3,0(r3)
    1aac:	01cfc83a 	sub	r7,zero,r7
    1ab0:	39cf883a 	add	r7,r7,r7
    1ab4:	394f883a 	add	r7,r7,r5
    1ab8:	18cb883a 	add	r5,r3,r3
    1abc:	394b883a 	add	r5,r7,r5
    1ac0:	2fc7c83a 	sub	r3,r5,ra
    1ac4:	1887c83a 	sub	r3,r3,r2
    1ac8:	18bfffcc 	andi	r2,r3,65535
    1acc:	10a0001c 	xori	r2,r2,32768
    1ad0:	10a00004 	addi	r2,r2,-32768
    1ad4:	10002f16 	blt	r2,zero,1b94 <sobel+0x130>
    1ad8:	3085883a 	add	r2,r6,r2
    1adc:	10bfffcc 	andi	r2,r2,65535
    1ae0:	1305c032 	custom	0,r2,r2,r12
    1ae4:	78800005 	stb	r2,0(r15)
    1ae8:	d0a6cf17 	ldw	r2,-25796(gp)
    1aec:	4a400044 	addi	r9,r9,1
    1af0:	5023883a 	mov	r17,r10
    1af4:	10ffffc4 	addi	r3,r2,-1
    1af8:	50c0280e 	bge	r10,r3,1b9c <sobel+0x138>
    1afc:	589f383a 	mul	r15,r11,r2
    1b00:	8a800044 	addi	r10,r17,1
    1b04:	4891c83a 	sub	r8,r9,r2
    1b08:	23c7883a 	add	r3,r4,r15
    1b0c:	508bc83a 	sub	r5,r10,r2
    1b10:	888dc83a 	sub	r6,r17,r2
    1b14:	1a11883a 	add	r8,r3,r8
    1b18:	198d883a 	add	r6,r3,r6
    1b1c:	194b883a 	add	r5,r3,r5
    1b20:	188f883a 	add	r7,r3,r2
    1b24:	47c00003 	ldbu	ra,0(r8)
    1b28:	29400003 	ldbu	r5,0(r5)
    1b2c:	32000003 	ldbu	r8,0(r6)
    1b30:	3c45883a 	add	r2,r7,r17
    1b34:	11800003 	ldbu	r6,0(r2)
    1b38:	f95d883a 	add	r14,ra,r5
    1b3c:	3a45883a 	add	r2,r7,r9
    1b40:	4211883a 	add	r8,r8,r8
    1b44:	3a8f883a 	add	r7,r7,r10
    1b48:	4391883a 	add	r8,r8,r14
    1b4c:	10800003 	ldbu	r2,0(r2)
    1b50:	3b800003 	ldbu	r14,0(r7)
    1b54:	418fc83a 	sub	r7,r8,r6
    1b58:	398dc83a 	sub	r6,r7,r6
    1b5c:	308dc83a 	sub	r6,r6,r2
    1b60:	338dc83a 	sub	r6,r6,r14
    1b64:	31bfffcc 	andi	r6,r6,65535
    1b68:	d1e6d017 	ldw	r7,-25792(gp)
    1b6c:	31a0001c 	xori	r6,r6,32768
    1b70:	7c5f883a 	add	r15,r15,r17
    1b74:	31a00004 	addi	r6,r6,-32768
    1b78:	1a61883a 	add	r16,r3,r9
    1b7c:	2b8b883a 	add	r5,r5,r14
    1b80:	1a87883a 	add	r3,r3,r10
    1b84:	3bdf883a 	add	r15,r7,r15
    1b88:	303fc60e 	bge	r6,zero,1aa4 <__alt_data_end+0xff001aa4>
    1b8c:	018dc83a 	sub	r6,zero,r6
    1b90:	003fc406 	br	1aa4 <__alt_data_end+0xff001aa4>
    1b94:	0085c83a 	sub	r2,zero,r2
    1b98:	003fcf06 	br	1ad8 <__alt_data_end+0xff001ad8>
    1b9c:	d0e6d117 	ldw	r3,-25788(gp)
    1ba0:	5ac00044 	addi	r11,r11,1
    1ba4:	197fffc4 	addi	r5,r3,-1
    1ba8:	597fba16 	blt	r11,r5,1a94 <__alt_data_end+0xff001a94>
    1bac:	dfc00217 	ldw	ra,8(sp)
    1bb0:	dc400117 	ldw	r17,4(sp)
    1bb4:	dc000017 	ldw	r16,0(sp)
    1bb8:	dec00304 	addi	sp,sp,12
    1bbc:	f800283a 	ret

00001bc0 <GetSobel_rgb>:
    1bc0:	d0a6d417 	ldw	r2,-25776(gp)
    1bc4:	f800283a 	ret

00001bc8 <GetSobelResult>:
    1bc8:	d0a6d017 	ldw	r2,-25792(gp)
    1bcc:	f800283a 	ret

00001bd0 <vga_set_pointer>:
    1bd0:	00804034 	movhi	r2,256
    1bd4:	10843404 	addi	r2,r2,4304
    1bd8:	11000035 	stwio	r4,0(r2)
    1bdc:	f800283a 	ret

00001be0 <vga_set_swap>:
    1be0:	00804034 	movhi	r2,256
    1be4:	10843504 	addi	r2,r2,4308
    1be8:	11000025 	stbio	r4,0(r2)
    1bec:	f800283a 	ret

00001bf0 <__divsi3>:
    1bf0:	20001b16 	blt	r4,zero,1c60 <__divsi3+0x70>
    1bf4:	000f883a 	mov	r7,zero
    1bf8:	28001616 	blt	r5,zero,1c54 <__divsi3+0x64>
    1bfc:	200d883a 	mov	r6,r4
    1c00:	29001a2e 	bgeu	r5,r4,1c6c <__divsi3+0x7c>
    1c04:	00800804 	movi	r2,32
    1c08:	00c00044 	movi	r3,1
    1c0c:	00000106 	br	1c14 <__divsi3+0x24>
    1c10:	10000d26 	beq	r2,zero,1c48 <__divsi3+0x58>
    1c14:	294b883a 	add	r5,r5,r5
    1c18:	10bfffc4 	addi	r2,r2,-1
    1c1c:	18c7883a 	add	r3,r3,r3
    1c20:	293ffb36 	bltu	r5,r4,1c10 <__alt_data_end+0xff001c10>
    1c24:	0005883a 	mov	r2,zero
    1c28:	18000726 	beq	r3,zero,1c48 <__divsi3+0x58>
    1c2c:	0005883a 	mov	r2,zero
    1c30:	31400236 	bltu	r6,r5,1c3c <__divsi3+0x4c>
    1c34:	314dc83a 	sub	r6,r6,r5
    1c38:	10c4b03a 	or	r2,r2,r3
    1c3c:	1806d07a 	srli	r3,r3,1
    1c40:	280ad07a 	srli	r5,r5,1
    1c44:	183ffa1e 	bne	r3,zero,1c30 <__alt_data_end+0xff001c30>
    1c48:	38000126 	beq	r7,zero,1c50 <__divsi3+0x60>
    1c4c:	0085c83a 	sub	r2,zero,r2
    1c50:	f800283a 	ret
    1c54:	014bc83a 	sub	r5,zero,r5
    1c58:	39c0005c 	xori	r7,r7,1
    1c5c:	003fe706 	br	1bfc <__alt_data_end+0xff001bfc>
    1c60:	0109c83a 	sub	r4,zero,r4
    1c64:	01c00044 	movi	r7,1
    1c68:	003fe306 	br	1bf8 <__alt_data_end+0xff001bf8>
    1c6c:	00c00044 	movi	r3,1
    1c70:	003fee06 	br	1c2c <__alt_data_end+0xff001c2c>

00001c74 <__modsi3>:
    1c74:	20001716 	blt	r4,zero,1cd4 <__modsi3+0x60>
    1c78:	000f883a 	mov	r7,zero
    1c7c:	2005883a 	mov	r2,r4
    1c80:	28001216 	blt	r5,zero,1ccc <__modsi3+0x58>
    1c84:	2900162e 	bgeu	r5,r4,1ce0 <__modsi3+0x6c>
    1c88:	01800804 	movi	r6,32
    1c8c:	00c00044 	movi	r3,1
    1c90:	00000106 	br	1c98 <__modsi3+0x24>
    1c94:	30000a26 	beq	r6,zero,1cc0 <__modsi3+0x4c>
    1c98:	294b883a 	add	r5,r5,r5
    1c9c:	31bfffc4 	addi	r6,r6,-1
    1ca0:	18c7883a 	add	r3,r3,r3
    1ca4:	293ffb36 	bltu	r5,r4,1c94 <__alt_data_end+0xff001c94>
    1ca8:	18000526 	beq	r3,zero,1cc0 <__modsi3+0x4c>
    1cac:	1806d07a 	srli	r3,r3,1
    1cb0:	11400136 	bltu	r2,r5,1cb8 <__modsi3+0x44>
    1cb4:	1145c83a 	sub	r2,r2,r5
    1cb8:	280ad07a 	srli	r5,r5,1
    1cbc:	183ffb1e 	bne	r3,zero,1cac <__alt_data_end+0xff001cac>
    1cc0:	38000126 	beq	r7,zero,1cc8 <__modsi3+0x54>
    1cc4:	0085c83a 	sub	r2,zero,r2
    1cc8:	f800283a 	ret
    1ccc:	014bc83a 	sub	r5,zero,r5
    1cd0:	003fec06 	br	1c84 <__alt_data_end+0xff001c84>
    1cd4:	0109c83a 	sub	r4,zero,r4
    1cd8:	01c00044 	movi	r7,1
    1cdc:	003fe706 	br	1c7c <__alt_data_end+0xff001c7c>
    1ce0:	00c00044 	movi	r3,1
    1ce4:	003ff106 	br	1cac <__alt_data_end+0xff001cac>

00001ce8 <__udivsi3>:
    1ce8:	200d883a 	mov	r6,r4
    1cec:	2900152e 	bgeu	r5,r4,1d44 <__udivsi3+0x5c>
    1cf0:	28001416 	blt	r5,zero,1d44 <__udivsi3+0x5c>
    1cf4:	00800804 	movi	r2,32
    1cf8:	00c00044 	movi	r3,1
    1cfc:	00000206 	br	1d08 <__udivsi3+0x20>
    1d00:	10000e26 	beq	r2,zero,1d3c <__udivsi3+0x54>
    1d04:	28000516 	blt	r5,zero,1d1c <__udivsi3+0x34>
    1d08:	294b883a 	add	r5,r5,r5
    1d0c:	10bfffc4 	addi	r2,r2,-1
    1d10:	18c7883a 	add	r3,r3,r3
    1d14:	293ffa36 	bltu	r5,r4,1d00 <__alt_data_end+0xff001d00>
    1d18:	18000826 	beq	r3,zero,1d3c <__udivsi3+0x54>
    1d1c:	0005883a 	mov	r2,zero
    1d20:	31400236 	bltu	r6,r5,1d2c <__udivsi3+0x44>
    1d24:	314dc83a 	sub	r6,r6,r5
    1d28:	10c4b03a 	or	r2,r2,r3
    1d2c:	1806d07a 	srli	r3,r3,1
    1d30:	280ad07a 	srli	r5,r5,1
    1d34:	183ffa1e 	bne	r3,zero,1d20 <__alt_data_end+0xff001d20>
    1d38:	f800283a 	ret
    1d3c:	0005883a 	mov	r2,zero
    1d40:	f800283a 	ret
    1d44:	00c00044 	movi	r3,1
    1d48:	003ff406 	br	1d1c <__alt_data_end+0xff001d1c>

00001d4c <__umodsi3>:
    1d4c:	2005883a 	mov	r2,r4
    1d50:	2900122e 	bgeu	r5,r4,1d9c <__umodsi3+0x50>
    1d54:	28001116 	blt	r5,zero,1d9c <__umodsi3+0x50>
    1d58:	01800804 	movi	r6,32
    1d5c:	00c00044 	movi	r3,1
    1d60:	00000206 	br	1d6c <__umodsi3+0x20>
    1d64:	30000c26 	beq	r6,zero,1d98 <__umodsi3+0x4c>
    1d68:	28000516 	blt	r5,zero,1d80 <__umodsi3+0x34>
    1d6c:	294b883a 	add	r5,r5,r5
    1d70:	31bfffc4 	addi	r6,r6,-1
    1d74:	18c7883a 	add	r3,r3,r3
    1d78:	293ffa36 	bltu	r5,r4,1d64 <__alt_data_end+0xff001d64>
    1d7c:	18000626 	beq	r3,zero,1d98 <__umodsi3+0x4c>
    1d80:	1806d07a 	srli	r3,r3,1
    1d84:	11400136 	bltu	r2,r5,1d8c <__umodsi3+0x40>
    1d88:	1145c83a 	sub	r2,r2,r5
    1d8c:	280ad07a 	srli	r5,r5,1
    1d90:	183ffb1e 	bne	r3,zero,1d80 <__alt_data_end+0xff001d80>
    1d94:	f800283a 	ret
    1d98:	f800283a 	ret
    1d9c:	00c00044 	movi	r3,1
    1da0:	003ff706 	br	1d80 <__alt_data_end+0xff001d80>

00001da4 <malloc>:
    1da4:	00800074 	movhi	r2,1
    1da8:	108c7e04 	addi	r2,r2,12792
    1dac:	200b883a 	mov	r5,r4
    1db0:	11000017 	ldw	r4,0(r2)
    1db4:	0001dcc1 	jmpi	1dcc <_malloc_r>

00001db8 <free>:
    1db8:	00800074 	movhi	r2,1
    1dbc:	108c7e04 	addi	r2,r2,12792
    1dc0:	200b883a 	mov	r5,r4
    1dc4:	11000017 	ldw	r4,0(r2)
    1dc8:	0006c1c1 	jmpi	6c1c <_free_r>

00001dcc <_malloc_r>:
    1dcc:	defff504 	addi	sp,sp,-44
    1dd0:	dc800315 	stw	r18,12(sp)
    1dd4:	dfc00a15 	stw	ra,40(sp)
    1dd8:	df000915 	stw	fp,36(sp)
    1ddc:	ddc00815 	stw	r23,32(sp)
    1de0:	dd800715 	stw	r22,28(sp)
    1de4:	dd400615 	stw	r21,24(sp)
    1de8:	dd000515 	stw	r20,20(sp)
    1dec:	dcc00415 	stw	r19,16(sp)
    1df0:	dc400215 	stw	r17,8(sp)
    1df4:	dc000115 	stw	r16,4(sp)
    1df8:	288002c4 	addi	r2,r5,11
    1dfc:	00c00584 	movi	r3,22
    1e00:	2025883a 	mov	r18,r4
    1e04:	18807f2e 	bgeu	r3,r2,2004 <_malloc_r+0x238>
    1e08:	047ffe04 	movi	r17,-8
    1e0c:	1462703a 	and	r17,r2,r17
    1e10:	8800a316 	blt	r17,zero,20a0 <_malloc_r+0x2d4>
    1e14:	8940a236 	bltu	r17,r5,20a0 <_malloc_r+0x2d4>
    1e18:	000eab40 	call	eab4 <__malloc_lock>
    1e1c:	00807dc4 	movi	r2,503
    1e20:	1441e92e 	bgeu	r2,r17,25c8 <_malloc_r+0x7fc>
    1e24:	8804d27a 	srli	r2,r17,9
    1e28:	1000a126 	beq	r2,zero,20b0 <_malloc_r+0x2e4>
    1e2c:	00c00104 	movi	r3,4
    1e30:	18811e36 	bltu	r3,r2,22ac <_malloc_r+0x4e0>
    1e34:	8804d1ba 	srli	r2,r17,6
    1e38:	12000e44 	addi	r8,r2,57
    1e3c:	11c00e04 	addi	r7,r2,56
    1e40:	4209883a 	add	r4,r8,r8
    1e44:	04c00074 	movhi	r19,1
    1e48:	2109883a 	add	r4,r4,r4
    1e4c:	9cc5d004 	addi	r19,r19,5952
    1e50:	2109883a 	add	r4,r4,r4
    1e54:	9909883a 	add	r4,r19,r4
    1e58:	24000117 	ldw	r16,4(r4)
    1e5c:	213ffe04 	addi	r4,r4,-8
    1e60:	24009726 	beq	r4,r16,20c0 <_malloc_r+0x2f4>
    1e64:	80800117 	ldw	r2,4(r16)
    1e68:	01bfff04 	movi	r6,-4
    1e6c:	014003c4 	movi	r5,15
    1e70:	1184703a 	and	r2,r2,r6
    1e74:	1447c83a 	sub	r3,r2,r17
    1e78:	28c00716 	blt	r5,r3,1e98 <_malloc_r+0xcc>
    1e7c:	1800920e 	bge	r3,zero,20c8 <_malloc_r+0x2fc>
    1e80:	84000317 	ldw	r16,12(r16)
    1e84:	24008e26 	beq	r4,r16,20c0 <_malloc_r+0x2f4>
    1e88:	80800117 	ldw	r2,4(r16)
    1e8c:	1184703a 	and	r2,r2,r6
    1e90:	1447c83a 	sub	r3,r2,r17
    1e94:	28fff90e 	bge	r5,r3,1e7c <__alt_data_end+0xff001e7c>
    1e98:	3809883a 	mov	r4,r7
    1e9c:	01800074 	movhi	r6,1
    1ea0:	9c000417 	ldw	r16,16(r19)
    1ea4:	3185d004 	addi	r6,r6,5952
    1ea8:	32000204 	addi	r8,r6,8
    1eac:	82013426 	beq	r16,r8,2380 <_malloc_r+0x5b4>
    1eb0:	80c00117 	ldw	r3,4(r16)
    1eb4:	00bfff04 	movi	r2,-4
    1eb8:	188e703a 	and	r7,r3,r2
    1ebc:	3c45c83a 	sub	r2,r7,r17
    1ec0:	00c003c4 	movi	r3,15
    1ec4:	18811f16 	blt	r3,r2,2344 <_malloc_r+0x578>
    1ec8:	32000515 	stw	r8,20(r6)
    1ecc:	32000415 	stw	r8,16(r6)
    1ed0:	10007f0e 	bge	r2,zero,20d0 <_malloc_r+0x304>
    1ed4:	00807fc4 	movi	r2,511
    1ed8:	11c0fd36 	bltu	r2,r7,22d0 <_malloc_r+0x504>
    1edc:	3806d0fa 	srli	r3,r7,3
    1ee0:	01c00044 	movi	r7,1
    1ee4:	30800117 	ldw	r2,4(r6)
    1ee8:	19400044 	addi	r5,r3,1
    1eec:	294b883a 	add	r5,r5,r5
    1ef0:	1807d0ba 	srai	r3,r3,2
    1ef4:	294b883a 	add	r5,r5,r5
    1ef8:	294b883a 	add	r5,r5,r5
    1efc:	298b883a 	add	r5,r5,r6
    1f00:	38c6983a 	sll	r3,r7,r3
    1f04:	29c00017 	ldw	r7,0(r5)
    1f08:	2a7ffe04 	addi	r9,r5,-8
    1f0c:	1886b03a 	or	r3,r3,r2
    1f10:	82400315 	stw	r9,12(r16)
    1f14:	81c00215 	stw	r7,8(r16)
    1f18:	30c00115 	stw	r3,4(r6)
    1f1c:	2c000015 	stw	r16,0(r5)
    1f20:	3c000315 	stw	r16,12(r7)
    1f24:	2005d0ba 	srai	r2,r4,2
    1f28:	01400044 	movi	r5,1
    1f2c:	288a983a 	sll	r5,r5,r2
    1f30:	19406f36 	bltu	r3,r5,20f0 <_malloc_r+0x324>
    1f34:	28c4703a 	and	r2,r5,r3
    1f38:	10000a1e 	bne	r2,zero,1f64 <_malloc_r+0x198>
    1f3c:	00bfff04 	movi	r2,-4
    1f40:	294b883a 	add	r5,r5,r5
    1f44:	2088703a 	and	r4,r4,r2
    1f48:	28c4703a 	and	r2,r5,r3
    1f4c:	21000104 	addi	r4,r4,4
    1f50:	1000041e 	bne	r2,zero,1f64 <_malloc_r+0x198>
    1f54:	294b883a 	add	r5,r5,r5
    1f58:	28c4703a 	and	r2,r5,r3
    1f5c:	21000104 	addi	r4,r4,4
    1f60:	103ffc26 	beq	r2,zero,1f54 <__alt_data_end+0xff001f54>
    1f64:	02bfff04 	movi	r10,-4
    1f68:	024003c4 	movi	r9,15
    1f6c:	21800044 	addi	r6,r4,1
    1f70:	318d883a 	add	r6,r6,r6
    1f74:	318d883a 	add	r6,r6,r6
    1f78:	318d883a 	add	r6,r6,r6
    1f7c:	998d883a 	add	r6,r19,r6
    1f80:	333ffe04 	addi	r12,r6,-8
    1f84:	2017883a 	mov	r11,r4
    1f88:	31800104 	addi	r6,r6,4
    1f8c:	34000017 	ldw	r16,0(r6)
    1f90:	31fffd04 	addi	r7,r6,-12
    1f94:	81c0041e 	bne	r16,r7,1fa8 <_malloc_r+0x1dc>
    1f98:	0000fb06 	br	2388 <_malloc_r+0x5bc>
    1f9c:	1801030e 	bge	r3,zero,23ac <_malloc_r+0x5e0>
    1fa0:	84000317 	ldw	r16,12(r16)
    1fa4:	81c0f826 	beq	r16,r7,2388 <_malloc_r+0x5bc>
    1fa8:	80800117 	ldw	r2,4(r16)
    1fac:	1284703a 	and	r2,r2,r10
    1fb0:	1447c83a 	sub	r3,r2,r17
    1fb4:	48fff90e 	bge	r9,r3,1f9c <__alt_data_end+0xff001f9c>
    1fb8:	80800317 	ldw	r2,12(r16)
    1fbc:	81000217 	ldw	r4,8(r16)
    1fc0:	89400054 	ori	r5,r17,1
    1fc4:	81400115 	stw	r5,4(r16)
    1fc8:	20800315 	stw	r2,12(r4)
    1fcc:	11000215 	stw	r4,8(r2)
    1fd0:	8463883a 	add	r17,r16,r17
    1fd4:	9c400515 	stw	r17,20(r19)
    1fd8:	9c400415 	stw	r17,16(r19)
    1fdc:	18800054 	ori	r2,r3,1
    1fe0:	88800115 	stw	r2,4(r17)
    1fe4:	8a000315 	stw	r8,12(r17)
    1fe8:	8a000215 	stw	r8,8(r17)
    1fec:	88e3883a 	add	r17,r17,r3
    1ff0:	88c00015 	stw	r3,0(r17)
    1ff4:	9009883a 	mov	r4,r18
    1ff8:	000ead80 	call	ead8 <__malloc_unlock>
    1ffc:	80800204 	addi	r2,r16,8
    2000:	00001b06 	br	2070 <_malloc_r+0x2a4>
    2004:	04400404 	movi	r17,16
    2008:	89402536 	bltu	r17,r5,20a0 <_malloc_r+0x2d4>
    200c:	000eab40 	call	eab4 <__malloc_lock>
    2010:	00800184 	movi	r2,6
    2014:	01000084 	movi	r4,2
    2018:	04c00074 	movhi	r19,1
    201c:	1085883a 	add	r2,r2,r2
    2020:	9cc5d004 	addi	r19,r19,5952
    2024:	1085883a 	add	r2,r2,r2
    2028:	9885883a 	add	r2,r19,r2
    202c:	14000117 	ldw	r16,4(r2)
    2030:	10fffe04 	addi	r3,r2,-8
    2034:	80c0d926 	beq	r16,r3,239c <_malloc_r+0x5d0>
    2038:	80c00117 	ldw	r3,4(r16)
    203c:	81000317 	ldw	r4,12(r16)
    2040:	00bfff04 	movi	r2,-4
    2044:	1884703a 	and	r2,r3,r2
    2048:	81400217 	ldw	r5,8(r16)
    204c:	8085883a 	add	r2,r16,r2
    2050:	10c00117 	ldw	r3,4(r2)
    2054:	29000315 	stw	r4,12(r5)
    2058:	21400215 	stw	r5,8(r4)
    205c:	18c00054 	ori	r3,r3,1
    2060:	10c00115 	stw	r3,4(r2)
    2064:	9009883a 	mov	r4,r18
    2068:	000ead80 	call	ead8 <__malloc_unlock>
    206c:	80800204 	addi	r2,r16,8
    2070:	dfc00a17 	ldw	ra,40(sp)
    2074:	df000917 	ldw	fp,36(sp)
    2078:	ddc00817 	ldw	r23,32(sp)
    207c:	dd800717 	ldw	r22,28(sp)
    2080:	dd400617 	ldw	r21,24(sp)
    2084:	dd000517 	ldw	r20,20(sp)
    2088:	dcc00417 	ldw	r19,16(sp)
    208c:	dc800317 	ldw	r18,12(sp)
    2090:	dc400217 	ldw	r17,8(sp)
    2094:	dc000117 	ldw	r16,4(sp)
    2098:	dec00b04 	addi	sp,sp,44
    209c:	f800283a 	ret
    20a0:	00800304 	movi	r2,12
    20a4:	90800015 	stw	r2,0(r18)
    20a8:	0005883a 	mov	r2,zero
    20ac:	003ff006 	br	2070 <__alt_data_end+0xff002070>
    20b0:	01002004 	movi	r4,128
    20b4:	02001004 	movi	r8,64
    20b8:	01c00fc4 	movi	r7,63
    20bc:	003f6106 	br	1e44 <__alt_data_end+0xff001e44>
    20c0:	4009883a 	mov	r4,r8
    20c4:	003f7506 	br	1e9c <__alt_data_end+0xff001e9c>
    20c8:	81000317 	ldw	r4,12(r16)
    20cc:	003fde06 	br	2048 <__alt_data_end+0xff002048>
    20d0:	81c5883a 	add	r2,r16,r7
    20d4:	11400117 	ldw	r5,4(r2)
    20d8:	9009883a 	mov	r4,r18
    20dc:	29400054 	ori	r5,r5,1
    20e0:	11400115 	stw	r5,4(r2)
    20e4:	000ead80 	call	ead8 <__malloc_unlock>
    20e8:	80800204 	addi	r2,r16,8
    20ec:	003fe006 	br	2070 <__alt_data_end+0xff002070>
    20f0:	9c000217 	ldw	r16,8(r19)
    20f4:	00bfff04 	movi	r2,-4
    20f8:	85800117 	ldw	r22,4(r16)
    20fc:	b0ac703a 	and	r22,r22,r2
    2100:	b4400336 	bltu	r22,r17,2110 <_malloc_r+0x344>
    2104:	b445c83a 	sub	r2,r22,r17
    2108:	00c003c4 	movi	r3,15
    210c:	18805d16 	blt	r3,r2,2284 <_malloc_r+0x4b8>
    2110:	05c00074 	movhi	r23,1
    2114:	00800074 	movhi	r2,1
    2118:	10935204 	addi	r2,r2,19784
    211c:	bdcc7b04 	addi	r23,r23,12780
    2120:	15400017 	ldw	r21,0(r2)
    2124:	b8c00017 	ldw	r3,0(r23)
    2128:	00bfffc4 	movi	r2,-1
    212c:	858d883a 	add	r6,r16,r22
    2130:	8d6b883a 	add	r21,r17,r21
    2134:	1880ea26 	beq	r3,r2,24e0 <_malloc_r+0x714>
    2138:	ad4403c4 	addi	r21,r21,4111
    213c:	00bc0004 	movi	r2,-4096
    2140:	a8aa703a 	and	r21,r21,r2
    2144:	a80b883a 	mov	r5,r21
    2148:	9009883a 	mov	r4,r18
    214c:	d9800015 	stw	r6,0(sp)
    2150:	00027180 	call	2718 <_sbrk_r>
    2154:	1029883a 	mov	r20,r2
    2158:	00bfffc4 	movi	r2,-1
    215c:	d9800017 	ldw	r6,0(sp)
    2160:	a080e826 	beq	r20,r2,2504 <_malloc_r+0x738>
    2164:	a180a636 	bltu	r20,r6,2400 <_malloc_r+0x634>
    2168:	07000074 	movhi	fp,1
    216c:	e7136004 	addi	fp,fp,19840
    2170:	e0800017 	ldw	r2,0(fp)
    2174:	a887883a 	add	r3,r21,r2
    2178:	e0c00015 	stw	r3,0(fp)
    217c:	3500e626 	beq	r6,r20,2518 <_malloc_r+0x74c>
    2180:	b9000017 	ldw	r4,0(r23)
    2184:	00bfffc4 	movi	r2,-1
    2188:	2080ee26 	beq	r4,r2,2544 <_malloc_r+0x778>
    218c:	a185c83a 	sub	r2,r20,r6
    2190:	10c5883a 	add	r2,r2,r3
    2194:	e0800015 	stw	r2,0(fp)
    2198:	a0c001cc 	andi	r3,r20,7
    219c:	1800bc26 	beq	r3,zero,2490 <_malloc_r+0x6c4>
    21a0:	a0e9c83a 	sub	r20,r20,r3
    21a4:	00840204 	movi	r2,4104
    21a8:	a5000204 	addi	r20,r20,8
    21ac:	10c7c83a 	sub	r3,r2,r3
    21b0:	a545883a 	add	r2,r20,r21
    21b4:	1083ffcc 	andi	r2,r2,4095
    21b8:	18abc83a 	sub	r21,r3,r2
    21bc:	a80b883a 	mov	r5,r21
    21c0:	9009883a 	mov	r4,r18
    21c4:	00027180 	call	2718 <_sbrk_r>
    21c8:	00ffffc4 	movi	r3,-1
    21cc:	10c0e126 	beq	r2,r3,2554 <_malloc_r+0x788>
    21d0:	1505c83a 	sub	r2,r2,r20
    21d4:	1545883a 	add	r2,r2,r21
    21d8:	10800054 	ori	r2,r2,1
    21dc:	e0c00017 	ldw	r3,0(fp)
    21e0:	9d000215 	stw	r20,8(r19)
    21e4:	a0800115 	stw	r2,4(r20)
    21e8:	a8c7883a 	add	r3,r21,r3
    21ec:	e0c00015 	stw	r3,0(fp)
    21f0:	84c00e26 	beq	r16,r19,222c <_malloc_r+0x460>
    21f4:	018003c4 	movi	r6,15
    21f8:	3580a72e 	bgeu	r6,r22,2498 <_malloc_r+0x6cc>
    21fc:	81400117 	ldw	r5,4(r16)
    2200:	013ffe04 	movi	r4,-8
    2204:	b0bffd04 	addi	r2,r22,-12
    2208:	1104703a 	and	r2,r2,r4
    220c:	2900004c 	andi	r4,r5,1
    2210:	2088b03a 	or	r4,r4,r2
    2214:	81000115 	stw	r4,4(r16)
    2218:	01400144 	movi	r5,5
    221c:	8089883a 	add	r4,r16,r2
    2220:	21400115 	stw	r5,4(r4)
    2224:	21400215 	stw	r5,8(r4)
    2228:	3080cd36 	bltu	r6,r2,2560 <_malloc_r+0x794>
    222c:	00800074 	movhi	r2,1
    2230:	10935104 	addi	r2,r2,19780
    2234:	11000017 	ldw	r4,0(r2)
    2238:	20c0012e 	bgeu	r4,r3,2240 <_malloc_r+0x474>
    223c:	10c00015 	stw	r3,0(r2)
    2240:	00800074 	movhi	r2,1
    2244:	10935004 	addi	r2,r2,19776
    2248:	11000017 	ldw	r4,0(r2)
    224c:	9c000217 	ldw	r16,8(r19)
    2250:	20c0012e 	bgeu	r4,r3,2258 <_malloc_r+0x48c>
    2254:	10c00015 	stw	r3,0(r2)
    2258:	80c00117 	ldw	r3,4(r16)
    225c:	00bfff04 	movi	r2,-4
    2260:	1886703a 	and	r3,r3,r2
    2264:	1c45c83a 	sub	r2,r3,r17
    2268:	1c400236 	bltu	r3,r17,2274 <_malloc_r+0x4a8>
    226c:	00c003c4 	movi	r3,15
    2270:	18800416 	blt	r3,r2,2284 <_malloc_r+0x4b8>
    2274:	9009883a 	mov	r4,r18
    2278:	000ead80 	call	ead8 <__malloc_unlock>
    227c:	0005883a 	mov	r2,zero
    2280:	003f7b06 	br	2070 <__alt_data_end+0xff002070>
    2284:	88c00054 	ori	r3,r17,1
    2288:	80c00115 	stw	r3,4(r16)
    228c:	8463883a 	add	r17,r16,r17
    2290:	10800054 	ori	r2,r2,1
    2294:	9c400215 	stw	r17,8(r19)
    2298:	88800115 	stw	r2,4(r17)
    229c:	9009883a 	mov	r4,r18
    22a0:	000ead80 	call	ead8 <__malloc_unlock>
    22a4:	80800204 	addi	r2,r16,8
    22a8:	003f7106 	br	2070 <__alt_data_end+0xff002070>
    22ac:	00c00504 	movi	r3,20
    22b0:	18804a2e 	bgeu	r3,r2,23dc <_malloc_r+0x610>
    22b4:	00c01504 	movi	r3,84
    22b8:	18806e36 	bltu	r3,r2,2474 <_malloc_r+0x6a8>
    22bc:	8804d33a 	srli	r2,r17,12
    22c0:	12001bc4 	addi	r8,r2,111
    22c4:	11c01b84 	addi	r7,r2,110
    22c8:	4209883a 	add	r4,r8,r8
    22cc:	003edd06 	br	1e44 <__alt_data_end+0xff001e44>
    22d0:	3804d27a 	srli	r2,r7,9
    22d4:	00c00104 	movi	r3,4
    22d8:	1880442e 	bgeu	r3,r2,23ec <_malloc_r+0x620>
    22dc:	00c00504 	movi	r3,20
    22e0:	18808136 	bltu	r3,r2,24e8 <_malloc_r+0x71c>
    22e4:	11401704 	addi	r5,r2,92
    22e8:	10c016c4 	addi	r3,r2,91
    22ec:	294b883a 	add	r5,r5,r5
    22f0:	294b883a 	add	r5,r5,r5
    22f4:	294b883a 	add	r5,r5,r5
    22f8:	994b883a 	add	r5,r19,r5
    22fc:	28800017 	ldw	r2,0(r5)
    2300:	01800074 	movhi	r6,1
    2304:	297ffe04 	addi	r5,r5,-8
    2308:	3185d004 	addi	r6,r6,5952
    230c:	28806526 	beq	r5,r2,24a4 <_malloc_r+0x6d8>
    2310:	01bfff04 	movi	r6,-4
    2314:	10c00117 	ldw	r3,4(r2)
    2318:	1986703a 	and	r3,r3,r6
    231c:	38c0022e 	bgeu	r7,r3,2328 <_malloc_r+0x55c>
    2320:	10800217 	ldw	r2,8(r2)
    2324:	28bffb1e 	bne	r5,r2,2314 <__alt_data_end+0xff002314>
    2328:	11400317 	ldw	r5,12(r2)
    232c:	98c00117 	ldw	r3,4(r19)
    2330:	81400315 	stw	r5,12(r16)
    2334:	80800215 	stw	r2,8(r16)
    2338:	2c000215 	stw	r16,8(r5)
    233c:	14000315 	stw	r16,12(r2)
    2340:	003ef806 	br	1f24 <__alt_data_end+0xff001f24>
    2344:	88c00054 	ori	r3,r17,1
    2348:	80c00115 	stw	r3,4(r16)
    234c:	8463883a 	add	r17,r16,r17
    2350:	34400515 	stw	r17,20(r6)
    2354:	34400415 	stw	r17,16(r6)
    2358:	10c00054 	ori	r3,r2,1
    235c:	8a000315 	stw	r8,12(r17)
    2360:	8a000215 	stw	r8,8(r17)
    2364:	88c00115 	stw	r3,4(r17)
    2368:	88a3883a 	add	r17,r17,r2
    236c:	88800015 	stw	r2,0(r17)
    2370:	9009883a 	mov	r4,r18
    2374:	000ead80 	call	ead8 <__malloc_unlock>
    2378:	80800204 	addi	r2,r16,8
    237c:	003f3c06 	br	2070 <__alt_data_end+0xff002070>
    2380:	30c00117 	ldw	r3,4(r6)
    2384:	003ee706 	br	1f24 <__alt_data_end+0xff001f24>
    2388:	5ac00044 	addi	r11,r11,1
    238c:	588000cc 	andi	r2,r11,3
    2390:	31800204 	addi	r6,r6,8
    2394:	103efd1e 	bne	r2,zero,1f8c <__alt_data_end+0xff001f8c>
    2398:	00002406 	br	242c <_malloc_r+0x660>
    239c:	14000317 	ldw	r16,12(r2)
    23a0:	143f251e 	bne	r2,r16,2038 <__alt_data_end+0xff002038>
    23a4:	21000084 	addi	r4,r4,2
    23a8:	003ebc06 	br	1e9c <__alt_data_end+0xff001e9c>
    23ac:	8085883a 	add	r2,r16,r2
    23b0:	10c00117 	ldw	r3,4(r2)
    23b4:	81000317 	ldw	r4,12(r16)
    23b8:	81400217 	ldw	r5,8(r16)
    23bc:	18c00054 	ori	r3,r3,1
    23c0:	10c00115 	stw	r3,4(r2)
    23c4:	29000315 	stw	r4,12(r5)
    23c8:	21400215 	stw	r5,8(r4)
    23cc:	9009883a 	mov	r4,r18
    23d0:	000ead80 	call	ead8 <__malloc_unlock>
    23d4:	80800204 	addi	r2,r16,8
    23d8:	003f2506 	br	2070 <__alt_data_end+0xff002070>
    23dc:	12001704 	addi	r8,r2,92
    23e0:	11c016c4 	addi	r7,r2,91
    23e4:	4209883a 	add	r4,r8,r8
    23e8:	003e9606 	br	1e44 <__alt_data_end+0xff001e44>
    23ec:	3804d1ba 	srli	r2,r7,6
    23f0:	11400e44 	addi	r5,r2,57
    23f4:	10c00e04 	addi	r3,r2,56
    23f8:	294b883a 	add	r5,r5,r5
    23fc:	003fbc06 	br	22f0 <__alt_data_end+0xff0022f0>
    2400:	84ff5926 	beq	r16,r19,2168 <__alt_data_end+0xff002168>
    2404:	00800074 	movhi	r2,1
    2408:	1085d004 	addi	r2,r2,5952
    240c:	14000217 	ldw	r16,8(r2)
    2410:	00bfff04 	movi	r2,-4
    2414:	80c00117 	ldw	r3,4(r16)
    2418:	1886703a 	and	r3,r3,r2
    241c:	003f9106 	br	2264 <__alt_data_end+0xff002264>
    2420:	60800217 	ldw	r2,8(r12)
    2424:	213fffc4 	addi	r4,r4,-1
    2428:	1300651e 	bne	r2,r12,25c0 <_malloc_r+0x7f4>
    242c:	208000cc 	andi	r2,r4,3
    2430:	633ffe04 	addi	r12,r12,-8
    2434:	103ffa1e 	bne	r2,zero,2420 <__alt_data_end+0xff002420>
    2438:	98800117 	ldw	r2,4(r19)
    243c:	0146303a 	nor	r3,zero,r5
    2440:	1884703a 	and	r2,r3,r2
    2444:	98800115 	stw	r2,4(r19)
    2448:	294b883a 	add	r5,r5,r5
    244c:	117f2836 	bltu	r2,r5,20f0 <__alt_data_end+0xff0020f0>
    2450:	283f2726 	beq	r5,zero,20f0 <__alt_data_end+0xff0020f0>
    2454:	2886703a 	and	r3,r5,r2
    2458:	5809883a 	mov	r4,r11
    245c:	183ec31e 	bne	r3,zero,1f6c <__alt_data_end+0xff001f6c>
    2460:	294b883a 	add	r5,r5,r5
    2464:	2886703a 	and	r3,r5,r2
    2468:	21000104 	addi	r4,r4,4
    246c:	183ffc26 	beq	r3,zero,2460 <__alt_data_end+0xff002460>
    2470:	003ebe06 	br	1f6c <__alt_data_end+0xff001f6c>
    2474:	00c05504 	movi	r3,340
    2478:	18801236 	bltu	r3,r2,24c4 <_malloc_r+0x6f8>
    247c:	8804d3fa 	srli	r2,r17,15
    2480:	12001e04 	addi	r8,r2,120
    2484:	11c01dc4 	addi	r7,r2,119
    2488:	4209883a 	add	r4,r8,r8
    248c:	003e6d06 	br	1e44 <__alt_data_end+0xff001e44>
    2490:	00c40004 	movi	r3,4096
    2494:	003f4606 	br	21b0 <__alt_data_end+0xff0021b0>
    2498:	00800044 	movi	r2,1
    249c:	a0800115 	stw	r2,4(r20)
    24a0:	003f7406 	br	2274 <__alt_data_end+0xff002274>
    24a4:	1805d0ba 	srai	r2,r3,2
    24a8:	01c00044 	movi	r7,1
    24ac:	30c00117 	ldw	r3,4(r6)
    24b0:	388e983a 	sll	r7,r7,r2
    24b4:	2805883a 	mov	r2,r5
    24b8:	38c6b03a 	or	r3,r7,r3
    24bc:	30c00115 	stw	r3,4(r6)
    24c0:	003f9b06 	br	2330 <__alt_data_end+0xff002330>
    24c4:	00c15504 	movi	r3,1364
    24c8:	18801a36 	bltu	r3,r2,2534 <_malloc_r+0x768>
    24cc:	8804d4ba 	srli	r2,r17,18
    24d0:	12001f44 	addi	r8,r2,125
    24d4:	11c01f04 	addi	r7,r2,124
    24d8:	4209883a 	add	r4,r8,r8
    24dc:	003e5906 	br	1e44 <__alt_data_end+0xff001e44>
    24e0:	ad400404 	addi	r21,r21,16
    24e4:	003f1706 	br	2144 <__alt_data_end+0xff002144>
    24e8:	00c01504 	movi	r3,84
    24ec:	18802336 	bltu	r3,r2,257c <_malloc_r+0x7b0>
    24f0:	3804d33a 	srli	r2,r7,12
    24f4:	11401bc4 	addi	r5,r2,111
    24f8:	10c01b84 	addi	r3,r2,110
    24fc:	294b883a 	add	r5,r5,r5
    2500:	003f7b06 	br	22f0 <__alt_data_end+0xff0022f0>
    2504:	9c000217 	ldw	r16,8(r19)
    2508:	00bfff04 	movi	r2,-4
    250c:	80c00117 	ldw	r3,4(r16)
    2510:	1886703a 	and	r3,r3,r2
    2514:	003f5306 	br	2264 <__alt_data_end+0xff002264>
    2518:	3083ffcc 	andi	r2,r6,4095
    251c:	103f181e 	bne	r2,zero,2180 <__alt_data_end+0xff002180>
    2520:	99000217 	ldw	r4,8(r19)
    2524:	b545883a 	add	r2,r22,r21
    2528:	10800054 	ori	r2,r2,1
    252c:	20800115 	stw	r2,4(r4)
    2530:	003f3e06 	br	222c <__alt_data_end+0xff00222c>
    2534:	01003f84 	movi	r4,254
    2538:	02001fc4 	movi	r8,127
    253c:	01c01f84 	movi	r7,126
    2540:	003e4006 	br	1e44 <__alt_data_end+0xff001e44>
    2544:	00800074 	movhi	r2,1
    2548:	108c7b04 	addi	r2,r2,12780
    254c:	15000015 	stw	r20,0(r2)
    2550:	003f1106 	br	2198 <__alt_data_end+0xff002198>
    2554:	00800044 	movi	r2,1
    2558:	002b883a 	mov	r21,zero
    255c:	003f1f06 	br	21dc <__alt_data_end+0xff0021dc>
    2560:	81400204 	addi	r5,r16,8
    2564:	9009883a 	mov	r4,r18
    2568:	0006c1c0 	call	6c1c <_free_r>
    256c:	00800074 	movhi	r2,1
    2570:	10936004 	addi	r2,r2,19840
    2574:	10c00017 	ldw	r3,0(r2)
    2578:	003f2c06 	br	222c <__alt_data_end+0xff00222c>
    257c:	00c05504 	movi	r3,340
    2580:	18800536 	bltu	r3,r2,2598 <_malloc_r+0x7cc>
    2584:	3804d3fa 	srli	r2,r7,15
    2588:	11401e04 	addi	r5,r2,120
    258c:	10c01dc4 	addi	r3,r2,119
    2590:	294b883a 	add	r5,r5,r5
    2594:	003f5606 	br	22f0 <__alt_data_end+0xff0022f0>
    2598:	00c15504 	movi	r3,1364
    259c:	18800536 	bltu	r3,r2,25b4 <_malloc_r+0x7e8>
    25a0:	3804d4ba 	srli	r2,r7,18
    25a4:	11401f44 	addi	r5,r2,125
    25a8:	10c01f04 	addi	r3,r2,124
    25ac:	294b883a 	add	r5,r5,r5
    25b0:	003f4f06 	br	22f0 <__alt_data_end+0xff0022f0>
    25b4:	01403f84 	movi	r5,254
    25b8:	00c01f84 	movi	r3,126
    25bc:	003f4c06 	br	22f0 <__alt_data_end+0xff0022f0>
    25c0:	98800117 	ldw	r2,4(r19)
    25c4:	003fa006 	br	2448 <__alt_data_end+0xff002448>
    25c8:	8808d0fa 	srli	r4,r17,3
    25cc:	20800044 	addi	r2,r4,1
    25d0:	1085883a 	add	r2,r2,r2
    25d4:	003e9006 	br	2018 <__alt_data_end+0xff002018>

000025d8 <_printf_r>:
    25d8:	defffd04 	addi	sp,sp,-12
    25dc:	2805883a 	mov	r2,r5
    25e0:	dfc00015 	stw	ra,0(sp)
    25e4:	d9800115 	stw	r6,4(sp)
    25e8:	d9c00215 	stw	r7,8(sp)
    25ec:	21400217 	ldw	r5,8(r4)
    25f0:	d9c00104 	addi	r7,sp,4
    25f4:	100d883a 	mov	r6,r2
    25f8:	00028040 	call	2804 <___vfprintf_internal_r>
    25fc:	dfc00017 	ldw	ra,0(sp)
    2600:	dec00304 	addi	sp,sp,12
    2604:	f800283a 	ret

00002608 <printf>:
    2608:	defffc04 	addi	sp,sp,-16
    260c:	dfc00015 	stw	ra,0(sp)
    2610:	d9400115 	stw	r5,4(sp)
    2614:	d9800215 	stw	r6,8(sp)
    2618:	d9c00315 	stw	r7,12(sp)
    261c:	00800074 	movhi	r2,1
    2620:	108c7e04 	addi	r2,r2,12792
    2624:	10800017 	ldw	r2,0(r2)
    2628:	200b883a 	mov	r5,r4
    262c:	d9800104 	addi	r6,sp,4
    2630:	11000217 	ldw	r4,8(r2)
    2634:	00049fc0 	call	49fc <__vfprintf_internal>
    2638:	dfc00017 	ldw	ra,0(sp)
    263c:	dec00404 	addi	sp,sp,16
    2640:	f800283a 	ret

00002644 <_puts_r>:
    2644:	defff604 	addi	sp,sp,-40
    2648:	dc000715 	stw	r16,28(sp)
    264c:	2021883a 	mov	r16,r4
    2650:	2809883a 	mov	r4,r5
    2654:	dc400815 	stw	r17,32(sp)
    2658:	dfc00915 	stw	ra,36(sp)
    265c:	2823883a 	mov	r17,r5
    2660:	000276c0 	call	276c <strlen>
    2664:	10c00044 	addi	r3,r2,1
    2668:	d8800115 	stw	r2,4(sp)
    266c:	00800074 	movhi	r2,1
    2670:	10850e04 	addi	r2,r2,5176
    2674:	d8800215 	stw	r2,8(sp)
    2678:	00800044 	movi	r2,1
    267c:	d8800315 	stw	r2,12(sp)
    2680:	00800084 	movi	r2,2
    2684:	dc400015 	stw	r17,0(sp)
    2688:	d8c00615 	stw	r3,24(sp)
    268c:	dec00415 	stw	sp,16(sp)
    2690:	d8800515 	stw	r2,20(sp)
    2694:	80000226 	beq	r16,zero,26a0 <_puts_r+0x5c>
    2698:	80800e17 	ldw	r2,56(r16)
    269c:	10001426 	beq	r2,zero,26f0 <_puts_r+0xac>
    26a0:	81400217 	ldw	r5,8(r16)
    26a4:	2880030b 	ldhu	r2,12(r5)
    26a8:	10c8000c 	andi	r3,r2,8192
    26ac:	1800061e 	bne	r3,zero,26c8 <_puts_r+0x84>
    26b0:	29001917 	ldw	r4,100(r5)
    26b4:	00f7ffc4 	movi	r3,-8193
    26b8:	10880014 	ori	r2,r2,8192
    26bc:	20c6703a 	and	r3,r4,r3
    26c0:	2880030d 	sth	r2,12(r5)
    26c4:	28c01915 	stw	r3,100(r5)
    26c8:	d9800404 	addi	r6,sp,16
    26cc:	8009883a 	mov	r4,r16
    26d0:	0006f2c0 	call	6f2c <__sfvwrite_r>
    26d4:	1000091e 	bne	r2,zero,26fc <_puts_r+0xb8>
    26d8:	00800284 	movi	r2,10
    26dc:	dfc00917 	ldw	ra,36(sp)
    26e0:	dc400817 	ldw	r17,32(sp)
    26e4:	dc000717 	ldw	r16,28(sp)
    26e8:	dec00a04 	addi	sp,sp,40
    26ec:	f800283a 	ret
    26f0:	8009883a 	mov	r4,r16
    26f4:	0006aa80 	call	6aa8 <__sinit>
    26f8:	003fe906 	br	26a0 <__alt_data_end+0xff0026a0>
    26fc:	00bfffc4 	movi	r2,-1
    2700:	003ff606 	br	26dc <__alt_data_end+0xff0026dc>

00002704 <puts>:
    2704:	00800074 	movhi	r2,1
    2708:	108c7e04 	addi	r2,r2,12792
    270c:	200b883a 	mov	r5,r4
    2710:	11000017 	ldw	r4,0(r2)
    2714:	00026441 	jmpi	2644 <_puts_r>

00002718 <_sbrk_r>:
    2718:	defffd04 	addi	sp,sp,-12
    271c:	dc000015 	stw	r16,0(sp)
    2720:	04000074 	movhi	r16,1
    2724:	dc400115 	stw	r17,4(sp)
    2728:	84135304 	addi	r16,r16,19788
    272c:	2023883a 	mov	r17,r4
    2730:	2809883a 	mov	r4,r5
    2734:	dfc00215 	stw	ra,8(sp)
    2738:	80000015 	stw	zero,0(r16)
    273c:	000ec980 	call	ec98 <sbrk>
    2740:	00ffffc4 	movi	r3,-1
    2744:	10c00526 	beq	r2,r3,275c <_sbrk_r+0x44>
    2748:	dfc00217 	ldw	ra,8(sp)
    274c:	dc400117 	ldw	r17,4(sp)
    2750:	dc000017 	ldw	r16,0(sp)
    2754:	dec00304 	addi	sp,sp,12
    2758:	f800283a 	ret
    275c:	80c00017 	ldw	r3,0(r16)
    2760:	183ff926 	beq	r3,zero,2748 <__alt_data_end+0xff002748>
    2764:	88c00015 	stw	r3,0(r17)
    2768:	003ff706 	br	2748 <__alt_data_end+0xff002748>

0000276c <strlen>:
    276c:	208000cc 	andi	r2,r4,3
    2770:	10002026 	beq	r2,zero,27f4 <strlen+0x88>
    2774:	20800007 	ldb	r2,0(r4)
    2778:	10002026 	beq	r2,zero,27fc <strlen+0x90>
    277c:	2005883a 	mov	r2,r4
    2780:	00000206 	br	278c <strlen+0x20>
    2784:	10c00007 	ldb	r3,0(r2)
    2788:	18001826 	beq	r3,zero,27ec <strlen+0x80>
    278c:	10800044 	addi	r2,r2,1
    2790:	10c000cc 	andi	r3,r2,3
    2794:	183ffb1e 	bne	r3,zero,2784 <__alt_data_end+0xff002784>
    2798:	10c00017 	ldw	r3,0(r2)
    279c:	01ffbff4 	movhi	r7,65279
    27a0:	39ffbfc4 	addi	r7,r7,-257
    27a4:	00ca303a 	nor	r5,zero,r3
    27a8:	01a02074 	movhi	r6,32897
    27ac:	19c7883a 	add	r3,r3,r7
    27b0:	31a02004 	addi	r6,r6,-32640
    27b4:	1946703a 	and	r3,r3,r5
    27b8:	1986703a 	and	r3,r3,r6
    27bc:	1800091e 	bne	r3,zero,27e4 <strlen+0x78>
    27c0:	10800104 	addi	r2,r2,4
    27c4:	10c00017 	ldw	r3,0(r2)
    27c8:	19cb883a 	add	r5,r3,r7
    27cc:	00c6303a 	nor	r3,zero,r3
    27d0:	28c6703a 	and	r3,r5,r3
    27d4:	1986703a 	and	r3,r3,r6
    27d8:	183ff926 	beq	r3,zero,27c0 <__alt_data_end+0xff0027c0>
    27dc:	00000106 	br	27e4 <strlen+0x78>
    27e0:	10800044 	addi	r2,r2,1
    27e4:	10c00007 	ldb	r3,0(r2)
    27e8:	183ffd1e 	bne	r3,zero,27e0 <__alt_data_end+0xff0027e0>
    27ec:	1105c83a 	sub	r2,r2,r4
    27f0:	f800283a 	ret
    27f4:	2005883a 	mov	r2,r4
    27f8:	003fe706 	br	2798 <__alt_data_end+0xff002798>
    27fc:	0005883a 	mov	r2,zero
    2800:	f800283a 	ret

00002804 <___vfprintf_internal_r>:
    2804:	deffb804 	addi	sp,sp,-288
    2808:	dfc04715 	stw	ra,284(sp)
    280c:	ddc04515 	stw	r23,276(sp)
    2810:	dd404315 	stw	r21,268(sp)
    2814:	d9002c15 	stw	r4,176(sp)
    2818:	282f883a 	mov	r23,r5
    281c:	302b883a 	mov	r21,r6
    2820:	d9c02d15 	stw	r7,180(sp)
    2824:	df004615 	stw	fp,280(sp)
    2828:	dd804415 	stw	r22,272(sp)
    282c:	dd004215 	stw	r20,264(sp)
    2830:	dcc04115 	stw	r19,260(sp)
    2834:	dc804015 	stw	r18,256(sp)
    2838:	dc403f15 	stw	r17,252(sp)
    283c:	dc003e15 	stw	r16,248(sp)
    2840:	000761c0 	call	761c <_localeconv_r>
    2844:	10800017 	ldw	r2,0(r2)
    2848:	1009883a 	mov	r4,r2
    284c:	d8803415 	stw	r2,208(sp)
    2850:	000276c0 	call	276c <strlen>
    2854:	d8803715 	stw	r2,220(sp)
    2858:	d8802c17 	ldw	r2,176(sp)
    285c:	10000226 	beq	r2,zero,2868 <___vfprintf_internal_r+0x64>
    2860:	10800e17 	ldw	r2,56(r2)
    2864:	1000f926 	beq	r2,zero,2c4c <___vfprintf_internal_r+0x448>
    2868:	b880030b 	ldhu	r2,12(r23)
    286c:	10c8000c 	andi	r3,r2,8192
    2870:	1800061e 	bne	r3,zero,288c <___vfprintf_internal_r+0x88>
    2874:	b9001917 	ldw	r4,100(r23)
    2878:	00f7ffc4 	movi	r3,-8193
    287c:	10880014 	ori	r2,r2,8192
    2880:	20c6703a 	and	r3,r4,r3
    2884:	b880030d 	sth	r2,12(r23)
    2888:	b8c01915 	stw	r3,100(r23)
    288c:	10c0020c 	andi	r3,r2,8
    2890:	1800c126 	beq	r3,zero,2b98 <___vfprintf_internal_r+0x394>
    2894:	b8c00417 	ldw	r3,16(r23)
    2898:	1800bf26 	beq	r3,zero,2b98 <___vfprintf_internal_r+0x394>
    289c:	1080068c 	andi	r2,r2,26
    28a0:	00c00284 	movi	r3,10
    28a4:	10c0c426 	beq	r2,r3,2bb8 <___vfprintf_internal_r+0x3b4>
    28a8:	d8c00404 	addi	r3,sp,16
    28ac:	05000074 	movhi	r20,1
    28b0:	d9001e04 	addi	r4,sp,120
    28b4:	a5052384 	addi	r20,r20,5262
    28b8:	d8c01e15 	stw	r3,120(sp)
    28bc:	d8002015 	stw	zero,128(sp)
    28c0:	d8001f15 	stw	zero,124(sp)
    28c4:	d8003315 	stw	zero,204(sp)
    28c8:	d8003615 	stw	zero,216(sp)
    28cc:	d8003815 	stw	zero,224(sp)
    28d0:	1811883a 	mov	r8,r3
    28d4:	d8003915 	stw	zero,228(sp)
    28d8:	d8003a15 	stw	zero,232(sp)
    28dc:	d8002f15 	stw	zero,188(sp)
    28e0:	d9002815 	stw	r4,160(sp)
    28e4:	a8800007 	ldb	r2,0(r21)
    28e8:	10027b26 	beq	r2,zero,32d8 <___vfprintf_internal_r+0xad4>
    28ec:	00c00944 	movi	r3,37
    28f0:	a821883a 	mov	r16,r21
    28f4:	10c0021e 	bne	r2,r3,2900 <___vfprintf_internal_r+0xfc>
    28f8:	00001406 	br	294c <___vfprintf_internal_r+0x148>
    28fc:	10c00326 	beq	r2,r3,290c <___vfprintf_internal_r+0x108>
    2900:	84000044 	addi	r16,r16,1
    2904:	80800007 	ldb	r2,0(r16)
    2908:	103ffc1e 	bne	r2,zero,28fc <__alt_data_end+0xff0028fc>
    290c:	8563c83a 	sub	r17,r16,r21
    2910:	88000e26 	beq	r17,zero,294c <___vfprintf_internal_r+0x148>
    2914:	d8c02017 	ldw	r3,128(sp)
    2918:	d8801f17 	ldw	r2,124(sp)
    291c:	45400015 	stw	r21,0(r8)
    2920:	1c47883a 	add	r3,r3,r17
    2924:	10800044 	addi	r2,r2,1
    2928:	d8c02015 	stw	r3,128(sp)
    292c:	44400115 	stw	r17,4(r8)
    2930:	d8801f15 	stw	r2,124(sp)
    2934:	00c001c4 	movi	r3,7
    2938:	1880a716 	blt	r3,r2,2bd8 <___vfprintf_internal_r+0x3d4>
    293c:	42000204 	addi	r8,r8,8
    2940:	d9402f17 	ldw	r5,188(sp)
    2944:	2c4b883a 	add	r5,r5,r17
    2948:	d9402f15 	stw	r5,188(sp)
    294c:	80800007 	ldb	r2,0(r16)
    2950:	1000a826 	beq	r2,zero,2bf4 <___vfprintf_internal_r+0x3f0>
    2954:	84400047 	ldb	r17,1(r16)
    2958:	00bfffc4 	movi	r2,-1
    295c:	85400044 	addi	r21,r16,1
    2960:	d8002785 	stb	zero,158(sp)
    2964:	0007883a 	mov	r3,zero
    2968:	000f883a 	mov	r7,zero
    296c:	d8802915 	stw	r2,164(sp)
    2970:	d8003115 	stw	zero,196(sp)
    2974:	0025883a 	mov	r18,zero
    2978:	01401604 	movi	r5,88
    297c:	01800244 	movi	r6,9
    2980:	02800a84 	movi	r10,42
    2984:	02401b04 	movi	r9,108
    2988:	ad400044 	addi	r21,r21,1
    298c:	88bff804 	addi	r2,r17,-32
    2990:	28830436 	bltu	r5,r2,35a4 <___vfprintf_internal_r+0xda0>
    2994:	100490ba 	slli	r2,r2,2
    2998:	01000034 	movhi	r4,0
    299c:	210a6b04 	addi	r4,r4,10668
    29a0:	1105883a 	add	r2,r2,r4
    29a4:	10800017 	ldw	r2,0(r2)
    29a8:	1000683a 	jmp	r2
    29ac:	000034c4 	movi	zero,211
    29b0:	000035a4 	muli	zero,zero,214
    29b4:	000035a4 	muli	zero,zero,214
    29b8:	000034e4 	muli	zero,zero,211
    29bc:	000035a4 	muli	zero,zero,214
    29c0:	000035a4 	muli	zero,zero,214
    29c4:	000035a4 	muli	zero,zero,214
    29c8:	000035a4 	muli	zero,zero,214
    29cc:	000035a4 	muli	zero,zero,214
    29d0:	000035a4 	muli	zero,zero,214
    29d4:	00002c58 	cmpnei	zero,zero,177
    29d8:	00003400 	call	340 <init_camera+0xb0>
    29dc:	000035a4 	muli	zero,zero,214
    29e0:	00002b20 	cmpeqi	zero,zero,172
    29e4:	00002c80 	call	2c8 <init_camera+0x38>
    29e8:	000035a4 	muli	zero,zero,214
    29ec:	00002cc0 	call	2cc <init_camera+0x3c>
    29f0:	00002ccc 	andi	zero,zero,179
    29f4:	00002ccc 	andi	zero,zero,179
    29f8:	00002ccc 	andi	zero,zero,179
    29fc:	00002ccc 	andi	zero,zero,179
    2a00:	00002ccc 	andi	zero,zero,179
    2a04:	00002ccc 	andi	zero,zero,179
    2a08:	00002ccc 	andi	zero,zero,179
    2a0c:	00002ccc 	andi	zero,zero,179
    2a10:	00002ccc 	andi	zero,zero,179
    2a14:	000035a4 	muli	zero,zero,214
    2a18:	000035a4 	muli	zero,zero,214
    2a1c:	000035a4 	muli	zero,zero,214
    2a20:	000035a4 	muli	zero,zero,214
    2a24:	000035a4 	muli	zero,zero,214
    2a28:	000035a4 	muli	zero,zero,214
    2a2c:	000035a4 	muli	zero,zero,214
    2a30:	000035a4 	muli	zero,zero,214
    2a34:	000035a4 	muli	zero,zero,214
    2a38:	000035a4 	muli	zero,zero,214
    2a3c:	00002d00 	call	2d0 <init_camera+0x40>
    2a40:	00002dbc 	xorhi	zero,zero,182
    2a44:	000035a4 	muli	zero,zero,214
    2a48:	00002dbc 	xorhi	zero,zero,182
    2a4c:	000035a4 	muli	zero,zero,214
    2a50:	000035a4 	muli	zero,zero,214
    2a54:	000035a4 	muli	zero,zero,214
    2a58:	000035a4 	muli	zero,zero,214
    2a5c:	00002e5c 	xori	zero,zero,185
    2a60:	000035a4 	muli	zero,zero,214
    2a64:	000035a4 	muli	zero,zero,214
    2a68:	00002e68 	cmpgeui	zero,zero,185
    2a6c:	000035a4 	muli	zero,zero,214
    2a70:	000035a4 	muli	zero,zero,214
    2a74:	000035a4 	muli	zero,zero,214
    2a78:	000035a4 	muli	zero,zero,214
    2a7c:	000035a4 	muli	zero,zero,214
    2a80:	000032e0 	cmpeqi	zero,zero,203
    2a84:	000035a4 	muli	zero,zero,214
    2a88:	000035a4 	muli	zero,zero,214
    2a8c:	00003340 	call	334 <init_camera+0xa4>
    2a90:	000035a4 	muli	zero,zero,214
    2a94:	000035a4 	muli	zero,zero,214
    2a98:	000035a4 	muli	zero,zero,214
    2a9c:	000035a4 	muli	zero,zero,214
    2aa0:	000035a4 	muli	zero,zero,214
    2aa4:	000035a4 	muli	zero,zero,214
    2aa8:	000035a4 	muli	zero,zero,214
    2aac:	000035a4 	muli	zero,zero,214
    2ab0:	000035a4 	muli	zero,zero,214
    2ab4:	000035a4 	muli	zero,zero,214
    2ab8:	00003550 	cmplti	zero,zero,213
    2abc:	000034f0 	cmpltui	zero,zero,211
    2ac0:	00002dbc 	xorhi	zero,zero,182
    2ac4:	00002dbc 	xorhi	zero,zero,182
    2ac8:	00002dbc 	xorhi	zero,zero,182
    2acc:	00003500 	call	350 <init_camera+0xc0>
    2ad0:	000034f0 	cmpltui	zero,zero,211
    2ad4:	000035a4 	muli	zero,zero,214
    2ad8:	000035a4 	muli	zero,zero,214
    2adc:	0000350c 	andi	zero,zero,212
    2ae0:	000035a4 	muli	zero,zero,214
    2ae4:	0000351c 	xori	zero,zero,212
    2ae8:	000033f0 	cmpltui	zero,zero,207
    2aec:	00002b2c 	andhi	zero,zero,172
    2af0:	00003410 	cmplti	zero,zero,208
    2af4:	000035a4 	muli	zero,zero,214
    2af8:	0000341c 	xori	zero,zero,208
    2afc:	000035a4 	muli	zero,zero,214
    2b00:	00003478 	rdprs	zero,zero,209
    2b04:	000035a4 	muli	zero,zero,214
    2b08:	000035a4 	muli	zero,zero,214
    2b0c:	00003488 	cmpgei	zero,zero,210
    2b10:	d9003117 	ldw	r4,196(sp)
    2b14:	d8802d15 	stw	r2,180(sp)
    2b18:	0109c83a 	sub	r4,zero,r4
    2b1c:	d9003115 	stw	r4,196(sp)
    2b20:	94800114 	ori	r18,r18,4
    2b24:	ac400007 	ldb	r17,0(r21)
    2b28:	003f9706 	br	2988 <__alt_data_end+0xff002988>
    2b2c:	00800c04 	movi	r2,48
    2b30:	d9002d17 	ldw	r4,180(sp)
    2b34:	d9402917 	ldw	r5,164(sp)
    2b38:	d8802705 	stb	r2,156(sp)
    2b3c:	00801e04 	movi	r2,120
    2b40:	d8802745 	stb	r2,157(sp)
    2b44:	d8002785 	stb	zero,158(sp)
    2b48:	20c00104 	addi	r3,r4,4
    2b4c:	24c00017 	ldw	r19,0(r4)
    2b50:	002d883a 	mov	r22,zero
    2b54:	90800094 	ori	r2,r18,2
    2b58:	28029a16 	blt	r5,zero,35c4 <___vfprintf_internal_r+0xdc0>
    2b5c:	00bfdfc4 	movi	r2,-129
    2b60:	90a4703a 	and	r18,r18,r2
    2b64:	d8c02d15 	stw	r3,180(sp)
    2b68:	94800094 	ori	r18,r18,2
    2b6c:	9802871e 	bne	r19,zero,358c <___vfprintf_internal_r+0xd88>
    2b70:	00800074 	movhi	r2,1
    2b74:	10851c04 	addi	r2,r2,5232
    2b78:	d8803915 	stw	r2,228(sp)
    2b7c:	04401e04 	movi	r17,120
    2b80:	d8802917 	ldw	r2,164(sp)
    2b84:	0039883a 	mov	fp,zero
    2b88:	1001e926 	beq	r2,zero,3330 <___vfprintf_internal_r+0xb2c>
    2b8c:	0027883a 	mov	r19,zero
    2b90:	002d883a 	mov	r22,zero
    2b94:	00020506 	br	33ac <___vfprintf_internal_r+0xba8>
    2b98:	d9002c17 	ldw	r4,176(sp)
    2b9c:	b80b883a 	mov	r5,r23
    2ba0:	0004ad40 	call	4ad4 <__swsetup_r>
    2ba4:	1005ac1e 	bne	r2,zero,4258 <___vfprintf_internal_r+0x1a54>
    2ba8:	b880030b 	ldhu	r2,12(r23)
    2bac:	00c00284 	movi	r3,10
    2bb0:	1080068c 	andi	r2,r2,26
    2bb4:	10ff3c1e 	bne	r2,r3,28a8 <__alt_data_end+0xff0028a8>
    2bb8:	b880038f 	ldh	r2,14(r23)
    2bbc:	103f3a16 	blt	r2,zero,28a8 <__alt_data_end+0xff0028a8>
    2bc0:	d9c02d17 	ldw	r7,180(sp)
    2bc4:	d9002c17 	ldw	r4,176(sp)
    2bc8:	a80d883a 	mov	r6,r21
    2bcc:	b80b883a 	mov	r5,r23
    2bd0:	0004a180 	call	4a18 <__sbprintf>
    2bd4:	00001106 	br	2c1c <___vfprintf_internal_r+0x418>
    2bd8:	d9002c17 	ldw	r4,176(sp)
    2bdc:	d9801e04 	addi	r6,sp,120
    2be0:	b80b883a 	mov	r5,r23
    2be4:	00095a00 	call	95a0 <__sprint_r>
    2be8:	1000081e 	bne	r2,zero,2c0c <___vfprintf_internal_r+0x408>
    2bec:	da000404 	addi	r8,sp,16
    2bf0:	003f5306 	br	2940 <__alt_data_end+0xff002940>
    2bf4:	d8802017 	ldw	r2,128(sp)
    2bf8:	10000426 	beq	r2,zero,2c0c <___vfprintf_internal_r+0x408>
    2bfc:	d9002c17 	ldw	r4,176(sp)
    2c00:	d9801e04 	addi	r6,sp,120
    2c04:	b80b883a 	mov	r5,r23
    2c08:	00095a00 	call	95a0 <__sprint_r>
    2c0c:	b880030b 	ldhu	r2,12(r23)
    2c10:	1080100c 	andi	r2,r2,64
    2c14:	1005901e 	bne	r2,zero,4258 <___vfprintf_internal_r+0x1a54>
    2c18:	d8802f17 	ldw	r2,188(sp)
    2c1c:	dfc04717 	ldw	ra,284(sp)
    2c20:	df004617 	ldw	fp,280(sp)
    2c24:	ddc04517 	ldw	r23,276(sp)
    2c28:	dd804417 	ldw	r22,272(sp)
    2c2c:	dd404317 	ldw	r21,268(sp)
    2c30:	dd004217 	ldw	r20,264(sp)
    2c34:	dcc04117 	ldw	r19,260(sp)
    2c38:	dc804017 	ldw	r18,256(sp)
    2c3c:	dc403f17 	ldw	r17,252(sp)
    2c40:	dc003e17 	ldw	r16,248(sp)
    2c44:	dec04804 	addi	sp,sp,288
    2c48:	f800283a 	ret
    2c4c:	d9002c17 	ldw	r4,176(sp)
    2c50:	0006aa80 	call	6aa8 <__sinit>
    2c54:	003f0406 	br	2868 <__alt_data_end+0xff002868>
    2c58:	d8802d17 	ldw	r2,180(sp)
    2c5c:	d9002d17 	ldw	r4,180(sp)
    2c60:	10800017 	ldw	r2,0(r2)
    2c64:	d8803115 	stw	r2,196(sp)
    2c68:	20800104 	addi	r2,r4,4
    2c6c:	d9003117 	ldw	r4,196(sp)
    2c70:	203fa716 	blt	r4,zero,2b10 <__alt_data_end+0xff002b10>
    2c74:	d8802d15 	stw	r2,180(sp)
    2c78:	ac400007 	ldb	r17,0(r21)
    2c7c:	003f4206 	br	2988 <__alt_data_end+0xff002988>
    2c80:	ac400007 	ldb	r17,0(r21)
    2c84:	aac00044 	addi	r11,r21,1
    2c88:	8a872826 	beq	r17,r10,492c <___vfprintf_internal_r+0x2128>
    2c8c:	88bff404 	addi	r2,r17,-48
    2c90:	0009883a 	mov	r4,zero
    2c94:	30867d36 	bltu	r6,r2,468c <___vfprintf_internal_r+0x1e88>
    2c98:	5c400007 	ldb	r17,0(r11)
    2c9c:	210002a4 	muli	r4,r4,10
    2ca0:	5d400044 	addi	r21,r11,1
    2ca4:	a817883a 	mov	r11,r21
    2ca8:	2089883a 	add	r4,r4,r2
    2cac:	88bff404 	addi	r2,r17,-48
    2cb0:	30bff92e 	bgeu	r6,r2,2c98 <__alt_data_end+0xff002c98>
    2cb4:	2005c916 	blt	r4,zero,43dc <___vfprintf_internal_r+0x1bd8>
    2cb8:	d9002915 	stw	r4,164(sp)
    2cbc:	003f3306 	br	298c <__alt_data_end+0xff00298c>
    2cc0:	94802014 	ori	r18,r18,128
    2cc4:	ac400007 	ldb	r17,0(r21)
    2cc8:	003f2f06 	br	2988 <__alt_data_end+0xff002988>
    2ccc:	a809883a 	mov	r4,r21
    2cd0:	d8003115 	stw	zero,196(sp)
    2cd4:	88bff404 	addi	r2,r17,-48
    2cd8:	0017883a 	mov	r11,zero
    2cdc:	24400007 	ldb	r17,0(r4)
    2ce0:	5ac002a4 	muli	r11,r11,10
    2ce4:	ad400044 	addi	r21,r21,1
    2ce8:	a809883a 	mov	r4,r21
    2cec:	12d7883a 	add	r11,r2,r11
    2cf0:	88bff404 	addi	r2,r17,-48
    2cf4:	30bff92e 	bgeu	r6,r2,2cdc <__alt_data_end+0xff002cdc>
    2cf8:	dac03115 	stw	r11,196(sp)
    2cfc:	003f2306 	br	298c <__alt_data_end+0xff00298c>
    2d00:	18c03fcc 	andi	r3,r3,255
    2d04:	18072b1e 	bne	r3,zero,49b4 <___vfprintf_internal_r+0x21b0>
    2d08:	94800414 	ori	r18,r18,16
    2d0c:	9080080c 	andi	r2,r18,32
    2d10:	10037b26 	beq	r2,zero,3b00 <___vfprintf_internal_r+0x12fc>
    2d14:	d9402d17 	ldw	r5,180(sp)
    2d18:	28800117 	ldw	r2,4(r5)
    2d1c:	2cc00017 	ldw	r19,0(r5)
    2d20:	29400204 	addi	r5,r5,8
    2d24:	d9402d15 	stw	r5,180(sp)
    2d28:	102d883a 	mov	r22,r2
    2d2c:	10044b16 	blt	r2,zero,3e5c <___vfprintf_internal_r+0x1658>
    2d30:	d9402917 	ldw	r5,164(sp)
    2d34:	df002783 	ldbu	fp,158(sp)
    2d38:	2803bc16 	blt	r5,zero,3c2c <___vfprintf_internal_r+0x1428>
    2d3c:	00ffdfc4 	movi	r3,-129
    2d40:	9d84b03a 	or	r2,r19,r22
    2d44:	90e4703a 	and	r18,r18,r3
    2d48:	10017726 	beq	r2,zero,3328 <___vfprintf_internal_r+0xb24>
    2d4c:	b0038326 	beq	r22,zero,3b5c <___vfprintf_internal_r+0x1358>
    2d50:	dc402a15 	stw	r17,168(sp)
    2d54:	dc001e04 	addi	r16,sp,120
    2d58:	b023883a 	mov	r17,r22
    2d5c:	402d883a 	mov	r22,r8
    2d60:	9809883a 	mov	r4,r19
    2d64:	880b883a 	mov	r5,r17
    2d68:	01800284 	movi	r6,10
    2d6c:	000f883a 	mov	r7,zero
    2d70:	000b9980 	call	b998 <__umoddi3>
    2d74:	10800c04 	addi	r2,r2,48
    2d78:	843fffc4 	addi	r16,r16,-1
    2d7c:	9809883a 	mov	r4,r19
    2d80:	880b883a 	mov	r5,r17
    2d84:	80800005 	stb	r2,0(r16)
    2d88:	01800284 	movi	r6,10
    2d8c:	000f883a 	mov	r7,zero
    2d90:	000b4200 	call	b420 <__udivdi3>
    2d94:	1027883a 	mov	r19,r2
    2d98:	10c4b03a 	or	r2,r2,r3
    2d9c:	1823883a 	mov	r17,r3
    2da0:	103fef1e 	bne	r2,zero,2d60 <__alt_data_end+0xff002d60>
    2da4:	d8c02817 	ldw	r3,160(sp)
    2da8:	dc402a17 	ldw	r17,168(sp)
    2dac:	b011883a 	mov	r8,r22
    2db0:	1c07c83a 	sub	r3,r3,r16
    2db4:	d8c02e15 	stw	r3,184(sp)
    2db8:	00005906 	br	2f20 <___vfprintf_internal_r+0x71c>
    2dbc:	18c03fcc 	andi	r3,r3,255
    2dc0:	1806fa1e 	bne	r3,zero,49ac <___vfprintf_internal_r+0x21a8>
    2dc4:	9080020c 	andi	r2,r18,8
    2dc8:	10048a26 	beq	r2,zero,3ff4 <___vfprintf_internal_r+0x17f0>
    2dcc:	d8c02d17 	ldw	r3,180(sp)
    2dd0:	d9002d17 	ldw	r4,180(sp)
    2dd4:	d9402d17 	ldw	r5,180(sp)
    2dd8:	18c00017 	ldw	r3,0(r3)
    2ddc:	21000117 	ldw	r4,4(r4)
    2de0:	29400204 	addi	r5,r5,8
    2de4:	d8c03615 	stw	r3,216(sp)
    2de8:	d9003815 	stw	r4,224(sp)
    2dec:	d9402d15 	stw	r5,180(sp)
    2df0:	d9003617 	ldw	r4,216(sp)
    2df4:	d9403817 	ldw	r5,224(sp)
    2df8:	da003d15 	stw	r8,244(sp)
    2dfc:	04000044 	movi	r16,1
    2e00:	00092180 	call	9218 <__fpclassifyd>
    2e04:	da003d17 	ldw	r8,244(sp)
    2e08:	14041f1e 	bne	r2,r16,3e88 <___vfprintf_internal_r+0x1684>
    2e0c:	d9003617 	ldw	r4,216(sp)
    2e10:	d9403817 	ldw	r5,224(sp)
    2e14:	000d883a 	mov	r6,zero
    2e18:	000f883a 	mov	r7,zero
    2e1c:	000d1c80 	call	d1c8 <__ledf2>
    2e20:	da003d17 	ldw	r8,244(sp)
    2e24:	1005be16 	blt	r2,zero,4520 <___vfprintf_internal_r+0x1d1c>
    2e28:	df002783 	ldbu	fp,158(sp)
    2e2c:	008011c4 	movi	r2,71
    2e30:	1445330e 	bge	r2,r17,4300 <___vfprintf_internal_r+0x1afc>
    2e34:	04000074 	movhi	r16,1
    2e38:	84051404 	addi	r16,r16,5200
    2e3c:	00c000c4 	movi	r3,3
    2e40:	00bfdfc4 	movi	r2,-129
    2e44:	d8c02a15 	stw	r3,168(sp)
    2e48:	90a4703a 	and	r18,r18,r2
    2e4c:	d8c02e15 	stw	r3,184(sp)
    2e50:	d8002915 	stw	zero,164(sp)
    2e54:	d8003215 	stw	zero,200(sp)
    2e58:	00003706 	br	2f38 <___vfprintf_internal_r+0x734>
    2e5c:	94800214 	ori	r18,r18,8
    2e60:	ac400007 	ldb	r17,0(r21)
    2e64:	003ec806 	br	2988 <__alt_data_end+0xff002988>
    2e68:	18c03fcc 	andi	r3,r3,255
    2e6c:	1806db1e 	bne	r3,zero,49dc <___vfprintf_internal_r+0x21d8>
    2e70:	94800414 	ori	r18,r18,16
    2e74:	9080080c 	andi	r2,r18,32
    2e78:	1002d826 	beq	r2,zero,39dc <___vfprintf_internal_r+0x11d8>
    2e7c:	d9402d17 	ldw	r5,180(sp)
    2e80:	d8c02917 	ldw	r3,164(sp)
    2e84:	d8002785 	stb	zero,158(sp)
    2e88:	28800204 	addi	r2,r5,8
    2e8c:	2cc00017 	ldw	r19,0(r5)
    2e90:	2d800117 	ldw	r22,4(r5)
    2e94:	18048f16 	blt	r3,zero,40d4 <___vfprintf_internal_r+0x18d0>
    2e98:	013fdfc4 	movi	r4,-129
    2e9c:	9d86b03a 	or	r3,r19,r22
    2ea0:	d8802d15 	stw	r2,180(sp)
    2ea4:	9124703a 	and	r18,r18,r4
    2ea8:	1802d91e 	bne	r3,zero,3a10 <___vfprintf_internal_r+0x120c>
    2eac:	d8c02917 	ldw	r3,164(sp)
    2eb0:	0039883a 	mov	fp,zero
    2eb4:	1805c326 	beq	r3,zero,45c4 <___vfprintf_internal_r+0x1dc0>
    2eb8:	0027883a 	mov	r19,zero
    2ebc:	002d883a 	mov	r22,zero
    2ec0:	dc001e04 	addi	r16,sp,120
    2ec4:	9806d0fa 	srli	r3,r19,3
    2ec8:	b008977a 	slli	r4,r22,29
    2ecc:	b02cd0fa 	srli	r22,r22,3
    2ed0:	9cc001cc 	andi	r19,r19,7
    2ed4:	98800c04 	addi	r2,r19,48
    2ed8:	843fffc4 	addi	r16,r16,-1
    2edc:	20e6b03a 	or	r19,r4,r3
    2ee0:	80800005 	stb	r2,0(r16)
    2ee4:	9d86b03a 	or	r3,r19,r22
    2ee8:	183ff61e 	bne	r3,zero,2ec4 <__alt_data_end+0xff002ec4>
    2eec:	90c0004c 	andi	r3,r18,1
    2ef0:	18013b26 	beq	r3,zero,33e0 <___vfprintf_internal_r+0xbdc>
    2ef4:	10803fcc 	andi	r2,r2,255
    2ef8:	1080201c 	xori	r2,r2,128
    2efc:	10bfe004 	addi	r2,r2,-128
    2f00:	00c00c04 	movi	r3,48
    2f04:	10c13626 	beq	r2,r3,33e0 <___vfprintf_internal_r+0xbdc>
    2f08:	80ffffc5 	stb	r3,-1(r16)
    2f0c:	d8c02817 	ldw	r3,160(sp)
    2f10:	80bfffc4 	addi	r2,r16,-1
    2f14:	1021883a 	mov	r16,r2
    2f18:	1887c83a 	sub	r3,r3,r2
    2f1c:	d8c02e15 	stw	r3,184(sp)
    2f20:	d8802e17 	ldw	r2,184(sp)
    2f24:	d9002917 	ldw	r4,164(sp)
    2f28:	1100010e 	bge	r2,r4,2f30 <___vfprintf_internal_r+0x72c>
    2f2c:	2005883a 	mov	r2,r4
    2f30:	d8802a15 	stw	r2,168(sp)
    2f34:	d8003215 	stw	zero,200(sp)
    2f38:	e7003fcc 	andi	fp,fp,255
    2f3c:	e700201c 	xori	fp,fp,128
    2f40:	e73fe004 	addi	fp,fp,-128
    2f44:	e0000326 	beq	fp,zero,2f54 <___vfprintf_internal_r+0x750>
    2f48:	d8c02a17 	ldw	r3,168(sp)
    2f4c:	18c00044 	addi	r3,r3,1
    2f50:	d8c02a15 	stw	r3,168(sp)
    2f54:	90c0008c 	andi	r3,r18,2
    2f58:	d8c02b15 	stw	r3,172(sp)
    2f5c:	18000326 	beq	r3,zero,2f6c <___vfprintf_internal_r+0x768>
    2f60:	d8c02a17 	ldw	r3,168(sp)
    2f64:	18c00084 	addi	r3,r3,2
    2f68:	d8c02a15 	stw	r3,168(sp)
    2f6c:	90c0210c 	andi	r3,r18,132
    2f70:	d8c03015 	stw	r3,192(sp)
    2f74:	1801a31e 	bne	r3,zero,3604 <___vfprintf_internal_r+0xe00>
    2f78:	d9003117 	ldw	r4,196(sp)
    2f7c:	d8c02a17 	ldw	r3,168(sp)
    2f80:	20e7c83a 	sub	r19,r4,r3
    2f84:	04c19f0e 	bge	zero,r19,3604 <___vfprintf_internal_r+0xe00>
    2f88:	02400404 	movi	r9,16
    2f8c:	d8c02017 	ldw	r3,128(sp)
    2f90:	d8801f17 	ldw	r2,124(sp)
    2f94:	4cc50d0e 	bge	r9,r19,43cc <___vfprintf_internal_r+0x1bc8>
    2f98:	01400074 	movhi	r5,1
    2f9c:	29452784 	addi	r5,r5,5278
    2fa0:	dc403b15 	stw	r17,236(sp)
    2fa4:	d9403515 	stw	r5,212(sp)
    2fa8:	9823883a 	mov	r17,r19
    2fac:	482d883a 	mov	r22,r9
    2fb0:	9027883a 	mov	r19,r18
    2fb4:	070001c4 	movi	fp,7
    2fb8:	8025883a 	mov	r18,r16
    2fbc:	dc002c17 	ldw	r16,176(sp)
    2fc0:	00000306 	br	2fd0 <___vfprintf_internal_r+0x7cc>
    2fc4:	8c7ffc04 	addi	r17,r17,-16
    2fc8:	42000204 	addi	r8,r8,8
    2fcc:	b440130e 	bge	r22,r17,301c <___vfprintf_internal_r+0x818>
    2fd0:	01000074 	movhi	r4,1
    2fd4:	18c00404 	addi	r3,r3,16
    2fd8:	10800044 	addi	r2,r2,1
    2fdc:	21052784 	addi	r4,r4,5278
    2fe0:	41000015 	stw	r4,0(r8)
    2fe4:	45800115 	stw	r22,4(r8)
    2fe8:	d8c02015 	stw	r3,128(sp)
    2fec:	d8801f15 	stw	r2,124(sp)
    2ff0:	e0bff40e 	bge	fp,r2,2fc4 <__alt_data_end+0xff002fc4>
    2ff4:	d9801e04 	addi	r6,sp,120
    2ff8:	b80b883a 	mov	r5,r23
    2ffc:	8009883a 	mov	r4,r16
    3000:	00095a00 	call	95a0 <__sprint_r>
    3004:	103f011e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    3008:	8c7ffc04 	addi	r17,r17,-16
    300c:	d8c02017 	ldw	r3,128(sp)
    3010:	d8801f17 	ldw	r2,124(sp)
    3014:	da000404 	addi	r8,sp,16
    3018:	b47fed16 	blt	r22,r17,2fd0 <__alt_data_end+0xff002fd0>
    301c:	9021883a 	mov	r16,r18
    3020:	9825883a 	mov	r18,r19
    3024:	8827883a 	mov	r19,r17
    3028:	dc403b17 	ldw	r17,236(sp)
    302c:	d9403517 	ldw	r5,212(sp)
    3030:	98c7883a 	add	r3,r19,r3
    3034:	10800044 	addi	r2,r2,1
    3038:	41400015 	stw	r5,0(r8)
    303c:	44c00115 	stw	r19,4(r8)
    3040:	d8c02015 	stw	r3,128(sp)
    3044:	d8801f15 	stw	r2,124(sp)
    3048:	010001c4 	movi	r4,7
    304c:	2082a316 	blt	r4,r2,3adc <___vfprintf_internal_r+0x12d8>
    3050:	df002787 	ldb	fp,158(sp)
    3054:	42000204 	addi	r8,r8,8
    3058:	e0000c26 	beq	fp,zero,308c <___vfprintf_internal_r+0x888>
    305c:	d8801f17 	ldw	r2,124(sp)
    3060:	d9002784 	addi	r4,sp,158
    3064:	18c00044 	addi	r3,r3,1
    3068:	10800044 	addi	r2,r2,1
    306c:	41000015 	stw	r4,0(r8)
    3070:	01000044 	movi	r4,1
    3074:	41000115 	stw	r4,4(r8)
    3078:	d8c02015 	stw	r3,128(sp)
    307c:	d8801f15 	stw	r2,124(sp)
    3080:	010001c4 	movi	r4,7
    3084:	20823c16 	blt	r4,r2,3978 <___vfprintf_internal_r+0x1174>
    3088:	42000204 	addi	r8,r8,8
    308c:	d8802b17 	ldw	r2,172(sp)
    3090:	10000c26 	beq	r2,zero,30c4 <___vfprintf_internal_r+0x8c0>
    3094:	d8801f17 	ldw	r2,124(sp)
    3098:	d9002704 	addi	r4,sp,156
    309c:	18c00084 	addi	r3,r3,2
    30a0:	10800044 	addi	r2,r2,1
    30a4:	41000015 	stw	r4,0(r8)
    30a8:	01000084 	movi	r4,2
    30ac:	41000115 	stw	r4,4(r8)
    30b0:	d8c02015 	stw	r3,128(sp)
    30b4:	d8801f15 	stw	r2,124(sp)
    30b8:	010001c4 	movi	r4,7
    30bc:	20823616 	blt	r4,r2,3998 <___vfprintf_internal_r+0x1194>
    30c0:	42000204 	addi	r8,r8,8
    30c4:	d9003017 	ldw	r4,192(sp)
    30c8:	00802004 	movi	r2,128
    30cc:	20819926 	beq	r4,r2,3734 <___vfprintf_internal_r+0xf30>
    30d0:	d9402917 	ldw	r5,164(sp)
    30d4:	d8802e17 	ldw	r2,184(sp)
    30d8:	28adc83a 	sub	r22,r5,r2
    30dc:	0580310e 	bge	zero,r22,31a4 <___vfprintf_internal_r+0x9a0>
    30e0:	07000404 	movi	fp,16
    30e4:	d8801f17 	ldw	r2,124(sp)
    30e8:	e584140e 	bge	fp,r22,413c <___vfprintf_internal_r+0x1938>
    30ec:	01400074 	movhi	r5,1
    30f0:	29452384 	addi	r5,r5,5262
    30f4:	dc402915 	stw	r17,164(sp)
    30f8:	d9402b15 	stw	r5,172(sp)
    30fc:	b023883a 	mov	r17,r22
    3100:	04c001c4 	movi	r19,7
    3104:	a82d883a 	mov	r22,r21
    3108:	902b883a 	mov	r21,r18
    310c:	8025883a 	mov	r18,r16
    3110:	dc002c17 	ldw	r16,176(sp)
    3114:	00000306 	br	3124 <___vfprintf_internal_r+0x920>
    3118:	8c7ffc04 	addi	r17,r17,-16
    311c:	42000204 	addi	r8,r8,8
    3120:	e440110e 	bge	fp,r17,3168 <___vfprintf_internal_r+0x964>
    3124:	18c00404 	addi	r3,r3,16
    3128:	10800044 	addi	r2,r2,1
    312c:	45000015 	stw	r20,0(r8)
    3130:	47000115 	stw	fp,4(r8)
    3134:	d8c02015 	stw	r3,128(sp)
    3138:	d8801f15 	stw	r2,124(sp)
    313c:	98bff60e 	bge	r19,r2,3118 <__alt_data_end+0xff003118>
    3140:	d9801e04 	addi	r6,sp,120
    3144:	b80b883a 	mov	r5,r23
    3148:	8009883a 	mov	r4,r16
    314c:	00095a00 	call	95a0 <__sprint_r>
    3150:	103eae1e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    3154:	8c7ffc04 	addi	r17,r17,-16
    3158:	d8c02017 	ldw	r3,128(sp)
    315c:	d8801f17 	ldw	r2,124(sp)
    3160:	da000404 	addi	r8,sp,16
    3164:	e47fef16 	blt	fp,r17,3124 <__alt_data_end+0xff003124>
    3168:	9021883a 	mov	r16,r18
    316c:	a825883a 	mov	r18,r21
    3170:	b02b883a 	mov	r21,r22
    3174:	882d883a 	mov	r22,r17
    3178:	dc402917 	ldw	r17,164(sp)
    317c:	d9002b17 	ldw	r4,172(sp)
    3180:	1d87883a 	add	r3,r3,r22
    3184:	10800044 	addi	r2,r2,1
    3188:	41000015 	stw	r4,0(r8)
    318c:	45800115 	stw	r22,4(r8)
    3190:	d8c02015 	stw	r3,128(sp)
    3194:	d8801f15 	stw	r2,124(sp)
    3198:	010001c4 	movi	r4,7
    319c:	2081ee16 	blt	r4,r2,3958 <___vfprintf_internal_r+0x1154>
    31a0:	42000204 	addi	r8,r8,8
    31a4:	9080400c 	andi	r2,r18,256
    31a8:	1001181e 	bne	r2,zero,360c <___vfprintf_internal_r+0xe08>
    31ac:	d9402e17 	ldw	r5,184(sp)
    31b0:	d8801f17 	ldw	r2,124(sp)
    31b4:	44000015 	stw	r16,0(r8)
    31b8:	1947883a 	add	r3,r3,r5
    31bc:	10800044 	addi	r2,r2,1
    31c0:	41400115 	stw	r5,4(r8)
    31c4:	d8c02015 	stw	r3,128(sp)
    31c8:	d8801f15 	stw	r2,124(sp)
    31cc:	010001c4 	movi	r4,7
    31d0:	2081d316 	blt	r4,r2,3920 <___vfprintf_internal_r+0x111c>
    31d4:	42000204 	addi	r8,r8,8
    31d8:	9480010c 	andi	r18,r18,4
    31dc:	90003226 	beq	r18,zero,32a8 <___vfprintf_internal_r+0xaa4>
    31e0:	d9403117 	ldw	r5,196(sp)
    31e4:	d8802a17 	ldw	r2,168(sp)
    31e8:	28a1c83a 	sub	r16,r5,r2
    31ec:	04002e0e 	bge	zero,r16,32a8 <___vfprintf_internal_r+0xaa4>
    31f0:	04400404 	movi	r17,16
    31f4:	d8801f17 	ldw	r2,124(sp)
    31f8:	8c04a20e 	bge	r17,r16,4484 <___vfprintf_internal_r+0x1c80>
    31fc:	01400074 	movhi	r5,1
    3200:	29452784 	addi	r5,r5,5278
    3204:	d9403515 	stw	r5,212(sp)
    3208:	048001c4 	movi	r18,7
    320c:	dcc02c17 	ldw	r19,176(sp)
    3210:	00000306 	br	3220 <___vfprintf_internal_r+0xa1c>
    3214:	843ffc04 	addi	r16,r16,-16
    3218:	42000204 	addi	r8,r8,8
    321c:	8c00130e 	bge	r17,r16,326c <___vfprintf_internal_r+0xa68>
    3220:	01000074 	movhi	r4,1
    3224:	18c00404 	addi	r3,r3,16
    3228:	10800044 	addi	r2,r2,1
    322c:	21052784 	addi	r4,r4,5278
    3230:	41000015 	stw	r4,0(r8)
    3234:	44400115 	stw	r17,4(r8)
    3238:	d8c02015 	stw	r3,128(sp)
    323c:	d8801f15 	stw	r2,124(sp)
    3240:	90bff40e 	bge	r18,r2,3214 <__alt_data_end+0xff003214>
    3244:	d9801e04 	addi	r6,sp,120
    3248:	b80b883a 	mov	r5,r23
    324c:	9809883a 	mov	r4,r19
    3250:	00095a00 	call	95a0 <__sprint_r>
    3254:	103e6d1e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    3258:	843ffc04 	addi	r16,r16,-16
    325c:	d8c02017 	ldw	r3,128(sp)
    3260:	d8801f17 	ldw	r2,124(sp)
    3264:	da000404 	addi	r8,sp,16
    3268:	8c3fed16 	blt	r17,r16,3220 <__alt_data_end+0xff003220>
    326c:	d9403517 	ldw	r5,212(sp)
    3270:	1c07883a 	add	r3,r3,r16
    3274:	10800044 	addi	r2,r2,1
    3278:	41400015 	stw	r5,0(r8)
    327c:	44000115 	stw	r16,4(r8)
    3280:	d8c02015 	stw	r3,128(sp)
    3284:	d8801f15 	stw	r2,124(sp)
    3288:	010001c4 	movi	r4,7
    328c:	2080060e 	bge	r4,r2,32a8 <___vfprintf_internal_r+0xaa4>
    3290:	d9002c17 	ldw	r4,176(sp)
    3294:	d9801e04 	addi	r6,sp,120
    3298:	b80b883a 	mov	r5,r23
    329c:	00095a00 	call	95a0 <__sprint_r>
    32a0:	103e5a1e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    32a4:	d8c02017 	ldw	r3,128(sp)
    32a8:	d8803117 	ldw	r2,196(sp)
    32ac:	d9002a17 	ldw	r4,168(sp)
    32b0:	1100010e 	bge	r2,r4,32b8 <___vfprintf_internal_r+0xab4>
    32b4:	2005883a 	mov	r2,r4
    32b8:	d9402f17 	ldw	r5,188(sp)
    32bc:	288b883a 	add	r5,r5,r2
    32c0:	d9402f15 	stw	r5,188(sp)
    32c4:	18019e1e 	bne	r3,zero,3940 <___vfprintf_internal_r+0x113c>
    32c8:	a8800007 	ldb	r2,0(r21)
    32cc:	d8001f15 	stw	zero,124(sp)
    32d0:	da000404 	addi	r8,sp,16
    32d4:	103d851e 	bne	r2,zero,28ec <__alt_data_end+0xff0028ec>
    32d8:	a821883a 	mov	r16,r21
    32dc:	003d9b06 	br	294c <__alt_data_end+0xff00294c>
    32e0:	18c03fcc 	andi	r3,r3,255
    32e4:	1805c11e 	bne	r3,zero,49ec <___vfprintf_internal_r+0x21e8>
    32e8:	94800414 	ori	r18,r18,16
    32ec:	9080080c 	andi	r2,r18,32
    32f0:	10020c26 	beq	r2,zero,3b24 <___vfprintf_internal_r+0x1320>
    32f4:	d8802d17 	ldw	r2,180(sp)
    32f8:	d9002917 	ldw	r4,164(sp)
    32fc:	d8002785 	stb	zero,158(sp)
    3300:	10c00204 	addi	r3,r2,8
    3304:	14c00017 	ldw	r19,0(r2)
    3308:	15800117 	ldw	r22,4(r2)
    330c:	20040f16 	blt	r4,zero,434c <___vfprintf_internal_r+0x1b48>
    3310:	013fdfc4 	movi	r4,-129
    3314:	9d84b03a 	or	r2,r19,r22
    3318:	d8c02d15 	stw	r3,180(sp)
    331c:	9124703a 	and	r18,r18,r4
    3320:	0039883a 	mov	fp,zero
    3324:	103e891e 	bne	r2,zero,2d4c <__alt_data_end+0xff002d4c>
    3328:	d9002917 	ldw	r4,164(sp)
    332c:	2002c11e 	bne	r4,zero,3e34 <___vfprintf_internal_r+0x1630>
    3330:	d8002915 	stw	zero,164(sp)
    3334:	d8002e15 	stw	zero,184(sp)
    3338:	dc001e04 	addi	r16,sp,120
    333c:	003ef806 	br	2f20 <__alt_data_end+0xff002f20>
    3340:	18c03fcc 	andi	r3,r3,255
    3344:	18059d1e 	bne	r3,zero,49bc <___vfprintf_internal_r+0x21b8>
    3348:	01400074 	movhi	r5,1
    334c:	29451704 	addi	r5,r5,5212
    3350:	d9403915 	stw	r5,228(sp)
    3354:	9080080c 	andi	r2,r18,32
    3358:	10005226 	beq	r2,zero,34a4 <___vfprintf_internal_r+0xca0>
    335c:	d8802d17 	ldw	r2,180(sp)
    3360:	14c00017 	ldw	r19,0(r2)
    3364:	15800117 	ldw	r22,4(r2)
    3368:	10800204 	addi	r2,r2,8
    336c:	d8802d15 	stw	r2,180(sp)
    3370:	9080004c 	andi	r2,r18,1
    3374:	10019026 	beq	r2,zero,39b8 <___vfprintf_internal_r+0x11b4>
    3378:	9d84b03a 	or	r2,r19,r22
    337c:	10036926 	beq	r2,zero,4124 <___vfprintf_internal_r+0x1920>
    3380:	d8c02917 	ldw	r3,164(sp)
    3384:	00800c04 	movi	r2,48
    3388:	d8802705 	stb	r2,156(sp)
    338c:	dc402745 	stb	r17,157(sp)
    3390:	d8002785 	stb	zero,158(sp)
    3394:	90800094 	ori	r2,r18,2
    3398:	18045d16 	blt	r3,zero,4510 <___vfprintf_internal_r+0x1d0c>
    339c:	00bfdfc4 	movi	r2,-129
    33a0:	90a4703a 	and	r18,r18,r2
    33a4:	94800094 	ori	r18,r18,2
    33a8:	0039883a 	mov	fp,zero
    33ac:	d9003917 	ldw	r4,228(sp)
    33b0:	dc001e04 	addi	r16,sp,120
    33b4:	988003cc 	andi	r2,r19,15
    33b8:	b006973a 	slli	r3,r22,28
    33bc:	2085883a 	add	r2,r4,r2
    33c0:	9826d13a 	srli	r19,r19,4
    33c4:	10800003 	ldbu	r2,0(r2)
    33c8:	b02cd13a 	srli	r22,r22,4
    33cc:	843fffc4 	addi	r16,r16,-1
    33d0:	1ce6b03a 	or	r19,r3,r19
    33d4:	80800005 	stb	r2,0(r16)
    33d8:	9d84b03a 	or	r2,r19,r22
    33dc:	103ff51e 	bne	r2,zero,33b4 <__alt_data_end+0xff0033b4>
    33e0:	d8c02817 	ldw	r3,160(sp)
    33e4:	1c07c83a 	sub	r3,r3,r16
    33e8:	d8c02e15 	stw	r3,184(sp)
    33ec:	003ecc06 	br	2f20 <__alt_data_end+0xff002f20>
    33f0:	18c03fcc 	andi	r3,r3,255
    33f4:	183e9f26 	beq	r3,zero,2e74 <__alt_data_end+0xff002e74>
    33f8:	d9c02785 	stb	r7,158(sp)
    33fc:	003e9d06 	br	2e74 <__alt_data_end+0xff002e74>
    3400:	00c00044 	movi	r3,1
    3404:	01c00ac4 	movi	r7,43
    3408:	ac400007 	ldb	r17,0(r21)
    340c:	003d5e06 	br	2988 <__alt_data_end+0xff002988>
    3410:	94800814 	ori	r18,r18,32
    3414:	ac400007 	ldb	r17,0(r21)
    3418:	003d5b06 	br	2988 <__alt_data_end+0xff002988>
    341c:	d8c02d17 	ldw	r3,180(sp)
    3420:	d8002785 	stb	zero,158(sp)
    3424:	1c000017 	ldw	r16,0(r3)
    3428:	1cc00104 	addi	r19,r3,4
    342c:	80041926 	beq	r16,zero,4494 <___vfprintf_internal_r+0x1c90>
    3430:	d9002917 	ldw	r4,164(sp)
    3434:	2003d016 	blt	r4,zero,4378 <___vfprintf_internal_r+0x1b74>
    3438:	200d883a 	mov	r6,r4
    343c:	000b883a 	mov	r5,zero
    3440:	8009883a 	mov	r4,r16
    3444:	da003d15 	stw	r8,244(sp)
    3448:	00078080 	call	7808 <memchr>
    344c:	da003d17 	ldw	r8,244(sp)
    3450:	10045426 	beq	r2,zero,45a4 <___vfprintf_internal_r+0x1da0>
    3454:	1405c83a 	sub	r2,r2,r16
    3458:	d8802e15 	stw	r2,184(sp)
    345c:	1003cc16 	blt	r2,zero,4390 <___vfprintf_internal_r+0x1b8c>
    3460:	df002783 	ldbu	fp,158(sp)
    3464:	d8802a15 	stw	r2,168(sp)
    3468:	dcc02d15 	stw	r19,180(sp)
    346c:	d8002915 	stw	zero,164(sp)
    3470:	d8003215 	stw	zero,200(sp)
    3474:	003eb006 	br	2f38 <__alt_data_end+0xff002f38>
    3478:	18c03fcc 	andi	r3,r3,255
    347c:	183f9b26 	beq	r3,zero,32ec <__alt_data_end+0xff0032ec>
    3480:	d9c02785 	stb	r7,158(sp)
    3484:	003f9906 	br	32ec <__alt_data_end+0xff0032ec>
    3488:	18c03fcc 	andi	r3,r3,255
    348c:	1805551e 	bne	r3,zero,49e4 <___vfprintf_internal_r+0x21e0>
    3490:	01400074 	movhi	r5,1
    3494:	29451c04 	addi	r5,r5,5232
    3498:	d9403915 	stw	r5,228(sp)
    349c:	9080080c 	andi	r2,r18,32
    34a0:	103fae1e 	bne	r2,zero,335c <__alt_data_end+0xff00335c>
    34a4:	9080040c 	andi	r2,r18,16
    34a8:	1002de26 	beq	r2,zero,4024 <___vfprintf_internal_r+0x1820>
    34ac:	d8c02d17 	ldw	r3,180(sp)
    34b0:	002d883a 	mov	r22,zero
    34b4:	1cc00017 	ldw	r19,0(r3)
    34b8:	18c00104 	addi	r3,r3,4
    34bc:	d8c02d15 	stw	r3,180(sp)
    34c0:	003fab06 	br	3370 <__alt_data_end+0xff003370>
    34c4:	38803fcc 	andi	r2,r7,255
    34c8:	1080201c 	xori	r2,r2,128
    34cc:	10bfe004 	addi	r2,r2,-128
    34d0:	1002d21e 	bne	r2,zero,401c <___vfprintf_internal_r+0x1818>
    34d4:	00c00044 	movi	r3,1
    34d8:	01c00804 	movi	r7,32
    34dc:	ac400007 	ldb	r17,0(r21)
    34e0:	003d2906 	br	2988 <__alt_data_end+0xff002988>
    34e4:	94800054 	ori	r18,r18,1
    34e8:	ac400007 	ldb	r17,0(r21)
    34ec:	003d2606 	br	2988 <__alt_data_end+0xff002988>
    34f0:	18c03fcc 	andi	r3,r3,255
    34f4:	183e0526 	beq	r3,zero,2d0c <__alt_data_end+0xff002d0c>
    34f8:	d9c02785 	stb	r7,158(sp)
    34fc:	003e0306 	br	2d0c <__alt_data_end+0xff002d0c>
    3500:	94801014 	ori	r18,r18,64
    3504:	ac400007 	ldb	r17,0(r21)
    3508:	003d1f06 	br	2988 <__alt_data_end+0xff002988>
    350c:	ac400007 	ldb	r17,0(r21)
    3510:	8a438726 	beq	r17,r9,4330 <___vfprintf_internal_r+0x1b2c>
    3514:	94800414 	ori	r18,r18,16
    3518:	003d1b06 	br	2988 <__alt_data_end+0xff002988>
    351c:	18c03fcc 	andi	r3,r3,255
    3520:	1805341e 	bne	r3,zero,49f4 <___vfprintf_internal_r+0x21f0>
    3524:	9080080c 	andi	r2,r18,32
    3528:	1002cd26 	beq	r2,zero,4060 <___vfprintf_internal_r+0x185c>
    352c:	d9402d17 	ldw	r5,180(sp)
    3530:	d9002f17 	ldw	r4,188(sp)
    3534:	28800017 	ldw	r2,0(r5)
    3538:	2007d7fa 	srai	r3,r4,31
    353c:	29400104 	addi	r5,r5,4
    3540:	d9402d15 	stw	r5,180(sp)
    3544:	11000015 	stw	r4,0(r2)
    3548:	10c00115 	stw	r3,4(r2)
    354c:	003ce506 	br	28e4 <__alt_data_end+0xff0028e4>
    3550:	d8c02d17 	ldw	r3,180(sp)
    3554:	d9002d17 	ldw	r4,180(sp)
    3558:	d8002785 	stb	zero,158(sp)
    355c:	18800017 	ldw	r2,0(r3)
    3560:	21000104 	addi	r4,r4,4
    3564:	00c00044 	movi	r3,1
    3568:	d8c02a15 	stw	r3,168(sp)
    356c:	d8801405 	stb	r2,80(sp)
    3570:	d9002d15 	stw	r4,180(sp)
    3574:	d8c02e15 	stw	r3,184(sp)
    3578:	d8002915 	stw	zero,164(sp)
    357c:	d8003215 	stw	zero,200(sp)
    3580:	dc001404 	addi	r16,sp,80
    3584:	0039883a 	mov	fp,zero
    3588:	003e7206 	br	2f54 <__alt_data_end+0xff002f54>
    358c:	01000074 	movhi	r4,1
    3590:	21051c04 	addi	r4,r4,5232
    3594:	0039883a 	mov	fp,zero
    3598:	d9003915 	stw	r4,228(sp)
    359c:	04401e04 	movi	r17,120
    35a0:	003f8206 	br	33ac <__alt_data_end+0xff0033ac>
    35a4:	18c03fcc 	andi	r3,r3,255
    35a8:	1805061e 	bne	r3,zero,49c4 <___vfprintf_internal_r+0x21c0>
    35ac:	883d9126 	beq	r17,zero,2bf4 <__alt_data_end+0xff002bf4>
    35b0:	00c00044 	movi	r3,1
    35b4:	d8c02a15 	stw	r3,168(sp)
    35b8:	dc401405 	stb	r17,80(sp)
    35bc:	d8002785 	stb	zero,158(sp)
    35c0:	003fec06 	br	3574 <__alt_data_end+0xff003574>
    35c4:	01400074 	movhi	r5,1
    35c8:	29451c04 	addi	r5,r5,5232
    35cc:	d9403915 	stw	r5,228(sp)
    35d0:	d8c02d15 	stw	r3,180(sp)
    35d4:	1025883a 	mov	r18,r2
    35d8:	04401e04 	movi	r17,120
    35dc:	9d84b03a 	or	r2,r19,r22
    35e0:	1000fc1e 	bne	r2,zero,39d4 <___vfprintf_internal_r+0x11d0>
    35e4:	0039883a 	mov	fp,zero
    35e8:	00800084 	movi	r2,2
    35ec:	10803fcc 	andi	r2,r2,255
    35f0:	00c00044 	movi	r3,1
    35f4:	10c20f26 	beq	r2,r3,3e34 <___vfprintf_internal_r+0x1630>
    35f8:	00c00084 	movi	r3,2
    35fc:	10fd6326 	beq	r2,r3,2b8c <__alt_data_end+0xff002b8c>
    3600:	003e2d06 	br	2eb8 <__alt_data_end+0xff002eb8>
    3604:	d8c02017 	ldw	r3,128(sp)
    3608:	003e9306 	br	3058 <__alt_data_end+0xff003058>
    360c:	00801944 	movi	r2,101
    3610:	14407e0e 	bge	r2,r17,380c <___vfprintf_internal_r+0x1008>
    3614:	d9003617 	ldw	r4,216(sp)
    3618:	d9403817 	ldw	r5,224(sp)
    361c:	000d883a 	mov	r6,zero
    3620:	000f883a 	mov	r7,zero
    3624:	d8c03c15 	stw	r3,240(sp)
    3628:	da003d15 	stw	r8,244(sp)
    362c:	000d0640 	call	d064 <__eqdf2>
    3630:	d8c03c17 	ldw	r3,240(sp)
    3634:	da003d17 	ldw	r8,244(sp)
    3638:	1000f71e 	bne	r2,zero,3a18 <___vfprintf_internal_r+0x1214>
    363c:	d8801f17 	ldw	r2,124(sp)
    3640:	01000074 	movhi	r4,1
    3644:	21052304 	addi	r4,r4,5260
    3648:	18c00044 	addi	r3,r3,1
    364c:	10800044 	addi	r2,r2,1
    3650:	41000015 	stw	r4,0(r8)
    3654:	01000044 	movi	r4,1
    3658:	41000115 	stw	r4,4(r8)
    365c:	d8c02015 	stw	r3,128(sp)
    3660:	d8801f15 	stw	r2,124(sp)
    3664:	010001c4 	movi	r4,7
    3668:	2082b816 	blt	r4,r2,414c <___vfprintf_internal_r+0x1948>
    366c:	42000204 	addi	r8,r8,8
    3670:	d8802617 	ldw	r2,152(sp)
    3674:	d9403317 	ldw	r5,204(sp)
    3678:	11400216 	blt	r2,r5,3684 <___vfprintf_internal_r+0xe80>
    367c:	9080004c 	andi	r2,r18,1
    3680:	103ed526 	beq	r2,zero,31d8 <__alt_data_end+0xff0031d8>
    3684:	d8803717 	ldw	r2,220(sp)
    3688:	d9003417 	ldw	r4,208(sp)
    368c:	d9403717 	ldw	r5,220(sp)
    3690:	1887883a 	add	r3,r3,r2
    3694:	d8801f17 	ldw	r2,124(sp)
    3698:	41000015 	stw	r4,0(r8)
    369c:	41400115 	stw	r5,4(r8)
    36a0:	10800044 	addi	r2,r2,1
    36a4:	d8c02015 	stw	r3,128(sp)
    36a8:	d8801f15 	stw	r2,124(sp)
    36ac:	010001c4 	movi	r4,7
    36b0:	20832916 	blt	r4,r2,4358 <___vfprintf_internal_r+0x1b54>
    36b4:	42000204 	addi	r8,r8,8
    36b8:	d8803317 	ldw	r2,204(sp)
    36bc:	143fffc4 	addi	r16,r2,-1
    36c0:	043ec50e 	bge	zero,r16,31d8 <__alt_data_end+0xff0031d8>
    36c4:	04400404 	movi	r17,16
    36c8:	d8801f17 	ldw	r2,124(sp)
    36cc:	8c00880e 	bge	r17,r16,38f0 <___vfprintf_internal_r+0x10ec>
    36d0:	01400074 	movhi	r5,1
    36d4:	29452384 	addi	r5,r5,5262
    36d8:	d9402b15 	stw	r5,172(sp)
    36dc:	058001c4 	movi	r22,7
    36e0:	dcc02c17 	ldw	r19,176(sp)
    36e4:	00000306 	br	36f4 <___vfprintf_internal_r+0xef0>
    36e8:	42000204 	addi	r8,r8,8
    36ec:	843ffc04 	addi	r16,r16,-16
    36f0:	8c00820e 	bge	r17,r16,38fc <___vfprintf_internal_r+0x10f8>
    36f4:	18c00404 	addi	r3,r3,16
    36f8:	10800044 	addi	r2,r2,1
    36fc:	45000015 	stw	r20,0(r8)
    3700:	44400115 	stw	r17,4(r8)
    3704:	d8c02015 	stw	r3,128(sp)
    3708:	d8801f15 	stw	r2,124(sp)
    370c:	b0bff60e 	bge	r22,r2,36e8 <__alt_data_end+0xff0036e8>
    3710:	d9801e04 	addi	r6,sp,120
    3714:	b80b883a 	mov	r5,r23
    3718:	9809883a 	mov	r4,r19
    371c:	00095a00 	call	95a0 <__sprint_r>
    3720:	103d3a1e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    3724:	d8c02017 	ldw	r3,128(sp)
    3728:	d8801f17 	ldw	r2,124(sp)
    372c:	da000404 	addi	r8,sp,16
    3730:	003fee06 	br	36ec <__alt_data_end+0xff0036ec>
    3734:	d9403117 	ldw	r5,196(sp)
    3738:	d8802a17 	ldw	r2,168(sp)
    373c:	28adc83a 	sub	r22,r5,r2
    3740:	05be630e 	bge	zero,r22,30d0 <__alt_data_end+0xff0030d0>
    3744:	07000404 	movi	fp,16
    3748:	d8801f17 	ldw	r2,124(sp)
    374c:	e5838f0e 	bge	fp,r22,458c <___vfprintf_internal_r+0x1d88>
    3750:	01400074 	movhi	r5,1
    3754:	29452384 	addi	r5,r5,5262
    3758:	dc403015 	stw	r17,192(sp)
    375c:	d9402b15 	stw	r5,172(sp)
    3760:	b023883a 	mov	r17,r22
    3764:	04c001c4 	movi	r19,7
    3768:	a82d883a 	mov	r22,r21
    376c:	902b883a 	mov	r21,r18
    3770:	8025883a 	mov	r18,r16
    3774:	dc002c17 	ldw	r16,176(sp)
    3778:	00000306 	br	3788 <___vfprintf_internal_r+0xf84>
    377c:	8c7ffc04 	addi	r17,r17,-16
    3780:	42000204 	addi	r8,r8,8
    3784:	e440110e 	bge	fp,r17,37cc <___vfprintf_internal_r+0xfc8>
    3788:	18c00404 	addi	r3,r3,16
    378c:	10800044 	addi	r2,r2,1
    3790:	45000015 	stw	r20,0(r8)
    3794:	47000115 	stw	fp,4(r8)
    3798:	d8c02015 	stw	r3,128(sp)
    379c:	d8801f15 	stw	r2,124(sp)
    37a0:	98bff60e 	bge	r19,r2,377c <__alt_data_end+0xff00377c>
    37a4:	d9801e04 	addi	r6,sp,120
    37a8:	b80b883a 	mov	r5,r23
    37ac:	8009883a 	mov	r4,r16
    37b0:	00095a00 	call	95a0 <__sprint_r>
    37b4:	103d151e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    37b8:	8c7ffc04 	addi	r17,r17,-16
    37bc:	d8c02017 	ldw	r3,128(sp)
    37c0:	d8801f17 	ldw	r2,124(sp)
    37c4:	da000404 	addi	r8,sp,16
    37c8:	e47fef16 	blt	fp,r17,3788 <__alt_data_end+0xff003788>
    37cc:	9021883a 	mov	r16,r18
    37d0:	a825883a 	mov	r18,r21
    37d4:	b02b883a 	mov	r21,r22
    37d8:	882d883a 	mov	r22,r17
    37dc:	dc403017 	ldw	r17,192(sp)
    37e0:	d9002b17 	ldw	r4,172(sp)
    37e4:	1d87883a 	add	r3,r3,r22
    37e8:	10800044 	addi	r2,r2,1
    37ec:	41000015 	stw	r4,0(r8)
    37f0:	45800115 	stw	r22,4(r8)
    37f4:	d8c02015 	stw	r3,128(sp)
    37f8:	d8801f15 	stw	r2,124(sp)
    37fc:	010001c4 	movi	r4,7
    3800:	20818e16 	blt	r4,r2,3e3c <___vfprintf_internal_r+0x1638>
    3804:	42000204 	addi	r8,r8,8
    3808:	003e3106 	br	30d0 <__alt_data_end+0xff0030d0>
    380c:	d9403317 	ldw	r5,204(sp)
    3810:	00800044 	movi	r2,1
    3814:	18c00044 	addi	r3,r3,1
    3818:	1141530e 	bge	r2,r5,3d68 <___vfprintf_internal_r+0x1564>
    381c:	dc401f17 	ldw	r17,124(sp)
    3820:	00800044 	movi	r2,1
    3824:	40800115 	stw	r2,4(r8)
    3828:	8c400044 	addi	r17,r17,1
    382c:	44000015 	stw	r16,0(r8)
    3830:	d8c02015 	stw	r3,128(sp)
    3834:	dc401f15 	stw	r17,124(sp)
    3838:	008001c4 	movi	r2,7
    383c:	14416b16 	blt	r2,r17,3dec <___vfprintf_internal_r+0x15e8>
    3840:	42000204 	addi	r8,r8,8
    3844:	d8803717 	ldw	r2,220(sp)
    3848:	d9003417 	ldw	r4,208(sp)
    384c:	8c400044 	addi	r17,r17,1
    3850:	10c7883a 	add	r3,r2,r3
    3854:	40800115 	stw	r2,4(r8)
    3858:	41000015 	stw	r4,0(r8)
    385c:	d8c02015 	stw	r3,128(sp)
    3860:	dc401f15 	stw	r17,124(sp)
    3864:	008001c4 	movi	r2,7
    3868:	14416916 	blt	r2,r17,3e10 <___vfprintf_internal_r+0x160c>
    386c:	45800204 	addi	r22,r8,8
    3870:	d9003617 	ldw	r4,216(sp)
    3874:	d9403817 	ldw	r5,224(sp)
    3878:	000d883a 	mov	r6,zero
    387c:	000f883a 	mov	r7,zero
    3880:	d8c03c15 	stw	r3,240(sp)
    3884:	000d0640 	call	d064 <__eqdf2>
    3888:	d8c03c17 	ldw	r3,240(sp)
    388c:	1000bc26 	beq	r2,zero,3b80 <___vfprintf_internal_r+0x137c>
    3890:	d9403317 	ldw	r5,204(sp)
    3894:	84000044 	addi	r16,r16,1
    3898:	8c400044 	addi	r17,r17,1
    389c:	28bfffc4 	addi	r2,r5,-1
    38a0:	1887883a 	add	r3,r3,r2
    38a4:	b0800115 	stw	r2,4(r22)
    38a8:	b4000015 	stw	r16,0(r22)
    38ac:	d8c02015 	stw	r3,128(sp)
    38b0:	dc401f15 	stw	r17,124(sp)
    38b4:	008001c4 	movi	r2,7
    38b8:	14414316 	blt	r2,r17,3dc8 <___vfprintf_internal_r+0x15c4>
    38bc:	b5800204 	addi	r22,r22,8
    38c0:	d9003a17 	ldw	r4,232(sp)
    38c4:	df0022c4 	addi	fp,sp,139
    38c8:	8c400044 	addi	r17,r17,1
    38cc:	20c7883a 	add	r3,r4,r3
    38d0:	b7000015 	stw	fp,0(r22)
    38d4:	b1000115 	stw	r4,4(r22)
    38d8:	d8c02015 	stw	r3,128(sp)
    38dc:	dc401f15 	stw	r17,124(sp)
    38e0:	008001c4 	movi	r2,7
    38e4:	14400e16 	blt	r2,r17,3920 <___vfprintf_internal_r+0x111c>
    38e8:	b2000204 	addi	r8,r22,8
    38ec:	003e3a06 	br	31d8 <__alt_data_end+0xff0031d8>
    38f0:	01000074 	movhi	r4,1
    38f4:	21052384 	addi	r4,r4,5262
    38f8:	d9002b15 	stw	r4,172(sp)
    38fc:	d9002b17 	ldw	r4,172(sp)
    3900:	1c07883a 	add	r3,r3,r16
    3904:	44000115 	stw	r16,4(r8)
    3908:	41000015 	stw	r4,0(r8)
    390c:	10800044 	addi	r2,r2,1
    3910:	d8c02015 	stw	r3,128(sp)
    3914:	d8801f15 	stw	r2,124(sp)
    3918:	010001c4 	movi	r4,7
    391c:	20be2d0e 	bge	r4,r2,31d4 <__alt_data_end+0xff0031d4>
    3920:	d9002c17 	ldw	r4,176(sp)
    3924:	d9801e04 	addi	r6,sp,120
    3928:	b80b883a 	mov	r5,r23
    392c:	00095a00 	call	95a0 <__sprint_r>
    3930:	103cb61e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    3934:	d8c02017 	ldw	r3,128(sp)
    3938:	da000404 	addi	r8,sp,16
    393c:	003e2606 	br	31d8 <__alt_data_end+0xff0031d8>
    3940:	d9002c17 	ldw	r4,176(sp)
    3944:	d9801e04 	addi	r6,sp,120
    3948:	b80b883a 	mov	r5,r23
    394c:	00095a00 	call	95a0 <__sprint_r>
    3950:	103e5d26 	beq	r2,zero,32c8 <__alt_data_end+0xff0032c8>
    3954:	003cad06 	br	2c0c <__alt_data_end+0xff002c0c>
    3958:	d9002c17 	ldw	r4,176(sp)
    395c:	d9801e04 	addi	r6,sp,120
    3960:	b80b883a 	mov	r5,r23
    3964:	00095a00 	call	95a0 <__sprint_r>
    3968:	103ca81e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    396c:	d8c02017 	ldw	r3,128(sp)
    3970:	da000404 	addi	r8,sp,16
    3974:	003e0b06 	br	31a4 <__alt_data_end+0xff0031a4>
    3978:	d9002c17 	ldw	r4,176(sp)
    397c:	d9801e04 	addi	r6,sp,120
    3980:	b80b883a 	mov	r5,r23
    3984:	00095a00 	call	95a0 <__sprint_r>
    3988:	103ca01e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    398c:	d8c02017 	ldw	r3,128(sp)
    3990:	da000404 	addi	r8,sp,16
    3994:	003dbd06 	br	308c <__alt_data_end+0xff00308c>
    3998:	d9002c17 	ldw	r4,176(sp)
    399c:	d9801e04 	addi	r6,sp,120
    39a0:	b80b883a 	mov	r5,r23
    39a4:	00095a00 	call	95a0 <__sprint_r>
    39a8:	103c981e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    39ac:	d8c02017 	ldw	r3,128(sp)
    39b0:	da000404 	addi	r8,sp,16
    39b4:	003dc306 	br	30c4 <__alt_data_end+0xff0030c4>
    39b8:	d8802917 	ldw	r2,164(sp)
    39bc:	d8002785 	stb	zero,158(sp)
    39c0:	103f0616 	blt	r2,zero,35dc <__alt_data_end+0xff0035dc>
    39c4:	00ffdfc4 	movi	r3,-129
    39c8:	9d84b03a 	or	r2,r19,r22
    39cc:	90e4703a 	and	r18,r18,r3
    39d0:	103c6b26 	beq	r2,zero,2b80 <__alt_data_end+0xff002b80>
    39d4:	0039883a 	mov	fp,zero
    39d8:	003e7406 	br	33ac <__alt_data_end+0xff0033ac>
    39dc:	9080040c 	andi	r2,r18,16
    39e0:	1001b326 	beq	r2,zero,40b0 <___vfprintf_internal_r+0x18ac>
    39e4:	d9002d17 	ldw	r4,180(sp)
    39e8:	d9402917 	ldw	r5,164(sp)
    39ec:	d8002785 	stb	zero,158(sp)
    39f0:	20800104 	addi	r2,r4,4
    39f4:	24c00017 	ldw	r19,0(r4)
    39f8:	002d883a 	mov	r22,zero
    39fc:	2801b516 	blt	r5,zero,40d4 <___vfprintf_internal_r+0x18d0>
    3a00:	00ffdfc4 	movi	r3,-129
    3a04:	d8802d15 	stw	r2,180(sp)
    3a08:	90e4703a 	and	r18,r18,r3
    3a0c:	983d2726 	beq	r19,zero,2eac <__alt_data_end+0xff002eac>
    3a10:	0039883a 	mov	fp,zero
    3a14:	003d2a06 	br	2ec0 <__alt_data_end+0xff002ec0>
    3a18:	dc402617 	ldw	r17,152(sp)
    3a1c:	0441d30e 	bge	zero,r17,416c <___vfprintf_internal_r+0x1968>
    3a20:	dc403217 	ldw	r17,200(sp)
    3a24:	d8803317 	ldw	r2,204(sp)
    3a28:	1440010e 	bge	r2,r17,3a30 <___vfprintf_internal_r+0x122c>
    3a2c:	1023883a 	mov	r17,r2
    3a30:	04400a0e 	bge	zero,r17,3a5c <___vfprintf_internal_r+0x1258>
    3a34:	d8801f17 	ldw	r2,124(sp)
    3a38:	1c47883a 	add	r3,r3,r17
    3a3c:	44000015 	stw	r16,0(r8)
    3a40:	10800044 	addi	r2,r2,1
    3a44:	44400115 	stw	r17,4(r8)
    3a48:	d8c02015 	stw	r3,128(sp)
    3a4c:	d8801f15 	stw	r2,124(sp)
    3a50:	010001c4 	movi	r4,7
    3a54:	20826516 	blt	r4,r2,43ec <___vfprintf_internal_r+0x1be8>
    3a58:	42000204 	addi	r8,r8,8
    3a5c:	88026116 	blt	r17,zero,43e4 <___vfprintf_internal_r+0x1be0>
    3a60:	d9003217 	ldw	r4,200(sp)
    3a64:	2463c83a 	sub	r17,r4,r17
    3a68:	04407b0e 	bge	zero,r17,3c58 <___vfprintf_internal_r+0x1454>
    3a6c:	05800404 	movi	r22,16
    3a70:	d8801f17 	ldw	r2,124(sp)
    3a74:	b4419d0e 	bge	r22,r17,40ec <___vfprintf_internal_r+0x18e8>
    3a78:	01000074 	movhi	r4,1
    3a7c:	21052384 	addi	r4,r4,5262
    3a80:	d9002b15 	stw	r4,172(sp)
    3a84:	070001c4 	movi	fp,7
    3a88:	dcc02c17 	ldw	r19,176(sp)
    3a8c:	00000306 	br	3a9c <___vfprintf_internal_r+0x1298>
    3a90:	42000204 	addi	r8,r8,8
    3a94:	8c7ffc04 	addi	r17,r17,-16
    3a98:	b441970e 	bge	r22,r17,40f8 <___vfprintf_internal_r+0x18f4>
    3a9c:	18c00404 	addi	r3,r3,16
    3aa0:	10800044 	addi	r2,r2,1
    3aa4:	45000015 	stw	r20,0(r8)
    3aa8:	45800115 	stw	r22,4(r8)
    3aac:	d8c02015 	stw	r3,128(sp)
    3ab0:	d8801f15 	stw	r2,124(sp)
    3ab4:	e0bff60e 	bge	fp,r2,3a90 <__alt_data_end+0xff003a90>
    3ab8:	d9801e04 	addi	r6,sp,120
    3abc:	b80b883a 	mov	r5,r23
    3ac0:	9809883a 	mov	r4,r19
    3ac4:	00095a00 	call	95a0 <__sprint_r>
    3ac8:	103c501e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    3acc:	d8c02017 	ldw	r3,128(sp)
    3ad0:	d8801f17 	ldw	r2,124(sp)
    3ad4:	da000404 	addi	r8,sp,16
    3ad8:	003fee06 	br	3a94 <__alt_data_end+0xff003a94>
    3adc:	d9002c17 	ldw	r4,176(sp)
    3ae0:	d9801e04 	addi	r6,sp,120
    3ae4:	b80b883a 	mov	r5,r23
    3ae8:	00095a00 	call	95a0 <__sprint_r>
    3aec:	103c471e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    3af0:	d8c02017 	ldw	r3,128(sp)
    3af4:	df002787 	ldb	fp,158(sp)
    3af8:	da000404 	addi	r8,sp,16
    3afc:	003d5606 	br	3058 <__alt_data_end+0xff003058>
    3b00:	9080040c 	andi	r2,r18,16
    3b04:	10016126 	beq	r2,zero,408c <___vfprintf_internal_r+0x1888>
    3b08:	d8802d17 	ldw	r2,180(sp)
    3b0c:	14c00017 	ldw	r19,0(r2)
    3b10:	10800104 	addi	r2,r2,4
    3b14:	d8802d15 	stw	r2,180(sp)
    3b18:	982dd7fa 	srai	r22,r19,31
    3b1c:	b005883a 	mov	r2,r22
    3b20:	003c8206 	br	2d2c <__alt_data_end+0xff002d2c>
    3b24:	9080040c 	andi	r2,r18,16
    3b28:	10003526 	beq	r2,zero,3c00 <___vfprintf_internal_r+0x13fc>
    3b2c:	d9402d17 	ldw	r5,180(sp)
    3b30:	d8c02917 	ldw	r3,164(sp)
    3b34:	d8002785 	stb	zero,158(sp)
    3b38:	28800104 	addi	r2,r5,4
    3b3c:	2cc00017 	ldw	r19,0(r5)
    3b40:	002d883a 	mov	r22,zero
    3b44:	18003716 	blt	r3,zero,3c24 <___vfprintf_internal_r+0x1420>
    3b48:	00ffdfc4 	movi	r3,-129
    3b4c:	d8802d15 	stw	r2,180(sp)
    3b50:	90e4703a 	and	r18,r18,r3
    3b54:	0039883a 	mov	fp,zero
    3b58:	983df326 	beq	r19,zero,3328 <__alt_data_end+0xff003328>
    3b5c:	00800244 	movi	r2,9
    3b60:	14fc7b36 	bltu	r2,r19,2d50 <__alt_data_end+0xff002d50>
    3b64:	d8c02817 	ldw	r3,160(sp)
    3b68:	dc001dc4 	addi	r16,sp,119
    3b6c:	9cc00c04 	addi	r19,r19,48
    3b70:	1c07c83a 	sub	r3,r3,r16
    3b74:	dcc01dc5 	stb	r19,119(sp)
    3b78:	d8c02e15 	stw	r3,184(sp)
    3b7c:	003ce806 	br	2f20 <__alt_data_end+0xff002f20>
    3b80:	d8803317 	ldw	r2,204(sp)
    3b84:	143fffc4 	addi	r16,r2,-1
    3b88:	043f4d0e 	bge	zero,r16,38c0 <__alt_data_end+0xff0038c0>
    3b8c:	07000404 	movi	fp,16
    3b90:	e400810e 	bge	fp,r16,3d98 <___vfprintf_internal_r+0x1594>
    3b94:	01400074 	movhi	r5,1
    3b98:	29452384 	addi	r5,r5,5262
    3b9c:	d9402b15 	stw	r5,172(sp)
    3ba0:	01c001c4 	movi	r7,7
    3ba4:	dcc02c17 	ldw	r19,176(sp)
    3ba8:	00000306 	br	3bb8 <___vfprintf_internal_r+0x13b4>
    3bac:	b5800204 	addi	r22,r22,8
    3bb0:	843ffc04 	addi	r16,r16,-16
    3bb4:	e4007b0e 	bge	fp,r16,3da4 <___vfprintf_internal_r+0x15a0>
    3bb8:	18c00404 	addi	r3,r3,16
    3bbc:	8c400044 	addi	r17,r17,1
    3bc0:	b5000015 	stw	r20,0(r22)
    3bc4:	b7000115 	stw	fp,4(r22)
    3bc8:	d8c02015 	stw	r3,128(sp)
    3bcc:	dc401f15 	stw	r17,124(sp)
    3bd0:	3c7ff60e 	bge	r7,r17,3bac <__alt_data_end+0xff003bac>
    3bd4:	d9801e04 	addi	r6,sp,120
    3bd8:	b80b883a 	mov	r5,r23
    3bdc:	9809883a 	mov	r4,r19
    3be0:	d9c03c15 	stw	r7,240(sp)
    3be4:	00095a00 	call	95a0 <__sprint_r>
    3be8:	d9c03c17 	ldw	r7,240(sp)
    3bec:	103c071e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    3bf0:	d8c02017 	ldw	r3,128(sp)
    3bf4:	dc401f17 	ldw	r17,124(sp)
    3bf8:	dd800404 	addi	r22,sp,16
    3bfc:	003fec06 	br	3bb0 <__alt_data_end+0xff003bb0>
    3c00:	9080100c 	andi	r2,r18,64
    3c04:	d8002785 	stb	zero,158(sp)
    3c08:	10010e26 	beq	r2,zero,4044 <___vfprintf_internal_r+0x1840>
    3c0c:	d9002d17 	ldw	r4,180(sp)
    3c10:	d9402917 	ldw	r5,164(sp)
    3c14:	002d883a 	mov	r22,zero
    3c18:	20800104 	addi	r2,r4,4
    3c1c:	24c0000b 	ldhu	r19,0(r4)
    3c20:	283fc90e 	bge	r5,zero,3b48 <__alt_data_end+0xff003b48>
    3c24:	d8802d15 	stw	r2,180(sp)
    3c28:	0039883a 	mov	fp,zero
    3c2c:	9d84b03a 	or	r2,r19,r22
    3c30:	103c461e 	bne	r2,zero,2d4c <__alt_data_end+0xff002d4c>
    3c34:	00800044 	movi	r2,1
    3c38:	003e6c06 	br	35ec <__alt_data_end+0xff0035ec>
    3c3c:	d9002c17 	ldw	r4,176(sp)
    3c40:	d9801e04 	addi	r6,sp,120
    3c44:	b80b883a 	mov	r5,r23
    3c48:	00095a00 	call	95a0 <__sprint_r>
    3c4c:	103bef1e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    3c50:	d8c02017 	ldw	r3,128(sp)
    3c54:	da000404 	addi	r8,sp,16
    3c58:	d9003217 	ldw	r4,200(sp)
    3c5c:	d8802617 	ldw	r2,152(sp)
    3c60:	d9403317 	ldw	r5,204(sp)
    3c64:	8123883a 	add	r17,r16,r4
    3c68:	11400216 	blt	r2,r5,3c74 <___vfprintf_internal_r+0x1470>
    3c6c:	9100004c 	andi	r4,r18,1
    3c70:	20000d26 	beq	r4,zero,3ca8 <___vfprintf_internal_r+0x14a4>
    3c74:	d9003717 	ldw	r4,220(sp)
    3c78:	d9403417 	ldw	r5,208(sp)
    3c7c:	1907883a 	add	r3,r3,r4
    3c80:	d9001f17 	ldw	r4,124(sp)
    3c84:	41400015 	stw	r5,0(r8)
    3c88:	d9403717 	ldw	r5,220(sp)
    3c8c:	21000044 	addi	r4,r4,1
    3c90:	d8c02015 	stw	r3,128(sp)
    3c94:	41400115 	stw	r5,4(r8)
    3c98:	d9001f15 	stw	r4,124(sp)
    3c9c:	014001c4 	movi	r5,7
    3ca0:	2901e816 	blt	r5,r4,4444 <___vfprintf_internal_r+0x1c40>
    3ca4:	42000204 	addi	r8,r8,8
    3ca8:	d9003317 	ldw	r4,204(sp)
    3cac:	8121883a 	add	r16,r16,r4
    3cb0:	2085c83a 	sub	r2,r4,r2
    3cb4:	8461c83a 	sub	r16,r16,r17
    3cb8:	1400010e 	bge	r2,r16,3cc0 <___vfprintf_internal_r+0x14bc>
    3cbc:	1021883a 	mov	r16,r2
    3cc0:	04000a0e 	bge	zero,r16,3cec <___vfprintf_internal_r+0x14e8>
    3cc4:	d9001f17 	ldw	r4,124(sp)
    3cc8:	1c07883a 	add	r3,r3,r16
    3ccc:	44400015 	stw	r17,0(r8)
    3cd0:	21000044 	addi	r4,r4,1
    3cd4:	44000115 	stw	r16,4(r8)
    3cd8:	d8c02015 	stw	r3,128(sp)
    3cdc:	d9001f15 	stw	r4,124(sp)
    3ce0:	014001c4 	movi	r5,7
    3ce4:	2901fb16 	blt	r5,r4,44d4 <___vfprintf_internal_r+0x1cd0>
    3ce8:	42000204 	addi	r8,r8,8
    3cec:	8001f716 	blt	r16,zero,44cc <___vfprintf_internal_r+0x1cc8>
    3cf0:	1421c83a 	sub	r16,r2,r16
    3cf4:	043d380e 	bge	zero,r16,31d8 <__alt_data_end+0xff0031d8>
    3cf8:	04400404 	movi	r17,16
    3cfc:	d8801f17 	ldw	r2,124(sp)
    3d00:	8c3efb0e 	bge	r17,r16,38f0 <__alt_data_end+0xff0038f0>
    3d04:	01400074 	movhi	r5,1
    3d08:	29452384 	addi	r5,r5,5262
    3d0c:	d9402b15 	stw	r5,172(sp)
    3d10:	058001c4 	movi	r22,7
    3d14:	dcc02c17 	ldw	r19,176(sp)
    3d18:	00000306 	br	3d28 <___vfprintf_internal_r+0x1524>
    3d1c:	42000204 	addi	r8,r8,8
    3d20:	843ffc04 	addi	r16,r16,-16
    3d24:	8c3ef50e 	bge	r17,r16,38fc <__alt_data_end+0xff0038fc>
    3d28:	18c00404 	addi	r3,r3,16
    3d2c:	10800044 	addi	r2,r2,1
    3d30:	45000015 	stw	r20,0(r8)
    3d34:	44400115 	stw	r17,4(r8)
    3d38:	d8c02015 	stw	r3,128(sp)
    3d3c:	d8801f15 	stw	r2,124(sp)
    3d40:	b0bff60e 	bge	r22,r2,3d1c <__alt_data_end+0xff003d1c>
    3d44:	d9801e04 	addi	r6,sp,120
    3d48:	b80b883a 	mov	r5,r23
    3d4c:	9809883a 	mov	r4,r19
    3d50:	00095a00 	call	95a0 <__sprint_r>
    3d54:	103bad1e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    3d58:	d8c02017 	ldw	r3,128(sp)
    3d5c:	d8801f17 	ldw	r2,124(sp)
    3d60:	da000404 	addi	r8,sp,16
    3d64:	003fee06 	br	3d20 <__alt_data_end+0xff003d20>
    3d68:	9088703a 	and	r4,r18,r2
    3d6c:	203eab1e 	bne	r4,zero,381c <__alt_data_end+0xff00381c>
    3d70:	dc401f17 	ldw	r17,124(sp)
    3d74:	40800115 	stw	r2,4(r8)
    3d78:	44000015 	stw	r16,0(r8)
    3d7c:	8c400044 	addi	r17,r17,1
    3d80:	d8c02015 	stw	r3,128(sp)
    3d84:	dc401f15 	stw	r17,124(sp)
    3d88:	008001c4 	movi	r2,7
    3d8c:	14400e16 	blt	r2,r17,3dc8 <___vfprintf_internal_r+0x15c4>
    3d90:	45800204 	addi	r22,r8,8
    3d94:	003eca06 	br	38c0 <__alt_data_end+0xff0038c0>
    3d98:	01000074 	movhi	r4,1
    3d9c:	21052384 	addi	r4,r4,5262
    3da0:	d9002b15 	stw	r4,172(sp)
    3da4:	d8802b17 	ldw	r2,172(sp)
    3da8:	1c07883a 	add	r3,r3,r16
    3dac:	8c400044 	addi	r17,r17,1
    3db0:	b0800015 	stw	r2,0(r22)
    3db4:	b4000115 	stw	r16,4(r22)
    3db8:	d8c02015 	stw	r3,128(sp)
    3dbc:	dc401f15 	stw	r17,124(sp)
    3dc0:	008001c4 	movi	r2,7
    3dc4:	147ebd0e 	bge	r2,r17,38bc <__alt_data_end+0xff0038bc>
    3dc8:	d9002c17 	ldw	r4,176(sp)
    3dcc:	d9801e04 	addi	r6,sp,120
    3dd0:	b80b883a 	mov	r5,r23
    3dd4:	00095a00 	call	95a0 <__sprint_r>
    3dd8:	103b8c1e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    3ddc:	d8c02017 	ldw	r3,128(sp)
    3de0:	dc401f17 	ldw	r17,124(sp)
    3de4:	dd800404 	addi	r22,sp,16
    3de8:	003eb506 	br	38c0 <__alt_data_end+0xff0038c0>
    3dec:	d9002c17 	ldw	r4,176(sp)
    3df0:	d9801e04 	addi	r6,sp,120
    3df4:	b80b883a 	mov	r5,r23
    3df8:	00095a00 	call	95a0 <__sprint_r>
    3dfc:	103b831e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    3e00:	d8c02017 	ldw	r3,128(sp)
    3e04:	dc401f17 	ldw	r17,124(sp)
    3e08:	da000404 	addi	r8,sp,16
    3e0c:	003e8d06 	br	3844 <__alt_data_end+0xff003844>
    3e10:	d9002c17 	ldw	r4,176(sp)
    3e14:	d9801e04 	addi	r6,sp,120
    3e18:	b80b883a 	mov	r5,r23
    3e1c:	00095a00 	call	95a0 <__sprint_r>
    3e20:	103b7a1e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    3e24:	d8c02017 	ldw	r3,128(sp)
    3e28:	dc401f17 	ldw	r17,124(sp)
    3e2c:	dd800404 	addi	r22,sp,16
    3e30:	003e8f06 	br	3870 <__alt_data_end+0xff003870>
    3e34:	0027883a 	mov	r19,zero
    3e38:	003f4a06 	br	3b64 <__alt_data_end+0xff003b64>
    3e3c:	d9002c17 	ldw	r4,176(sp)
    3e40:	d9801e04 	addi	r6,sp,120
    3e44:	b80b883a 	mov	r5,r23
    3e48:	00095a00 	call	95a0 <__sprint_r>
    3e4c:	103b6f1e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    3e50:	d8c02017 	ldw	r3,128(sp)
    3e54:	da000404 	addi	r8,sp,16
    3e58:	003c9d06 	br	30d0 <__alt_data_end+0xff0030d0>
    3e5c:	04e7c83a 	sub	r19,zero,r19
    3e60:	9804c03a 	cmpne	r2,r19,zero
    3e64:	05adc83a 	sub	r22,zero,r22
    3e68:	b0adc83a 	sub	r22,r22,r2
    3e6c:	d8802917 	ldw	r2,164(sp)
    3e70:	07000b44 	movi	fp,45
    3e74:	df002785 	stb	fp,158(sp)
    3e78:	10017b16 	blt	r2,zero,4468 <___vfprintf_internal_r+0x1c64>
    3e7c:	00bfdfc4 	movi	r2,-129
    3e80:	90a4703a 	and	r18,r18,r2
    3e84:	003bb106 	br	2d4c <__alt_data_end+0xff002d4c>
    3e88:	d9003617 	ldw	r4,216(sp)
    3e8c:	d9403817 	ldw	r5,224(sp)
    3e90:	da003d15 	stw	r8,244(sp)
    3e94:	00092180 	call	9218 <__fpclassifyd>
    3e98:	da003d17 	ldw	r8,244(sp)
    3e9c:	1000f026 	beq	r2,zero,4260 <___vfprintf_internal_r+0x1a5c>
    3ea0:	d9002917 	ldw	r4,164(sp)
    3ea4:	05bff7c4 	movi	r22,-33
    3ea8:	00bfffc4 	movi	r2,-1
    3eac:	8dac703a 	and	r22,r17,r22
    3eb0:	20820026 	beq	r4,r2,46b4 <___vfprintf_internal_r+0x1eb0>
    3eb4:	008011c4 	movi	r2,71
    3eb8:	b081f726 	beq	r22,r2,4698 <___vfprintf_internal_r+0x1e94>
    3ebc:	d9003817 	ldw	r4,224(sp)
    3ec0:	90c04014 	ori	r3,r18,256
    3ec4:	d8c02b15 	stw	r3,172(sp)
    3ec8:	20021516 	blt	r4,zero,4720 <___vfprintf_internal_r+0x1f1c>
    3ecc:	dcc03817 	ldw	r19,224(sp)
    3ed0:	d8002a05 	stb	zero,168(sp)
    3ed4:	00801984 	movi	r2,102
    3ed8:	8881f926 	beq	r17,r2,46c0 <___vfprintf_internal_r+0x1ebc>
    3edc:	00801184 	movi	r2,70
    3ee0:	88821c26 	beq	r17,r2,4754 <___vfprintf_internal_r+0x1f50>
    3ee4:	00801144 	movi	r2,69
    3ee8:	b081ef26 	beq	r22,r2,46a8 <___vfprintf_internal_r+0x1ea4>
    3eec:	d8c02917 	ldw	r3,164(sp)
    3ef0:	d8802104 	addi	r2,sp,132
    3ef4:	d8800315 	stw	r2,12(sp)
    3ef8:	d9403617 	ldw	r5,216(sp)
    3efc:	d8802504 	addi	r2,sp,148
    3f00:	d9002c17 	ldw	r4,176(sp)
    3f04:	d8800215 	stw	r2,8(sp)
    3f08:	d8802604 	addi	r2,sp,152
    3f0c:	d8c00015 	stw	r3,0(sp)
    3f10:	d8800115 	stw	r2,4(sp)
    3f14:	01c00084 	movi	r7,2
    3f18:	980d883a 	mov	r6,r19
    3f1c:	d8c03c15 	stw	r3,240(sp)
    3f20:	da003d15 	stw	r8,244(sp)
    3f24:	0004e280 	call	4e28 <_dtoa_r>
    3f28:	1021883a 	mov	r16,r2
    3f2c:	008019c4 	movi	r2,103
    3f30:	d8c03c17 	ldw	r3,240(sp)
    3f34:	da003d17 	ldw	r8,244(sp)
    3f38:	88817126 	beq	r17,r2,4500 <___vfprintf_internal_r+0x1cfc>
    3f3c:	008011c4 	movi	r2,71
    3f40:	88829226 	beq	r17,r2,498c <___vfprintf_internal_r+0x2188>
    3f44:	80f9883a 	add	fp,r16,r3
    3f48:	d9003617 	ldw	r4,216(sp)
    3f4c:	000d883a 	mov	r6,zero
    3f50:	000f883a 	mov	r7,zero
    3f54:	980b883a 	mov	r5,r19
    3f58:	da003d15 	stw	r8,244(sp)
    3f5c:	000d0640 	call	d064 <__eqdf2>
    3f60:	da003d17 	ldw	r8,244(sp)
    3f64:	10018d26 	beq	r2,zero,459c <___vfprintf_internal_r+0x1d98>
    3f68:	d8802117 	ldw	r2,132(sp)
    3f6c:	1700062e 	bgeu	r2,fp,3f88 <___vfprintf_internal_r+0x1784>
    3f70:	01000c04 	movi	r4,48
    3f74:	10c00044 	addi	r3,r2,1
    3f78:	d8c02115 	stw	r3,132(sp)
    3f7c:	11000005 	stb	r4,0(r2)
    3f80:	d8802117 	ldw	r2,132(sp)
    3f84:	173ffb36 	bltu	r2,fp,3f74 <__alt_data_end+0xff003f74>
    3f88:	1405c83a 	sub	r2,r2,r16
    3f8c:	d8803315 	stw	r2,204(sp)
    3f90:	008011c4 	movi	r2,71
    3f94:	b0817626 	beq	r22,r2,4570 <___vfprintf_internal_r+0x1d6c>
    3f98:	00801944 	movi	r2,101
    3f9c:	1442810e 	bge	r2,r17,49a4 <___vfprintf_internal_r+0x21a0>
    3fa0:	d8c02617 	ldw	r3,152(sp)
    3fa4:	00801984 	movi	r2,102
    3fa8:	d8c03215 	stw	r3,200(sp)
    3fac:	8881fe26 	beq	r17,r2,47a8 <___vfprintf_internal_r+0x1fa4>
    3fb0:	d8c03217 	ldw	r3,200(sp)
    3fb4:	d9003317 	ldw	r4,204(sp)
    3fb8:	1901dd16 	blt	r3,r4,4730 <___vfprintf_internal_r+0x1f2c>
    3fbc:	9480004c 	andi	r18,r18,1
    3fc0:	90022b1e 	bne	r18,zero,4870 <___vfprintf_internal_r+0x206c>
    3fc4:	1805883a 	mov	r2,r3
    3fc8:	18028016 	blt	r3,zero,49cc <___vfprintf_internal_r+0x21c8>
    3fcc:	d8c03217 	ldw	r3,200(sp)
    3fd0:	044019c4 	movi	r17,103
    3fd4:	d8c02e15 	stw	r3,184(sp)
    3fd8:	df002a07 	ldb	fp,168(sp)
    3fdc:	e001531e 	bne	fp,zero,452c <___vfprintf_internal_r+0x1d28>
    3fe0:	df002783 	ldbu	fp,158(sp)
    3fe4:	d8802a15 	stw	r2,168(sp)
    3fe8:	dc802b17 	ldw	r18,172(sp)
    3fec:	d8002915 	stw	zero,164(sp)
    3ff0:	003bd106 	br	2f38 <__alt_data_end+0xff002f38>
    3ff4:	d8802d17 	ldw	r2,180(sp)
    3ff8:	d8c02d17 	ldw	r3,180(sp)
    3ffc:	d9002d17 	ldw	r4,180(sp)
    4000:	10800017 	ldw	r2,0(r2)
    4004:	18c00117 	ldw	r3,4(r3)
    4008:	21000204 	addi	r4,r4,8
    400c:	d8803615 	stw	r2,216(sp)
    4010:	d8c03815 	stw	r3,224(sp)
    4014:	d9002d15 	stw	r4,180(sp)
    4018:	003b7506 	br	2df0 <__alt_data_end+0xff002df0>
    401c:	ac400007 	ldb	r17,0(r21)
    4020:	003a5906 	br	2988 <__alt_data_end+0xff002988>
    4024:	9080100c 	andi	r2,r18,64
    4028:	1000a826 	beq	r2,zero,42cc <___vfprintf_internal_r+0x1ac8>
    402c:	d9002d17 	ldw	r4,180(sp)
    4030:	002d883a 	mov	r22,zero
    4034:	24c0000b 	ldhu	r19,0(r4)
    4038:	21000104 	addi	r4,r4,4
    403c:	d9002d15 	stw	r4,180(sp)
    4040:	003ccb06 	br	3370 <__alt_data_end+0xff003370>
    4044:	d8c02d17 	ldw	r3,180(sp)
    4048:	d9002917 	ldw	r4,164(sp)
    404c:	002d883a 	mov	r22,zero
    4050:	18800104 	addi	r2,r3,4
    4054:	1cc00017 	ldw	r19,0(r3)
    4058:	203ebb0e 	bge	r4,zero,3b48 <__alt_data_end+0xff003b48>
    405c:	003ef106 	br	3c24 <__alt_data_end+0xff003c24>
    4060:	9080040c 	andi	r2,r18,16
    4064:	1000921e 	bne	r2,zero,42b0 <___vfprintf_internal_r+0x1aac>
    4068:	9480100c 	andi	r18,r18,64
    406c:	90013926 	beq	r18,zero,4554 <___vfprintf_internal_r+0x1d50>
    4070:	d9002d17 	ldw	r4,180(sp)
    4074:	d9402f17 	ldw	r5,188(sp)
    4078:	20800017 	ldw	r2,0(r4)
    407c:	21000104 	addi	r4,r4,4
    4080:	d9002d15 	stw	r4,180(sp)
    4084:	1140000d 	sth	r5,0(r2)
    4088:	003a1606 	br	28e4 <__alt_data_end+0xff0028e4>
    408c:	9080100c 	andi	r2,r18,64
    4090:	10008026 	beq	r2,zero,4294 <___vfprintf_internal_r+0x1a90>
    4094:	d8c02d17 	ldw	r3,180(sp)
    4098:	1cc0000f 	ldh	r19,0(r3)
    409c:	18c00104 	addi	r3,r3,4
    40a0:	d8c02d15 	stw	r3,180(sp)
    40a4:	982dd7fa 	srai	r22,r19,31
    40a8:	b005883a 	mov	r2,r22
    40ac:	003b1f06 	br	2d2c <__alt_data_end+0xff002d2c>
    40b0:	9080100c 	andi	r2,r18,64
    40b4:	d8002785 	stb	zero,158(sp)
    40b8:	10008a1e 	bne	r2,zero,42e4 <___vfprintf_internal_r+0x1ae0>
    40bc:	d9402d17 	ldw	r5,180(sp)
    40c0:	d8c02917 	ldw	r3,164(sp)
    40c4:	002d883a 	mov	r22,zero
    40c8:	28800104 	addi	r2,r5,4
    40cc:	2cc00017 	ldw	r19,0(r5)
    40d0:	183e4b0e 	bge	r3,zero,3a00 <__alt_data_end+0xff003a00>
    40d4:	9d86b03a 	or	r3,r19,r22
    40d8:	d8802d15 	stw	r2,180(sp)
    40dc:	183e4c1e 	bne	r3,zero,3a10 <__alt_data_end+0xff003a10>
    40e0:	0039883a 	mov	fp,zero
    40e4:	0005883a 	mov	r2,zero
    40e8:	003d4006 	br	35ec <__alt_data_end+0xff0035ec>
    40ec:	01400074 	movhi	r5,1
    40f0:	29452384 	addi	r5,r5,5262
    40f4:	d9402b15 	stw	r5,172(sp)
    40f8:	d9402b17 	ldw	r5,172(sp)
    40fc:	1c47883a 	add	r3,r3,r17
    4100:	10800044 	addi	r2,r2,1
    4104:	41400015 	stw	r5,0(r8)
    4108:	44400115 	stw	r17,4(r8)
    410c:	d8c02015 	stw	r3,128(sp)
    4110:	d8801f15 	stw	r2,124(sp)
    4114:	010001c4 	movi	r4,7
    4118:	20bec816 	blt	r4,r2,3c3c <__alt_data_end+0xff003c3c>
    411c:	42000204 	addi	r8,r8,8
    4120:	003ecd06 	br	3c58 <__alt_data_end+0xff003c58>
    4124:	d9002917 	ldw	r4,164(sp)
    4128:	d8002785 	stb	zero,158(sp)
    412c:	203d2d16 	blt	r4,zero,35e4 <__alt_data_end+0xff0035e4>
    4130:	00bfdfc4 	movi	r2,-129
    4134:	90a4703a 	and	r18,r18,r2
    4138:	003a9106 	br	2b80 <__alt_data_end+0xff002b80>
    413c:	01000074 	movhi	r4,1
    4140:	21052384 	addi	r4,r4,5262
    4144:	d9002b15 	stw	r4,172(sp)
    4148:	003c0c06 	br	317c <__alt_data_end+0xff00317c>
    414c:	d9002c17 	ldw	r4,176(sp)
    4150:	d9801e04 	addi	r6,sp,120
    4154:	b80b883a 	mov	r5,r23
    4158:	00095a00 	call	95a0 <__sprint_r>
    415c:	103aab1e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    4160:	d8c02017 	ldw	r3,128(sp)
    4164:	da000404 	addi	r8,sp,16
    4168:	003d4106 	br	3670 <__alt_data_end+0xff003670>
    416c:	d8801f17 	ldw	r2,124(sp)
    4170:	01400074 	movhi	r5,1
    4174:	01000044 	movi	r4,1
    4178:	18c00044 	addi	r3,r3,1
    417c:	10800044 	addi	r2,r2,1
    4180:	29452304 	addi	r5,r5,5260
    4184:	41000115 	stw	r4,4(r8)
    4188:	41400015 	stw	r5,0(r8)
    418c:	d8c02015 	stw	r3,128(sp)
    4190:	d8801f15 	stw	r2,124(sp)
    4194:	010001c4 	movi	r4,7
    4198:	20805c16 	blt	r4,r2,430c <___vfprintf_internal_r+0x1b08>
    419c:	42000204 	addi	r8,r8,8
    41a0:	8800041e 	bne	r17,zero,41b4 <___vfprintf_internal_r+0x19b0>
    41a4:	d8803317 	ldw	r2,204(sp)
    41a8:	1000021e 	bne	r2,zero,41b4 <___vfprintf_internal_r+0x19b0>
    41ac:	9080004c 	andi	r2,r18,1
    41b0:	103c0926 	beq	r2,zero,31d8 <__alt_data_end+0xff0031d8>
    41b4:	d9003717 	ldw	r4,220(sp)
    41b8:	d8801f17 	ldw	r2,124(sp)
    41bc:	d9403417 	ldw	r5,208(sp)
    41c0:	20c7883a 	add	r3,r4,r3
    41c4:	10800044 	addi	r2,r2,1
    41c8:	41000115 	stw	r4,4(r8)
    41cc:	41400015 	stw	r5,0(r8)
    41d0:	d8c02015 	stw	r3,128(sp)
    41d4:	d8801f15 	stw	r2,124(sp)
    41d8:	010001c4 	movi	r4,7
    41dc:	20812116 	blt	r4,r2,4664 <___vfprintf_internal_r+0x1e60>
    41e0:	42000204 	addi	r8,r8,8
    41e4:	0463c83a 	sub	r17,zero,r17
    41e8:	0440730e 	bge	zero,r17,43b8 <___vfprintf_internal_r+0x1bb4>
    41ec:	05800404 	movi	r22,16
    41f0:	b440860e 	bge	r22,r17,440c <___vfprintf_internal_r+0x1c08>
    41f4:	01400074 	movhi	r5,1
    41f8:	29452384 	addi	r5,r5,5262
    41fc:	d9402b15 	stw	r5,172(sp)
    4200:	070001c4 	movi	fp,7
    4204:	dcc02c17 	ldw	r19,176(sp)
    4208:	00000306 	br	4218 <___vfprintf_internal_r+0x1a14>
    420c:	42000204 	addi	r8,r8,8
    4210:	8c7ffc04 	addi	r17,r17,-16
    4214:	b440800e 	bge	r22,r17,4418 <___vfprintf_internal_r+0x1c14>
    4218:	18c00404 	addi	r3,r3,16
    421c:	10800044 	addi	r2,r2,1
    4220:	45000015 	stw	r20,0(r8)
    4224:	45800115 	stw	r22,4(r8)
    4228:	d8c02015 	stw	r3,128(sp)
    422c:	d8801f15 	stw	r2,124(sp)
    4230:	e0bff60e 	bge	fp,r2,420c <__alt_data_end+0xff00420c>
    4234:	d9801e04 	addi	r6,sp,120
    4238:	b80b883a 	mov	r5,r23
    423c:	9809883a 	mov	r4,r19
    4240:	00095a00 	call	95a0 <__sprint_r>
    4244:	103a711e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    4248:	d8c02017 	ldw	r3,128(sp)
    424c:	d8801f17 	ldw	r2,124(sp)
    4250:	da000404 	addi	r8,sp,16
    4254:	003fee06 	br	4210 <__alt_data_end+0xff004210>
    4258:	00bfffc4 	movi	r2,-1
    425c:	003a6f06 	br	2c1c <__alt_data_end+0xff002c1c>
    4260:	008011c4 	movi	r2,71
    4264:	1440b816 	blt	r2,r17,4548 <___vfprintf_internal_r+0x1d44>
    4268:	04000074 	movhi	r16,1
    426c:	84051504 	addi	r16,r16,5204
    4270:	00c000c4 	movi	r3,3
    4274:	00bfdfc4 	movi	r2,-129
    4278:	d8c02a15 	stw	r3,168(sp)
    427c:	90a4703a 	and	r18,r18,r2
    4280:	df002783 	ldbu	fp,158(sp)
    4284:	d8c02e15 	stw	r3,184(sp)
    4288:	d8002915 	stw	zero,164(sp)
    428c:	d8003215 	stw	zero,200(sp)
    4290:	003b2906 	br	2f38 <__alt_data_end+0xff002f38>
    4294:	d9002d17 	ldw	r4,180(sp)
    4298:	24c00017 	ldw	r19,0(r4)
    429c:	21000104 	addi	r4,r4,4
    42a0:	d9002d15 	stw	r4,180(sp)
    42a4:	982dd7fa 	srai	r22,r19,31
    42a8:	b005883a 	mov	r2,r22
    42ac:	003a9f06 	br	2d2c <__alt_data_end+0xff002d2c>
    42b0:	d9402d17 	ldw	r5,180(sp)
    42b4:	d8c02f17 	ldw	r3,188(sp)
    42b8:	28800017 	ldw	r2,0(r5)
    42bc:	29400104 	addi	r5,r5,4
    42c0:	d9402d15 	stw	r5,180(sp)
    42c4:	10c00015 	stw	r3,0(r2)
    42c8:	00398606 	br	28e4 <__alt_data_end+0xff0028e4>
    42cc:	d9402d17 	ldw	r5,180(sp)
    42d0:	002d883a 	mov	r22,zero
    42d4:	2cc00017 	ldw	r19,0(r5)
    42d8:	29400104 	addi	r5,r5,4
    42dc:	d9402d15 	stw	r5,180(sp)
    42e0:	003c2306 	br	3370 <__alt_data_end+0xff003370>
    42e4:	d8c02d17 	ldw	r3,180(sp)
    42e8:	d9002917 	ldw	r4,164(sp)
    42ec:	002d883a 	mov	r22,zero
    42f0:	18800104 	addi	r2,r3,4
    42f4:	1cc0000b 	ldhu	r19,0(r3)
    42f8:	203dc10e 	bge	r4,zero,3a00 <__alt_data_end+0xff003a00>
    42fc:	003f7506 	br	40d4 <__alt_data_end+0xff0040d4>
    4300:	04000074 	movhi	r16,1
    4304:	84051304 	addi	r16,r16,5196
    4308:	003acc06 	br	2e3c <__alt_data_end+0xff002e3c>
    430c:	d9002c17 	ldw	r4,176(sp)
    4310:	d9801e04 	addi	r6,sp,120
    4314:	b80b883a 	mov	r5,r23
    4318:	00095a00 	call	95a0 <__sprint_r>
    431c:	103a3b1e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    4320:	dc402617 	ldw	r17,152(sp)
    4324:	d8c02017 	ldw	r3,128(sp)
    4328:	da000404 	addi	r8,sp,16
    432c:	003f9c06 	br	41a0 <__alt_data_end+0xff0041a0>
    4330:	ac400043 	ldbu	r17,1(r21)
    4334:	94800814 	ori	r18,r18,32
    4338:	ad400044 	addi	r21,r21,1
    433c:	8c403fcc 	andi	r17,r17,255
    4340:	8c40201c 	xori	r17,r17,128
    4344:	8c7fe004 	addi	r17,r17,-128
    4348:	00398f06 	br	2988 <__alt_data_end+0xff002988>
    434c:	d8c02d15 	stw	r3,180(sp)
    4350:	0039883a 	mov	fp,zero
    4354:	003e3506 	br	3c2c <__alt_data_end+0xff003c2c>
    4358:	d9002c17 	ldw	r4,176(sp)
    435c:	d9801e04 	addi	r6,sp,120
    4360:	b80b883a 	mov	r5,r23
    4364:	00095a00 	call	95a0 <__sprint_r>
    4368:	103a281e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    436c:	d8c02017 	ldw	r3,128(sp)
    4370:	da000404 	addi	r8,sp,16
    4374:	003cd006 	br	36b8 <__alt_data_end+0xff0036b8>
    4378:	8009883a 	mov	r4,r16
    437c:	da003d15 	stw	r8,244(sp)
    4380:	000276c0 	call	276c <strlen>
    4384:	d8802e15 	stw	r2,184(sp)
    4388:	da003d17 	ldw	r8,244(sp)
    438c:	103c340e 	bge	r2,zero,3460 <__alt_data_end+0xff003460>
    4390:	0005883a 	mov	r2,zero
    4394:	003c3206 	br	3460 <__alt_data_end+0xff003460>
    4398:	d9002c17 	ldw	r4,176(sp)
    439c:	d9801e04 	addi	r6,sp,120
    43a0:	b80b883a 	mov	r5,r23
    43a4:	00095a00 	call	95a0 <__sprint_r>
    43a8:	103a181e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    43ac:	d8c02017 	ldw	r3,128(sp)
    43b0:	d8801f17 	ldw	r2,124(sp)
    43b4:	da000404 	addi	r8,sp,16
    43b8:	d9403317 	ldw	r5,204(sp)
    43bc:	10800044 	addi	r2,r2,1
    43c0:	44000015 	stw	r16,0(r8)
    43c4:	28c7883a 	add	r3,r5,r3
    43c8:	003b7d06 	br	31c0 <__alt_data_end+0xff0031c0>
    43cc:	01000074 	movhi	r4,1
    43d0:	21052784 	addi	r4,r4,5278
    43d4:	d9003515 	stw	r4,212(sp)
    43d8:	003b1406 	br	302c <__alt_data_end+0xff00302c>
    43dc:	013fffc4 	movi	r4,-1
    43e0:	003a3506 	br	2cb8 <__alt_data_end+0xff002cb8>
    43e4:	0023883a 	mov	r17,zero
    43e8:	003d9d06 	br	3a60 <__alt_data_end+0xff003a60>
    43ec:	d9002c17 	ldw	r4,176(sp)
    43f0:	d9801e04 	addi	r6,sp,120
    43f4:	b80b883a 	mov	r5,r23
    43f8:	00095a00 	call	95a0 <__sprint_r>
    43fc:	103a031e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    4400:	d8c02017 	ldw	r3,128(sp)
    4404:	da000404 	addi	r8,sp,16
    4408:	003d9406 	br	3a5c <__alt_data_end+0xff003a5c>
    440c:	01000074 	movhi	r4,1
    4410:	21052384 	addi	r4,r4,5262
    4414:	d9002b15 	stw	r4,172(sp)
    4418:	d9002b17 	ldw	r4,172(sp)
    441c:	1c47883a 	add	r3,r3,r17
    4420:	10800044 	addi	r2,r2,1
    4424:	41000015 	stw	r4,0(r8)
    4428:	44400115 	stw	r17,4(r8)
    442c:	d8c02015 	stw	r3,128(sp)
    4430:	d8801f15 	stw	r2,124(sp)
    4434:	010001c4 	movi	r4,7
    4438:	20bfd716 	blt	r4,r2,4398 <__alt_data_end+0xff004398>
    443c:	42000204 	addi	r8,r8,8
    4440:	003fdd06 	br	43b8 <__alt_data_end+0xff0043b8>
    4444:	d9002c17 	ldw	r4,176(sp)
    4448:	d9801e04 	addi	r6,sp,120
    444c:	b80b883a 	mov	r5,r23
    4450:	00095a00 	call	95a0 <__sprint_r>
    4454:	1039ed1e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    4458:	d8802617 	ldw	r2,152(sp)
    445c:	d8c02017 	ldw	r3,128(sp)
    4460:	da000404 	addi	r8,sp,16
    4464:	003e1006 	br	3ca8 <__alt_data_end+0xff003ca8>
    4468:	00800044 	movi	r2,1
    446c:	10803fcc 	andi	r2,r2,255
    4470:	00c00044 	movi	r3,1
    4474:	10fa3526 	beq	r2,r3,2d4c <__alt_data_end+0xff002d4c>
    4478:	00c00084 	movi	r3,2
    447c:	10fbcb26 	beq	r2,r3,33ac <__alt_data_end+0xff0033ac>
    4480:	003a8f06 	br	2ec0 <__alt_data_end+0xff002ec0>
    4484:	01000074 	movhi	r4,1
    4488:	21052784 	addi	r4,r4,5278
    448c:	d9003515 	stw	r4,212(sp)
    4490:	003b7606 	br	326c <__alt_data_end+0xff00326c>
    4494:	d8802917 	ldw	r2,164(sp)
    4498:	00c00184 	movi	r3,6
    449c:	1880012e 	bgeu	r3,r2,44a4 <___vfprintf_internal_r+0x1ca0>
    44a0:	1805883a 	mov	r2,r3
    44a4:	d8802e15 	stw	r2,184(sp)
    44a8:	1000ef16 	blt	r2,zero,4868 <___vfprintf_internal_r+0x2064>
    44ac:	04000074 	movhi	r16,1
    44b0:	d8802a15 	stw	r2,168(sp)
    44b4:	dcc02d15 	stw	r19,180(sp)
    44b8:	d8002915 	stw	zero,164(sp)
    44bc:	d8003215 	stw	zero,200(sp)
    44c0:	84052104 	addi	r16,r16,5252
    44c4:	0039883a 	mov	fp,zero
    44c8:	003aa206 	br	2f54 <__alt_data_end+0xff002f54>
    44cc:	0021883a 	mov	r16,zero
    44d0:	003e0706 	br	3cf0 <__alt_data_end+0xff003cf0>
    44d4:	d9002c17 	ldw	r4,176(sp)
    44d8:	d9801e04 	addi	r6,sp,120
    44dc:	b80b883a 	mov	r5,r23
    44e0:	00095a00 	call	95a0 <__sprint_r>
    44e4:	1039c91e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    44e8:	d8802617 	ldw	r2,152(sp)
    44ec:	d9403317 	ldw	r5,204(sp)
    44f0:	d8c02017 	ldw	r3,128(sp)
    44f4:	da000404 	addi	r8,sp,16
    44f8:	2885c83a 	sub	r2,r5,r2
    44fc:	003dfb06 	br	3cec <__alt_data_end+0xff003cec>
    4500:	9080004c 	andi	r2,r18,1
    4504:	103e8f1e 	bne	r2,zero,3f44 <__alt_data_end+0xff003f44>
    4508:	d8802117 	ldw	r2,132(sp)
    450c:	003e9e06 	br	3f88 <__alt_data_end+0xff003f88>
    4510:	1025883a 	mov	r18,r2
    4514:	0039883a 	mov	fp,zero
    4518:	00800084 	movi	r2,2
    451c:	003fd306 	br	446c <__alt_data_end+0xff00446c>
    4520:	07000b44 	movi	fp,45
    4524:	df002785 	stb	fp,158(sp)
    4528:	003a4006 	br	2e2c <__alt_data_end+0xff002e2c>
    452c:	00c00b44 	movi	r3,45
    4530:	d8c02785 	stb	r3,158(sp)
    4534:	d8802a15 	stw	r2,168(sp)
    4538:	dc802b17 	ldw	r18,172(sp)
    453c:	d8002915 	stw	zero,164(sp)
    4540:	07000b44 	movi	fp,45
    4544:	003a8006 	br	2f48 <__alt_data_end+0xff002f48>
    4548:	04000074 	movhi	r16,1
    454c:	84051604 	addi	r16,r16,5208
    4550:	003f4706 	br	4270 <__alt_data_end+0xff004270>
    4554:	d8c02d17 	ldw	r3,180(sp)
    4558:	d9002f17 	ldw	r4,188(sp)
    455c:	18800017 	ldw	r2,0(r3)
    4560:	18c00104 	addi	r3,r3,4
    4564:	d8c02d15 	stw	r3,180(sp)
    4568:	11000015 	stw	r4,0(r2)
    456c:	0038dd06 	br	28e4 <__alt_data_end+0xff0028e4>
    4570:	dd802617 	ldw	r22,152(sp)
    4574:	00bfff44 	movi	r2,-3
    4578:	b0801c16 	blt	r22,r2,45ec <___vfprintf_internal_r+0x1de8>
    457c:	d9402917 	ldw	r5,164(sp)
    4580:	2d801a16 	blt	r5,r22,45ec <___vfprintf_internal_r+0x1de8>
    4584:	dd803215 	stw	r22,200(sp)
    4588:	003e8906 	br	3fb0 <__alt_data_end+0xff003fb0>
    458c:	01000074 	movhi	r4,1
    4590:	21052384 	addi	r4,r4,5262
    4594:	d9002b15 	stw	r4,172(sp)
    4598:	003c9106 	br	37e0 <__alt_data_end+0xff0037e0>
    459c:	e005883a 	mov	r2,fp
    45a0:	003e7906 	br	3f88 <__alt_data_end+0xff003f88>
    45a4:	d9402917 	ldw	r5,164(sp)
    45a8:	df002783 	ldbu	fp,158(sp)
    45ac:	dcc02d15 	stw	r19,180(sp)
    45b0:	d9402a15 	stw	r5,168(sp)
    45b4:	d9402e15 	stw	r5,184(sp)
    45b8:	d8002915 	stw	zero,164(sp)
    45bc:	d8003215 	stw	zero,200(sp)
    45c0:	003a5d06 	br	2f38 <__alt_data_end+0xff002f38>
    45c4:	9080004c 	andi	r2,r18,1
    45c8:	0039883a 	mov	fp,zero
    45cc:	10000426 	beq	r2,zero,45e0 <___vfprintf_internal_r+0x1ddc>
    45d0:	00800c04 	movi	r2,48
    45d4:	dc001dc4 	addi	r16,sp,119
    45d8:	d8801dc5 	stb	r2,119(sp)
    45dc:	003b8006 	br	33e0 <__alt_data_end+0xff0033e0>
    45e0:	d8002e15 	stw	zero,184(sp)
    45e4:	dc001e04 	addi	r16,sp,120
    45e8:	003a4d06 	br	2f20 <__alt_data_end+0xff002f20>
    45ec:	8c7fff84 	addi	r17,r17,-2
    45f0:	b5bfffc4 	addi	r22,r22,-1
    45f4:	dd802615 	stw	r22,152(sp)
    45f8:	dc4022c5 	stb	r17,139(sp)
    45fc:	b000bf16 	blt	r22,zero,48fc <___vfprintf_internal_r+0x20f8>
    4600:	00800ac4 	movi	r2,43
    4604:	d8802305 	stb	r2,140(sp)
    4608:	00800244 	movi	r2,9
    460c:	15807016 	blt	r2,r22,47d0 <___vfprintf_internal_r+0x1fcc>
    4610:	00800c04 	movi	r2,48
    4614:	b5800c04 	addi	r22,r22,48
    4618:	d8802345 	stb	r2,141(sp)
    461c:	dd802385 	stb	r22,142(sp)
    4620:	d88023c4 	addi	r2,sp,143
    4624:	df0022c4 	addi	fp,sp,139
    4628:	d8c03317 	ldw	r3,204(sp)
    462c:	1739c83a 	sub	fp,r2,fp
    4630:	d9003317 	ldw	r4,204(sp)
    4634:	e0c7883a 	add	r3,fp,r3
    4638:	df003a15 	stw	fp,232(sp)
    463c:	d8c02e15 	stw	r3,184(sp)
    4640:	00800044 	movi	r2,1
    4644:	1100b30e 	bge	r2,r4,4914 <___vfprintf_internal_r+0x2110>
    4648:	d8c02e17 	ldw	r3,184(sp)
    464c:	18c00044 	addi	r3,r3,1
    4650:	d8c02e15 	stw	r3,184(sp)
    4654:	1805883a 	mov	r2,r3
    4658:	1800ac16 	blt	r3,zero,490c <___vfprintf_internal_r+0x2108>
    465c:	d8003215 	stw	zero,200(sp)
    4660:	003e5d06 	br	3fd8 <__alt_data_end+0xff003fd8>
    4664:	d9002c17 	ldw	r4,176(sp)
    4668:	d9801e04 	addi	r6,sp,120
    466c:	b80b883a 	mov	r5,r23
    4670:	00095a00 	call	95a0 <__sprint_r>
    4674:	1039651e 	bne	r2,zero,2c0c <__alt_data_end+0xff002c0c>
    4678:	dc402617 	ldw	r17,152(sp)
    467c:	d8c02017 	ldw	r3,128(sp)
    4680:	d8801f17 	ldw	r2,124(sp)
    4684:	da000404 	addi	r8,sp,16
    4688:	003ed606 	br	41e4 <__alt_data_end+0xff0041e4>
    468c:	582b883a 	mov	r21,r11
    4690:	d8002915 	stw	zero,164(sp)
    4694:	0038bd06 	br	298c <__alt_data_end+0xff00298c>
    4698:	d8802917 	ldw	r2,164(sp)
    469c:	103e071e 	bne	r2,zero,3ebc <__alt_data_end+0xff003ebc>
    46a0:	dc002915 	stw	r16,164(sp)
    46a4:	003e0506 	br	3ebc <__alt_data_end+0xff003ebc>
    46a8:	d9002917 	ldw	r4,164(sp)
    46ac:	20c00044 	addi	r3,r4,1
    46b0:	003e0f06 	br	3ef0 <__alt_data_end+0xff003ef0>
    46b4:	01400184 	movi	r5,6
    46b8:	d9402915 	stw	r5,164(sp)
    46bc:	003dff06 	br	3ebc <__alt_data_end+0xff003ebc>
    46c0:	d8802104 	addi	r2,sp,132
    46c4:	d8800315 	stw	r2,12(sp)
    46c8:	d8802504 	addi	r2,sp,148
    46cc:	d8800215 	stw	r2,8(sp)
    46d0:	d8802604 	addi	r2,sp,152
    46d4:	d8800115 	stw	r2,4(sp)
    46d8:	d8802917 	ldw	r2,164(sp)
    46dc:	d9403617 	ldw	r5,216(sp)
    46e0:	d9002c17 	ldw	r4,176(sp)
    46e4:	d8800015 	stw	r2,0(sp)
    46e8:	01c000c4 	movi	r7,3
    46ec:	980d883a 	mov	r6,r19
    46f0:	da003d15 	stw	r8,244(sp)
    46f4:	0004e280 	call	4e28 <_dtoa_r>
    46f8:	d8c02917 	ldw	r3,164(sp)
    46fc:	da003d17 	ldw	r8,244(sp)
    4700:	1021883a 	mov	r16,r2
    4704:	10f9883a 	add	fp,r2,r3
    4708:	81000007 	ldb	r4,0(r16)
    470c:	00800c04 	movi	r2,48
    4710:	20805e26 	beq	r4,r2,488c <___vfprintf_internal_r+0x2088>
    4714:	d8c02617 	ldw	r3,152(sp)
    4718:	e0f9883a 	add	fp,fp,r3
    471c:	003e0a06 	br	3f48 <__alt_data_end+0xff003f48>
    4720:	00c00b44 	movi	r3,45
    4724:	24e0003c 	xorhi	r19,r4,32768
    4728:	d8c02a05 	stb	r3,168(sp)
    472c:	003de906 	br	3ed4 <__alt_data_end+0xff003ed4>
    4730:	d8c03217 	ldw	r3,200(sp)
    4734:	00c07a0e 	bge	zero,r3,4920 <___vfprintf_internal_r+0x211c>
    4738:	00800044 	movi	r2,1
    473c:	d9003317 	ldw	r4,204(sp)
    4740:	1105883a 	add	r2,r2,r4
    4744:	d8802e15 	stw	r2,184(sp)
    4748:	10004e16 	blt	r2,zero,4884 <___vfprintf_internal_r+0x2080>
    474c:	044019c4 	movi	r17,103
    4750:	003e2106 	br	3fd8 <__alt_data_end+0xff003fd8>
    4754:	d9002917 	ldw	r4,164(sp)
    4758:	d8802104 	addi	r2,sp,132
    475c:	d8800315 	stw	r2,12(sp)
    4760:	d9000015 	stw	r4,0(sp)
    4764:	d8802504 	addi	r2,sp,148
    4768:	d9403617 	ldw	r5,216(sp)
    476c:	d9002c17 	ldw	r4,176(sp)
    4770:	d8800215 	stw	r2,8(sp)
    4774:	d8802604 	addi	r2,sp,152
    4778:	d8800115 	stw	r2,4(sp)
    477c:	01c000c4 	movi	r7,3
    4780:	980d883a 	mov	r6,r19
    4784:	da003d15 	stw	r8,244(sp)
    4788:	0004e280 	call	4e28 <_dtoa_r>
    478c:	d8c02917 	ldw	r3,164(sp)
    4790:	da003d17 	ldw	r8,244(sp)
    4794:	1021883a 	mov	r16,r2
    4798:	00801184 	movi	r2,70
    479c:	80f9883a 	add	fp,r16,r3
    47a0:	88bfd926 	beq	r17,r2,4708 <__alt_data_end+0xff004708>
    47a4:	003de806 	br	3f48 <__alt_data_end+0xff003f48>
    47a8:	d9002917 	ldw	r4,164(sp)
    47ac:	00c04d0e 	bge	zero,r3,48e4 <___vfprintf_internal_r+0x20e0>
    47b0:	2000441e 	bne	r4,zero,48c4 <___vfprintf_internal_r+0x20c0>
    47b4:	9480004c 	andi	r18,r18,1
    47b8:	9000421e 	bne	r18,zero,48c4 <___vfprintf_internal_r+0x20c0>
    47bc:	1805883a 	mov	r2,r3
    47c0:	18007016 	blt	r3,zero,4984 <___vfprintf_internal_r+0x2180>
    47c4:	d8c03217 	ldw	r3,200(sp)
    47c8:	d8c02e15 	stw	r3,184(sp)
    47cc:	003e0206 	br	3fd8 <__alt_data_end+0xff003fd8>
    47d0:	df0022c4 	addi	fp,sp,139
    47d4:	dc002915 	stw	r16,164(sp)
    47d8:	4027883a 	mov	r19,r8
    47dc:	e021883a 	mov	r16,fp
    47e0:	b009883a 	mov	r4,r22
    47e4:	01400284 	movi	r5,10
    47e8:	0001c740 	call	1c74 <__modsi3>
    47ec:	10800c04 	addi	r2,r2,48
    47f0:	843fffc4 	addi	r16,r16,-1
    47f4:	b009883a 	mov	r4,r22
    47f8:	01400284 	movi	r5,10
    47fc:	80800005 	stb	r2,0(r16)
    4800:	0001bf00 	call	1bf0 <__divsi3>
    4804:	102d883a 	mov	r22,r2
    4808:	00800244 	movi	r2,9
    480c:	15bff416 	blt	r2,r22,47e0 <__alt_data_end+0xff0047e0>
    4810:	9811883a 	mov	r8,r19
    4814:	b0800c04 	addi	r2,r22,48
    4818:	8027883a 	mov	r19,r16
    481c:	997fffc4 	addi	r5,r19,-1
    4820:	98bfffc5 	stb	r2,-1(r19)
    4824:	dc002917 	ldw	r16,164(sp)
    4828:	2f006a2e 	bgeu	r5,fp,49d4 <___vfprintf_internal_r+0x21d0>
    482c:	d9c02384 	addi	r7,sp,142
    4830:	3ccfc83a 	sub	r7,r7,r19
    4834:	d9002344 	addi	r4,sp,141
    4838:	e1cf883a 	add	r7,fp,r7
    483c:	00000106 	br	4844 <___vfprintf_internal_r+0x2040>
    4840:	28800003 	ldbu	r2,0(r5)
    4844:	20800005 	stb	r2,0(r4)
    4848:	21000044 	addi	r4,r4,1
    484c:	29400044 	addi	r5,r5,1
    4850:	393ffb1e 	bne	r7,r4,4840 <__alt_data_end+0xff004840>
    4854:	d8802304 	addi	r2,sp,140
    4858:	14c5c83a 	sub	r2,r2,r19
    485c:	d8c02344 	addi	r3,sp,141
    4860:	1885883a 	add	r2,r3,r2
    4864:	003f7006 	br	4628 <__alt_data_end+0xff004628>
    4868:	0005883a 	mov	r2,zero
    486c:	003f0f06 	br	44ac <__alt_data_end+0xff0044ac>
    4870:	d8c03217 	ldw	r3,200(sp)
    4874:	18c00044 	addi	r3,r3,1
    4878:	d8c02e15 	stw	r3,184(sp)
    487c:	1805883a 	mov	r2,r3
    4880:	183fb20e 	bge	r3,zero,474c <__alt_data_end+0xff00474c>
    4884:	0005883a 	mov	r2,zero
    4888:	003fb006 	br	474c <__alt_data_end+0xff00474c>
    488c:	d9003617 	ldw	r4,216(sp)
    4890:	000d883a 	mov	r6,zero
    4894:	000f883a 	mov	r7,zero
    4898:	980b883a 	mov	r5,r19
    489c:	d8c03c15 	stw	r3,240(sp)
    48a0:	da003d15 	stw	r8,244(sp)
    48a4:	000d0640 	call	d064 <__eqdf2>
    48a8:	d8c03c17 	ldw	r3,240(sp)
    48ac:	da003d17 	ldw	r8,244(sp)
    48b0:	103f9826 	beq	r2,zero,4714 <__alt_data_end+0xff004714>
    48b4:	00800044 	movi	r2,1
    48b8:	10c7c83a 	sub	r3,r2,r3
    48bc:	d8c02615 	stw	r3,152(sp)
    48c0:	003f9506 	br	4718 <__alt_data_end+0xff004718>
    48c4:	d9002917 	ldw	r4,164(sp)
    48c8:	d8c03217 	ldw	r3,200(sp)
    48cc:	20800044 	addi	r2,r4,1
    48d0:	1885883a 	add	r2,r3,r2
    48d4:	d8802e15 	stw	r2,184(sp)
    48d8:	103dbf0e 	bge	r2,zero,3fd8 <__alt_data_end+0xff003fd8>
    48dc:	0005883a 	mov	r2,zero
    48e0:	003dbd06 	br	3fd8 <__alt_data_end+0xff003fd8>
    48e4:	2000211e 	bne	r4,zero,496c <___vfprintf_internal_r+0x2168>
    48e8:	9480004c 	andi	r18,r18,1
    48ec:	90001f1e 	bne	r18,zero,496c <___vfprintf_internal_r+0x2168>
    48f0:	00800044 	movi	r2,1
    48f4:	d8802e15 	stw	r2,184(sp)
    48f8:	003db706 	br	3fd8 <__alt_data_end+0xff003fd8>
    48fc:	00800b44 	movi	r2,45
    4900:	05adc83a 	sub	r22,zero,r22
    4904:	d8802305 	stb	r2,140(sp)
    4908:	003f3f06 	br	4608 <__alt_data_end+0xff004608>
    490c:	0005883a 	mov	r2,zero
    4910:	003f5206 	br	465c <__alt_data_end+0xff00465c>
    4914:	90a4703a 	and	r18,r18,r2
    4918:	903f4e26 	beq	r18,zero,4654 <__alt_data_end+0xff004654>
    491c:	003f4a06 	br	4648 <__alt_data_end+0xff004648>
    4920:	00800084 	movi	r2,2
    4924:	10c5c83a 	sub	r2,r2,r3
    4928:	003f8406 	br	473c <__alt_data_end+0xff00473c>
    492c:	d8802d17 	ldw	r2,180(sp)
    4930:	d9002d17 	ldw	r4,180(sp)
    4934:	ac400043 	ldbu	r17,1(r21)
    4938:	10800017 	ldw	r2,0(r2)
    493c:	582b883a 	mov	r21,r11
    4940:	d8802915 	stw	r2,164(sp)
    4944:	20800104 	addi	r2,r4,4
    4948:	d9002917 	ldw	r4,164(sp)
    494c:	d8802d15 	stw	r2,180(sp)
    4950:	203e7a0e 	bge	r4,zero,433c <__alt_data_end+0xff00433c>
    4954:	8c403fcc 	andi	r17,r17,255
    4958:	00bfffc4 	movi	r2,-1
    495c:	8c40201c 	xori	r17,r17,128
    4960:	d8802915 	stw	r2,164(sp)
    4964:	8c7fe004 	addi	r17,r17,-128
    4968:	00380706 	br	2988 <__alt_data_end+0xff002988>
    496c:	d8c02917 	ldw	r3,164(sp)
    4970:	18c00084 	addi	r3,r3,2
    4974:	d8c02e15 	stw	r3,184(sp)
    4978:	1805883a 	mov	r2,r3
    497c:	183d960e 	bge	r3,zero,3fd8 <__alt_data_end+0xff003fd8>
    4980:	003fd606 	br	48dc <__alt_data_end+0xff0048dc>
    4984:	0005883a 	mov	r2,zero
    4988:	003f8e06 	br	47c4 <__alt_data_end+0xff0047c4>
    498c:	9080004c 	andi	r2,r18,1
    4990:	103f811e 	bne	r2,zero,4798 <__alt_data_end+0xff004798>
    4994:	d8802117 	ldw	r2,132(sp)
    4998:	1405c83a 	sub	r2,r2,r16
    499c:	d8803315 	stw	r2,204(sp)
    49a0:	b47ef326 	beq	r22,r17,4570 <__alt_data_end+0xff004570>
    49a4:	dd802617 	ldw	r22,152(sp)
    49a8:	003f1106 	br	45f0 <__alt_data_end+0xff0045f0>
    49ac:	d9c02785 	stb	r7,158(sp)
    49b0:	00390406 	br	2dc4 <__alt_data_end+0xff002dc4>
    49b4:	d9c02785 	stb	r7,158(sp)
    49b8:	0038d306 	br	2d08 <__alt_data_end+0xff002d08>
    49bc:	d9c02785 	stb	r7,158(sp)
    49c0:	003a6106 	br	3348 <__alt_data_end+0xff003348>
    49c4:	d9c02785 	stb	r7,158(sp)
    49c8:	003af806 	br	35ac <__alt_data_end+0xff0035ac>
    49cc:	0005883a 	mov	r2,zero
    49d0:	003d7e06 	br	3fcc <__alt_data_end+0xff003fcc>
    49d4:	d8802344 	addi	r2,sp,141
    49d8:	003f1306 	br	4628 <__alt_data_end+0xff004628>
    49dc:	d9c02785 	stb	r7,158(sp)
    49e0:	00392306 	br	2e70 <__alt_data_end+0xff002e70>
    49e4:	d9c02785 	stb	r7,158(sp)
    49e8:	003aa906 	br	3490 <__alt_data_end+0xff003490>
    49ec:	d9c02785 	stb	r7,158(sp)
    49f0:	003a3d06 	br	32e8 <__alt_data_end+0xff0032e8>
    49f4:	d9c02785 	stb	r7,158(sp)
    49f8:	003aca06 	br	3524 <__alt_data_end+0xff003524>

000049fc <__vfprintf_internal>:
    49fc:	00800074 	movhi	r2,1
    4a00:	108c7e04 	addi	r2,r2,12792
    4a04:	300f883a 	mov	r7,r6
    4a08:	280d883a 	mov	r6,r5
    4a0c:	200b883a 	mov	r5,r4
    4a10:	11000017 	ldw	r4,0(r2)
    4a14:	00028041 	jmpi	2804 <___vfprintf_internal_r>

00004a18 <__sbprintf>:
    4a18:	2880030b 	ldhu	r2,12(r5)
    4a1c:	2ac01917 	ldw	r11,100(r5)
    4a20:	2a80038b 	ldhu	r10,14(r5)
    4a24:	2a400717 	ldw	r9,28(r5)
    4a28:	2a000917 	ldw	r8,36(r5)
    4a2c:	defee204 	addi	sp,sp,-1144
    4a30:	00c10004 	movi	r3,1024
    4a34:	dc011a15 	stw	r16,1128(sp)
    4a38:	10bfff4c 	andi	r2,r2,65533
    4a3c:	2821883a 	mov	r16,r5
    4a40:	d8cb883a 	add	r5,sp,r3
    4a44:	dc811c15 	stw	r18,1136(sp)
    4a48:	dc411b15 	stw	r17,1132(sp)
    4a4c:	dfc11d15 	stw	ra,1140(sp)
    4a50:	2025883a 	mov	r18,r4
    4a54:	d881030d 	sth	r2,1036(sp)
    4a58:	dac11915 	stw	r11,1124(sp)
    4a5c:	da81038d 	sth	r10,1038(sp)
    4a60:	da410715 	stw	r9,1052(sp)
    4a64:	da010915 	stw	r8,1060(sp)
    4a68:	dec10015 	stw	sp,1024(sp)
    4a6c:	dec10415 	stw	sp,1040(sp)
    4a70:	d8c10215 	stw	r3,1032(sp)
    4a74:	d8c10515 	stw	r3,1044(sp)
    4a78:	d8010615 	stw	zero,1048(sp)
    4a7c:	00028040 	call	2804 <___vfprintf_internal_r>
    4a80:	1023883a 	mov	r17,r2
    4a84:	10000416 	blt	r2,zero,4a98 <__sbprintf+0x80>
    4a88:	d9410004 	addi	r5,sp,1024
    4a8c:	9009883a 	mov	r4,r18
    4a90:	00066cc0 	call	66cc <_fflush_r>
    4a94:	10000d1e 	bne	r2,zero,4acc <__sbprintf+0xb4>
    4a98:	d881030b 	ldhu	r2,1036(sp)
    4a9c:	1080100c 	andi	r2,r2,64
    4aa0:	10000326 	beq	r2,zero,4ab0 <__sbprintf+0x98>
    4aa4:	8080030b 	ldhu	r2,12(r16)
    4aa8:	10801014 	ori	r2,r2,64
    4aac:	8080030d 	sth	r2,12(r16)
    4ab0:	8805883a 	mov	r2,r17
    4ab4:	dfc11d17 	ldw	ra,1140(sp)
    4ab8:	dc811c17 	ldw	r18,1136(sp)
    4abc:	dc411b17 	ldw	r17,1132(sp)
    4ac0:	dc011a17 	ldw	r16,1128(sp)
    4ac4:	dec11e04 	addi	sp,sp,1144
    4ac8:	f800283a 	ret
    4acc:	047fffc4 	movi	r17,-1
    4ad0:	003ff106 	br	4a98 <__alt_data_end+0xff004a98>

00004ad4 <__swsetup_r>:
    4ad4:	00800074 	movhi	r2,1
    4ad8:	defffd04 	addi	sp,sp,-12
    4adc:	108c7e04 	addi	r2,r2,12792
    4ae0:	dc400115 	stw	r17,4(sp)
    4ae4:	2023883a 	mov	r17,r4
    4ae8:	11000017 	ldw	r4,0(r2)
    4aec:	dc000015 	stw	r16,0(sp)
    4af0:	dfc00215 	stw	ra,8(sp)
    4af4:	2821883a 	mov	r16,r5
    4af8:	20000226 	beq	r4,zero,4b04 <__swsetup_r+0x30>
    4afc:	20800e17 	ldw	r2,56(r4)
    4b00:	10003126 	beq	r2,zero,4bc8 <__swsetup_r+0xf4>
    4b04:	8080030b 	ldhu	r2,12(r16)
    4b08:	10c0020c 	andi	r3,r2,8
    4b0c:	1009883a 	mov	r4,r2
    4b10:	18000f26 	beq	r3,zero,4b50 <__swsetup_r+0x7c>
    4b14:	80c00417 	ldw	r3,16(r16)
    4b18:	18001526 	beq	r3,zero,4b70 <__swsetup_r+0x9c>
    4b1c:	1100004c 	andi	r4,r2,1
    4b20:	20001c1e 	bne	r4,zero,4b94 <__swsetup_r+0xc0>
    4b24:	1080008c 	andi	r2,r2,2
    4b28:	1000291e 	bne	r2,zero,4bd0 <__swsetup_r+0xfc>
    4b2c:	80800517 	ldw	r2,20(r16)
    4b30:	80800215 	stw	r2,8(r16)
    4b34:	18001c26 	beq	r3,zero,4ba8 <__swsetup_r+0xd4>
    4b38:	0005883a 	mov	r2,zero
    4b3c:	dfc00217 	ldw	ra,8(sp)
    4b40:	dc400117 	ldw	r17,4(sp)
    4b44:	dc000017 	ldw	r16,0(sp)
    4b48:	dec00304 	addi	sp,sp,12
    4b4c:	f800283a 	ret
    4b50:	2080040c 	andi	r2,r4,16
    4b54:	10002e26 	beq	r2,zero,4c10 <__swsetup_r+0x13c>
    4b58:	2080010c 	andi	r2,r4,4
    4b5c:	10001e1e 	bne	r2,zero,4bd8 <__swsetup_r+0x104>
    4b60:	80c00417 	ldw	r3,16(r16)
    4b64:	20800214 	ori	r2,r4,8
    4b68:	8080030d 	sth	r2,12(r16)
    4b6c:	183feb1e 	bne	r3,zero,4b1c <__alt_data_end+0xff004b1c>
    4b70:	1100a00c 	andi	r4,r2,640
    4b74:	01408004 	movi	r5,512
    4b78:	217fe826 	beq	r4,r5,4b1c <__alt_data_end+0xff004b1c>
    4b7c:	800b883a 	mov	r5,r16
    4b80:	8809883a 	mov	r4,r17
    4b84:	000764c0 	call	764c <__smakebuf_r>
    4b88:	8080030b 	ldhu	r2,12(r16)
    4b8c:	80c00417 	ldw	r3,16(r16)
    4b90:	003fe206 	br	4b1c <__alt_data_end+0xff004b1c>
    4b94:	80800517 	ldw	r2,20(r16)
    4b98:	80000215 	stw	zero,8(r16)
    4b9c:	0085c83a 	sub	r2,zero,r2
    4ba0:	80800615 	stw	r2,24(r16)
    4ba4:	183fe41e 	bne	r3,zero,4b38 <__alt_data_end+0xff004b38>
    4ba8:	80c0030b 	ldhu	r3,12(r16)
    4bac:	0005883a 	mov	r2,zero
    4bb0:	1900200c 	andi	r4,r3,128
    4bb4:	203fe126 	beq	r4,zero,4b3c <__alt_data_end+0xff004b3c>
    4bb8:	18c01014 	ori	r3,r3,64
    4bbc:	80c0030d 	sth	r3,12(r16)
    4bc0:	00bfffc4 	movi	r2,-1
    4bc4:	003fdd06 	br	4b3c <__alt_data_end+0xff004b3c>
    4bc8:	0006aa80 	call	6aa8 <__sinit>
    4bcc:	003fcd06 	br	4b04 <__alt_data_end+0xff004b04>
    4bd0:	0005883a 	mov	r2,zero
    4bd4:	003fd606 	br	4b30 <__alt_data_end+0xff004b30>
    4bd8:	81400c17 	ldw	r5,48(r16)
    4bdc:	28000626 	beq	r5,zero,4bf8 <__swsetup_r+0x124>
    4be0:	80801004 	addi	r2,r16,64
    4be4:	28800326 	beq	r5,r2,4bf4 <__swsetup_r+0x120>
    4be8:	8809883a 	mov	r4,r17
    4bec:	0006c1c0 	call	6c1c <_free_r>
    4bf0:	8100030b 	ldhu	r4,12(r16)
    4bf4:	80000c15 	stw	zero,48(r16)
    4bf8:	80c00417 	ldw	r3,16(r16)
    4bfc:	00bff6c4 	movi	r2,-37
    4c00:	1108703a 	and	r4,r2,r4
    4c04:	80000115 	stw	zero,4(r16)
    4c08:	80c00015 	stw	r3,0(r16)
    4c0c:	003fd506 	br	4b64 <__alt_data_end+0xff004b64>
    4c10:	00800244 	movi	r2,9
    4c14:	88800015 	stw	r2,0(r17)
    4c18:	20801014 	ori	r2,r4,64
    4c1c:	8080030d 	sth	r2,12(r16)
    4c20:	00bfffc4 	movi	r2,-1
    4c24:	003fc506 	br	4b3c <__alt_data_end+0xff004b3c>

00004c28 <quorem>:
    4c28:	defff704 	addi	sp,sp,-36
    4c2c:	dc800215 	stw	r18,8(sp)
    4c30:	20800417 	ldw	r2,16(r4)
    4c34:	2c800417 	ldw	r18,16(r5)
    4c38:	dfc00815 	stw	ra,32(sp)
    4c3c:	ddc00715 	stw	r23,28(sp)
    4c40:	dd800615 	stw	r22,24(sp)
    4c44:	dd400515 	stw	r21,20(sp)
    4c48:	dd000415 	stw	r20,16(sp)
    4c4c:	dcc00315 	stw	r19,12(sp)
    4c50:	dc400115 	stw	r17,4(sp)
    4c54:	dc000015 	stw	r16,0(sp)
    4c58:	14807116 	blt	r2,r18,4e20 <quorem+0x1f8>
    4c5c:	94bfffc4 	addi	r18,r18,-1
    4c60:	94ad883a 	add	r22,r18,r18
    4c64:	b5ad883a 	add	r22,r22,r22
    4c68:	2c400504 	addi	r17,r5,20
    4c6c:	8da9883a 	add	r20,r17,r22
    4c70:	25400504 	addi	r21,r4,20
    4c74:	282f883a 	mov	r23,r5
    4c78:	adad883a 	add	r22,r21,r22
    4c7c:	a1400017 	ldw	r5,0(r20)
    4c80:	2021883a 	mov	r16,r4
    4c84:	b1000017 	ldw	r4,0(r22)
    4c88:	29400044 	addi	r5,r5,1
    4c8c:	0001ce80 	call	1ce8 <__udivsi3>
    4c90:	1027883a 	mov	r19,r2
    4c94:	10002c26 	beq	r2,zero,4d48 <quorem+0x120>
    4c98:	a813883a 	mov	r9,r21
    4c9c:	880b883a 	mov	r5,r17
    4ca0:	0009883a 	mov	r4,zero
    4ca4:	000d883a 	mov	r6,zero
    4ca8:	2a000017 	ldw	r8,0(r5)
    4cac:	49c00017 	ldw	r7,0(r9)
    4cb0:	29400104 	addi	r5,r5,4
    4cb4:	40bfffcc 	andi	r2,r8,65535
    4cb8:	14c5383a 	mul	r2,r2,r19
    4cbc:	4010d43a 	srli	r8,r8,16
    4cc0:	38ffffcc 	andi	r3,r7,65535
    4cc4:	1105883a 	add	r2,r2,r4
    4cc8:	1008d43a 	srli	r4,r2,16
    4ccc:	44d1383a 	mul	r8,r8,r19
    4cd0:	198d883a 	add	r6,r3,r6
    4cd4:	10ffffcc 	andi	r3,r2,65535
    4cd8:	30c7c83a 	sub	r3,r6,r3
    4cdc:	380ed43a 	srli	r7,r7,16
    4ce0:	4105883a 	add	r2,r8,r4
    4ce4:	180dd43a 	srai	r6,r3,16
    4ce8:	113fffcc 	andi	r4,r2,65535
    4cec:	390fc83a 	sub	r7,r7,r4
    4cf0:	398d883a 	add	r6,r7,r6
    4cf4:	300e943a 	slli	r7,r6,16
    4cf8:	18ffffcc 	andi	r3,r3,65535
    4cfc:	1008d43a 	srli	r4,r2,16
    4d00:	38ceb03a 	or	r7,r7,r3
    4d04:	49c00015 	stw	r7,0(r9)
    4d08:	300dd43a 	srai	r6,r6,16
    4d0c:	4a400104 	addi	r9,r9,4
    4d10:	a17fe52e 	bgeu	r20,r5,4ca8 <__alt_data_end+0xff004ca8>
    4d14:	b0800017 	ldw	r2,0(r22)
    4d18:	10000b1e 	bne	r2,zero,4d48 <quorem+0x120>
    4d1c:	b0bfff04 	addi	r2,r22,-4
    4d20:	a880082e 	bgeu	r21,r2,4d44 <quorem+0x11c>
    4d24:	b0ffff17 	ldw	r3,-4(r22)
    4d28:	18000326 	beq	r3,zero,4d38 <quorem+0x110>
    4d2c:	00000506 	br	4d44 <quorem+0x11c>
    4d30:	10c00017 	ldw	r3,0(r2)
    4d34:	1800031e 	bne	r3,zero,4d44 <quorem+0x11c>
    4d38:	10bfff04 	addi	r2,r2,-4
    4d3c:	94bfffc4 	addi	r18,r18,-1
    4d40:	a8bffb36 	bltu	r21,r2,4d30 <__alt_data_end+0xff004d30>
    4d44:	84800415 	stw	r18,16(r16)
    4d48:	b80b883a 	mov	r5,r23
    4d4c:	8009883a 	mov	r4,r16
    4d50:	00085800 	call	8580 <__mcmp>
    4d54:	10002616 	blt	r2,zero,4df0 <quorem+0x1c8>
    4d58:	9cc00044 	addi	r19,r19,1
    4d5c:	a805883a 	mov	r2,r21
    4d60:	000b883a 	mov	r5,zero
    4d64:	11000017 	ldw	r4,0(r2)
    4d68:	89800017 	ldw	r6,0(r17)
    4d6c:	10800104 	addi	r2,r2,4
    4d70:	20ffffcc 	andi	r3,r4,65535
    4d74:	194b883a 	add	r5,r3,r5
    4d78:	30ffffcc 	andi	r3,r6,65535
    4d7c:	28c7c83a 	sub	r3,r5,r3
    4d80:	300cd43a 	srli	r6,r6,16
    4d84:	2008d43a 	srli	r4,r4,16
    4d88:	180bd43a 	srai	r5,r3,16
    4d8c:	18ffffcc 	andi	r3,r3,65535
    4d90:	2189c83a 	sub	r4,r4,r6
    4d94:	2149883a 	add	r4,r4,r5
    4d98:	200c943a 	slli	r6,r4,16
    4d9c:	8c400104 	addi	r17,r17,4
    4da0:	200bd43a 	srai	r5,r4,16
    4da4:	30c6b03a 	or	r3,r6,r3
    4da8:	10ffff15 	stw	r3,-4(r2)
    4dac:	a47fed2e 	bgeu	r20,r17,4d64 <__alt_data_end+0xff004d64>
    4db0:	9485883a 	add	r2,r18,r18
    4db4:	1085883a 	add	r2,r2,r2
    4db8:	a887883a 	add	r3,r21,r2
    4dbc:	18800017 	ldw	r2,0(r3)
    4dc0:	10000b1e 	bne	r2,zero,4df0 <quorem+0x1c8>
    4dc4:	18bfff04 	addi	r2,r3,-4
    4dc8:	a880082e 	bgeu	r21,r2,4dec <quorem+0x1c4>
    4dcc:	18ffff17 	ldw	r3,-4(r3)
    4dd0:	18000326 	beq	r3,zero,4de0 <quorem+0x1b8>
    4dd4:	00000506 	br	4dec <quorem+0x1c4>
    4dd8:	10c00017 	ldw	r3,0(r2)
    4ddc:	1800031e 	bne	r3,zero,4dec <quorem+0x1c4>
    4de0:	10bfff04 	addi	r2,r2,-4
    4de4:	94bfffc4 	addi	r18,r18,-1
    4de8:	a8bffb36 	bltu	r21,r2,4dd8 <__alt_data_end+0xff004dd8>
    4dec:	84800415 	stw	r18,16(r16)
    4df0:	9805883a 	mov	r2,r19
    4df4:	dfc00817 	ldw	ra,32(sp)
    4df8:	ddc00717 	ldw	r23,28(sp)
    4dfc:	dd800617 	ldw	r22,24(sp)
    4e00:	dd400517 	ldw	r21,20(sp)
    4e04:	dd000417 	ldw	r20,16(sp)
    4e08:	dcc00317 	ldw	r19,12(sp)
    4e0c:	dc800217 	ldw	r18,8(sp)
    4e10:	dc400117 	ldw	r17,4(sp)
    4e14:	dc000017 	ldw	r16,0(sp)
    4e18:	dec00904 	addi	sp,sp,36
    4e1c:	f800283a 	ret
    4e20:	0005883a 	mov	r2,zero
    4e24:	003ff306 	br	4df4 <__alt_data_end+0xff004df4>

00004e28 <_dtoa_r>:
    4e28:	20801017 	ldw	r2,64(r4)
    4e2c:	deffde04 	addi	sp,sp,-136
    4e30:	df002015 	stw	fp,128(sp)
    4e34:	dcc01b15 	stw	r19,108(sp)
    4e38:	dc801a15 	stw	r18,104(sp)
    4e3c:	dc401915 	stw	r17,100(sp)
    4e40:	dc001815 	stw	r16,96(sp)
    4e44:	dfc02115 	stw	ra,132(sp)
    4e48:	ddc01f15 	stw	r23,124(sp)
    4e4c:	dd801e15 	stw	r22,120(sp)
    4e50:	dd401d15 	stw	r21,116(sp)
    4e54:	dd001c15 	stw	r20,112(sp)
    4e58:	d9c00315 	stw	r7,12(sp)
    4e5c:	2039883a 	mov	fp,r4
    4e60:	3023883a 	mov	r17,r6
    4e64:	2825883a 	mov	r18,r5
    4e68:	dc002417 	ldw	r16,144(sp)
    4e6c:	3027883a 	mov	r19,r6
    4e70:	10000826 	beq	r2,zero,4e94 <_dtoa_r+0x6c>
    4e74:	21801117 	ldw	r6,68(r4)
    4e78:	00c00044 	movi	r3,1
    4e7c:	100b883a 	mov	r5,r2
    4e80:	1986983a 	sll	r3,r3,r6
    4e84:	11800115 	stw	r6,4(r2)
    4e88:	10c00215 	stw	r3,8(r2)
    4e8c:	0007d600 	call	7d60 <_Bfree>
    4e90:	e0001015 	stw	zero,64(fp)
    4e94:	88002e16 	blt	r17,zero,4f50 <_dtoa_r+0x128>
    4e98:	80000015 	stw	zero,0(r16)
    4e9c:	889ffc2c 	andhi	r2,r17,32752
    4ea0:	00dffc34 	movhi	r3,32752
    4ea4:	10c01c26 	beq	r2,r3,4f18 <_dtoa_r+0xf0>
    4ea8:	000d883a 	mov	r6,zero
    4eac:	000f883a 	mov	r7,zero
    4eb0:	9009883a 	mov	r4,r18
    4eb4:	980b883a 	mov	r5,r19
    4eb8:	000d0640 	call	d064 <__eqdf2>
    4ebc:	10002b1e 	bne	r2,zero,4f6c <_dtoa_r+0x144>
    4ec0:	d9c02317 	ldw	r7,140(sp)
    4ec4:	00800044 	movi	r2,1
    4ec8:	38800015 	stw	r2,0(r7)
    4ecc:	d8802517 	ldw	r2,148(sp)
    4ed0:	10019e26 	beq	r2,zero,554c <_dtoa_r+0x724>
    4ed4:	d8c02517 	ldw	r3,148(sp)
    4ed8:	00800074 	movhi	r2,1
    4edc:	10852344 	addi	r2,r2,5261
    4ee0:	18800015 	stw	r2,0(r3)
    4ee4:	10bfffc4 	addi	r2,r2,-1
    4ee8:	dfc02117 	ldw	ra,132(sp)
    4eec:	df002017 	ldw	fp,128(sp)
    4ef0:	ddc01f17 	ldw	r23,124(sp)
    4ef4:	dd801e17 	ldw	r22,120(sp)
    4ef8:	dd401d17 	ldw	r21,116(sp)
    4efc:	dd001c17 	ldw	r20,112(sp)
    4f00:	dcc01b17 	ldw	r19,108(sp)
    4f04:	dc801a17 	ldw	r18,104(sp)
    4f08:	dc401917 	ldw	r17,100(sp)
    4f0c:	dc001817 	ldw	r16,96(sp)
    4f10:	dec02204 	addi	sp,sp,136
    4f14:	f800283a 	ret
    4f18:	d8c02317 	ldw	r3,140(sp)
    4f1c:	0089c3c4 	movi	r2,9999
    4f20:	18800015 	stw	r2,0(r3)
    4f24:	90017726 	beq	r18,zero,5504 <_dtoa_r+0x6dc>
    4f28:	00800074 	movhi	r2,1
    4f2c:	10852f04 	addi	r2,r2,5308
    4f30:	d9002517 	ldw	r4,148(sp)
    4f34:	203fec26 	beq	r4,zero,4ee8 <__alt_data_end+0xff004ee8>
    4f38:	10c000c7 	ldb	r3,3(r2)
    4f3c:	1801781e 	bne	r3,zero,5520 <_dtoa_r+0x6f8>
    4f40:	10c000c4 	addi	r3,r2,3
    4f44:	d9802517 	ldw	r6,148(sp)
    4f48:	30c00015 	stw	r3,0(r6)
    4f4c:	003fe606 	br	4ee8 <__alt_data_end+0xff004ee8>
    4f50:	04e00034 	movhi	r19,32768
    4f54:	9cffffc4 	addi	r19,r19,-1
    4f58:	00800044 	movi	r2,1
    4f5c:	8ce6703a 	and	r19,r17,r19
    4f60:	80800015 	stw	r2,0(r16)
    4f64:	9823883a 	mov	r17,r19
    4f68:	003fcc06 	br	4e9c <__alt_data_end+0xff004e9c>
    4f6c:	d8800204 	addi	r2,sp,8
    4f70:	d8800015 	stw	r2,0(sp)
    4f74:	d9c00104 	addi	r7,sp,4
    4f78:	900b883a 	mov	r5,r18
    4f7c:	980d883a 	mov	r6,r19
    4f80:	e009883a 	mov	r4,fp
    4f84:	8820d53a 	srli	r16,r17,20
    4f88:	000894c0 	call	894c <__d2b>
    4f8c:	d8800915 	stw	r2,36(sp)
    4f90:	8001651e 	bne	r16,zero,5528 <_dtoa_r+0x700>
    4f94:	dd800217 	ldw	r22,8(sp)
    4f98:	dc000117 	ldw	r16,4(sp)
    4f9c:	00800804 	movi	r2,32
    4fa0:	b421883a 	add	r16,r22,r16
    4fa4:	80c10c84 	addi	r3,r16,1074
    4fa8:	10c2d10e 	bge	r2,r3,5af0 <_dtoa_r+0xcc8>
    4fac:	00801004 	movi	r2,64
    4fb0:	81010484 	addi	r4,r16,1042
    4fb4:	10c7c83a 	sub	r3,r2,r3
    4fb8:	9108d83a 	srl	r4,r18,r4
    4fbc:	88e2983a 	sll	r17,r17,r3
    4fc0:	2448b03a 	or	r4,r4,r17
    4fc4:	000e42c0 	call	e42c <__floatunsidf>
    4fc8:	017f8434 	movhi	r5,65040
    4fcc:	01800044 	movi	r6,1
    4fd0:	1009883a 	mov	r4,r2
    4fd4:	194b883a 	add	r5,r3,r5
    4fd8:	843fffc4 	addi	r16,r16,-1
    4fdc:	d9801115 	stw	r6,68(sp)
    4fe0:	000d883a 	mov	r6,zero
    4fe4:	01cffe34 	movhi	r7,16376
    4fe8:	000d9d40 	call	d9d4 <__subdf3>
    4fec:	0198dbf4 	movhi	r6,25455
    4ff0:	01cff4f4 	movhi	r7,16339
    4ff4:	3190d844 	addi	r6,r6,17249
    4ff8:	39e1e9c4 	addi	r7,r7,-30809
    4ffc:	1009883a 	mov	r4,r2
    5000:	180b883a 	mov	r5,r3
    5004:	000d2bc0 	call	d2bc <__muldf3>
    5008:	01a2d874 	movhi	r6,35681
    500c:	01cff1f4 	movhi	r7,16327
    5010:	31b22cc4 	addi	r6,r6,-14157
    5014:	39e28a04 	addi	r7,r7,-30168
    5018:	180b883a 	mov	r5,r3
    501c:	1009883a 	mov	r4,r2
    5020:	000bed00 	call	bed0 <__adddf3>
    5024:	8009883a 	mov	r4,r16
    5028:	1029883a 	mov	r20,r2
    502c:	1823883a 	mov	r17,r3
    5030:	000e3500 	call	e350 <__floatsidf>
    5034:	019427f4 	movhi	r6,20639
    5038:	01cff4f4 	movhi	r7,16339
    503c:	319e7ec4 	addi	r6,r6,31227
    5040:	39d104c4 	addi	r7,r7,17427
    5044:	1009883a 	mov	r4,r2
    5048:	180b883a 	mov	r5,r3
    504c:	000d2bc0 	call	d2bc <__muldf3>
    5050:	100d883a 	mov	r6,r2
    5054:	180f883a 	mov	r7,r3
    5058:	a009883a 	mov	r4,r20
    505c:	880b883a 	mov	r5,r17
    5060:	000bed00 	call	bed0 <__adddf3>
    5064:	1009883a 	mov	r4,r2
    5068:	180b883a 	mov	r5,r3
    506c:	1029883a 	mov	r20,r2
    5070:	1823883a 	mov	r17,r3
    5074:	000e2d00 	call	e2d0 <__fixdfsi>
    5078:	000d883a 	mov	r6,zero
    507c:	000f883a 	mov	r7,zero
    5080:	a009883a 	mov	r4,r20
    5084:	880b883a 	mov	r5,r17
    5088:	d8800515 	stw	r2,20(sp)
    508c:	000d1c80 	call	d1c8 <__ledf2>
    5090:	10028716 	blt	r2,zero,5ab0 <_dtoa_r+0xc88>
    5094:	d8c00517 	ldw	r3,20(sp)
    5098:	00800584 	movi	r2,22
    509c:	10c27536 	bltu	r2,r3,5a74 <_dtoa_r+0xc4c>
    50a0:	180490fa 	slli	r2,r3,3
    50a4:	00c00074 	movhi	r3,1
    50a8:	18c54b04 	addi	r3,r3,5420
    50ac:	1885883a 	add	r2,r3,r2
    50b0:	11000017 	ldw	r4,0(r2)
    50b4:	11400117 	ldw	r5,4(r2)
    50b8:	900d883a 	mov	r6,r18
    50bc:	980f883a 	mov	r7,r19
    50c0:	000d0ec0 	call	d0ec <__gedf2>
    50c4:	00828d0e 	bge	zero,r2,5afc <_dtoa_r+0xcd4>
    50c8:	d9000517 	ldw	r4,20(sp)
    50cc:	d8000e15 	stw	zero,56(sp)
    50d0:	213fffc4 	addi	r4,r4,-1
    50d4:	d9000515 	stw	r4,20(sp)
    50d8:	b42dc83a 	sub	r22,r22,r16
    50dc:	b5bfffc4 	addi	r22,r22,-1
    50e0:	b0026f16 	blt	r22,zero,5aa0 <_dtoa_r+0xc78>
    50e4:	d8000815 	stw	zero,32(sp)
    50e8:	d9c00517 	ldw	r7,20(sp)
    50ec:	38026416 	blt	r7,zero,5a80 <_dtoa_r+0xc58>
    50f0:	b1ed883a 	add	r22,r22,r7
    50f4:	d9c00d15 	stw	r7,52(sp)
    50f8:	d8000a15 	stw	zero,40(sp)
    50fc:	d9800317 	ldw	r6,12(sp)
    5100:	00800244 	movi	r2,9
    5104:	11811436 	bltu	r2,r6,5558 <_dtoa_r+0x730>
    5108:	00800144 	movi	r2,5
    510c:	1184e10e 	bge	r2,r6,6494 <_dtoa_r+0x166c>
    5110:	31bfff04 	addi	r6,r6,-4
    5114:	d9800315 	stw	r6,12(sp)
    5118:	0023883a 	mov	r17,zero
    511c:	d9800317 	ldw	r6,12(sp)
    5120:	008000c4 	movi	r2,3
    5124:	30836726 	beq	r6,r2,5ec4 <_dtoa_r+0x109c>
    5128:	1183410e 	bge	r2,r6,5e30 <_dtoa_r+0x1008>
    512c:	d9c00317 	ldw	r7,12(sp)
    5130:	00800104 	movi	r2,4
    5134:	38827c26 	beq	r7,r2,5b28 <_dtoa_r+0xd00>
    5138:	00800144 	movi	r2,5
    513c:	3884c41e 	bne	r7,r2,6450 <_dtoa_r+0x1628>
    5140:	00800044 	movi	r2,1
    5144:	d8800b15 	stw	r2,44(sp)
    5148:	d8c00517 	ldw	r3,20(sp)
    514c:	d9002217 	ldw	r4,136(sp)
    5150:	1907883a 	add	r3,r3,r4
    5154:	19800044 	addi	r6,r3,1
    5158:	d8c00c15 	stw	r3,48(sp)
    515c:	d9800615 	stw	r6,24(sp)
    5160:	0183a40e 	bge	zero,r6,5ff4 <_dtoa_r+0x11cc>
    5164:	d9800617 	ldw	r6,24(sp)
    5168:	3021883a 	mov	r16,r6
    516c:	e0001115 	stw	zero,68(fp)
    5170:	008005c4 	movi	r2,23
    5174:	1184c92e 	bgeu	r2,r6,649c <_dtoa_r+0x1674>
    5178:	00c00044 	movi	r3,1
    517c:	00800104 	movi	r2,4
    5180:	1085883a 	add	r2,r2,r2
    5184:	11000504 	addi	r4,r2,20
    5188:	180b883a 	mov	r5,r3
    518c:	18c00044 	addi	r3,r3,1
    5190:	313ffb2e 	bgeu	r6,r4,5180 <__alt_data_end+0xff005180>
    5194:	e1401115 	stw	r5,68(fp)
    5198:	e009883a 	mov	r4,fp
    519c:	0007cb80 	call	7cb8 <_Balloc>
    51a0:	d8800715 	stw	r2,28(sp)
    51a4:	e0801015 	stw	r2,64(fp)
    51a8:	00800384 	movi	r2,14
    51ac:	1400f736 	bltu	r2,r16,558c <_dtoa_r+0x764>
    51b0:	8800f626 	beq	r17,zero,558c <_dtoa_r+0x764>
    51b4:	d9c00517 	ldw	r7,20(sp)
    51b8:	01c39a0e 	bge	zero,r7,6024 <_dtoa_r+0x11fc>
    51bc:	388003cc 	andi	r2,r7,15
    51c0:	100490fa 	slli	r2,r2,3
    51c4:	382bd13a 	srai	r21,r7,4
    51c8:	00c00074 	movhi	r3,1
    51cc:	18c54b04 	addi	r3,r3,5420
    51d0:	1885883a 	add	r2,r3,r2
    51d4:	a8c0040c 	andi	r3,r21,16
    51d8:	12400017 	ldw	r9,0(r2)
    51dc:	12000117 	ldw	r8,4(r2)
    51e0:	18037926 	beq	r3,zero,5fc8 <_dtoa_r+0x11a0>
    51e4:	00800074 	movhi	r2,1
    51e8:	10854104 	addi	r2,r2,5380
    51ec:	11800817 	ldw	r6,32(r2)
    51f0:	11c00917 	ldw	r7,36(r2)
    51f4:	9009883a 	mov	r4,r18
    51f8:	980b883a 	mov	r5,r19
    51fc:	da001715 	stw	r8,92(sp)
    5200:	da401615 	stw	r9,88(sp)
    5204:	000c77c0 	call	c77c <__divdf3>
    5208:	da001717 	ldw	r8,92(sp)
    520c:	da401617 	ldw	r9,88(sp)
    5210:	ad4003cc 	andi	r21,r21,15
    5214:	040000c4 	movi	r16,3
    5218:	1023883a 	mov	r17,r2
    521c:	1829883a 	mov	r20,r3
    5220:	a8001126 	beq	r21,zero,5268 <_dtoa_r+0x440>
    5224:	05c00074 	movhi	r23,1
    5228:	bdc54104 	addi	r23,r23,5380
    522c:	4805883a 	mov	r2,r9
    5230:	4007883a 	mov	r3,r8
    5234:	a980004c 	andi	r6,r21,1
    5238:	1009883a 	mov	r4,r2
    523c:	a82bd07a 	srai	r21,r21,1
    5240:	180b883a 	mov	r5,r3
    5244:	30000426 	beq	r6,zero,5258 <_dtoa_r+0x430>
    5248:	b9800017 	ldw	r6,0(r23)
    524c:	b9c00117 	ldw	r7,4(r23)
    5250:	84000044 	addi	r16,r16,1
    5254:	000d2bc0 	call	d2bc <__muldf3>
    5258:	bdc00204 	addi	r23,r23,8
    525c:	a83ff51e 	bne	r21,zero,5234 <__alt_data_end+0xff005234>
    5260:	1013883a 	mov	r9,r2
    5264:	1811883a 	mov	r8,r3
    5268:	480d883a 	mov	r6,r9
    526c:	400f883a 	mov	r7,r8
    5270:	8809883a 	mov	r4,r17
    5274:	a00b883a 	mov	r5,r20
    5278:	000c77c0 	call	c77c <__divdf3>
    527c:	d8800f15 	stw	r2,60(sp)
    5280:	d8c01015 	stw	r3,64(sp)
    5284:	d8c00e17 	ldw	r3,56(sp)
    5288:	18000626 	beq	r3,zero,52a4 <_dtoa_r+0x47c>
    528c:	d9000f17 	ldw	r4,60(sp)
    5290:	d9401017 	ldw	r5,64(sp)
    5294:	000d883a 	mov	r6,zero
    5298:	01cffc34 	movhi	r7,16368
    529c:	000d1c80 	call	d1c8 <__ledf2>
    52a0:	10040b16 	blt	r2,zero,62d0 <_dtoa_r+0x14a8>
    52a4:	8009883a 	mov	r4,r16
    52a8:	000e3500 	call	e350 <__floatsidf>
    52ac:	d9800f17 	ldw	r6,60(sp)
    52b0:	d9c01017 	ldw	r7,64(sp)
    52b4:	1009883a 	mov	r4,r2
    52b8:	180b883a 	mov	r5,r3
    52bc:	000d2bc0 	call	d2bc <__muldf3>
    52c0:	000d883a 	mov	r6,zero
    52c4:	01d00734 	movhi	r7,16412
    52c8:	1009883a 	mov	r4,r2
    52cc:	180b883a 	mov	r5,r3
    52d0:	000bed00 	call	bed0 <__adddf3>
    52d4:	1021883a 	mov	r16,r2
    52d8:	d8800617 	ldw	r2,24(sp)
    52dc:	047f3034 	movhi	r17,64704
    52e0:	1c63883a 	add	r17,r3,r17
    52e4:	10031826 	beq	r2,zero,5f48 <_dtoa_r+0x1120>
    52e8:	d8c00517 	ldw	r3,20(sp)
    52ec:	db000617 	ldw	r12,24(sp)
    52f0:	d8c01315 	stw	r3,76(sp)
    52f4:	d9000b17 	ldw	r4,44(sp)
    52f8:	20038f26 	beq	r4,zero,6138 <_dtoa_r+0x1310>
    52fc:	60bfffc4 	addi	r2,r12,-1
    5300:	100490fa 	slli	r2,r2,3
    5304:	00c00074 	movhi	r3,1
    5308:	18c54b04 	addi	r3,r3,5420
    530c:	1885883a 	add	r2,r3,r2
    5310:	11800017 	ldw	r6,0(r2)
    5314:	11c00117 	ldw	r7,4(r2)
    5318:	d8800717 	ldw	r2,28(sp)
    531c:	0009883a 	mov	r4,zero
    5320:	014ff834 	movhi	r5,16352
    5324:	db001615 	stw	r12,88(sp)
    5328:	15c00044 	addi	r23,r2,1
    532c:	000c77c0 	call	c77c <__divdf3>
    5330:	800d883a 	mov	r6,r16
    5334:	880f883a 	mov	r7,r17
    5338:	1009883a 	mov	r4,r2
    533c:	180b883a 	mov	r5,r3
    5340:	000d9d40 	call	d9d4 <__subdf3>
    5344:	d9401017 	ldw	r5,64(sp)
    5348:	d9000f17 	ldw	r4,60(sp)
    534c:	102b883a 	mov	r21,r2
    5350:	d8c01215 	stw	r3,72(sp)
    5354:	000e2d00 	call	e2d0 <__fixdfsi>
    5358:	1009883a 	mov	r4,r2
    535c:	1029883a 	mov	r20,r2
    5360:	000e3500 	call	e350 <__floatsidf>
    5364:	d9000f17 	ldw	r4,60(sp)
    5368:	d9401017 	ldw	r5,64(sp)
    536c:	100d883a 	mov	r6,r2
    5370:	180f883a 	mov	r7,r3
    5374:	000d9d40 	call	d9d4 <__subdf3>
    5378:	1823883a 	mov	r17,r3
    537c:	d8c00717 	ldw	r3,28(sp)
    5380:	d9401217 	ldw	r5,72(sp)
    5384:	a2000c04 	addi	r8,r20,48
    5388:	1021883a 	mov	r16,r2
    538c:	1a000005 	stb	r8,0(r3)
    5390:	800d883a 	mov	r6,r16
    5394:	880f883a 	mov	r7,r17
    5398:	a809883a 	mov	r4,r21
    539c:	4029883a 	mov	r20,r8
    53a0:	000d0ec0 	call	d0ec <__gedf2>
    53a4:	00841d16 	blt	zero,r2,641c <_dtoa_r+0x15f4>
    53a8:	800d883a 	mov	r6,r16
    53ac:	880f883a 	mov	r7,r17
    53b0:	0009883a 	mov	r4,zero
    53b4:	014ffc34 	movhi	r5,16368
    53b8:	000d9d40 	call	d9d4 <__subdf3>
    53bc:	d9401217 	ldw	r5,72(sp)
    53c0:	100d883a 	mov	r6,r2
    53c4:	180f883a 	mov	r7,r3
    53c8:	a809883a 	mov	r4,r21
    53cc:	000d0ec0 	call	d0ec <__gedf2>
    53d0:	db001617 	ldw	r12,88(sp)
    53d4:	00840e16 	blt	zero,r2,6410 <_dtoa_r+0x15e8>
    53d8:	00800044 	movi	r2,1
    53dc:	13006b0e 	bge	r2,r12,558c <_dtoa_r+0x764>
    53e0:	d9000717 	ldw	r4,28(sp)
    53e4:	dd800f15 	stw	r22,60(sp)
    53e8:	dcc01015 	stw	r19,64(sp)
    53ec:	2319883a 	add	r12,r4,r12
    53f0:	dcc01217 	ldw	r19,72(sp)
    53f4:	602d883a 	mov	r22,r12
    53f8:	dc801215 	stw	r18,72(sp)
    53fc:	b825883a 	mov	r18,r23
    5400:	00000906 	br	5428 <_dtoa_r+0x600>
    5404:	000d9d40 	call	d9d4 <__subdf3>
    5408:	a80d883a 	mov	r6,r21
    540c:	980f883a 	mov	r7,r19
    5410:	1009883a 	mov	r4,r2
    5414:	180b883a 	mov	r5,r3
    5418:	000d1c80 	call	d1c8 <__ledf2>
    541c:	1003e816 	blt	r2,zero,63c0 <_dtoa_r+0x1598>
    5420:	b825883a 	mov	r18,r23
    5424:	bd83e926 	beq	r23,r22,63cc <_dtoa_r+0x15a4>
    5428:	a809883a 	mov	r4,r21
    542c:	980b883a 	mov	r5,r19
    5430:	000d883a 	mov	r6,zero
    5434:	01d00934 	movhi	r7,16420
    5438:	000d2bc0 	call	d2bc <__muldf3>
    543c:	000d883a 	mov	r6,zero
    5440:	01d00934 	movhi	r7,16420
    5444:	8009883a 	mov	r4,r16
    5448:	880b883a 	mov	r5,r17
    544c:	102b883a 	mov	r21,r2
    5450:	1827883a 	mov	r19,r3
    5454:	000d2bc0 	call	d2bc <__muldf3>
    5458:	180b883a 	mov	r5,r3
    545c:	1009883a 	mov	r4,r2
    5460:	1821883a 	mov	r16,r3
    5464:	1023883a 	mov	r17,r2
    5468:	000e2d00 	call	e2d0 <__fixdfsi>
    546c:	1009883a 	mov	r4,r2
    5470:	1029883a 	mov	r20,r2
    5474:	000e3500 	call	e350 <__floatsidf>
    5478:	8809883a 	mov	r4,r17
    547c:	800b883a 	mov	r5,r16
    5480:	100d883a 	mov	r6,r2
    5484:	180f883a 	mov	r7,r3
    5488:	000d9d40 	call	d9d4 <__subdf3>
    548c:	a5000c04 	addi	r20,r20,48
    5490:	a80d883a 	mov	r6,r21
    5494:	980f883a 	mov	r7,r19
    5498:	1009883a 	mov	r4,r2
    549c:	180b883a 	mov	r5,r3
    54a0:	95000005 	stb	r20,0(r18)
    54a4:	1021883a 	mov	r16,r2
    54a8:	1823883a 	mov	r17,r3
    54ac:	000d1c80 	call	d1c8 <__ledf2>
    54b0:	bdc00044 	addi	r23,r23,1
    54b4:	800d883a 	mov	r6,r16
    54b8:	880f883a 	mov	r7,r17
    54bc:	0009883a 	mov	r4,zero
    54c0:	014ffc34 	movhi	r5,16368
    54c4:	103fcf0e 	bge	r2,zero,5404 <__alt_data_end+0xff005404>
    54c8:	d8c01317 	ldw	r3,76(sp)
    54cc:	d8c00515 	stw	r3,20(sp)
    54d0:	d9400917 	ldw	r5,36(sp)
    54d4:	e009883a 	mov	r4,fp
    54d8:	0007d600 	call	7d60 <_Bfree>
    54dc:	d9000517 	ldw	r4,20(sp)
    54e0:	d9802317 	ldw	r6,140(sp)
    54e4:	d9c02517 	ldw	r7,148(sp)
    54e8:	b8000005 	stb	zero,0(r23)
    54ec:	20800044 	addi	r2,r4,1
    54f0:	30800015 	stw	r2,0(r6)
    54f4:	3802aa26 	beq	r7,zero,5fa0 <_dtoa_r+0x1178>
    54f8:	3dc00015 	stw	r23,0(r7)
    54fc:	d8800717 	ldw	r2,28(sp)
    5500:	003e7906 	br	4ee8 <__alt_data_end+0xff004ee8>
    5504:	00800434 	movhi	r2,16
    5508:	10bfffc4 	addi	r2,r2,-1
    550c:	88a2703a 	and	r17,r17,r2
    5510:	883e851e 	bne	r17,zero,4f28 <__alt_data_end+0xff004f28>
    5514:	00800074 	movhi	r2,1
    5518:	10852c04 	addi	r2,r2,5296
    551c:	003e8406 	br	4f30 <__alt_data_end+0xff004f30>
    5520:	10c00204 	addi	r3,r2,8
    5524:	003e8706 	br	4f44 <__alt_data_end+0xff004f44>
    5528:	01400434 	movhi	r5,16
    552c:	297fffc4 	addi	r5,r5,-1
    5530:	994a703a 	and	r5,r19,r5
    5534:	9009883a 	mov	r4,r18
    5538:	843f0044 	addi	r16,r16,-1023
    553c:	294ffc34 	orhi	r5,r5,16368
    5540:	dd800217 	ldw	r22,8(sp)
    5544:	d8001115 	stw	zero,68(sp)
    5548:	003ea506 	br	4fe0 <__alt_data_end+0xff004fe0>
    554c:	00800074 	movhi	r2,1
    5550:	10852304 	addi	r2,r2,5260
    5554:	003e6406 	br	4ee8 <__alt_data_end+0xff004ee8>
    5558:	e0001115 	stw	zero,68(fp)
    555c:	000b883a 	mov	r5,zero
    5560:	e009883a 	mov	r4,fp
    5564:	0007cb80 	call	7cb8 <_Balloc>
    5568:	01bfffc4 	movi	r6,-1
    556c:	01c00044 	movi	r7,1
    5570:	d8800715 	stw	r2,28(sp)
    5574:	d9800c15 	stw	r6,48(sp)
    5578:	e0801015 	stw	r2,64(fp)
    557c:	d8000315 	stw	zero,12(sp)
    5580:	d9c00b15 	stw	r7,44(sp)
    5584:	d9800615 	stw	r6,24(sp)
    5588:	d8002215 	stw	zero,136(sp)
    558c:	d8800117 	ldw	r2,4(sp)
    5590:	10008916 	blt	r2,zero,57b8 <_dtoa_r+0x990>
    5594:	d9000517 	ldw	r4,20(sp)
    5598:	00c00384 	movi	r3,14
    559c:	19008616 	blt	r3,r4,57b8 <_dtoa_r+0x990>
    55a0:	200490fa 	slli	r2,r4,3
    55a4:	00c00074 	movhi	r3,1
    55a8:	d9802217 	ldw	r6,136(sp)
    55ac:	18c54b04 	addi	r3,r3,5420
    55b0:	1885883a 	add	r2,r3,r2
    55b4:	14000017 	ldw	r16,0(r2)
    55b8:	14400117 	ldw	r17,4(r2)
    55bc:	30016316 	blt	r6,zero,5b4c <_dtoa_r+0xd24>
    55c0:	800d883a 	mov	r6,r16
    55c4:	880f883a 	mov	r7,r17
    55c8:	9009883a 	mov	r4,r18
    55cc:	980b883a 	mov	r5,r19
    55d0:	000c77c0 	call	c77c <__divdf3>
    55d4:	180b883a 	mov	r5,r3
    55d8:	1009883a 	mov	r4,r2
    55dc:	000e2d00 	call	e2d0 <__fixdfsi>
    55e0:	1009883a 	mov	r4,r2
    55e4:	102b883a 	mov	r21,r2
    55e8:	000e3500 	call	e350 <__floatsidf>
    55ec:	800d883a 	mov	r6,r16
    55f0:	880f883a 	mov	r7,r17
    55f4:	1009883a 	mov	r4,r2
    55f8:	180b883a 	mov	r5,r3
    55fc:	000d2bc0 	call	d2bc <__muldf3>
    5600:	100d883a 	mov	r6,r2
    5604:	180f883a 	mov	r7,r3
    5608:	9009883a 	mov	r4,r18
    560c:	980b883a 	mov	r5,r19
    5610:	000d9d40 	call	d9d4 <__subdf3>
    5614:	d9c00717 	ldw	r7,28(sp)
    5618:	1009883a 	mov	r4,r2
    561c:	a8800c04 	addi	r2,r21,48
    5620:	38800005 	stb	r2,0(r7)
    5624:	3dc00044 	addi	r23,r7,1
    5628:	d9c00617 	ldw	r7,24(sp)
    562c:	01800044 	movi	r6,1
    5630:	180b883a 	mov	r5,r3
    5634:	2005883a 	mov	r2,r4
    5638:	39803826 	beq	r7,r6,571c <_dtoa_r+0x8f4>
    563c:	000d883a 	mov	r6,zero
    5640:	01d00934 	movhi	r7,16420
    5644:	000d2bc0 	call	d2bc <__muldf3>
    5648:	000d883a 	mov	r6,zero
    564c:	000f883a 	mov	r7,zero
    5650:	1009883a 	mov	r4,r2
    5654:	180b883a 	mov	r5,r3
    5658:	1025883a 	mov	r18,r2
    565c:	1827883a 	mov	r19,r3
    5660:	000d0640 	call	d064 <__eqdf2>
    5664:	103f9a26 	beq	r2,zero,54d0 <__alt_data_end+0xff0054d0>
    5668:	d9c00617 	ldw	r7,24(sp)
    566c:	d8c00717 	ldw	r3,28(sp)
    5670:	b829883a 	mov	r20,r23
    5674:	38bfffc4 	addi	r2,r7,-1
    5678:	18ad883a 	add	r22,r3,r2
    567c:	00000a06 	br	56a8 <_dtoa_r+0x880>
    5680:	000d2bc0 	call	d2bc <__muldf3>
    5684:	000d883a 	mov	r6,zero
    5688:	000f883a 	mov	r7,zero
    568c:	1009883a 	mov	r4,r2
    5690:	180b883a 	mov	r5,r3
    5694:	1025883a 	mov	r18,r2
    5698:	1827883a 	mov	r19,r3
    569c:	b829883a 	mov	r20,r23
    56a0:	000d0640 	call	d064 <__eqdf2>
    56a4:	103f8a26 	beq	r2,zero,54d0 <__alt_data_end+0xff0054d0>
    56a8:	800d883a 	mov	r6,r16
    56ac:	880f883a 	mov	r7,r17
    56b0:	9009883a 	mov	r4,r18
    56b4:	980b883a 	mov	r5,r19
    56b8:	000c77c0 	call	c77c <__divdf3>
    56bc:	180b883a 	mov	r5,r3
    56c0:	1009883a 	mov	r4,r2
    56c4:	000e2d00 	call	e2d0 <__fixdfsi>
    56c8:	1009883a 	mov	r4,r2
    56cc:	102b883a 	mov	r21,r2
    56d0:	000e3500 	call	e350 <__floatsidf>
    56d4:	800d883a 	mov	r6,r16
    56d8:	880f883a 	mov	r7,r17
    56dc:	1009883a 	mov	r4,r2
    56e0:	180b883a 	mov	r5,r3
    56e4:	000d2bc0 	call	d2bc <__muldf3>
    56e8:	100d883a 	mov	r6,r2
    56ec:	180f883a 	mov	r7,r3
    56f0:	9009883a 	mov	r4,r18
    56f4:	980b883a 	mov	r5,r19
    56f8:	000d9d40 	call	d9d4 <__subdf3>
    56fc:	aa000c04 	addi	r8,r21,48
    5700:	a2000005 	stb	r8,0(r20)
    5704:	000d883a 	mov	r6,zero
    5708:	01d00934 	movhi	r7,16420
    570c:	1009883a 	mov	r4,r2
    5710:	180b883a 	mov	r5,r3
    5714:	a5c00044 	addi	r23,r20,1
    5718:	b53fd91e 	bne	r22,r20,5680 <__alt_data_end+0xff005680>
    571c:	100d883a 	mov	r6,r2
    5720:	180f883a 	mov	r7,r3
    5724:	1009883a 	mov	r4,r2
    5728:	180b883a 	mov	r5,r3
    572c:	000bed00 	call	bed0 <__adddf3>
    5730:	100d883a 	mov	r6,r2
    5734:	180f883a 	mov	r7,r3
    5738:	8009883a 	mov	r4,r16
    573c:	880b883a 	mov	r5,r17
    5740:	1027883a 	mov	r19,r2
    5744:	1825883a 	mov	r18,r3
    5748:	000d1c80 	call	d1c8 <__ledf2>
    574c:	10000816 	blt	r2,zero,5770 <_dtoa_r+0x948>
    5750:	980d883a 	mov	r6,r19
    5754:	900f883a 	mov	r7,r18
    5758:	8009883a 	mov	r4,r16
    575c:	880b883a 	mov	r5,r17
    5760:	000d0640 	call	d064 <__eqdf2>
    5764:	103f5a1e 	bne	r2,zero,54d0 <__alt_data_end+0xff0054d0>
    5768:	ad40004c 	andi	r21,r21,1
    576c:	a83f5826 	beq	r21,zero,54d0 <__alt_data_end+0xff0054d0>
    5770:	bd3fffc3 	ldbu	r20,-1(r23)
    5774:	b8bfffc4 	addi	r2,r23,-1
    5778:	1007883a 	mov	r3,r2
    577c:	01400e44 	movi	r5,57
    5780:	d9800717 	ldw	r6,28(sp)
    5784:	00000506 	br	579c <_dtoa_r+0x974>
    5788:	18ffffc4 	addi	r3,r3,-1
    578c:	11824726 	beq	r2,r6,60ac <_dtoa_r+0x1284>
    5790:	1d000003 	ldbu	r20,0(r3)
    5794:	102f883a 	mov	r23,r2
    5798:	10bfffc4 	addi	r2,r2,-1
    579c:	a1003fcc 	andi	r4,r20,255
    57a0:	2100201c 	xori	r4,r4,128
    57a4:	213fe004 	addi	r4,r4,-128
    57a8:	217ff726 	beq	r4,r5,5788 <__alt_data_end+0xff005788>
    57ac:	a2000044 	addi	r8,r20,1
    57b0:	12000005 	stb	r8,0(r2)
    57b4:	003f4606 	br	54d0 <__alt_data_end+0xff0054d0>
    57b8:	d9000b17 	ldw	r4,44(sp)
    57bc:	2000c826 	beq	r4,zero,5ae0 <_dtoa_r+0xcb8>
    57c0:	d9800317 	ldw	r6,12(sp)
    57c4:	00c00044 	movi	r3,1
    57c8:	1980f90e 	bge	r3,r6,5bb0 <_dtoa_r+0xd88>
    57cc:	d8800617 	ldw	r2,24(sp)
    57d0:	d8c00a17 	ldw	r3,40(sp)
    57d4:	157fffc4 	addi	r21,r2,-1
    57d8:	1d41f316 	blt	r3,r21,5fa8 <_dtoa_r+0x1180>
    57dc:	1d6bc83a 	sub	r21,r3,r21
    57e0:	d9c00617 	ldw	r7,24(sp)
    57e4:	3802aa16 	blt	r7,zero,6290 <_dtoa_r+0x1468>
    57e8:	dd000817 	ldw	r20,32(sp)
    57ec:	d8800617 	ldw	r2,24(sp)
    57f0:	d8c00817 	ldw	r3,32(sp)
    57f4:	01400044 	movi	r5,1
    57f8:	e009883a 	mov	r4,fp
    57fc:	1887883a 	add	r3,r3,r2
    5800:	d8c00815 	stw	r3,32(sp)
    5804:	b0ad883a 	add	r22,r22,r2
    5808:	00080c40 	call	80c4 <__i2b>
    580c:	1023883a 	mov	r17,r2
    5810:	a0000826 	beq	r20,zero,5834 <_dtoa_r+0xa0c>
    5814:	0580070e 	bge	zero,r22,5834 <_dtoa_r+0xa0c>
    5818:	a005883a 	mov	r2,r20
    581c:	b500b916 	blt	r22,r20,5b04 <_dtoa_r+0xcdc>
    5820:	d9000817 	ldw	r4,32(sp)
    5824:	a0a9c83a 	sub	r20,r20,r2
    5828:	b0adc83a 	sub	r22,r22,r2
    582c:	2089c83a 	sub	r4,r4,r2
    5830:	d9000815 	stw	r4,32(sp)
    5834:	d9800a17 	ldw	r6,40(sp)
    5838:	0181810e 	bge	zero,r6,5e40 <_dtoa_r+0x1018>
    583c:	d9c00b17 	ldw	r7,44(sp)
    5840:	3800b326 	beq	r7,zero,5b10 <_dtoa_r+0xce8>
    5844:	a800b226 	beq	r21,zero,5b10 <_dtoa_r+0xce8>
    5848:	880b883a 	mov	r5,r17
    584c:	a80d883a 	mov	r6,r21
    5850:	e009883a 	mov	r4,fp
    5854:	00082f80 	call	82f8 <__pow5mult>
    5858:	d9800917 	ldw	r6,36(sp)
    585c:	100b883a 	mov	r5,r2
    5860:	e009883a 	mov	r4,fp
    5864:	1023883a 	mov	r17,r2
    5868:	00081000 	call	8100 <__multiply>
    586c:	1021883a 	mov	r16,r2
    5870:	d8800a17 	ldw	r2,40(sp)
    5874:	d9400917 	ldw	r5,36(sp)
    5878:	e009883a 	mov	r4,fp
    587c:	1545c83a 	sub	r2,r2,r21
    5880:	d8800a15 	stw	r2,40(sp)
    5884:	0007d600 	call	7d60 <_Bfree>
    5888:	d8c00a17 	ldw	r3,40(sp)
    588c:	18009f1e 	bne	r3,zero,5b0c <_dtoa_r+0xce4>
    5890:	05c00044 	movi	r23,1
    5894:	e009883a 	mov	r4,fp
    5898:	b80b883a 	mov	r5,r23
    589c:	00080c40 	call	80c4 <__i2b>
    58a0:	d9000d17 	ldw	r4,52(sp)
    58a4:	102b883a 	mov	r21,r2
    58a8:	2000ce26 	beq	r4,zero,5be4 <_dtoa_r+0xdbc>
    58ac:	200d883a 	mov	r6,r4
    58b0:	100b883a 	mov	r5,r2
    58b4:	e009883a 	mov	r4,fp
    58b8:	00082f80 	call	82f8 <__pow5mult>
    58bc:	d9800317 	ldw	r6,12(sp)
    58c0:	102b883a 	mov	r21,r2
    58c4:	b981810e 	bge	r23,r6,5ecc <_dtoa_r+0x10a4>
    58c8:	0027883a 	mov	r19,zero
    58cc:	a8800417 	ldw	r2,16(r21)
    58d0:	05c00804 	movi	r23,32
    58d4:	10800104 	addi	r2,r2,4
    58d8:	1085883a 	add	r2,r2,r2
    58dc:	1085883a 	add	r2,r2,r2
    58e0:	a885883a 	add	r2,r21,r2
    58e4:	11000017 	ldw	r4,0(r2)
    58e8:	0007fac0 	call	7fac <__hi0bits>
    58ec:	b885c83a 	sub	r2,r23,r2
    58f0:	1585883a 	add	r2,r2,r22
    58f4:	108007cc 	andi	r2,r2,31
    58f8:	1000b326 	beq	r2,zero,5bc8 <_dtoa_r+0xda0>
    58fc:	00c00804 	movi	r3,32
    5900:	1887c83a 	sub	r3,r3,r2
    5904:	01000104 	movi	r4,4
    5908:	20c2cd0e 	bge	r4,r3,6440 <_dtoa_r+0x1618>
    590c:	00c00704 	movi	r3,28
    5910:	1885c83a 	sub	r2,r3,r2
    5914:	d8c00817 	ldw	r3,32(sp)
    5918:	a0a9883a 	add	r20,r20,r2
    591c:	b0ad883a 	add	r22,r22,r2
    5920:	1887883a 	add	r3,r3,r2
    5924:	d8c00815 	stw	r3,32(sp)
    5928:	d9800817 	ldw	r6,32(sp)
    592c:	0180040e 	bge	zero,r6,5940 <_dtoa_r+0xb18>
    5930:	800b883a 	mov	r5,r16
    5934:	e009883a 	mov	r4,fp
    5938:	00084380 	call	8438 <__lshift>
    593c:	1021883a 	mov	r16,r2
    5940:	0580050e 	bge	zero,r22,5958 <_dtoa_r+0xb30>
    5944:	a80b883a 	mov	r5,r21
    5948:	b00d883a 	mov	r6,r22
    594c:	e009883a 	mov	r4,fp
    5950:	00084380 	call	8438 <__lshift>
    5954:	102b883a 	mov	r21,r2
    5958:	d9c00e17 	ldw	r7,56(sp)
    595c:	3801211e 	bne	r7,zero,5de4 <_dtoa_r+0xfbc>
    5960:	d9800617 	ldw	r6,24(sp)
    5964:	0181380e 	bge	zero,r6,5e48 <_dtoa_r+0x1020>
    5968:	d8c00b17 	ldw	r3,44(sp)
    596c:	1800ab1e 	bne	r3,zero,5c1c <_dtoa_r+0xdf4>
    5970:	dc800717 	ldw	r18,28(sp)
    5974:	dcc00617 	ldw	r19,24(sp)
    5978:	9029883a 	mov	r20,r18
    597c:	00000206 	br	5988 <_dtoa_r+0xb60>
    5980:	0007d880 	call	7d88 <__multadd>
    5984:	1021883a 	mov	r16,r2
    5988:	a80b883a 	mov	r5,r21
    598c:	8009883a 	mov	r4,r16
    5990:	0004c280 	call	4c28 <quorem>
    5994:	10800c04 	addi	r2,r2,48
    5998:	90800005 	stb	r2,0(r18)
    599c:	94800044 	addi	r18,r18,1
    59a0:	9507c83a 	sub	r3,r18,r20
    59a4:	000f883a 	mov	r7,zero
    59a8:	01800284 	movi	r6,10
    59ac:	800b883a 	mov	r5,r16
    59b0:	e009883a 	mov	r4,fp
    59b4:	1cfff216 	blt	r3,r19,5980 <__alt_data_end+0xff005980>
    59b8:	1011883a 	mov	r8,r2
    59bc:	d8800617 	ldw	r2,24(sp)
    59c0:	0082370e 	bge	zero,r2,62a0 <_dtoa_r+0x1478>
    59c4:	d9000717 	ldw	r4,28(sp)
    59c8:	0025883a 	mov	r18,zero
    59cc:	20af883a 	add	r23,r4,r2
    59d0:	01800044 	movi	r6,1
    59d4:	800b883a 	mov	r5,r16
    59d8:	e009883a 	mov	r4,fp
    59dc:	da001715 	stw	r8,92(sp)
    59e0:	00084380 	call	8438 <__lshift>
    59e4:	a80b883a 	mov	r5,r21
    59e8:	1009883a 	mov	r4,r2
    59ec:	d8800915 	stw	r2,36(sp)
    59f0:	00085800 	call	8580 <__mcmp>
    59f4:	da001717 	ldw	r8,92(sp)
    59f8:	0081800e 	bge	zero,r2,5ffc <_dtoa_r+0x11d4>
    59fc:	b93fffc3 	ldbu	r4,-1(r23)
    5a00:	b8bfffc4 	addi	r2,r23,-1
    5a04:	1007883a 	mov	r3,r2
    5a08:	01800e44 	movi	r6,57
    5a0c:	d9c00717 	ldw	r7,28(sp)
    5a10:	00000506 	br	5a28 <_dtoa_r+0xc00>
    5a14:	18ffffc4 	addi	r3,r3,-1
    5a18:	11c12326 	beq	r2,r7,5ea8 <_dtoa_r+0x1080>
    5a1c:	19000003 	ldbu	r4,0(r3)
    5a20:	102f883a 	mov	r23,r2
    5a24:	10bfffc4 	addi	r2,r2,-1
    5a28:	21403fcc 	andi	r5,r4,255
    5a2c:	2940201c 	xori	r5,r5,128
    5a30:	297fe004 	addi	r5,r5,-128
    5a34:	29bff726 	beq	r5,r6,5a14 <__alt_data_end+0xff005a14>
    5a38:	21000044 	addi	r4,r4,1
    5a3c:	11000005 	stb	r4,0(r2)
    5a40:	a80b883a 	mov	r5,r21
    5a44:	e009883a 	mov	r4,fp
    5a48:	0007d600 	call	7d60 <_Bfree>
    5a4c:	883ea026 	beq	r17,zero,54d0 <__alt_data_end+0xff0054d0>
    5a50:	90000426 	beq	r18,zero,5a64 <_dtoa_r+0xc3c>
    5a54:	94400326 	beq	r18,r17,5a64 <_dtoa_r+0xc3c>
    5a58:	900b883a 	mov	r5,r18
    5a5c:	e009883a 	mov	r4,fp
    5a60:	0007d600 	call	7d60 <_Bfree>
    5a64:	880b883a 	mov	r5,r17
    5a68:	e009883a 	mov	r4,fp
    5a6c:	0007d600 	call	7d60 <_Bfree>
    5a70:	003e9706 	br	54d0 <__alt_data_end+0xff0054d0>
    5a74:	01800044 	movi	r6,1
    5a78:	d9800e15 	stw	r6,56(sp)
    5a7c:	003d9606 	br	50d8 <__alt_data_end+0xff0050d8>
    5a80:	d8800817 	ldw	r2,32(sp)
    5a84:	d8c00517 	ldw	r3,20(sp)
    5a88:	d8000d15 	stw	zero,52(sp)
    5a8c:	10c5c83a 	sub	r2,r2,r3
    5a90:	00c9c83a 	sub	r4,zero,r3
    5a94:	d8800815 	stw	r2,32(sp)
    5a98:	d9000a15 	stw	r4,40(sp)
    5a9c:	003d9706 	br	50fc <__alt_data_end+0xff0050fc>
    5aa0:	05adc83a 	sub	r22,zero,r22
    5aa4:	dd800815 	stw	r22,32(sp)
    5aa8:	002d883a 	mov	r22,zero
    5aac:	003d8e06 	br	50e8 <__alt_data_end+0xff0050e8>
    5ab0:	d9000517 	ldw	r4,20(sp)
    5ab4:	000e3500 	call	e350 <__floatsidf>
    5ab8:	100d883a 	mov	r6,r2
    5abc:	180f883a 	mov	r7,r3
    5ac0:	a009883a 	mov	r4,r20
    5ac4:	880b883a 	mov	r5,r17
    5ac8:	000d0640 	call	d064 <__eqdf2>
    5acc:	103d7126 	beq	r2,zero,5094 <__alt_data_end+0xff005094>
    5ad0:	d9c00517 	ldw	r7,20(sp)
    5ad4:	39ffffc4 	addi	r7,r7,-1
    5ad8:	d9c00515 	stw	r7,20(sp)
    5adc:	003d6d06 	br	5094 <__alt_data_end+0xff005094>
    5ae0:	dd400a17 	ldw	r21,40(sp)
    5ae4:	dd000817 	ldw	r20,32(sp)
    5ae8:	0023883a 	mov	r17,zero
    5aec:	003f4806 	br	5810 <__alt_data_end+0xff005810>
    5af0:	10e3c83a 	sub	r17,r2,r3
    5af4:	9448983a 	sll	r4,r18,r17
    5af8:	003d3206 	br	4fc4 <__alt_data_end+0xff004fc4>
    5afc:	d8000e15 	stw	zero,56(sp)
    5b00:	003d7506 	br	50d8 <__alt_data_end+0xff0050d8>
    5b04:	b005883a 	mov	r2,r22
    5b08:	003f4506 	br	5820 <__alt_data_end+0xff005820>
    5b0c:	dc000915 	stw	r16,36(sp)
    5b10:	d9800a17 	ldw	r6,40(sp)
    5b14:	d9400917 	ldw	r5,36(sp)
    5b18:	e009883a 	mov	r4,fp
    5b1c:	00082f80 	call	82f8 <__pow5mult>
    5b20:	1021883a 	mov	r16,r2
    5b24:	003f5a06 	br	5890 <__alt_data_end+0xff005890>
    5b28:	01c00044 	movi	r7,1
    5b2c:	d9c00b15 	stw	r7,44(sp)
    5b30:	d8802217 	ldw	r2,136(sp)
    5b34:	0081280e 	bge	zero,r2,5fd8 <_dtoa_r+0x11b0>
    5b38:	100d883a 	mov	r6,r2
    5b3c:	1021883a 	mov	r16,r2
    5b40:	d8800c15 	stw	r2,48(sp)
    5b44:	d8800615 	stw	r2,24(sp)
    5b48:	003d8806 	br	516c <__alt_data_end+0xff00516c>
    5b4c:	d8800617 	ldw	r2,24(sp)
    5b50:	00be9b16 	blt	zero,r2,55c0 <__alt_data_end+0xff0055c0>
    5b54:	10010f1e 	bne	r2,zero,5f94 <_dtoa_r+0x116c>
    5b58:	880b883a 	mov	r5,r17
    5b5c:	000d883a 	mov	r6,zero
    5b60:	01d00534 	movhi	r7,16404
    5b64:	8009883a 	mov	r4,r16
    5b68:	000d2bc0 	call	d2bc <__muldf3>
    5b6c:	900d883a 	mov	r6,r18
    5b70:	980f883a 	mov	r7,r19
    5b74:	1009883a 	mov	r4,r2
    5b78:	180b883a 	mov	r5,r3
    5b7c:	000d0ec0 	call	d0ec <__gedf2>
    5b80:	002b883a 	mov	r21,zero
    5b84:	0023883a 	mov	r17,zero
    5b88:	1000bf16 	blt	r2,zero,5e88 <_dtoa_r+0x1060>
    5b8c:	d9802217 	ldw	r6,136(sp)
    5b90:	ddc00717 	ldw	r23,28(sp)
    5b94:	018c303a 	nor	r6,zero,r6
    5b98:	d9800515 	stw	r6,20(sp)
    5b9c:	a80b883a 	mov	r5,r21
    5ba0:	e009883a 	mov	r4,fp
    5ba4:	0007d600 	call	7d60 <_Bfree>
    5ba8:	883e4926 	beq	r17,zero,54d0 <__alt_data_end+0xff0054d0>
    5bac:	003fad06 	br	5a64 <__alt_data_end+0xff005a64>
    5bb0:	d9c01117 	ldw	r7,68(sp)
    5bb4:	3801bc26 	beq	r7,zero,62a8 <_dtoa_r+0x1480>
    5bb8:	10810cc4 	addi	r2,r2,1075
    5bbc:	dd400a17 	ldw	r21,40(sp)
    5bc0:	dd000817 	ldw	r20,32(sp)
    5bc4:	003f0a06 	br	57f0 <__alt_data_end+0xff0057f0>
    5bc8:	00800704 	movi	r2,28
    5bcc:	d9000817 	ldw	r4,32(sp)
    5bd0:	a0a9883a 	add	r20,r20,r2
    5bd4:	b0ad883a 	add	r22,r22,r2
    5bd8:	2089883a 	add	r4,r4,r2
    5bdc:	d9000815 	stw	r4,32(sp)
    5be0:	003f5106 	br	5928 <__alt_data_end+0xff005928>
    5be4:	d8c00317 	ldw	r3,12(sp)
    5be8:	b8c1fc0e 	bge	r23,r3,63dc <_dtoa_r+0x15b4>
    5bec:	0027883a 	mov	r19,zero
    5bf0:	b805883a 	mov	r2,r23
    5bf4:	003f3e06 	br	58f0 <__alt_data_end+0xff0058f0>
    5bf8:	880b883a 	mov	r5,r17
    5bfc:	e009883a 	mov	r4,fp
    5c00:	000f883a 	mov	r7,zero
    5c04:	01800284 	movi	r6,10
    5c08:	0007d880 	call	7d88 <__multadd>
    5c0c:	d9000c17 	ldw	r4,48(sp)
    5c10:	1023883a 	mov	r17,r2
    5c14:	0102040e 	bge	zero,r4,6428 <_dtoa_r+0x1600>
    5c18:	d9000615 	stw	r4,24(sp)
    5c1c:	0500050e 	bge	zero,r20,5c34 <_dtoa_r+0xe0c>
    5c20:	880b883a 	mov	r5,r17
    5c24:	a00d883a 	mov	r6,r20
    5c28:	e009883a 	mov	r4,fp
    5c2c:	00084380 	call	8438 <__lshift>
    5c30:	1023883a 	mov	r17,r2
    5c34:	9801241e 	bne	r19,zero,60c8 <_dtoa_r+0x12a0>
    5c38:	8829883a 	mov	r20,r17
    5c3c:	d9000617 	ldw	r4,24(sp)
    5c40:	dcc00717 	ldw	r19,28(sp)
    5c44:	9480004c 	andi	r18,r18,1
    5c48:	20bfffc4 	addi	r2,r4,-1
    5c4c:	9885883a 	add	r2,r19,r2
    5c50:	d8800415 	stw	r2,16(sp)
    5c54:	dc800615 	stw	r18,24(sp)
    5c58:	a80b883a 	mov	r5,r21
    5c5c:	8009883a 	mov	r4,r16
    5c60:	0004c280 	call	4c28 <quorem>
    5c64:	880b883a 	mov	r5,r17
    5c68:	8009883a 	mov	r4,r16
    5c6c:	102f883a 	mov	r23,r2
    5c70:	00085800 	call	8580 <__mcmp>
    5c74:	a80b883a 	mov	r5,r21
    5c78:	a00d883a 	mov	r6,r20
    5c7c:	e009883a 	mov	r4,fp
    5c80:	102d883a 	mov	r22,r2
    5c84:	00085e00 	call	85e0 <__mdiff>
    5c88:	1007883a 	mov	r3,r2
    5c8c:	10800317 	ldw	r2,12(r2)
    5c90:	bc800c04 	addi	r18,r23,48
    5c94:	180b883a 	mov	r5,r3
    5c98:	10004e1e 	bne	r2,zero,5dd4 <_dtoa_r+0xfac>
    5c9c:	8009883a 	mov	r4,r16
    5ca0:	d8c01615 	stw	r3,88(sp)
    5ca4:	00085800 	call	8580 <__mcmp>
    5ca8:	d8c01617 	ldw	r3,88(sp)
    5cac:	e009883a 	mov	r4,fp
    5cb0:	d8801615 	stw	r2,88(sp)
    5cb4:	180b883a 	mov	r5,r3
    5cb8:	0007d600 	call	7d60 <_Bfree>
    5cbc:	d8801617 	ldw	r2,88(sp)
    5cc0:	1000041e 	bne	r2,zero,5cd4 <_dtoa_r+0xeac>
    5cc4:	d9800317 	ldw	r6,12(sp)
    5cc8:	3000021e 	bne	r6,zero,5cd4 <_dtoa_r+0xeac>
    5ccc:	d8c00617 	ldw	r3,24(sp)
    5cd0:	18003726 	beq	r3,zero,5db0 <_dtoa_r+0xf88>
    5cd4:	b0002016 	blt	r22,zero,5d58 <_dtoa_r+0xf30>
    5cd8:	b000041e 	bne	r22,zero,5cec <_dtoa_r+0xec4>
    5cdc:	d9000317 	ldw	r4,12(sp)
    5ce0:	2000021e 	bne	r4,zero,5cec <_dtoa_r+0xec4>
    5ce4:	d8c00617 	ldw	r3,24(sp)
    5ce8:	18001b26 	beq	r3,zero,5d58 <_dtoa_r+0xf30>
    5cec:	00810716 	blt	zero,r2,610c <_dtoa_r+0x12e4>
    5cf0:	d8c00417 	ldw	r3,16(sp)
    5cf4:	9d800044 	addi	r22,r19,1
    5cf8:	9c800005 	stb	r18,0(r19)
    5cfc:	b02f883a 	mov	r23,r22
    5d00:	98c10626 	beq	r19,r3,611c <_dtoa_r+0x12f4>
    5d04:	800b883a 	mov	r5,r16
    5d08:	000f883a 	mov	r7,zero
    5d0c:	01800284 	movi	r6,10
    5d10:	e009883a 	mov	r4,fp
    5d14:	0007d880 	call	7d88 <__multadd>
    5d18:	1021883a 	mov	r16,r2
    5d1c:	000f883a 	mov	r7,zero
    5d20:	01800284 	movi	r6,10
    5d24:	880b883a 	mov	r5,r17
    5d28:	e009883a 	mov	r4,fp
    5d2c:	8d002526 	beq	r17,r20,5dc4 <_dtoa_r+0xf9c>
    5d30:	0007d880 	call	7d88 <__multadd>
    5d34:	a00b883a 	mov	r5,r20
    5d38:	000f883a 	mov	r7,zero
    5d3c:	01800284 	movi	r6,10
    5d40:	e009883a 	mov	r4,fp
    5d44:	1023883a 	mov	r17,r2
    5d48:	0007d880 	call	7d88 <__multadd>
    5d4c:	1029883a 	mov	r20,r2
    5d50:	b027883a 	mov	r19,r22
    5d54:	003fc006 	br	5c58 <__alt_data_end+0xff005c58>
    5d58:	9011883a 	mov	r8,r18
    5d5c:	00800e0e 	bge	zero,r2,5d98 <_dtoa_r+0xf70>
    5d60:	800b883a 	mov	r5,r16
    5d64:	01800044 	movi	r6,1
    5d68:	e009883a 	mov	r4,fp
    5d6c:	da001715 	stw	r8,92(sp)
    5d70:	00084380 	call	8438 <__lshift>
    5d74:	a80b883a 	mov	r5,r21
    5d78:	1009883a 	mov	r4,r2
    5d7c:	1021883a 	mov	r16,r2
    5d80:	00085800 	call	8580 <__mcmp>
    5d84:	da001717 	ldw	r8,92(sp)
    5d88:	0081960e 	bge	zero,r2,63e4 <_dtoa_r+0x15bc>
    5d8c:	00800e44 	movi	r2,57
    5d90:	40817026 	beq	r8,r2,6354 <_dtoa_r+0x152c>
    5d94:	ba000c44 	addi	r8,r23,49
    5d98:	8825883a 	mov	r18,r17
    5d9c:	9dc00044 	addi	r23,r19,1
    5da0:	9a000005 	stb	r8,0(r19)
    5da4:	a023883a 	mov	r17,r20
    5da8:	dc000915 	stw	r16,36(sp)
    5dac:	003f2406 	br	5a40 <__alt_data_end+0xff005a40>
    5db0:	00800e44 	movi	r2,57
    5db4:	9011883a 	mov	r8,r18
    5db8:	90816626 	beq	r18,r2,6354 <_dtoa_r+0x152c>
    5dbc:	05bff516 	blt	zero,r22,5d94 <__alt_data_end+0xff005d94>
    5dc0:	003ff506 	br	5d98 <__alt_data_end+0xff005d98>
    5dc4:	0007d880 	call	7d88 <__multadd>
    5dc8:	1023883a 	mov	r17,r2
    5dcc:	1029883a 	mov	r20,r2
    5dd0:	003fdf06 	br	5d50 <__alt_data_end+0xff005d50>
    5dd4:	e009883a 	mov	r4,fp
    5dd8:	0007d600 	call	7d60 <_Bfree>
    5ddc:	00800044 	movi	r2,1
    5de0:	003fbc06 	br	5cd4 <__alt_data_end+0xff005cd4>
    5de4:	a80b883a 	mov	r5,r21
    5de8:	8009883a 	mov	r4,r16
    5dec:	00085800 	call	8580 <__mcmp>
    5df0:	103edb0e 	bge	r2,zero,5960 <__alt_data_end+0xff005960>
    5df4:	800b883a 	mov	r5,r16
    5df8:	000f883a 	mov	r7,zero
    5dfc:	01800284 	movi	r6,10
    5e00:	e009883a 	mov	r4,fp
    5e04:	0007d880 	call	7d88 <__multadd>
    5e08:	1021883a 	mov	r16,r2
    5e0c:	d8800517 	ldw	r2,20(sp)
    5e10:	d8c00b17 	ldw	r3,44(sp)
    5e14:	10bfffc4 	addi	r2,r2,-1
    5e18:	d8800515 	stw	r2,20(sp)
    5e1c:	183f761e 	bne	r3,zero,5bf8 <__alt_data_end+0xff005bf8>
    5e20:	d9000c17 	ldw	r4,48(sp)
    5e24:	0101730e 	bge	zero,r4,63f4 <_dtoa_r+0x15cc>
    5e28:	d9000615 	stw	r4,24(sp)
    5e2c:	003ed006 	br	5970 <__alt_data_end+0xff005970>
    5e30:	00800084 	movi	r2,2
    5e34:	3081861e 	bne	r6,r2,6450 <_dtoa_r+0x1628>
    5e38:	d8000b15 	stw	zero,44(sp)
    5e3c:	003f3c06 	br	5b30 <__alt_data_end+0xff005b30>
    5e40:	dc000917 	ldw	r16,36(sp)
    5e44:	003e9206 	br	5890 <__alt_data_end+0xff005890>
    5e48:	d9c00317 	ldw	r7,12(sp)
    5e4c:	00800084 	movi	r2,2
    5e50:	11fec50e 	bge	r2,r7,5968 <__alt_data_end+0xff005968>
    5e54:	d9000617 	ldw	r4,24(sp)
    5e58:	20013c1e 	bne	r4,zero,634c <_dtoa_r+0x1524>
    5e5c:	a80b883a 	mov	r5,r21
    5e60:	000f883a 	mov	r7,zero
    5e64:	01800144 	movi	r6,5
    5e68:	e009883a 	mov	r4,fp
    5e6c:	0007d880 	call	7d88 <__multadd>
    5e70:	100b883a 	mov	r5,r2
    5e74:	8009883a 	mov	r4,r16
    5e78:	102b883a 	mov	r21,r2
    5e7c:	00085800 	call	8580 <__mcmp>
    5e80:	dc000915 	stw	r16,36(sp)
    5e84:	00bf410e 	bge	zero,r2,5b8c <__alt_data_end+0xff005b8c>
    5e88:	d9c00717 	ldw	r7,28(sp)
    5e8c:	00800c44 	movi	r2,49
    5e90:	38800005 	stb	r2,0(r7)
    5e94:	d8800517 	ldw	r2,20(sp)
    5e98:	3dc00044 	addi	r23,r7,1
    5e9c:	10800044 	addi	r2,r2,1
    5ea0:	d8800515 	stw	r2,20(sp)
    5ea4:	003f3d06 	br	5b9c <__alt_data_end+0xff005b9c>
    5ea8:	d9800517 	ldw	r6,20(sp)
    5eac:	d9c00717 	ldw	r7,28(sp)
    5eb0:	00800c44 	movi	r2,49
    5eb4:	31800044 	addi	r6,r6,1
    5eb8:	d9800515 	stw	r6,20(sp)
    5ebc:	38800005 	stb	r2,0(r7)
    5ec0:	003edf06 	br	5a40 <__alt_data_end+0xff005a40>
    5ec4:	d8000b15 	stw	zero,44(sp)
    5ec8:	003c9f06 	br	5148 <__alt_data_end+0xff005148>
    5ecc:	903e7e1e 	bne	r18,zero,58c8 <__alt_data_end+0xff0058c8>
    5ed0:	00800434 	movhi	r2,16
    5ed4:	10bfffc4 	addi	r2,r2,-1
    5ed8:	9884703a 	and	r2,r19,r2
    5edc:	1000ea1e 	bne	r2,zero,6288 <_dtoa_r+0x1460>
    5ee0:	9cdffc2c 	andhi	r19,r19,32752
    5ee4:	9800e826 	beq	r19,zero,6288 <_dtoa_r+0x1460>
    5ee8:	d9c00817 	ldw	r7,32(sp)
    5eec:	b5800044 	addi	r22,r22,1
    5ef0:	04c00044 	movi	r19,1
    5ef4:	39c00044 	addi	r7,r7,1
    5ef8:	d9c00815 	stw	r7,32(sp)
    5efc:	d8800d17 	ldw	r2,52(sp)
    5f00:	103e721e 	bne	r2,zero,58cc <__alt_data_end+0xff0058cc>
    5f04:	00800044 	movi	r2,1
    5f08:	003e7906 	br	58f0 <__alt_data_end+0xff0058f0>
    5f0c:	8009883a 	mov	r4,r16
    5f10:	000e3500 	call	e350 <__floatsidf>
    5f14:	d9800f17 	ldw	r6,60(sp)
    5f18:	d9c01017 	ldw	r7,64(sp)
    5f1c:	1009883a 	mov	r4,r2
    5f20:	180b883a 	mov	r5,r3
    5f24:	000d2bc0 	call	d2bc <__muldf3>
    5f28:	000d883a 	mov	r6,zero
    5f2c:	01d00734 	movhi	r7,16412
    5f30:	1009883a 	mov	r4,r2
    5f34:	180b883a 	mov	r5,r3
    5f38:	000bed00 	call	bed0 <__adddf3>
    5f3c:	047f3034 	movhi	r17,64704
    5f40:	1021883a 	mov	r16,r2
    5f44:	1c63883a 	add	r17,r3,r17
    5f48:	d9000f17 	ldw	r4,60(sp)
    5f4c:	d9401017 	ldw	r5,64(sp)
    5f50:	000d883a 	mov	r6,zero
    5f54:	01d00534 	movhi	r7,16404
    5f58:	000d9d40 	call	d9d4 <__subdf3>
    5f5c:	800d883a 	mov	r6,r16
    5f60:	880f883a 	mov	r7,r17
    5f64:	1009883a 	mov	r4,r2
    5f68:	180b883a 	mov	r5,r3
    5f6c:	102b883a 	mov	r21,r2
    5f70:	1829883a 	mov	r20,r3
    5f74:	000d0ec0 	call	d0ec <__gedf2>
    5f78:	00806c16 	blt	zero,r2,612c <_dtoa_r+0x1304>
    5f7c:	89e0003c 	xorhi	r7,r17,32768
    5f80:	800d883a 	mov	r6,r16
    5f84:	a809883a 	mov	r4,r21
    5f88:	a00b883a 	mov	r5,r20
    5f8c:	000d1c80 	call	d1c8 <__ledf2>
    5f90:	103d7e0e 	bge	r2,zero,558c <__alt_data_end+0xff00558c>
    5f94:	002b883a 	mov	r21,zero
    5f98:	0023883a 	mov	r17,zero
    5f9c:	003efb06 	br	5b8c <__alt_data_end+0xff005b8c>
    5fa0:	d8800717 	ldw	r2,28(sp)
    5fa4:	003bd006 	br	4ee8 <__alt_data_end+0xff004ee8>
    5fa8:	d9000a17 	ldw	r4,40(sp)
    5fac:	d9800d17 	ldw	r6,52(sp)
    5fb0:	dd400a15 	stw	r21,40(sp)
    5fb4:	a905c83a 	sub	r2,r21,r4
    5fb8:	308d883a 	add	r6,r6,r2
    5fbc:	d9800d15 	stw	r6,52(sp)
    5fc0:	002b883a 	mov	r21,zero
    5fc4:	003e0606 	br	57e0 <__alt_data_end+0xff0057e0>
    5fc8:	9023883a 	mov	r17,r18
    5fcc:	9829883a 	mov	r20,r19
    5fd0:	04000084 	movi	r16,2
    5fd4:	003c9206 	br	5220 <__alt_data_end+0xff005220>
    5fd8:	04000044 	movi	r16,1
    5fdc:	dc000c15 	stw	r16,48(sp)
    5fe0:	dc000615 	stw	r16,24(sp)
    5fe4:	dc002215 	stw	r16,136(sp)
    5fe8:	e0001115 	stw	zero,68(fp)
    5fec:	000b883a 	mov	r5,zero
    5ff0:	003c6906 	br	5198 <__alt_data_end+0xff005198>
    5ff4:	3021883a 	mov	r16,r6
    5ff8:	003ffb06 	br	5fe8 <__alt_data_end+0xff005fe8>
    5ffc:	1000021e 	bne	r2,zero,6008 <_dtoa_r+0x11e0>
    6000:	4200004c 	andi	r8,r8,1
    6004:	403e7d1e 	bne	r8,zero,59fc <__alt_data_end+0xff0059fc>
    6008:	01000c04 	movi	r4,48
    600c:	00000106 	br	6014 <_dtoa_r+0x11ec>
    6010:	102f883a 	mov	r23,r2
    6014:	b8bfffc4 	addi	r2,r23,-1
    6018:	10c00007 	ldb	r3,0(r2)
    601c:	193ffc26 	beq	r3,r4,6010 <__alt_data_end+0xff006010>
    6020:	003e8706 	br	5a40 <__alt_data_end+0xff005a40>
    6024:	d8800517 	ldw	r2,20(sp)
    6028:	00a3c83a 	sub	r17,zero,r2
    602c:	8800a426 	beq	r17,zero,62c0 <_dtoa_r+0x1498>
    6030:	888003cc 	andi	r2,r17,15
    6034:	100490fa 	slli	r2,r2,3
    6038:	00c00074 	movhi	r3,1
    603c:	18c54b04 	addi	r3,r3,5420
    6040:	1885883a 	add	r2,r3,r2
    6044:	11800017 	ldw	r6,0(r2)
    6048:	11c00117 	ldw	r7,4(r2)
    604c:	9009883a 	mov	r4,r18
    6050:	980b883a 	mov	r5,r19
    6054:	8823d13a 	srai	r17,r17,4
    6058:	000d2bc0 	call	d2bc <__muldf3>
    605c:	d8800f15 	stw	r2,60(sp)
    6060:	d8c01015 	stw	r3,64(sp)
    6064:	8800e826 	beq	r17,zero,6408 <_dtoa_r+0x15e0>
    6068:	05000074 	movhi	r20,1
    606c:	a5054104 	addi	r20,r20,5380
    6070:	04000084 	movi	r16,2
    6074:	8980004c 	andi	r6,r17,1
    6078:	1009883a 	mov	r4,r2
    607c:	8823d07a 	srai	r17,r17,1
    6080:	180b883a 	mov	r5,r3
    6084:	30000426 	beq	r6,zero,6098 <_dtoa_r+0x1270>
    6088:	a1800017 	ldw	r6,0(r20)
    608c:	a1c00117 	ldw	r7,4(r20)
    6090:	84000044 	addi	r16,r16,1
    6094:	000d2bc0 	call	d2bc <__muldf3>
    6098:	a5000204 	addi	r20,r20,8
    609c:	883ff51e 	bne	r17,zero,6074 <__alt_data_end+0xff006074>
    60a0:	d8800f15 	stw	r2,60(sp)
    60a4:	d8c01015 	stw	r3,64(sp)
    60a8:	003c7606 	br	5284 <__alt_data_end+0xff005284>
    60ac:	00c00c04 	movi	r3,48
    60b0:	10c00005 	stb	r3,0(r2)
    60b4:	d8c00517 	ldw	r3,20(sp)
    60b8:	bd3fffc3 	ldbu	r20,-1(r23)
    60bc:	18c00044 	addi	r3,r3,1
    60c0:	d8c00515 	stw	r3,20(sp)
    60c4:	003db906 	br	57ac <__alt_data_end+0xff0057ac>
    60c8:	89400117 	ldw	r5,4(r17)
    60cc:	e009883a 	mov	r4,fp
    60d0:	0007cb80 	call	7cb8 <_Balloc>
    60d4:	89800417 	ldw	r6,16(r17)
    60d8:	89400304 	addi	r5,r17,12
    60dc:	11000304 	addi	r4,r2,12
    60e0:	31800084 	addi	r6,r6,2
    60e4:	318d883a 	add	r6,r6,r6
    60e8:	318d883a 	add	r6,r6,r6
    60ec:	1027883a 	mov	r19,r2
    60f0:	00078ec0 	call	78ec <memcpy>
    60f4:	01800044 	movi	r6,1
    60f8:	980b883a 	mov	r5,r19
    60fc:	e009883a 	mov	r4,fp
    6100:	00084380 	call	8438 <__lshift>
    6104:	1029883a 	mov	r20,r2
    6108:	003ecc06 	br	5c3c <__alt_data_end+0xff005c3c>
    610c:	00800e44 	movi	r2,57
    6110:	90809026 	beq	r18,r2,6354 <_dtoa_r+0x152c>
    6114:	92000044 	addi	r8,r18,1
    6118:	003f1f06 	br	5d98 <__alt_data_end+0xff005d98>
    611c:	9011883a 	mov	r8,r18
    6120:	8825883a 	mov	r18,r17
    6124:	a023883a 	mov	r17,r20
    6128:	003e2906 	br	59d0 <__alt_data_end+0xff0059d0>
    612c:	002b883a 	mov	r21,zero
    6130:	0023883a 	mov	r17,zero
    6134:	003f5406 	br	5e88 <__alt_data_end+0xff005e88>
    6138:	61bfffc4 	addi	r6,r12,-1
    613c:	300490fa 	slli	r2,r6,3
    6140:	00c00074 	movhi	r3,1
    6144:	18c54b04 	addi	r3,r3,5420
    6148:	1885883a 	add	r2,r3,r2
    614c:	11000017 	ldw	r4,0(r2)
    6150:	11400117 	ldw	r5,4(r2)
    6154:	d8800717 	ldw	r2,28(sp)
    6158:	880f883a 	mov	r7,r17
    615c:	d9801215 	stw	r6,72(sp)
    6160:	800d883a 	mov	r6,r16
    6164:	db001615 	stw	r12,88(sp)
    6168:	15c00044 	addi	r23,r2,1
    616c:	000d2bc0 	call	d2bc <__muldf3>
    6170:	d9401017 	ldw	r5,64(sp)
    6174:	d9000f17 	ldw	r4,60(sp)
    6178:	d8c01515 	stw	r3,84(sp)
    617c:	d8801415 	stw	r2,80(sp)
    6180:	000e2d00 	call	e2d0 <__fixdfsi>
    6184:	1009883a 	mov	r4,r2
    6188:	1021883a 	mov	r16,r2
    618c:	000e3500 	call	e350 <__floatsidf>
    6190:	d9000f17 	ldw	r4,60(sp)
    6194:	d9401017 	ldw	r5,64(sp)
    6198:	100d883a 	mov	r6,r2
    619c:	180f883a 	mov	r7,r3
    61a0:	000d9d40 	call	d9d4 <__subdf3>
    61a4:	1829883a 	mov	r20,r3
    61a8:	d8c00717 	ldw	r3,28(sp)
    61ac:	84000c04 	addi	r16,r16,48
    61b0:	1023883a 	mov	r17,r2
    61b4:	1c000005 	stb	r16,0(r3)
    61b8:	db001617 	ldw	r12,88(sp)
    61bc:	00800044 	movi	r2,1
    61c0:	60802226 	beq	r12,r2,624c <_dtoa_r+0x1424>
    61c4:	d9c00717 	ldw	r7,28(sp)
    61c8:	8805883a 	mov	r2,r17
    61cc:	b82b883a 	mov	r21,r23
    61d0:	3b19883a 	add	r12,r7,r12
    61d4:	6023883a 	mov	r17,r12
    61d8:	a007883a 	mov	r3,r20
    61dc:	dc800f15 	stw	r18,60(sp)
    61e0:	000d883a 	mov	r6,zero
    61e4:	01d00934 	movhi	r7,16420
    61e8:	1009883a 	mov	r4,r2
    61ec:	180b883a 	mov	r5,r3
    61f0:	000d2bc0 	call	d2bc <__muldf3>
    61f4:	180b883a 	mov	r5,r3
    61f8:	1009883a 	mov	r4,r2
    61fc:	1829883a 	mov	r20,r3
    6200:	1025883a 	mov	r18,r2
    6204:	000e2d00 	call	e2d0 <__fixdfsi>
    6208:	1009883a 	mov	r4,r2
    620c:	1021883a 	mov	r16,r2
    6210:	000e3500 	call	e350 <__floatsidf>
    6214:	100d883a 	mov	r6,r2
    6218:	180f883a 	mov	r7,r3
    621c:	9009883a 	mov	r4,r18
    6220:	a00b883a 	mov	r5,r20
    6224:	84000c04 	addi	r16,r16,48
    6228:	000d9d40 	call	d9d4 <__subdf3>
    622c:	ad400044 	addi	r21,r21,1
    6230:	ac3fffc5 	stb	r16,-1(r21)
    6234:	ac7fea1e 	bne	r21,r17,61e0 <__alt_data_end+0xff0061e0>
    6238:	1023883a 	mov	r17,r2
    623c:	d8801217 	ldw	r2,72(sp)
    6240:	dc800f17 	ldw	r18,60(sp)
    6244:	1829883a 	mov	r20,r3
    6248:	b8af883a 	add	r23,r23,r2
    624c:	d9001417 	ldw	r4,80(sp)
    6250:	d9401517 	ldw	r5,84(sp)
    6254:	000d883a 	mov	r6,zero
    6258:	01cff834 	movhi	r7,16352
    625c:	000bed00 	call	bed0 <__adddf3>
    6260:	880d883a 	mov	r6,r17
    6264:	a00f883a 	mov	r7,r20
    6268:	1009883a 	mov	r4,r2
    626c:	180b883a 	mov	r5,r3
    6270:	000d1c80 	call	d1c8 <__ledf2>
    6274:	10003e0e 	bge	r2,zero,6370 <_dtoa_r+0x1548>
    6278:	d9001317 	ldw	r4,76(sp)
    627c:	bd3fffc3 	ldbu	r20,-1(r23)
    6280:	d9000515 	stw	r4,20(sp)
    6284:	003d3b06 	br	5774 <__alt_data_end+0xff005774>
    6288:	0027883a 	mov	r19,zero
    628c:	003f1b06 	br	5efc <__alt_data_end+0xff005efc>
    6290:	d8800817 	ldw	r2,32(sp)
    6294:	11e9c83a 	sub	r20,r2,r7
    6298:	0005883a 	mov	r2,zero
    629c:	003d5406 	br	57f0 <__alt_data_end+0xff0057f0>
    62a0:	00800044 	movi	r2,1
    62a4:	003dc706 	br	59c4 <__alt_data_end+0xff0059c4>
    62a8:	d8c00217 	ldw	r3,8(sp)
    62ac:	00800d84 	movi	r2,54
    62b0:	dd400a17 	ldw	r21,40(sp)
    62b4:	10c5c83a 	sub	r2,r2,r3
    62b8:	dd000817 	ldw	r20,32(sp)
    62bc:	003d4c06 	br	57f0 <__alt_data_end+0xff0057f0>
    62c0:	dc800f15 	stw	r18,60(sp)
    62c4:	dcc01015 	stw	r19,64(sp)
    62c8:	04000084 	movi	r16,2
    62cc:	003bed06 	br	5284 <__alt_data_end+0xff005284>
    62d0:	d9000617 	ldw	r4,24(sp)
    62d4:	203f0d26 	beq	r4,zero,5f0c <__alt_data_end+0xff005f0c>
    62d8:	d9800c17 	ldw	r6,48(sp)
    62dc:	01bcab0e 	bge	zero,r6,558c <__alt_data_end+0xff00558c>
    62e0:	d9401017 	ldw	r5,64(sp)
    62e4:	d9000f17 	ldw	r4,60(sp)
    62e8:	000d883a 	mov	r6,zero
    62ec:	01d00934 	movhi	r7,16420
    62f0:	000d2bc0 	call	d2bc <__muldf3>
    62f4:	81000044 	addi	r4,r16,1
    62f8:	d8800f15 	stw	r2,60(sp)
    62fc:	d8c01015 	stw	r3,64(sp)
    6300:	000e3500 	call	e350 <__floatsidf>
    6304:	d9800f17 	ldw	r6,60(sp)
    6308:	d9c01017 	ldw	r7,64(sp)
    630c:	1009883a 	mov	r4,r2
    6310:	180b883a 	mov	r5,r3
    6314:	000d2bc0 	call	d2bc <__muldf3>
    6318:	01d00734 	movhi	r7,16412
    631c:	000d883a 	mov	r6,zero
    6320:	1009883a 	mov	r4,r2
    6324:	180b883a 	mov	r5,r3
    6328:	000bed00 	call	bed0 <__adddf3>
    632c:	d9c00517 	ldw	r7,20(sp)
    6330:	047f3034 	movhi	r17,64704
    6334:	1021883a 	mov	r16,r2
    6338:	39ffffc4 	addi	r7,r7,-1
    633c:	d9c01315 	stw	r7,76(sp)
    6340:	1c63883a 	add	r17,r3,r17
    6344:	db000c17 	ldw	r12,48(sp)
    6348:	003bea06 	br	52f4 <__alt_data_end+0xff0052f4>
    634c:	dc000915 	stw	r16,36(sp)
    6350:	003e0e06 	br	5b8c <__alt_data_end+0xff005b8c>
    6354:	01000e44 	movi	r4,57
    6358:	8825883a 	mov	r18,r17
    635c:	9dc00044 	addi	r23,r19,1
    6360:	99000005 	stb	r4,0(r19)
    6364:	a023883a 	mov	r17,r20
    6368:	dc000915 	stw	r16,36(sp)
    636c:	003da406 	br	5a00 <__alt_data_end+0xff005a00>
    6370:	d9801417 	ldw	r6,80(sp)
    6374:	d9c01517 	ldw	r7,84(sp)
    6378:	0009883a 	mov	r4,zero
    637c:	014ff834 	movhi	r5,16352
    6380:	000d9d40 	call	d9d4 <__subdf3>
    6384:	880d883a 	mov	r6,r17
    6388:	a00f883a 	mov	r7,r20
    638c:	1009883a 	mov	r4,r2
    6390:	180b883a 	mov	r5,r3
    6394:	000d0ec0 	call	d0ec <__gedf2>
    6398:	00bc7c0e 	bge	zero,r2,558c <__alt_data_end+0xff00558c>
    639c:	01000c04 	movi	r4,48
    63a0:	00000106 	br	63a8 <_dtoa_r+0x1580>
    63a4:	102f883a 	mov	r23,r2
    63a8:	b8bfffc4 	addi	r2,r23,-1
    63ac:	10c00007 	ldb	r3,0(r2)
    63b0:	193ffc26 	beq	r3,r4,63a4 <__alt_data_end+0xff0063a4>
    63b4:	d9801317 	ldw	r6,76(sp)
    63b8:	d9800515 	stw	r6,20(sp)
    63bc:	003c4406 	br	54d0 <__alt_data_end+0xff0054d0>
    63c0:	d9801317 	ldw	r6,76(sp)
    63c4:	d9800515 	stw	r6,20(sp)
    63c8:	003cea06 	br	5774 <__alt_data_end+0xff005774>
    63cc:	dd800f17 	ldw	r22,60(sp)
    63d0:	dcc01017 	ldw	r19,64(sp)
    63d4:	dc801217 	ldw	r18,72(sp)
    63d8:	003c6c06 	br	558c <__alt_data_end+0xff00558c>
    63dc:	903e031e 	bne	r18,zero,5bec <__alt_data_end+0xff005bec>
    63e0:	003ebb06 	br	5ed0 <__alt_data_end+0xff005ed0>
    63e4:	103e6c1e 	bne	r2,zero,5d98 <__alt_data_end+0xff005d98>
    63e8:	4080004c 	andi	r2,r8,1
    63ec:	103e6a26 	beq	r2,zero,5d98 <__alt_data_end+0xff005d98>
    63f0:	003e6606 	br	5d8c <__alt_data_end+0xff005d8c>
    63f4:	d8c00317 	ldw	r3,12(sp)
    63f8:	00800084 	movi	r2,2
    63fc:	10c02916 	blt	r2,r3,64a4 <_dtoa_r+0x167c>
    6400:	d9000c17 	ldw	r4,48(sp)
    6404:	003e8806 	br	5e28 <__alt_data_end+0xff005e28>
    6408:	04000084 	movi	r16,2
    640c:	003b9d06 	br	5284 <__alt_data_end+0xff005284>
    6410:	d9001317 	ldw	r4,76(sp)
    6414:	d9000515 	stw	r4,20(sp)
    6418:	003cd606 	br	5774 <__alt_data_end+0xff005774>
    641c:	d8801317 	ldw	r2,76(sp)
    6420:	d8800515 	stw	r2,20(sp)
    6424:	003c2a06 	br	54d0 <__alt_data_end+0xff0054d0>
    6428:	d9800317 	ldw	r6,12(sp)
    642c:	00800084 	movi	r2,2
    6430:	11801516 	blt	r2,r6,6488 <_dtoa_r+0x1660>
    6434:	d9c00c17 	ldw	r7,48(sp)
    6438:	d9c00615 	stw	r7,24(sp)
    643c:	003df706 	br	5c1c <__alt_data_end+0xff005c1c>
    6440:	193d3926 	beq	r3,r4,5928 <__alt_data_end+0xff005928>
    6444:	00c00f04 	movi	r3,60
    6448:	1885c83a 	sub	r2,r3,r2
    644c:	003ddf06 	br	5bcc <__alt_data_end+0xff005bcc>
    6450:	e009883a 	mov	r4,fp
    6454:	e0001115 	stw	zero,68(fp)
    6458:	000b883a 	mov	r5,zero
    645c:	0007cb80 	call	7cb8 <_Balloc>
    6460:	d8800715 	stw	r2,28(sp)
    6464:	d8c00717 	ldw	r3,28(sp)
    6468:	00bfffc4 	movi	r2,-1
    646c:	01000044 	movi	r4,1
    6470:	d8800c15 	stw	r2,48(sp)
    6474:	e0c01015 	stw	r3,64(fp)
    6478:	d9000b15 	stw	r4,44(sp)
    647c:	d8800615 	stw	r2,24(sp)
    6480:	d8002215 	stw	zero,136(sp)
    6484:	003c4106 	br	558c <__alt_data_end+0xff00558c>
    6488:	d8c00c17 	ldw	r3,48(sp)
    648c:	d8c00615 	stw	r3,24(sp)
    6490:	003e7006 	br	5e54 <__alt_data_end+0xff005e54>
    6494:	04400044 	movi	r17,1
    6498:	003b2006 	br	511c <__alt_data_end+0xff00511c>
    649c:	000b883a 	mov	r5,zero
    64a0:	003b3d06 	br	5198 <__alt_data_end+0xff005198>
    64a4:	d8800c17 	ldw	r2,48(sp)
    64a8:	d8800615 	stw	r2,24(sp)
    64ac:	003e6906 	br	5e54 <__alt_data_end+0xff005e54>

000064b0 <__sflush_r>:
    64b0:	2880030b 	ldhu	r2,12(r5)
    64b4:	defffb04 	addi	sp,sp,-20
    64b8:	dcc00315 	stw	r19,12(sp)
    64bc:	dc400115 	stw	r17,4(sp)
    64c0:	dfc00415 	stw	ra,16(sp)
    64c4:	dc800215 	stw	r18,8(sp)
    64c8:	dc000015 	stw	r16,0(sp)
    64cc:	10c0020c 	andi	r3,r2,8
    64d0:	2823883a 	mov	r17,r5
    64d4:	2027883a 	mov	r19,r4
    64d8:	1800311e 	bne	r3,zero,65a0 <__sflush_r+0xf0>
    64dc:	28c00117 	ldw	r3,4(r5)
    64e0:	10820014 	ori	r2,r2,2048
    64e4:	2880030d 	sth	r2,12(r5)
    64e8:	00c04b0e 	bge	zero,r3,6618 <__sflush_r+0x168>
    64ec:	8a000a17 	ldw	r8,40(r17)
    64f0:	40002326 	beq	r8,zero,6580 <__sflush_r+0xd0>
    64f4:	9c000017 	ldw	r16,0(r19)
    64f8:	10c4000c 	andi	r3,r2,4096
    64fc:	98000015 	stw	zero,0(r19)
    6500:	18004826 	beq	r3,zero,6624 <__sflush_r+0x174>
    6504:	89801417 	ldw	r6,80(r17)
    6508:	10c0010c 	andi	r3,r2,4
    650c:	18000626 	beq	r3,zero,6528 <__sflush_r+0x78>
    6510:	88c00117 	ldw	r3,4(r17)
    6514:	88800c17 	ldw	r2,48(r17)
    6518:	30cdc83a 	sub	r6,r6,r3
    651c:	10000226 	beq	r2,zero,6528 <__sflush_r+0x78>
    6520:	88800f17 	ldw	r2,60(r17)
    6524:	308dc83a 	sub	r6,r6,r2
    6528:	89400717 	ldw	r5,28(r17)
    652c:	000f883a 	mov	r7,zero
    6530:	9809883a 	mov	r4,r19
    6534:	403ee83a 	callr	r8
    6538:	00ffffc4 	movi	r3,-1
    653c:	10c04426 	beq	r2,r3,6650 <__sflush_r+0x1a0>
    6540:	88c0030b 	ldhu	r3,12(r17)
    6544:	89000417 	ldw	r4,16(r17)
    6548:	88000115 	stw	zero,4(r17)
    654c:	197dffcc 	andi	r5,r3,63487
    6550:	8940030d 	sth	r5,12(r17)
    6554:	89000015 	stw	r4,0(r17)
    6558:	18c4000c 	andi	r3,r3,4096
    655c:	18002c1e 	bne	r3,zero,6610 <__sflush_r+0x160>
    6560:	89400c17 	ldw	r5,48(r17)
    6564:	9c000015 	stw	r16,0(r19)
    6568:	28000526 	beq	r5,zero,6580 <__sflush_r+0xd0>
    656c:	88801004 	addi	r2,r17,64
    6570:	28800226 	beq	r5,r2,657c <__sflush_r+0xcc>
    6574:	9809883a 	mov	r4,r19
    6578:	0006c1c0 	call	6c1c <_free_r>
    657c:	88000c15 	stw	zero,48(r17)
    6580:	0005883a 	mov	r2,zero
    6584:	dfc00417 	ldw	ra,16(sp)
    6588:	dcc00317 	ldw	r19,12(sp)
    658c:	dc800217 	ldw	r18,8(sp)
    6590:	dc400117 	ldw	r17,4(sp)
    6594:	dc000017 	ldw	r16,0(sp)
    6598:	dec00504 	addi	sp,sp,20
    659c:	f800283a 	ret
    65a0:	2c800417 	ldw	r18,16(r5)
    65a4:	903ff626 	beq	r18,zero,6580 <__alt_data_end+0xff006580>
    65a8:	2c000017 	ldw	r16,0(r5)
    65ac:	108000cc 	andi	r2,r2,3
    65b0:	2c800015 	stw	r18,0(r5)
    65b4:	84a1c83a 	sub	r16,r16,r18
    65b8:	1000131e 	bne	r2,zero,6608 <__sflush_r+0x158>
    65bc:	28800517 	ldw	r2,20(r5)
    65c0:	88800215 	stw	r2,8(r17)
    65c4:	04000316 	blt	zero,r16,65d4 <__sflush_r+0x124>
    65c8:	003fed06 	br	6580 <__alt_data_end+0xff006580>
    65cc:	90a5883a 	add	r18,r18,r2
    65d0:	043feb0e 	bge	zero,r16,6580 <__alt_data_end+0xff006580>
    65d4:	88800917 	ldw	r2,36(r17)
    65d8:	89400717 	ldw	r5,28(r17)
    65dc:	800f883a 	mov	r7,r16
    65e0:	900d883a 	mov	r6,r18
    65e4:	9809883a 	mov	r4,r19
    65e8:	103ee83a 	callr	r2
    65ec:	80a1c83a 	sub	r16,r16,r2
    65f0:	00bff616 	blt	zero,r2,65cc <__alt_data_end+0xff0065cc>
    65f4:	88c0030b 	ldhu	r3,12(r17)
    65f8:	00bfffc4 	movi	r2,-1
    65fc:	18c01014 	ori	r3,r3,64
    6600:	88c0030d 	sth	r3,12(r17)
    6604:	003fdf06 	br	6584 <__alt_data_end+0xff006584>
    6608:	0005883a 	mov	r2,zero
    660c:	003fec06 	br	65c0 <__alt_data_end+0xff0065c0>
    6610:	88801415 	stw	r2,80(r17)
    6614:	003fd206 	br	6560 <__alt_data_end+0xff006560>
    6618:	28c00f17 	ldw	r3,60(r5)
    661c:	00ffb316 	blt	zero,r3,64ec <__alt_data_end+0xff0064ec>
    6620:	003fd706 	br	6580 <__alt_data_end+0xff006580>
    6624:	89400717 	ldw	r5,28(r17)
    6628:	000d883a 	mov	r6,zero
    662c:	01c00044 	movi	r7,1
    6630:	9809883a 	mov	r4,r19
    6634:	403ee83a 	callr	r8
    6638:	100d883a 	mov	r6,r2
    663c:	00bfffc4 	movi	r2,-1
    6640:	30801426 	beq	r6,r2,6694 <__sflush_r+0x1e4>
    6644:	8880030b 	ldhu	r2,12(r17)
    6648:	8a000a17 	ldw	r8,40(r17)
    664c:	003fae06 	br	6508 <__alt_data_end+0xff006508>
    6650:	98c00017 	ldw	r3,0(r19)
    6654:	183fba26 	beq	r3,zero,6540 <__alt_data_end+0xff006540>
    6658:	01000744 	movi	r4,29
    665c:	19000626 	beq	r3,r4,6678 <__sflush_r+0x1c8>
    6660:	01000584 	movi	r4,22
    6664:	19000426 	beq	r3,r4,6678 <__sflush_r+0x1c8>
    6668:	88c0030b 	ldhu	r3,12(r17)
    666c:	18c01014 	ori	r3,r3,64
    6670:	88c0030d 	sth	r3,12(r17)
    6674:	003fc306 	br	6584 <__alt_data_end+0xff006584>
    6678:	8880030b 	ldhu	r2,12(r17)
    667c:	88c00417 	ldw	r3,16(r17)
    6680:	88000115 	stw	zero,4(r17)
    6684:	10bdffcc 	andi	r2,r2,63487
    6688:	8880030d 	sth	r2,12(r17)
    668c:	88c00015 	stw	r3,0(r17)
    6690:	003fb306 	br	6560 <__alt_data_end+0xff006560>
    6694:	98800017 	ldw	r2,0(r19)
    6698:	103fea26 	beq	r2,zero,6644 <__alt_data_end+0xff006644>
    669c:	00c00744 	movi	r3,29
    66a0:	10c00226 	beq	r2,r3,66ac <__sflush_r+0x1fc>
    66a4:	00c00584 	movi	r3,22
    66a8:	10c0031e 	bne	r2,r3,66b8 <__sflush_r+0x208>
    66ac:	9c000015 	stw	r16,0(r19)
    66b0:	0005883a 	mov	r2,zero
    66b4:	003fb306 	br	6584 <__alt_data_end+0xff006584>
    66b8:	88c0030b 	ldhu	r3,12(r17)
    66bc:	3005883a 	mov	r2,r6
    66c0:	18c01014 	ori	r3,r3,64
    66c4:	88c0030d 	sth	r3,12(r17)
    66c8:	003fae06 	br	6584 <__alt_data_end+0xff006584>

000066cc <_fflush_r>:
    66cc:	defffd04 	addi	sp,sp,-12
    66d0:	dc000115 	stw	r16,4(sp)
    66d4:	dfc00215 	stw	ra,8(sp)
    66d8:	2021883a 	mov	r16,r4
    66dc:	20000226 	beq	r4,zero,66e8 <_fflush_r+0x1c>
    66e0:	20800e17 	ldw	r2,56(r4)
    66e4:	10000c26 	beq	r2,zero,6718 <_fflush_r+0x4c>
    66e8:	2880030f 	ldh	r2,12(r5)
    66ec:	1000051e 	bne	r2,zero,6704 <_fflush_r+0x38>
    66f0:	0005883a 	mov	r2,zero
    66f4:	dfc00217 	ldw	ra,8(sp)
    66f8:	dc000117 	ldw	r16,4(sp)
    66fc:	dec00304 	addi	sp,sp,12
    6700:	f800283a 	ret
    6704:	8009883a 	mov	r4,r16
    6708:	dfc00217 	ldw	ra,8(sp)
    670c:	dc000117 	ldw	r16,4(sp)
    6710:	dec00304 	addi	sp,sp,12
    6714:	00064b01 	jmpi	64b0 <__sflush_r>
    6718:	d9400015 	stw	r5,0(sp)
    671c:	0006aa80 	call	6aa8 <__sinit>
    6720:	d9400017 	ldw	r5,0(sp)
    6724:	003ff006 	br	66e8 <__alt_data_end+0xff0066e8>

00006728 <fflush>:
    6728:	20000526 	beq	r4,zero,6740 <fflush+0x18>
    672c:	00800074 	movhi	r2,1
    6730:	108c7e04 	addi	r2,r2,12792
    6734:	200b883a 	mov	r5,r4
    6738:	11000017 	ldw	r4,0(r2)
    673c:	00066cc1 	jmpi	66cc <_fflush_r>
    6740:	00800074 	movhi	r2,1
    6744:	108c7d04 	addi	r2,r2,12788
    6748:	11000017 	ldw	r4,0(r2)
    674c:	01400034 	movhi	r5,0
    6750:	2959b304 	addi	r5,r5,26316
    6754:	00074ac1 	jmpi	74ac <_fwalk_reent>

00006758 <__fp_unlock>:
    6758:	0005883a 	mov	r2,zero
    675c:	f800283a 	ret

00006760 <_cleanup_r>:
    6760:	01400074 	movhi	r5,1
    6764:	296b1904 	addi	r5,r5,-21404
    6768:	00074ac1 	jmpi	74ac <_fwalk_reent>

0000676c <__sinit.part.1>:
    676c:	defff704 	addi	sp,sp,-36
    6770:	00c00034 	movhi	r3,0
    6774:	dfc00815 	stw	ra,32(sp)
    6778:	ddc00715 	stw	r23,28(sp)
    677c:	dd800615 	stw	r22,24(sp)
    6780:	dd400515 	stw	r21,20(sp)
    6784:	dd000415 	stw	r20,16(sp)
    6788:	dcc00315 	stw	r19,12(sp)
    678c:	dc800215 	stw	r18,8(sp)
    6790:	dc400115 	stw	r17,4(sp)
    6794:	dc000015 	stw	r16,0(sp)
    6798:	18d9d804 	addi	r3,r3,26464
    679c:	24000117 	ldw	r16,4(r4)
    67a0:	20c00f15 	stw	r3,60(r4)
    67a4:	2080bb04 	addi	r2,r4,748
    67a8:	00c000c4 	movi	r3,3
    67ac:	20c0b915 	stw	r3,740(r4)
    67b0:	2080ba15 	stw	r2,744(r4)
    67b4:	2000b815 	stw	zero,736(r4)
    67b8:	05c00204 	movi	r23,8
    67bc:	00800104 	movi	r2,4
    67c0:	2025883a 	mov	r18,r4
    67c4:	b80d883a 	mov	r6,r23
    67c8:	81001704 	addi	r4,r16,92
    67cc:	000b883a 	mov	r5,zero
    67d0:	80000015 	stw	zero,0(r16)
    67d4:	80000115 	stw	zero,4(r16)
    67d8:	80000215 	stw	zero,8(r16)
    67dc:	8080030d 	sth	r2,12(r16)
    67e0:	80001915 	stw	zero,100(r16)
    67e4:	8000038d 	sth	zero,14(r16)
    67e8:	80000415 	stw	zero,16(r16)
    67ec:	80000515 	stw	zero,20(r16)
    67f0:	80000615 	stw	zero,24(r16)
    67f4:	0007b900 	call	7b90 <memset>
    67f8:	05800074 	movhi	r22,1
    67fc:	94400217 	ldw	r17,8(r18)
    6800:	05400074 	movhi	r21,1
    6804:	05000074 	movhi	r20,1
    6808:	04c00074 	movhi	r19,1
    680c:	b5a4a304 	addi	r22,r22,-28020
    6810:	ad64ba04 	addi	r21,r21,-27928
    6814:	a524d904 	addi	r20,r20,-27804
    6818:	9ce4f004 	addi	r19,r19,-27712
    681c:	85800815 	stw	r22,32(r16)
    6820:	85400915 	stw	r21,36(r16)
    6824:	85000a15 	stw	r20,40(r16)
    6828:	84c00b15 	stw	r19,44(r16)
    682c:	84000715 	stw	r16,28(r16)
    6830:	00800284 	movi	r2,10
    6834:	8880030d 	sth	r2,12(r17)
    6838:	00800044 	movi	r2,1
    683c:	b80d883a 	mov	r6,r23
    6840:	89001704 	addi	r4,r17,92
    6844:	000b883a 	mov	r5,zero
    6848:	88000015 	stw	zero,0(r17)
    684c:	88000115 	stw	zero,4(r17)
    6850:	88000215 	stw	zero,8(r17)
    6854:	88001915 	stw	zero,100(r17)
    6858:	8880038d 	sth	r2,14(r17)
    685c:	88000415 	stw	zero,16(r17)
    6860:	88000515 	stw	zero,20(r17)
    6864:	88000615 	stw	zero,24(r17)
    6868:	0007b900 	call	7b90 <memset>
    686c:	94000317 	ldw	r16,12(r18)
    6870:	00800484 	movi	r2,18
    6874:	8c400715 	stw	r17,28(r17)
    6878:	8d800815 	stw	r22,32(r17)
    687c:	8d400915 	stw	r21,36(r17)
    6880:	8d000a15 	stw	r20,40(r17)
    6884:	8cc00b15 	stw	r19,44(r17)
    6888:	8080030d 	sth	r2,12(r16)
    688c:	00800084 	movi	r2,2
    6890:	80000015 	stw	zero,0(r16)
    6894:	80000115 	stw	zero,4(r16)
    6898:	80000215 	stw	zero,8(r16)
    689c:	80001915 	stw	zero,100(r16)
    68a0:	8080038d 	sth	r2,14(r16)
    68a4:	80000415 	stw	zero,16(r16)
    68a8:	80000515 	stw	zero,20(r16)
    68ac:	80000615 	stw	zero,24(r16)
    68b0:	b80d883a 	mov	r6,r23
    68b4:	000b883a 	mov	r5,zero
    68b8:	81001704 	addi	r4,r16,92
    68bc:	0007b900 	call	7b90 <memset>
    68c0:	00800044 	movi	r2,1
    68c4:	84000715 	stw	r16,28(r16)
    68c8:	85800815 	stw	r22,32(r16)
    68cc:	85400915 	stw	r21,36(r16)
    68d0:	85000a15 	stw	r20,40(r16)
    68d4:	84c00b15 	stw	r19,44(r16)
    68d8:	90800e15 	stw	r2,56(r18)
    68dc:	dfc00817 	ldw	ra,32(sp)
    68e0:	ddc00717 	ldw	r23,28(sp)
    68e4:	dd800617 	ldw	r22,24(sp)
    68e8:	dd400517 	ldw	r21,20(sp)
    68ec:	dd000417 	ldw	r20,16(sp)
    68f0:	dcc00317 	ldw	r19,12(sp)
    68f4:	dc800217 	ldw	r18,8(sp)
    68f8:	dc400117 	ldw	r17,4(sp)
    68fc:	dc000017 	ldw	r16,0(sp)
    6900:	dec00904 	addi	sp,sp,36
    6904:	f800283a 	ret

00006908 <__fp_lock>:
    6908:	0005883a 	mov	r2,zero
    690c:	f800283a 	ret

00006910 <__sfmoreglue>:
    6910:	defffc04 	addi	sp,sp,-16
    6914:	dc400115 	stw	r17,4(sp)
    6918:	2c7fffc4 	addi	r17,r5,-1
    691c:	8c401a24 	muli	r17,r17,104
    6920:	dc800215 	stw	r18,8(sp)
    6924:	2825883a 	mov	r18,r5
    6928:	89401d04 	addi	r5,r17,116
    692c:	dc000015 	stw	r16,0(sp)
    6930:	dfc00315 	stw	ra,12(sp)
    6934:	0001dcc0 	call	1dcc <_malloc_r>
    6938:	1021883a 	mov	r16,r2
    693c:	10000726 	beq	r2,zero,695c <__sfmoreglue+0x4c>
    6940:	11000304 	addi	r4,r2,12
    6944:	10000015 	stw	zero,0(r2)
    6948:	14800115 	stw	r18,4(r2)
    694c:	11000215 	stw	r4,8(r2)
    6950:	89801a04 	addi	r6,r17,104
    6954:	000b883a 	mov	r5,zero
    6958:	0007b900 	call	7b90 <memset>
    695c:	8005883a 	mov	r2,r16
    6960:	dfc00317 	ldw	ra,12(sp)
    6964:	dc800217 	ldw	r18,8(sp)
    6968:	dc400117 	ldw	r17,4(sp)
    696c:	dc000017 	ldw	r16,0(sp)
    6970:	dec00404 	addi	sp,sp,16
    6974:	f800283a 	ret

00006978 <__sfp>:
    6978:	defffb04 	addi	sp,sp,-20
    697c:	dc000015 	stw	r16,0(sp)
    6980:	04000074 	movhi	r16,1
    6984:	840c7d04 	addi	r16,r16,12788
    6988:	dcc00315 	stw	r19,12(sp)
    698c:	2027883a 	mov	r19,r4
    6990:	81000017 	ldw	r4,0(r16)
    6994:	dfc00415 	stw	ra,16(sp)
    6998:	dc800215 	stw	r18,8(sp)
    699c:	20800e17 	ldw	r2,56(r4)
    69a0:	dc400115 	stw	r17,4(sp)
    69a4:	1000021e 	bne	r2,zero,69b0 <__sfp+0x38>
    69a8:	000676c0 	call	676c <__sinit.part.1>
    69ac:	81000017 	ldw	r4,0(r16)
    69b0:	2480b804 	addi	r18,r4,736
    69b4:	047fffc4 	movi	r17,-1
    69b8:	91000117 	ldw	r4,4(r18)
    69bc:	94000217 	ldw	r16,8(r18)
    69c0:	213fffc4 	addi	r4,r4,-1
    69c4:	20000a16 	blt	r4,zero,69f0 <__sfp+0x78>
    69c8:	8080030f 	ldh	r2,12(r16)
    69cc:	10000c26 	beq	r2,zero,6a00 <__sfp+0x88>
    69d0:	80c01d04 	addi	r3,r16,116
    69d4:	00000206 	br	69e0 <__sfp+0x68>
    69d8:	18bfe60f 	ldh	r2,-104(r3)
    69dc:	10000826 	beq	r2,zero,6a00 <__sfp+0x88>
    69e0:	213fffc4 	addi	r4,r4,-1
    69e4:	1c3ffd04 	addi	r16,r3,-12
    69e8:	18c01a04 	addi	r3,r3,104
    69ec:	247ffa1e 	bne	r4,r17,69d8 <__alt_data_end+0xff0069d8>
    69f0:	90800017 	ldw	r2,0(r18)
    69f4:	10001d26 	beq	r2,zero,6a6c <__sfp+0xf4>
    69f8:	1025883a 	mov	r18,r2
    69fc:	003fee06 	br	69b8 <__alt_data_end+0xff0069b8>
    6a00:	00bfffc4 	movi	r2,-1
    6a04:	8080038d 	sth	r2,14(r16)
    6a08:	00800044 	movi	r2,1
    6a0c:	8080030d 	sth	r2,12(r16)
    6a10:	80001915 	stw	zero,100(r16)
    6a14:	80000015 	stw	zero,0(r16)
    6a18:	80000215 	stw	zero,8(r16)
    6a1c:	80000115 	stw	zero,4(r16)
    6a20:	80000415 	stw	zero,16(r16)
    6a24:	80000515 	stw	zero,20(r16)
    6a28:	80000615 	stw	zero,24(r16)
    6a2c:	01800204 	movi	r6,8
    6a30:	000b883a 	mov	r5,zero
    6a34:	81001704 	addi	r4,r16,92
    6a38:	0007b900 	call	7b90 <memset>
    6a3c:	8005883a 	mov	r2,r16
    6a40:	80000c15 	stw	zero,48(r16)
    6a44:	80000d15 	stw	zero,52(r16)
    6a48:	80001115 	stw	zero,68(r16)
    6a4c:	80001215 	stw	zero,72(r16)
    6a50:	dfc00417 	ldw	ra,16(sp)
    6a54:	dcc00317 	ldw	r19,12(sp)
    6a58:	dc800217 	ldw	r18,8(sp)
    6a5c:	dc400117 	ldw	r17,4(sp)
    6a60:	dc000017 	ldw	r16,0(sp)
    6a64:	dec00504 	addi	sp,sp,20
    6a68:	f800283a 	ret
    6a6c:	01400104 	movi	r5,4
    6a70:	9809883a 	mov	r4,r19
    6a74:	00069100 	call	6910 <__sfmoreglue>
    6a78:	90800015 	stw	r2,0(r18)
    6a7c:	103fde1e 	bne	r2,zero,69f8 <__alt_data_end+0xff0069f8>
    6a80:	00800304 	movi	r2,12
    6a84:	98800015 	stw	r2,0(r19)
    6a88:	0005883a 	mov	r2,zero
    6a8c:	003ff006 	br	6a50 <__alt_data_end+0xff006a50>

00006a90 <_cleanup>:
    6a90:	00800074 	movhi	r2,1
    6a94:	108c7d04 	addi	r2,r2,12788
    6a98:	11000017 	ldw	r4,0(r2)
    6a9c:	01400074 	movhi	r5,1
    6aa0:	296b1904 	addi	r5,r5,-21404
    6aa4:	00074ac1 	jmpi	74ac <_fwalk_reent>

00006aa8 <__sinit>:
    6aa8:	20800e17 	ldw	r2,56(r4)
    6aac:	10000126 	beq	r2,zero,6ab4 <__sinit+0xc>
    6ab0:	f800283a 	ret
    6ab4:	000676c1 	jmpi	676c <__sinit.part.1>

00006ab8 <__sfp_lock_acquire>:
    6ab8:	f800283a 	ret

00006abc <__sfp_lock_release>:
    6abc:	f800283a 	ret

00006ac0 <__sinit_lock_acquire>:
    6ac0:	f800283a 	ret

00006ac4 <__sinit_lock_release>:
    6ac4:	f800283a 	ret

00006ac8 <__fp_lock_all>:
    6ac8:	00800074 	movhi	r2,1
    6acc:	108c7e04 	addi	r2,r2,12792
    6ad0:	11000017 	ldw	r4,0(r2)
    6ad4:	01400034 	movhi	r5,0
    6ad8:	295a4204 	addi	r5,r5,26888
    6adc:	00073e81 	jmpi	73e8 <_fwalk>

00006ae0 <__fp_unlock_all>:
    6ae0:	00800074 	movhi	r2,1
    6ae4:	108c7e04 	addi	r2,r2,12792
    6ae8:	11000017 	ldw	r4,0(r2)
    6aec:	01400034 	movhi	r5,0
    6af0:	2959d604 	addi	r5,r5,26456
    6af4:	00073e81 	jmpi	73e8 <_fwalk>

00006af8 <_malloc_trim_r>:
    6af8:	defffb04 	addi	sp,sp,-20
    6afc:	dcc00315 	stw	r19,12(sp)
    6b00:	04c00074 	movhi	r19,1
    6b04:	dc800215 	stw	r18,8(sp)
    6b08:	dc400115 	stw	r17,4(sp)
    6b0c:	dc000015 	stw	r16,0(sp)
    6b10:	dfc00415 	stw	ra,16(sp)
    6b14:	2821883a 	mov	r16,r5
    6b18:	9cc5d004 	addi	r19,r19,5952
    6b1c:	2025883a 	mov	r18,r4
    6b20:	000eab40 	call	eab4 <__malloc_lock>
    6b24:	98800217 	ldw	r2,8(r19)
    6b28:	14400117 	ldw	r17,4(r2)
    6b2c:	00bfff04 	movi	r2,-4
    6b30:	88a2703a 	and	r17,r17,r2
    6b34:	8c21c83a 	sub	r16,r17,r16
    6b38:	8403fbc4 	addi	r16,r16,4079
    6b3c:	8020d33a 	srli	r16,r16,12
    6b40:	0083ffc4 	movi	r2,4095
    6b44:	843fffc4 	addi	r16,r16,-1
    6b48:	8020933a 	slli	r16,r16,12
    6b4c:	1400060e 	bge	r2,r16,6b68 <_malloc_trim_r+0x70>
    6b50:	000b883a 	mov	r5,zero
    6b54:	9009883a 	mov	r4,r18
    6b58:	00027180 	call	2718 <_sbrk_r>
    6b5c:	98c00217 	ldw	r3,8(r19)
    6b60:	1c47883a 	add	r3,r3,r17
    6b64:	10c00a26 	beq	r2,r3,6b90 <_malloc_trim_r+0x98>
    6b68:	9009883a 	mov	r4,r18
    6b6c:	000ead80 	call	ead8 <__malloc_unlock>
    6b70:	0005883a 	mov	r2,zero
    6b74:	dfc00417 	ldw	ra,16(sp)
    6b78:	dcc00317 	ldw	r19,12(sp)
    6b7c:	dc800217 	ldw	r18,8(sp)
    6b80:	dc400117 	ldw	r17,4(sp)
    6b84:	dc000017 	ldw	r16,0(sp)
    6b88:	dec00504 	addi	sp,sp,20
    6b8c:	f800283a 	ret
    6b90:	040bc83a 	sub	r5,zero,r16
    6b94:	9009883a 	mov	r4,r18
    6b98:	00027180 	call	2718 <_sbrk_r>
    6b9c:	00ffffc4 	movi	r3,-1
    6ba0:	10c00d26 	beq	r2,r3,6bd8 <_malloc_trim_r+0xe0>
    6ba4:	00c00074 	movhi	r3,1
    6ba8:	18d36004 	addi	r3,r3,19840
    6bac:	18800017 	ldw	r2,0(r3)
    6bb0:	99000217 	ldw	r4,8(r19)
    6bb4:	8c23c83a 	sub	r17,r17,r16
    6bb8:	8c400054 	ori	r17,r17,1
    6bbc:	1421c83a 	sub	r16,r2,r16
    6bc0:	24400115 	stw	r17,4(r4)
    6bc4:	9009883a 	mov	r4,r18
    6bc8:	1c000015 	stw	r16,0(r3)
    6bcc:	000ead80 	call	ead8 <__malloc_unlock>
    6bd0:	00800044 	movi	r2,1
    6bd4:	003fe706 	br	6b74 <__alt_data_end+0xff006b74>
    6bd8:	000b883a 	mov	r5,zero
    6bdc:	9009883a 	mov	r4,r18
    6be0:	00027180 	call	2718 <_sbrk_r>
    6be4:	99000217 	ldw	r4,8(r19)
    6be8:	014003c4 	movi	r5,15
    6bec:	1107c83a 	sub	r3,r2,r4
    6bf0:	28ffdd0e 	bge	r5,r3,6b68 <__alt_data_end+0xff006b68>
    6bf4:	01400074 	movhi	r5,1
    6bf8:	294c7b04 	addi	r5,r5,12780
    6bfc:	29400017 	ldw	r5,0(r5)
    6c00:	18c00054 	ori	r3,r3,1
    6c04:	20c00115 	stw	r3,4(r4)
    6c08:	00c00074 	movhi	r3,1
    6c0c:	1145c83a 	sub	r2,r2,r5
    6c10:	18d36004 	addi	r3,r3,19840
    6c14:	18800015 	stw	r2,0(r3)
    6c18:	003fd306 	br	6b68 <__alt_data_end+0xff006b68>

00006c1c <_free_r>:
    6c1c:	28004126 	beq	r5,zero,6d24 <_free_r+0x108>
    6c20:	defffd04 	addi	sp,sp,-12
    6c24:	dc400115 	stw	r17,4(sp)
    6c28:	dc000015 	stw	r16,0(sp)
    6c2c:	2023883a 	mov	r17,r4
    6c30:	2821883a 	mov	r16,r5
    6c34:	dfc00215 	stw	ra,8(sp)
    6c38:	000eab40 	call	eab4 <__malloc_lock>
    6c3c:	81ffff17 	ldw	r7,-4(r16)
    6c40:	00bfff84 	movi	r2,-2
    6c44:	01000074 	movhi	r4,1
    6c48:	81bffe04 	addi	r6,r16,-8
    6c4c:	3884703a 	and	r2,r7,r2
    6c50:	2105d004 	addi	r4,r4,5952
    6c54:	308b883a 	add	r5,r6,r2
    6c58:	2a400117 	ldw	r9,4(r5)
    6c5c:	22000217 	ldw	r8,8(r4)
    6c60:	00ffff04 	movi	r3,-4
    6c64:	48c6703a 	and	r3,r9,r3
    6c68:	2a005726 	beq	r5,r8,6dc8 <_free_r+0x1ac>
    6c6c:	28c00115 	stw	r3,4(r5)
    6c70:	39c0004c 	andi	r7,r7,1
    6c74:	3800091e 	bne	r7,zero,6c9c <_free_r+0x80>
    6c78:	823ffe17 	ldw	r8,-8(r16)
    6c7c:	22400204 	addi	r9,r4,8
    6c80:	320dc83a 	sub	r6,r6,r8
    6c84:	31c00217 	ldw	r7,8(r6)
    6c88:	1205883a 	add	r2,r2,r8
    6c8c:	3a406526 	beq	r7,r9,6e24 <_free_r+0x208>
    6c90:	32000317 	ldw	r8,12(r6)
    6c94:	3a000315 	stw	r8,12(r7)
    6c98:	41c00215 	stw	r7,8(r8)
    6c9c:	28cf883a 	add	r7,r5,r3
    6ca0:	39c00117 	ldw	r7,4(r7)
    6ca4:	39c0004c 	andi	r7,r7,1
    6ca8:	38003a26 	beq	r7,zero,6d94 <_free_r+0x178>
    6cac:	10c00054 	ori	r3,r2,1
    6cb0:	30c00115 	stw	r3,4(r6)
    6cb4:	3087883a 	add	r3,r6,r2
    6cb8:	18800015 	stw	r2,0(r3)
    6cbc:	00c07fc4 	movi	r3,511
    6cc0:	18801936 	bltu	r3,r2,6d28 <_free_r+0x10c>
    6cc4:	1004d0fa 	srli	r2,r2,3
    6cc8:	01c00044 	movi	r7,1
    6ccc:	21400117 	ldw	r5,4(r4)
    6cd0:	10c00044 	addi	r3,r2,1
    6cd4:	18c7883a 	add	r3,r3,r3
    6cd8:	1005d0ba 	srai	r2,r2,2
    6cdc:	18c7883a 	add	r3,r3,r3
    6ce0:	18c7883a 	add	r3,r3,r3
    6ce4:	1907883a 	add	r3,r3,r4
    6ce8:	3884983a 	sll	r2,r7,r2
    6cec:	19c00017 	ldw	r7,0(r3)
    6cf0:	1a3ffe04 	addi	r8,r3,-8
    6cf4:	1144b03a 	or	r2,r2,r5
    6cf8:	32000315 	stw	r8,12(r6)
    6cfc:	31c00215 	stw	r7,8(r6)
    6d00:	20800115 	stw	r2,4(r4)
    6d04:	19800015 	stw	r6,0(r3)
    6d08:	39800315 	stw	r6,12(r7)
    6d0c:	8809883a 	mov	r4,r17
    6d10:	dfc00217 	ldw	ra,8(sp)
    6d14:	dc400117 	ldw	r17,4(sp)
    6d18:	dc000017 	ldw	r16,0(sp)
    6d1c:	dec00304 	addi	sp,sp,12
    6d20:	000ead81 	jmpi	ead8 <__malloc_unlock>
    6d24:	f800283a 	ret
    6d28:	100ad27a 	srli	r5,r2,9
    6d2c:	00c00104 	movi	r3,4
    6d30:	19404a36 	bltu	r3,r5,6e5c <_free_r+0x240>
    6d34:	100ad1ba 	srli	r5,r2,6
    6d38:	28c00e44 	addi	r3,r5,57
    6d3c:	18c7883a 	add	r3,r3,r3
    6d40:	29400e04 	addi	r5,r5,56
    6d44:	18c7883a 	add	r3,r3,r3
    6d48:	18c7883a 	add	r3,r3,r3
    6d4c:	1909883a 	add	r4,r3,r4
    6d50:	20c00017 	ldw	r3,0(r4)
    6d54:	01c00074 	movhi	r7,1
    6d58:	213ffe04 	addi	r4,r4,-8
    6d5c:	39c5d004 	addi	r7,r7,5952
    6d60:	20c04426 	beq	r4,r3,6e74 <_free_r+0x258>
    6d64:	01ffff04 	movi	r7,-4
    6d68:	19400117 	ldw	r5,4(r3)
    6d6c:	29ca703a 	and	r5,r5,r7
    6d70:	1140022e 	bgeu	r2,r5,6d7c <_free_r+0x160>
    6d74:	18c00217 	ldw	r3,8(r3)
    6d78:	20fffb1e 	bne	r4,r3,6d68 <__alt_data_end+0xff006d68>
    6d7c:	19000317 	ldw	r4,12(r3)
    6d80:	31000315 	stw	r4,12(r6)
    6d84:	30c00215 	stw	r3,8(r6)
    6d88:	21800215 	stw	r6,8(r4)
    6d8c:	19800315 	stw	r6,12(r3)
    6d90:	003fde06 	br	6d0c <__alt_data_end+0xff006d0c>
    6d94:	29c00217 	ldw	r7,8(r5)
    6d98:	10c5883a 	add	r2,r2,r3
    6d9c:	00c00074 	movhi	r3,1
    6da0:	18c5d204 	addi	r3,r3,5960
    6da4:	38c03b26 	beq	r7,r3,6e94 <_free_r+0x278>
    6da8:	2a000317 	ldw	r8,12(r5)
    6dac:	11400054 	ori	r5,r2,1
    6db0:	3087883a 	add	r3,r6,r2
    6db4:	3a000315 	stw	r8,12(r7)
    6db8:	41c00215 	stw	r7,8(r8)
    6dbc:	31400115 	stw	r5,4(r6)
    6dc0:	18800015 	stw	r2,0(r3)
    6dc4:	003fbd06 	br	6cbc <__alt_data_end+0xff006cbc>
    6dc8:	39c0004c 	andi	r7,r7,1
    6dcc:	10c5883a 	add	r2,r2,r3
    6dd0:	3800071e 	bne	r7,zero,6df0 <_free_r+0x1d4>
    6dd4:	81fffe17 	ldw	r7,-8(r16)
    6dd8:	31cdc83a 	sub	r6,r6,r7
    6ddc:	30c00317 	ldw	r3,12(r6)
    6de0:	31400217 	ldw	r5,8(r6)
    6de4:	11c5883a 	add	r2,r2,r7
    6de8:	28c00315 	stw	r3,12(r5)
    6dec:	19400215 	stw	r5,8(r3)
    6df0:	10c00054 	ori	r3,r2,1
    6df4:	30c00115 	stw	r3,4(r6)
    6df8:	00c00074 	movhi	r3,1
    6dfc:	18cc7c04 	addi	r3,r3,12784
    6e00:	18c00017 	ldw	r3,0(r3)
    6e04:	21800215 	stw	r6,8(r4)
    6e08:	10ffc036 	bltu	r2,r3,6d0c <__alt_data_end+0xff006d0c>
    6e0c:	00800074 	movhi	r2,1
    6e10:	10935204 	addi	r2,r2,19784
    6e14:	11400017 	ldw	r5,0(r2)
    6e18:	8809883a 	mov	r4,r17
    6e1c:	0006af80 	call	6af8 <_malloc_trim_r>
    6e20:	003fba06 	br	6d0c <__alt_data_end+0xff006d0c>
    6e24:	28c9883a 	add	r4,r5,r3
    6e28:	21000117 	ldw	r4,4(r4)
    6e2c:	2100004c 	andi	r4,r4,1
    6e30:	2000391e 	bne	r4,zero,6f18 <_free_r+0x2fc>
    6e34:	29c00217 	ldw	r7,8(r5)
    6e38:	29000317 	ldw	r4,12(r5)
    6e3c:	1885883a 	add	r2,r3,r2
    6e40:	10c00054 	ori	r3,r2,1
    6e44:	39000315 	stw	r4,12(r7)
    6e48:	21c00215 	stw	r7,8(r4)
    6e4c:	30c00115 	stw	r3,4(r6)
    6e50:	308d883a 	add	r6,r6,r2
    6e54:	30800015 	stw	r2,0(r6)
    6e58:	003fac06 	br	6d0c <__alt_data_end+0xff006d0c>
    6e5c:	00c00504 	movi	r3,20
    6e60:	19401536 	bltu	r3,r5,6eb8 <_free_r+0x29c>
    6e64:	28c01704 	addi	r3,r5,92
    6e68:	18c7883a 	add	r3,r3,r3
    6e6c:	294016c4 	addi	r5,r5,91
    6e70:	003fb406 	br	6d44 <__alt_data_end+0xff006d44>
    6e74:	280bd0ba 	srai	r5,r5,2
    6e78:	00c00044 	movi	r3,1
    6e7c:	38800117 	ldw	r2,4(r7)
    6e80:	194a983a 	sll	r5,r3,r5
    6e84:	2007883a 	mov	r3,r4
    6e88:	2884b03a 	or	r2,r5,r2
    6e8c:	38800115 	stw	r2,4(r7)
    6e90:	003fbb06 	br	6d80 <__alt_data_end+0xff006d80>
    6e94:	21800515 	stw	r6,20(r4)
    6e98:	21800415 	stw	r6,16(r4)
    6e9c:	10c00054 	ori	r3,r2,1
    6ea0:	31c00315 	stw	r7,12(r6)
    6ea4:	31c00215 	stw	r7,8(r6)
    6ea8:	30c00115 	stw	r3,4(r6)
    6eac:	308d883a 	add	r6,r6,r2
    6eb0:	30800015 	stw	r2,0(r6)
    6eb4:	003f9506 	br	6d0c <__alt_data_end+0xff006d0c>
    6eb8:	00c01504 	movi	r3,84
    6ebc:	19400536 	bltu	r3,r5,6ed4 <_free_r+0x2b8>
    6ec0:	100ad33a 	srli	r5,r2,12
    6ec4:	28c01bc4 	addi	r3,r5,111
    6ec8:	18c7883a 	add	r3,r3,r3
    6ecc:	29401b84 	addi	r5,r5,110
    6ed0:	003f9c06 	br	6d44 <__alt_data_end+0xff006d44>
    6ed4:	00c05504 	movi	r3,340
    6ed8:	19400536 	bltu	r3,r5,6ef0 <_free_r+0x2d4>
    6edc:	100ad3fa 	srli	r5,r2,15
    6ee0:	28c01e04 	addi	r3,r5,120
    6ee4:	18c7883a 	add	r3,r3,r3
    6ee8:	29401dc4 	addi	r5,r5,119
    6eec:	003f9506 	br	6d44 <__alt_data_end+0xff006d44>
    6ef0:	00c15504 	movi	r3,1364
    6ef4:	19400536 	bltu	r3,r5,6f0c <_free_r+0x2f0>
    6ef8:	100ad4ba 	srli	r5,r2,18
    6efc:	28c01f44 	addi	r3,r5,125
    6f00:	18c7883a 	add	r3,r3,r3
    6f04:	29401f04 	addi	r5,r5,124
    6f08:	003f8e06 	br	6d44 <__alt_data_end+0xff006d44>
    6f0c:	00c03f84 	movi	r3,254
    6f10:	01401f84 	movi	r5,126
    6f14:	003f8b06 	br	6d44 <__alt_data_end+0xff006d44>
    6f18:	10c00054 	ori	r3,r2,1
    6f1c:	30c00115 	stw	r3,4(r6)
    6f20:	308d883a 	add	r6,r6,r2
    6f24:	30800015 	stw	r2,0(r6)
    6f28:	003f7806 	br	6d0c <__alt_data_end+0xff006d0c>

00006f2c <__sfvwrite_r>:
    6f2c:	30800217 	ldw	r2,8(r6)
    6f30:	10006726 	beq	r2,zero,70d0 <__sfvwrite_r+0x1a4>
    6f34:	28c0030b 	ldhu	r3,12(r5)
    6f38:	defff404 	addi	sp,sp,-48
    6f3c:	dd400715 	stw	r21,28(sp)
    6f40:	dd000615 	stw	r20,24(sp)
    6f44:	dc000215 	stw	r16,8(sp)
    6f48:	dfc00b15 	stw	ra,44(sp)
    6f4c:	df000a15 	stw	fp,40(sp)
    6f50:	ddc00915 	stw	r23,36(sp)
    6f54:	dd800815 	stw	r22,32(sp)
    6f58:	dcc00515 	stw	r19,20(sp)
    6f5c:	dc800415 	stw	r18,16(sp)
    6f60:	dc400315 	stw	r17,12(sp)
    6f64:	1880020c 	andi	r2,r3,8
    6f68:	2821883a 	mov	r16,r5
    6f6c:	202b883a 	mov	r21,r4
    6f70:	3029883a 	mov	r20,r6
    6f74:	10002726 	beq	r2,zero,7014 <__sfvwrite_r+0xe8>
    6f78:	28800417 	ldw	r2,16(r5)
    6f7c:	10002526 	beq	r2,zero,7014 <__sfvwrite_r+0xe8>
    6f80:	1880008c 	andi	r2,r3,2
    6f84:	a4400017 	ldw	r17,0(r20)
    6f88:	10002a26 	beq	r2,zero,7034 <__sfvwrite_r+0x108>
    6f8c:	05a00034 	movhi	r22,32768
    6f90:	0027883a 	mov	r19,zero
    6f94:	0025883a 	mov	r18,zero
    6f98:	b5bf0004 	addi	r22,r22,-1024
    6f9c:	980d883a 	mov	r6,r19
    6fa0:	a809883a 	mov	r4,r21
    6fa4:	90004626 	beq	r18,zero,70c0 <__sfvwrite_r+0x194>
    6fa8:	900f883a 	mov	r7,r18
    6fac:	b480022e 	bgeu	r22,r18,6fb8 <__sfvwrite_r+0x8c>
    6fb0:	01e00034 	movhi	r7,32768
    6fb4:	39ff0004 	addi	r7,r7,-1024
    6fb8:	80800917 	ldw	r2,36(r16)
    6fbc:	81400717 	ldw	r5,28(r16)
    6fc0:	103ee83a 	callr	r2
    6fc4:	0080570e 	bge	zero,r2,7124 <__sfvwrite_r+0x1f8>
    6fc8:	a0c00217 	ldw	r3,8(r20)
    6fcc:	98a7883a 	add	r19,r19,r2
    6fd0:	90a5c83a 	sub	r18,r18,r2
    6fd4:	1885c83a 	sub	r2,r3,r2
    6fd8:	a0800215 	stw	r2,8(r20)
    6fdc:	103fef1e 	bne	r2,zero,6f9c <__alt_data_end+0xff006f9c>
    6fe0:	0005883a 	mov	r2,zero
    6fe4:	dfc00b17 	ldw	ra,44(sp)
    6fe8:	df000a17 	ldw	fp,40(sp)
    6fec:	ddc00917 	ldw	r23,36(sp)
    6ff0:	dd800817 	ldw	r22,32(sp)
    6ff4:	dd400717 	ldw	r21,28(sp)
    6ff8:	dd000617 	ldw	r20,24(sp)
    6ffc:	dcc00517 	ldw	r19,20(sp)
    7000:	dc800417 	ldw	r18,16(sp)
    7004:	dc400317 	ldw	r17,12(sp)
    7008:	dc000217 	ldw	r16,8(sp)
    700c:	dec00c04 	addi	sp,sp,48
    7010:	f800283a 	ret
    7014:	800b883a 	mov	r5,r16
    7018:	a809883a 	mov	r4,r21
    701c:	0004ad40 	call	4ad4 <__swsetup_r>
    7020:	1000eb1e 	bne	r2,zero,73d0 <__sfvwrite_r+0x4a4>
    7024:	80c0030b 	ldhu	r3,12(r16)
    7028:	a4400017 	ldw	r17,0(r20)
    702c:	1880008c 	andi	r2,r3,2
    7030:	103fd61e 	bne	r2,zero,6f8c <__alt_data_end+0xff006f8c>
    7034:	1880004c 	andi	r2,r3,1
    7038:	10003f1e 	bne	r2,zero,7138 <__sfvwrite_r+0x20c>
    703c:	0039883a 	mov	fp,zero
    7040:	0025883a 	mov	r18,zero
    7044:	90001a26 	beq	r18,zero,70b0 <__sfvwrite_r+0x184>
    7048:	1880800c 	andi	r2,r3,512
    704c:	84c00217 	ldw	r19,8(r16)
    7050:	10002126 	beq	r2,zero,70d8 <__sfvwrite_r+0x1ac>
    7054:	982f883a 	mov	r23,r19
    7058:	94c09336 	bltu	r18,r19,72a8 <__sfvwrite_r+0x37c>
    705c:	1881200c 	andi	r2,r3,1152
    7060:	10009e1e 	bne	r2,zero,72dc <__sfvwrite_r+0x3b0>
    7064:	81000017 	ldw	r4,0(r16)
    7068:	b80d883a 	mov	r6,r23
    706c:	e00b883a 	mov	r5,fp
    7070:	0007a340 	call	7a34 <memmove>
    7074:	80c00217 	ldw	r3,8(r16)
    7078:	81000017 	ldw	r4,0(r16)
    707c:	9005883a 	mov	r2,r18
    7080:	1ce7c83a 	sub	r19,r3,r19
    7084:	25cf883a 	add	r7,r4,r23
    7088:	84c00215 	stw	r19,8(r16)
    708c:	81c00015 	stw	r7,0(r16)
    7090:	a0c00217 	ldw	r3,8(r20)
    7094:	e0b9883a 	add	fp,fp,r2
    7098:	90a5c83a 	sub	r18,r18,r2
    709c:	18a7c83a 	sub	r19,r3,r2
    70a0:	a4c00215 	stw	r19,8(r20)
    70a4:	983fce26 	beq	r19,zero,6fe0 <__alt_data_end+0xff006fe0>
    70a8:	80c0030b 	ldhu	r3,12(r16)
    70ac:	903fe61e 	bne	r18,zero,7048 <__alt_data_end+0xff007048>
    70b0:	8f000017 	ldw	fp,0(r17)
    70b4:	8c800117 	ldw	r18,4(r17)
    70b8:	8c400204 	addi	r17,r17,8
    70bc:	003fe106 	br	7044 <__alt_data_end+0xff007044>
    70c0:	8cc00017 	ldw	r19,0(r17)
    70c4:	8c800117 	ldw	r18,4(r17)
    70c8:	8c400204 	addi	r17,r17,8
    70cc:	003fb306 	br	6f9c <__alt_data_end+0xff006f9c>
    70d0:	0005883a 	mov	r2,zero
    70d4:	f800283a 	ret
    70d8:	81000017 	ldw	r4,0(r16)
    70dc:	80800417 	ldw	r2,16(r16)
    70e0:	11005736 	bltu	r2,r4,7240 <__sfvwrite_r+0x314>
    70e4:	85c00517 	ldw	r23,20(r16)
    70e8:	95c05536 	bltu	r18,r23,7240 <__sfvwrite_r+0x314>
    70ec:	00a00034 	movhi	r2,32768
    70f0:	10bfffc4 	addi	r2,r2,-1
    70f4:	9009883a 	mov	r4,r18
    70f8:	1480012e 	bgeu	r2,r18,7100 <__sfvwrite_r+0x1d4>
    70fc:	1009883a 	mov	r4,r2
    7100:	b80b883a 	mov	r5,r23
    7104:	0001bf00 	call	1bf0 <__divsi3>
    7108:	15cf383a 	mul	r7,r2,r23
    710c:	81400717 	ldw	r5,28(r16)
    7110:	80800917 	ldw	r2,36(r16)
    7114:	e00d883a 	mov	r6,fp
    7118:	a809883a 	mov	r4,r21
    711c:	103ee83a 	callr	r2
    7120:	00bfdb16 	blt	zero,r2,7090 <__alt_data_end+0xff007090>
    7124:	8080030b 	ldhu	r2,12(r16)
    7128:	10801014 	ori	r2,r2,64
    712c:	8080030d 	sth	r2,12(r16)
    7130:	00bfffc4 	movi	r2,-1
    7134:	003fab06 	br	6fe4 <__alt_data_end+0xff006fe4>
    7138:	0027883a 	mov	r19,zero
    713c:	0011883a 	mov	r8,zero
    7140:	0039883a 	mov	fp,zero
    7144:	0025883a 	mov	r18,zero
    7148:	90001f26 	beq	r18,zero,71c8 <__sfvwrite_r+0x29c>
    714c:	40005a26 	beq	r8,zero,72b8 <__sfvwrite_r+0x38c>
    7150:	982d883a 	mov	r22,r19
    7154:	94c0012e 	bgeu	r18,r19,715c <__sfvwrite_r+0x230>
    7158:	902d883a 	mov	r22,r18
    715c:	81000017 	ldw	r4,0(r16)
    7160:	80800417 	ldw	r2,16(r16)
    7164:	b02f883a 	mov	r23,r22
    7168:	81c00517 	ldw	r7,20(r16)
    716c:	1100032e 	bgeu	r2,r4,717c <__sfvwrite_r+0x250>
    7170:	80c00217 	ldw	r3,8(r16)
    7174:	38c7883a 	add	r3,r7,r3
    7178:	1d801816 	blt	r3,r22,71dc <__sfvwrite_r+0x2b0>
    717c:	b1c03e16 	blt	r22,r7,7278 <__sfvwrite_r+0x34c>
    7180:	80800917 	ldw	r2,36(r16)
    7184:	81400717 	ldw	r5,28(r16)
    7188:	e00d883a 	mov	r6,fp
    718c:	da000115 	stw	r8,4(sp)
    7190:	a809883a 	mov	r4,r21
    7194:	103ee83a 	callr	r2
    7198:	102f883a 	mov	r23,r2
    719c:	da000117 	ldw	r8,4(sp)
    71a0:	00bfe00e 	bge	zero,r2,7124 <__alt_data_end+0xff007124>
    71a4:	9de7c83a 	sub	r19,r19,r23
    71a8:	98001f26 	beq	r19,zero,7228 <__sfvwrite_r+0x2fc>
    71ac:	a0800217 	ldw	r2,8(r20)
    71b0:	e5f9883a 	add	fp,fp,r23
    71b4:	95e5c83a 	sub	r18,r18,r23
    71b8:	15efc83a 	sub	r23,r2,r23
    71bc:	a5c00215 	stw	r23,8(r20)
    71c0:	b83f8726 	beq	r23,zero,6fe0 <__alt_data_end+0xff006fe0>
    71c4:	903fe11e 	bne	r18,zero,714c <__alt_data_end+0xff00714c>
    71c8:	8f000017 	ldw	fp,0(r17)
    71cc:	8c800117 	ldw	r18,4(r17)
    71d0:	0011883a 	mov	r8,zero
    71d4:	8c400204 	addi	r17,r17,8
    71d8:	003fdb06 	br	7148 <__alt_data_end+0xff007148>
    71dc:	180d883a 	mov	r6,r3
    71e0:	e00b883a 	mov	r5,fp
    71e4:	da000115 	stw	r8,4(sp)
    71e8:	d8c00015 	stw	r3,0(sp)
    71ec:	0007a340 	call	7a34 <memmove>
    71f0:	d8c00017 	ldw	r3,0(sp)
    71f4:	80800017 	ldw	r2,0(r16)
    71f8:	800b883a 	mov	r5,r16
    71fc:	a809883a 	mov	r4,r21
    7200:	10c5883a 	add	r2,r2,r3
    7204:	80800015 	stw	r2,0(r16)
    7208:	d8c00015 	stw	r3,0(sp)
    720c:	00066cc0 	call	66cc <_fflush_r>
    7210:	d8c00017 	ldw	r3,0(sp)
    7214:	da000117 	ldw	r8,4(sp)
    7218:	103fc21e 	bne	r2,zero,7124 <__alt_data_end+0xff007124>
    721c:	182f883a 	mov	r23,r3
    7220:	9de7c83a 	sub	r19,r19,r23
    7224:	983fe11e 	bne	r19,zero,71ac <__alt_data_end+0xff0071ac>
    7228:	800b883a 	mov	r5,r16
    722c:	a809883a 	mov	r4,r21
    7230:	00066cc0 	call	66cc <_fflush_r>
    7234:	103fbb1e 	bne	r2,zero,7124 <__alt_data_end+0xff007124>
    7238:	0011883a 	mov	r8,zero
    723c:	003fdb06 	br	71ac <__alt_data_end+0xff0071ac>
    7240:	94c0012e 	bgeu	r18,r19,7248 <__sfvwrite_r+0x31c>
    7244:	9027883a 	mov	r19,r18
    7248:	980d883a 	mov	r6,r19
    724c:	e00b883a 	mov	r5,fp
    7250:	0007a340 	call	7a34 <memmove>
    7254:	80800217 	ldw	r2,8(r16)
    7258:	80c00017 	ldw	r3,0(r16)
    725c:	14c5c83a 	sub	r2,r2,r19
    7260:	1cc7883a 	add	r3,r3,r19
    7264:	80800215 	stw	r2,8(r16)
    7268:	80c00015 	stw	r3,0(r16)
    726c:	10004326 	beq	r2,zero,737c <__sfvwrite_r+0x450>
    7270:	9805883a 	mov	r2,r19
    7274:	003f8606 	br	7090 <__alt_data_end+0xff007090>
    7278:	b00d883a 	mov	r6,r22
    727c:	e00b883a 	mov	r5,fp
    7280:	da000115 	stw	r8,4(sp)
    7284:	0007a340 	call	7a34 <memmove>
    7288:	80800217 	ldw	r2,8(r16)
    728c:	80c00017 	ldw	r3,0(r16)
    7290:	da000117 	ldw	r8,4(sp)
    7294:	1585c83a 	sub	r2,r2,r22
    7298:	1dad883a 	add	r22,r3,r22
    729c:	80800215 	stw	r2,8(r16)
    72a0:	85800015 	stw	r22,0(r16)
    72a4:	003fbf06 	br	71a4 <__alt_data_end+0xff0071a4>
    72a8:	81000017 	ldw	r4,0(r16)
    72ac:	9027883a 	mov	r19,r18
    72b0:	902f883a 	mov	r23,r18
    72b4:	003f6c06 	br	7068 <__alt_data_end+0xff007068>
    72b8:	900d883a 	mov	r6,r18
    72bc:	01400284 	movi	r5,10
    72c0:	e009883a 	mov	r4,fp
    72c4:	00078080 	call	7808 <memchr>
    72c8:	10003e26 	beq	r2,zero,73c4 <__sfvwrite_r+0x498>
    72cc:	10800044 	addi	r2,r2,1
    72d0:	1727c83a 	sub	r19,r2,fp
    72d4:	02000044 	movi	r8,1
    72d8:	003f9d06 	br	7150 <__alt_data_end+0xff007150>
    72dc:	80800517 	ldw	r2,20(r16)
    72e0:	81400417 	ldw	r5,16(r16)
    72e4:	81c00017 	ldw	r7,0(r16)
    72e8:	10a7883a 	add	r19,r2,r2
    72ec:	9885883a 	add	r2,r19,r2
    72f0:	1026d7fa 	srli	r19,r2,31
    72f4:	396dc83a 	sub	r22,r7,r5
    72f8:	b1000044 	addi	r4,r22,1
    72fc:	9885883a 	add	r2,r19,r2
    7300:	1027d07a 	srai	r19,r2,1
    7304:	2485883a 	add	r2,r4,r18
    7308:	980d883a 	mov	r6,r19
    730c:	9880022e 	bgeu	r19,r2,7318 <__sfvwrite_r+0x3ec>
    7310:	1027883a 	mov	r19,r2
    7314:	100d883a 	mov	r6,r2
    7318:	18c1000c 	andi	r3,r3,1024
    731c:	18001c26 	beq	r3,zero,7390 <__sfvwrite_r+0x464>
    7320:	300b883a 	mov	r5,r6
    7324:	a809883a 	mov	r4,r21
    7328:	0001dcc0 	call	1dcc <_malloc_r>
    732c:	102f883a 	mov	r23,r2
    7330:	10002926 	beq	r2,zero,73d8 <__sfvwrite_r+0x4ac>
    7334:	81400417 	ldw	r5,16(r16)
    7338:	b00d883a 	mov	r6,r22
    733c:	1009883a 	mov	r4,r2
    7340:	00078ec0 	call	78ec <memcpy>
    7344:	8080030b 	ldhu	r2,12(r16)
    7348:	00fedfc4 	movi	r3,-1153
    734c:	10c4703a 	and	r2,r2,r3
    7350:	10802014 	ori	r2,r2,128
    7354:	8080030d 	sth	r2,12(r16)
    7358:	bd89883a 	add	r4,r23,r22
    735c:	9d8fc83a 	sub	r7,r19,r22
    7360:	85c00415 	stw	r23,16(r16)
    7364:	84c00515 	stw	r19,20(r16)
    7368:	81000015 	stw	r4,0(r16)
    736c:	9027883a 	mov	r19,r18
    7370:	81c00215 	stw	r7,8(r16)
    7374:	902f883a 	mov	r23,r18
    7378:	003f3b06 	br	7068 <__alt_data_end+0xff007068>
    737c:	800b883a 	mov	r5,r16
    7380:	a809883a 	mov	r4,r21
    7384:	00066cc0 	call	66cc <_fflush_r>
    7388:	103fb926 	beq	r2,zero,7270 <__alt_data_end+0xff007270>
    738c:	003f6506 	br	7124 <__alt_data_end+0xff007124>
    7390:	a809883a 	mov	r4,r21
    7394:	0008cb40 	call	8cb4 <_realloc_r>
    7398:	102f883a 	mov	r23,r2
    739c:	103fee1e 	bne	r2,zero,7358 <__alt_data_end+0xff007358>
    73a0:	81400417 	ldw	r5,16(r16)
    73a4:	a809883a 	mov	r4,r21
    73a8:	0006c1c0 	call	6c1c <_free_r>
    73ac:	8080030b 	ldhu	r2,12(r16)
    73b0:	00ffdfc4 	movi	r3,-129
    73b4:	1884703a 	and	r2,r3,r2
    73b8:	00c00304 	movi	r3,12
    73bc:	a8c00015 	stw	r3,0(r21)
    73c0:	003f5906 	br	7128 <__alt_data_end+0xff007128>
    73c4:	94c00044 	addi	r19,r18,1
    73c8:	02000044 	movi	r8,1
    73cc:	003f6006 	br	7150 <__alt_data_end+0xff007150>
    73d0:	00bfffc4 	movi	r2,-1
    73d4:	003f0306 	br	6fe4 <__alt_data_end+0xff006fe4>
    73d8:	00800304 	movi	r2,12
    73dc:	a8800015 	stw	r2,0(r21)
    73e0:	8080030b 	ldhu	r2,12(r16)
    73e4:	003f5006 	br	7128 <__alt_data_end+0xff007128>

000073e8 <_fwalk>:
    73e8:	defff704 	addi	sp,sp,-36
    73ec:	dd000415 	stw	r20,16(sp)
    73f0:	dfc00815 	stw	ra,32(sp)
    73f4:	ddc00715 	stw	r23,28(sp)
    73f8:	dd800615 	stw	r22,24(sp)
    73fc:	dd400515 	stw	r21,20(sp)
    7400:	dcc00315 	stw	r19,12(sp)
    7404:	dc800215 	stw	r18,8(sp)
    7408:	dc400115 	stw	r17,4(sp)
    740c:	dc000015 	stw	r16,0(sp)
    7410:	2500b804 	addi	r20,r4,736
    7414:	a0002326 	beq	r20,zero,74a4 <_fwalk+0xbc>
    7418:	282b883a 	mov	r21,r5
    741c:	002f883a 	mov	r23,zero
    7420:	05800044 	movi	r22,1
    7424:	04ffffc4 	movi	r19,-1
    7428:	a4400117 	ldw	r17,4(r20)
    742c:	a4800217 	ldw	r18,8(r20)
    7430:	8c7fffc4 	addi	r17,r17,-1
    7434:	88000d16 	blt	r17,zero,746c <_fwalk+0x84>
    7438:	94000304 	addi	r16,r18,12
    743c:	94800384 	addi	r18,r18,14
    7440:	8080000b 	ldhu	r2,0(r16)
    7444:	8c7fffc4 	addi	r17,r17,-1
    7448:	813ffd04 	addi	r4,r16,-12
    744c:	b080042e 	bgeu	r22,r2,7460 <_fwalk+0x78>
    7450:	9080000f 	ldh	r2,0(r18)
    7454:	14c00226 	beq	r2,r19,7460 <_fwalk+0x78>
    7458:	a83ee83a 	callr	r21
    745c:	b8aeb03a 	or	r23,r23,r2
    7460:	84001a04 	addi	r16,r16,104
    7464:	94801a04 	addi	r18,r18,104
    7468:	8cfff51e 	bne	r17,r19,7440 <__alt_data_end+0xff007440>
    746c:	a5000017 	ldw	r20,0(r20)
    7470:	a03fed1e 	bne	r20,zero,7428 <__alt_data_end+0xff007428>
    7474:	b805883a 	mov	r2,r23
    7478:	dfc00817 	ldw	ra,32(sp)
    747c:	ddc00717 	ldw	r23,28(sp)
    7480:	dd800617 	ldw	r22,24(sp)
    7484:	dd400517 	ldw	r21,20(sp)
    7488:	dd000417 	ldw	r20,16(sp)
    748c:	dcc00317 	ldw	r19,12(sp)
    7490:	dc800217 	ldw	r18,8(sp)
    7494:	dc400117 	ldw	r17,4(sp)
    7498:	dc000017 	ldw	r16,0(sp)
    749c:	dec00904 	addi	sp,sp,36
    74a0:	f800283a 	ret
    74a4:	002f883a 	mov	r23,zero
    74a8:	003ff206 	br	7474 <__alt_data_end+0xff007474>

000074ac <_fwalk_reent>:
    74ac:	defff704 	addi	sp,sp,-36
    74b0:	dd000415 	stw	r20,16(sp)
    74b4:	dfc00815 	stw	ra,32(sp)
    74b8:	ddc00715 	stw	r23,28(sp)
    74bc:	dd800615 	stw	r22,24(sp)
    74c0:	dd400515 	stw	r21,20(sp)
    74c4:	dcc00315 	stw	r19,12(sp)
    74c8:	dc800215 	stw	r18,8(sp)
    74cc:	dc400115 	stw	r17,4(sp)
    74d0:	dc000015 	stw	r16,0(sp)
    74d4:	2500b804 	addi	r20,r4,736
    74d8:	a0002326 	beq	r20,zero,7568 <_fwalk_reent+0xbc>
    74dc:	282b883a 	mov	r21,r5
    74e0:	2027883a 	mov	r19,r4
    74e4:	002f883a 	mov	r23,zero
    74e8:	05800044 	movi	r22,1
    74ec:	04bfffc4 	movi	r18,-1
    74f0:	a4400117 	ldw	r17,4(r20)
    74f4:	a4000217 	ldw	r16,8(r20)
    74f8:	8c7fffc4 	addi	r17,r17,-1
    74fc:	88000c16 	blt	r17,zero,7530 <_fwalk_reent+0x84>
    7500:	84000304 	addi	r16,r16,12
    7504:	8080000b 	ldhu	r2,0(r16)
    7508:	8c7fffc4 	addi	r17,r17,-1
    750c:	817ffd04 	addi	r5,r16,-12
    7510:	b080052e 	bgeu	r22,r2,7528 <_fwalk_reent+0x7c>
    7514:	8080008f 	ldh	r2,2(r16)
    7518:	9809883a 	mov	r4,r19
    751c:	14800226 	beq	r2,r18,7528 <_fwalk_reent+0x7c>
    7520:	a83ee83a 	callr	r21
    7524:	b8aeb03a 	or	r23,r23,r2
    7528:	84001a04 	addi	r16,r16,104
    752c:	8cbff51e 	bne	r17,r18,7504 <__alt_data_end+0xff007504>
    7530:	a5000017 	ldw	r20,0(r20)
    7534:	a03fee1e 	bne	r20,zero,74f0 <__alt_data_end+0xff0074f0>
    7538:	b805883a 	mov	r2,r23
    753c:	dfc00817 	ldw	ra,32(sp)
    7540:	ddc00717 	ldw	r23,28(sp)
    7544:	dd800617 	ldw	r22,24(sp)
    7548:	dd400517 	ldw	r21,20(sp)
    754c:	dd000417 	ldw	r20,16(sp)
    7550:	dcc00317 	ldw	r19,12(sp)
    7554:	dc800217 	ldw	r18,8(sp)
    7558:	dc400117 	ldw	r17,4(sp)
    755c:	dc000017 	ldw	r16,0(sp)
    7560:	dec00904 	addi	sp,sp,36
    7564:	f800283a 	ret
    7568:	002f883a 	mov	r23,zero
    756c:	003ff206 	br	7538 <__alt_data_end+0xff007538>

00007570 <_setlocale_r>:
    7570:	30001b26 	beq	r6,zero,75e0 <_setlocale_r+0x70>
    7574:	01400074 	movhi	r5,1
    7578:	defffe04 	addi	sp,sp,-8
    757c:	29453104 	addi	r5,r5,5316
    7580:	3009883a 	mov	r4,r6
    7584:	dc000015 	stw	r16,0(sp)
    7588:	dfc00115 	stw	ra,4(sp)
    758c:	3021883a 	mov	r16,r6
    7590:	00093c80 	call	93c8 <strcmp>
    7594:	1000061e 	bne	r2,zero,75b0 <_setlocale_r+0x40>
    7598:	00800074 	movhi	r2,1
    759c:	10853004 	addi	r2,r2,5312
    75a0:	dfc00117 	ldw	ra,4(sp)
    75a4:	dc000017 	ldw	r16,0(sp)
    75a8:	dec00204 	addi	sp,sp,8
    75ac:	f800283a 	ret
    75b0:	01400074 	movhi	r5,1
    75b4:	29453004 	addi	r5,r5,5312
    75b8:	8009883a 	mov	r4,r16
    75bc:	00093c80 	call	93c8 <strcmp>
    75c0:	103ff526 	beq	r2,zero,7598 <__alt_data_end+0xff007598>
    75c4:	01400074 	movhi	r5,1
    75c8:	2944fe04 	addi	r5,r5,5112
    75cc:	8009883a 	mov	r4,r16
    75d0:	00093c80 	call	93c8 <strcmp>
    75d4:	103ff026 	beq	r2,zero,7598 <__alt_data_end+0xff007598>
    75d8:	0005883a 	mov	r2,zero
    75dc:	003ff006 	br	75a0 <__alt_data_end+0xff0075a0>
    75e0:	00800074 	movhi	r2,1
    75e4:	10853004 	addi	r2,r2,5312
    75e8:	f800283a 	ret

000075ec <__locale_charset>:
    75ec:	00800074 	movhi	r2,1
    75f0:	1087e304 	addi	r2,r2,8076
    75f4:	f800283a 	ret

000075f8 <__locale_mb_cur_max>:
    75f8:	00800074 	movhi	r2,1
    75fc:	108c7f04 	addi	r2,r2,12796
    7600:	10800017 	ldw	r2,0(r2)
    7604:	f800283a 	ret

00007608 <__locale_msgcharset>:
    7608:	00800074 	movhi	r2,1
    760c:	1087db04 	addi	r2,r2,8044
    7610:	f800283a 	ret

00007614 <__locale_cjk_lang>:
    7614:	0005883a 	mov	r2,zero
    7618:	f800283a 	ret

0000761c <_localeconv_r>:
    761c:	00800074 	movhi	r2,1
    7620:	1087eb04 	addi	r2,r2,8108
    7624:	f800283a 	ret

00007628 <setlocale>:
    7628:	00800074 	movhi	r2,1
    762c:	108c7e04 	addi	r2,r2,12792
    7630:	280d883a 	mov	r6,r5
    7634:	200b883a 	mov	r5,r4
    7638:	11000017 	ldw	r4,0(r2)
    763c:	00075701 	jmpi	7570 <_setlocale_r>

00007640 <localeconv>:
    7640:	00800074 	movhi	r2,1
    7644:	1087eb04 	addi	r2,r2,8108
    7648:	f800283a 	ret

0000764c <__smakebuf_r>:
    764c:	2880030b 	ldhu	r2,12(r5)
    7650:	10c0008c 	andi	r3,r2,2
    7654:	1800411e 	bne	r3,zero,775c <__smakebuf_r+0x110>
    7658:	deffec04 	addi	sp,sp,-80
    765c:	dc000f15 	stw	r16,60(sp)
    7660:	2821883a 	mov	r16,r5
    7664:	2940038f 	ldh	r5,14(r5)
    7668:	dc401015 	stw	r17,64(sp)
    766c:	dfc01315 	stw	ra,76(sp)
    7670:	dcc01215 	stw	r19,72(sp)
    7674:	dc801115 	stw	r18,68(sp)
    7678:	2023883a 	mov	r17,r4
    767c:	28001c16 	blt	r5,zero,76f0 <__smakebuf_r+0xa4>
    7680:	d80d883a 	mov	r6,sp
    7684:	000af700 	call	af70 <_fstat_r>
    7688:	10001816 	blt	r2,zero,76ec <__smakebuf_r+0xa0>
    768c:	d8800117 	ldw	r2,4(sp)
    7690:	00e00014 	movui	r3,32768
    7694:	10bc000c 	andi	r2,r2,61440
    7698:	14c80020 	cmpeqi	r19,r2,8192
    769c:	10c03726 	beq	r2,r3,777c <__smakebuf_r+0x130>
    76a0:	80c0030b 	ldhu	r3,12(r16)
    76a4:	18c20014 	ori	r3,r3,2048
    76a8:	80c0030d 	sth	r3,12(r16)
    76ac:	00c80004 	movi	r3,8192
    76b0:	10c0521e 	bne	r2,r3,77fc <__smakebuf_r+0x1b0>
    76b4:	8140038f 	ldh	r5,14(r16)
    76b8:	8809883a 	mov	r4,r17
    76bc:	000afcc0 	call	afcc <_isatty_r>
    76c0:	10004c26 	beq	r2,zero,77f4 <__smakebuf_r+0x1a8>
    76c4:	8080030b 	ldhu	r2,12(r16)
    76c8:	80c010c4 	addi	r3,r16,67
    76cc:	80c00015 	stw	r3,0(r16)
    76d0:	10800054 	ori	r2,r2,1
    76d4:	8080030d 	sth	r2,12(r16)
    76d8:	00800044 	movi	r2,1
    76dc:	80c00415 	stw	r3,16(r16)
    76e0:	80800515 	stw	r2,20(r16)
    76e4:	04810004 	movi	r18,1024
    76e8:	00000706 	br	7708 <__smakebuf_r+0xbc>
    76ec:	8080030b 	ldhu	r2,12(r16)
    76f0:	10c0200c 	andi	r3,r2,128
    76f4:	18001f1e 	bne	r3,zero,7774 <__smakebuf_r+0x128>
    76f8:	04810004 	movi	r18,1024
    76fc:	10820014 	ori	r2,r2,2048
    7700:	8080030d 	sth	r2,12(r16)
    7704:	0027883a 	mov	r19,zero
    7708:	900b883a 	mov	r5,r18
    770c:	8809883a 	mov	r4,r17
    7710:	0001dcc0 	call	1dcc <_malloc_r>
    7714:	10002c26 	beq	r2,zero,77c8 <__smakebuf_r+0x17c>
    7718:	80c0030b 	ldhu	r3,12(r16)
    771c:	01000034 	movhi	r4,0
    7720:	2119d804 	addi	r4,r4,26464
    7724:	89000f15 	stw	r4,60(r17)
    7728:	18c02014 	ori	r3,r3,128
    772c:	80c0030d 	sth	r3,12(r16)
    7730:	80800015 	stw	r2,0(r16)
    7734:	80800415 	stw	r2,16(r16)
    7738:	84800515 	stw	r18,20(r16)
    773c:	98001a1e 	bne	r19,zero,77a8 <__smakebuf_r+0x15c>
    7740:	dfc01317 	ldw	ra,76(sp)
    7744:	dcc01217 	ldw	r19,72(sp)
    7748:	dc801117 	ldw	r18,68(sp)
    774c:	dc401017 	ldw	r17,64(sp)
    7750:	dc000f17 	ldw	r16,60(sp)
    7754:	dec01404 	addi	sp,sp,80
    7758:	f800283a 	ret
    775c:	288010c4 	addi	r2,r5,67
    7760:	28800015 	stw	r2,0(r5)
    7764:	28800415 	stw	r2,16(r5)
    7768:	00800044 	movi	r2,1
    776c:	28800515 	stw	r2,20(r5)
    7770:	f800283a 	ret
    7774:	04801004 	movi	r18,64
    7778:	003fe006 	br	76fc <__alt_data_end+0xff0076fc>
    777c:	81000a17 	ldw	r4,40(r16)
    7780:	00c00074 	movhi	r3,1
    7784:	18e4d904 	addi	r3,r3,-27804
    7788:	20ffc51e 	bne	r4,r3,76a0 <__alt_data_end+0xff0076a0>
    778c:	8080030b 	ldhu	r2,12(r16)
    7790:	04810004 	movi	r18,1024
    7794:	84801315 	stw	r18,76(r16)
    7798:	1484b03a 	or	r2,r2,r18
    779c:	8080030d 	sth	r2,12(r16)
    77a0:	0027883a 	mov	r19,zero
    77a4:	003fd806 	br	7708 <__alt_data_end+0xff007708>
    77a8:	8140038f 	ldh	r5,14(r16)
    77ac:	8809883a 	mov	r4,r17
    77b0:	000afcc0 	call	afcc <_isatty_r>
    77b4:	103fe226 	beq	r2,zero,7740 <__alt_data_end+0xff007740>
    77b8:	8080030b 	ldhu	r2,12(r16)
    77bc:	10800054 	ori	r2,r2,1
    77c0:	8080030d 	sth	r2,12(r16)
    77c4:	003fde06 	br	7740 <__alt_data_end+0xff007740>
    77c8:	8080030b 	ldhu	r2,12(r16)
    77cc:	10c0800c 	andi	r3,r2,512
    77d0:	183fdb1e 	bne	r3,zero,7740 <__alt_data_end+0xff007740>
    77d4:	10800094 	ori	r2,r2,2
    77d8:	80c010c4 	addi	r3,r16,67
    77dc:	8080030d 	sth	r2,12(r16)
    77e0:	00800044 	movi	r2,1
    77e4:	80c00015 	stw	r3,0(r16)
    77e8:	80c00415 	stw	r3,16(r16)
    77ec:	80800515 	stw	r2,20(r16)
    77f0:	003fd306 	br	7740 <__alt_data_end+0xff007740>
    77f4:	04810004 	movi	r18,1024
    77f8:	003fc306 	br	7708 <__alt_data_end+0xff007708>
    77fc:	0027883a 	mov	r19,zero
    7800:	04810004 	movi	r18,1024
    7804:	003fc006 	br	7708 <__alt_data_end+0xff007708>

00007808 <memchr>:
    7808:	208000cc 	andi	r2,r4,3
    780c:	280f883a 	mov	r7,r5
    7810:	10003426 	beq	r2,zero,78e4 <memchr+0xdc>
    7814:	30bfffc4 	addi	r2,r6,-1
    7818:	30001a26 	beq	r6,zero,7884 <memchr+0x7c>
    781c:	20c00003 	ldbu	r3,0(r4)
    7820:	29803fcc 	andi	r6,r5,255
    7824:	30c0051e 	bne	r6,r3,783c <memchr+0x34>
    7828:	00001806 	br	788c <memchr+0x84>
    782c:	10001526 	beq	r2,zero,7884 <memchr+0x7c>
    7830:	20c00003 	ldbu	r3,0(r4)
    7834:	10bfffc4 	addi	r2,r2,-1
    7838:	30c01426 	beq	r6,r3,788c <memchr+0x84>
    783c:	21000044 	addi	r4,r4,1
    7840:	20c000cc 	andi	r3,r4,3
    7844:	183ff91e 	bne	r3,zero,782c <__alt_data_end+0xff00782c>
    7848:	020000c4 	movi	r8,3
    784c:	40801136 	bltu	r8,r2,7894 <memchr+0x8c>
    7850:	10000c26 	beq	r2,zero,7884 <memchr+0x7c>
    7854:	20c00003 	ldbu	r3,0(r4)
    7858:	29403fcc 	andi	r5,r5,255
    785c:	28c00b26 	beq	r5,r3,788c <memchr+0x84>
    7860:	20c00044 	addi	r3,r4,1
    7864:	39803fcc 	andi	r6,r7,255
    7868:	2089883a 	add	r4,r4,r2
    786c:	00000306 	br	787c <memchr+0x74>
    7870:	18c00044 	addi	r3,r3,1
    7874:	197fffc3 	ldbu	r5,-1(r3)
    7878:	31400526 	beq	r6,r5,7890 <memchr+0x88>
    787c:	1805883a 	mov	r2,r3
    7880:	20fffb1e 	bne	r4,r3,7870 <__alt_data_end+0xff007870>
    7884:	0005883a 	mov	r2,zero
    7888:	f800283a 	ret
    788c:	2005883a 	mov	r2,r4
    7890:	f800283a 	ret
    7894:	28c03fcc 	andi	r3,r5,255
    7898:	1812923a 	slli	r9,r3,8
    789c:	02ffbff4 	movhi	r11,65279
    78a0:	02a02074 	movhi	r10,32897
    78a4:	48d2b03a 	or	r9,r9,r3
    78a8:	4806943a 	slli	r3,r9,16
    78ac:	5affbfc4 	addi	r11,r11,-257
    78b0:	52a02004 	addi	r10,r10,-32640
    78b4:	48d2b03a 	or	r9,r9,r3
    78b8:	20c00017 	ldw	r3,0(r4)
    78bc:	48c6f03a 	xor	r3,r9,r3
    78c0:	1acd883a 	add	r6,r3,r11
    78c4:	00c6303a 	nor	r3,zero,r3
    78c8:	30c6703a 	and	r3,r6,r3
    78cc:	1a86703a 	and	r3,r3,r10
    78d0:	183fe01e 	bne	r3,zero,7854 <__alt_data_end+0xff007854>
    78d4:	10bfff04 	addi	r2,r2,-4
    78d8:	21000104 	addi	r4,r4,4
    78dc:	40bff636 	bltu	r8,r2,78b8 <__alt_data_end+0xff0078b8>
    78e0:	003fdb06 	br	7850 <__alt_data_end+0xff007850>
    78e4:	3005883a 	mov	r2,r6
    78e8:	003fd706 	br	7848 <__alt_data_end+0xff007848>

000078ec <memcpy>:
    78ec:	defffd04 	addi	sp,sp,-12
    78f0:	dfc00215 	stw	ra,8(sp)
    78f4:	dc400115 	stw	r17,4(sp)
    78f8:	dc000015 	stw	r16,0(sp)
    78fc:	00c003c4 	movi	r3,15
    7900:	2005883a 	mov	r2,r4
    7904:	1980452e 	bgeu	r3,r6,7a1c <memcpy+0x130>
    7908:	2906b03a 	or	r3,r5,r4
    790c:	18c000cc 	andi	r3,r3,3
    7910:	1800441e 	bne	r3,zero,7a24 <memcpy+0x138>
    7914:	347ffc04 	addi	r17,r6,-16
    7918:	8822d13a 	srli	r17,r17,4
    791c:	28c00104 	addi	r3,r5,4
    7920:	23400104 	addi	r13,r4,4
    7924:	8820913a 	slli	r16,r17,4
    7928:	2b000204 	addi	r12,r5,8
    792c:	22c00204 	addi	r11,r4,8
    7930:	84000504 	addi	r16,r16,20
    7934:	2a800304 	addi	r10,r5,12
    7938:	22400304 	addi	r9,r4,12
    793c:	2c21883a 	add	r16,r5,r16
    7940:	2811883a 	mov	r8,r5
    7944:	200f883a 	mov	r7,r4
    7948:	41000017 	ldw	r4,0(r8)
    794c:	1fc00017 	ldw	ra,0(r3)
    7950:	63c00017 	ldw	r15,0(r12)
    7954:	39000015 	stw	r4,0(r7)
    7958:	53800017 	ldw	r14,0(r10)
    795c:	6fc00015 	stw	ra,0(r13)
    7960:	5bc00015 	stw	r15,0(r11)
    7964:	4b800015 	stw	r14,0(r9)
    7968:	18c00404 	addi	r3,r3,16
    796c:	39c00404 	addi	r7,r7,16
    7970:	42000404 	addi	r8,r8,16
    7974:	6b400404 	addi	r13,r13,16
    7978:	63000404 	addi	r12,r12,16
    797c:	5ac00404 	addi	r11,r11,16
    7980:	52800404 	addi	r10,r10,16
    7984:	4a400404 	addi	r9,r9,16
    7988:	1c3fef1e 	bne	r3,r16,7948 <__alt_data_end+0xff007948>
    798c:	89c00044 	addi	r7,r17,1
    7990:	380e913a 	slli	r7,r7,4
    7994:	310003cc 	andi	r4,r6,15
    7998:	02c000c4 	movi	r11,3
    799c:	11c7883a 	add	r3,r2,r7
    79a0:	29cb883a 	add	r5,r5,r7
    79a4:	5900212e 	bgeu	r11,r4,7a2c <memcpy+0x140>
    79a8:	1813883a 	mov	r9,r3
    79ac:	2811883a 	mov	r8,r5
    79b0:	200f883a 	mov	r7,r4
    79b4:	42800017 	ldw	r10,0(r8)
    79b8:	4a400104 	addi	r9,r9,4
    79bc:	39ffff04 	addi	r7,r7,-4
    79c0:	4abfff15 	stw	r10,-4(r9)
    79c4:	42000104 	addi	r8,r8,4
    79c8:	59fffa36 	bltu	r11,r7,79b4 <__alt_data_end+0xff0079b4>
    79cc:	213fff04 	addi	r4,r4,-4
    79d0:	2008d0ba 	srli	r4,r4,2
    79d4:	318000cc 	andi	r6,r6,3
    79d8:	21000044 	addi	r4,r4,1
    79dc:	2109883a 	add	r4,r4,r4
    79e0:	2109883a 	add	r4,r4,r4
    79e4:	1907883a 	add	r3,r3,r4
    79e8:	290b883a 	add	r5,r5,r4
    79ec:	30000626 	beq	r6,zero,7a08 <memcpy+0x11c>
    79f0:	198d883a 	add	r6,r3,r6
    79f4:	29c00003 	ldbu	r7,0(r5)
    79f8:	18c00044 	addi	r3,r3,1
    79fc:	29400044 	addi	r5,r5,1
    7a00:	19ffffc5 	stb	r7,-1(r3)
    7a04:	19bffb1e 	bne	r3,r6,79f4 <__alt_data_end+0xff0079f4>
    7a08:	dfc00217 	ldw	ra,8(sp)
    7a0c:	dc400117 	ldw	r17,4(sp)
    7a10:	dc000017 	ldw	r16,0(sp)
    7a14:	dec00304 	addi	sp,sp,12
    7a18:	f800283a 	ret
    7a1c:	2007883a 	mov	r3,r4
    7a20:	003ff206 	br	79ec <__alt_data_end+0xff0079ec>
    7a24:	2007883a 	mov	r3,r4
    7a28:	003ff106 	br	79f0 <__alt_data_end+0xff0079f0>
    7a2c:	200d883a 	mov	r6,r4
    7a30:	003fee06 	br	79ec <__alt_data_end+0xff0079ec>

00007a34 <memmove>:
    7a34:	2005883a 	mov	r2,r4
    7a38:	29000b2e 	bgeu	r5,r4,7a68 <memmove+0x34>
    7a3c:	298f883a 	add	r7,r5,r6
    7a40:	21c0092e 	bgeu	r4,r7,7a68 <memmove+0x34>
    7a44:	2187883a 	add	r3,r4,r6
    7a48:	198bc83a 	sub	r5,r3,r6
    7a4c:	30004826 	beq	r6,zero,7b70 <memmove+0x13c>
    7a50:	39ffffc4 	addi	r7,r7,-1
    7a54:	39000003 	ldbu	r4,0(r7)
    7a58:	18ffffc4 	addi	r3,r3,-1
    7a5c:	19000005 	stb	r4,0(r3)
    7a60:	28fffb1e 	bne	r5,r3,7a50 <__alt_data_end+0xff007a50>
    7a64:	f800283a 	ret
    7a68:	00c003c4 	movi	r3,15
    7a6c:	1980412e 	bgeu	r3,r6,7b74 <memmove+0x140>
    7a70:	2886b03a 	or	r3,r5,r2
    7a74:	18c000cc 	andi	r3,r3,3
    7a78:	1800401e 	bne	r3,zero,7b7c <memmove+0x148>
    7a7c:	33fffc04 	addi	r15,r6,-16
    7a80:	781ed13a 	srli	r15,r15,4
    7a84:	28c00104 	addi	r3,r5,4
    7a88:	13400104 	addi	r13,r2,4
    7a8c:	781c913a 	slli	r14,r15,4
    7a90:	2b000204 	addi	r12,r5,8
    7a94:	12c00204 	addi	r11,r2,8
    7a98:	73800504 	addi	r14,r14,20
    7a9c:	2a800304 	addi	r10,r5,12
    7aa0:	12400304 	addi	r9,r2,12
    7aa4:	2b9d883a 	add	r14,r5,r14
    7aa8:	2811883a 	mov	r8,r5
    7aac:	100f883a 	mov	r7,r2
    7ab0:	41000017 	ldw	r4,0(r8)
    7ab4:	39c00404 	addi	r7,r7,16
    7ab8:	18c00404 	addi	r3,r3,16
    7abc:	393ffc15 	stw	r4,-16(r7)
    7ac0:	193ffc17 	ldw	r4,-16(r3)
    7ac4:	6b400404 	addi	r13,r13,16
    7ac8:	5ac00404 	addi	r11,r11,16
    7acc:	693ffc15 	stw	r4,-16(r13)
    7ad0:	61000017 	ldw	r4,0(r12)
    7ad4:	4a400404 	addi	r9,r9,16
    7ad8:	42000404 	addi	r8,r8,16
    7adc:	593ffc15 	stw	r4,-16(r11)
    7ae0:	51000017 	ldw	r4,0(r10)
    7ae4:	63000404 	addi	r12,r12,16
    7ae8:	52800404 	addi	r10,r10,16
    7aec:	493ffc15 	stw	r4,-16(r9)
    7af0:	1bbfef1e 	bne	r3,r14,7ab0 <__alt_data_end+0xff007ab0>
    7af4:	79000044 	addi	r4,r15,1
    7af8:	2008913a 	slli	r4,r4,4
    7afc:	328003cc 	andi	r10,r6,15
    7b00:	02c000c4 	movi	r11,3
    7b04:	1107883a 	add	r3,r2,r4
    7b08:	290b883a 	add	r5,r5,r4
    7b0c:	5a801e2e 	bgeu	r11,r10,7b88 <memmove+0x154>
    7b10:	1813883a 	mov	r9,r3
    7b14:	2811883a 	mov	r8,r5
    7b18:	500f883a 	mov	r7,r10
    7b1c:	41000017 	ldw	r4,0(r8)
    7b20:	4a400104 	addi	r9,r9,4
    7b24:	39ffff04 	addi	r7,r7,-4
    7b28:	493fff15 	stw	r4,-4(r9)
    7b2c:	42000104 	addi	r8,r8,4
    7b30:	59fffa36 	bltu	r11,r7,7b1c <__alt_data_end+0xff007b1c>
    7b34:	513fff04 	addi	r4,r10,-4
    7b38:	2008d0ba 	srli	r4,r4,2
    7b3c:	318000cc 	andi	r6,r6,3
    7b40:	21000044 	addi	r4,r4,1
    7b44:	2109883a 	add	r4,r4,r4
    7b48:	2109883a 	add	r4,r4,r4
    7b4c:	1907883a 	add	r3,r3,r4
    7b50:	290b883a 	add	r5,r5,r4
    7b54:	30000b26 	beq	r6,zero,7b84 <memmove+0x150>
    7b58:	198d883a 	add	r6,r3,r6
    7b5c:	29c00003 	ldbu	r7,0(r5)
    7b60:	18c00044 	addi	r3,r3,1
    7b64:	29400044 	addi	r5,r5,1
    7b68:	19ffffc5 	stb	r7,-1(r3)
    7b6c:	19bffb1e 	bne	r3,r6,7b5c <__alt_data_end+0xff007b5c>
    7b70:	f800283a 	ret
    7b74:	1007883a 	mov	r3,r2
    7b78:	003ff606 	br	7b54 <__alt_data_end+0xff007b54>
    7b7c:	1007883a 	mov	r3,r2
    7b80:	003ff506 	br	7b58 <__alt_data_end+0xff007b58>
    7b84:	f800283a 	ret
    7b88:	500d883a 	mov	r6,r10
    7b8c:	003ff106 	br	7b54 <__alt_data_end+0xff007b54>

00007b90 <memset>:
    7b90:	20c000cc 	andi	r3,r4,3
    7b94:	2005883a 	mov	r2,r4
    7b98:	18004426 	beq	r3,zero,7cac <memset+0x11c>
    7b9c:	31ffffc4 	addi	r7,r6,-1
    7ba0:	30004026 	beq	r6,zero,7ca4 <memset+0x114>
    7ba4:	2813883a 	mov	r9,r5
    7ba8:	200d883a 	mov	r6,r4
    7bac:	2007883a 	mov	r3,r4
    7bb0:	00000406 	br	7bc4 <memset+0x34>
    7bb4:	3a3fffc4 	addi	r8,r7,-1
    7bb8:	31800044 	addi	r6,r6,1
    7bbc:	38003926 	beq	r7,zero,7ca4 <memset+0x114>
    7bc0:	400f883a 	mov	r7,r8
    7bc4:	18c00044 	addi	r3,r3,1
    7bc8:	32400005 	stb	r9,0(r6)
    7bcc:	1a0000cc 	andi	r8,r3,3
    7bd0:	403ff81e 	bne	r8,zero,7bb4 <__alt_data_end+0xff007bb4>
    7bd4:	010000c4 	movi	r4,3
    7bd8:	21c02d2e 	bgeu	r4,r7,7c90 <memset+0x100>
    7bdc:	29003fcc 	andi	r4,r5,255
    7be0:	200c923a 	slli	r6,r4,8
    7be4:	3108b03a 	or	r4,r6,r4
    7be8:	200c943a 	slli	r6,r4,16
    7bec:	218cb03a 	or	r6,r4,r6
    7bf0:	010003c4 	movi	r4,15
    7bf4:	21c0182e 	bgeu	r4,r7,7c58 <memset+0xc8>
    7bf8:	3b3ffc04 	addi	r12,r7,-16
    7bfc:	6018d13a 	srli	r12,r12,4
    7c00:	1a000104 	addi	r8,r3,4
    7c04:	1ac00204 	addi	r11,r3,8
    7c08:	6008913a 	slli	r4,r12,4
    7c0c:	1a800304 	addi	r10,r3,12
    7c10:	1813883a 	mov	r9,r3
    7c14:	21000504 	addi	r4,r4,20
    7c18:	1909883a 	add	r4,r3,r4
    7c1c:	49800015 	stw	r6,0(r9)
    7c20:	41800015 	stw	r6,0(r8)
    7c24:	59800015 	stw	r6,0(r11)
    7c28:	51800015 	stw	r6,0(r10)
    7c2c:	42000404 	addi	r8,r8,16
    7c30:	4a400404 	addi	r9,r9,16
    7c34:	5ac00404 	addi	r11,r11,16
    7c38:	52800404 	addi	r10,r10,16
    7c3c:	413ff71e 	bne	r8,r4,7c1c <__alt_data_end+0xff007c1c>
    7c40:	63000044 	addi	r12,r12,1
    7c44:	6018913a 	slli	r12,r12,4
    7c48:	39c003cc 	andi	r7,r7,15
    7c4c:	010000c4 	movi	r4,3
    7c50:	1b07883a 	add	r3,r3,r12
    7c54:	21c00e2e 	bgeu	r4,r7,7c90 <memset+0x100>
    7c58:	1813883a 	mov	r9,r3
    7c5c:	3811883a 	mov	r8,r7
    7c60:	010000c4 	movi	r4,3
    7c64:	49800015 	stw	r6,0(r9)
    7c68:	423fff04 	addi	r8,r8,-4
    7c6c:	4a400104 	addi	r9,r9,4
    7c70:	223ffc36 	bltu	r4,r8,7c64 <__alt_data_end+0xff007c64>
    7c74:	393fff04 	addi	r4,r7,-4
    7c78:	2008d0ba 	srli	r4,r4,2
    7c7c:	39c000cc 	andi	r7,r7,3
    7c80:	21000044 	addi	r4,r4,1
    7c84:	2109883a 	add	r4,r4,r4
    7c88:	2109883a 	add	r4,r4,r4
    7c8c:	1907883a 	add	r3,r3,r4
    7c90:	38000526 	beq	r7,zero,7ca8 <memset+0x118>
    7c94:	19cf883a 	add	r7,r3,r7
    7c98:	19400005 	stb	r5,0(r3)
    7c9c:	18c00044 	addi	r3,r3,1
    7ca0:	38fffd1e 	bne	r7,r3,7c98 <__alt_data_end+0xff007c98>
    7ca4:	f800283a 	ret
    7ca8:	f800283a 	ret
    7cac:	2007883a 	mov	r3,r4
    7cb0:	300f883a 	mov	r7,r6
    7cb4:	003fc706 	br	7bd4 <__alt_data_end+0xff007bd4>

00007cb8 <_Balloc>:
    7cb8:	20801317 	ldw	r2,76(r4)
    7cbc:	defffc04 	addi	sp,sp,-16
    7cc0:	dc400115 	stw	r17,4(sp)
    7cc4:	dc000015 	stw	r16,0(sp)
    7cc8:	dfc00315 	stw	ra,12(sp)
    7ccc:	dc800215 	stw	r18,8(sp)
    7cd0:	2023883a 	mov	r17,r4
    7cd4:	2821883a 	mov	r16,r5
    7cd8:	10000f26 	beq	r2,zero,7d18 <_Balloc+0x60>
    7cdc:	8407883a 	add	r3,r16,r16
    7ce0:	18c7883a 	add	r3,r3,r3
    7ce4:	10c7883a 	add	r3,r2,r3
    7ce8:	18800017 	ldw	r2,0(r3)
    7cec:	10001126 	beq	r2,zero,7d34 <_Balloc+0x7c>
    7cf0:	11000017 	ldw	r4,0(r2)
    7cf4:	19000015 	stw	r4,0(r3)
    7cf8:	10000415 	stw	zero,16(r2)
    7cfc:	10000315 	stw	zero,12(r2)
    7d00:	dfc00317 	ldw	ra,12(sp)
    7d04:	dc800217 	ldw	r18,8(sp)
    7d08:	dc400117 	ldw	r17,4(sp)
    7d0c:	dc000017 	ldw	r16,0(sp)
    7d10:	dec00404 	addi	sp,sp,16
    7d14:	f800283a 	ret
    7d18:	01800844 	movi	r6,33
    7d1c:	01400104 	movi	r5,4
    7d20:	000aba00 	call	aba0 <_calloc_r>
    7d24:	88801315 	stw	r2,76(r17)
    7d28:	103fec1e 	bne	r2,zero,7cdc <__alt_data_end+0xff007cdc>
    7d2c:	0005883a 	mov	r2,zero
    7d30:	003ff306 	br	7d00 <__alt_data_end+0xff007d00>
    7d34:	01400044 	movi	r5,1
    7d38:	2c24983a 	sll	r18,r5,r16
    7d3c:	8809883a 	mov	r4,r17
    7d40:	91800144 	addi	r6,r18,5
    7d44:	318d883a 	add	r6,r6,r6
    7d48:	318d883a 	add	r6,r6,r6
    7d4c:	000aba00 	call	aba0 <_calloc_r>
    7d50:	103ff626 	beq	r2,zero,7d2c <__alt_data_end+0xff007d2c>
    7d54:	14000115 	stw	r16,4(r2)
    7d58:	14800215 	stw	r18,8(r2)
    7d5c:	003fe606 	br	7cf8 <__alt_data_end+0xff007cf8>

00007d60 <_Bfree>:
    7d60:	28000826 	beq	r5,zero,7d84 <_Bfree+0x24>
    7d64:	28c00117 	ldw	r3,4(r5)
    7d68:	20801317 	ldw	r2,76(r4)
    7d6c:	18c7883a 	add	r3,r3,r3
    7d70:	18c7883a 	add	r3,r3,r3
    7d74:	10c5883a 	add	r2,r2,r3
    7d78:	10c00017 	ldw	r3,0(r2)
    7d7c:	28c00015 	stw	r3,0(r5)
    7d80:	11400015 	stw	r5,0(r2)
    7d84:	f800283a 	ret

00007d88 <__multadd>:
    7d88:	defffa04 	addi	sp,sp,-24
    7d8c:	dc800315 	stw	r18,12(sp)
    7d90:	dc400215 	stw	r17,8(sp)
    7d94:	dc000115 	stw	r16,4(sp)
    7d98:	2823883a 	mov	r17,r5
    7d9c:	2c000417 	ldw	r16,16(r5)
    7da0:	dfc00515 	stw	ra,20(sp)
    7da4:	dcc00415 	stw	r19,16(sp)
    7da8:	2025883a 	mov	r18,r4
    7dac:	29400504 	addi	r5,r5,20
    7db0:	0011883a 	mov	r8,zero
    7db4:	28c00017 	ldw	r3,0(r5)
    7db8:	29400104 	addi	r5,r5,4
    7dbc:	42000044 	addi	r8,r8,1
    7dc0:	18bfffcc 	andi	r2,r3,65535
    7dc4:	1185383a 	mul	r2,r2,r6
    7dc8:	1806d43a 	srli	r3,r3,16
    7dcc:	11cf883a 	add	r7,r2,r7
    7dd0:	3808d43a 	srli	r4,r7,16
    7dd4:	1987383a 	mul	r3,r3,r6
    7dd8:	38bfffcc 	andi	r2,r7,65535
    7ddc:	1907883a 	add	r3,r3,r4
    7de0:	1808943a 	slli	r4,r3,16
    7de4:	180ed43a 	srli	r7,r3,16
    7de8:	2085883a 	add	r2,r4,r2
    7dec:	28bfff15 	stw	r2,-4(r5)
    7df0:	443ff016 	blt	r8,r16,7db4 <__alt_data_end+0xff007db4>
    7df4:	38000926 	beq	r7,zero,7e1c <__multadd+0x94>
    7df8:	88800217 	ldw	r2,8(r17)
    7dfc:	80800f0e 	bge	r16,r2,7e3c <__multadd+0xb4>
    7e00:	80800144 	addi	r2,r16,5
    7e04:	1085883a 	add	r2,r2,r2
    7e08:	1085883a 	add	r2,r2,r2
    7e0c:	8885883a 	add	r2,r17,r2
    7e10:	11c00015 	stw	r7,0(r2)
    7e14:	84000044 	addi	r16,r16,1
    7e18:	8c000415 	stw	r16,16(r17)
    7e1c:	8805883a 	mov	r2,r17
    7e20:	dfc00517 	ldw	ra,20(sp)
    7e24:	dcc00417 	ldw	r19,16(sp)
    7e28:	dc800317 	ldw	r18,12(sp)
    7e2c:	dc400217 	ldw	r17,8(sp)
    7e30:	dc000117 	ldw	r16,4(sp)
    7e34:	dec00604 	addi	sp,sp,24
    7e38:	f800283a 	ret
    7e3c:	89400117 	ldw	r5,4(r17)
    7e40:	9009883a 	mov	r4,r18
    7e44:	d9c00015 	stw	r7,0(sp)
    7e48:	29400044 	addi	r5,r5,1
    7e4c:	0007cb80 	call	7cb8 <_Balloc>
    7e50:	89800417 	ldw	r6,16(r17)
    7e54:	89400304 	addi	r5,r17,12
    7e58:	11000304 	addi	r4,r2,12
    7e5c:	31800084 	addi	r6,r6,2
    7e60:	318d883a 	add	r6,r6,r6
    7e64:	318d883a 	add	r6,r6,r6
    7e68:	1027883a 	mov	r19,r2
    7e6c:	00078ec0 	call	78ec <memcpy>
    7e70:	d9c00017 	ldw	r7,0(sp)
    7e74:	88000a26 	beq	r17,zero,7ea0 <__multadd+0x118>
    7e78:	88c00117 	ldw	r3,4(r17)
    7e7c:	90801317 	ldw	r2,76(r18)
    7e80:	18c7883a 	add	r3,r3,r3
    7e84:	18c7883a 	add	r3,r3,r3
    7e88:	10c5883a 	add	r2,r2,r3
    7e8c:	10c00017 	ldw	r3,0(r2)
    7e90:	88c00015 	stw	r3,0(r17)
    7e94:	14400015 	stw	r17,0(r2)
    7e98:	9823883a 	mov	r17,r19
    7e9c:	003fd806 	br	7e00 <__alt_data_end+0xff007e00>
    7ea0:	9823883a 	mov	r17,r19
    7ea4:	003fd606 	br	7e00 <__alt_data_end+0xff007e00>

00007ea8 <__s2b>:
    7ea8:	defff904 	addi	sp,sp,-28
    7eac:	dc400115 	stw	r17,4(sp)
    7eb0:	dc000015 	stw	r16,0(sp)
    7eb4:	2023883a 	mov	r17,r4
    7eb8:	2821883a 	mov	r16,r5
    7ebc:	39000204 	addi	r4,r7,8
    7ec0:	01400244 	movi	r5,9
    7ec4:	dcc00315 	stw	r19,12(sp)
    7ec8:	dc800215 	stw	r18,8(sp)
    7ecc:	dfc00615 	stw	ra,24(sp)
    7ed0:	dd400515 	stw	r21,20(sp)
    7ed4:	dd000415 	stw	r20,16(sp)
    7ed8:	3825883a 	mov	r18,r7
    7edc:	3027883a 	mov	r19,r6
    7ee0:	0001bf00 	call	1bf0 <__divsi3>
    7ee4:	00c00044 	movi	r3,1
    7ee8:	000b883a 	mov	r5,zero
    7eec:	1880030e 	bge	r3,r2,7efc <__s2b+0x54>
    7ef0:	18c7883a 	add	r3,r3,r3
    7ef4:	29400044 	addi	r5,r5,1
    7ef8:	18bffd16 	blt	r3,r2,7ef0 <__alt_data_end+0xff007ef0>
    7efc:	8809883a 	mov	r4,r17
    7f00:	0007cb80 	call	7cb8 <_Balloc>
    7f04:	d8c00717 	ldw	r3,28(sp)
    7f08:	10c00515 	stw	r3,20(r2)
    7f0c:	00c00044 	movi	r3,1
    7f10:	10c00415 	stw	r3,16(r2)
    7f14:	00c00244 	movi	r3,9
    7f18:	1cc0210e 	bge	r3,r19,7fa0 <__s2b+0xf8>
    7f1c:	80eb883a 	add	r21,r16,r3
    7f20:	a829883a 	mov	r20,r21
    7f24:	84e1883a 	add	r16,r16,r19
    7f28:	a1c00007 	ldb	r7,0(r20)
    7f2c:	01800284 	movi	r6,10
    7f30:	a5000044 	addi	r20,r20,1
    7f34:	100b883a 	mov	r5,r2
    7f38:	39fff404 	addi	r7,r7,-48
    7f3c:	8809883a 	mov	r4,r17
    7f40:	0007d880 	call	7d88 <__multadd>
    7f44:	a43ff81e 	bne	r20,r16,7f28 <__alt_data_end+0xff007f28>
    7f48:	ace1883a 	add	r16,r21,r19
    7f4c:	843ffe04 	addi	r16,r16,-8
    7f50:	9c800a0e 	bge	r19,r18,7f7c <__s2b+0xd4>
    7f54:	94e5c83a 	sub	r18,r18,r19
    7f58:	84a5883a 	add	r18,r16,r18
    7f5c:	81c00007 	ldb	r7,0(r16)
    7f60:	01800284 	movi	r6,10
    7f64:	84000044 	addi	r16,r16,1
    7f68:	100b883a 	mov	r5,r2
    7f6c:	39fff404 	addi	r7,r7,-48
    7f70:	8809883a 	mov	r4,r17
    7f74:	0007d880 	call	7d88 <__multadd>
    7f78:	84bff81e 	bne	r16,r18,7f5c <__alt_data_end+0xff007f5c>
    7f7c:	dfc00617 	ldw	ra,24(sp)
    7f80:	dd400517 	ldw	r21,20(sp)
    7f84:	dd000417 	ldw	r20,16(sp)
    7f88:	dcc00317 	ldw	r19,12(sp)
    7f8c:	dc800217 	ldw	r18,8(sp)
    7f90:	dc400117 	ldw	r17,4(sp)
    7f94:	dc000017 	ldw	r16,0(sp)
    7f98:	dec00704 	addi	sp,sp,28
    7f9c:	f800283a 	ret
    7fa0:	84000284 	addi	r16,r16,10
    7fa4:	1827883a 	mov	r19,r3
    7fa8:	003fe906 	br	7f50 <__alt_data_end+0xff007f50>

00007fac <__hi0bits>:
    7fac:	20bfffec 	andhi	r2,r4,65535
    7fb0:	1000141e 	bne	r2,zero,8004 <__hi0bits+0x58>
    7fb4:	2008943a 	slli	r4,r4,16
    7fb8:	00800404 	movi	r2,16
    7fbc:	20ffc02c 	andhi	r3,r4,65280
    7fc0:	1800021e 	bne	r3,zero,7fcc <__hi0bits+0x20>
    7fc4:	2008923a 	slli	r4,r4,8
    7fc8:	10800204 	addi	r2,r2,8
    7fcc:	20fc002c 	andhi	r3,r4,61440
    7fd0:	1800021e 	bne	r3,zero,7fdc <__hi0bits+0x30>
    7fd4:	2008913a 	slli	r4,r4,4
    7fd8:	10800104 	addi	r2,r2,4
    7fdc:	20f0002c 	andhi	r3,r4,49152
    7fe0:	1800031e 	bne	r3,zero,7ff0 <__hi0bits+0x44>
    7fe4:	2109883a 	add	r4,r4,r4
    7fe8:	10800084 	addi	r2,r2,2
    7fec:	2109883a 	add	r4,r4,r4
    7ff0:	20000316 	blt	r4,zero,8000 <__hi0bits+0x54>
    7ff4:	2110002c 	andhi	r4,r4,16384
    7ff8:	2000041e 	bne	r4,zero,800c <__hi0bits+0x60>
    7ffc:	00800804 	movi	r2,32
    8000:	f800283a 	ret
    8004:	0005883a 	mov	r2,zero
    8008:	003fec06 	br	7fbc <__alt_data_end+0xff007fbc>
    800c:	10800044 	addi	r2,r2,1
    8010:	f800283a 	ret

00008014 <__lo0bits>:
    8014:	20c00017 	ldw	r3,0(r4)
    8018:	188001cc 	andi	r2,r3,7
    801c:	10000826 	beq	r2,zero,8040 <__lo0bits+0x2c>
    8020:	1880004c 	andi	r2,r3,1
    8024:	1000211e 	bne	r2,zero,80ac <__lo0bits+0x98>
    8028:	1880008c 	andi	r2,r3,2
    802c:	1000211e 	bne	r2,zero,80b4 <__lo0bits+0xa0>
    8030:	1806d0ba 	srli	r3,r3,2
    8034:	00800084 	movi	r2,2
    8038:	20c00015 	stw	r3,0(r4)
    803c:	f800283a 	ret
    8040:	18bfffcc 	andi	r2,r3,65535
    8044:	10001326 	beq	r2,zero,8094 <__lo0bits+0x80>
    8048:	0005883a 	mov	r2,zero
    804c:	19403fcc 	andi	r5,r3,255
    8050:	2800021e 	bne	r5,zero,805c <__lo0bits+0x48>
    8054:	1806d23a 	srli	r3,r3,8
    8058:	10800204 	addi	r2,r2,8
    805c:	194003cc 	andi	r5,r3,15
    8060:	2800021e 	bne	r5,zero,806c <__lo0bits+0x58>
    8064:	1806d13a 	srli	r3,r3,4
    8068:	10800104 	addi	r2,r2,4
    806c:	194000cc 	andi	r5,r3,3
    8070:	2800021e 	bne	r5,zero,807c <__lo0bits+0x68>
    8074:	1806d0ba 	srli	r3,r3,2
    8078:	10800084 	addi	r2,r2,2
    807c:	1940004c 	andi	r5,r3,1
    8080:	2800081e 	bne	r5,zero,80a4 <__lo0bits+0x90>
    8084:	1806d07a 	srli	r3,r3,1
    8088:	1800051e 	bne	r3,zero,80a0 <__lo0bits+0x8c>
    808c:	00800804 	movi	r2,32
    8090:	f800283a 	ret
    8094:	1806d43a 	srli	r3,r3,16
    8098:	00800404 	movi	r2,16
    809c:	003feb06 	br	804c <__alt_data_end+0xff00804c>
    80a0:	10800044 	addi	r2,r2,1
    80a4:	20c00015 	stw	r3,0(r4)
    80a8:	f800283a 	ret
    80ac:	0005883a 	mov	r2,zero
    80b0:	f800283a 	ret
    80b4:	1806d07a 	srli	r3,r3,1
    80b8:	00800044 	movi	r2,1
    80bc:	20c00015 	stw	r3,0(r4)
    80c0:	f800283a 	ret

000080c4 <__i2b>:
    80c4:	defffd04 	addi	sp,sp,-12
    80c8:	dc000015 	stw	r16,0(sp)
    80cc:	04000044 	movi	r16,1
    80d0:	dc400115 	stw	r17,4(sp)
    80d4:	2823883a 	mov	r17,r5
    80d8:	800b883a 	mov	r5,r16
    80dc:	dfc00215 	stw	ra,8(sp)
    80e0:	0007cb80 	call	7cb8 <_Balloc>
    80e4:	14400515 	stw	r17,20(r2)
    80e8:	14000415 	stw	r16,16(r2)
    80ec:	dfc00217 	ldw	ra,8(sp)
    80f0:	dc400117 	ldw	r17,4(sp)
    80f4:	dc000017 	ldw	r16,0(sp)
    80f8:	dec00304 	addi	sp,sp,12
    80fc:	f800283a 	ret

00008100 <__multiply>:
    8100:	defffa04 	addi	sp,sp,-24
    8104:	dcc00315 	stw	r19,12(sp)
    8108:	dc800215 	stw	r18,8(sp)
    810c:	34c00417 	ldw	r19,16(r6)
    8110:	2c800417 	ldw	r18,16(r5)
    8114:	dd000415 	stw	r20,16(sp)
    8118:	dc400115 	stw	r17,4(sp)
    811c:	dfc00515 	stw	ra,20(sp)
    8120:	dc000015 	stw	r16,0(sp)
    8124:	2829883a 	mov	r20,r5
    8128:	3023883a 	mov	r17,r6
    812c:	94c0050e 	bge	r18,r19,8144 <__multiply+0x44>
    8130:	9007883a 	mov	r3,r18
    8134:	3029883a 	mov	r20,r6
    8138:	9825883a 	mov	r18,r19
    813c:	2823883a 	mov	r17,r5
    8140:	1827883a 	mov	r19,r3
    8144:	a0800217 	ldw	r2,8(r20)
    8148:	94e1883a 	add	r16,r18,r19
    814c:	a1400117 	ldw	r5,4(r20)
    8150:	1400010e 	bge	r2,r16,8158 <__multiply+0x58>
    8154:	29400044 	addi	r5,r5,1
    8158:	0007cb80 	call	7cb8 <_Balloc>
    815c:	8415883a 	add	r10,r16,r16
    8160:	12c00504 	addi	r11,r2,20
    8164:	5295883a 	add	r10,r10,r10
    8168:	5a95883a 	add	r10,r11,r10
    816c:	5807883a 	mov	r3,r11
    8170:	5a80032e 	bgeu	r11,r10,8180 <__multiply+0x80>
    8174:	18000015 	stw	zero,0(r3)
    8178:	18c00104 	addi	r3,r3,4
    817c:	1abffd36 	bltu	r3,r10,8174 <__alt_data_end+0xff008174>
    8180:	9ce7883a 	add	r19,r19,r19
    8184:	94a5883a 	add	r18,r18,r18
    8188:	89800504 	addi	r6,r17,20
    818c:	9ce7883a 	add	r19,r19,r19
    8190:	a3400504 	addi	r13,r20,20
    8194:	94a5883a 	add	r18,r18,r18
    8198:	34d9883a 	add	r12,r6,r19
    819c:	6c93883a 	add	r9,r13,r18
    81a0:	3300422e 	bgeu	r6,r12,82ac <__multiply+0x1ac>
    81a4:	37c00017 	ldw	ra,0(r6)
    81a8:	fbffffcc 	andi	r15,ra,65535
    81ac:	78001b26 	beq	r15,zero,821c <__multiply+0x11c>
    81b0:	5811883a 	mov	r8,r11
    81b4:	681d883a 	mov	r14,r13
    81b8:	000f883a 	mov	r7,zero
    81bc:	71000017 	ldw	r4,0(r14)
    81c0:	40c00017 	ldw	r3,0(r8)
    81c4:	73800104 	addi	r14,r14,4
    81c8:	217fffcc 	andi	r5,r4,65535
    81cc:	2bcb383a 	mul	r5,r5,r15
    81d0:	2008d43a 	srli	r4,r4,16
    81d4:	1c7fffcc 	andi	r17,r3,65535
    81d8:	2c4b883a 	add	r5,r5,r17
    81dc:	29cb883a 	add	r5,r5,r7
    81e0:	23c9383a 	mul	r4,r4,r15
    81e4:	1806d43a 	srli	r3,r3,16
    81e8:	280ed43a 	srli	r7,r5,16
    81ec:	297fffcc 	andi	r5,r5,65535
    81f0:	20c7883a 	add	r3,r4,r3
    81f4:	19c7883a 	add	r3,r3,r7
    81f8:	1808943a 	slli	r4,r3,16
    81fc:	4023883a 	mov	r17,r8
    8200:	180ed43a 	srli	r7,r3,16
    8204:	214ab03a 	or	r5,r4,r5
    8208:	41400015 	stw	r5,0(r8)
    820c:	42000104 	addi	r8,r8,4
    8210:	727fea36 	bltu	r14,r9,81bc <__alt_data_end+0xff0081bc>
    8214:	89c00115 	stw	r7,4(r17)
    8218:	37c00017 	ldw	ra,0(r6)
    821c:	f83ed43a 	srli	ra,ra,16
    8220:	f8001f26 	beq	ra,zero,82a0 <__multiply+0x1a0>
    8224:	58c00017 	ldw	r3,0(r11)
    8228:	681d883a 	mov	r14,r13
    822c:	581f883a 	mov	r15,r11
    8230:	1811883a 	mov	r8,r3
    8234:	5825883a 	mov	r18,r11
    8238:	000f883a 	mov	r7,zero
    823c:	00000106 	br	8244 <__multiply+0x144>
    8240:	8825883a 	mov	r18,r17
    8244:	7140000b 	ldhu	r5,0(r14)
    8248:	4010d43a 	srli	r8,r8,16
    824c:	193fffcc 	andi	r4,r3,65535
    8250:	2fcb383a 	mul	r5,r5,ra
    8254:	7bc00104 	addi	r15,r15,4
    8258:	73800104 	addi	r14,r14,4
    825c:	2a0b883a 	add	r5,r5,r8
    8260:	29cb883a 	add	r5,r5,r7
    8264:	2806943a 	slli	r3,r5,16
    8268:	94400104 	addi	r17,r18,4
    826c:	280ad43a 	srli	r5,r5,16
    8270:	1908b03a 	or	r4,r3,r4
    8274:	793fff15 	stw	r4,-4(r15)
    8278:	70ffff17 	ldw	r3,-4(r14)
    827c:	8a000017 	ldw	r8,0(r17)
    8280:	1806d43a 	srli	r3,r3,16
    8284:	413fffcc 	andi	r4,r8,65535
    8288:	1fc7383a 	mul	r3,r3,ra
    828c:	1907883a 	add	r3,r3,r4
    8290:	1947883a 	add	r3,r3,r5
    8294:	180ed43a 	srli	r7,r3,16
    8298:	727fe936 	bltu	r14,r9,8240 <__alt_data_end+0xff008240>
    829c:	90c00115 	stw	r3,4(r18)
    82a0:	31800104 	addi	r6,r6,4
    82a4:	5ac00104 	addi	r11,r11,4
    82a8:	333fbe36 	bltu	r6,r12,81a4 <__alt_data_end+0xff0081a4>
    82ac:	0400090e 	bge	zero,r16,82d4 <__multiply+0x1d4>
    82b0:	50ffff17 	ldw	r3,-4(r10)
    82b4:	52bfff04 	addi	r10,r10,-4
    82b8:	18000326 	beq	r3,zero,82c8 <__multiply+0x1c8>
    82bc:	00000506 	br	82d4 <__multiply+0x1d4>
    82c0:	50c00017 	ldw	r3,0(r10)
    82c4:	1800031e 	bne	r3,zero,82d4 <__multiply+0x1d4>
    82c8:	843fffc4 	addi	r16,r16,-1
    82cc:	52bfff04 	addi	r10,r10,-4
    82d0:	803ffb1e 	bne	r16,zero,82c0 <__alt_data_end+0xff0082c0>
    82d4:	14000415 	stw	r16,16(r2)
    82d8:	dfc00517 	ldw	ra,20(sp)
    82dc:	dd000417 	ldw	r20,16(sp)
    82e0:	dcc00317 	ldw	r19,12(sp)
    82e4:	dc800217 	ldw	r18,8(sp)
    82e8:	dc400117 	ldw	r17,4(sp)
    82ec:	dc000017 	ldw	r16,0(sp)
    82f0:	dec00604 	addi	sp,sp,24
    82f4:	f800283a 	ret

000082f8 <__pow5mult>:
    82f8:	defffa04 	addi	sp,sp,-24
    82fc:	dcc00315 	stw	r19,12(sp)
    8300:	dc000015 	stw	r16,0(sp)
    8304:	dfc00515 	stw	ra,20(sp)
    8308:	dd000415 	stw	r20,16(sp)
    830c:	dc800215 	stw	r18,8(sp)
    8310:	dc400115 	stw	r17,4(sp)
    8314:	308000cc 	andi	r2,r6,3
    8318:	3021883a 	mov	r16,r6
    831c:	2027883a 	mov	r19,r4
    8320:	10002f1e 	bne	r2,zero,83e0 <__pow5mult+0xe8>
    8324:	2825883a 	mov	r18,r5
    8328:	8021d0ba 	srai	r16,r16,2
    832c:	80001a26 	beq	r16,zero,8398 <__pow5mult+0xa0>
    8330:	9c401217 	ldw	r17,72(r19)
    8334:	8800061e 	bne	r17,zero,8350 <__pow5mult+0x58>
    8338:	00003406 	br	840c <__pow5mult+0x114>
    833c:	8021d07a 	srai	r16,r16,1
    8340:	80001526 	beq	r16,zero,8398 <__pow5mult+0xa0>
    8344:	88800017 	ldw	r2,0(r17)
    8348:	10001c26 	beq	r2,zero,83bc <__pow5mult+0xc4>
    834c:	1023883a 	mov	r17,r2
    8350:	8080004c 	andi	r2,r16,1
    8354:	103ff926 	beq	r2,zero,833c <__alt_data_end+0xff00833c>
    8358:	880d883a 	mov	r6,r17
    835c:	900b883a 	mov	r5,r18
    8360:	9809883a 	mov	r4,r19
    8364:	00081000 	call	8100 <__multiply>
    8368:	90001b26 	beq	r18,zero,83d8 <__pow5mult+0xe0>
    836c:	91000117 	ldw	r4,4(r18)
    8370:	98c01317 	ldw	r3,76(r19)
    8374:	8021d07a 	srai	r16,r16,1
    8378:	2109883a 	add	r4,r4,r4
    837c:	2109883a 	add	r4,r4,r4
    8380:	1907883a 	add	r3,r3,r4
    8384:	19000017 	ldw	r4,0(r3)
    8388:	91000015 	stw	r4,0(r18)
    838c:	1c800015 	stw	r18,0(r3)
    8390:	1025883a 	mov	r18,r2
    8394:	803feb1e 	bne	r16,zero,8344 <__alt_data_end+0xff008344>
    8398:	9005883a 	mov	r2,r18
    839c:	dfc00517 	ldw	ra,20(sp)
    83a0:	dd000417 	ldw	r20,16(sp)
    83a4:	dcc00317 	ldw	r19,12(sp)
    83a8:	dc800217 	ldw	r18,8(sp)
    83ac:	dc400117 	ldw	r17,4(sp)
    83b0:	dc000017 	ldw	r16,0(sp)
    83b4:	dec00604 	addi	sp,sp,24
    83b8:	f800283a 	ret
    83bc:	880d883a 	mov	r6,r17
    83c0:	880b883a 	mov	r5,r17
    83c4:	9809883a 	mov	r4,r19
    83c8:	00081000 	call	8100 <__multiply>
    83cc:	88800015 	stw	r2,0(r17)
    83d0:	10000015 	stw	zero,0(r2)
    83d4:	003fdd06 	br	834c <__alt_data_end+0xff00834c>
    83d8:	1025883a 	mov	r18,r2
    83dc:	003fd706 	br	833c <__alt_data_end+0xff00833c>
    83e0:	10bfffc4 	addi	r2,r2,-1
    83e4:	1085883a 	add	r2,r2,r2
    83e8:	00c00074 	movhi	r3,1
    83ec:	18c53404 	addi	r3,r3,5328
    83f0:	1085883a 	add	r2,r2,r2
    83f4:	1885883a 	add	r2,r3,r2
    83f8:	11800017 	ldw	r6,0(r2)
    83fc:	000f883a 	mov	r7,zero
    8400:	0007d880 	call	7d88 <__multadd>
    8404:	1025883a 	mov	r18,r2
    8408:	003fc706 	br	8328 <__alt_data_end+0xff008328>
    840c:	05000044 	movi	r20,1
    8410:	a00b883a 	mov	r5,r20
    8414:	9809883a 	mov	r4,r19
    8418:	0007cb80 	call	7cb8 <_Balloc>
    841c:	1023883a 	mov	r17,r2
    8420:	00809c44 	movi	r2,625
    8424:	88800515 	stw	r2,20(r17)
    8428:	8d000415 	stw	r20,16(r17)
    842c:	9c401215 	stw	r17,72(r19)
    8430:	88000015 	stw	zero,0(r17)
    8434:	003fc606 	br	8350 <__alt_data_end+0xff008350>

00008438 <__lshift>:
    8438:	defff904 	addi	sp,sp,-28
    843c:	dd400515 	stw	r21,20(sp)
    8440:	dcc00315 	stw	r19,12(sp)
    8444:	302bd17a 	srai	r21,r6,5
    8448:	2cc00417 	ldw	r19,16(r5)
    844c:	28800217 	ldw	r2,8(r5)
    8450:	dd000415 	stw	r20,16(sp)
    8454:	ace7883a 	add	r19,r21,r19
    8458:	dc800215 	stw	r18,8(sp)
    845c:	dc400115 	stw	r17,4(sp)
    8460:	dc000015 	stw	r16,0(sp)
    8464:	dfc00615 	stw	ra,24(sp)
    8468:	9c000044 	addi	r16,r19,1
    846c:	2823883a 	mov	r17,r5
    8470:	3029883a 	mov	r20,r6
    8474:	2025883a 	mov	r18,r4
    8478:	29400117 	ldw	r5,4(r5)
    847c:	1400030e 	bge	r2,r16,848c <__lshift+0x54>
    8480:	1085883a 	add	r2,r2,r2
    8484:	29400044 	addi	r5,r5,1
    8488:	143ffd16 	blt	r2,r16,8480 <__alt_data_end+0xff008480>
    848c:	9009883a 	mov	r4,r18
    8490:	0007cb80 	call	7cb8 <_Balloc>
    8494:	10c00504 	addi	r3,r2,20
    8498:	0540070e 	bge	zero,r21,84b8 <__lshift+0x80>
    849c:	ad6b883a 	add	r21,r21,r21
    84a0:	ad6b883a 	add	r21,r21,r21
    84a4:	1809883a 	mov	r4,r3
    84a8:	1d47883a 	add	r3,r3,r21
    84ac:	20000015 	stw	zero,0(r4)
    84b0:	21000104 	addi	r4,r4,4
    84b4:	193ffd1e 	bne	r3,r4,84ac <__alt_data_end+0xff0084ac>
    84b8:	8a000417 	ldw	r8,16(r17)
    84bc:	89000504 	addi	r4,r17,20
    84c0:	a18007cc 	andi	r6,r20,31
    84c4:	4211883a 	add	r8,r8,r8
    84c8:	4211883a 	add	r8,r8,r8
    84cc:	2211883a 	add	r8,r4,r8
    84d0:	30002326 	beq	r6,zero,8560 <__lshift+0x128>
    84d4:	02400804 	movi	r9,32
    84d8:	4993c83a 	sub	r9,r9,r6
    84dc:	000b883a 	mov	r5,zero
    84e0:	21c00017 	ldw	r7,0(r4)
    84e4:	1815883a 	mov	r10,r3
    84e8:	18c00104 	addi	r3,r3,4
    84ec:	398e983a 	sll	r7,r7,r6
    84f0:	21000104 	addi	r4,r4,4
    84f4:	394ab03a 	or	r5,r7,r5
    84f8:	197fff15 	stw	r5,-4(r3)
    84fc:	217fff17 	ldw	r5,-4(r4)
    8500:	2a4ad83a 	srl	r5,r5,r9
    8504:	223ff636 	bltu	r4,r8,84e0 <__alt_data_end+0xff0084e0>
    8508:	51400115 	stw	r5,4(r10)
    850c:	28001a1e 	bne	r5,zero,8578 <__lshift+0x140>
    8510:	843fffc4 	addi	r16,r16,-1
    8514:	14000415 	stw	r16,16(r2)
    8518:	88000826 	beq	r17,zero,853c <__lshift+0x104>
    851c:	89000117 	ldw	r4,4(r17)
    8520:	90c01317 	ldw	r3,76(r18)
    8524:	2109883a 	add	r4,r4,r4
    8528:	2109883a 	add	r4,r4,r4
    852c:	1907883a 	add	r3,r3,r4
    8530:	19000017 	ldw	r4,0(r3)
    8534:	89000015 	stw	r4,0(r17)
    8538:	1c400015 	stw	r17,0(r3)
    853c:	dfc00617 	ldw	ra,24(sp)
    8540:	dd400517 	ldw	r21,20(sp)
    8544:	dd000417 	ldw	r20,16(sp)
    8548:	dcc00317 	ldw	r19,12(sp)
    854c:	dc800217 	ldw	r18,8(sp)
    8550:	dc400117 	ldw	r17,4(sp)
    8554:	dc000017 	ldw	r16,0(sp)
    8558:	dec00704 	addi	sp,sp,28
    855c:	f800283a 	ret
    8560:	21400017 	ldw	r5,0(r4)
    8564:	18c00104 	addi	r3,r3,4
    8568:	21000104 	addi	r4,r4,4
    856c:	197fff15 	stw	r5,-4(r3)
    8570:	223ffb36 	bltu	r4,r8,8560 <__alt_data_end+0xff008560>
    8574:	003fe606 	br	8510 <__alt_data_end+0xff008510>
    8578:	9c000084 	addi	r16,r19,2
    857c:	003fe406 	br	8510 <__alt_data_end+0xff008510>

00008580 <__mcmp>:
    8580:	20800417 	ldw	r2,16(r4)
    8584:	28c00417 	ldw	r3,16(r5)
    8588:	10c5c83a 	sub	r2,r2,r3
    858c:	1000111e 	bne	r2,zero,85d4 <__mcmp+0x54>
    8590:	18c7883a 	add	r3,r3,r3
    8594:	18c7883a 	add	r3,r3,r3
    8598:	21000504 	addi	r4,r4,20
    859c:	29400504 	addi	r5,r5,20
    85a0:	20c5883a 	add	r2,r4,r3
    85a4:	28cb883a 	add	r5,r5,r3
    85a8:	00000106 	br	85b0 <__mcmp+0x30>
    85ac:	20800a2e 	bgeu	r4,r2,85d8 <__mcmp+0x58>
    85b0:	10bfff04 	addi	r2,r2,-4
    85b4:	297fff04 	addi	r5,r5,-4
    85b8:	11800017 	ldw	r6,0(r2)
    85bc:	28c00017 	ldw	r3,0(r5)
    85c0:	30fffa26 	beq	r6,r3,85ac <__alt_data_end+0xff0085ac>
    85c4:	30c00236 	bltu	r6,r3,85d0 <__mcmp+0x50>
    85c8:	00800044 	movi	r2,1
    85cc:	f800283a 	ret
    85d0:	00bfffc4 	movi	r2,-1
    85d4:	f800283a 	ret
    85d8:	0005883a 	mov	r2,zero
    85dc:	f800283a 	ret

000085e0 <__mdiff>:
    85e0:	28c00417 	ldw	r3,16(r5)
    85e4:	30800417 	ldw	r2,16(r6)
    85e8:	defffa04 	addi	sp,sp,-24
    85ec:	dcc00315 	stw	r19,12(sp)
    85f0:	dc800215 	stw	r18,8(sp)
    85f4:	dfc00515 	stw	ra,20(sp)
    85f8:	dd000415 	stw	r20,16(sp)
    85fc:	dc400115 	stw	r17,4(sp)
    8600:	dc000015 	stw	r16,0(sp)
    8604:	1887c83a 	sub	r3,r3,r2
    8608:	2825883a 	mov	r18,r5
    860c:	3027883a 	mov	r19,r6
    8610:	1800141e 	bne	r3,zero,8664 <__mdiff+0x84>
    8614:	1085883a 	add	r2,r2,r2
    8618:	1085883a 	add	r2,r2,r2
    861c:	2a000504 	addi	r8,r5,20
    8620:	34000504 	addi	r16,r6,20
    8624:	4087883a 	add	r3,r8,r2
    8628:	8085883a 	add	r2,r16,r2
    862c:	00000106 	br	8634 <__mdiff+0x54>
    8630:	40c0592e 	bgeu	r8,r3,8798 <__mdiff+0x1b8>
    8634:	18ffff04 	addi	r3,r3,-4
    8638:	10bfff04 	addi	r2,r2,-4
    863c:	19c00017 	ldw	r7,0(r3)
    8640:	11400017 	ldw	r5,0(r2)
    8644:	397ffa26 	beq	r7,r5,8630 <__alt_data_end+0xff008630>
    8648:	3940592e 	bgeu	r7,r5,87b0 <__mdiff+0x1d0>
    864c:	9005883a 	mov	r2,r18
    8650:	4023883a 	mov	r17,r8
    8654:	9825883a 	mov	r18,r19
    8658:	05000044 	movi	r20,1
    865c:	1027883a 	mov	r19,r2
    8660:	00000406 	br	8674 <__mdiff+0x94>
    8664:	18005616 	blt	r3,zero,87c0 <__mdiff+0x1e0>
    8668:	34400504 	addi	r17,r6,20
    866c:	2c000504 	addi	r16,r5,20
    8670:	0029883a 	mov	r20,zero
    8674:	91400117 	ldw	r5,4(r18)
    8678:	0007cb80 	call	7cb8 <_Balloc>
    867c:	92400417 	ldw	r9,16(r18)
    8680:	9b000417 	ldw	r12,16(r19)
    8684:	12c00504 	addi	r11,r2,20
    8688:	4a51883a 	add	r8,r9,r9
    868c:	6319883a 	add	r12,r12,r12
    8690:	4211883a 	add	r8,r8,r8
    8694:	6319883a 	add	r12,r12,r12
    8698:	15000315 	stw	r20,12(r2)
    869c:	8211883a 	add	r8,r16,r8
    86a0:	8b19883a 	add	r12,r17,r12
    86a4:	0007883a 	mov	r3,zero
    86a8:	81400017 	ldw	r5,0(r16)
    86ac:	89c00017 	ldw	r7,0(r17)
    86b0:	59800104 	addi	r6,r11,4
    86b4:	293fffcc 	andi	r4,r5,65535
    86b8:	20c7883a 	add	r3,r4,r3
    86bc:	393fffcc 	andi	r4,r7,65535
    86c0:	1909c83a 	sub	r4,r3,r4
    86c4:	280ad43a 	srli	r5,r5,16
    86c8:	380ed43a 	srli	r7,r7,16
    86cc:	2007d43a 	srai	r3,r4,16
    86d0:	213fffcc 	andi	r4,r4,65535
    86d4:	29cbc83a 	sub	r5,r5,r7
    86d8:	28c7883a 	add	r3,r5,r3
    86dc:	180a943a 	slli	r5,r3,16
    86e0:	8c400104 	addi	r17,r17,4
    86e4:	84000104 	addi	r16,r16,4
    86e8:	2908b03a 	or	r4,r5,r4
    86ec:	59000015 	stw	r4,0(r11)
    86f0:	1807d43a 	srai	r3,r3,16
    86f4:	3015883a 	mov	r10,r6
    86f8:	3017883a 	mov	r11,r6
    86fc:	8b3fea36 	bltu	r17,r12,86a8 <__alt_data_end+0xff0086a8>
    8700:	8200162e 	bgeu	r16,r8,875c <__mdiff+0x17c>
    8704:	8017883a 	mov	r11,r16
    8708:	59400017 	ldw	r5,0(r11)
    870c:	31800104 	addi	r6,r6,4
    8710:	5ac00104 	addi	r11,r11,4
    8714:	293fffcc 	andi	r4,r5,65535
    8718:	20c7883a 	add	r3,r4,r3
    871c:	280ed43a 	srli	r7,r5,16
    8720:	180bd43a 	srai	r5,r3,16
    8724:	193fffcc 	andi	r4,r3,65535
    8728:	3947883a 	add	r3,r7,r5
    872c:	180a943a 	slli	r5,r3,16
    8730:	1807d43a 	srai	r3,r3,16
    8734:	2908b03a 	or	r4,r5,r4
    8738:	313fff15 	stw	r4,-4(r6)
    873c:	5a3ff236 	bltu	r11,r8,8708 <__alt_data_end+0xff008708>
    8740:	0406303a 	nor	r3,zero,r16
    8744:	1a07883a 	add	r3,r3,r8
    8748:	1806d0ba 	srli	r3,r3,2
    874c:	18c00044 	addi	r3,r3,1
    8750:	18c7883a 	add	r3,r3,r3
    8754:	18c7883a 	add	r3,r3,r3
    8758:	50d5883a 	add	r10,r10,r3
    875c:	50ffff04 	addi	r3,r10,-4
    8760:	2000041e 	bne	r4,zero,8774 <__mdiff+0x194>
    8764:	18ffff04 	addi	r3,r3,-4
    8768:	19000017 	ldw	r4,0(r3)
    876c:	4a7fffc4 	addi	r9,r9,-1
    8770:	203ffc26 	beq	r4,zero,8764 <__alt_data_end+0xff008764>
    8774:	12400415 	stw	r9,16(r2)
    8778:	dfc00517 	ldw	ra,20(sp)
    877c:	dd000417 	ldw	r20,16(sp)
    8780:	dcc00317 	ldw	r19,12(sp)
    8784:	dc800217 	ldw	r18,8(sp)
    8788:	dc400117 	ldw	r17,4(sp)
    878c:	dc000017 	ldw	r16,0(sp)
    8790:	dec00604 	addi	sp,sp,24
    8794:	f800283a 	ret
    8798:	000b883a 	mov	r5,zero
    879c:	0007cb80 	call	7cb8 <_Balloc>
    87a0:	00c00044 	movi	r3,1
    87a4:	10c00415 	stw	r3,16(r2)
    87a8:	10000515 	stw	zero,20(r2)
    87ac:	003ff206 	br	8778 <__alt_data_end+0xff008778>
    87b0:	8023883a 	mov	r17,r16
    87b4:	0029883a 	mov	r20,zero
    87b8:	4021883a 	mov	r16,r8
    87bc:	003fad06 	br	8674 <__alt_data_end+0xff008674>
    87c0:	9005883a 	mov	r2,r18
    87c4:	94400504 	addi	r17,r18,20
    87c8:	9c000504 	addi	r16,r19,20
    87cc:	9825883a 	mov	r18,r19
    87d0:	05000044 	movi	r20,1
    87d4:	1027883a 	mov	r19,r2
    87d8:	003fa606 	br	8674 <__alt_data_end+0xff008674>

000087dc <__ulp>:
    87dc:	295ffc2c 	andhi	r5,r5,32752
    87e0:	00bf3034 	movhi	r2,64704
    87e4:	2887883a 	add	r3,r5,r2
    87e8:	00c0020e 	bge	zero,r3,87f4 <__ulp+0x18>
    87ec:	0005883a 	mov	r2,zero
    87f0:	f800283a 	ret
    87f4:	00c7c83a 	sub	r3,zero,r3
    87f8:	1807d53a 	srai	r3,r3,20
    87fc:	008004c4 	movi	r2,19
    8800:	10c00b0e 	bge	r2,r3,8830 <__ulp+0x54>
    8804:	18bffb04 	addi	r2,r3,-20
    8808:	01000784 	movi	r4,30
    880c:	0007883a 	mov	r3,zero
    8810:	20800516 	blt	r4,r2,8828 <__ulp+0x4c>
    8814:	010007c4 	movi	r4,31
    8818:	2089c83a 	sub	r4,r4,r2
    881c:	00800044 	movi	r2,1
    8820:	1104983a 	sll	r2,r2,r4
    8824:	f800283a 	ret
    8828:	00800044 	movi	r2,1
    882c:	f800283a 	ret
    8830:	01400234 	movhi	r5,8
    8834:	28c7d83a 	sra	r3,r5,r3
    8838:	0005883a 	mov	r2,zero
    883c:	f800283a 	ret

00008840 <__b2d>:
    8840:	defffa04 	addi	sp,sp,-24
    8844:	dc000015 	stw	r16,0(sp)
    8848:	24000417 	ldw	r16,16(r4)
    884c:	dc400115 	stw	r17,4(sp)
    8850:	24400504 	addi	r17,r4,20
    8854:	8421883a 	add	r16,r16,r16
    8858:	8421883a 	add	r16,r16,r16
    885c:	8c21883a 	add	r16,r17,r16
    8860:	dc800215 	stw	r18,8(sp)
    8864:	84bfff17 	ldw	r18,-4(r16)
    8868:	dd000415 	stw	r20,16(sp)
    886c:	dcc00315 	stw	r19,12(sp)
    8870:	9009883a 	mov	r4,r18
    8874:	2829883a 	mov	r20,r5
    8878:	dfc00515 	stw	ra,20(sp)
    887c:	0007fac0 	call	7fac <__hi0bits>
    8880:	00c00804 	movi	r3,32
    8884:	1889c83a 	sub	r4,r3,r2
    8888:	a1000015 	stw	r4,0(r20)
    888c:	01000284 	movi	r4,10
    8890:	84ffff04 	addi	r19,r16,-4
    8894:	20801216 	blt	r4,r2,88e0 <__b2d+0xa0>
    8898:	018002c4 	movi	r6,11
    889c:	308dc83a 	sub	r6,r6,r2
    88a0:	9186d83a 	srl	r3,r18,r6
    88a4:	18cffc34 	orhi	r3,r3,16368
    88a8:	8cc0212e 	bgeu	r17,r19,8930 <__b2d+0xf0>
    88ac:	813ffe17 	ldw	r4,-8(r16)
    88b0:	218cd83a 	srl	r6,r4,r6
    88b4:	10800544 	addi	r2,r2,21
    88b8:	9084983a 	sll	r2,r18,r2
    88bc:	1184b03a 	or	r2,r2,r6
    88c0:	dfc00517 	ldw	ra,20(sp)
    88c4:	dd000417 	ldw	r20,16(sp)
    88c8:	dcc00317 	ldw	r19,12(sp)
    88cc:	dc800217 	ldw	r18,8(sp)
    88d0:	dc400117 	ldw	r17,4(sp)
    88d4:	dc000017 	ldw	r16,0(sp)
    88d8:	dec00604 	addi	sp,sp,24
    88dc:	f800283a 	ret
    88e0:	8cc00f2e 	bgeu	r17,r19,8920 <__b2d+0xe0>
    88e4:	117ffd44 	addi	r5,r2,-11
    88e8:	80bffe17 	ldw	r2,-8(r16)
    88ec:	28000e26 	beq	r5,zero,8928 <__b2d+0xe8>
    88f0:	1949c83a 	sub	r4,r3,r5
    88f4:	9164983a 	sll	r18,r18,r5
    88f8:	1106d83a 	srl	r3,r2,r4
    88fc:	81bffe04 	addi	r6,r16,-8
    8900:	948ffc34 	orhi	r18,r18,16368
    8904:	90c6b03a 	or	r3,r18,r3
    8908:	89800e2e 	bgeu	r17,r6,8944 <__b2d+0x104>
    890c:	81bffd17 	ldw	r6,-12(r16)
    8910:	1144983a 	sll	r2,r2,r5
    8914:	310ad83a 	srl	r5,r6,r4
    8918:	2884b03a 	or	r2,r5,r2
    891c:	003fe806 	br	88c0 <__alt_data_end+0xff0088c0>
    8920:	10bffd44 	addi	r2,r2,-11
    8924:	1000041e 	bne	r2,zero,8938 <__b2d+0xf8>
    8928:	90cffc34 	orhi	r3,r18,16368
    892c:	003fe406 	br	88c0 <__alt_data_end+0xff0088c0>
    8930:	000d883a 	mov	r6,zero
    8934:	003fdf06 	br	88b4 <__alt_data_end+0xff0088b4>
    8938:	90a4983a 	sll	r18,r18,r2
    893c:	0005883a 	mov	r2,zero
    8940:	003ff906 	br	8928 <__alt_data_end+0xff008928>
    8944:	1144983a 	sll	r2,r2,r5
    8948:	003fdd06 	br	88c0 <__alt_data_end+0xff0088c0>

0000894c <__d2b>:
    894c:	defff804 	addi	sp,sp,-32
    8950:	dc000215 	stw	r16,8(sp)
    8954:	3021883a 	mov	r16,r6
    8958:	dc400315 	stw	r17,12(sp)
    895c:	8022907a 	slli	r17,r16,1
    8960:	dd000615 	stw	r20,24(sp)
    8964:	2829883a 	mov	r20,r5
    8968:	01400044 	movi	r5,1
    896c:	dcc00515 	stw	r19,20(sp)
    8970:	dc800415 	stw	r18,16(sp)
    8974:	dfc00715 	stw	ra,28(sp)
    8978:	3825883a 	mov	r18,r7
    897c:	8822d57a 	srli	r17,r17,21
    8980:	0007cb80 	call	7cb8 <_Balloc>
    8984:	1027883a 	mov	r19,r2
    8988:	00800434 	movhi	r2,16
    898c:	10bfffc4 	addi	r2,r2,-1
    8990:	808c703a 	and	r6,r16,r2
    8994:	88000126 	beq	r17,zero,899c <__d2b+0x50>
    8998:	31800434 	orhi	r6,r6,16
    899c:	d9800015 	stw	r6,0(sp)
    89a0:	a0002426 	beq	r20,zero,8a34 <__d2b+0xe8>
    89a4:	d9000104 	addi	r4,sp,4
    89a8:	dd000115 	stw	r20,4(sp)
    89ac:	00080140 	call	8014 <__lo0bits>
    89b0:	d8c00017 	ldw	r3,0(sp)
    89b4:	10002f1e 	bne	r2,zero,8a74 <__d2b+0x128>
    89b8:	d9000117 	ldw	r4,4(sp)
    89bc:	99000515 	stw	r4,20(r19)
    89c0:	1821003a 	cmpeq	r16,r3,zero
    89c4:	01000084 	movi	r4,2
    89c8:	2421c83a 	sub	r16,r4,r16
    89cc:	98c00615 	stw	r3,24(r19)
    89d0:	9c000415 	stw	r16,16(r19)
    89d4:	88001f1e 	bne	r17,zero,8a54 <__d2b+0x108>
    89d8:	10bef384 	addi	r2,r2,-1074
    89dc:	90800015 	stw	r2,0(r18)
    89e0:	00900034 	movhi	r2,16384
    89e4:	10bfffc4 	addi	r2,r2,-1
    89e8:	8085883a 	add	r2,r16,r2
    89ec:	1085883a 	add	r2,r2,r2
    89f0:	1085883a 	add	r2,r2,r2
    89f4:	9885883a 	add	r2,r19,r2
    89f8:	11000517 	ldw	r4,20(r2)
    89fc:	8020917a 	slli	r16,r16,5
    8a00:	0007fac0 	call	7fac <__hi0bits>
    8a04:	d8c00817 	ldw	r3,32(sp)
    8a08:	8085c83a 	sub	r2,r16,r2
    8a0c:	18800015 	stw	r2,0(r3)
    8a10:	9805883a 	mov	r2,r19
    8a14:	dfc00717 	ldw	ra,28(sp)
    8a18:	dd000617 	ldw	r20,24(sp)
    8a1c:	dcc00517 	ldw	r19,20(sp)
    8a20:	dc800417 	ldw	r18,16(sp)
    8a24:	dc400317 	ldw	r17,12(sp)
    8a28:	dc000217 	ldw	r16,8(sp)
    8a2c:	dec00804 	addi	sp,sp,32
    8a30:	f800283a 	ret
    8a34:	d809883a 	mov	r4,sp
    8a38:	00080140 	call	8014 <__lo0bits>
    8a3c:	d8c00017 	ldw	r3,0(sp)
    8a40:	04000044 	movi	r16,1
    8a44:	9c000415 	stw	r16,16(r19)
    8a48:	98c00515 	stw	r3,20(r19)
    8a4c:	10800804 	addi	r2,r2,32
    8a50:	883fe126 	beq	r17,zero,89d8 <__alt_data_end+0xff0089d8>
    8a54:	00c00d44 	movi	r3,53
    8a58:	8c7ef344 	addi	r17,r17,-1075
    8a5c:	88a3883a 	add	r17,r17,r2
    8a60:	1885c83a 	sub	r2,r3,r2
    8a64:	d8c00817 	ldw	r3,32(sp)
    8a68:	94400015 	stw	r17,0(r18)
    8a6c:	18800015 	stw	r2,0(r3)
    8a70:	003fe706 	br	8a10 <__alt_data_end+0xff008a10>
    8a74:	01000804 	movi	r4,32
    8a78:	2089c83a 	sub	r4,r4,r2
    8a7c:	1908983a 	sll	r4,r3,r4
    8a80:	d9400117 	ldw	r5,4(sp)
    8a84:	1886d83a 	srl	r3,r3,r2
    8a88:	2148b03a 	or	r4,r4,r5
    8a8c:	99000515 	stw	r4,20(r19)
    8a90:	d8c00015 	stw	r3,0(sp)
    8a94:	003fca06 	br	89c0 <__alt_data_end+0xff0089c0>

00008a98 <__ratio>:
    8a98:	defff904 	addi	sp,sp,-28
    8a9c:	dc400315 	stw	r17,12(sp)
    8aa0:	2823883a 	mov	r17,r5
    8aa4:	d9400104 	addi	r5,sp,4
    8aa8:	dfc00615 	stw	ra,24(sp)
    8aac:	dcc00515 	stw	r19,20(sp)
    8ab0:	dc800415 	stw	r18,16(sp)
    8ab4:	2027883a 	mov	r19,r4
    8ab8:	dc000215 	stw	r16,8(sp)
    8abc:	00088400 	call	8840 <__b2d>
    8ac0:	d80b883a 	mov	r5,sp
    8ac4:	8809883a 	mov	r4,r17
    8ac8:	1025883a 	mov	r18,r2
    8acc:	1821883a 	mov	r16,r3
    8ad0:	00088400 	call	8840 <__b2d>
    8ad4:	8a000417 	ldw	r8,16(r17)
    8ad8:	99000417 	ldw	r4,16(r19)
    8adc:	d9400117 	ldw	r5,4(sp)
    8ae0:	2209c83a 	sub	r4,r4,r8
    8ae4:	2010917a 	slli	r8,r4,5
    8ae8:	d9000017 	ldw	r4,0(sp)
    8aec:	2909c83a 	sub	r4,r5,r4
    8af0:	4109883a 	add	r4,r8,r4
    8af4:	01000e0e 	bge	zero,r4,8b30 <__ratio+0x98>
    8af8:	2008953a 	slli	r4,r4,20
    8afc:	2421883a 	add	r16,r4,r16
    8b00:	100d883a 	mov	r6,r2
    8b04:	180f883a 	mov	r7,r3
    8b08:	9009883a 	mov	r4,r18
    8b0c:	800b883a 	mov	r5,r16
    8b10:	000c77c0 	call	c77c <__divdf3>
    8b14:	dfc00617 	ldw	ra,24(sp)
    8b18:	dcc00517 	ldw	r19,20(sp)
    8b1c:	dc800417 	ldw	r18,16(sp)
    8b20:	dc400317 	ldw	r17,12(sp)
    8b24:	dc000217 	ldw	r16,8(sp)
    8b28:	dec00704 	addi	sp,sp,28
    8b2c:	f800283a 	ret
    8b30:	2008953a 	slli	r4,r4,20
    8b34:	1907c83a 	sub	r3,r3,r4
    8b38:	003ff106 	br	8b00 <__alt_data_end+0xff008b00>

00008b3c <_mprec_log10>:
    8b3c:	defffe04 	addi	sp,sp,-8
    8b40:	dc000015 	stw	r16,0(sp)
    8b44:	dfc00115 	stw	ra,4(sp)
    8b48:	008005c4 	movi	r2,23
    8b4c:	2021883a 	mov	r16,r4
    8b50:	11000d0e 	bge	r2,r4,8b88 <_mprec_log10+0x4c>
    8b54:	0005883a 	mov	r2,zero
    8b58:	00cffc34 	movhi	r3,16368
    8b5c:	843fffc4 	addi	r16,r16,-1
    8b60:	000d883a 	mov	r6,zero
    8b64:	01d00934 	movhi	r7,16420
    8b68:	1009883a 	mov	r4,r2
    8b6c:	180b883a 	mov	r5,r3
    8b70:	000d2bc0 	call	d2bc <__muldf3>
    8b74:	803ff91e 	bne	r16,zero,8b5c <__alt_data_end+0xff008b5c>
    8b78:	dfc00117 	ldw	ra,4(sp)
    8b7c:	dc000017 	ldw	r16,0(sp)
    8b80:	dec00204 	addi	sp,sp,8
    8b84:	f800283a 	ret
    8b88:	202090fa 	slli	r16,r4,3
    8b8c:	00800074 	movhi	r2,1
    8b90:	10854b04 	addi	r2,r2,5420
    8b94:	1421883a 	add	r16,r2,r16
    8b98:	80800017 	ldw	r2,0(r16)
    8b9c:	80c00117 	ldw	r3,4(r16)
    8ba0:	dfc00117 	ldw	ra,4(sp)
    8ba4:	dc000017 	ldw	r16,0(sp)
    8ba8:	dec00204 	addi	sp,sp,8
    8bac:	f800283a 	ret

00008bb0 <__copybits>:
    8bb0:	297fffc4 	addi	r5,r5,-1
    8bb4:	280fd17a 	srai	r7,r5,5
    8bb8:	30c00417 	ldw	r3,16(r6)
    8bbc:	30800504 	addi	r2,r6,20
    8bc0:	39c00044 	addi	r7,r7,1
    8bc4:	18c7883a 	add	r3,r3,r3
    8bc8:	39cf883a 	add	r7,r7,r7
    8bcc:	18c7883a 	add	r3,r3,r3
    8bd0:	39cf883a 	add	r7,r7,r7
    8bd4:	10c7883a 	add	r3,r2,r3
    8bd8:	21cf883a 	add	r7,r4,r7
    8bdc:	10c00d2e 	bgeu	r2,r3,8c14 <__copybits+0x64>
    8be0:	200b883a 	mov	r5,r4
    8be4:	12000017 	ldw	r8,0(r2)
    8be8:	29400104 	addi	r5,r5,4
    8bec:	10800104 	addi	r2,r2,4
    8bf0:	2a3fff15 	stw	r8,-4(r5)
    8bf4:	10fffb36 	bltu	r2,r3,8be4 <__alt_data_end+0xff008be4>
    8bf8:	1985c83a 	sub	r2,r3,r6
    8bfc:	10bffac4 	addi	r2,r2,-21
    8c00:	1004d0ba 	srli	r2,r2,2
    8c04:	10800044 	addi	r2,r2,1
    8c08:	1085883a 	add	r2,r2,r2
    8c0c:	1085883a 	add	r2,r2,r2
    8c10:	2089883a 	add	r4,r4,r2
    8c14:	21c0032e 	bgeu	r4,r7,8c24 <__copybits+0x74>
    8c18:	20000015 	stw	zero,0(r4)
    8c1c:	21000104 	addi	r4,r4,4
    8c20:	21fffd36 	bltu	r4,r7,8c18 <__alt_data_end+0xff008c18>
    8c24:	f800283a 	ret

00008c28 <__any_on>:
    8c28:	20c00417 	ldw	r3,16(r4)
    8c2c:	2805d17a 	srai	r2,r5,5
    8c30:	21000504 	addi	r4,r4,20
    8c34:	18800d0e 	bge	r3,r2,8c6c <__any_on+0x44>
    8c38:	18c7883a 	add	r3,r3,r3
    8c3c:	18c7883a 	add	r3,r3,r3
    8c40:	20c7883a 	add	r3,r4,r3
    8c44:	20c0192e 	bgeu	r4,r3,8cac <__any_on+0x84>
    8c48:	18bfff17 	ldw	r2,-4(r3)
    8c4c:	18ffff04 	addi	r3,r3,-4
    8c50:	1000041e 	bne	r2,zero,8c64 <__any_on+0x3c>
    8c54:	20c0142e 	bgeu	r4,r3,8ca8 <__any_on+0x80>
    8c58:	18ffff04 	addi	r3,r3,-4
    8c5c:	19400017 	ldw	r5,0(r3)
    8c60:	283ffc26 	beq	r5,zero,8c54 <__alt_data_end+0xff008c54>
    8c64:	00800044 	movi	r2,1
    8c68:	f800283a 	ret
    8c6c:	10c00a0e 	bge	r2,r3,8c98 <__any_on+0x70>
    8c70:	1085883a 	add	r2,r2,r2
    8c74:	1085883a 	add	r2,r2,r2
    8c78:	294007cc 	andi	r5,r5,31
    8c7c:	2087883a 	add	r3,r4,r2
    8c80:	283ff026 	beq	r5,zero,8c44 <__alt_data_end+0xff008c44>
    8c84:	19800017 	ldw	r6,0(r3)
    8c88:	3144d83a 	srl	r2,r6,r5
    8c8c:	114a983a 	sll	r5,r2,r5
    8c90:	317ff41e 	bne	r6,r5,8c64 <__alt_data_end+0xff008c64>
    8c94:	003feb06 	br	8c44 <__alt_data_end+0xff008c44>
    8c98:	1085883a 	add	r2,r2,r2
    8c9c:	1085883a 	add	r2,r2,r2
    8ca0:	2087883a 	add	r3,r4,r2
    8ca4:	003fe706 	br	8c44 <__alt_data_end+0xff008c44>
    8ca8:	f800283a 	ret
    8cac:	0005883a 	mov	r2,zero
    8cb0:	f800283a 	ret

00008cb4 <_realloc_r>:
    8cb4:	defff604 	addi	sp,sp,-40
    8cb8:	dc800215 	stw	r18,8(sp)
    8cbc:	dfc00915 	stw	ra,36(sp)
    8cc0:	df000815 	stw	fp,32(sp)
    8cc4:	ddc00715 	stw	r23,28(sp)
    8cc8:	dd800615 	stw	r22,24(sp)
    8ccc:	dd400515 	stw	r21,20(sp)
    8cd0:	dd000415 	stw	r20,16(sp)
    8cd4:	dcc00315 	stw	r19,12(sp)
    8cd8:	dc400115 	stw	r17,4(sp)
    8cdc:	dc000015 	stw	r16,0(sp)
    8ce0:	3025883a 	mov	r18,r6
    8ce4:	2800b726 	beq	r5,zero,8fc4 <_realloc_r+0x310>
    8ce8:	282b883a 	mov	r21,r5
    8cec:	2029883a 	mov	r20,r4
    8cf0:	000eab40 	call	eab4 <__malloc_lock>
    8cf4:	a8bfff17 	ldw	r2,-4(r21)
    8cf8:	043fff04 	movi	r16,-4
    8cfc:	90c002c4 	addi	r3,r18,11
    8d00:	01000584 	movi	r4,22
    8d04:	acfffe04 	addi	r19,r21,-8
    8d08:	1420703a 	and	r16,r2,r16
    8d0c:	20c0332e 	bgeu	r4,r3,8ddc <_realloc_r+0x128>
    8d10:	047ffe04 	movi	r17,-8
    8d14:	1c62703a 	and	r17,r3,r17
    8d18:	8807883a 	mov	r3,r17
    8d1c:	88005816 	blt	r17,zero,8e80 <_realloc_r+0x1cc>
    8d20:	8c805736 	bltu	r17,r18,8e80 <_realloc_r+0x1cc>
    8d24:	80c0300e 	bge	r16,r3,8de8 <_realloc_r+0x134>
    8d28:	07000074 	movhi	fp,1
    8d2c:	e705d004 	addi	fp,fp,5952
    8d30:	e1c00217 	ldw	r7,8(fp)
    8d34:	9c09883a 	add	r4,r19,r16
    8d38:	22000117 	ldw	r8,4(r4)
    8d3c:	21c06326 	beq	r4,r7,8ecc <_realloc_r+0x218>
    8d40:	017fff84 	movi	r5,-2
    8d44:	414a703a 	and	r5,r8,r5
    8d48:	214b883a 	add	r5,r4,r5
    8d4c:	29800117 	ldw	r6,4(r5)
    8d50:	3180004c 	andi	r6,r6,1
    8d54:	30003f26 	beq	r6,zero,8e54 <_realloc_r+0x1a0>
    8d58:	1080004c 	andi	r2,r2,1
    8d5c:	10008326 	beq	r2,zero,8f6c <_realloc_r+0x2b8>
    8d60:	900b883a 	mov	r5,r18
    8d64:	a009883a 	mov	r4,r20
    8d68:	0001dcc0 	call	1dcc <_malloc_r>
    8d6c:	1025883a 	mov	r18,r2
    8d70:	10011e26 	beq	r2,zero,91ec <_realloc_r+0x538>
    8d74:	a93fff17 	ldw	r4,-4(r21)
    8d78:	10fffe04 	addi	r3,r2,-8
    8d7c:	00bfff84 	movi	r2,-2
    8d80:	2084703a 	and	r2,r4,r2
    8d84:	9885883a 	add	r2,r19,r2
    8d88:	1880ee26 	beq	r3,r2,9144 <_realloc_r+0x490>
    8d8c:	81bfff04 	addi	r6,r16,-4
    8d90:	00800904 	movi	r2,36
    8d94:	1180b836 	bltu	r2,r6,9078 <_realloc_r+0x3c4>
    8d98:	00c004c4 	movi	r3,19
    8d9c:	19809636 	bltu	r3,r6,8ff8 <_realloc_r+0x344>
    8da0:	9005883a 	mov	r2,r18
    8da4:	a807883a 	mov	r3,r21
    8da8:	19000017 	ldw	r4,0(r3)
    8dac:	11000015 	stw	r4,0(r2)
    8db0:	19000117 	ldw	r4,4(r3)
    8db4:	11000115 	stw	r4,4(r2)
    8db8:	18c00217 	ldw	r3,8(r3)
    8dbc:	10c00215 	stw	r3,8(r2)
    8dc0:	a80b883a 	mov	r5,r21
    8dc4:	a009883a 	mov	r4,r20
    8dc8:	0006c1c0 	call	6c1c <_free_r>
    8dcc:	a009883a 	mov	r4,r20
    8dd0:	000ead80 	call	ead8 <__malloc_unlock>
    8dd4:	9005883a 	mov	r2,r18
    8dd8:	00001206 	br	8e24 <_realloc_r+0x170>
    8ddc:	00c00404 	movi	r3,16
    8de0:	1823883a 	mov	r17,r3
    8de4:	003fce06 	br	8d20 <__alt_data_end+0xff008d20>
    8de8:	a825883a 	mov	r18,r21
    8dec:	8445c83a 	sub	r2,r16,r17
    8df0:	00c003c4 	movi	r3,15
    8df4:	18802636 	bltu	r3,r2,8e90 <_realloc_r+0x1dc>
    8df8:	99800117 	ldw	r6,4(r19)
    8dfc:	9c07883a 	add	r3,r19,r16
    8e00:	3180004c 	andi	r6,r6,1
    8e04:	3420b03a 	or	r16,r6,r16
    8e08:	9c000115 	stw	r16,4(r19)
    8e0c:	18800117 	ldw	r2,4(r3)
    8e10:	10800054 	ori	r2,r2,1
    8e14:	18800115 	stw	r2,4(r3)
    8e18:	a009883a 	mov	r4,r20
    8e1c:	000ead80 	call	ead8 <__malloc_unlock>
    8e20:	9005883a 	mov	r2,r18
    8e24:	dfc00917 	ldw	ra,36(sp)
    8e28:	df000817 	ldw	fp,32(sp)
    8e2c:	ddc00717 	ldw	r23,28(sp)
    8e30:	dd800617 	ldw	r22,24(sp)
    8e34:	dd400517 	ldw	r21,20(sp)
    8e38:	dd000417 	ldw	r20,16(sp)
    8e3c:	dcc00317 	ldw	r19,12(sp)
    8e40:	dc800217 	ldw	r18,8(sp)
    8e44:	dc400117 	ldw	r17,4(sp)
    8e48:	dc000017 	ldw	r16,0(sp)
    8e4c:	dec00a04 	addi	sp,sp,40
    8e50:	f800283a 	ret
    8e54:	017fff04 	movi	r5,-4
    8e58:	414a703a 	and	r5,r8,r5
    8e5c:	814d883a 	add	r6,r16,r5
    8e60:	30c01f16 	blt	r6,r3,8ee0 <_realloc_r+0x22c>
    8e64:	20800317 	ldw	r2,12(r4)
    8e68:	20c00217 	ldw	r3,8(r4)
    8e6c:	a825883a 	mov	r18,r21
    8e70:	3021883a 	mov	r16,r6
    8e74:	18800315 	stw	r2,12(r3)
    8e78:	10c00215 	stw	r3,8(r2)
    8e7c:	003fdb06 	br	8dec <__alt_data_end+0xff008dec>
    8e80:	00800304 	movi	r2,12
    8e84:	a0800015 	stw	r2,0(r20)
    8e88:	0005883a 	mov	r2,zero
    8e8c:	003fe506 	br	8e24 <__alt_data_end+0xff008e24>
    8e90:	98c00117 	ldw	r3,4(r19)
    8e94:	9c4b883a 	add	r5,r19,r17
    8e98:	11000054 	ori	r4,r2,1
    8e9c:	18c0004c 	andi	r3,r3,1
    8ea0:	1c62b03a 	or	r17,r3,r17
    8ea4:	9c400115 	stw	r17,4(r19)
    8ea8:	29000115 	stw	r4,4(r5)
    8eac:	2885883a 	add	r2,r5,r2
    8eb0:	10c00117 	ldw	r3,4(r2)
    8eb4:	29400204 	addi	r5,r5,8
    8eb8:	a009883a 	mov	r4,r20
    8ebc:	18c00054 	ori	r3,r3,1
    8ec0:	10c00115 	stw	r3,4(r2)
    8ec4:	0006c1c0 	call	6c1c <_free_r>
    8ec8:	003fd306 	br	8e18 <__alt_data_end+0xff008e18>
    8ecc:	017fff04 	movi	r5,-4
    8ed0:	414a703a 	and	r5,r8,r5
    8ed4:	89800404 	addi	r6,r17,16
    8ed8:	8151883a 	add	r8,r16,r5
    8edc:	4180590e 	bge	r8,r6,9044 <_realloc_r+0x390>
    8ee0:	1080004c 	andi	r2,r2,1
    8ee4:	103f9e1e 	bne	r2,zero,8d60 <__alt_data_end+0xff008d60>
    8ee8:	adbffe17 	ldw	r22,-8(r21)
    8eec:	00bfff04 	movi	r2,-4
    8ef0:	9dadc83a 	sub	r22,r19,r22
    8ef4:	b1800117 	ldw	r6,4(r22)
    8ef8:	3084703a 	and	r2,r6,r2
    8efc:	20002026 	beq	r4,zero,8f80 <_realloc_r+0x2cc>
    8f00:	80af883a 	add	r23,r16,r2
    8f04:	b96f883a 	add	r23,r23,r5
    8f08:	21c05f26 	beq	r4,r7,9088 <_realloc_r+0x3d4>
    8f0c:	b8c01c16 	blt	r23,r3,8f80 <_realloc_r+0x2cc>
    8f10:	20800317 	ldw	r2,12(r4)
    8f14:	20c00217 	ldw	r3,8(r4)
    8f18:	81bfff04 	addi	r6,r16,-4
    8f1c:	01000904 	movi	r4,36
    8f20:	18800315 	stw	r2,12(r3)
    8f24:	10c00215 	stw	r3,8(r2)
    8f28:	b0c00217 	ldw	r3,8(r22)
    8f2c:	b0800317 	ldw	r2,12(r22)
    8f30:	b4800204 	addi	r18,r22,8
    8f34:	18800315 	stw	r2,12(r3)
    8f38:	10c00215 	stw	r3,8(r2)
    8f3c:	21801b36 	bltu	r4,r6,8fac <_realloc_r+0x2f8>
    8f40:	008004c4 	movi	r2,19
    8f44:	1180352e 	bgeu	r2,r6,901c <_realloc_r+0x368>
    8f48:	a8800017 	ldw	r2,0(r21)
    8f4c:	b0800215 	stw	r2,8(r22)
    8f50:	a8800117 	ldw	r2,4(r21)
    8f54:	b0800315 	stw	r2,12(r22)
    8f58:	008006c4 	movi	r2,27
    8f5c:	11807f36 	bltu	r2,r6,915c <_realloc_r+0x4a8>
    8f60:	b0800404 	addi	r2,r22,16
    8f64:	ad400204 	addi	r21,r21,8
    8f68:	00002d06 	br	9020 <_realloc_r+0x36c>
    8f6c:	adbffe17 	ldw	r22,-8(r21)
    8f70:	00bfff04 	movi	r2,-4
    8f74:	9dadc83a 	sub	r22,r19,r22
    8f78:	b1000117 	ldw	r4,4(r22)
    8f7c:	2084703a 	and	r2,r4,r2
    8f80:	b03f7726 	beq	r22,zero,8d60 <__alt_data_end+0xff008d60>
    8f84:	80af883a 	add	r23,r16,r2
    8f88:	b8ff7516 	blt	r23,r3,8d60 <__alt_data_end+0xff008d60>
    8f8c:	b0800317 	ldw	r2,12(r22)
    8f90:	b0c00217 	ldw	r3,8(r22)
    8f94:	81bfff04 	addi	r6,r16,-4
    8f98:	01000904 	movi	r4,36
    8f9c:	18800315 	stw	r2,12(r3)
    8fa0:	10c00215 	stw	r3,8(r2)
    8fa4:	b4800204 	addi	r18,r22,8
    8fa8:	21bfe52e 	bgeu	r4,r6,8f40 <__alt_data_end+0xff008f40>
    8fac:	a80b883a 	mov	r5,r21
    8fb0:	9009883a 	mov	r4,r18
    8fb4:	0007a340 	call	7a34 <memmove>
    8fb8:	b821883a 	mov	r16,r23
    8fbc:	b027883a 	mov	r19,r22
    8fc0:	003f8a06 	br	8dec <__alt_data_end+0xff008dec>
    8fc4:	300b883a 	mov	r5,r6
    8fc8:	dfc00917 	ldw	ra,36(sp)
    8fcc:	df000817 	ldw	fp,32(sp)
    8fd0:	ddc00717 	ldw	r23,28(sp)
    8fd4:	dd800617 	ldw	r22,24(sp)
    8fd8:	dd400517 	ldw	r21,20(sp)
    8fdc:	dd000417 	ldw	r20,16(sp)
    8fe0:	dcc00317 	ldw	r19,12(sp)
    8fe4:	dc800217 	ldw	r18,8(sp)
    8fe8:	dc400117 	ldw	r17,4(sp)
    8fec:	dc000017 	ldw	r16,0(sp)
    8ff0:	dec00a04 	addi	sp,sp,40
    8ff4:	0001dcc1 	jmpi	1dcc <_malloc_r>
    8ff8:	a8c00017 	ldw	r3,0(r21)
    8ffc:	90c00015 	stw	r3,0(r18)
    9000:	a8c00117 	ldw	r3,4(r21)
    9004:	90c00115 	stw	r3,4(r18)
    9008:	00c006c4 	movi	r3,27
    900c:	19804536 	bltu	r3,r6,9124 <_realloc_r+0x470>
    9010:	90800204 	addi	r2,r18,8
    9014:	a8c00204 	addi	r3,r21,8
    9018:	003f6306 	br	8da8 <__alt_data_end+0xff008da8>
    901c:	9005883a 	mov	r2,r18
    9020:	a8c00017 	ldw	r3,0(r21)
    9024:	b821883a 	mov	r16,r23
    9028:	b027883a 	mov	r19,r22
    902c:	10c00015 	stw	r3,0(r2)
    9030:	a8c00117 	ldw	r3,4(r21)
    9034:	10c00115 	stw	r3,4(r2)
    9038:	a8c00217 	ldw	r3,8(r21)
    903c:	10c00215 	stw	r3,8(r2)
    9040:	003f6a06 	br	8dec <__alt_data_end+0xff008dec>
    9044:	9c67883a 	add	r19,r19,r17
    9048:	4445c83a 	sub	r2,r8,r17
    904c:	e4c00215 	stw	r19,8(fp)
    9050:	10800054 	ori	r2,r2,1
    9054:	98800115 	stw	r2,4(r19)
    9058:	a8bfff17 	ldw	r2,-4(r21)
    905c:	a009883a 	mov	r4,r20
    9060:	1080004c 	andi	r2,r2,1
    9064:	1462b03a 	or	r17,r2,r17
    9068:	ac7fff15 	stw	r17,-4(r21)
    906c:	000ead80 	call	ead8 <__malloc_unlock>
    9070:	a805883a 	mov	r2,r21
    9074:	003f6b06 	br	8e24 <__alt_data_end+0xff008e24>
    9078:	a80b883a 	mov	r5,r21
    907c:	9009883a 	mov	r4,r18
    9080:	0007a340 	call	7a34 <memmove>
    9084:	003f4e06 	br	8dc0 <__alt_data_end+0xff008dc0>
    9088:	89000404 	addi	r4,r17,16
    908c:	b93fbc16 	blt	r23,r4,8f80 <__alt_data_end+0xff008f80>
    9090:	b0800317 	ldw	r2,12(r22)
    9094:	b0c00217 	ldw	r3,8(r22)
    9098:	81bfff04 	addi	r6,r16,-4
    909c:	01000904 	movi	r4,36
    90a0:	18800315 	stw	r2,12(r3)
    90a4:	10c00215 	stw	r3,8(r2)
    90a8:	b4800204 	addi	r18,r22,8
    90ac:	21804336 	bltu	r4,r6,91bc <_realloc_r+0x508>
    90b0:	008004c4 	movi	r2,19
    90b4:	11803f2e 	bgeu	r2,r6,91b4 <_realloc_r+0x500>
    90b8:	a8800017 	ldw	r2,0(r21)
    90bc:	b0800215 	stw	r2,8(r22)
    90c0:	a8800117 	ldw	r2,4(r21)
    90c4:	b0800315 	stw	r2,12(r22)
    90c8:	008006c4 	movi	r2,27
    90cc:	11803f36 	bltu	r2,r6,91cc <_realloc_r+0x518>
    90d0:	b0800404 	addi	r2,r22,16
    90d4:	ad400204 	addi	r21,r21,8
    90d8:	a8c00017 	ldw	r3,0(r21)
    90dc:	10c00015 	stw	r3,0(r2)
    90e0:	a8c00117 	ldw	r3,4(r21)
    90e4:	10c00115 	stw	r3,4(r2)
    90e8:	a8c00217 	ldw	r3,8(r21)
    90ec:	10c00215 	stw	r3,8(r2)
    90f0:	b447883a 	add	r3,r22,r17
    90f4:	bc45c83a 	sub	r2,r23,r17
    90f8:	e0c00215 	stw	r3,8(fp)
    90fc:	10800054 	ori	r2,r2,1
    9100:	18800115 	stw	r2,4(r3)
    9104:	b0800117 	ldw	r2,4(r22)
    9108:	a009883a 	mov	r4,r20
    910c:	1080004c 	andi	r2,r2,1
    9110:	1462b03a 	or	r17,r2,r17
    9114:	b4400115 	stw	r17,4(r22)
    9118:	000ead80 	call	ead8 <__malloc_unlock>
    911c:	9005883a 	mov	r2,r18
    9120:	003f4006 	br	8e24 <__alt_data_end+0xff008e24>
    9124:	a8c00217 	ldw	r3,8(r21)
    9128:	90c00215 	stw	r3,8(r18)
    912c:	a8c00317 	ldw	r3,12(r21)
    9130:	90c00315 	stw	r3,12(r18)
    9134:	30801126 	beq	r6,r2,917c <_realloc_r+0x4c8>
    9138:	90800404 	addi	r2,r18,16
    913c:	a8c00404 	addi	r3,r21,16
    9140:	003f1906 	br	8da8 <__alt_data_end+0xff008da8>
    9144:	90ffff17 	ldw	r3,-4(r18)
    9148:	00bfff04 	movi	r2,-4
    914c:	a825883a 	mov	r18,r21
    9150:	1884703a 	and	r2,r3,r2
    9154:	80a1883a 	add	r16,r16,r2
    9158:	003f2406 	br	8dec <__alt_data_end+0xff008dec>
    915c:	a8800217 	ldw	r2,8(r21)
    9160:	b0800415 	stw	r2,16(r22)
    9164:	a8800317 	ldw	r2,12(r21)
    9168:	b0800515 	stw	r2,20(r22)
    916c:	31000a26 	beq	r6,r4,9198 <_realloc_r+0x4e4>
    9170:	b0800604 	addi	r2,r22,24
    9174:	ad400404 	addi	r21,r21,16
    9178:	003fa906 	br	9020 <__alt_data_end+0xff009020>
    917c:	a9000417 	ldw	r4,16(r21)
    9180:	90800604 	addi	r2,r18,24
    9184:	a8c00604 	addi	r3,r21,24
    9188:	91000415 	stw	r4,16(r18)
    918c:	a9000517 	ldw	r4,20(r21)
    9190:	91000515 	stw	r4,20(r18)
    9194:	003f0406 	br	8da8 <__alt_data_end+0xff008da8>
    9198:	a8c00417 	ldw	r3,16(r21)
    919c:	ad400604 	addi	r21,r21,24
    91a0:	b0800804 	addi	r2,r22,32
    91a4:	b0c00615 	stw	r3,24(r22)
    91a8:	a8ffff17 	ldw	r3,-4(r21)
    91ac:	b0c00715 	stw	r3,28(r22)
    91b0:	003f9b06 	br	9020 <__alt_data_end+0xff009020>
    91b4:	9005883a 	mov	r2,r18
    91b8:	003fc706 	br	90d8 <__alt_data_end+0xff0090d8>
    91bc:	a80b883a 	mov	r5,r21
    91c0:	9009883a 	mov	r4,r18
    91c4:	0007a340 	call	7a34 <memmove>
    91c8:	003fc906 	br	90f0 <__alt_data_end+0xff0090f0>
    91cc:	a8800217 	ldw	r2,8(r21)
    91d0:	b0800415 	stw	r2,16(r22)
    91d4:	a8800317 	ldw	r2,12(r21)
    91d8:	b0800515 	stw	r2,20(r22)
    91dc:	31000726 	beq	r6,r4,91fc <_realloc_r+0x548>
    91e0:	b0800604 	addi	r2,r22,24
    91e4:	ad400404 	addi	r21,r21,16
    91e8:	003fbb06 	br	90d8 <__alt_data_end+0xff0090d8>
    91ec:	a009883a 	mov	r4,r20
    91f0:	000ead80 	call	ead8 <__malloc_unlock>
    91f4:	0005883a 	mov	r2,zero
    91f8:	003f0a06 	br	8e24 <__alt_data_end+0xff008e24>
    91fc:	a8c00417 	ldw	r3,16(r21)
    9200:	ad400604 	addi	r21,r21,24
    9204:	b0800804 	addi	r2,r22,32
    9208:	b0c00615 	stw	r3,24(r22)
    920c:	a8ffff17 	ldw	r3,-4(r21)
    9210:	b0c00715 	stw	r3,28(r22)
    9214:	003fb006 	br	90d8 <__alt_data_end+0xff0090d8>

00009218 <__fpclassifyd>:
    9218:	00a00034 	movhi	r2,32768
    921c:	10bfffc4 	addi	r2,r2,-1
    9220:	2884703a 	and	r2,r5,r2
    9224:	10000726 	beq	r2,zero,9244 <__fpclassifyd+0x2c>
    9228:	00fffc34 	movhi	r3,65520
    922c:	019ff834 	movhi	r6,32736
    9230:	28c7883a 	add	r3,r5,r3
    9234:	31bfffc4 	addi	r6,r6,-1
    9238:	30c00536 	bltu	r6,r3,9250 <__fpclassifyd+0x38>
    923c:	00800104 	movi	r2,4
    9240:	f800283a 	ret
    9244:	2000021e 	bne	r4,zero,9250 <__fpclassifyd+0x38>
    9248:	00800084 	movi	r2,2
    924c:	f800283a 	ret
    9250:	00dffc34 	movhi	r3,32752
    9254:	019ff834 	movhi	r6,32736
    9258:	28cb883a 	add	r5,r5,r3
    925c:	31bfffc4 	addi	r6,r6,-1
    9260:	317ff62e 	bgeu	r6,r5,923c <__alt_data_end+0xff00923c>
    9264:	01400434 	movhi	r5,16
    9268:	297fffc4 	addi	r5,r5,-1
    926c:	28800236 	bltu	r5,r2,9278 <__fpclassifyd+0x60>
    9270:	008000c4 	movi	r2,3
    9274:	f800283a 	ret
    9278:	10c00226 	beq	r2,r3,9284 <__fpclassifyd+0x6c>
    927c:	0005883a 	mov	r2,zero
    9280:	f800283a 	ret
    9284:	2005003a 	cmpeq	r2,r4,zero
    9288:	f800283a 	ret

0000928c <__sread>:
    928c:	defffe04 	addi	sp,sp,-8
    9290:	dc000015 	stw	r16,0(sp)
    9294:	2821883a 	mov	r16,r5
    9298:	2940038f 	ldh	r5,14(r5)
    929c:	dfc00115 	stw	ra,4(sp)
    92a0:	000b0800 	call	b080 <_read_r>
    92a4:	10000716 	blt	r2,zero,92c4 <__sread+0x38>
    92a8:	80c01417 	ldw	r3,80(r16)
    92ac:	1887883a 	add	r3,r3,r2
    92b0:	80c01415 	stw	r3,80(r16)
    92b4:	dfc00117 	ldw	ra,4(sp)
    92b8:	dc000017 	ldw	r16,0(sp)
    92bc:	dec00204 	addi	sp,sp,8
    92c0:	f800283a 	ret
    92c4:	80c0030b 	ldhu	r3,12(r16)
    92c8:	18fbffcc 	andi	r3,r3,61439
    92cc:	80c0030d 	sth	r3,12(r16)
    92d0:	dfc00117 	ldw	ra,4(sp)
    92d4:	dc000017 	ldw	r16,0(sp)
    92d8:	dec00204 	addi	sp,sp,8
    92dc:	f800283a 	ret

000092e0 <__seofread>:
    92e0:	0005883a 	mov	r2,zero
    92e4:	f800283a 	ret

000092e8 <__swrite>:
    92e8:	2880030b 	ldhu	r2,12(r5)
    92ec:	defffb04 	addi	sp,sp,-20
    92f0:	dcc00315 	stw	r19,12(sp)
    92f4:	dc800215 	stw	r18,8(sp)
    92f8:	dc400115 	stw	r17,4(sp)
    92fc:	dc000015 	stw	r16,0(sp)
    9300:	dfc00415 	stw	ra,16(sp)
    9304:	10c0400c 	andi	r3,r2,256
    9308:	2821883a 	mov	r16,r5
    930c:	2023883a 	mov	r17,r4
    9310:	3025883a 	mov	r18,r6
    9314:	3827883a 	mov	r19,r7
    9318:	18000526 	beq	r3,zero,9330 <__swrite+0x48>
    931c:	2940038f 	ldh	r5,14(r5)
    9320:	01c00084 	movi	r7,2
    9324:	000d883a 	mov	r6,zero
    9328:	000b0200 	call	b020 <_lseek_r>
    932c:	8080030b 	ldhu	r2,12(r16)
    9330:	8140038f 	ldh	r5,14(r16)
    9334:	10bbffcc 	andi	r2,r2,61439
    9338:	980f883a 	mov	r7,r19
    933c:	900d883a 	mov	r6,r18
    9340:	8809883a 	mov	r4,r17
    9344:	8080030d 	sth	r2,12(r16)
    9348:	dfc00417 	ldw	ra,16(sp)
    934c:	dcc00317 	ldw	r19,12(sp)
    9350:	dc800217 	ldw	r18,8(sp)
    9354:	dc400117 	ldw	r17,4(sp)
    9358:	dc000017 	ldw	r16,0(sp)
    935c:	dec00504 	addi	sp,sp,20
    9360:	000aaec1 	jmpi	aaec <_write_r>

00009364 <__sseek>:
    9364:	defffe04 	addi	sp,sp,-8
    9368:	dc000015 	stw	r16,0(sp)
    936c:	2821883a 	mov	r16,r5
    9370:	2940038f 	ldh	r5,14(r5)
    9374:	dfc00115 	stw	ra,4(sp)
    9378:	000b0200 	call	b020 <_lseek_r>
    937c:	00ffffc4 	movi	r3,-1
    9380:	10c00826 	beq	r2,r3,93a4 <__sseek+0x40>
    9384:	80c0030b 	ldhu	r3,12(r16)
    9388:	80801415 	stw	r2,80(r16)
    938c:	18c40014 	ori	r3,r3,4096
    9390:	80c0030d 	sth	r3,12(r16)
    9394:	dfc00117 	ldw	ra,4(sp)
    9398:	dc000017 	ldw	r16,0(sp)
    939c:	dec00204 	addi	sp,sp,8
    93a0:	f800283a 	ret
    93a4:	80c0030b 	ldhu	r3,12(r16)
    93a8:	18fbffcc 	andi	r3,r3,61439
    93ac:	80c0030d 	sth	r3,12(r16)
    93b0:	dfc00117 	ldw	ra,4(sp)
    93b4:	dc000017 	ldw	r16,0(sp)
    93b8:	dec00204 	addi	sp,sp,8
    93bc:	f800283a 	ret

000093c0 <__sclose>:
    93c0:	2940038f 	ldh	r5,14(r5)
    93c4:	000ab4c1 	jmpi	ab4c <_close_r>

000093c8 <strcmp>:
    93c8:	2144b03a 	or	r2,r4,r5
    93cc:	108000cc 	andi	r2,r2,3
    93d0:	1000171e 	bne	r2,zero,9430 <strcmp+0x68>
    93d4:	20800017 	ldw	r2,0(r4)
    93d8:	28c00017 	ldw	r3,0(r5)
    93dc:	10c0141e 	bne	r2,r3,9430 <strcmp+0x68>
    93e0:	027fbff4 	movhi	r9,65279
    93e4:	4a7fbfc4 	addi	r9,r9,-257
    93e8:	0086303a 	nor	r3,zero,r2
    93ec:	02202074 	movhi	r8,32897
    93f0:	1245883a 	add	r2,r2,r9
    93f4:	42202004 	addi	r8,r8,-32640
    93f8:	10c4703a 	and	r2,r2,r3
    93fc:	1204703a 	and	r2,r2,r8
    9400:	10000226 	beq	r2,zero,940c <strcmp+0x44>
    9404:	00002306 	br	9494 <strcmp+0xcc>
    9408:	1000221e 	bne	r2,zero,9494 <strcmp+0xcc>
    940c:	21000104 	addi	r4,r4,4
    9410:	20c00017 	ldw	r3,0(r4)
    9414:	29400104 	addi	r5,r5,4
    9418:	29800017 	ldw	r6,0(r5)
    941c:	1a4f883a 	add	r7,r3,r9
    9420:	00c4303a 	nor	r2,zero,r3
    9424:	3884703a 	and	r2,r7,r2
    9428:	1204703a 	and	r2,r2,r8
    942c:	19bff626 	beq	r3,r6,9408 <__alt_data_end+0xff009408>
    9430:	20800003 	ldbu	r2,0(r4)
    9434:	10c03fcc 	andi	r3,r2,255
    9438:	18c0201c 	xori	r3,r3,128
    943c:	18ffe004 	addi	r3,r3,-128
    9440:	18000c26 	beq	r3,zero,9474 <strcmp+0xac>
    9444:	29800007 	ldb	r6,0(r5)
    9448:	19800326 	beq	r3,r6,9458 <strcmp+0x90>
    944c:	00001306 	br	949c <strcmp+0xd4>
    9450:	29800007 	ldb	r6,0(r5)
    9454:	11800b1e 	bne	r2,r6,9484 <strcmp+0xbc>
    9458:	21000044 	addi	r4,r4,1
    945c:	20c00003 	ldbu	r3,0(r4)
    9460:	29400044 	addi	r5,r5,1
    9464:	18803fcc 	andi	r2,r3,255
    9468:	1080201c 	xori	r2,r2,128
    946c:	10bfe004 	addi	r2,r2,-128
    9470:	103ff71e 	bne	r2,zero,9450 <__alt_data_end+0xff009450>
    9474:	0007883a 	mov	r3,zero
    9478:	28800003 	ldbu	r2,0(r5)
    947c:	1885c83a 	sub	r2,r3,r2
    9480:	f800283a 	ret
    9484:	28800003 	ldbu	r2,0(r5)
    9488:	18c03fcc 	andi	r3,r3,255
    948c:	1885c83a 	sub	r2,r3,r2
    9490:	f800283a 	ret
    9494:	0005883a 	mov	r2,zero
    9498:	f800283a 	ret
    949c:	10c03fcc 	andi	r3,r2,255
    94a0:	003ff506 	br	9478 <__alt_data_end+0xff009478>

000094a4 <__sprint_r.part.0>:
    94a4:	28801917 	ldw	r2,100(r5)
    94a8:	defff604 	addi	sp,sp,-40
    94ac:	dd400515 	stw	r21,20(sp)
    94b0:	dfc00915 	stw	ra,36(sp)
    94b4:	df000815 	stw	fp,32(sp)
    94b8:	ddc00715 	stw	r23,28(sp)
    94bc:	dd800615 	stw	r22,24(sp)
    94c0:	dd000415 	stw	r20,16(sp)
    94c4:	dcc00315 	stw	r19,12(sp)
    94c8:	dc800215 	stw	r18,8(sp)
    94cc:	dc400115 	stw	r17,4(sp)
    94d0:	dc000015 	stw	r16,0(sp)
    94d4:	1088000c 	andi	r2,r2,8192
    94d8:	302b883a 	mov	r21,r6
    94dc:	10002e26 	beq	r2,zero,9598 <__sprint_r.part.0+0xf4>
    94e0:	30800217 	ldw	r2,8(r6)
    94e4:	35800017 	ldw	r22,0(r6)
    94e8:	10002926 	beq	r2,zero,9590 <__sprint_r.part.0+0xec>
    94ec:	2827883a 	mov	r19,r5
    94f0:	2029883a 	mov	r20,r4
    94f4:	b5c00104 	addi	r23,r22,4
    94f8:	04bfffc4 	movi	r18,-1
    94fc:	bc400017 	ldw	r17,0(r23)
    9500:	b4000017 	ldw	r16,0(r22)
    9504:	0039883a 	mov	fp,zero
    9508:	8822d0ba 	srli	r17,r17,2
    950c:	8800031e 	bne	r17,zero,951c <__sprint_r.part.0+0x78>
    9510:	00001806 	br	9574 <__sprint_r.part.0+0xd0>
    9514:	84000104 	addi	r16,r16,4
    9518:	8f001526 	beq	r17,fp,9570 <__sprint_r.part.0+0xcc>
    951c:	81400017 	ldw	r5,0(r16)
    9520:	980d883a 	mov	r6,r19
    9524:	a009883a 	mov	r4,r20
    9528:	000aecc0 	call	aecc <_fputwc_r>
    952c:	e7000044 	addi	fp,fp,1
    9530:	14bff81e 	bne	r2,r18,9514 <__alt_data_end+0xff009514>
    9534:	9005883a 	mov	r2,r18
    9538:	a8000215 	stw	zero,8(r21)
    953c:	a8000115 	stw	zero,4(r21)
    9540:	dfc00917 	ldw	ra,36(sp)
    9544:	df000817 	ldw	fp,32(sp)
    9548:	ddc00717 	ldw	r23,28(sp)
    954c:	dd800617 	ldw	r22,24(sp)
    9550:	dd400517 	ldw	r21,20(sp)
    9554:	dd000417 	ldw	r20,16(sp)
    9558:	dcc00317 	ldw	r19,12(sp)
    955c:	dc800217 	ldw	r18,8(sp)
    9560:	dc400117 	ldw	r17,4(sp)
    9564:	dc000017 	ldw	r16,0(sp)
    9568:	dec00a04 	addi	sp,sp,40
    956c:	f800283a 	ret
    9570:	a8800217 	ldw	r2,8(r21)
    9574:	8c63883a 	add	r17,r17,r17
    9578:	8c63883a 	add	r17,r17,r17
    957c:	1445c83a 	sub	r2,r2,r17
    9580:	a8800215 	stw	r2,8(r21)
    9584:	b5800204 	addi	r22,r22,8
    9588:	bdc00204 	addi	r23,r23,8
    958c:	103fdb1e 	bne	r2,zero,94fc <__alt_data_end+0xff0094fc>
    9590:	0005883a 	mov	r2,zero
    9594:	003fe806 	br	9538 <__alt_data_end+0xff009538>
    9598:	0006f2c0 	call	6f2c <__sfvwrite_r>
    959c:	003fe606 	br	9538 <__alt_data_end+0xff009538>

000095a0 <__sprint_r>:
    95a0:	30c00217 	ldw	r3,8(r6)
    95a4:	18000126 	beq	r3,zero,95ac <__sprint_r+0xc>
    95a8:	00094a41 	jmpi	94a4 <__sprint_r.part.0>
    95ac:	30000115 	stw	zero,4(r6)
    95b0:	0005883a 	mov	r2,zero
    95b4:	f800283a 	ret

000095b8 <___vfiprintf_internal_r>:
    95b8:	deffc904 	addi	sp,sp,-220
    95bc:	df003515 	stw	fp,212(sp)
    95c0:	dd003115 	stw	r20,196(sp)
    95c4:	dfc03615 	stw	ra,216(sp)
    95c8:	ddc03415 	stw	r23,208(sp)
    95cc:	dd803315 	stw	r22,204(sp)
    95d0:	dd403215 	stw	r21,200(sp)
    95d4:	dcc03015 	stw	r19,192(sp)
    95d8:	dc802f15 	stw	r18,188(sp)
    95dc:	dc402e15 	stw	r17,184(sp)
    95e0:	dc002d15 	stw	r16,180(sp)
    95e4:	d9002015 	stw	r4,128(sp)
    95e8:	d9c02215 	stw	r7,136(sp)
    95ec:	2829883a 	mov	r20,r5
    95f0:	3039883a 	mov	fp,r6
    95f4:	20000226 	beq	r4,zero,9600 <___vfiprintf_internal_r+0x48>
    95f8:	20800e17 	ldw	r2,56(r4)
    95fc:	1000cf26 	beq	r2,zero,993c <___vfiprintf_internal_r+0x384>
    9600:	a080030b 	ldhu	r2,12(r20)
    9604:	10c8000c 	andi	r3,r2,8192
    9608:	1800061e 	bne	r3,zero,9624 <___vfiprintf_internal_r+0x6c>
    960c:	a1001917 	ldw	r4,100(r20)
    9610:	00f7ffc4 	movi	r3,-8193
    9614:	10880014 	ori	r2,r2,8192
    9618:	20c6703a 	and	r3,r4,r3
    961c:	a080030d 	sth	r2,12(r20)
    9620:	a0c01915 	stw	r3,100(r20)
    9624:	10c0020c 	andi	r3,r2,8
    9628:	1800a926 	beq	r3,zero,98d0 <___vfiprintf_internal_r+0x318>
    962c:	a0c00417 	ldw	r3,16(r20)
    9630:	1800a726 	beq	r3,zero,98d0 <___vfiprintf_internal_r+0x318>
    9634:	1080068c 	andi	r2,r2,26
    9638:	00c00284 	movi	r3,10
    963c:	10c0ac26 	beq	r2,r3,98f0 <___vfiprintf_internal_r+0x338>
    9640:	da801a04 	addi	r10,sp,104
    9644:	da801e15 	stw	r10,120(sp)
    9648:	d8801e17 	ldw	r2,120(sp)
    964c:	da8019c4 	addi	r10,sp,103
    9650:	05800074 	movhi	r22,1
    9654:	05c00074 	movhi	r23,1
    9658:	da801f15 	stw	r10,124(sp)
    965c:	1295c83a 	sub	r10,r2,r10
    9660:	b5858104 	addi	r22,r22,5636
    9664:	bdc57d04 	addi	r23,r23,5620
    9668:	dec01a15 	stw	sp,104(sp)
    966c:	d8001c15 	stw	zero,112(sp)
    9670:	d8001b15 	stw	zero,108(sp)
    9674:	d8002615 	stw	zero,152(sp)
    9678:	d8002315 	stw	zero,140(sp)
    967c:	da802715 	stw	r10,156(sp)
    9680:	d811883a 	mov	r8,sp
    9684:	dd002115 	stw	r20,132(sp)
    9688:	e021883a 	mov	r16,fp
    968c:	80800007 	ldb	r2,0(r16)
    9690:	1003ea26 	beq	r2,zero,a63c <___vfiprintf_internal_r+0x1084>
    9694:	00c00944 	movi	r3,37
    9698:	8025883a 	mov	r18,r16
    969c:	10c0021e 	bne	r2,r3,96a8 <___vfiprintf_internal_r+0xf0>
    96a0:	00001606 	br	96fc <___vfiprintf_internal_r+0x144>
    96a4:	10c00326 	beq	r2,r3,96b4 <___vfiprintf_internal_r+0xfc>
    96a8:	94800044 	addi	r18,r18,1
    96ac:	90800007 	ldb	r2,0(r18)
    96b0:	103ffc1e 	bne	r2,zero,96a4 <__alt_data_end+0xff0096a4>
    96b4:	9423c83a 	sub	r17,r18,r16
    96b8:	88001026 	beq	r17,zero,96fc <___vfiprintf_internal_r+0x144>
    96bc:	d8c01c17 	ldw	r3,112(sp)
    96c0:	d8801b17 	ldw	r2,108(sp)
    96c4:	44000015 	stw	r16,0(r8)
    96c8:	88c7883a 	add	r3,r17,r3
    96cc:	10800044 	addi	r2,r2,1
    96d0:	44400115 	stw	r17,4(r8)
    96d4:	d8c01c15 	stw	r3,112(sp)
    96d8:	d8801b15 	stw	r2,108(sp)
    96dc:	010001c4 	movi	r4,7
    96e0:	2080760e 	bge	r4,r2,98bc <___vfiprintf_internal_r+0x304>
    96e4:	1803821e 	bne	r3,zero,a4f0 <___vfiprintf_internal_r+0xf38>
    96e8:	da802317 	ldw	r10,140(sp)
    96ec:	d8001b15 	stw	zero,108(sp)
    96f0:	d811883a 	mov	r8,sp
    96f4:	5455883a 	add	r10,r10,r17
    96f8:	da802315 	stw	r10,140(sp)
    96fc:	90800007 	ldb	r2,0(r18)
    9700:	10044626 	beq	r2,zero,a81c <___vfiprintf_internal_r+0x1264>
    9704:	90c00047 	ldb	r3,1(r18)
    9708:	94000044 	addi	r16,r18,1
    970c:	d8001d85 	stb	zero,118(sp)
    9710:	0009883a 	mov	r4,zero
    9714:	000f883a 	mov	r7,zero
    9718:	027fffc4 	movi	r9,-1
    971c:	0023883a 	mov	r17,zero
    9720:	0029883a 	mov	r20,zero
    9724:	01401604 	movi	r5,88
    9728:	01800244 	movi	r6,9
    972c:	03400a84 	movi	r13,42
    9730:	03001b04 	movi	r12,108
    9734:	84000044 	addi	r16,r16,1
    9738:	18bff804 	addi	r2,r3,-32
    973c:	28827336 	bltu	r5,r2,a10c <___vfiprintf_internal_r+0xb54>
    9740:	100490ba 	slli	r2,r2,2
    9744:	02800074 	movhi	r10,1
    9748:	52a5d604 	addi	r10,r10,-26792
    974c:	1285883a 	add	r2,r2,r10
    9750:	10800017 	ldw	r2,0(r2)
    9754:	1000683a 	jmp	r2
    9758:	00009e40 	call	9e4 <i2c_short_write+0x2c>
    975c:	0000a10c 	andi	zero,zero,644
    9760:	0000a10c 	andi	zero,zero,644
    9764:	00009e60 	cmpeqi	zero,zero,633
    9768:	0000a10c 	andi	zero,zero,644
    976c:	0000a10c 	andi	zero,zero,644
    9770:	0000a10c 	andi	zero,zero,644
    9774:	0000a10c 	andi	zero,zero,644
    9778:	0000a10c 	andi	zero,zero,644
    977c:	0000a10c 	andi	zero,zero,644
    9780:	0000a048 	cmpgei	zero,zero,641
    9784:	0000a064 	muli	zero,zero,641
    9788:	0000a10c 	andi	zero,zero,644
    978c:	0000994c 	andi	zero,zero,613
    9790:	0000a074 	movhi	zero,641
    9794:	0000a10c 	andi	zero,zero,644
    9798:	00009e6c 	andhi	zero,zero,633
    979c:	00009e78 	rdprs	zero,zero,633
    97a0:	00009e78 	rdprs	zero,zero,633
    97a4:	00009e78 	rdprs	zero,zero,633
    97a8:	00009e78 	rdprs	zero,zero,633
    97ac:	00009e78 	rdprs	zero,zero,633
    97b0:	00009e78 	rdprs	zero,zero,633
    97b4:	00009e78 	rdprs	zero,zero,633
    97b8:	00009e78 	rdprs	zero,zero,633
    97bc:	00009e78 	rdprs	zero,zero,633
    97c0:	0000a10c 	andi	zero,zero,644
    97c4:	0000a10c 	andi	zero,zero,644
    97c8:	0000a10c 	andi	zero,zero,644
    97cc:	0000a10c 	andi	zero,zero,644
    97d0:	0000a10c 	andi	zero,zero,644
    97d4:	0000a10c 	andi	zero,zero,644
    97d8:	0000a10c 	andi	zero,zero,644
    97dc:	0000a10c 	andi	zero,zero,644
    97e0:	0000a10c 	andi	zero,zero,644
    97e4:	0000a10c 	andi	zero,zero,644
    97e8:	00009ea4 	muli	zero,zero,634
    97ec:	0000a10c 	andi	zero,zero,644
    97f0:	0000a10c 	andi	zero,zero,644
    97f4:	0000a10c 	andi	zero,zero,644
    97f8:	0000a10c 	andi	zero,zero,644
    97fc:	0000a10c 	andi	zero,zero,644
    9800:	0000a10c 	andi	zero,zero,644
    9804:	0000a10c 	andi	zero,zero,644
    9808:	0000a10c 	andi	zero,zero,644
    980c:	0000a10c 	andi	zero,zero,644
    9810:	0000a10c 	andi	zero,zero,644
    9814:	00009edc 	xori	zero,zero,635
    9818:	0000a10c 	andi	zero,zero,644
    981c:	0000a10c 	andi	zero,zero,644
    9820:	0000a10c 	andi	zero,zero,644
    9824:	0000a10c 	andi	zero,zero,644
    9828:	0000a10c 	andi	zero,zero,644
    982c:	00009f34 	movhi	zero,636
    9830:	0000a10c 	andi	zero,zero,644
    9834:	0000a10c 	andi	zero,zero,644
    9838:	00009fa4 	muli	zero,zero,638
    983c:	0000a10c 	andi	zero,zero,644
    9840:	0000a10c 	andi	zero,zero,644
    9844:	0000a10c 	andi	zero,zero,644
    9848:	0000a10c 	andi	zero,zero,644
    984c:	0000a10c 	andi	zero,zero,644
    9850:	0000a10c 	andi	zero,zero,644
    9854:	0000a10c 	andi	zero,zero,644
    9858:	0000a10c 	andi	zero,zero,644
    985c:	0000a10c 	andi	zero,zero,644
    9860:	0000a10c 	andi	zero,zero,644
    9864:	00009d50 	cmplti	zero,zero,629
    9868:	00009d7c 	xorhi	zero,zero,629
    986c:	0000a10c 	andi	zero,zero,644
    9870:	0000a10c 	andi	zero,zero,644
    9874:	0000a10c 	andi	zero,zero,644
    9878:	0000a0b4 	movhi	zero,642
    987c:	00009d7c 	xorhi	zero,zero,629
    9880:	0000a10c 	andi	zero,zero,644
    9884:	0000a10c 	andi	zero,zero,644
    9888:	00009c10 	cmplti	zero,zero,624
    988c:	0000a10c 	andi	zero,zero,644
    9890:	00009c20 	cmpeqi	zero,zero,624
    9894:	00009c5c 	xori	zero,zero,625
    9898:	00009958 	cmpnei	zero,zero,613
    989c:	00009c04 	movi	zero,624
    98a0:	0000a10c 	andi	zero,zero,644
    98a4:	00009fe0 	cmpeqi	zero,zero,639
    98a8:	0000a10c 	andi	zero,zero,644
    98ac:	0000a038 	rdprs	zero,zero,640
    98b0:	0000a10c 	andi	zero,zero,644
    98b4:	0000a10c 	andi	zero,zero,644
    98b8:	00009cfc 	xorhi	zero,zero,627
    98bc:	42000204 	addi	r8,r8,8
    98c0:	da802317 	ldw	r10,140(sp)
    98c4:	5455883a 	add	r10,r10,r17
    98c8:	da802315 	stw	r10,140(sp)
    98cc:	003f8b06 	br	96fc <__alt_data_end+0xff0096fc>
    98d0:	d9002017 	ldw	r4,128(sp)
    98d4:	a00b883a 	mov	r5,r20
    98d8:	0004ad40 	call	4ad4 <__swsetup_r>
    98dc:	1003b11e 	bne	r2,zero,a7a4 <___vfiprintf_internal_r+0x11ec>
    98e0:	a080030b 	ldhu	r2,12(r20)
    98e4:	00c00284 	movi	r3,10
    98e8:	1080068c 	andi	r2,r2,26
    98ec:	10ff541e 	bne	r2,r3,9640 <__alt_data_end+0xff009640>
    98f0:	a080038f 	ldh	r2,14(r20)
    98f4:	103f5216 	blt	r2,zero,9640 <__alt_data_end+0xff009640>
    98f8:	d9c02217 	ldw	r7,136(sp)
    98fc:	d9002017 	ldw	r4,128(sp)
    9900:	e00d883a 	mov	r6,fp
    9904:	a00b883a 	mov	r5,r20
    9908:	000aa300 	call	aa30 <__sbprintf>
    990c:	dfc03617 	ldw	ra,216(sp)
    9910:	df003517 	ldw	fp,212(sp)
    9914:	ddc03417 	ldw	r23,208(sp)
    9918:	dd803317 	ldw	r22,204(sp)
    991c:	dd403217 	ldw	r21,200(sp)
    9920:	dd003117 	ldw	r20,196(sp)
    9924:	dcc03017 	ldw	r19,192(sp)
    9928:	dc802f17 	ldw	r18,188(sp)
    992c:	dc402e17 	ldw	r17,184(sp)
    9930:	dc002d17 	ldw	r16,180(sp)
    9934:	dec03704 	addi	sp,sp,220
    9938:	f800283a 	ret
    993c:	0006aa80 	call	6aa8 <__sinit>
    9940:	003f2f06 	br	9600 <__alt_data_end+0xff009600>
    9944:	0463c83a 	sub	r17,zero,r17
    9948:	d8802215 	stw	r2,136(sp)
    994c:	a5000114 	ori	r20,r20,4
    9950:	80c00007 	ldb	r3,0(r16)
    9954:	003f7706 	br	9734 <__alt_data_end+0xff009734>
    9958:	00800c04 	movi	r2,48
    995c:	da802217 	ldw	r10,136(sp)
    9960:	d8801d05 	stb	r2,116(sp)
    9964:	00801e04 	movi	r2,120
    9968:	d8801d45 	stb	r2,117(sp)
    996c:	d8001d85 	stb	zero,118(sp)
    9970:	50c00104 	addi	r3,r10,4
    9974:	54800017 	ldw	r18,0(r10)
    9978:	0027883a 	mov	r19,zero
    997c:	a0800094 	ori	r2,r20,2
    9980:	48030b16 	blt	r9,zero,a5b0 <___vfiprintf_internal_r+0xff8>
    9984:	00bfdfc4 	movi	r2,-129
    9988:	a096703a 	and	r11,r20,r2
    998c:	d8c02215 	stw	r3,136(sp)
    9990:	5d000094 	ori	r20,r11,2
    9994:	90032b1e 	bne	r18,zero,a644 <___vfiprintf_internal_r+0x108c>
    9998:	00800074 	movhi	r2,1
    999c:	10851c04 	addi	r2,r2,5232
    99a0:	d8802615 	stw	r2,152(sp)
    99a4:	0039883a 	mov	fp,zero
    99a8:	48017b1e 	bne	r9,zero,9f98 <___vfiprintf_internal_r+0x9e0>
    99ac:	0013883a 	mov	r9,zero
    99b0:	0027883a 	mov	r19,zero
    99b4:	dd401a04 	addi	r21,sp,104
    99b8:	4825883a 	mov	r18,r9
    99bc:	4cc0010e 	bge	r9,r19,99c4 <___vfiprintf_internal_r+0x40c>
    99c0:	9825883a 	mov	r18,r19
    99c4:	e7003fcc 	andi	fp,fp,255
    99c8:	e700201c 	xori	fp,fp,128
    99cc:	e73fe004 	addi	fp,fp,-128
    99d0:	e0000126 	beq	fp,zero,99d8 <___vfiprintf_internal_r+0x420>
    99d4:	94800044 	addi	r18,r18,1
    99d8:	a380008c 	andi	r14,r20,2
    99dc:	70000126 	beq	r14,zero,99e4 <___vfiprintf_internal_r+0x42c>
    99e0:	94800084 	addi	r18,r18,2
    99e4:	a700210c 	andi	fp,r20,132
    99e8:	e001df1e 	bne	fp,zero,a168 <___vfiprintf_internal_r+0xbb0>
    99ec:	8c87c83a 	sub	r3,r17,r18
    99f0:	00c1dd0e 	bge	zero,r3,a168 <___vfiprintf_internal_r+0xbb0>
    99f4:	01c00404 	movi	r7,16
    99f8:	d8801c17 	ldw	r2,112(sp)
    99fc:	38c3ad0e 	bge	r7,r3,a8b4 <___vfiprintf_internal_r+0x12fc>
    9a00:	02800074 	movhi	r10,1
    9a04:	52858104 	addi	r10,r10,5636
    9a08:	dc002915 	stw	r16,164(sp)
    9a0c:	d9801b17 	ldw	r6,108(sp)
    9a10:	da802415 	stw	r10,144(sp)
    9a14:	03c001c4 	movi	r15,7
    9a18:	da402515 	stw	r9,148(sp)
    9a1c:	db802815 	stw	r14,160(sp)
    9a20:	1821883a 	mov	r16,r3
    9a24:	00000506 	br	9a3c <___vfiprintf_internal_r+0x484>
    9a28:	31400084 	addi	r5,r6,2
    9a2c:	42000204 	addi	r8,r8,8
    9a30:	200d883a 	mov	r6,r4
    9a34:	843ffc04 	addi	r16,r16,-16
    9a38:	3c000d0e 	bge	r7,r16,9a70 <___vfiprintf_internal_r+0x4b8>
    9a3c:	10800404 	addi	r2,r2,16
    9a40:	31000044 	addi	r4,r6,1
    9a44:	45800015 	stw	r22,0(r8)
    9a48:	41c00115 	stw	r7,4(r8)
    9a4c:	d8801c15 	stw	r2,112(sp)
    9a50:	d9001b15 	stw	r4,108(sp)
    9a54:	793ff40e 	bge	r15,r4,9a28 <__alt_data_end+0xff009a28>
    9a58:	1001b51e 	bne	r2,zero,a130 <___vfiprintf_internal_r+0xb78>
    9a5c:	843ffc04 	addi	r16,r16,-16
    9a60:	000d883a 	mov	r6,zero
    9a64:	01400044 	movi	r5,1
    9a68:	d811883a 	mov	r8,sp
    9a6c:	3c3ff316 	blt	r7,r16,9a3c <__alt_data_end+0xff009a3c>
    9a70:	8007883a 	mov	r3,r16
    9a74:	da402517 	ldw	r9,148(sp)
    9a78:	db802817 	ldw	r14,160(sp)
    9a7c:	dc002917 	ldw	r16,164(sp)
    9a80:	da802417 	ldw	r10,144(sp)
    9a84:	1885883a 	add	r2,r3,r2
    9a88:	40c00115 	stw	r3,4(r8)
    9a8c:	42800015 	stw	r10,0(r8)
    9a90:	d8801c15 	stw	r2,112(sp)
    9a94:	d9401b15 	stw	r5,108(sp)
    9a98:	00c001c4 	movi	r3,7
    9a9c:	19426016 	blt	r3,r5,a420 <___vfiprintf_internal_r+0xe68>
    9aa0:	d8c01d87 	ldb	r3,118(sp)
    9aa4:	42000204 	addi	r8,r8,8
    9aa8:	29000044 	addi	r4,r5,1
    9aac:	1801b31e 	bne	r3,zero,a17c <___vfiprintf_internal_r+0xbc4>
    9ab0:	7001c026 	beq	r14,zero,a1b4 <___vfiprintf_internal_r+0xbfc>
    9ab4:	d8c01d04 	addi	r3,sp,116
    9ab8:	10800084 	addi	r2,r2,2
    9abc:	40c00015 	stw	r3,0(r8)
    9ac0:	00c00084 	movi	r3,2
    9ac4:	40c00115 	stw	r3,4(r8)
    9ac8:	d8801c15 	stw	r2,112(sp)
    9acc:	d9001b15 	stw	r4,108(sp)
    9ad0:	00c001c4 	movi	r3,7
    9ad4:	1902650e 	bge	r3,r4,a46c <___vfiprintf_internal_r+0xeb4>
    9ad8:	10029a1e 	bne	r2,zero,a544 <___vfiprintf_internal_r+0xf8c>
    9adc:	00c02004 	movi	r3,128
    9ae0:	01000044 	movi	r4,1
    9ae4:	000b883a 	mov	r5,zero
    9ae8:	d811883a 	mov	r8,sp
    9aec:	e0c1b31e 	bne	fp,r3,a1bc <___vfiprintf_internal_r+0xc04>
    9af0:	8cb9c83a 	sub	fp,r17,r18
    9af4:	0701b10e 	bge	zero,fp,a1bc <___vfiprintf_internal_r+0xc04>
    9af8:	01c00404 	movi	r7,16
    9afc:	3f03890e 	bge	r7,fp,a924 <___vfiprintf_internal_r+0x136c>
    9b00:	00c00074 	movhi	r3,1
    9b04:	18c57d04 	addi	r3,r3,5620
    9b08:	d8c02415 	stw	r3,144(sp)
    9b0c:	8007883a 	mov	r3,r16
    9b10:	034001c4 	movi	r13,7
    9b14:	e021883a 	mov	r16,fp
    9b18:	da402515 	stw	r9,148(sp)
    9b1c:	1839883a 	mov	fp,r3
    9b20:	00000506 	br	9b38 <___vfiprintf_internal_r+0x580>
    9b24:	29800084 	addi	r6,r5,2
    9b28:	42000204 	addi	r8,r8,8
    9b2c:	180b883a 	mov	r5,r3
    9b30:	843ffc04 	addi	r16,r16,-16
    9b34:	3c000d0e 	bge	r7,r16,9b6c <___vfiprintf_internal_r+0x5b4>
    9b38:	10800404 	addi	r2,r2,16
    9b3c:	28c00044 	addi	r3,r5,1
    9b40:	45c00015 	stw	r23,0(r8)
    9b44:	41c00115 	stw	r7,4(r8)
    9b48:	d8801c15 	stw	r2,112(sp)
    9b4c:	d8c01b15 	stw	r3,108(sp)
    9b50:	68fff40e 	bge	r13,r3,9b24 <__alt_data_end+0xff009b24>
    9b54:	1002241e 	bne	r2,zero,a3e8 <___vfiprintf_internal_r+0xe30>
    9b58:	843ffc04 	addi	r16,r16,-16
    9b5c:	01800044 	movi	r6,1
    9b60:	000b883a 	mov	r5,zero
    9b64:	d811883a 	mov	r8,sp
    9b68:	3c3ff316 	blt	r7,r16,9b38 <__alt_data_end+0xff009b38>
    9b6c:	da402517 	ldw	r9,148(sp)
    9b70:	e007883a 	mov	r3,fp
    9b74:	8039883a 	mov	fp,r16
    9b78:	1821883a 	mov	r16,r3
    9b7c:	d8c02417 	ldw	r3,144(sp)
    9b80:	1705883a 	add	r2,r2,fp
    9b84:	47000115 	stw	fp,4(r8)
    9b88:	40c00015 	stw	r3,0(r8)
    9b8c:	d8801c15 	stw	r2,112(sp)
    9b90:	d9801b15 	stw	r6,108(sp)
    9b94:	00c001c4 	movi	r3,7
    9b98:	19827616 	blt	r3,r6,a574 <___vfiprintf_internal_r+0xfbc>
    9b9c:	4cf9c83a 	sub	fp,r9,r19
    9ba0:	42000204 	addi	r8,r8,8
    9ba4:	31000044 	addi	r4,r6,1
    9ba8:	300b883a 	mov	r5,r6
    9bac:	07018516 	blt	zero,fp,a1c4 <___vfiprintf_internal_r+0xc0c>
    9bb0:	9885883a 	add	r2,r19,r2
    9bb4:	45400015 	stw	r21,0(r8)
    9bb8:	44c00115 	stw	r19,4(r8)
    9bbc:	d8801c15 	stw	r2,112(sp)
    9bc0:	d9001b15 	stw	r4,108(sp)
    9bc4:	00c001c4 	movi	r3,7
    9bc8:	1901dd0e 	bge	r3,r4,a340 <___vfiprintf_internal_r+0xd88>
    9bcc:	1002401e 	bne	r2,zero,a4d0 <___vfiprintf_internal_r+0xf18>
    9bd0:	d8001b15 	stw	zero,108(sp)
    9bd4:	a2c0010c 	andi	r11,r20,4
    9bd8:	58000226 	beq	r11,zero,9be4 <___vfiprintf_internal_r+0x62c>
    9bdc:	8ca7c83a 	sub	r19,r17,r18
    9be0:	04c2f216 	blt	zero,r19,a7ac <___vfiprintf_internal_r+0x11f4>
    9be4:	8c80010e 	bge	r17,r18,9bec <___vfiprintf_internal_r+0x634>
    9be8:	9023883a 	mov	r17,r18
    9bec:	da802317 	ldw	r10,140(sp)
    9bf0:	5455883a 	add	r10,r10,r17
    9bf4:	da802315 	stw	r10,140(sp)
    9bf8:	d8001b15 	stw	zero,108(sp)
    9bfc:	d811883a 	mov	r8,sp
    9c00:	003ea206 	br	968c <__alt_data_end+0xff00968c>
    9c04:	a5000814 	ori	r20,r20,32
    9c08:	80c00007 	ldb	r3,0(r16)
    9c0c:	003ec906 	br	9734 <__alt_data_end+0xff009734>
    9c10:	80c00007 	ldb	r3,0(r16)
    9c14:	1b030926 	beq	r3,r12,a83c <___vfiprintf_internal_r+0x1284>
    9c18:	a5000414 	ori	r20,r20,16
    9c1c:	003ec506 	br	9734 <__alt_data_end+0xff009734>
    9c20:	21003fcc 	andi	r4,r4,255
    9c24:	20035e1e 	bne	r4,zero,a9a0 <___vfiprintf_internal_r+0x13e8>
    9c28:	a080080c 	andi	r2,r20,32
    9c2c:	1002a526 	beq	r2,zero,a6c4 <___vfiprintf_internal_r+0x110c>
    9c30:	da802217 	ldw	r10,136(sp)
    9c34:	50800017 	ldw	r2,0(r10)
    9c38:	da802317 	ldw	r10,140(sp)
    9c3c:	5007d7fa 	srai	r3,r10,31
    9c40:	da802217 	ldw	r10,136(sp)
    9c44:	10c00115 	stw	r3,4(r2)
    9c48:	52800104 	addi	r10,r10,4
    9c4c:	da802215 	stw	r10,136(sp)
    9c50:	da802317 	ldw	r10,140(sp)
    9c54:	12800015 	stw	r10,0(r2)
    9c58:	003e8c06 	br	968c <__alt_data_end+0xff00968c>
    9c5c:	21003fcc 	andi	r4,r4,255
    9c60:	2003511e 	bne	r4,zero,a9a8 <___vfiprintf_internal_r+0x13f0>
    9c64:	a080080c 	andi	r2,r20,32
    9c68:	1000a126 	beq	r2,zero,9ef0 <___vfiprintf_internal_r+0x938>
    9c6c:	da802217 	ldw	r10,136(sp)
    9c70:	d8001d85 	stb	zero,118(sp)
    9c74:	50800204 	addi	r2,r10,8
    9c78:	54800017 	ldw	r18,0(r10)
    9c7c:	54c00117 	ldw	r19,4(r10)
    9c80:	4802b416 	blt	r9,zero,a754 <___vfiprintf_internal_r+0x119c>
    9c84:	013fdfc4 	movi	r4,-129
    9c88:	94c6b03a 	or	r3,r18,r19
    9c8c:	d8802215 	stw	r2,136(sp)
    9c90:	a128703a 	and	r20,r20,r4
    9c94:	1800a226 	beq	r3,zero,9f20 <___vfiprintf_internal_r+0x968>
    9c98:	0039883a 	mov	fp,zero
    9c9c:	dd401a04 	addi	r21,sp,104
    9ca0:	9006d0fa 	srli	r3,r18,3
    9ca4:	9808977a 	slli	r4,r19,29
    9ca8:	9826d0fa 	srli	r19,r19,3
    9cac:	948001cc 	andi	r18,r18,7
    9cb0:	90800c04 	addi	r2,r18,48
    9cb4:	ad7fffc4 	addi	r21,r21,-1
    9cb8:	20e4b03a 	or	r18,r4,r3
    9cbc:	a8800005 	stb	r2,0(r21)
    9cc0:	94c6b03a 	or	r3,r18,r19
    9cc4:	183ff61e 	bne	r3,zero,9ca0 <__alt_data_end+0xff009ca0>
    9cc8:	a0c0004c 	andi	r3,r20,1
    9ccc:	18005926 	beq	r3,zero,9e34 <___vfiprintf_internal_r+0x87c>
    9cd0:	10803fcc 	andi	r2,r2,255
    9cd4:	1080201c 	xori	r2,r2,128
    9cd8:	10bfe004 	addi	r2,r2,-128
    9cdc:	00c00c04 	movi	r3,48
    9ce0:	10c05426 	beq	r2,r3,9e34 <___vfiprintf_internal_r+0x87c>
    9ce4:	da801e17 	ldw	r10,120(sp)
    9ce8:	a8bfffc4 	addi	r2,r21,-1
    9cec:	a8ffffc5 	stb	r3,-1(r21)
    9cf0:	50a7c83a 	sub	r19,r10,r2
    9cf4:	102b883a 	mov	r21,r2
    9cf8:	003f2f06 	br	99b8 <__alt_data_end+0xff0099b8>
    9cfc:	21003fcc 	andi	r4,r4,255
    9d00:	2003421e 	bne	r4,zero,aa0c <___vfiprintf_internal_r+0x1454>
    9d04:	00800074 	movhi	r2,1
    9d08:	10851c04 	addi	r2,r2,5232
    9d0c:	d8802615 	stw	r2,152(sp)
    9d10:	a080080c 	andi	r2,r20,32
    9d14:	1000aa26 	beq	r2,zero,9fc0 <___vfiprintf_internal_r+0xa08>
    9d18:	da802217 	ldw	r10,136(sp)
    9d1c:	54800017 	ldw	r18,0(r10)
    9d20:	54c00117 	ldw	r19,4(r10)
    9d24:	52800204 	addi	r10,r10,8
    9d28:	da802215 	stw	r10,136(sp)
    9d2c:	a080004c 	andi	r2,r20,1
    9d30:	1001d226 	beq	r2,zero,a47c <___vfiprintf_internal_r+0xec4>
    9d34:	94c4b03a 	or	r2,r18,r19
    9d38:	1002351e 	bne	r2,zero,a610 <___vfiprintf_internal_r+0x1058>
    9d3c:	d8001d85 	stb	zero,118(sp)
    9d40:	48022216 	blt	r9,zero,a5cc <___vfiprintf_internal_r+0x1014>
    9d44:	00bfdfc4 	movi	r2,-129
    9d48:	a0a8703a 	and	r20,r20,r2
    9d4c:	003f1506 	br	99a4 <__alt_data_end+0xff0099a4>
    9d50:	da802217 	ldw	r10,136(sp)
    9d54:	04800044 	movi	r18,1
    9d58:	d8001d85 	stb	zero,118(sp)
    9d5c:	50800017 	ldw	r2,0(r10)
    9d60:	52800104 	addi	r10,r10,4
    9d64:	da802215 	stw	r10,136(sp)
    9d68:	d8801005 	stb	r2,64(sp)
    9d6c:	9027883a 	mov	r19,r18
    9d70:	dd401004 	addi	r21,sp,64
    9d74:	0013883a 	mov	r9,zero
    9d78:	003f1706 	br	99d8 <__alt_data_end+0xff0099d8>
    9d7c:	21003fcc 	andi	r4,r4,255
    9d80:	2003201e 	bne	r4,zero,aa04 <___vfiprintf_internal_r+0x144c>
    9d84:	a080080c 	andi	r2,r20,32
    9d88:	10004b26 	beq	r2,zero,9eb8 <___vfiprintf_internal_r+0x900>
    9d8c:	da802217 	ldw	r10,136(sp)
    9d90:	50800117 	ldw	r2,4(r10)
    9d94:	54800017 	ldw	r18,0(r10)
    9d98:	52800204 	addi	r10,r10,8
    9d9c:	da802215 	stw	r10,136(sp)
    9da0:	1027883a 	mov	r19,r2
    9da4:	10022c16 	blt	r2,zero,a658 <___vfiprintf_internal_r+0x10a0>
    9da8:	df001d83 	ldbu	fp,118(sp)
    9dac:	48007216 	blt	r9,zero,9f78 <___vfiprintf_internal_r+0x9c0>
    9db0:	00ffdfc4 	movi	r3,-129
    9db4:	94c4b03a 	or	r2,r18,r19
    9db8:	a0e8703a 	and	r20,r20,r3
    9dbc:	1000cc26 	beq	r2,zero,a0f0 <___vfiprintf_internal_r+0xb38>
    9dc0:	98021026 	beq	r19,zero,a604 <___vfiprintf_internal_r+0x104c>
    9dc4:	dc402415 	stw	r17,144(sp)
    9dc8:	dc002515 	stw	r16,148(sp)
    9dcc:	9823883a 	mov	r17,r19
    9dd0:	9021883a 	mov	r16,r18
    9dd4:	dd401a04 	addi	r21,sp,104
    9dd8:	4825883a 	mov	r18,r9
    9ddc:	4027883a 	mov	r19,r8
    9de0:	8009883a 	mov	r4,r16
    9de4:	880b883a 	mov	r5,r17
    9de8:	01800284 	movi	r6,10
    9dec:	000f883a 	mov	r7,zero
    9df0:	000b9980 	call	b998 <__umoddi3>
    9df4:	10800c04 	addi	r2,r2,48
    9df8:	ad7fffc4 	addi	r21,r21,-1
    9dfc:	8009883a 	mov	r4,r16
    9e00:	880b883a 	mov	r5,r17
    9e04:	a8800005 	stb	r2,0(r21)
    9e08:	01800284 	movi	r6,10
    9e0c:	000f883a 	mov	r7,zero
    9e10:	000b4200 	call	b420 <__udivdi3>
    9e14:	1021883a 	mov	r16,r2
    9e18:	10c4b03a 	or	r2,r2,r3
    9e1c:	1823883a 	mov	r17,r3
    9e20:	103fef1e 	bne	r2,zero,9de0 <__alt_data_end+0xff009de0>
    9e24:	dc402417 	ldw	r17,144(sp)
    9e28:	dc002517 	ldw	r16,148(sp)
    9e2c:	9013883a 	mov	r9,r18
    9e30:	9811883a 	mov	r8,r19
    9e34:	da801e17 	ldw	r10,120(sp)
    9e38:	5567c83a 	sub	r19,r10,r21
    9e3c:	003ede06 	br	99b8 <__alt_data_end+0xff0099b8>
    9e40:	38803fcc 	andi	r2,r7,255
    9e44:	1080201c 	xori	r2,r2,128
    9e48:	10bfe004 	addi	r2,r2,-128
    9e4c:	1002371e 	bne	r2,zero,a72c <___vfiprintf_internal_r+0x1174>
    9e50:	01000044 	movi	r4,1
    9e54:	01c00804 	movi	r7,32
    9e58:	80c00007 	ldb	r3,0(r16)
    9e5c:	003e3506 	br	9734 <__alt_data_end+0xff009734>
    9e60:	a5000054 	ori	r20,r20,1
    9e64:	80c00007 	ldb	r3,0(r16)
    9e68:	003e3206 	br	9734 <__alt_data_end+0xff009734>
    9e6c:	a5002014 	ori	r20,r20,128
    9e70:	80c00007 	ldb	r3,0(r16)
    9e74:	003e2f06 	br	9734 <__alt_data_end+0xff009734>
    9e78:	8015883a 	mov	r10,r16
    9e7c:	0023883a 	mov	r17,zero
    9e80:	18bff404 	addi	r2,r3,-48
    9e84:	50c00007 	ldb	r3,0(r10)
    9e88:	8c4002a4 	muli	r17,r17,10
    9e8c:	84000044 	addi	r16,r16,1
    9e90:	8015883a 	mov	r10,r16
    9e94:	1463883a 	add	r17,r2,r17
    9e98:	18bff404 	addi	r2,r3,-48
    9e9c:	30bff92e 	bgeu	r6,r2,9e84 <__alt_data_end+0xff009e84>
    9ea0:	003e2506 	br	9738 <__alt_data_end+0xff009738>
    9ea4:	21003fcc 	andi	r4,r4,255
    9ea8:	2002d41e 	bne	r4,zero,a9fc <___vfiprintf_internal_r+0x1444>
    9eac:	a5000414 	ori	r20,r20,16
    9eb0:	a080080c 	andi	r2,r20,32
    9eb4:	103fb51e 	bne	r2,zero,9d8c <__alt_data_end+0xff009d8c>
    9eb8:	a080040c 	andi	r2,r20,16
    9ebc:	1001f826 	beq	r2,zero,a6a0 <___vfiprintf_internal_r+0x10e8>
    9ec0:	da802217 	ldw	r10,136(sp)
    9ec4:	54800017 	ldw	r18,0(r10)
    9ec8:	52800104 	addi	r10,r10,4
    9ecc:	da802215 	stw	r10,136(sp)
    9ed0:	9027d7fa 	srai	r19,r18,31
    9ed4:	9805883a 	mov	r2,r19
    9ed8:	003fb206 	br	9da4 <__alt_data_end+0xff009da4>
    9edc:	21003fcc 	andi	r4,r4,255
    9ee0:	2002c41e 	bne	r4,zero,a9f4 <___vfiprintf_internal_r+0x143c>
    9ee4:	a5000414 	ori	r20,r20,16
    9ee8:	a080080c 	andi	r2,r20,32
    9eec:	103f5f1e 	bne	r2,zero,9c6c <__alt_data_end+0xff009c6c>
    9ef0:	a080040c 	andi	r2,r20,16
    9ef4:	10020f26 	beq	r2,zero,a734 <___vfiprintf_internal_r+0x117c>
    9ef8:	da802217 	ldw	r10,136(sp)
    9efc:	d8001d85 	stb	zero,118(sp)
    9f00:	0027883a 	mov	r19,zero
    9f04:	50800104 	addi	r2,r10,4
    9f08:	54800017 	ldw	r18,0(r10)
    9f0c:	48021116 	blt	r9,zero,a754 <___vfiprintf_internal_r+0x119c>
    9f10:	00ffdfc4 	movi	r3,-129
    9f14:	d8802215 	stw	r2,136(sp)
    9f18:	a0e8703a 	and	r20,r20,r3
    9f1c:	903f5e1e 	bne	r18,zero,9c98 <__alt_data_end+0xff009c98>
    9f20:	0039883a 	mov	fp,zero
    9f24:	4802a626 	beq	r9,zero,a9c0 <___vfiprintf_internal_r+0x1408>
    9f28:	0025883a 	mov	r18,zero
    9f2c:	0027883a 	mov	r19,zero
    9f30:	003f5a06 	br	9c9c <__alt_data_end+0xff009c9c>
    9f34:	21003fcc 	andi	r4,r4,255
    9f38:	20029f1e 	bne	r4,zero,a9b8 <___vfiprintf_internal_r+0x1400>
    9f3c:	a5000414 	ori	r20,r20,16
    9f40:	a080080c 	andi	r2,r20,32
    9f44:	10005e1e 	bne	r2,zero,a0c0 <___vfiprintf_internal_r+0xb08>
    9f48:	a080040c 	andi	r2,r20,16
    9f4c:	1001a21e 	bne	r2,zero,a5d8 <___vfiprintf_internal_r+0x1020>
    9f50:	a080100c 	andi	r2,r20,64
    9f54:	d8001d85 	stb	zero,118(sp)
    9f58:	da802217 	ldw	r10,136(sp)
    9f5c:	1002231e 	bne	r2,zero,a7ec <___vfiprintf_internal_r+0x1234>
    9f60:	50800104 	addi	r2,r10,4
    9f64:	54800017 	ldw	r18,0(r10)
    9f68:	0027883a 	mov	r19,zero
    9f6c:	4801a00e 	bge	r9,zero,a5f0 <___vfiprintf_internal_r+0x1038>
    9f70:	d8802215 	stw	r2,136(sp)
    9f74:	0039883a 	mov	fp,zero
    9f78:	94c4b03a 	or	r2,r18,r19
    9f7c:	103f901e 	bne	r2,zero,9dc0 <__alt_data_end+0xff009dc0>
    9f80:	00800044 	movi	r2,1
    9f84:	10803fcc 	andi	r2,r2,255
    9f88:	00c00044 	movi	r3,1
    9f8c:	10c05926 	beq	r2,r3,a0f4 <___vfiprintf_internal_r+0xb3c>
    9f90:	00c00084 	movi	r3,2
    9f94:	10ffe41e 	bne	r2,r3,9f28 <__alt_data_end+0xff009f28>
    9f98:	0025883a 	mov	r18,zero
    9f9c:	0027883a 	mov	r19,zero
    9fa0:	00013d06 	br	a498 <___vfiprintf_internal_r+0xee0>
    9fa4:	21003fcc 	andi	r4,r4,255
    9fa8:	2002811e 	bne	r4,zero,a9b0 <___vfiprintf_internal_r+0x13f8>
    9fac:	00800074 	movhi	r2,1
    9fb0:	10851704 	addi	r2,r2,5212
    9fb4:	d8802615 	stw	r2,152(sp)
    9fb8:	a080080c 	andi	r2,r20,32
    9fbc:	103f561e 	bne	r2,zero,9d18 <__alt_data_end+0xff009d18>
    9fc0:	a080040c 	andi	r2,r20,16
    9fc4:	1001d126 	beq	r2,zero,a70c <___vfiprintf_internal_r+0x1154>
    9fc8:	da802217 	ldw	r10,136(sp)
    9fcc:	0027883a 	mov	r19,zero
    9fd0:	54800017 	ldw	r18,0(r10)
    9fd4:	52800104 	addi	r10,r10,4
    9fd8:	da802215 	stw	r10,136(sp)
    9fdc:	003f5306 	br	9d2c <__alt_data_end+0xff009d2c>
    9fe0:	da802217 	ldw	r10,136(sp)
    9fe4:	d8001d85 	stb	zero,118(sp)
    9fe8:	55400017 	ldw	r21,0(r10)
    9fec:	50c00104 	addi	r3,r10,4
    9ff0:	a8024226 	beq	r21,zero,a8fc <___vfiprintf_internal_r+0x1344>
    9ff4:	48021816 	blt	r9,zero,a858 <___vfiprintf_internal_r+0x12a0>
    9ff8:	480d883a 	mov	r6,r9
    9ffc:	000b883a 	mov	r5,zero
    a000:	a809883a 	mov	r4,r21
    a004:	d8c02a15 	stw	r3,168(sp)
    a008:	da002b15 	stw	r8,172(sp)
    a00c:	da402c15 	stw	r9,176(sp)
    a010:	00078080 	call	7808 <memchr>
    a014:	d8c02a17 	ldw	r3,168(sp)
    a018:	da002b17 	ldw	r8,172(sp)
    a01c:	da402c17 	ldw	r9,176(sp)
    a020:	10024826 	beq	r2,zero,a944 <___vfiprintf_internal_r+0x138c>
    a024:	1567c83a 	sub	r19,r2,r21
    a028:	df001d83 	ldbu	fp,118(sp)
    a02c:	d8c02215 	stw	r3,136(sp)
    a030:	0013883a 	mov	r9,zero
    a034:	003e6006 	br	99b8 <__alt_data_end+0xff0099b8>
    a038:	21003fcc 	andi	r4,r4,255
    a03c:	203fc026 	beq	r4,zero,9f40 <__alt_data_end+0xff009f40>
    a040:	d9c01d85 	stb	r7,118(sp)
    a044:	003fbe06 	br	9f40 <__alt_data_end+0xff009f40>
    a048:	da802217 	ldw	r10,136(sp)
    a04c:	54400017 	ldw	r17,0(r10)
    a050:	50800104 	addi	r2,r10,4
    a054:	883e3b16 	blt	r17,zero,9944 <__alt_data_end+0xff009944>
    a058:	d8802215 	stw	r2,136(sp)
    a05c:	80c00007 	ldb	r3,0(r16)
    a060:	003db406 	br	9734 <__alt_data_end+0xff009734>
    a064:	01000044 	movi	r4,1
    a068:	01c00ac4 	movi	r7,43
    a06c:	80c00007 	ldb	r3,0(r16)
    a070:	003db006 	br	9734 <__alt_data_end+0xff009734>
    a074:	80c00007 	ldb	r3,0(r16)
    a078:	82800044 	addi	r10,r16,1
    a07c:	1b423c26 	beq	r3,r13,a970 <___vfiprintf_internal_r+0x13b8>
    a080:	18bff404 	addi	r2,r3,-48
    a084:	0013883a 	mov	r9,zero
    a088:	30822b36 	bltu	r6,r2,a938 <___vfiprintf_internal_r+0x1380>
    a08c:	50c00007 	ldb	r3,0(r10)
    a090:	4a4002a4 	muli	r9,r9,10
    a094:	54000044 	addi	r16,r10,1
    a098:	8015883a 	mov	r10,r16
    a09c:	4893883a 	add	r9,r9,r2
    a0a0:	18bff404 	addi	r2,r3,-48
    a0a4:	30bff92e 	bgeu	r6,r2,a08c <__alt_data_end+0xff00a08c>
    a0a8:	483da30e 	bge	r9,zero,9738 <__alt_data_end+0xff009738>
    a0ac:	027fffc4 	movi	r9,-1
    a0b0:	003da106 	br	9738 <__alt_data_end+0xff009738>
    a0b4:	a5001014 	ori	r20,r20,64
    a0b8:	80c00007 	ldb	r3,0(r16)
    a0bc:	003d9d06 	br	9734 <__alt_data_end+0xff009734>
    a0c0:	da802217 	ldw	r10,136(sp)
    a0c4:	d8001d85 	stb	zero,118(sp)
    a0c8:	50c00204 	addi	r3,r10,8
    a0cc:	54800017 	ldw	r18,0(r10)
    a0d0:	54c00117 	ldw	r19,4(r10)
    a0d4:	4801ca16 	blt	r9,zero,a800 <___vfiprintf_internal_r+0x1248>
    a0d8:	013fdfc4 	movi	r4,-129
    a0dc:	94c4b03a 	or	r2,r18,r19
    a0e0:	d8c02215 	stw	r3,136(sp)
    a0e4:	a128703a 	and	r20,r20,r4
    a0e8:	0039883a 	mov	fp,zero
    a0ec:	103f341e 	bne	r2,zero,9dc0 <__alt_data_end+0xff009dc0>
    a0f0:	483e2e26 	beq	r9,zero,99ac <__alt_data_end+0xff0099ac>
    a0f4:	0025883a 	mov	r18,zero
    a0f8:	94800c04 	addi	r18,r18,48
    a0fc:	dc8019c5 	stb	r18,103(sp)
    a100:	dcc02717 	ldw	r19,156(sp)
    a104:	dd4019c4 	addi	r21,sp,103
    a108:	003e2b06 	br	99b8 <__alt_data_end+0xff0099b8>
    a10c:	21003fcc 	andi	r4,r4,255
    a110:	2002361e 	bne	r4,zero,a9ec <___vfiprintf_internal_r+0x1434>
    a114:	1801c126 	beq	r3,zero,a81c <___vfiprintf_internal_r+0x1264>
    a118:	04800044 	movi	r18,1
    a11c:	d8c01005 	stb	r3,64(sp)
    a120:	d8001d85 	stb	zero,118(sp)
    a124:	9027883a 	mov	r19,r18
    a128:	dd401004 	addi	r21,sp,64
    a12c:	003f1106 	br	9d74 <__alt_data_end+0xff009d74>
    a130:	d9402117 	ldw	r5,132(sp)
    a134:	d9002017 	ldw	r4,128(sp)
    a138:	d9801a04 	addi	r6,sp,104
    a13c:	d9c02b15 	stw	r7,172(sp)
    a140:	dbc02a15 	stw	r15,168(sp)
    a144:	00094a40 	call	94a4 <__sprint_r.part.0>
    a148:	d9c02b17 	ldw	r7,172(sp)
    a14c:	dbc02a17 	ldw	r15,168(sp)
    a150:	10006d1e 	bne	r2,zero,a308 <___vfiprintf_internal_r+0xd50>
    a154:	d9801b17 	ldw	r6,108(sp)
    a158:	d8801c17 	ldw	r2,112(sp)
    a15c:	d811883a 	mov	r8,sp
    a160:	31400044 	addi	r5,r6,1
    a164:	003e3306 	br	9a34 <__alt_data_end+0xff009a34>
    a168:	d9401b17 	ldw	r5,108(sp)
    a16c:	d8801c17 	ldw	r2,112(sp)
    a170:	29000044 	addi	r4,r5,1
    a174:	d8c01d87 	ldb	r3,118(sp)
    a178:	183e4d26 	beq	r3,zero,9ab0 <__alt_data_end+0xff009ab0>
    a17c:	00c00044 	movi	r3,1
    a180:	d9401d84 	addi	r5,sp,118
    a184:	10c5883a 	add	r2,r2,r3
    a188:	41400015 	stw	r5,0(r8)
    a18c:	40c00115 	stw	r3,4(r8)
    a190:	d8801c15 	stw	r2,112(sp)
    a194:	d9001b15 	stw	r4,108(sp)
    a198:	014001c4 	movi	r5,7
    a19c:	2900a90e 	bge	r5,r4,a444 <___vfiprintf_internal_r+0xe8c>
    a1a0:	1000da1e 	bne	r2,zero,a50c <___vfiprintf_internal_r+0xf54>
    a1a4:	7000ab1e 	bne	r14,zero,a454 <___vfiprintf_internal_r+0xe9c>
    a1a8:	000b883a 	mov	r5,zero
    a1ac:	1809883a 	mov	r4,r3
    a1b0:	d811883a 	mov	r8,sp
    a1b4:	00c02004 	movi	r3,128
    a1b8:	e0fe4d26 	beq	fp,r3,9af0 <__alt_data_end+0xff009af0>
    a1bc:	4cf9c83a 	sub	fp,r9,r19
    a1c0:	073e7b0e 	bge	zero,fp,9bb0 <__alt_data_end+0xff009bb0>
    a1c4:	01c00404 	movi	r7,16
    a1c8:	3f01900e 	bge	r7,fp,a80c <___vfiprintf_internal_r+0x1254>
    a1cc:	00c00074 	movhi	r3,1
    a1d0:	18c57d04 	addi	r3,r3,5620
    a1d4:	d8c02415 	stw	r3,144(sp)
    a1d8:	034001c4 	movi	r13,7
    a1dc:	00000506 	br	a1f4 <___vfiprintf_internal_r+0xc3c>
    a1e0:	29000084 	addi	r4,r5,2
    a1e4:	42000204 	addi	r8,r8,8
    a1e8:	180b883a 	mov	r5,r3
    a1ec:	e73ffc04 	addi	fp,fp,-16
    a1f0:	3f000d0e 	bge	r7,fp,a228 <___vfiprintf_internal_r+0xc70>
    a1f4:	10800404 	addi	r2,r2,16
    a1f8:	28c00044 	addi	r3,r5,1
    a1fc:	45c00015 	stw	r23,0(r8)
    a200:	41c00115 	stw	r7,4(r8)
    a204:	d8801c15 	stw	r2,112(sp)
    a208:	d8c01b15 	stw	r3,108(sp)
    a20c:	68fff40e 	bge	r13,r3,a1e0 <__alt_data_end+0xff00a1e0>
    a210:	1000101e 	bne	r2,zero,a254 <___vfiprintf_internal_r+0xc9c>
    a214:	e73ffc04 	addi	fp,fp,-16
    a218:	01000044 	movi	r4,1
    a21c:	000b883a 	mov	r5,zero
    a220:	d811883a 	mov	r8,sp
    a224:	3f3ff316 	blt	r7,fp,a1f4 <__alt_data_end+0xff00a1f4>
    a228:	da802417 	ldw	r10,144(sp)
    a22c:	1705883a 	add	r2,r2,fp
    a230:	47000115 	stw	fp,4(r8)
    a234:	42800015 	stw	r10,0(r8)
    a238:	d8801c15 	stw	r2,112(sp)
    a23c:	d9001b15 	stw	r4,108(sp)
    a240:	00c001c4 	movi	r3,7
    a244:	19003616 	blt	r3,r4,a320 <___vfiprintf_internal_r+0xd68>
    a248:	42000204 	addi	r8,r8,8
    a24c:	21000044 	addi	r4,r4,1
    a250:	003e5706 	br	9bb0 <__alt_data_end+0xff009bb0>
    a254:	d9402117 	ldw	r5,132(sp)
    a258:	d9002017 	ldw	r4,128(sp)
    a25c:	d9801a04 	addi	r6,sp,104
    a260:	d9c02b15 	stw	r7,172(sp)
    a264:	db402a15 	stw	r13,168(sp)
    a268:	00094a40 	call	94a4 <__sprint_r.part.0>
    a26c:	d9c02b17 	ldw	r7,172(sp)
    a270:	db402a17 	ldw	r13,168(sp)
    a274:	1000241e 	bne	r2,zero,a308 <___vfiprintf_internal_r+0xd50>
    a278:	d9401b17 	ldw	r5,108(sp)
    a27c:	d8801c17 	ldw	r2,112(sp)
    a280:	d811883a 	mov	r8,sp
    a284:	29000044 	addi	r4,r5,1
    a288:	003fd806 	br	a1ec <__alt_data_end+0xff00a1ec>
    a28c:	d9401b17 	ldw	r5,108(sp)
    a290:	00c00074 	movhi	r3,1
    a294:	18c58104 	addi	r3,r3,5636
    a298:	d8c02415 	stw	r3,144(sp)
    a29c:	29400044 	addi	r5,r5,1
    a2a0:	d8c02417 	ldw	r3,144(sp)
    a2a4:	14c5883a 	add	r2,r2,r19
    a2a8:	44c00115 	stw	r19,4(r8)
    a2ac:	40c00015 	stw	r3,0(r8)
    a2b0:	d8801c15 	stw	r2,112(sp)
    a2b4:	d9401b15 	stw	r5,108(sp)
    a2b8:	00c001c4 	movi	r3,7
    a2bc:	1940070e 	bge	r3,r5,a2dc <___vfiprintf_internal_r+0xd24>
    a2c0:	103e4826 	beq	r2,zero,9be4 <__alt_data_end+0xff009be4>
    a2c4:	d9402117 	ldw	r5,132(sp)
    a2c8:	d9002017 	ldw	r4,128(sp)
    a2cc:	d9801a04 	addi	r6,sp,104
    a2d0:	00094a40 	call	94a4 <__sprint_r.part.0>
    a2d4:	10000c1e 	bne	r2,zero,a308 <___vfiprintf_internal_r+0xd50>
    a2d8:	d8801c17 	ldw	r2,112(sp)
    a2dc:	8c80010e 	bge	r17,r18,a2e4 <___vfiprintf_internal_r+0xd2c>
    a2e0:	9023883a 	mov	r17,r18
    a2e4:	da802317 	ldw	r10,140(sp)
    a2e8:	5455883a 	add	r10,r10,r17
    a2ec:	da802315 	stw	r10,140(sp)
    a2f0:	103e4126 	beq	r2,zero,9bf8 <__alt_data_end+0xff009bf8>
    a2f4:	d9402117 	ldw	r5,132(sp)
    a2f8:	d9002017 	ldw	r4,128(sp)
    a2fc:	d9801a04 	addi	r6,sp,104
    a300:	00094a40 	call	94a4 <__sprint_r.part.0>
    a304:	103e3c26 	beq	r2,zero,9bf8 <__alt_data_end+0xff009bf8>
    a308:	dd002117 	ldw	r20,132(sp)
    a30c:	a080030b 	ldhu	r2,12(r20)
    a310:	1080100c 	andi	r2,r2,64
    a314:	1001231e 	bne	r2,zero,a7a4 <___vfiprintf_internal_r+0x11ec>
    a318:	d8802317 	ldw	r2,140(sp)
    a31c:	003d7b06 	br	990c <__alt_data_end+0xff00990c>
    a320:	1000991e 	bne	r2,zero,a588 <___vfiprintf_internal_r+0xfd0>
    a324:	00c00044 	movi	r3,1
    a328:	9805883a 	mov	r2,r19
    a32c:	dd400015 	stw	r21,0(sp)
    a330:	dcc00115 	stw	r19,4(sp)
    a334:	dcc01c15 	stw	r19,112(sp)
    a338:	d8c01b15 	stw	r3,108(sp)
    a33c:	d811883a 	mov	r8,sp
    a340:	42000204 	addi	r8,r8,8
    a344:	a2c0010c 	andi	r11,r20,4
    a348:	583fe426 	beq	r11,zero,a2dc <__alt_data_end+0xff00a2dc>
    a34c:	8ca7c83a 	sub	r19,r17,r18
    a350:	04ffe20e 	bge	zero,r19,a2dc <__alt_data_end+0xff00a2dc>
    a354:	01c00404 	movi	r7,16
    a358:	3cffcc0e 	bge	r7,r19,a28c <__alt_data_end+0xff00a28c>
    a35c:	02800074 	movhi	r10,1
    a360:	52858104 	addi	r10,r10,5636
    a364:	d9001b17 	ldw	r4,108(sp)
    a368:	da802415 	stw	r10,144(sp)
    a36c:	382b883a 	mov	r21,r7
    a370:	050001c4 	movi	r20,7
    a374:	df002017 	ldw	fp,128(sp)
    a378:	00000506 	br	a390 <___vfiprintf_internal_r+0xdd8>
    a37c:	21400084 	addi	r5,r4,2
    a380:	42000204 	addi	r8,r8,8
    a384:	1809883a 	mov	r4,r3
    a388:	9cfffc04 	addi	r19,r19,-16
    a38c:	acffc40e 	bge	r21,r19,a2a0 <__alt_data_end+0xff00a2a0>
    a390:	10800404 	addi	r2,r2,16
    a394:	20c00044 	addi	r3,r4,1
    a398:	45800015 	stw	r22,0(r8)
    a39c:	45400115 	stw	r21,4(r8)
    a3a0:	d8801c15 	stw	r2,112(sp)
    a3a4:	d8c01b15 	stw	r3,108(sp)
    a3a8:	a0fff40e 	bge	r20,r3,a37c <__alt_data_end+0xff00a37c>
    a3ac:	1000041e 	bne	r2,zero,a3c0 <___vfiprintf_internal_r+0xe08>
    a3b0:	01400044 	movi	r5,1
    a3b4:	0009883a 	mov	r4,zero
    a3b8:	d811883a 	mov	r8,sp
    a3bc:	003ff206 	br	a388 <__alt_data_end+0xff00a388>
    a3c0:	d9402117 	ldw	r5,132(sp)
    a3c4:	d9801a04 	addi	r6,sp,104
    a3c8:	e009883a 	mov	r4,fp
    a3cc:	00094a40 	call	94a4 <__sprint_r.part.0>
    a3d0:	103fcd1e 	bne	r2,zero,a308 <__alt_data_end+0xff00a308>
    a3d4:	d9001b17 	ldw	r4,108(sp)
    a3d8:	d8801c17 	ldw	r2,112(sp)
    a3dc:	d811883a 	mov	r8,sp
    a3e0:	21400044 	addi	r5,r4,1
    a3e4:	003fe806 	br	a388 <__alt_data_end+0xff00a388>
    a3e8:	d9402117 	ldw	r5,132(sp)
    a3ec:	d9002017 	ldw	r4,128(sp)
    a3f0:	d9801a04 	addi	r6,sp,104
    a3f4:	d9c02b15 	stw	r7,172(sp)
    a3f8:	db402a15 	stw	r13,168(sp)
    a3fc:	00094a40 	call	94a4 <__sprint_r.part.0>
    a400:	d9c02b17 	ldw	r7,172(sp)
    a404:	db402a17 	ldw	r13,168(sp)
    a408:	103fbf1e 	bne	r2,zero,a308 <__alt_data_end+0xff00a308>
    a40c:	d9401b17 	ldw	r5,108(sp)
    a410:	d8801c17 	ldw	r2,112(sp)
    a414:	d811883a 	mov	r8,sp
    a418:	29800044 	addi	r6,r5,1
    a41c:	003dc406 	br	9b30 <__alt_data_end+0xff009b30>
    a420:	1000d21e 	bne	r2,zero,a76c <___vfiprintf_internal_r+0x11b4>
    a424:	d8c01d87 	ldb	r3,118(sp)
    a428:	18009526 	beq	r3,zero,a680 <___vfiprintf_internal_r+0x10c8>
    a42c:	00800044 	movi	r2,1
    a430:	d8c01d84 	addi	r3,sp,118
    a434:	1009883a 	mov	r4,r2
    a438:	d8c00015 	stw	r3,0(sp)
    a43c:	d8800115 	stw	r2,4(sp)
    a440:	d811883a 	mov	r8,sp
    a444:	200b883a 	mov	r5,r4
    a448:	42000204 	addi	r8,r8,8
    a44c:	21000044 	addi	r4,r4,1
    a450:	003d9706 	br	9ab0 <__alt_data_end+0xff009ab0>
    a454:	d9001d04 	addi	r4,sp,116
    a458:	00800084 	movi	r2,2
    a45c:	d9000015 	stw	r4,0(sp)
    a460:	d8800115 	stw	r2,4(sp)
    a464:	1809883a 	mov	r4,r3
    a468:	d811883a 	mov	r8,sp
    a46c:	200b883a 	mov	r5,r4
    a470:	42000204 	addi	r8,r8,8
    a474:	21000044 	addi	r4,r4,1
    a478:	003f4e06 	br	a1b4 <__alt_data_end+0xff00a1b4>
    a47c:	d8001d85 	stb	zero,118(sp)
    a480:	48005016 	blt	r9,zero,a5c4 <___vfiprintf_internal_r+0x100c>
    a484:	00ffdfc4 	movi	r3,-129
    a488:	94c4b03a 	or	r2,r18,r19
    a48c:	a0e8703a 	and	r20,r20,r3
    a490:	103d4426 	beq	r2,zero,99a4 <__alt_data_end+0xff0099a4>
    a494:	0039883a 	mov	fp,zero
    a498:	d9002617 	ldw	r4,152(sp)
    a49c:	dd401a04 	addi	r21,sp,104
    a4a0:	908003cc 	andi	r2,r18,15
    a4a4:	9806973a 	slli	r3,r19,28
    a4a8:	2085883a 	add	r2,r4,r2
    a4ac:	9024d13a 	srli	r18,r18,4
    a4b0:	10800003 	ldbu	r2,0(r2)
    a4b4:	9826d13a 	srli	r19,r19,4
    a4b8:	ad7fffc4 	addi	r21,r21,-1
    a4bc:	1ca4b03a 	or	r18,r3,r18
    a4c0:	a8800005 	stb	r2,0(r21)
    a4c4:	94c4b03a 	or	r2,r18,r19
    a4c8:	103ff51e 	bne	r2,zero,a4a0 <__alt_data_end+0xff00a4a0>
    a4cc:	003e5906 	br	9e34 <__alt_data_end+0xff009e34>
    a4d0:	d9402117 	ldw	r5,132(sp)
    a4d4:	d9002017 	ldw	r4,128(sp)
    a4d8:	d9801a04 	addi	r6,sp,104
    a4dc:	00094a40 	call	94a4 <__sprint_r.part.0>
    a4e0:	103f891e 	bne	r2,zero,a308 <__alt_data_end+0xff00a308>
    a4e4:	d8801c17 	ldw	r2,112(sp)
    a4e8:	d811883a 	mov	r8,sp
    a4ec:	003f9506 	br	a344 <__alt_data_end+0xff00a344>
    a4f0:	d9402117 	ldw	r5,132(sp)
    a4f4:	d9002017 	ldw	r4,128(sp)
    a4f8:	d9801a04 	addi	r6,sp,104
    a4fc:	00094a40 	call	94a4 <__sprint_r.part.0>
    a500:	103f811e 	bne	r2,zero,a308 <__alt_data_end+0xff00a308>
    a504:	d811883a 	mov	r8,sp
    a508:	003ced06 	br	98c0 <__alt_data_end+0xff0098c0>
    a50c:	d9402117 	ldw	r5,132(sp)
    a510:	d9002017 	ldw	r4,128(sp)
    a514:	d9801a04 	addi	r6,sp,104
    a518:	da402c15 	stw	r9,176(sp)
    a51c:	db802a15 	stw	r14,168(sp)
    a520:	00094a40 	call	94a4 <__sprint_r.part.0>
    a524:	da402c17 	ldw	r9,176(sp)
    a528:	db802a17 	ldw	r14,168(sp)
    a52c:	103f761e 	bne	r2,zero,a308 <__alt_data_end+0xff00a308>
    a530:	d9401b17 	ldw	r5,108(sp)
    a534:	d8801c17 	ldw	r2,112(sp)
    a538:	d811883a 	mov	r8,sp
    a53c:	29000044 	addi	r4,r5,1
    a540:	003d5b06 	br	9ab0 <__alt_data_end+0xff009ab0>
    a544:	d9402117 	ldw	r5,132(sp)
    a548:	d9002017 	ldw	r4,128(sp)
    a54c:	d9801a04 	addi	r6,sp,104
    a550:	da402c15 	stw	r9,176(sp)
    a554:	00094a40 	call	94a4 <__sprint_r.part.0>
    a558:	da402c17 	ldw	r9,176(sp)
    a55c:	103f6a1e 	bne	r2,zero,a308 <__alt_data_end+0xff00a308>
    a560:	d9401b17 	ldw	r5,108(sp)
    a564:	d8801c17 	ldw	r2,112(sp)
    a568:	d811883a 	mov	r8,sp
    a56c:	29000044 	addi	r4,r5,1
    a570:	003f1006 	br	a1b4 <__alt_data_end+0xff00a1b4>
    a574:	1000c31e 	bne	r2,zero,a884 <___vfiprintf_internal_r+0x12cc>
    a578:	01000044 	movi	r4,1
    a57c:	000b883a 	mov	r5,zero
    a580:	d811883a 	mov	r8,sp
    a584:	003f0d06 	br	a1bc <__alt_data_end+0xff00a1bc>
    a588:	d9402117 	ldw	r5,132(sp)
    a58c:	d9002017 	ldw	r4,128(sp)
    a590:	d9801a04 	addi	r6,sp,104
    a594:	00094a40 	call	94a4 <__sprint_r.part.0>
    a598:	103f5b1e 	bne	r2,zero,a308 <__alt_data_end+0xff00a308>
    a59c:	d9001b17 	ldw	r4,108(sp)
    a5a0:	d8801c17 	ldw	r2,112(sp)
    a5a4:	d811883a 	mov	r8,sp
    a5a8:	21000044 	addi	r4,r4,1
    a5ac:	003d8006 	br	9bb0 <__alt_data_end+0xff009bb0>
    a5b0:	01000074 	movhi	r4,1
    a5b4:	21051c04 	addi	r4,r4,5232
    a5b8:	d9002615 	stw	r4,152(sp)
    a5bc:	d8c02215 	stw	r3,136(sp)
    a5c0:	1029883a 	mov	r20,r2
    a5c4:	94c4b03a 	or	r2,r18,r19
    a5c8:	103fb21e 	bne	r2,zero,a494 <__alt_data_end+0xff00a494>
    a5cc:	0039883a 	mov	fp,zero
    a5d0:	00800084 	movi	r2,2
    a5d4:	003e6b06 	br	9f84 <__alt_data_end+0xff009f84>
    a5d8:	da802217 	ldw	r10,136(sp)
    a5dc:	d8001d85 	stb	zero,118(sp)
    a5e0:	0027883a 	mov	r19,zero
    a5e4:	50800104 	addi	r2,r10,4
    a5e8:	54800017 	ldw	r18,0(r10)
    a5ec:	483e6016 	blt	r9,zero,9f70 <__alt_data_end+0xff009f70>
    a5f0:	00ffdfc4 	movi	r3,-129
    a5f4:	d8802215 	stw	r2,136(sp)
    a5f8:	a0e8703a 	and	r20,r20,r3
    a5fc:	0039883a 	mov	fp,zero
    a600:	903ebb26 	beq	r18,zero,a0f0 <__alt_data_end+0xff00a0f0>
    a604:	00800244 	movi	r2,9
    a608:	14bdee36 	bltu	r2,r18,9dc4 <__alt_data_end+0xff009dc4>
    a60c:	003eba06 	br	a0f8 <__alt_data_end+0xff00a0f8>
    a610:	00800c04 	movi	r2,48
    a614:	d8c01d45 	stb	r3,117(sp)
    a618:	d8801d05 	stb	r2,116(sp)
    a61c:	d8001d85 	stb	zero,118(sp)
    a620:	a0c00094 	ori	r3,r20,2
    a624:	4800a916 	blt	r9,zero,a8cc <___vfiprintf_internal_r+0x1314>
    a628:	00bfdfc4 	movi	r2,-129
    a62c:	a096703a 	and	r11,r20,r2
    a630:	5d000094 	ori	r20,r11,2
    a634:	0039883a 	mov	fp,zero
    a638:	003f9706 	br	a498 <__alt_data_end+0xff00a498>
    a63c:	8025883a 	mov	r18,r16
    a640:	003c2e06 	br	96fc <__alt_data_end+0xff0096fc>
    a644:	00800074 	movhi	r2,1
    a648:	10851c04 	addi	r2,r2,5232
    a64c:	0039883a 	mov	fp,zero
    a650:	d8802615 	stw	r2,152(sp)
    a654:	003f9006 	br	a498 <__alt_data_end+0xff00a498>
    a658:	04a5c83a 	sub	r18,zero,r18
    a65c:	07000b44 	movi	fp,45
    a660:	9004c03a 	cmpne	r2,r18,zero
    a664:	04e7c83a 	sub	r19,zero,r19
    a668:	df001d85 	stb	fp,118(sp)
    a66c:	98a7c83a 	sub	r19,r19,r2
    a670:	48009f16 	blt	r9,zero,a8f0 <___vfiprintf_internal_r+0x1338>
    a674:	00bfdfc4 	movi	r2,-129
    a678:	a0a8703a 	and	r20,r20,r2
    a67c:	003dd006 	br	9dc0 <__alt_data_end+0xff009dc0>
    a680:	70004c26 	beq	r14,zero,a7b4 <___vfiprintf_internal_r+0x11fc>
    a684:	00800084 	movi	r2,2
    a688:	d8c01d04 	addi	r3,sp,116
    a68c:	d8c00015 	stw	r3,0(sp)
    a690:	d8800115 	stw	r2,4(sp)
    a694:	01000044 	movi	r4,1
    a698:	d811883a 	mov	r8,sp
    a69c:	003f7306 	br	a46c <__alt_data_end+0xff00a46c>
    a6a0:	a080100c 	andi	r2,r20,64
    a6a4:	da802217 	ldw	r10,136(sp)
    a6a8:	103e0626 	beq	r2,zero,9ec4 <__alt_data_end+0xff009ec4>
    a6ac:	5480000f 	ldh	r18,0(r10)
    a6b0:	52800104 	addi	r10,r10,4
    a6b4:	da802215 	stw	r10,136(sp)
    a6b8:	9027d7fa 	srai	r19,r18,31
    a6bc:	9805883a 	mov	r2,r19
    a6c0:	003db806 	br	9da4 <__alt_data_end+0xff009da4>
    a6c4:	a080040c 	andi	r2,r20,16
    a6c8:	1000091e 	bne	r2,zero,a6f0 <___vfiprintf_internal_r+0x1138>
    a6cc:	a2c0100c 	andi	r11,r20,64
    a6d0:	58000726 	beq	r11,zero,a6f0 <___vfiprintf_internal_r+0x1138>
    a6d4:	da802217 	ldw	r10,136(sp)
    a6d8:	50800017 	ldw	r2,0(r10)
    a6dc:	52800104 	addi	r10,r10,4
    a6e0:	da802215 	stw	r10,136(sp)
    a6e4:	da802317 	ldw	r10,140(sp)
    a6e8:	1280000d 	sth	r10,0(r2)
    a6ec:	003be706 	br	968c <__alt_data_end+0xff00968c>
    a6f0:	da802217 	ldw	r10,136(sp)
    a6f4:	50800017 	ldw	r2,0(r10)
    a6f8:	52800104 	addi	r10,r10,4
    a6fc:	da802215 	stw	r10,136(sp)
    a700:	da802317 	ldw	r10,140(sp)
    a704:	12800015 	stw	r10,0(r2)
    a708:	003be006 	br	968c <__alt_data_end+0xff00968c>
    a70c:	a080100c 	andi	r2,r20,64
    a710:	da802217 	ldw	r10,136(sp)
    a714:	10003026 	beq	r2,zero,a7d8 <___vfiprintf_internal_r+0x1220>
    a718:	5480000b 	ldhu	r18,0(r10)
    a71c:	52800104 	addi	r10,r10,4
    a720:	0027883a 	mov	r19,zero
    a724:	da802215 	stw	r10,136(sp)
    a728:	003d8006 	br	9d2c <__alt_data_end+0xff009d2c>
    a72c:	80c00007 	ldb	r3,0(r16)
    a730:	003c0006 	br	9734 <__alt_data_end+0xff009734>
    a734:	a080100c 	andi	r2,r20,64
    a738:	d8001d85 	stb	zero,118(sp)
    a73c:	da802217 	ldw	r10,136(sp)
    a740:	1000201e 	bne	r2,zero,a7c4 <___vfiprintf_internal_r+0x120c>
    a744:	50800104 	addi	r2,r10,4
    a748:	54800017 	ldw	r18,0(r10)
    a74c:	0027883a 	mov	r19,zero
    a750:	483def0e 	bge	r9,zero,9f10 <__alt_data_end+0xff009f10>
    a754:	94c6b03a 	or	r3,r18,r19
    a758:	d8802215 	stw	r2,136(sp)
    a75c:	183d4e1e 	bne	r3,zero,9c98 <__alt_data_end+0xff009c98>
    a760:	0039883a 	mov	fp,zero
    a764:	0005883a 	mov	r2,zero
    a768:	003e0606 	br	9f84 <__alt_data_end+0xff009f84>
    a76c:	d9402117 	ldw	r5,132(sp)
    a770:	d9002017 	ldw	r4,128(sp)
    a774:	d9801a04 	addi	r6,sp,104
    a778:	da402c15 	stw	r9,176(sp)
    a77c:	db802a15 	stw	r14,168(sp)
    a780:	00094a40 	call	94a4 <__sprint_r.part.0>
    a784:	da402c17 	ldw	r9,176(sp)
    a788:	db802a17 	ldw	r14,168(sp)
    a78c:	103ede1e 	bne	r2,zero,a308 <__alt_data_end+0xff00a308>
    a790:	d9401b17 	ldw	r5,108(sp)
    a794:	d8801c17 	ldw	r2,112(sp)
    a798:	d811883a 	mov	r8,sp
    a79c:	29000044 	addi	r4,r5,1
    a7a0:	003e7406 	br	a174 <__alt_data_end+0xff00a174>
    a7a4:	00bfffc4 	movi	r2,-1
    a7a8:	003c5806 	br	990c <__alt_data_end+0xff00990c>
    a7ac:	d811883a 	mov	r8,sp
    a7b0:	003ee806 	br	a354 <__alt_data_end+0xff00a354>
    a7b4:	000b883a 	mov	r5,zero
    a7b8:	01000044 	movi	r4,1
    a7bc:	d811883a 	mov	r8,sp
    a7c0:	003e7c06 	br	a1b4 <__alt_data_end+0xff00a1b4>
    a7c4:	50800104 	addi	r2,r10,4
    a7c8:	5480000b 	ldhu	r18,0(r10)
    a7cc:	0027883a 	mov	r19,zero
    a7d0:	483dcf0e 	bge	r9,zero,9f10 <__alt_data_end+0xff009f10>
    a7d4:	003fdf06 	br	a754 <__alt_data_end+0xff00a754>
    a7d8:	54800017 	ldw	r18,0(r10)
    a7dc:	52800104 	addi	r10,r10,4
    a7e0:	0027883a 	mov	r19,zero
    a7e4:	da802215 	stw	r10,136(sp)
    a7e8:	003d5006 	br	9d2c <__alt_data_end+0xff009d2c>
    a7ec:	50800104 	addi	r2,r10,4
    a7f0:	5480000b 	ldhu	r18,0(r10)
    a7f4:	0027883a 	mov	r19,zero
    a7f8:	483f7d0e 	bge	r9,zero,a5f0 <__alt_data_end+0xff00a5f0>
    a7fc:	003ddc06 	br	9f70 <__alt_data_end+0xff009f70>
    a800:	d8c02215 	stw	r3,136(sp)
    a804:	0039883a 	mov	fp,zero
    a808:	003ddb06 	br	9f78 <__alt_data_end+0xff009f78>
    a80c:	02800074 	movhi	r10,1
    a810:	52857d04 	addi	r10,r10,5620
    a814:	da802415 	stw	r10,144(sp)
    a818:	003e8306 	br	a228 <__alt_data_end+0xff00a228>
    a81c:	d8801c17 	ldw	r2,112(sp)
    a820:	dd002117 	ldw	r20,132(sp)
    a824:	103eb926 	beq	r2,zero,a30c <__alt_data_end+0xff00a30c>
    a828:	d9002017 	ldw	r4,128(sp)
    a82c:	d9801a04 	addi	r6,sp,104
    a830:	a00b883a 	mov	r5,r20
    a834:	00094a40 	call	94a4 <__sprint_r.part.0>
    a838:	003eb406 	br	a30c <__alt_data_end+0xff00a30c>
    a83c:	80c00043 	ldbu	r3,1(r16)
    a840:	a5000814 	ori	r20,r20,32
    a844:	84000044 	addi	r16,r16,1
    a848:	18c03fcc 	andi	r3,r3,255
    a84c:	18c0201c 	xori	r3,r3,128
    a850:	18ffe004 	addi	r3,r3,-128
    a854:	003bb706 	br	9734 <__alt_data_end+0xff009734>
    a858:	a809883a 	mov	r4,r21
    a85c:	d8c02a15 	stw	r3,168(sp)
    a860:	da002b15 	stw	r8,172(sp)
    a864:	000276c0 	call	276c <strlen>
    a868:	d8c02a17 	ldw	r3,168(sp)
    a86c:	1027883a 	mov	r19,r2
    a870:	df001d83 	ldbu	fp,118(sp)
    a874:	d8c02215 	stw	r3,136(sp)
    a878:	0013883a 	mov	r9,zero
    a87c:	da002b17 	ldw	r8,172(sp)
    a880:	003c4d06 	br	99b8 <__alt_data_end+0xff0099b8>
    a884:	d9402117 	ldw	r5,132(sp)
    a888:	d9002017 	ldw	r4,128(sp)
    a88c:	d9801a04 	addi	r6,sp,104
    a890:	da402c15 	stw	r9,176(sp)
    a894:	00094a40 	call	94a4 <__sprint_r.part.0>
    a898:	da402c17 	ldw	r9,176(sp)
    a89c:	103e9a1e 	bne	r2,zero,a308 <__alt_data_end+0xff00a308>
    a8a0:	d9401b17 	ldw	r5,108(sp)
    a8a4:	d8801c17 	ldw	r2,112(sp)
    a8a8:	d811883a 	mov	r8,sp
    a8ac:	29000044 	addi	r4,r5,1
    a8b0:	003e4206 	br	a1bc <__alt_data_end+0xff00a1bc>
    a8b4:	d9401b17 	ldw	r5,108(sp)
    a8b8:	01000074 	movhi	r4,1
    a8bc:	21058104 	addi	r4,r4,5636
    a8c0:	d9002415 	stw	r4,144(sp)
    a8c4:	29400044 	addi	r5,r5,1
    a8c8:	003c6d06 	br	9a80 <__alt_data_end+0xff009a80>
    a8cc:	0039883a 	mov	fp,zero
    a8d0:	00800084 	movi	r2,2
    a8d4:	10803fcc 	andi	r2,r2,255
    a8d8:	01000044 	movi	r4,1
    a8dc:	11001e26 	beq	r2,r4,a958 <___vfiprintf_internal_r+0x13a0>
    a8e0:	01000084 	movi	r4,2
    a8e4:	11001e1e 	bne	r2,r4,a960 <___vfiprintf_internal_r+0x13a8>
    a8e8:	1829883a 	mov	r20,r3
    a8ec:	003eea06 	br	a498 <__alt_data_end+0xff00a498>
    a8f0:	a007883a 	mov	r3,r20
    a8f4:	00800044 	movi	r2,1
    a8f8:	003ff606 	br	a8d4 <__alt_data_end+0xff00a8d4>
    a8fc:	00800184 	movi	r2,6
    a900:	1240012e 	bgeu	r2,r9,a908 <___vfiprintf_internal_r+0x1350>
    a904:	1013883a 	mov	r9,r2
    a908:	4827883a 	mov	r19,r9
    a90c:	4825883a 	mov	r18,r9
    a910:	48001516 	blt	r9,zero,a968 <___vfiprintf_internal_r+0x13b0>
    a914:	05400074 	movhi	r21,1
    a918:	d8c02215 	stw	r3,136(sp)
    a91c:	ad452104 	addi	r21,r21,5252
    a920:	003d1406 	br	9d74 <__alt_data_end+0xff009d74>
    a924:	02800074 	movhi	r10,1
    a928:	52857d04 	addi	r10,r10,5620
    a92c:	da802415 	stw	r10,144(sp)
    a930:	200d883a 	mov	r6,r4
    a934:	003c9106 	br	9b7c <__alt_data_end+0xff009b7c>
    a938:	5021883a 	mov	r16,r10
    a93c:	0013883a 	mov	r9,zero
    a940:	003b7d06 	br	9738 <__alt_data_end+0xff009738>
    a944:	4827883a 	mov	r19,r9
    a948:	df001d83 	ldbu	fp,118(sp)
    a94c:	d8c02215 	stw	r3,136(sp)
    a950:	0013883a 	mov	r9,zero
    a954:	003c1806 	br	99b8 <__alt_data_end+0xff0099b8>
    a958:	1829883a 	mov	r20,r3
    a95c:	003d1806 	br	9dc0 <__alt_data_end+0xff009dc0>
    a960:	1829883a 	mov	r20,r3
    a964:	003ccd06 	br	9c9c <__alt_data_end+0xff009c9c>
    a968:	0025883a 	mov	r18,zero
    a96c:	003fe906 	br	a914 <__alt_data_end+0xff00a914>
    a970:	d8802217 	ldw	r2,136(sp)
    a974:	80c00043 	ldbu	r3,1(r16)
    a978:	5021883a 	mov	r16,r10
    a97c:	12400017 	ldw	r9,0(r2)
    a980:	10800104 	addi	r2,r2,4
    a984:	d8802215 	stw	r2,136(sp)
    a988:	483faf0e 	bge	r9,zero,a848 <__alt_data_end+0xff00a848>
    a98c:	18c03fcc 	andi	r3,r3,255
    a990:	18c0201c 	xori	r3,r3,128
    a994:	027fffc4 	movi	r9,-1
    a998:	18ffe004 	addi	r3,r3,-128
    a99c:	003b6506 	br	9734 <__alt_data_end+0xff009734>
    a9a0:	d9c01d85 	stb	r7,118(sp)
    a9a4:	003ca006 	br	9c28 <__alt_data_end+0xff009c28>
    a9a8:	d9c01d85 	stb	r7,118(sp)
    a9ac:	003cad06 	br	9c64 <__alt_data_end+0xff009c64>
    a9b0:	d9c01d85 	stb	r7,118(sp)
    a9b4:	003d7d06 	br	9fac <__alt_data_end+0xff009fac>
    a9b8:	d9c01d85 	stb	r7,118(sp)
    a9bc:	003d5f06 	br	9f3c <__alt_data_end+0xff009f3c>
    a9c0:	a080004c 	andi	r2,r20,1
    a9c4:	0039883a 	mov	fp,zero
    a9c8:	10000526 	beq	r2,zero,a9e0 <___vfiprintf_internal_r+0x1428>
    a9cc:	00800c04 	movi	r2,48
    a9d0:	d88019c5 	stb	r2,103(sp)
    a9d4:	dcc02717 	ldw	r19,156(sp)
    a9d8:	dd4019c4 	addi	r21,sp,103
    a9dc:	003bf606 	br	99b8 <__alt_data_end+0xff0099b8>
    a9e0:	0027883a 	mov	r19,zero
    a9e4:	dd401a04 	addi	r21,sp,104
    a9e8:	003bf306 	br	99b8 <__alt_data_end+0xff0099b8>
    a9ec:	d9c01d85 	stb	r7,118(sp)
    a9f0:	003dc806 	br	a114 <__alt_data_end+0xff00a114>
    a9f4:	d9c01d85 	stb	r7,118(sp)
    a9f8:	003d3a06 	br	9ee4 <__alt_data_end+0xff009ee4>
    a9fc:	d9c01d85 	stb	r7,118(sp)
    aa00:	003d2a06 	br	9eac <__alt_data_end+0xff009eac>
    aa04:	d9c01d85 	stb	r7,118(sp)
    aa08:	003cde06 	br	9d84 <__alt_data_end+0xff009d84>
    aa0c:	d9c01d85 	stb	r7,118(sp)
    aa10:	003cbc06 	br	9d04 <__alt_data_end+0xff009d04>

0000aa14 <__vfiprintf_internal>:
    aa14:	00800074 	movhi	r2,1
    aa18:	108c7e04 	addi	r2,r2,12792
    aa1c:	300f883a 	mov	r7,r6
    aa20:	280d883a 	mov	r6,r5
    aa24:	200b883a 	mov	r5,r4
    aa28:	11000017 	ldw	r4,0(r2)
    aa2c:	00095b81 	jmpi	95b8 <___vfiprintf_internal_r>

0000aa30 <__sbprintf>:
    aa30:	2880030b 	ldhu	r2,12(r5)
    aa34:	2ac01917 	ldw	r11,100(r5)
    aa38:	2a80038b 	ldhu	r10,14(r5)
    aa3c:	2a400717 	ldw	r9,28(r5)
    aa40:	2a000917 	ldw	r8,36(r5)
    aa44:	defee204 	addi	sp,sp,-1144
    aa48:	00c10004 	movi	r3,1024
    aa4c:	dc011a15 	stw	r16,1128(sp)
    aa50:	10bfff4c 	andi	r2,r2,65533
    aa54:	2821883a 	mov	r16,r5
    aa58:	d8cb883a 	add	r5,sp,r3
    aa5c:	dc811c15 	stw	r18,1136(sp)
    aa60:	dc411b15 	stw	r17,1132(sp)
    aa64:	dfc11d15 	stw	ra,1140(sp)
    aa68:	2025883a 	mov	r18,r4
    aa6c:	d881030d 	sth	r2,1036(sp)
    aa70:	dac11915 	stw	r11,1124(sp)
    aa74:	da81038d 	sth	r10,1038(sp)
    aa78:	da410715 	stw	r9,1052(sp)
    aa7c:	da010915 	stw	r8,1060(sp)
    aa80:	dec10015 	stw	sp,1024(sp)
    aa84:	dec10415 	stw	sp,1040(sp)
    aa88:	d8c10215 	stw	r3,1032(sp)
    aa8c:	d8c10515 	stw	r3,1044(sp)
    aa90:	d8010615 	stw	zero,1048(sp)
    aa94:	00095b80 	call	95b8 <___vfiprintf_internal_r>
    aa98:	1023883a 	mov	r17,r2
    aa9c:	10000416 	blt	r2,zero,aab0 <__sbprintf+0x80>
    aaa0:	d9410004 	addi	r5,sp,1024
    aaa4:	9009883a 	mov	r4,r18
    aaa8:	00066cc0 	call	66cc <_fflush_r>
    aaac:	10000d1e 	bne	r2,zero,aae4 <__sbprintf+0xb4>
    aab0:	d881030b 	ldhu	r2,1036(sp)
    aab4:	1080100c 	andi	r2,r2,64
    aab8:	10000326 	beq	r2,zero,aac8 <__sbprintf+0x98>
    aabc:	8080030b 	ldhu	r2,12(r16)
    aac0:	10801014 	ori	r2,r2,64
    aac4:	8080030d 	sth	r2,12(r16)
    aac8:	8805883a 	mov	r2,r17
    aacc:	dfc11d17 	ldw	ra,1140(sp)
    aad0:	dc811c17 	ldw	r18,1136(sp)
    aad4:	dc411b17 	ldw	r17,1132(sp)
    aad8:	dc011a17 	ldw	r16,1128(sp)
    aadc:	dec11e04 	addi	sp,sp,1144
    aae0:	f800283a 	ret
    aae4:	047fffc4 	movi	r17,-1
    aae8:	003ff106 	br	aab0 <__alt_data_end+0xff00aab0>

0000aaec <_write_r>:
    aaec:	defffd04 	addi	sp,sp,-12
    aaf0:	2805883a 	mov	r2,r5
    aaf4:	dc000015 	stw	r16,0(sp)
    aaf8:	04000074 	movhi	r16,1
    aafc:	dc400115 	stw	r17,4(sp)
    ab00:	300b883a 	mov	r5,r6
    ab04:	84135304 	addi	r16,r16,19788
    ab08:	2023883a 	mov	r17,r4
    ab0c:	380d883a 	mov	r6,r7
    ab10:	1009883a 	mov	r4,r2
    ab14:	dfc00215 	stw	ra,8(sp)
    ab18:	80000015 	stw	zero,0(r16)
    ab1c:	000edb40 	call	edb4 <write>
    ab20:	00ffffc4 	movi	r3,-1
    ab24:	10c00526 	beq	r2,r3,ab3c <_write_r+0x50>
    ab28:	dfc00217 	ldw	ra,8(sp)
    ab2c:	dc400117 	ldw	r17,4(sp)
    ab30:	dc000017 	ldw	r16,0(sp)
    ab34:	dec00304 	addi	sp,sp,12
    ab38:	f800283a 	ret
    ab3c:	80c00017 	ldw	r3,0(r16)
    ab40:	183ff926 	beq	r3,zero,ab28 <__alt_data_end+0xff00ab28>
    ab44:	88c00015 	stw	r3,0(r17)
    ab48:	003ff706 	br	ab28 <__alt_data_end+0xff00ab28>

0000ab4c <_close_r>:
    ab4c:	defffd04 	addi	sp,sp,-12
    ab50:	dc000015 	stw	r16,0(sp)
    ab54:	04000074 	movhi	r16,1
    ab58:	dc400115 	stw	r17,4(sp)
    ab5c:	84135304 	addi	r16,r16,19788
    ab60:	2023883a 	mov	r17,r4
    ab64:	2809883a 	mov	r4,r5
    ab68:	dfc00215 	stw	ra,8(sp)
    ab6c:	80000015 	stw	zero,0(r16)
    ab70:	000e5740 	call	e574 <close>
    ab74:	00ffffc4 	movi	r3,-1
    ab78:	10c00526 	beq	r2,r3,ab90 <_close_r+0x44>
    ab7c:	dfc00217 	ldw	ra,8(sp)
    ab80:	dc400117 	ldw	r17,4(sp)
    ab84:	dc000017 	ldw	r16,0(sp)
    ab88:	dec00304 	addi	sp,sp,12
    ab8c:	f800283a 	ret
    ab90:	80c00017 	ldw	r3,0(r16)
    ab94:	183ff926 	beq	r3,zero,ab7c <__alt_data_end+0xff00ab7c>
    ab98:	88c00015 	stw	r3,0(r17)
    ab9c:	003ff706 	br	ab7c <__alt_data_end+0xff00ab7c>

0000aba0 <_calloc_r>:
    aba0:	298b383a 	mul	r5,r5,r6
    aba4:	defffe04 	addi	sp,sp,-8
    aba8:	dfc00115 	stw	ra,4(sp)
    abac:	dc000015 	stw	r16,0(sp)
    abb0:	0001dcc0 	call	1dcc <_malloc_r>
    abb4:	10002926 	beq	r2,zero,ac5c <_calloc_r+0xbc>
    abb8:	11bfff17 	ldw	r6,-4(r2)
    abbc:	1021883a 	mov	r16,r2
    abc0:	00bfff04 	movi	r2,-4
    abc4:	308c703a 	and	r6,r6,r2
    abc8:	00c00904 	movi	r3,36
    abcc:	308d883a 	add	r6,r6,r2
    abd0:	19801636 	bltu	r3,r6,ac2c <_calloc_r+0x8c>
    abd4:	008004c4 	movi	r2,19
    abd8:	11800b2e 	bgeu	r2,r6,ac08 <_calloc_r+0x68>
    abdc:	80000015 	stw	zero,0(r16)
    abe0:	80000115 	stw	zero,4(r16)
    abe4:	008006c4 	movi	r2,27
    abe8:	11801a2e 	bgeu	r2,r6,ac54 <_calloc_r+0xb4>
    abec:	80000215 	stw	zero,8(r16)
    abf0:	80000315 	stw	zero,12(r16)
    abf4:	30c0151e 	bne	r6,r3,ac4c <_calloc_r+0xac>
    abf8:	80000415 	stw	zero,16(r16)
    abfc:	80800604 	addi	r2,r16,24
    ac00:	80000515 	stw	zero,20(r16)
    ac04:	00000106 	br	ac0c <_calloc_r+0x6c>
    ac08:	8005883a 	mov	r2,r16
    ac0c:	10000015 	stw	zero,0(r2)
    ac10:	10000115 	stw	zero,4(r2)
    ac14:	10000215 	stw	zero,8(r2)
    ac18:	8005883a 	mov	r2,r16
    ac1c:	dfc00117 	ldw	ra,4(sp)
    ac20:	dc000017 	ldw	r16,0(sp)
    ac24:	dec00204 	addi	sp,sp,8
    ac28:	f800283a 	ret
    ac2c:	000b883a 	mov	r5,zero
    ac30:	8009883a 	mov	r4,r16
    ac34:	0007b900 	call	7b90 <memset>
    ac38:	8005883a 	mov	r2,r16
    ac3c:	dfc00117 	ldw	ra,4(sp)
    ac40:	dc000017 	ldw	r16,0(sp)
    ac44:	dec00204 	addi	sp,sp,8
    ac48:	f800283a 	ret
    ac4c:	80800404 	addi	r2,r16,16
    ac50:	003fee06 	br	ac0c <__alt_data_end+0xff00ac0c>
    ac54:	80800204 	addi	r2,r16,8
    ac58:	003fec06 	br	ac0c <__alt_data_end+0xff00ac0c>
    ac5c:	0005883a 	mov	r2,zero
    ac60:	003fee06 	br	ac1c <__alt_data_end+0xff00ac1c>

0000ac64 <_fclose_r>:
    ac64:	28003926 	beq	r5,zero,ad4c <_fclose_r+0xe8>
    ac68:	defffc04 	addi	sp,sp,-16
    ac6c:	dc400115 	stw	r17,4(sp)
    ac70:	dc000015 	stw	r16,0(sp)
    ac74:	dfc00315 	stw	ra,12(sp)
    ac78:	dc800215 	stw	r18,8(sp)
    ac7c:	2023883a 	mov	r17,r4
    ac80:	2821883a 	mov	r16,r5
    ac84:	20000226 	beq	r4,zero,ac90 <_fclose_r+0x2c>
    ac88:	20800e17 	ldw	r2,56(r4)
    ac8c:	10002726 	beq	r2,zero,ad2c <_fclose_r+0xc8>
    ac90:	8080030f 	ldh	r2,12(r16)
    ac94:	1000071e 	bne	r2,zero,acb4 <_fclose_r+0x50>
    ac98:	0005883a 	mov	r2,zero
    ac9c:	dfc00317 	ldw	ra,12(sp)
    aca0:	dc800217 	ldw	r18,8(sp)
    aca4:	dc400117 	ldw	r17,4(sp)
    aca8:	dc000017 	ldw	r16,0(sp)
    acac:	dec00404 	addi	sp,sp,16
    acb0:	f800283a 	ret
    acb4:	800b883a 	mov	r5,r16
    acb8:	8809883a 	mov	r4,r17
    acbc:	00064b00 	call	64b0 <__sflush_r>
    acc0:	1025883a 	mov	r18,r2
    acc4:	80800b17 	ldw	r2,44(r16)
    acc8:	10000426 	beq	r2,zero,acdc <_fclose_r+0x78>
    accc:	81400717 	ldw	r5,28(r16)
    acd0:	8809883a 	mov	r4,r17
    acd4:	103ee83a 	callr	r2
    acd8:	10001616 	blt	r2,zero,ad34 <_fclose_r+0xd0>
    acdc:	8080030b 	ldhu	r2,12(r16)
    ace0:	1080200c 	andi	r2,r2,128
    ace4:	1000151e 	bne	r2,zero,ad3c <_fclose_r+0xd8>
    ace8:	81400c17 	ldw	r5,48(r16)
    acec:	28000526 	beq	r5,zero,ad04 <_fclose_r+0xa0>
    acf0:	80801004 	addi	r2,r16,64
    acf4:	28800226 	beq	r5,r2,ad00 <_fclose_r+0x9c>
    acf8:	8809883a 	mov	r4,r17
    acfc:	0006c1c0 	call	6c1c <_free_r>
    ad00:	80000c15 	stw	zero,48(r16)
    ad04:	81401117 	ldw	r5,68(r16)
    ad08:	28000326 	beq	r5,zero,ad18 <_fclose_r+0xb4>
    ad0c:	8809883a 	mov	r4,r17
    ad10:	0006c1c0 	call	6c1c <_free_r>
    ad14:	80001115 	stw	zero,68(r16)
    ad18:	0006ab80 	call	6ab8 <__sfp_lock_acquire>
    ad1c:	8000030d 	sth	zero,12(r16)
    ad20:	0006abc0 	call	6abc <__sfp_lock_release>
    ad24:	9005883a 	mov	r2,r18
    ad28:	003fdc06 	br	ac9c <__alt_data_end+0xff00ac9c>
    ad2c:	0006aa80 	call	6aa8 <__sinit>
    ad30:	003fd706 	br	ac90 <__alt_data_end+0xff00ac90>
    ad34:	04bfffc4 	movi	r18,-1
    ad38:	003fe806 	br	acdc <__alt_data_end+0xff00acdc>
    ad3c:	81400417 	ldw	r5,16(r16)
    ad40:	8809883a 	mov	r4,r17
    ad44:	0006c1c0 	call	6c1c <_free_r>
    ad48:	003fe706 	br	ace8 <__alt_data_end+0xff00ace8>
    ad4c:	0005883a 	mov	r2,zero
    ad50:	f800283a 	ret

0000ad54 <fclose>:
    ad54:	00800074 	movhi	r2,1
    ad58:	108c7e04 	addi	r2,r2,12792
    ad5c:	200b883a 	mov	r5,r4
    ad60:	11000017 	ldw	r4,0(r2)
    ad64:	000ac641 	jmpi	ac64 <_fclose_r>

0000ad68 <__fputwc>:
    ad68:	defff804 	addi	sp,sp,-32
    ad6c:	dcc00415 	stw	r19,16(sp)
    ad70:	dc800315 	stw	r18,12(sp)
    ad74:	dc000115 	stw	r16,4(sp)
    ad78:	dfc00715 	stw	ra,28(sp)
    ad7c:	dd400615 	stw	r21,24(sp)
    ad80:	dd000515 	stw	r20,20(sp)
    ad84:	dc400215 	stw	r17,8(sp)
    ad88:	2027883a 	mov	r19,r4
    ad8c:	2825883a 	mov	r18,r5
    ad90:	3021883a 	mov	r16,r6
    ad94:	00075f80 	call	75f8 <__locale_mb_cur_max>
    ad98:	00c00044 	movi	r3,1
    ad9c:	10c03e26 	beq	r2,r3,ae98 <__fputwc+0x130>
    ada0:	81c01704 	addi	r7,r16,92
    ada4:	900d883a 	mov	r6,r18
    ada8:	d80b883a 	mov	r5,sp
    adac:	9809883a 	mov	r4,r19
    adb0:	000b2380 	call	b238 <_wcrtomb_r>
    adb4:	1029883a 	mov	r20,r2
    adb8:	00bfffc4 	movi	r2,-1
    adbc:	a0802026 	beq	r20,r2,ae40 <__fputwc+0xd8>
    adc0:	d9400003 	ldbu	r5,0(sp)
    adc4:	a0001c26 	beq	r20,zero,ae38 <__fputwc+0xd0>
    adc8:	0023883a 	mov	r17,zero
    adcc:	05400284 	movi	r21,10
    add0:	00000906 	br	adf8 <__fputwc+0x90>
    add4:	80800017 	ldw	r2,0(r16)
    add8:	11400005 	stb	r5,0(r2)
    addc:	80c00017 	ldw	r3,0(r16)
    ade0:	18c00044 	addi	r3,r3,1
    ade4:	80c00015 	stw	r3,0(r16)
    ade8:	8c400044 	addi	r17,r17,1
    adec:	dc45883a 	add	r2,sp,r17
    adf0:	8d00112e 	bgeu	r17,r20,ae38 <__fputwc+0xd0>
    adf4:	11400003 	ldbu	r5,0(r2)
    adf8:	80c00217 	ldw	r3,8(r16)
    adfc:	18ffffc4 	addi	r3,r3,-1
    ae00:	80c00215 	stw	r3,8(r16)
    ae04:	183ff30e 	bge	r3,zero,add4 <__alt_data_end+0xff00add4>
    ae08:	80800617 	ldw	r2,24(r16)
    ae0c:	18801916 	blt	r3,r2,ae74 <__fputwc+0x10c>
    ae10:	80800017 	ldw	r2,0(r16)
    ae14:	11400005 	stb	r5,0(r2)
    ae18:	80800017 	ldw	r2,0(r16)
    ae1c:	10c00003 	ldbu	r3,0(r2)
    ae20:	10800044 	addi	r2,r2,1
    ae24:	1d402326 	beq	r3,r21,aeb4 <__fputwc+0x14c>
    ae28:	80800015 	stw	r2,0(r16)
    ae2c:	8c400044 	addi	r17,r17,1
    ae30:	dc45883a 	add	r2,sp,r17
    ae34:	8d3fef36 	bltu	r17,r20,adf4 <__alt_data_end+0xff00adf4>
    ae38:	9005883a 	mov	r2,r18
    ae3c:	00000406 	br	ae50 <__fputwc+0xe8>
    ae40:	80c0030b 	ldhu	r3,12(r16)
    ae44:	a005883a 	mov	r2,r20
    ae48:	18c01014 	ori	r3,r3,64
    ae4c:	80c0030d 	sth	r3,12(r16)
    ae50:	dfc00717 	ldw	ra,28(sp)
    ae54:	dd400617 	ldw	r21,24(sp)
    ae58:	dd000517 	ldw	r20,20(sp)
    ae5c:	dcc00417 	ldw	r19,16(sp)
    ae60:	dc800317 	ldw	r18,12(sp)
    ae64:	dc400217 	ldw	r17,8(sp)
    ae68:	dc000117 	ldw	r16,4(sp)
    ae6c:	dec00804 	addi	sp,sp,32
    ae70:	f800283a 	ret
    ae74:	800d883a 	mov	r6,r16
    ae78:	29403fcc 	andi	r5,r5,255
    ae7c:	9809883a 	mov	r4,r19
    ae80:	000b0e00 	call	b0e0 <__swbuf_r>
    ae84:	10bfffe0 	cmpeqi	r2,r2,-1
    ae88:	10803fcc 	andi	r2,r2,255
    ae8c:	103fd626 	beq	r2,zero,ade8 <__alt_data_end+0xff00ade8>
    ae90:	00bfffc4 	movi	r2,-1
    ae94:	003fee06 	br	ae50 <__alt_data_end+0xff00ae50>
    ae98:	90ffffc4 	addi	r3,r18,-1
    ae9c:	01003f84 	movi	r4,254
    aea0:	20ffbf36 	bltu	r4,r3,ada0 <__alt_data_end+0xff00ada0>
    aea4:	900b883a 	mov	r5,r18
    aea8:	dc800005 	stb	r18,0(sp)
    aeac:	1029883a 	mov	r20,r2
    aeb0:	003fc506 	br	adc8 <__alt_data_end+0xff00adc8>
    aeb4:	800d883a 	mov	r6,r16
    aeb8:	a80b883a 	mov	r5,r21
    aebc:	9809883a 	mov	r4,r19
    aec0:	000b0e00 	call	b0e0 <__swbuf_r>
    aec4:	10bfffe0 	cmpeqi	r2,r2,-1
    aec8:	003fef06 	br	ae88 <__alt_data_end+0xff00ae88>

0000aecc <_fputwc_r>:
    aecc:	3080030b 	ldhu	r2,12(r6)
    aed0:	10c8000c 	andi	r3,r2,8192
    aed4:	1800051e 	bne	r3,zero,aeec <_fputwc_r+0x20>
    aed8:	30c01917 	ldw	r3,100(r6)
    aedc:	10880014 	ori	r2,r2,8192
    aee0:	3080030d 	sth	r2,12(r6)
    aee4:	18880014 	ori	r2,r3,8192
    aee8:	30801915 	stw	r2,100(r6)
    aeec:	000ad681 	jmpi	ad68 <__fputwc>

0000aef0 <fputwc>:
    aef0:	00800074 	movhi	r2,1
    aef4:	defffc04 	addi	sp,sp,-16
    aef8:	108c7e04 	addi	r2,r2,12792
    aefc:	dc000115 	stw	r16,4(sp)
    af00:	14000017 	ldw	r16,0(r2)
    af04:	dc400215 	stw	r17,8(sp)
    af08:	dfc00315 	stw	ra,12(sp)
    af0c:	2023883a 	mov	r17,r4
    af10:	80000226 	beq	r16,zero,af1c <fputwc+0x2c>
    af14:	80800e17 	ldw	r2,56(r16)
    af18:	10001026 	beq	r2,zero,af5c <fputwc+0x6c>
    af1c:	2880030b 	ldhu	r2,12(r5)
    af20:	10c8000c 	andi	r3,r2,8192
    af24:	1800051e 	bne	r3,zero,af3c <fputwc+0x4c>
    af28:	28c01917 	ldw	r3,100(r5)
    af2c:	10880014 	ori	r2,r2,8192
    af30:	2880030d 	sth	r2,12(r5)
    af34:	18880014 	ori	r2,r3,8192
    af38:	28801915 	stw	r2,100(r5)
    af3c:	280d883a 	mov	r6,r5
    af40:	8009883a 	mov	r4,r16
    af44:	880b883a 	mov	r5,r17
    af48:	dfc00317 	ldw	ra,12(sp)
    af4c:	dc400217 	ldw	r17,8(sp)
    af50:	dc000117 	ldw	r16,4(sp)
    af54:	dec00404 	addi	sp,sp,16
    af58:	000ad681 	jmpi	ad68 <__fputwc>
    af5c:	8009883a 	mov	r4,r16
    af60:	d9400015 	stw	r5,0(sp)
    af64:	0006aa80 	call	6aa8 <__sinit>
    af68:	d9400017 	ldw	r5,0(sp)
    af6c:	003feb06 	br	af1c <__alt_data_end+0xff00af1c>

0000af70 <_fstat_r>:
    af70:	defffd04 	addi	sp,sp,-12
    af74:	2805883a 	mov	r2,r5
    af78:	dc000015 	stw	r16,0(sp)
    af7c:	04000074 	movhi	r16,1
    af80:	dc400115 	stw	r17,4(sp)
    af84:	84135304 	addi	r16,r16,19788
    af88:	2023883a 	mov	r17,r4
    af8c:	300b883a 	mov	r5,r6
    af90:	1009883a 	mov	r4,r2
    af94:	dfc00215 	stw	ra,8(sp)
    af98:	80000015 	stw	zero,0(r16)
    af9c:	000e6ac0 	call	e6ac <fstat>
    afa0:	00ffffc4 	movi	r3,-1
    afa4:	10c00526 	beq	r2,r3,afbc <_fstat_r+0x4c>
    afa8:	dfc00217 	ldw	ra,8(sp)
    afac:	dc400117 	ldw	r17,4(sp)
    afb0:	dc000017 	ldw	r16,0(sp)
    afb4:	dec00304 	addi	sp,sp,12
    afb8:	f800283a 	ret
    afbc:	80c00017 	ldw	r3,0(r16)
    afc0:	183ff926 	beq	r3,zero,afa8 <__alt_data_end+0xff00afa8>
    afc4:	88c00015 	stw	r3,0(r17)
    afc8:	003ff706 	br	afa8 <__alt_data_end+0xff00afa8>

0000afcc <_isatty_r>:
    afcc:	defffd04 	addi	sp,sp,-12
    afd0:	dc000015 	stw	r16,0(sp)
    afd4:	04000074 	movhi	r16,1
    afd8:	dc400115 	stw	r17,4(sp)
    afdc:	84135304 	addi	r16,r16,19788
    afe0:	2023883a 	mov	r17,r4
    afe4:	2809883a 	mov	r4,r5
    afe8:	dfc00215 	stw	ra,8(sp)
    afec:	80000015 	stw	zero,0(r16)
    aff0:	000e7980 	call	e798 <isatty>
    aff4:	00ffffc4 	movi	r3,-1
    aff8:	10c00526 	beq	r2,r3,b010 <_isatty_r+0x44>
    affc:	dfc00217 	ldw	ra,8(sp)
    b000:	dc400117 	ldw	r17,4(sp)
    b004:	dc000017 	ldw	r16,0(sp)
    b008:	dec00304 	addi	sp,sp,12
    b00c:	f800283a 	ret
    b010:	80c00017 	ldw	r3,0(r16)
    b014:	183ff926 	beq	r3,zero,affc <__alt_data_end+0xff00affc>
    b018:	88c00015 	stw	r3,0(r17)
    b01c:	003ff706 	br	affc <__alt_data_end+0xff00affc>

0000b020 <_lseek_r>:
    b020:	defffd04 	addi	sp,sp,-12
    b024:	2805883a 	mov	r2,r5
    b028:	dc000015 	stw	r16,0(sp)
    b02c:	04000074 	movhi	r16,1
    b030:	dc400115 	stw	r17,4(sp)
    b034:	300b883a 	mov	r5,r6
    b038:	84135304 	addi	r16,r16,19788
    b03c:	2023883a 	mov	r17,r4
    b040:	380d883a 	mov	r6,r7
    b044:	1009883a 	mov	r4,r2
    b048:	dfc00215 	stw	ra,8(sp)
    b04c:	80000015 	stw	zero,0(r16)
    b050:	000e9640 	call	e964 <lseek>
    b054:	00ffffc4 	movi	r3,-1
    b058:	10c00526 	beq	r2,r3,b070 <_lseek_r+0x50>
    b05c:	dfc00217 	ldw	ra,8(sp)
    b060:	dc400117 	ldw	r17,4(sp)
    b064:	dc000017 	ldw	r16,0(sp)
    b068:	dec00304 	addi	sp,sp,12
    b06c:	f800283a 	ret
    b070:	80c00017 	ldw	r3,0(r16)
    b074:	183ff926 	beq	r3,zero,b05c <__alt_data_end+0xff00b05c>
    b078:	88c00015 	stw	r3,0(r17)
    b07c:	003ff706 	br	b05c <__alt_data_end+0xff00b05c>

0000b080 <_read_r>:
    b080:	defffd04 	addi	sp,sp,-12
    b084:	2805883a 	mov	r2,r5
    b088:	dc000015 	stw	r16,0(sp)
    b08c:	04000074 	movhi	r16,1
    b090:	dc400115 	stw	r17,4(sp)
    b094:	300b883a 	mov	r5,r6
    b098:	84135304 	addi	r16,r16,19788
    b09c:	2023883a 	mov	r17,r4
    b0a0:	380d883a 	mov	r6,r7
    b0a4:	1009883a 	mov	r4,r2
    b0a8:	dfc00215 	stw	ra,8(sp)
    b0ac:	80000015 	stw	zero,0(r16)
    b0b0:	000eb380 	call	eb38 <read>
    b0b4:	00ffffc4 	movi	r3,-1
    b0b8:	10c00526 	beq	r2,r3,b0d0 <_read_r+0x50>
    b0bc:	dfc00217 	ldw	ra,8(sp)
    b0c0:	dc400117 	ldw	r17,4(sp)
    b0c4:	dc000017 	ldw	r16,0(sp)
    b0c8:	dec00304 	addi	sp,sp,12
    b0cc:	f800283a 	ret
    b0d0:	80c00017 	ldw	r3,0(r16)
    b0d4:	183ff926 	beq	r3,zero,b0bc <__alt_data_end+0xff00b0bc>
    b0d8:	88c00015 	stw	r3,0(r17)
    b0dc:	003ff706 	br	b0bc <__alt_data_end+0xff00b0bc>

0000b0e0 <__swbuf_r>:
    b0e0:	defffb04 	addi	sp,sp,-20
    b0e4:	dcc00315 	stw	r19,12(sp)
    b0e8:	dc800215 	stw	r18,8(sp)
    b0ec:	dc000015 	stw	r16,0(sp)
    b0f0:	dfc00415 	stw	ra,16(sp)
    b0f4:	dc400115 	stw	r17,4(sp)
    b0f8:	2025883a 	mov	r18,r4
    b0fc:	2827883a 	mov	r19,r5
    b100:	3021883a 	mov	r16,r6
    b104:	20000226 	beq	r4,zero,b110 <__swbuf_r+0x30>
    b108:	20800e17 	ldw	r2,56(r4)
    b10c:	10004226 	beq	r2,zero,b218 <__swbuf_r+0x138>
    b110:	80800617 	ldw	r2,24(r16)
    b114:	8100030b 	ldhu	r4,12(r16)
    b118:	80800215 	stw	r2,8(r16)
    b11c:	2080020c 	andi	r2,r4,8
    b120:	10003626 	beq	r2,zero,b1fc <__swbuf_r+0x11c>
    b124:	80c00417 	ldw	r3,16(r16)
    b128:	18003426 	beq	r3,zero,b1fc <__swbuf_r+0x11c>
    b12c:	2088000c 	andi	r2,r4,8192
    b130:	9c403fcc 	andi	r17,r19,255
    b134:	10001a26 	beq	r2,zero,b1a0 <__swbuf_r+0xc0>
    b138:	80800017 	ldw	r2,0(r16)
    b13c:	81000517 	ldw	r4,20(r16)
    b140:	10c7c83a 	sub	r3,r2,r3
    b144:	1900200e 	bge	r3,r4,b1c8 <__swbuf_r+0xe8>
    b148:	18c00044 	addi	r3,r3,1
    b14c:	81000217 	ldw	r4,8(r16)
    b150:	11400044 	addi	r5,r2,1
    b154:	81400015 	stw	r5,0(r16)
    b158:	213fffc4 	addi	r4,r4,-1
    b15c:	81000215 	stw	r4,8(r16)
    b160:	14c00005 	stb	r19,0(r2)
    b164:	80800517 	ldw	r2,20(r16)
    b168:	10c01e26 	beq	r2,r3,b1e4 <__swbuf_r+0x104>
    b16c:	8080030b 	ldhu	r2,12(r16)
    b170:	1080004c 	andi	r2,r2,1
    b174:	10000226 	beq	r2,zero,b180 <__swbuf_r+0xa0>
    b178:	00800284 	movi	r2,10
    b17c:	88801926 	beq	r17,r2,b1e4 <__swbuf_r+0x104>
    b180:	8805883a 	mov	r2,r17
    b184:	dfc00417 	ldw	ra,16(sp)
    b188:	dcc00317 	ldw	r19,12(sp)
    b18c:	dc800217 	ldw	r18,8(sp)
    b190:	dc400117 	ldw	r17,4(sp)
    b194:	dc000017 	ldw	r16,0(sp)
    b198:	dec00504 	addi	sp,sp,20
    b19c:	f800283a 	ret
    b1a0:	81401917 	ldw	r5,100(r16)
    b1a4:	00b7ffc4 	movi	r2,-8193
    b1a8:	21080014 	ori	r4,r4,8192
    b1ac:	2884703a 	and	r2,r5,r2
    b1b0:	80801915 	stw	r2,100(r16)
    b1b4:	80800017 	ldw	r2,0(r16)
    b1b8:	8100030d 	sth	r4,12(r16)
    b1bc:	81000517 	ldw	r4,20(r16)
    b1c0:	10c7c83a 	sub	r3,r2,r3
    b1c4:	193fe016 	blt	r3,r4,b148 <__alt_data_end+0xff00b148>
    b1c8:	800b883a 	mov	r5,r16
    b1cc:	9009883a 	mov	r4,r18
    b1d0:	00066cc0 	call	66cc <_fflush_r>
    b1d4:	1000071e 	bne	r2,zero,b1f4 <__swbuf_r+0x114>
    b1d8:	80800017 	ldw	r2,0(r16)
    b1dc:	00c00044 	movi	r3,1
    b1e0:	003fda06 	br	b14c <__alt_data_end+0xff00b14c>
    b1e4:	800b883a 	mov	r5,r16
    b1e8:	9009883a 	mov	r4,r18
    b1ec:	00066cc0 	call	66cc <_fflush_r>
    b1f0:	103fe326 	beq	r2,zero,b180 <__alt_data_end+0xff00b180>
    b1f4:	00bfffc4 	movi	r2,-1
    b1f8:	003fe206 	br	b184 <__alt_data_end+0xff00b184>
    b1fc:	800b883a 	mov	r5,r16
    b200:	9009883a 	mov	r4,r18
    b204:	0004ad40 	call	4ad4 <__swsetup_r>
    b208:	103ffa1e 	bne	r2,zero,b1f4 <__alt_data_end+0xff00b1f4>
    b20c:	8100030b 	ldhu	r4,12(r16)
    b210:	80c00417 	ldw	r3,16(r16)
    b214:	003fc506 	br	b12c <__alt_data_end+0xff00b12c>
    b218:	0006aa80 	call	6aa8 <__sinit>
    b21c:	003fbc06 	br	b110 <__alt_data_end+0xff00b110>

0000b220 <__swbuf>:
    b220:	00800074 	movhi	r2,1
    b224:	108c7e04 	addi	r2,r2,12792
    b228:	280d883a 	mov	r6,r5
    b22c:	200b883a 	mov	r5,r4
    b230:	11000017 	ldw	r4,0(r2)
    b234:	000b0e01 	jmpi	b0e0 <__swbuf_r>

0000b238 <_wcrtomb_r>:
    b238:	defff604 	addi	sp,sp,-40
    b23c:	00800074 	movhi	r2,1
    b240:	dc800815 	stw	r18,32(sp)
    b244:	dc400715 	stw	r17,28(sp)
    b248:	dc000615 	stw	r16,24(sp)
    b24c:	108c8004 	addi	r2,r2,12800
    b250:	dfc00915 	stw	ra,36(sp)
    b254:	2021883a 	mov	r16,r4
    b258:	3823883a 	mov	r17,r7
    b25c:	14800017 	ldw	r18,0(r2)
    b260:	28001426 	beq	r5,zero,b2b4 <_wcrtomb_r+0x7c>
    b264:	d9400415 	stw	r5,16(sp)
    b268:	d9800515 	stw	r6,20(sp)
    b26c:	00075ec0 	call	75ec <__locale_charset>
    b270:	d9800517 	ldw	r6,20(sp)
    b274:	d9400417 	ldw	r5,16(sp)
    b278:	100f883a 	mov	r7,r2
    b27c:	dc400015 	stw	r17,0(sp)
    b280:	8009883a 	mov	r4,r16
    b284:	903ee83a 	callr	r18
    b288:	00ffffc4 	movi	r3,-1
    b28c:	10c0031e 	bne	r2,r3,b29c <_wcrtomb_r+0x64>
    b290:	88000015 	stw	zero,0(r17)
    b294:	00c02284 	movi	r3,138
    b298:	80c00015 	stw	r3,0(r16)
    b29c:	dfc00917 	ldw	ra,36(sp)
    b2a0:	dc800817 	ldw	r18,32(sp)
    b2a4:	dc400717 	ldw	r17,28(sp)
    b2a8:	dc000617 	ldw	r16,24(sp)
    b2ac:	dec00a04 	addi	sp,sp,40
    b2b0:	f800283a 	ret
    b2b4:	00075ec0 	call	75ec <__locale_charset>
    b2b8:	100f883a 	mov	r7,r2
    b2bc:	dc400015 	stw	r17,0(sp)
    b2c0:	000d883a 	mov	r6,zero
    b2c4:	d9400104 	addi	r5,sp,4
    b2c8:	8009883a 	mov	r4,r16
    b2cc:	903ee83a 	callr	r18
    b2d0:	003fed06 	br	b288 <__alt_data_end+0xff00b288>

0000b2d4 <wcrtomb>:
    b2d4:	defff604 	addi	sp,sp,-40
    b2d8:	00800074 	movhi	r2,1
    b2dc:	dc800615 	stw	r18,24(sp)
    b2e0:	dc400515 	stw	r17,20(sp)
    b2e4:	108c7e04 	addi	r2,r2,12792
    b2e8:	dfc00915 	stw	ra,36(sp)
    b2ec:	dd000815 	stw	r20,32(sp)
    b2f0:	dcc00715 	stw	r19,28(sp)
    b2f4:	dc000415 	stw	r16,16(sp)
    b2f8:	3025883a 	mov	r18,r6
    b2fc:	14400017 	ldw	r17,0(r2)
    b300:	20001926 	beq	r4,zero,b368 <wcrtomb+0x94>
    b304:	00800074 	movhi	r2,1
    b308:	108c8004 	addi	r2,r2,12800
    b30c:	15000017 	ldw	r20,0(r2)
    b310:	2021883a 	mov	r16,r4
    b314:	2827883a 	mov	r19,r5
    b318:	00075ec0 	call	75ec <__locale_charset>
    b31c:	100f883a 	mov	r7,r2
    b320:	dc800015 	stw	r18,0(sp)
    b324:	980d883a 	mov	r6,r19
    b328:	800b883a 	mov	r5,r16
    b32c:	8809883a 	mov	r4,r17
    b330:	a03ee83a 	callr	r20
    b334:	00ffffc4 	movi	r3,-1
    b338:	10c0031e 	bne	r2,r3,b348 <wcrtomb+0x74>
    b33c:	90000015 	stw	zero,0(r18)
    b340:	00c02284 	movi	r3,138
    b344:	88c00015 	stw	r3,0(r17)
    b348:	dfc00917 	ldw	ra,36(sp)
    b34c:	dd000817 	ldw	r20,32(sp)
    b350:	dcc00717 	ldw	r19,28(sp)
    b354:	dc800617 	ldw	r18,24(sp)
    b358:	dc400517 	ldw	r17,20(sp)
    b35c:	dc000417 	ldw	r16,16(sp)
    b360:	dec00a04 	addi	sp,sp,40
    b364:	f800283a 	ret
    b368:	00800074 	movhi	r2,1
    b36c:	108c8004 	addi	r2,r2,12800
    b370:	14000017 	ldw	r16,0(r2)
    b374:	00075ec0 	call	75ec <__locale_charset>
    b378:	100f883a 	mov	r7,r2
    b37c:	dc800015 	stw	r18,0(sp)
    b380:	000d883a 	mov	r6,zero
    b384:	d9400104 	addi	r5,sp,4
    b388:	8809883a 	mov	r4,r17
    b38c:	803ee83a 	callr	r16
    b390:	003fe806 	br	b334 <__alt_data_end+0xff00b334>

0000b394 <__ascii_wctomb>:
    b394:	28000526 	beq	r5,zero,b3ac <__ascii_wctomb+0x18>
    b398:	00803fc4 	movi	r2,255
    b39c:	11800536 	bltu	r2,r6,b3b4 <__ascii_wctomb+0x20>
    b3a0:	29800005 	stb	r6,0(r5)
    b3a4:	00800044 	movi	r2,1
    b3a8:	f800283a 	ret
    b3ac:	0005883a 	mov	r2,zero
    b3b0:	f800283a 	ret
    b3b4:	00802284 	movi	r2,138
    b3b8:	20800015 	stw	r2,0(r4)
    b3bc:	00bfffc4 	movi	r2,-1
    b3c0:	f800283a 	ret

0000b3c4 <_wctomb_r>:
    b3c4:	00800074 	movhi	r2,1
    b3c8:	defff904 	addi	sp,sp,-28
    b3cc:	108c8004 	addi	r2,r2,12800
    b3d0:	dfc00615 	stw	ra,24(sp)
    b3d4:	dc400515 	stw	r17,20(sp)
    b3d8:	dc000415 	stw	r16,16(sp)
    b3dc:	3823883a 	mov	r17,r7
    b3e0:	14000017 	ldw	r16,0(r2)
    b3e4:	d9000115 	stw	r4,4(sp)
    b3e8:	d9400215 	stw	r5,8(sp)
    b3ec:	d9800315 	stw	r6,12(sp)
    b3f0:	00075ec0 	call	75ec <__locale_charset>
    b3f4:	d9800317 	ldw	r6,12(sp)
    b3f8:	d9400217 	ldw	r5,8(sp)
    b3fc:	d9000117 	ldw	r4,4(sp)
    b400:	100f883a 	mov	r7,r2
    b404:	dc400015 	stw	r17,0(sp)
    b408:	803ee83a 	callr	r16
    b40c:	dfc00617 	ldw	ra,24(sp)
    b410:	dc400517 	ldw	r17,20(sp)
    b414:	dc000417 	ldw	r16,16(sp)
    b418:	dec00704 	addi	sp,sp,28
    b41c:	f800283a 	ret

0000b420 <__udivdi3>:
    b420:	defff504 	addi	sp,sp,-44
    b424:	dcc00415 	stw	r19,16(sp)
    b428:	dc000115 	stw	r16,4(sp)
    b42c:	dfc00a15 	stw	ra,40(sp)
    b430:	df000915 	stw	fp,36(sp)
    b434:	ddc00815 	stw	r23,32(sp)
    b438:	dd800715 	stw	r22,28(sp)
    b43c:	dd400615 	stw	r21,24(sp)
    b440:	dd000515 	stw	r20,20(sp)
    b444:	dc800315 	stw	r18,12(sp)
    b448:	dc400215 	stw	r17,8(sp)
    b44c:	2027883a 	mov	r19,r4
    b450:	2821883a 	mov	r16,r5
    b454:	3800411e 	bne	r7,zero,b55c <__udivdi3+0x13c>
    b458:	3023883a 	mov	r17,r6
    b45c:	2025883a 	mov	r18,r4
    b460:	2980522e 	bgeu	r5,r6,b5ac <__udivdi3+0x18c>
    b464:	00bfffd4 	movui	r2,65535
    b468:	282d883a 	mov	r22,r5
    b46c:	1180a836 	bltu	r2,r6,b710 <__udivdi3+0x2f0>
    b470:	00803fc4 	movi	r2,255
    b474:	1185803a 	cmpltu	r2,r2,r6
    b478:	100490fa 	slli	r2,r2,3
    b47c:	3086d83a 	srl	r3,r6,r2
    b480:	01000074 	movhi	r4,1
    b484:	21058504 	addi	r4,r4,5652
    b488:	20c7883a 	add	r3,r4,r3
    b48c:	18c00003 	ldbu	r3,0(r3)
    b490:	1885883a 	add	r2,r3,r2
    b494:	00c00804 	movi	r3,32
    b498:	1887c83a 	sub	r3,r3,r2
    b49c:	18000526 	beq	r3,zero,b4b4 <__udivdi3+0x94>
    b4a0:	80e0983a 	sll	r16,r16,r3
    b4a4:	9884d83a 	srl	r2,r19,r2
    b4a8:	30e2983a 	sll	r17,r6,r3
    b4ac:	98e4983a 	sll	r18,r19,r3
    b4b0:	142cb03a 	or	r22,r2,r16
    b4b4:	882ad43a 	srli	r21,r17,16
    b4b8:	b009883a 	mov	r4,r22
    b4bc:	8d3fffcc 	andi	r20,r17,65535
    b4c0:	a80b883a 	mov	r5,r21
    b4c4:	0001d4c0 	call	1d4c <__umodsi3>
    b4c8:	b009883a 	mov	r4,r22
    b4cc:	a80b883a 	mov	r5,r21
    b4d0:	1027883a 	mov	r19,r2
    b4d4:	0001ce80 	call	1ce8 <__udivsi3>
    b4d8:	102d883a 	mov	r22,r2
    b4dc:	9826943a 	slli	r19,r19,16
    b4e0:	9004d43a 	srli	r2,r18,16
    b4e4:	a5a1383a 	mul	r16,r20,r22
    b4e8:	14c4b03a 	or	r2,r2,r19
    b4ec:	1400052e 	bgeu	r2,r16,b504 <__udivdi3+0xe4>
    b4f0:	1445883a 	add	r2,r2,r17
    b4f4:	b0ffffc4 	addi	r3,r22,-1
    b4f8:	14400136 	bltu	r2,r17,b500 <__udivdi3+0xe0>
    b4fc:	14012336 	bltu	r2,r16,b98c <__udivdi3+0x56c>
    b500:	182d883a 	mov	r22,r3
    b504:	1421c83a 	sub	r16,r2,r16
    b508:	a80b883a 	mov	r5,r21
    b50c:	8009883a 	mov	r4,r16
    b510:	0001d4c0 	call	1d4c <__umodsi3>
    b514:	1027883a 	mov	r19,r2
    b518:	a80b883a 	mov	r5,r21
    b51c:	8009883a 	mov	r4,r16
    b520:	0001ce80 	call	1ce8 <__udivsi3>
    b524:	9826943a 	slli	r19,r19,16
    b528:	a0a9383a 	mul	r20,r20,r2
    b52c:	94bfffcc 	andi	r18,r18,65535
    b530:	94e4b03a 	or	r18,r18,r19
    b534:	9500052e 	bgeu	r18,r20,b54c <__udivdi3+0x12c>
    b538:	8ca5883a 	add	r18,r17,r18
    b53c:	10ffffc4 	addi	r3,r2,-1
    b540:	9440f136 	bltu	r18,r17,b908 <__udivdi3+0x4e8>
    b544:	9500f02e 	bgeu	r18,r20,b908 <__udivdi3+0x4e8>
    b548:	10bfff84 	addi	r2,r2,-2
    b54c:	b00c943a 	slli	r6,r22,16
    b550:	0007883a 	mov	r3,zero
    b554:	3084b03a 	or	r2,r6,r2
    b558:	00005906 	br	b6c0 <__udivdi3+0x2a0>
    b55c:	29c05636 	bltu	r5,r7,b6b8 <__udivdi3+0x298>
    b560:	00bfffd4 	movui	r2,65535
    b564:	11c0622e 	bgeu	r2,r7,b6f0 <__udivdi3+0x2d0>
    b568:	00804034 	movhi	r2,256
    b56c:	10bfffc4 	addi	r2,r2,-1
    b570:	11c0ee36 	bltu	r2,r7,b92c <__udivdi3+0x50c>
    b574:	00800404 	movi	r2,16
    b578:	3886d83a 	srl	r3,r7,r2
    b57c:	01000074 	movhi	r4,1
    b580:	21058504 	addi	r4,r4,5652
    b584:	20c7883a 	add	r3,r4,r3
    b588:	18c00003 	ldbu	r3,0(r3)
    b58c:	05400804 	movi	r21,32
    b590:	1885883a 	add	r2,r3,r2
    b594:	a8abc83a 	sub	r21,r21,r2
    b598:	a800621e 	bne	r21,zero,b724 <__udivdi3+0x304>
    b59c:	3c00e936 	bltu	r7,r16,b944 <__udivdi3+0x524>
    b5a0:	9985403a 	cmpgeu	r2,r19,r6
    b5a4:	0007883a 	mov	r3,zero
    b5a8:	00004506 	br	b6c0 <__udivdi3+0x2a0>
    b5ac:	3000041e 	bne	r6,zero,b5c0 <__udivdi3+0x1a0>
    b5b0:	000b883a 	mov	r5,zero
    b5b4:	01000044 	movi	r4,1
    b5b8:	0001ce80 	call	1ce8 <__udivsi3>
    b5bc:	1023883a 	mov	r17,r2
    b5c0:	00bfffd4 	movui	r2,65535
    b5c4:	14404e2e 	bgeu	r2,r17,b700 <__udivdi3+0x2e0>
    b5c8:	00804034 	movhi	r2,256
    b5cc:	10bfffc4 	addi	r2,r2,-1
    b5d0:	1440d836 	bltu	r2,r17,b934 <__udivdi3+0x514>
    b5d4:	00800404 	movi	r2,16
    b5d8:	8886d83a 	srl	r3,r17,r2
    b5dc:	01000074 	movhi	r4,1
    b5e0:	21058504 	addi	r4,r4,5652
    b5e4:	20c7883a 	add	r3,r4,r3
    b5e8:	18c00003 	ldbu	r3,0(r3)
    b5ec:	1885883a 	add	r2,r3,r2
    b5f0:	00c00804 	movi	r3,32
    b5f4:	1887c83a 	sub	r3,r3,r2
    b5f8:	18008f1e 	bne	r3,zero,b838 <__udivdi3+0x418>
    b5fc:	882ad43a 	srli	r21,r17,16
    b600:	8461c83a 	sub	r16,r16,r17
    b604:	8d3fffcc 	andi	r20,r17,65535
    b608:	00c00044 	movi	r3,1
    b60c:	8009883a 	mov	r4,r16
    b610:	a80b883a 	mov	r5,r21
    b614:	d8c00015 	stw	r3,0(sp)
    b618:	0001d4c0 	call	1d4c <__umodsi3>
    b61c:	8009883a 	mov	r4,r16
    b620:	a80b883a 	mov	r5,r21
    b624:	1027883a 	mov	r19,r2
    b628:	0001ce80 	call	1ce8 <__udivsi3>
    b62c:	9826943a 	slli	r19,r19,16
    b630:	9008d43a 	srli	r4,r18,16
    b634:	1521383a 	mul	r16,r2,r20
    b638:	102d883a 	mov	r22,r2
    b63c:	24c8b03a 	or	r4,r4,r19
    b640:	d8c00017 	ldw	r3,0(sp)
    b644:	2400052e 	bgeu	r4,r16,b65c <__udivdi3+0x23c>
    b648:	2449883a 	add	r4,r4,r17
    b64c:	b0bfffc4 	addi	r2,r22,-1
    b650:	24400136 	bltu	r4,r17,b658 <__udivdi3+0x238>
    b654:	2400ca36 	bltu	r4,r16,b980 <__udivdi3+0x560>
    b658:	102d883a 	mov	r22,r2
    b65c:	2421c83a 	sub	r16,r4,r16
    b660:	a80b883a 	mov	r5,r21
    b664:	8009883a 	mov	r4,r16
    b668:	d8c00015 	stw	r3,0(sp)
    b66c:	0001d4c0 	call	1d4c <__umodsi3>
    b670:	1027883a 	mov	r19,r2
    b674:	a80b883a 	mov	r5,r21
    b678:	8009883a 	mov	r4,r16
    b67c:	0001ce80 	call	1ce8 <__udivsi3>
    b680:	9826943a 	slli	r19,r19,16
    b684:	1529383a 	mul	r20,r2,r20
    b688:	94bfffcc 	andi	r18,r18,65535
    b68c:	94e4b03a 	or	r18,r18,r19
    b690:	d8c00017 	ldw	r3,0(sp)
    b694:	9500052e 	bgeu	r18,r20,b6ac <__udivdi3+0x28c>
    b698:	8ca5883a 	add	r18,r17,r18
    b69c:	113fffc4 	addi	r4,r2,-1
    b6a0:	94409736 	bltu	r18,r17,b900 <__udivdi3+0x4e0>
    b6a4:	9500962e 	bgeu	r18,r20,b900 <__udivdi3+0x4e0>
    b6a8:	10bfff84 	addi	r2,r2,-2
    b6ac:	b00c943a 	slli	r6,r22,16
    b6b0:	3084b03a 	or	r2,r6,r2
    b6b4:	00000206 	br	b6c0 <__udivdi3+0x2a0>
    b6b8:	0007883a 	mov	r3,zero
    b6bc:	0005883a 	mov	r2,zero
    b6c0:	dfc00a17 	ldw	ra,40(sp)
    b6c4:	df000917 	ldw	fp,36(sp)
    b6c8:	ddc00817 	ldw	r23,32(sp)
    b6cc:	dd800717 	ldw	r22,28(sp)
    b6d0:	dd400617 	ldw	r21,24(sp)
    b6d4:	dd000517 	ldw	r20,20(sp)
    b6d8:	dcc00417 	ldw	r19,16(sp)
    b6dc:	dc800317 	ldw	r18,12(sp)
    b6e0:	dc400217 	ldw	r17,8(sp)
    b6e4:	dc000117 	ldw	r16,4(sp)
    b6e8:	dec00b04 	addi	sp,sp,44
    b6ec:	f800283a 	ret
    b6f0:	00803fc4 	movi	r2,255
    b6f4:	11c5803a 	cmpltu	r2,r2,r7
    b6f8:	100490fa 	slli	r2,r2,3
    b6fc:	003f9e06 	br	b578 <__alt_data_end+0xff00b578>
    b700:	00803fc4 	movi	r2,255
    b704:	1445803a 	cmpltu	r2,r2,r17
    b708:	100490fa 	slli	r2,r2,3
    b70c:	003fb206 	br	b5d8 <__alt_data_end+0xff00b5d8>
    b710:	00804034 	movhi	r2,256
    b714:	10bfffc4 	addi	r2,r2,-1
    b718:	11808836 	bltu	r2,r6,b93c <__udivdi3+0x51c>
    b71c:	00800404 	movi	r2,16
    b720:	003f5606 	br	b47c <__alt_data_end+0xff00b47c>
    b724:	30aed83a 	srl	r23,r6,r2
    b728:	3d4e983a 	sll	r7,r7,r21
    b72c:	80acd83a 	srl	r22,r16,r2
    b730:	9884d83a 	srl	r2,r19,r2
    b734:	3deeb03a 	or	r23,r7,r23
    b738:	b824d43a 	srli	r18,r23,16
    b73c:	8560983a 	sll	r16,r16,r21
    b740:	b009883a 	mov	r4,r22
    b744:	900b883a 	mov	r5,r18
    b748:	3568983a 	sll	r20,r6,r21
    b74c:	1420b03a 	or	r16,r2,r16
    b750:	0001d4c0 	call	1d4c <__umodsi3>
    b754:	b009883a 	mov	r4,r22
    b758:	900b883a 	mov	r5,r18
    b75c:	1023883a 	mov	r17,r2
    b760:	0001ce80 	call	1ce8 <__udivsi3>
    b764:	8808943a 	slli	r4,r17,16
    b768:	bf3fffcc 	andi	fp,r23,65535
    b76c:	8006d43a 	srli	r3,r16,16
    b770:	e0a3383a 	mul	r17,fp,r2
    b774:	100d883a 	mov	r6,r2
    b778:	1906b03a 	or	r3,r3,r4
    b77c:	1c40042e 	bgeu	r3,r17,b790 <__udivdi3+0x370>
    b780:	1dc7883a 	add	r3,r3,r23
    b784:	10bfffc4 	addi	r2,r2,-1
    b788:	1dc0752e 	bgeu	r3,r23,b960 <__udivdi3+0x540>
    b78c:	100d883a 	mov	r6,r2
    b790:	1c63c83a 	sub	r17,r3,r17
    b794:	900b883a 	mov	r5,r18
    b798:	8809883a 	mov	r4,r17
    b79c:	d9800015 	stw	r6,0(sp)
    b7a0:	0001d4c0 	call	1d4c <__umodsi3>
    b7a4:	102d883a 	mov	r22,r2
    b7a8:	8809883a 	mov	r4,r17
    b7ac:	900b883a 	mov	r5,r18
    b7b0:	0001ce80 	call	1ce8 <__udivsi3>
    b7b4:	b02c943a 	slli	r22,r22,16
    b7b8:	e089383a 	mul	r4,fp,r2
    b7bc:	843fffcc 	andi	r16,r16,65535
    b7c0:	85a0b03a 	or	r16,r16,r22
    b7c4:	d9800017 	ldw	r6,0(sp)
    b7c8:	8100042e 	bgeu	r16,r4,b7dc <__udivdi3+0x3bc>
    b7cc:	85e1883a 	add	r16,r16,r23
    b7d0:	10ffffc4 	addi	r3,r2,-1
    b7d4:	85c05e2e 	bgeu	r16,r23,b950 <__udivdi3+0x530>
    b7d8:	1805883a 	mov	r2,r3
    b7dc:	300c943a 	slli	r6,r6,16
    b7e0:	a17fffcc 	andi	r5,r20,65535
    b7e4:	a028d43a 	srli	r20,r20,16
    b7e8:	3084b03a 	or	r2,r6,r2
    b7ec:	10ffffcc 	andi	r3,r2,65535
    b7f0:	100cd43a 	srli	r6,r2,16
    b7f4:	194f383a 	mul	r7,r3,r5
    b7f8:	1d07383a 	mul	r3,r3,r20
    b7fc:	314b383a 	mul	r5,r6,r5
    b800:	3810d43a 	srli	r8,r7,16
    b804:	8121c83a 	sub	r16,r16,r4
    b808:	1947883a 	add	r3,r3,r5
    b80c:	40c7883a 	add	r3,r8,r3
    b810:	350d383a 	mul	r6,r6,r20
    b814:	1940022e 	bgeu	r3,r5,b820 <__udivdi3+0x400>
    b818:	01000074 	movhi	r4,1
    b81c:	310d883a 	add	r6,r6,r4
    b820:	1828d43a 	srli	r20,r3,16
    b824:	a18d883a 	add	r6,r20,r6
    b828:	81803e36 	bltu	r16,r6,b924 <__udivdi3+0x504>
    b82c:	81803826 	beq	r16,r6,b910 <__udivdi3+0x4f0>
    b830:	0007883a 	mov	r3,zero
    b834:	003fa206 	br	b6c0 <__alt_data_end+0xff00b6c0>
    b838:	88e2983a 	sll	r17,r17,r3
    b83c:	80a8d83a 	srl	r20,r16,r2
    b840:	80e0983a 	sll	r16,r16,r3
    b844:	882ad43a 	srli	r21,r17,16
    b848:	9884d83a 	srl	r2,r19,r2
    b84c:	a009883a 	mov	r4,r20
    b850:	a80b883a 	mov	r5,r21
    b854:	142eb03a 	or	r23,r2,r16
    b858:	98e4983a 	sll	r18,r19,r3
    b85c:	0001d4c0 	call	1d4c <__umodsi3>
    b860:	a009883a 	mov	r4,r20
    b864:	a80b883a 	mov	r5,r21
    b868:	1021883a 	mov	r16,r2
    b86c:	0001ce80 	call	1ce8 <__udivsi3>
    b870:	1039883a 	mov	fp,r2
    b874:	8d3fffcc 	andi	r20,r17,65535
    b878:	8020943a 	slli	r16,r16,16
    b87c:	b804d43a 	srli	r2,r23,16
    b880:	a72d383a 	mul	r22,r20,fp
    b884:	1404b03a 	or	r2,r2,r16
    b888:	1580062e 	bgeu	r2,r22,b8a4 <__udivdi3+0x484>
    b88c:	1445883a 	add	r2,r2,r17
    b890:	e0ffffc4 	addi	r3,fp,-1
    b894:	14403836 	bltu	r2,r17,b978 <__udivdi3+0x558>
    b898:	1580372e 	bgeu	r2,r22,b978 <__udivdi3+0x558>
    b89c:	e73fff84 	addi	fp,fp,-2
    b8a0:	1445883a 	add	r2,r2,r17
    b8a4:	15adc83a 	sub	r22,r2,r22
    b8a8:	a80b883a 	mov	r5,r21
    b8ac:	b009883a 	mov	r4,r22
    b8b0:	0001d4c0 	call	1d4c <__umodsi3>
    b8b4:	1027883a 	mov	r19,r2
    b8b8:	b009883a 	mov	r4,r22
    b8bc:	a80b883a 	mov	r5,r21
    b8c0:	0001ce80 	call	1ce8 <__udivsi3>
    b8c4:	9826943a 	slli	r19,r19,16
    b8c8:	a0a1383a 	mul	r16,r20,r2
    b8cc:	b93fffcc 	andi	r4,r23,65535
    b8d0:	24c8b03a 	or	r4,r4,r19
    b8d4:	2400062e 	bgeu	r4,r16,b8f0 <__udivdi3+0x4d0>
    b8d8:	2449883a 	add	r4,r4,r17
    b8dc:	10ffffc4 	addi	r3,r2,-1
    b8e0:	24402336 	bltu	r4,r17,b970 <__udivdi3+0x550>
    b8e4:	2400222e 	bgeu	r4,r16,b970 <__udivdi3+0x550>
    b8e8:	10bfff84 	addi	r2,r2,-2
    b8ec:	2449883a 	add	r4,r4,r17
    b8f0:	e038943a 	slli	fp,fp,16
    b8f4:	2421c83a 	sub	r16,r4,r16
    b8f8:	e086b03a 	or	r3,fp,r2
    b8fc:	003f4306 	br	b60c <__alt_data_end+0xff00b60c>
    b900:	2005883a 	mov	r2,r4
    b904:	003f6906 	br	b6ac <__alt_data_end+0xff00b6ac>
    b908:	1805883a 	mov	r2,r3
    b90c:	003f0f06 	br	b54c <__alt_data_end+0xff00b54c>
    b910:	1806943a 	slli	r3,r3,16
    b914:	9d66983a 	sll	r19,r19,r21
    b918:	39ffffcc 	andi	r7,r7,65535
    b91c:	19c7883a 	add	r3,r3,r7
    b920:	98ffc32e 	bgeu	r19,r3,b830 <__alt_data_end+0xff00b830>
    b924:	10bfffc4 	addi	r2,r2,-1
    b928:	003fc106 	br	b830 <__alt_data_end+0xff00b830>
    b92c:	00800604 	movi	r2,24
    b930:	003f1106 	br	b578 <__alt_data_end+0xff00b578>
    b934:	00800604 	movi	r2,24
    b938:	003f2706 	br	b5d8 <__alt_data_end+0xff00b5d8>
    b93c:	00800604 	movi	r2,24
    b940:	003ece06 	br	b47c <__alt_data_end+0xff00b47c>
    b944:	0007883a 	mov	r3,zero
    b948:	00800044 	movi	r2,1
    b94c:	003f5c06 	br	b6c0 <__alt_data_end+0xff00b6c0>
    b950:	813fa12e 	bgeu	r16,r4,b7d8 <__alt_data_end+0xff00b7d8>
    b954:	10bfff84 	addi	r2,r2,-2
    b958:	85e1883a 	add	r16,r16,r23
    b95c:	003f9f06 	br	b7dc <__alt_data_end+0xff00b7dc>
    b960:	1c7f8a2e 	bgeu	r3,r17,b78c <__alt_data_end+0xff00b78c>
    b964:	31bfff84 	addi	r6,r6,-2
    b968:	1dc7883a 	add	r3,r3,r23
    b96c:	003f8806 	br	b790 <__alt_data_end+0xff00b790>
    b970:	1805883a 	mov	r2,r3
    b974:	003fde06 	br	b8f0 <__alt_data_end+0xff00b8f0>
    b978:	1839883a 	mov	fp,r3
    b97c:	003fc906 	br	b8a4 <__alt_data_end+0xff00b8a4>
    b980:	b5bfff84 	addi	r22,r22,-2
    b984:	2449883a 	add	r4,r4,r17
    b988:	003f3406 	br	b65c <__alt_data_end+0xff00b65c>
    b98c:	b5bfff84 	addi	r22,r22,-2
    b990:	1445883a 	add	r2,r2,r17
    b994:	003edb06 	br	b504 <__alt_data_end+0xff00b504>

0000b998 <__umoddi3>:
    b998:	defff404 	addi	sp,sp,-48
    b99c:	df000a15 	stw	fp,40(sp)
    b9a0:	dc400315 	stw	r17,12(sp)
    b9a4:	dc000215 	stw	r16,8(sp)
    b9a8:	dfc00b15 	stw	ra,44(sp)
    b9ac:	ddc00915 	stw	r23,36(sp)
    b9b0:	dd800815 	stw	r22,32(sp)
    b9b4:	dd400715 	stw	r21,28(sp)
    b9b8:	dd000615 	stw	r20,24(sp)
    b9bc:	dcc00515 	stw	r19,20(sp)
    b9c0:	dc800415 	stw	r18,16(sp)
    b9c4:	2021883a 	mov	r16,r4
    b9c8:	2823883a 	mov	r17,r5
    b9cc:	2839883a 	mov	fp,r5
    b9d0:	38003c1e 	bne	r7,zero,bac4 <__umoddi3+0x12c>
    b9d4:	3027883a 	mov	r19,r6
    b9d8:	2029883a 	mov	r20,r4
    b9dc:	2980512e 	bgeu	r5,r6,bb24 <__umoddi3+0x18c>
    b9e0:	00bfffd4 	movui	r2,65535
    b9e4:	11809a36 	bltu	r2,r6,bc50 <__umoddi3+0x2b8>
    b9e8:	01003fc4 	movi	r4,255
    b9ec:	2189803a 	cmpltu	r4,r4,r6
    b9f0:	200890fa 	slli	r4,r4,3
    b9f4:	3104d83a 	srl	r2,r6,r4
    b9f8:	00c00074 	movhi	r3,1
    b9fc:	18c58504 	addi	r3,r3,5652
    ba00:	1885883a 	add	r2,r3,r2
    ba04:	10c00003 	ldbu	r3,0(r2)
    ba08:	00800804 	movi	r2,32
    ba0c:	1909883a 	add	r4,r3,r4
    ba10:	1125c83a 	sub	r18,r2,r4
    ba14:	90000526 	beq	r18,zero,ba2c <__umoddi3+0x94>
    ba18:	8ca2983a 	sll	r17,r17,r18
    ba1c:	8108d83a 	srl	r4,r16,r4
    ba20:	34a6983a 	sll	r19,r6,r18
    ba24:	84a8983a 	sll	r20,r16,r18
    ba28:	2478b03a 	or	fp,r4,r17
    ba2c:	982ed43a 	srli	r23,r19,16
    ba30:	e009883a 	mov	r4,fp
    ba34:	9dbfffcc 	andi	r22,r19,65535
    ba38:	b80b883a 	mov	r5,r23
    ba3c:	0001d4c0 	call	1d4c <__umodsi3>
    ba40:	e009883a 	mov	r4,fp
    ba44:	b80b883a 	mov	r5,r23
    ba48:	102b883a 	mov	r21,r2
    ba4c:	0001ce80 	call	1ce8 <__udivsi3>
    ba50:	a806943a 	slli	r3,r21,16
    ba54:	a008d43a 	srli	r4,r20,16
    ba58:	b085383a 	mul	r2,r22,r2
    ba5c:	20c8b03a 	or	r4,r4,r3
    ba60:	2080032e 	bgeu	r4,r2,ba70 <__umoddi3+0xd8>
    ba64:	24c9883a 	add	r4,r4,r19
    ba68:	24c00136 	bltu	r4,r19,ba70 <__umoddi3+0xd8>
    ba6c:	20811036 	bltu	r4,r2,beb0 <__umoddi3+0x518>
    ba70:	20abc83a 	sub	r21,r4,r2
    ba74:	b80b883a 	mov	r5,r23
    ba78:	a809883a 	mov	r4,r21
    ba7c:	0001d4c0 	call	1d4c <__umodsi3>
    ba80:	1023883a 	mov	r17,r2
    ba84:	b80b883a 	mov	r5,r23
    ba88:	a809883a 	mov	r4,r21
    ba8c:	0001ce80 	call	1ce8 <__udivsi3>
    ba90:	8822943a 	slli	r17,r17,16
    ba94:	b085383a 	mul	r2,r22,r2
    ba98:	a0ffffcc 	andi	r3,r20,65535
    ba9c:	1c46b03a 	or	r3,r3,r17
    baa0:	1880042e 	bgeu	r3,r2,bab4 <__umoddi3+0x11c>
    baa4:	1cc7883a 	add	r3,r3,r19
    baa8:	1cc00236 	bltu	r3,r19,bab4 <__umoddi3+0x11c>
    baac:	1880012e 	bgeu	r3,r2,bab4 <__umoddi3+0x11c>
    bab0:	1cc7883a 	add	r3,r3,r19
    bab4:	1885c83a 	sub	r2,r3,r2
    bab8:	1484d83a 	srl	r2,r2,r18
    babc:	0007883a 	mov	r3,zero
    bac0:	00004f06 	br	bc00 <__umoddi3+0x268>
    bac4:	29c04c36 	bltu	r5,r7,bbf8 <__umoddi3+0x260>
    bac8:	00bfffd4 	movui	r2,65535
    bacc:	11c0582e 	bgeu	r2,r7,bc30 <__umoddi3+0x298>
    bad0:	00804034 	movhi	r2,256
    bad4:	10bfffc4 	addi	r2,r2,-1
    bad8:	11c0e736 	bltu	r2,r7,be78 <__umoddi3+0x4e0>
    badc:	01000404 	movi	r4,16
    bae0:	3904d83a 	srl	r2,r7,r4
    bae4:	00c00074 	movhi	r3,1
    bae8:	18c58504 	addi	r3,r3,5652
    baec:	1885883a 	add	r2,r3,r2
    baf0:	14c00003 	ldbu	r19,0(r2)
    baf4:	00c00804 	movi	r3,32
    baf8:	9927883a 	add	r19,r19,r4
    bafc:	1ce9c83a 	sub	r20,r3,r19
    bb00:	a000581e 	bne	r20,zero,bc64 <__umoddi3+0x2cc>
    bb04:	3c400136 	bltu	r7,r17,bb0c <__umoddi3+0x174>
    bb08:	8180eb36 	bltu	r16,r6,beb8 <__umoddi3+0x520>
    bb0c:	8185c83a 	sub	r2,r16,r6
    bb10:	89e3c83a 	sub	r17,r17,r7
    bb14:	8089803a 	cmpltu	r4,r16,r2
    bb18:	8939c83a 	sub	fp,r17,r4
    bb1c:	e007883a 	mov	r3,fp
    bb20:	00003706 	br	bc00 <__umoddi3+0x268>
    bb24:	3000041e 	bne	r6,zero,bb38 <__umoddi3+0x1a0>
    bb28:	000b883a 	mov	r5,zero
    bb2c:	01000044 	movi	r4,1
    bb30:	0001ce80 	call	1ce8 <__udivsi3>
    bb34:	1027883a 	mov	r19,r2
    bb38:	00bfffd4 	movui	r2,65535
    bb3c:	14c0402e 	bgeu	r2,r19,bc40 <__umoddi3+0x2a8>
    bb40:	00804034 	movhi	r2,256
    bb44:	10bfffc4 	addi	r2,r2,-1
    bb48:	14c0cd36 	bltu	r2,r19,be80 <__umoddi3+0x4e8>
    bb4c:	00800404 	movi	r2,16
    bb50:	9886d83a 	srl	r3,r19,r2
    bb54:	01000074 	movhi	r4,1
    bb58:	21058504 	addi	r4,r4,5652
    bb5c:	20c7883a 	add	r3,r4,r3
    bb60:	18c00003 	ldbu	r3,0(r3)
    bb64:	1887883a 	add	r3,r3,r2
    bb68:	00800804 	movi	r2,32
    bb6c:	10e5c83a 	sub	r18,r2,r3
    bb70:	9000901e 	bne	r18,zero,bdb4 <__umoddi3+0x41c>
    bb74:	982cd43a 	srli	r22,r19,16
    bb78:	8ce3c83a 	sub	r17,r17,r19
    bb7c:	9d7fffcc 	andi	r21,r19,65535
    bb80:	b00b883a 	mov	r5,r22
    bb84:	8809883a 	mov	r4,r17
    bb88:	0001d4c0 	call	1d4c <__umodsi3>
    bb8c:	8809883a 	mov	r4,r17
    bb90:	b00b883a 	mov	r5,r22
    bb94:	1021883a 	mov	r16,r2
    bb98:	0001ce80 	call	1ce8 <__udivsi3>
    bb9c:	8006943a 	slli	r3,r16,16
    bba0:	a008d43a 	srli	r4,r20,16
    bba4:	1545383a 	mul	r2,r2,r21
    bba8:	20c8b03a 	or	r4,r4,r3
    bbac:	2080042e 	bgeu	r4,r2,bbc0 <__umoddi3+0x228>
    bbb0:	24c9883a 	add	r4,r4,r19
    bbb4:	24c00236 	bltu	r4,r19,bbc0 <__umoddi3+0x228>
    bbb8:	2080012e 	bgeu	r4,r2,bbc0 <__umoddi3+0x228>
    bbbc:	24c9883a 	add	r4,r4,r19
    bbc0:	20a1c83a 	sub	r16,r4,r2
    bbc4:	b00b883a 	mov	r5,r22
    bbc8:	8009883a 	mov	r4,r16
    bbcc:	0001d4c0 	call	1d4c <__umodsi3>
    bbd0:	1023883a 	mov	r17,r2
    bbd4:	b00b883a 	mov	r5,r22
    bbd8:	8009883a 	mov	r4,r16
    bbdc:	0001ce80 	call	1ce8 <__udivsi3>
    bbe0:	8822943a 	slli	r17,r17,16
    bbe4:	1545383a 	mul	r2,r2,r21
    bbe8:	a53fffcc 	andi	r20,r20,65535
    bbec:	a446b03a 	or	r3,r20,r17
    bbf0:	18bfb02e 	bgeu	r3,r2,bab4 <__alt_data_end+0xff00bab4>
    bbf4:	003fab06 	br	baa4 <__alt_data_end+0xff00baa4>
    bbf8:	2005883a 	mov	r2,r4
    bbfc:	2807883a 	mov	r3,r5
    bc00:	dfc00b17 	ldw	ra,44(sp)
    bc04:	df000a17 	ldw	fp,40(sp)
    bc08:	ddc00917 	ldw	r23,36(sp)
    bc0c:	dd800817 	ldw	r22,32(sp)
    bc10:	dd400717 	ldw	r21,28(sp)
    bc14:	dd000617 	ldw	r20,24(sp)
    bc18:	dcc00517 	ldw	r19,20(sp)
    bc1c:	dc800417 	ldw	r18,16(sp)
    bc20:	dc400317 	ldw	r17,12(sp)
    bc24:	dc000217 	ldw	r16,8(sp)
    bc28:	dec00c04 	addi	sp,sp,48
    bc2c:	f800283a 	ret
    bc30:	04c03fc4 	movi	r19,255
    bc34:	99c9803a 	cmpltu	r4,r19,r7
    bc38:	200890fa 	slli	r4,r4,3
    bc3c:	003fa806 	br	bae0 <__alt_data_end+0xff00bae0>
    bc40:	00803fc4 	movi	r2,255
    bc44:	14c5803a 	cmpltu	r2,r2,r19
    bc48:	100490fa 	slli	r2,r2,3
    bc4c:	003fc006 	br	bb50 <__alt_data_end+0xff00bb50>
    bc50:	00804034 	movhi	r2,256
    bc54:	10bfffc4 	addi	r2,r2,-1
    bc58:	11808b36 	bltu	r2,r6,be88 <__umoddi3+0x4f0>
    bc5c:	01000404 	movi	r4,16
    bc60:	003f6406 	br	b9f4 <__alt_data_end+0xff00b9f4>
    bc64:	34c4d83a 	srl	r2,r6,r19
    bc68:	3d0e983a 	sll	r7,r7,r20
    bc6c:	8cf8d83a 	srl	fp,r17,r19
    bc70:	8d10983a 	sll	r8,r17,r20
    bc74:	38aab03a 	or	r21,r7,r2
    bc78:	a82cd43a 	srli	r22,r21,16
    bc7c:	84e2d83a 	srl	r17,r16,r19
    bc80:	e009883a 	mov	r4,fp
    bc84:	b00b883a 	mov	r5,r22
    bc88:	8a22b03a 	or	r17,r17,r8
    bc8c:	3524983a 	sll	r18,r6,r20
    bc90:	0001d4c0 	call	1d4c <__umodsi3>
    bc94:	e009883a 	mov	r4,fp
    bc98:	b00b883a 	mov	r5,r22
    bc9c:	102f883a 	mov	r23,r2
    bca0:	0001ce80 	call	1ce8 <__udivsi3>
    bca4:	100d883a 	mov	r6,r2
    bca8:	b808943a 	slli	r4,r23,16
    bcac:	aa3fffcc 	andi	r8,r21,65535
    bcb0:	8804d43a 	srli	r2,r17,16
    bcb4:	41af383a 	mul	r23,r8,r6
    bcb8:	8520983a 	sll	r16,r16,r20
    bcbc:	1104b03a 	or	r2,r2,r4
    bcc0:	15c0042e 	bgeu	r2,r23,bcd4 <__umoddi3+0x33c>
    bcc4:	1545883a 	add	r2,r2,r21
    bcc8:	30ffffc4 	addi	r3,r6,-1
    bccc:	1540742e 	bgeu	r2,r21,bea0 <__umoddi3+0x508>
    bcd0:	180d883a 	mov	r6,r3
    bcd4:	15efc83a 	sub	r23,r2,r23
    bcd8:	b00b883a 	mov	r5,r22
    bcdc:	b809883a 	mov	r4,r23
    bce0:	d9800115 	stw	r6,4(sp)
    bce4:	da000015 	stw	r8,0(sp)
    bce8:	0001d4c0 	call	1d4c <__umodsi3>
    bcec:	b00b883a 	mov	r5,r22
    bcf0:	b809883a 	mov	r4,r23
    bcf4:	1039883a 	mov	fp,r2
    bcf8:	0001ce80 	call	1ce8 <__udivsi3>
    bcfc:	da000017 	ldw	r8,0(sp)
    bd00:	e038943a 	slli	fp,fp,16
    bd04:	100b883a 	mov	r5,r2
    bd08:	4089383a 	mul	r4,r8,r2
    bd0c:	8a3fffcc 	andi	r8,r17,65535
    bd10:	4710b03a 	or	r8,r8,fp
    bd14:	d9800117 	ldw	r6,4(sp)
    bd18:	4100042e 	bgeu	r8,r4,bd2c <__umoddi3+0x394>
    bd1c:	4551883a 	add	r8,r8,r21
    bd20:	10bfffc4 	addi	r2,r2,-1
    bd24:	45405a2e 	bgeu	r8,r21,be90 <__umoddi3+0x4f8>
    bd28:	100b883a 	mov	r5,r2
    bd2c:	300c943a 	slli	r6,r6,16
    bd30:	91ffffcc 	andi	r7,r18,65535
    bd34:	9004d43a 	srli	r2,r18,16
    bd38:	314cb03a 	or	r6,r6,r5
    bd3c:	317fffcc 	andi	r5,r6,65535
    bd40:	300cd43a 	srli	r6,r6,16
    bd44:	29d3383a 	mul	r9,r5,r7
    bd48:	288b383a 	mul	r5,r5,r2
    bd4c:	31cf383a 	mul	r7,r6,r7
    bd50:	4806d43a 	srli	r3,r9,16
    bd54:	4111c83a 	sub	r8,r8,r4
    bd58:	29cb883a 	add	r5,r5,r7
    bd5c:	194b883a 	add	r5,r3,r5
    bd60:	3085383a 	mul	r2,r6,r2
    bd64:	29c0022e 	bgeu	r5,r7,bd70 <__umoddi3+0x3d8>
    bd68:	00c00074 	movhi	r3,1
    bd6c:	10c5883a 	add	r2,r2,r3
    bd70:	2808d43a 	srli	r4,r5,16
    bd74:	280a943a 	slli	r5,r5,16
    bd78:	4a7fffcc 	andi	r9,r9,65535
    bd7c:	2085883a 	add	r2,r4,r2
    bd80:	2a4b883a 	add	r5,r5,r9
    bd84:	40803636 	bltu	r8,r2,be60 <__umoddi3+0x4c8>
    bd88:	40804d26 	beq	r8,r2,bec0 <__umoddi3+0x528>
    bd8c:	4089c83a 	sub	r4,r8,r2
    bd90:	280f883a 	mov	r7,r5
    bd94:	81cfc83a 	sub	r7,r16,r7
    bd98:	81c7803a 	cmpltu	r3,r16,r7
    bd9c:	20c7c83a 	sub	r3,r4,r3
    bda0:	1cc4983a 	sll	r2,r3,r19
    bda4:	3d0ed83a 	srl	r7,r7,r20
    bda8:	1d06d83a 	srl	r3,r3,r20
    bdac:	11c4b03a 	or	r2,r2,r7
    bdb0:	003f9306 	br	bc00 <__alt_data_end+0xff00bc00>
    bdb4:	9ca6983a 	sll	r19,r19,r18
    bdb8:	88e8d83a 	srl	r20,r17,r3
    bdbc:	80c4d83a 	srl	r2,r16,r3
    bdc0:	982cd43a 	srli	r22,r19,16
    bdc4:	8ca2983a 	sll	r17,r17,r18
    bdc8:	a009883a 	mov	r4,r20
    bdcc:	b00b883a 	mov	r5,r22
    bdd0:	1478b03a 	or	fp,r2,r17
    bdd4:	0001d4c0 	call	1d4c <__umodsi3>
    bdd8:	a009883a 	mov	r4,r20
    bddc:	b00b883a 	mov	r5,r22
    bde0:	1023883a 	mov	r17,r2
    bde4:	0001ce80 	call	1ce8 <__udivsi3>
    bde8:	9d7fffcc 	andi	r21,r19,65535
    bdec:	880a943a 	slli	r5,r17,16
    bdf0:	e008d43a 	srli	r4,fp,16
    bdf4:	a885383a 	mul	r2,r21,r2
    bdf8:	84a8983a 	sll	r20,r16,r18
    bdfc:	2148b03a 	or	r4,r4,r5
    be00:	2080042e 	bgeu	r4,r2,be14 <__umoddi3+0x47c>
    be04:	24c9883a 	add	r4,r4,r19
    be08:	24c00236 	bltu	r4,r19,be14 <__umoddi3+0x47c>
    be0c:	2080012e 	bgeu	r4,r2,be14 <__umoddi3+0x47c>
    be10:	24c9883a 	add	r4,r4,r19
    be14:	20a3c83a 	sub	r17,r4,r2
    be18:	b00b883a 	mov	r5,r22
    be1c:	8809883a 	mov	r4,r17
    be20:	0001d4c0 	call	1d4c <__umodsi3>
    be24:	102f883a 	mov	r23,r2
    be28:	8809883a 	mov	r4,r17
    be2c:	b00b883a 	mov	r5,r22
    be30:	0001ce80 	call	1ce8 <__udivsi3>
    be34:	b82e943a 	slli	r23,r23,16
    be38:	a885383a 	mul	r2,r21,r2
    be3c:	e13fffcc 	andi	r4,fp,65535
    be40:	25c8b03a 	or	r4,r4,r23
    be44:	2080042e 	bgeu	r4,r2,be58 <__umoddi3+0x4c0>
    be48:	24c9883a 	add	r4,r4,r19
    be4c:	24c00236 	bltu	r4,r19,be58 <__umoddi3+0x4c0>
    be50:	2080012e 	bgeu	r4,r2,be58 <__umoddi3+0x4c0>
    be54:	24c9883a 	add	r4,r4,r19
    be58:	20a3c83a 	sub	r17,r4,r2
    be5c:	003f4806 	br	bb80 <__alt_data_end+0xff00bb80>
    be60:	2c8fc83a 	sub	r7,r5,r18
    be64:	1545c83a 	sub	r2,r2,r21
    be68:	29cb803a 	cmpltu	r5,r5,r7
    be6c:	1145c83a 	sub	r2,r2,r5
    be70:	4089c83a 	sub	r4,r8,r2
    be74:	003fc706 	br	bd94 <__alt_data_end+0xff00bd94>
    be78:	01000604 	movi	r4,24
    be7c:	003f1806 	br	bae0 <__alt_data_end+0xff00bae0>
    be80:	00800604 	movi	r2,24
    be84:	003f3206 	br	bb50 <__alt_data_end+0xff00bb50>
    be88:	01000604 	movi	r4,24
    be8c:	003ed906 	br	b9f4 <__alt_data_end+0xff00b9f4>
    be90:	413fa52e 	bgeu	r8,r4,bd28 <__alt_data_end+0xff00bd28>
    be94:	297fff84 	addi	r5,r5,-2
    be98:	4551883a 	add	r8,r8,r21
    be9c:	003fa306 	br	bd2c <__alt_data_end+0xff00bd2c>
    bea0:	15ff8b2e 	bgeu	r2,r23,bcd0 <__alt_data_end+0xff00bcd0>
    bea4:	31bfff84 	addi	r6,r6,-2
    bea8:	1545883a 	add	r2,r2,r21
    beac:	003f8906 	br	bcd4 <__alt_data_end+0xff00bcd4>
    beb0:	24c9883a 	add	r4,r4,r19
    beb4:	003eee06 	br	ba70 <__alt_data_end+0xff00ba70>
    beb8:	8005883a 	mov	r2,r16
    bebc:	003f1706 	br	bb1c <__alt_data_end+0xff00bb1c>
    bec0:	817fe736 	bltu	r16,r5,be60 <__alt_data_end+0xff00be60>
    bec4:	280f883a 	mov	r7,r5
    bec8:	0009883a 	mov	r4,zero
    becc:	003fb106 	br	bd94 <__alt_data_end+0xff00bd94>

0000bed0 <__adddf3>:
    bed0:	02c00434 	movhi	r11,16
    bed4:	5affffc4 	addi	r11,r11,-1
    bed8:	2806d7fa 	srli	r3,r5,31
    bedc:	2ad4703a 	and	r10,r5,r11
    bee0:	3ad2703a 	and	r9,r7,r11
    bee4:	3804d53a 	srli	r2,r7,20
    bee8:	3018d77a 	srli	r12,r6,29
    beec:	280ad53a 	srli	r5,r5,20
    bef0:	501490fa 	slli	r10,r10,3
    bef4:	2010d77a 	srli	r8,r4,29
    bef8:	481290fa 	slli	r9,r9,3
    befc:	380ed7fa 	srli	r7,r7,31
    bf00:	defffb04 	addi	sp,sp,-20
    bf04:	dc800215 	stw	r18,8(sp)
    bf08:	dc400115 	stw	r17,4(sp)
    bf0c:	dc000015 	stw	r16,0(sp)
    bf10:	dfc00415 	stw	ra,16(sp)
    bf14:	dcc00315 	stw	r19,12(sp)
    bf18:	1c803fcc 	andi	r18,r3,255
    bf1c:	2c01ffcc 	andi	r16,r5,2047
    bf20:	5210b03a 	or	r8,r10,r8
    bf24:	202290fa 	slli	r17,r4,3
    bf28:	1081ffcc 	andi	r2,r2,2047
    bf2c:	4b12b03a 	or	r9,r9,r12
    bf30:	300c90fa 	slli	r6,r6,3
    bf34:	91c07526 	beq	r18,r7,c10c <__adddf3+0x23c>
    bf38:	8087c83a 	sub	r3,r16,r2
    bf3c:	00c0ab0e 	bge	zero,r3,c1ec <__adddf3+0x31c>
    bf40:	10002a1e 	bne	r2,zero,bfec <__adddf3+0x11c>
    bf44:	4984b03a 	or	r2,r9,r6
    bf48:	1000961e 	bne	r2,zero,c1a4 <__adddf3+0x2d4>
    bf4c:	888001cc 	andi	r2,r17,7
    bf50:	10000726 	beq	r2,zero,bf70 <__adddf3+0xa0>
    bf54:	888003cc 	andi	r2,r17,15
    bf58:	00c00104 	movi	r3,4
    bf5c:	10c00426 	beq	r2,r3,bf70 <__adddf3+0xa0>
    bf60:	88c7883a 	add	r3,r17,r3
    bf64:	1c63803a 	cmpltu	r17,r3,r17
    bf68:	4451883a 	add	r8,r8,r17
    bf6c:	1823883a 	mov	r17,r3
    bf70:	4080202c 	andhi	r2,r8,128
    bf74:	10005926 	beq	r2,zero,c0dc <__adddf3+0x20c>
    bf78:	84000044 	addi	r16,r16,1
    bf7c:	0081ffc4 	movi	r2,2047
    bf80:	8080ba26 	beq	r16,r2,c26c <__adddf3+0x39c>
    bf84:	00bfe034 	movhi	r2,65408
    bf88:	10bfffc4 	addi	r2,r2,-1
    bf8c:	4090703a 	and	r8,r8,r2
    bf90:	4004977a 	slli	r2,r8,29
    bf94:	4010927a 	slli	r8,r8,9
    bf98:	8822d0fa 	srli	r17,r17,3
    bf9c:	8401ffcc 	andi	r16,r16,2047
    bfa0:	4010d33a 	srli	r8,r8,12
    bfa4:	9007883a 	mov	r3,r18
    bfa8:	1444b03a 	or	r2,r2,r17
    bfac:	8401ffcc 	andi	r16,r16,2047
    bfb0:	8020953a 	slli	r16,r16,20
    bfb4:	18c03fcc 	andi	r3,r3,255
    bfb8:	01000434 	movhi	r4,16
    bfbc:	213fffc4 	addi	r4,r4,-1
    bfc0:	180697fa 	slli	r3,r3,31
    bfc4:	4110703a 	and	r8,r8,r4
    bfc8:	4410b03a 	or	r8,r8,r16
    bfcc:	40c6b03a 	or	r3,r8,r3
    bfd0:	dfc00417 	ldw	ra,16(sp)
    bfd4:	dcc00317 	ldw	r19,12(sp)
    bfd8:	dc800217 	ldw	r18,8(sp)
    bfdc:	dc400117 	ldw	r17,4(sp)
    bfe0:	dc000017 	ldw	r16,0(sp)
    bfe4:	dec00504 	addi	sp,sp,20
    bfe8:	f800283a 	ret
    bfec:	0081ffc4 	movi	r2,2047
    bff0:	80bfd626 	beq	r16,r2,bf4c <__alt_data_end+0xff00bf4c>
    bff4:	4a402034 	orhi	r9,r9,128
    bff8:	00800e04 	movi	r2,56
    bffc:	10c09f16 	blt	r2,r3,c27c <__adddf3+0x3ac>
    c000:	008007c4 	movi	r2,31
    c004:	10c0c216 	blt	r2,r3,c310 <__adddf3+0x440>
    c008:	00800804 	movi	r2,32
    c00c:	10c5c83a 	sub	r2,r2,r3
    c010:	488a983a 	sll	r5,r9,r2
    c014:	30c8d83a 	srl	r4,r6,r3
    c018:	3084983a 	sll	r2,r6,r2
    c01c:	48c6d83a 	srl	r3,r9,r3
    c020:	290cb03a 	or	r6,r5,r4
    c024:	1004c03a 	cmpne	r2,r2,zero
    c028:	308cb03a 	or	r6,r6,r2
    c02c:	898dc83a 	sub	r6,r17,r6
    c030:	89a3803a 	cmpltu	r17,r17,r6
    c034:	40d1c83a 	sub	r8,r8,r3
    c038:	4451c83a 	sub	r8,r8,r17
    c03c:	3023883a 	mov	r17,r6
    c040:	4080202c 	andhi	r2,r8,128
    c044:	10002326 	beq	r2,zero,c0d4 <__adddf3+0x204>
    c048:	04c02034 	movhi	r19,128
    c04c:	9cffffc4 	addi	r19,r19,-1
    c050:	44e6703a 	and	r19,r8,r19
    c054:	98007626 	beq	r19,zero,c230 <__adddf3+0x360>
    c058:	9809883a 	mov	r4,r19
    c05c:	000e4d40 	call	e4d4 <__clzsi2>
    c060:	10fffe04 	addi	r3,r2,-8
    c064:	010007c4 	movi	r4,31
    c068:	20c07716 	blt	r4,r3,c248 <__adddf3+0x378>
    c06c:	00800804 	movi	r2,32
    c070:	10c5c83a 	sub	r2,r2,r3
    c074:	8884d83a 	srl	r2,r17,r2
    c078:	98d0983a 	sll	r8,r19,r3
    c07c:	88e2983a 	sll	r17,r17,r3
    c080:	1204b03a 	or	r2,r2,r8
    c084:	1c007416 	blt	r3,r16,c258 <__adddf3+0x388>
    c088:	1c21c83a 	sub	r16,r3,r16
    c08c:	82000044 	addi	r8,r16,1
    c090:	00c007c4 	movi	r3,31
    c094:	1a009116 	blt	r3,r8,c2dc <__adddf3+0x40c>
    c098:	00c00804 	movi	r3,32
    c09c:	1a07c83a 	sub	r3,r3,r8
    c0a0:	8a08d83a 	srl	r4,r17,r8
    c0a4:	88e2983a 	sll	r17,r17,r3
    c0a8:	10c6983a 	sll	r3,r2,r3
    c0ac:	1210d83a 	srl	r8,r2,r8
    c0b0:	8804c03a 	cmpne	r2,r17,zero
    c0b4:	1906b03a 	or	r3,r3,r4
    c0b8:	18a2b03a 	or	r17,r3,r2
    c0bc:	0021883a 	mov	r16,zero
    c0c0:	003fa206 	br	bf4c <__alt_data_end+0xff00bf4c>
    c0c4:	1890b03a 	or	r8,r3,r2
    c0c8:	40017d26 	beq	r8,zero,c6c0 <__adddf3+0x7f0>
    c0cc:	1011883a 	mov	r8,r2
    c0d0:	1823883a 	mov	r17,r3
    c0d4:	888001cc 	andi	r2,r17,7
    c0d8:	103f9e1e 	bne	r2,zero,bf54 <__alt_data_end+0xff00bf54>
    c0dc:	4004977a 	slli	r2,r8,29
    c0e0:	8822d0fa 	srli	r17,r17,3
    c0e4:	4010d0fa 	srli	r8,r8,3
    c0e8:	9007883a 	mov	r3,r18
    c0ec:	1444b03a 	or	r2,r2,r17
    c0f0:	0101ffc4 	movi	r4,2047
    c0f4:	81002426 	beq	r16,r4,c188 <__adddf3+0x2b8>
    c0f8:	8120703a 	and	r16,r16,r4
    c0fc:	01000434 	movhi	r4,16
    c100:	213fffc4 	addi	r4,r4,-1
    c104:	4110703a 	and	r8,r8,r4
    c108:	003fa806 	br	bfac <__alt_data_end+0xff00bfac>
    c10c:	8089c83a 	sub	r4,r16,r2
    c110:	01005e0e 	bge	zero,r4,c28c <__adddf3+0x3bc>
    c114:	10002b26 	beq	r2,zero,c1c4 <__adddf3+0x2f4>
    c118:	0081ffc4 	movi	r2,2047
    c11c:	80bf8b26 	beq	r16,r2,bf4c <__alt_data_end+0xff00bf4c>
    c120:	4a402034 	orhi	r9,r9,128
    c124:	00800e04 	movi	r2,56
    c128:	1100a40e 	bge	r2,r4,c3bc <__adddf3+0x4ec>
    c12c:	498cb03a 	or	r6,r9,r6
    c130:	300ac03a 	cmpne	r5,r6,zero
    c134:	0013883a 	mov	r9,zero
    c138:	2c4b883a 	add	r5,r5,r17
    c13c:	2c63803a 	cmpltu	r17,r5,r17
    c140:	4a11883a 	add	r8,r9,r8
    c144:	8a11883a 	add	r8,r17,r8
    c148:	2823883a 	mov	r17,r5
    c14c:	4080202c 	andhi	r2,r8,128
    c150:	103fe026 	beq	r2,zero,c0d4 <__alt_data_end+0xff00c0d4>
    c154:	84000044 	addi	r16,r16,1
    c158:	0081ffc4 	movi	r2,2047
    c15c:	8080d226 	beq	r16,r2,c4a8 <__adddf3+0x5d8>
    c160:	00bfe034 	movhi	r2,65408
    c164:	10bfffc4 	addi	r2,r2,-1
    c168:	4090703a 	and	r8,r8,r2
    c16c:	880ad07a 	srli	r5,r17,1
    c170:	400897fa 	slli	r4,r8,31
    c174:	88c0004c 	andi	r3,r17,1
    c178:	28e2b03a 	or	r17,r5,r3
    c17c:	4010d07a 	srli	r8,r8,1
    c180:	2462b03a 	or	r17,r4,r17
    c184:	003f7106 	br	bf4c <__alt_data_end+0xff00bf4c>
    c188:	4088b03a 	or	r4,r8,r2
    c18c:	20014526 	beq	r4,zero,c6a4 <__adddf3+0x7d4>
    c190:	01000434 	movhi	r4,16
    c194:	42000234 	orhi	r8,r8,8
    c198:	213fffc4 	addi	r4,r4,-1
    c19c:	4110703a 	and	r8,r8,r4
    c1a0:	003f8206 	br	bfac <__alt_data_end+0xff00bfac>
    c1a4:	18ffffc4 	addi	r3,r3,-1
    c1a8:	1800491e 	bne	r3,zero,c2d0 <__adddf3+0x400>
    c1ac:	898bc83a 	sub	r5,r17,r6
    c1b0:	8963803a 	cmpltu	r17,r17,r5
    c1b4:	4251c83a 	sub	r8,r8,r9
    c1b8:	4451c83a 	sub	r8,r8,r17
    c1bc:	2823883a 	mov	r17,r5
    c1c0:	003f9f06 	br	c040 <__alt_data_end+0xff00c040>
    c1c4:	4984b03a 	or	r2,r9,r6
    c1c8:	103f6026 	beq	r2,zero,bf4c <__alt_data_end+0xff00bf4c>
    c1cc:	213fffc4 	addi	r4,r4,-1
    c1d0:	2000931e 	bne	r4,zero,c420 <__adddf3+0x550>
    c1d4:	898d883a 	add	r6,r17,r6
    c1d8:	3463803a 	cmpltu	r17,r6,r17
    c1dc:	4251883a 	add	r8,r8,r9
    c1e0:	8a11883a 	add	r8,r17,r8
    c1e4:	3023883a 	mov	r17,r6
    c1e8:	003fd806 	br	c14c <__alt_data_end+0xff00c14c>
    c1ec:	1800541e 	bne	r3,zero,c340 <__adddf3+0x470>
    c1f0:	80800044 	addi	r2,r16,1
    c1f4:	1081ffcc 	andi	r2,r2,2047
    c1f8:	00c00044 	movi	r3,1
    c1fc:	1880a00e 	bge	r3,r2,c480 <__adddf3+0x5b0>
    c200:	8989c83a 	sub	r4,r17,r6
    c204:	8905803a 	cmpltu	r2,r17,r4
    c208:	4267c83a 	sub	r19,r8,r9
    c20c:	98a7c83a 	sub	r19,r19,r2
    c210:	9880202c 	andhi	r2,r19,128
    c214:	10006326 	beq	r2,zero,c3a4 <__adddf3+0x4d4>
    c218:	3463c83a 	sub	r17,r6,r17
    c21c:	4a07c83a 	sub	r3,r9,r8
    c220:	344d803a 	cmpltu	r6,r6,r17
    c224:	19a7c83a 	sub	r19,r3,r6
    c228:	3825883a 	mov	r18,r7
    c22c:	983f8a1e 	bne	r19,zero,c058 <__alt_data_end+0xff00c058>
    c230:	8809883a 	mov	r4,r17
    c234:	000e4d40 	call	e4d4 <__clzsi2>
    c238:	10800804 	addi	r2,r2,32
    c23c:	10fffe04 	addi	r3,r2,-8
    c240:	010007c4 	movi	r4,31
    c244:	20ff890e 	bge	r4,r3,c06c <__alt_data_end+0xff00c06c>
    c248:	10bff604 	addi	r2,r2,-40
    c24c:	8884983a 	sll	r2,r17,r2
    c250:	0023883a 	mov	r17,zero
    c254:	1c3f8c0e 	bge	r3,r16,c088 <__alt_data_end+0xff00c088>
    c258:	023fe034 	movhi	r8,65408
    c25c:	423fffc4 	addi	r8,r8,-1
    c260:	80e1c83a 	sub	r16,r16,r3
    c264:	1210703a 	and	r8,r2,r8
    c268:	003f3806 	br	bf4c <__alt_data_end+0xff00bf4c>
    c26c:	9007883a 	mov	r3,r18
    c270:	0011883a 	mov	r8,zero
    c274:	0005883a 	mov	r2,zero
    c278:	003f4c06 	br	bfac <__alt_data_end+0xff00bfac>
    c27c:	498cb03a 	or	r6,r9,r6
    c280:	300cc03a 	cmpne	r6,r6,zero
    c284:	0007883a 	mov	r3,zero
    c288:	003f6806 	br	c02c <__alt_data_end+0xff00c02c>
    c28c:	20009c1e 	bne	r4,zero,c500 <__adddf3+0x630>
    c290:	80800044 	addi	r2,r16,1
    c294:	1141ffcc 	andi	r5,r2,2047
    c298:	01000044 	movi	r4,1
    c29c:	2140670e 	bge	r4,r5,c43c <__adddf3+0x56c>
    c2a0:	0101ffc4 	movi	r4,2047
    c2a4:	11007f26 	beq	r2,r4,c4a4 <__adddf3+0x5d4>
    c2a8:	898d883a 	add	r6,r17,r6
    c2ac:	4247883a 	add	r3,r8,r9
    c2b0:	3451803a 	cmpltu	r8,r6,r17
    c2b4:	40d1883a 	add	r8,r8,r3
    c2b8:	402297fa 	slli	r17,r8,31
    c2bc:	300cd07a 	srli	r6,r6,1
    c2c0:	4010d07a 	srli	r8,r8,1
    c2c4:	1021883a 	mov	r16,r2
    c2c8:	89a2b03a 	or	r17,r17,r6
    c2cc:	003f1f06 	br	bf4c <__alt_data_end+0xff00bf4c>
    c2d0:	0081ffc4 	movi	r2,2047
    c2d4:	80bf481e 	bne	r16,r2,bff8 <__alt_data_end+0xff00bff8>
    c2d8:	003f1c06 	br	bf4c <__alt_data_end+0xff00bf4c>
    c2dc:	843ff844 	addi	r16,r16,-31
    c2e0:	01000804 	movi	r4,32
    c2e4:	1406d83a 	srl	r3,r2,r16
    c2e8:	41005026 	beq	r8,r4,c42c <__adddf3+0x55c>
    c2ec:	01001004 	movi	r4,64
    c2f0:	2211c83a 	sub	r8,r4,r8
    c2f4:	1204983a 	sll	r2,r2,r8
    c2f8:	88a2b03a 	or	r17,r17,r2
    c2fc:	8822c03a 	cmpne	r17,r17,zero
    c300:	1c62b03a 	or	r17,r3,r17
    c304:	0011883a 	mov	r8,zero
    c308:	0021883a 	mov	r16,zero
    c30c:	003f7106 	br	c0d4 <__alt_data_end+0xff00c0d4>
    c310:	193ff804 	addi	r4,r3,-32
    c314:	00800804 	movi	r2,32
    c318:	4908d83a 	srl	r4,r9,r4
    c31c:	18804526 	beq	r3,r2,c434 <__adddf3+0x564>
    c320:	00801004 	movi	r2,64
    c324:	10c5c83a 	sub	r2,r2,r3
    c328:	4886983a 	sll	r3,r9,r2
    c32c:	198cb03a 	or	r6,r3,r6
    c330:	300cc03a 	cmpne	r6,r6,zero
    c334:	218cb03a 	or	r6,r4,r6
    c338:	0007883a 	mov	r3,zero
    c33c:	003f3b06 	br	c02c <__alt_data_end+0xff00c02c>
    c340:	80002a26 	beq	r16,zero,c3ec <__adddf3+0x51c>
    c344:	0101ffc4 	movi	r4,2047
    c348:	11006826 	beq	r2,r4,c4ec <__adddf3+0x61c>
    c34c:	00c7c83a 	sub	r3,zero,r3
    c350:	42002034 	orhi	r8,r8,128
    c354:	01000e04 	movi	r4,56
    c358:	20c07c16 	blt	r4,r3,c54c <__adddf3+0x67c>
    c35c:	010007c4 	movi	r4,31
    c360:	20c0da16 	blt	r4,r3,c6cc <__adddf3+0x7fc>
    c364:	01000804 	movi	r4,32
    c368:	20c9c83a 	sub	r4,r4,r3
    c36c:	4114983a 	sll	r10,r8,r4
    c370:	88cad83a 	srl	r5,r17,r3
    c374:	8908983a 	sll	r4,r17,r4
    c378:	40c6d83a 	srl	r3,r8,r3
    c37c:	5162b03a 	or	r17,r10,r5
    c380:	2008c03a 	cmpne	r4,r4,zero
    c384:	8922b03a 	or	r17,r17,r4
    c388:	3463c83a 	sub	r17,r6,r17
    c38c:	48c7c83a 	sub	r3,r9,r3
    c390:	344d803a 	cmpltu	r6,r6,r17
    c394:	1991c83a 	sub	r8,r3,r6
    c398:	1021883a 	mov	r16,r2
    c39c:	3825883a 	mov	r18,r7
    c3a0:	003f2706 	br	c040 <__alt_data_end+0xff00c040>
    c3a4:	24d0b03a 	or	r8,r4,r19
    c3a8:	40001b1e 	bne	r8,zero,c418 <__adddf3+0x548>
    c3ac:	0005883a 	mov	r2,zero
    c3b0:	0007883a 	mov	r3,zero
    c3b4:	0021883a 	mov	r16,zero
    c3b8:	003f4d06 	br	c0f0 <__alt_data_end+0xff00c0f0>
    c3bc:	008007c4 	movi	r2,31
    c3c0:	11003c16 	blt	r2,r4,c4b4 <__adddf3+0x5e4>
    c3c4:	00800804 	movi	r2,32
    c3c8:	1105c83a 	sub	r2,r2,r4
    c3cc:	488e983a 	sll	r7,r9,r2
    c3d0:	310ad83a 	srl	r5,r6,r4
    c3d4:	3084983a 	sll	r2,r6,r2
    c3d8:	4912d83a 	srl	r9,r9,r4
    c3dc:	394ab03a 	or	r5,r7,r5
    c3e0:	1004c03a 	cmpne	r2,r2,zero
    c3e4:	288ab03a 	or	r5,r5,r2
    c3e8:	003f5306 	br	c138 <__alt_data_end+0xff00c138>
    c3ec:	4448b03a 	or	r4,r8,r17
    c3f0:	20003e26 	beq	r4,zero,c4ec <__adddf3+0x61c>
    c3f4:	00c6303a 	nor	r3,zero,r3
    c3f8:	18003a1e 	bne	r3,zero,c4e4 <__adddf3+0x614>
    c3fc:	3463c83a 	sub	r17,r6,r17
    c400:	4a07c83a 	sub	r3,r9,r8
    c404:	344d803a 	cmpltu	r6,r6,r17
    c408:	1991c83a 	sub	r8,r3,r6
    c40c:	1021883a 	mov	r16,r2
    c410:	3825883a 	mov	r18,r7
    c414:	003f0a06 	br	c040 <__alt_data_end+0xff00c040>
    c418:	2023883a 	mov	r17,r4
    c41c:	003f0d06 	br	c054 <__alt_data_end+0xff00c054>
    c420:	0081ffc4 	movi	r2,2047
    c424:	80bf3f1e 	bne	r16,r2,c124 <__alt_data_end+0xff00c124>
    c428:	003ec806 	br	bf4c <__alt_data_end+0xff00bf4c>
    c42c:	0005883a 	mov	r2,zero
    c430:	003fb106 	br	c2f8 <__alt_data_end+0xff00c2f8>
    c434:	0007883a 	mov	r3,zero
    c438:	003fbc06 	br	c32c <__alt_data_end+0xff00c32c>
    c43c:	4444b03a 	or	r2,r8,r17
    c440:	8000871e 	bne	r16,zero,c660 <__adddf3+0x790>
    c444:	1000ba26 	beq	r2,zero,c730 <__adddf3+0x860>
    c448:	4984b03a 	or	r2,r9,r6
    c44c:	103ebf26 	beq	r2,zero,bf4c <__alt_data_end+0xff00bf4c>
    c450:	8985883a 	add	r2,r17,r6
    c454:	4247883a 	add	r3,r8,r9
    c458:	1451803a 	cmpltu	r8,r2,r17
    c45c:	40d1883a 	add	r8,r8,r3
    c460:	40c0202c 	andhi	r3,r8,128
    c464:	1023883a 	mov	r17,r2
    c468:	183f1a26 	beq	r3,zero,c0d4 <__alt_data_end+0xff00c0d4>
    c46c:	00bfe034 	movhi	r2,65408
    c470:	10bfffc4 	addi	r2,r2,-1
    c474:	2021883a 	mov	r16,r4
    c478:	4090703a 	and	r8,r8,r2
    c47c:	003eb306 	br	bf4c <__alt_data_end+0xff00bf4c>
    c480:	4444b03a 	or	r2,r8,r17
    c484:	8000291e 	bne	r16,zero,c52c <__adddf3+0x65c>
    c488:	10004b1e 	bne	r2,zero,c5b8 <__adddf3+0x6e8>
    c48c:	4990b03a 	or	r8,r9,r6
    c490:	40008b26 	beq	r8,zero,c6c0 <__adddf3+0x7f0>
    c494:	4811883a 	mov	r8,r9
    c498:	3023883a 	mov	r17,r6
    c49c:	3825883a 	mov	r18,r7
    c4a0:	003eaa06 	br	bf4c <__alt_data_end+0xff00bf4c>
    c4a4:	1021883a 	mov	r16,r2
    c4a8:	0011883a 	mov	r8,zero
    c4ac:	0005883a 	mov	r2,zero
    c4b0:	003f0f06 	br	c0f0 <__alt_data_end+0xff00c0f0>
    c4b4:	217ff804 	addi	r5,r4,-32
    c4b8:	00800804 	movi	r2,32
    c4bc:	494ad83a 	srl	r5,r9,r5
    c4c0:	20807d26 	beq	r4,r2,c6b8 <__adddf3+0x7e8>
    c4c4:	00801004 	movi	r2,64
    c4c8:	1109c83a 	sub	r4,r2,r4
    c4cc:	4912983a 	sll	r9,r9,r4
    c4d0:	498cb03a 	or	r6,r9,r6
    c4d4:	300cc03a 	cmpne	r6,r6,zero
    c4d8:	298ab03a 	or	r5,r5,r6
    c4dc:	0013883a 	mov	r9,zero
    c4e0:	003f1506 	br	c138 <__alt_data_end+0xff00c138>
    c4e4:	0101ffc4 	movi	r4,2047
    c4e8:	113f9a1e 	bne	r2,r4,c354 <__alt_data_end+0xff00c354>
    c4ec:	4811883a 	mov	r8,r9
    c4f0:	3023883a 	mov	r17,r6
    c4f4:	1021883a 	mov	r16,r2
    c4f8:	3825883a 	mov	r18,r7
    c4fc:	003e9306 	br	bf4c <__alt_data_end+0xff00bf4c>
    c500:	8000161e 	bne	r16,zero,c55c <__adddf3+0x68c>
    c504:	444ab03a 	or	r5,r8,r17
    c508:	28005126 	beq	r5,zero,c650 <__adddf3+0x780>
    c50c:	0108303a 	nor	r4,zero,r4
    c510:	20004d1e 	bne	r4,zero,c648 <__adddf3+0x778>
    c514:	89a3883a 	add	r17,r17,r6
    c518:	4253883a 	add	r9,r8,r9
    c51c:	898d803a 	cmpltu	r6,r17,r6
    c520:	3251883a 	add	r8,r6,r9
    c524:	1021883a 	mov	r16,r2
    c528:	003f0806 	br	c14c <__alt_data_end+0xff00c14c>
    c52c:	1000301e 	bne	r2,zero,c5f0 <__adddf3+0x720>
    c530:	4984b03a 	or	r2,r9,r6
    c534:	10007126 	beq	r2,zero,c6fc <__adddf3+0x82c>
    c538:	4811883a 	mov	r8,r9
    c53c:	3023883a 	mov	r17,r6
    c540:	3825883a 	mov	r18,r7
    c544:	0401ffc4 	movi	r16,2047
    c548:	003e8006 	br	bf4c <__alt_data_end+0xff00bf4c>
    c54c:	4462b03a 	or	r17,r8,r17
    c550:	8822c03a 	cmpne	r17,r17,zero
    c554:	0007883a 	mov	r3,zero
    c558:	003f8b06 	br	c388 <__alt_data_end+0xff00c388>
    c55c:	0141ffc4 	movi	r5,2047
    c560:	11403b26 	beq	r2,r5,c650 <__adddf3+0x780>
    c564:	0109c83a 	sub	r4,zero,r4
    c568:	42002034 	orhi	r8,r8,128
    c56c:	01400e04 	movi	r5,56
    c570:	29006716 	blt	r5,r4,c710 <__adddf3+0x840>
    c574:	014007c4 	movi	r5,31
    c578:	29007016 	blt	r5,r4,c73c <__adddf3+0x86c>
    c57c:	01400804 	movi	r5,32
    c580:	290bc83a 	sub	r5,r5,r4
    c584:	4154983a 	sll	r10,r8,r5
    c588:	890ed83a 	srl	r7,r17,r4
    c58c:	894a983a 	sll	r5,r17,r5
    c590:	4108d83a 	srl	r4,r8,r4
    c594:	51e2b03a 	or	r17,r10,r7
    c598:	280ac03a 	cmpne	r5,r5,zero
    c59c:	8962b03a 	or	r17,r17,r5
    c5a0:	89a3883a 	add	r17,r17,r6
    c5a4:	2253883a 	add	r9,r4,r9
    c5a8:	898d803a 	cmpltu	r6,r17,r6
    c5ac:	3251883a 	add	r8,r6,r9
    c5b0:	1021883a 	mov	r16,r2
    c5b4:	003ee506 	br	c14c <__alt_data_end+0xff00c14c>
    c5b8:	4984b03a 	or	r2,r9,r6
    c5bc:	103e6326 	beq	r2,zero,bf4c <__alt_data_end+0xff00bf4c>
    c5c0:	8987c83a 	sub	r3,r17,r6
    c5c4:	88c9803a 	cmpltu	r4,r17,r3
    c5c8:	4245c83a 	sub	r2,r8,r9
    c5cc:	1105c83a 	sub	r2,r2,r4
    c5d0:	1100202c 	andhi	r4,r2,128
    c5d4:	203ebb26 	beq	r4,zero,c0c4 <__alt_data_end+0xff00c0c4>
    c5d8:	3463c83a 	sub	r17,r6,r17
    c5dc:	4a07c83a 	sub	r3,r9,r8
    c5e0:	344d803a 	cmpltu	r6,r6,r17
    c5e4:	1991c83a 	sub	r8,r3,r6
    c5e8:	3825883a 	mov	r18,r7
    c5ec:	003e5706 	br	bf4c <__alt_data_end+0xff00bf4c>
    c5f0:	4984b03a 	or	r2,r9,r6
    c5f4:	10002e26 	beq	r2,zero,c6b0 <__adddf3+0x7e0>
    c5f8:	4004d0fa 	srli	r2,r8,3
    c5fc:	8822d0fa 	srli	r17,r17,3
    c600:	4010977a 	slli	r8,r8,29
    c604:	10c0022c 	andhi	r3,r2,8
    c608:	4462b03a 	or	r17,r8,r17
    c60c:	18000826 	beq	r3,zero,c630 <__adddf3+0x760>
    c610:	4808d0fa 	srli	r4,r9,3
    c614:	20c0022c 	andhi	r3,r4,8
    c618:	1800051e 	bne	r3,zero,c630 <__adddf3+0x760>
    c61c:	300cd0fa 	srli	r6,r6,3
    c620:	4806977a 	slli	r3,r9,29
    c624:	2005883a 	mov	r2,r4
    c628:	3825883a 	mov	r18,r7
    c62c:	19a2b03a 	or	r17,r3,r6
    c630:	8810d77a 	srli	r8,r17,29
    c634:	100490fa 	slli	r2,r2,3
    c638:	882290fa 	slli	r17,r17,3
    c63c:	0401ffc4 	movi	r16,2047
    c640:	4090b03a 	or	r8,r8,r2
    c644:	003e4106 	br	bf4c <__alt_data_end+0xff00bf4c>
    c648:	0141ffc4 	movi	r5,2047
    c64c:	117fc71e 	bne	r2,r5,c56c <__alt_data_end+0xff00c56c>
    c650:	4811883a 	mov	r8,r9
    c654:	3023883a 	mov	r17,r6
    c658:	1021883a 	mov	r16,r2
    c65c:	003e3b06 	br	bf4c <__alt_data_end+0xff00bf4c>
    c660:	10002f26 	beq	r2,zero,c720 <__adddf3+0x850>
    c664:	4984b03a 	or	r2,r9,r6
    c668:	10001126 	beq	r2,zero,c6b0 <__adddf3+0x7e0>
    c66c:	4004d0fa 	srli	r2,r8,3
    c670:	8822d0fa 	srli	r17,r17,3
    c674:	4010977a 	slli	r8,r8,29
    c678:	10c0022c 	andhi	r3,r2,8
    c67c:	4462b03a 	or	r17,r8,r17
    c680:	183feb26 	beq	r3,zero,c630 <__alt_data_end+0xff00c630>
    c684:	4808d0fa 	srli	r4,r9,3
    c688:	20c0022c 	andhi	r3,r4,8
    c68c:	183fe81e 	bne	r3,zero,c630 <__alt_data_end+0xff00c630>
    c690:	300cd0fa 	srli	r6,r6,3
    c694:	4806977a 	slli	r3,r9,29
    c698:	2005883a 	mov	r2,r4
    c69c:	19a2b03a 	or	r17,r3,r6
    c6a0:	003fe306 	br	c630 <__alt_data_end+0xff00c630>
    c6a4:	0011883a 	mov	r8,zero
    c6a8:	0005883a 	mov	r2,zero
    c6ac:	003e3f06 	br	bfac <__alt_data_end+0xff00bfac>
    c6b0:	0401ffc4 	movi	r16,2047
    c6b4:	003e2506 	br	bf4c <__alt_data_end+0xff00bf4c>
    c6b8:	0013883a 	mov	r9,zero
    c6bc:	003f8406 	br	c4d0 <__alt_data_end+0xff00c4d0>
    c6c0:	0005883a 	mov	r2,zero
    c6c4:	0007883a 	mov	r3,zero
    c6c8:	003e8906 	br	c0f0 <__alt_data_end+0xff00c0f0>
    c6cc:	197ff804 	addi	r5,r3,-32
    c6d0:	01000804 	movi	r4,32
    c6d4:	414ad83a 	srl	r5,r8,r5
    c6d8:	19002426 	beq	r3,r4,c76c <__adddf3+0x89c>
    c6dc:	01001004 	movi	r4,64
    c6e0:	20c7c83a 	sub	r3,r4,r3
    c6e4:	40c6983a 	sll	r3,r8,r3
    c6e8:	1c46b03a 	or	r3,r3,r17
    c6ec:	1806c03a 	cmpne	r3,r3,zero
    c6f0:	28e2b03a 	or	r17,r5,r3
    c6f4:	0007883a 	mov	r3,zero
    c6f8:	003f2306 	br	c388 <__alt_data_end+0xff00c388>
    c6fc:	0007883a 	mov	r3,zero
    c700:	5811883a 	mov	r8,r11
    c704:	00bfffc4 	movi	r2,-1
    c708:	0401ffc4 	movi	r16,2047
    c70c:	003e7806 	br	c0f0 <__alt_data_end+0xff00c0f0>
    c710:	4462b03a 	or	r17,r8,r17
    c714:	8822c03a 	cmpne	r17,r17,zero
    c718:	0009883a 	mov	r4,zero
    c71c:	003fa006 	br	c5a0 <__alt_data_end+0xff00c5a0>
    c720:	4811883a 	mov	r8,r9
    c724:	3023883a 	mov	r17,r6
    c728:	0401ffc4 	movi	r16,2047
    c72c:	003e0706 	br	bf4c <__alt_data_end+0xff00bf4c>
    c730:	4811883a 	mov	r8,r9
    c734:	3023883a 	mov	r17,r6
    c738:	003e0406 	br	bf4c <__alt_data_end+0xff00bf4c>
    c73c:	21fff804 	addi	r7,r4,-32
    c740:	01400804 	movi	r5,32
    c744:	41ced83a 	srl	r7,r8,r7
    c748:	21400a26 	beq	r4,r5,c774 <__adddf3+0x8a4>
    c74c:	01401004 	movi	r5,64
    c750:	2909c83a 	sub	r4,r5,r4
    c754:	4108983a 	sll	r4,r8,r4
    c758:	2448b03a 	or	r4,r4,r17
    c75c:	2008c03a 	cmpne	r4,r4,zero
    c760:	3922b03a 	or	r17,r7,r4
    c764:	0009883a 	mov	r4,zero
    c768:	003f8d06 	br	c5a0 <__alt_data_end+0xff00c5a0>
    c76c:	0007883a 	mov	r3,zero
    c770:	003fdd06 	br	c6e8 <__alt_data_end+0xff00c6e8>
    c774:	0009883a 	mov	r4,zero
    c778:	003ff706 	br	c758 <__alt_data_end+0xff00c758>

0000c77c <__divdf3>:
    c77c:	defff204 	addi	sp,sp,-56
    c780:	dd400915 	stw	r21,36(sp)
    c784:	282ad53a 	srli	r21,r5,20
    c788:	dd000815 	stw	r20,32(sp)
    c78c:	2828d7fa 	srli	r20,r5,31
    c790:	dc000415 	stw	r16,16(sp)
    c794:	04000434 	movhi	r16,16
    c798:	df000c15 	stw	fp,48(sp)
    c79c:	843fffc4 	addi	r16,r16,-1
    c7a0:	dfc00d15 	stw	ra,52(sp)
    c7a4:	ddc00b15 	stw	r23,44(sp)
    c7a8:	dd800a15 	stw	r22,40(sp)
    c7ac:	dcc00715 	stw	r19,28(sp)
    c7b0:	dc800615 	stw	r18,24(sp)
    c7b4:	dc400515 	stw	r17,20(sp)
    c7b8:	ad41ffcc 	andi	r21,r21,2047
    c7bc:	2c20703a 	and	r16,r5,r16
    c7c0:	a7003fcc 	andi	fp,r20,255
    c7c4:	a8006126 	beq	r21,zero,c94c <__divdf3+0x1d0>
    c7c8:	0081ffc4 	movi	r2,2047
    c7cc:	2025883a 	mov	r18,r4
    c7d0:	a8803726 	beq	r21,r2,c8b0 <__divdf3+0x134>
    c7d4:	80800434 	orhi	r2,r16,16
    c7d8:	100490fa 	slli	r2,r2,3
    c7dc:	2020d77a 	srli	r16,r4,29
    c7e0:	202490fa 	slli	r18,r4,3
    c7e4:	ad7f0044 	addi	r21,r21,-1023
    c7e8:	80a0b03a 	or	r16,r16,r2
    c7ec:	0027883a 	mov	r19,zero
    c7f0:	0013883a 	mov	r9,zero
    c7f4:	3804d53a 	srli	r2,r7,20
    c7f8:	382cd7fa 	srli	r22,r7,31
    c7fc:	04400434 	movhi	r17,16
    c800:	8c7fffc4 	addi	r17,r17,-1
    c804:	1081ffcc 	andi	r2,r2,2047
    c808:	3011883a 	mov	r8,r6
    c80c:	3c62703a 	and	r17,r7,r17
    c810:	b5c03fcc 	andi	r23,r22,255
    c814:	10006c26 	beq	r2,zero,c9c8 <__divdf3+0x24c>
    c818:	00c1ffc4 	movi	r3,2047
    c81c:	10c06426 	beq	r2,r3,c9b0 <__divdf3+0x234>
    c820:	88c00434 	orhi	r3,r17,16
    c824:	180690fa 	slli	r3,r3,3
    c828:	3022d77a 	srli	r17,r6,29
    c82c:	301090fa 	slli	r8,r6,3
    c830:	10bf0044 	addi	r2,r2,-1023
    c834:	88e2b03a 	or	r17,r17,r3
    c838:	000f883a 	mov	r7,zero
    c83c:	a58cf03a 	xor	r6,r20,r22
    c840:	3cc8b03a 	or	r4,r7,r19
    c844:	a8abc83a 	sub	r21,r21,r2
    c848:	008003c4 	movi	r2,15
    c84c:	3007883a 	mov	r3,r6
    c850:	34c03fcc 	andi	r19,r6,255
    c854:	11009036 	bltu	r2,r4,ca98 <__divdf3+0x31c>
    c858:	200890ba 	slli	r4,r4,2
    c85c:	00800074 	movhi	r2,1
    c860:	10b21c04 	addi	r2,r2,-14224
    c864:	2089883a 	add	r4,r4,r2
    c868:	20800017 	ldw	r2,0(r4)
    c86c:	1000683a 	jmp	r2
    c870:	0000ca98 	cmpnei	zero,zero,810
    c874:	0000c8e8 	cmpgeui	zero,zero,803
    c878:	0000ca88 	cmpgei	zero,zero,810
    c87c:	0000c8dc 	xori	zero,zero,803
    c880:	0000ca88 	cmpgei	zero,zero,810
    c884:	0000ca5c 	xori	zero,zero,809
    c888:	0000ca88 	cmpgei	zero,zero,810
    c88c:	0000c8dc 	xori	zero,zero,803
    c890:	0000c8e8 	cmpgeui	zero,zero,803
    c894:	0000c8e8 	cmpgeui	zero,zero,803
    c898:	0000ca5c 	xori	zero,zero,809
    c89c:	0000c8dc 	xori	zero,zero,803
    c8a0:	0000c8cc 	andi	zero,zero,803
    c8a4:	0000c8cc 	andi	zero,zero,803
    c8a8:	0000c8cc 	andi	zero,zero,803
    c8ac:	0000cd7c 	xorhi	zero,zero,821
    c8b0:	2404b03a 	or	r2,r4,r16
    c8b4:	1000661e 	bne	r2,zero,ca50 <__divdf3+0x2d4>
    c8b8:	04c00204 	movi	r19,8
    c8bc:	0021883a 	mov	r16,zero
    c8c0:	0025883a 	mov	r18,zero
    c8c4:	02400084 	movi	r9,2
    c8c8:	003fca06 	br	c7f4 <__alt_data_end+0xff00c7f4>
    c8cc:	8023883a 	mov	r17,r16
    c8d0:	9011883a 	mov	r8,r18
    c8d4:	e02f883a 	mov	r23,fp
    c8d8:	480f883a 	mov	r7,r9
    c8dc:	00800084 	movi	r2,2
    c8e0:	3881311e 	bne	r7,r2,cda8 <__divdf3+0x62c>
    c8e4:	b827883a 	mov	r19,r23
    c8e8:	98c0004c 	andi	r3,r19,1
    c8ec:	0081ffc4 	movi	r2,2047
    c8f0:	000b883a 	mov	r5,zero
    c8f4:	0025883a 	mov	r18,zero
    c8f8:	1004953a 	slli	r2,r2,20
    c8fc:	18c03fcc 	andi	r3,r3,255
    c900:	04400434 	movhi	r17,16
    c904:	8c7fffc4 	addi	r17,r17,-1
    c908:	180697fa 	slli	r3,r3,31
    c90c:	2c4a703a 	and	r5,r5,r17
    c910:	288ab03a 	or	r5,r5,r2
    c914:	28c6b03a 	or	r3,r5,r3
    c918:	9005883a 	mov	r2,r18
    c91c:	dfc00d17 	ldw	ra,52(sp)
    c920:	df000c17 	ldw	fp,48(sp)
    c924:	ddc00b17 	ldw	r23,44(sp)
    c928:	dd800a17 	ldw	r22,40(sp)
    c92c:	dd400917 	ldw	r21,36(sp)
    c930:	dd000817 	ldw	r20,32(sp)
    c934:	dcc00717 	ldw	r19,28(sp)
    c938:	dc800617 	ldw	r18,24(sp)
    c93c:	dc400517 	ldw	r17,20(sp)
    c940:	dc000417 	ldw	r16,16(sp)
    c944:	dec00e04 	addi	sp,sp,56
    c948:	f800283a 	ret
    c94c:	2404b03a 	or	r2,r4,r16
    c950:	2027883a 	mov	r19,r4
    c954:	10003926 	beq	r2,zero,ca3c <__divdf3+0x2c0>
    c958:	80012e26 	beq	r16,zero,ce14 <__divdf3+0x698>
    c95c:	8009883a 	mov	r4,r16
    c960:	d9800315 	stw	r6,12(sp)
    c964:	d9c00215 	stw	r7,8(sp)
    c968:	000e4d40 	call	e4d4 <__clzsi2>
    c96c:	d9800317 	ldw	r6,12(sp)
    c970:	d9c00217 	ldw	r7,8(sp)
    c974:	113ffd44 	addi	r4,r2,-11
    c978:	00c00704 	movi	r3,28
    c97c:	19012116 	blt	r3,r4,ce04 <__divdf3+0x688>
    c980:	00c00744 	movi	r3,29
    c984:	147ffe04 	addi	r17,r2,-8
    c988:	1907c83a 	sub	r3,r3,r4
    c98c:	8460983a 	sll	r16,r16,r17
    c990:	98c6d83a 	srl	r3,r19,r3
    c994:	9c64983a 	sll	r18,r19,r17
    c998:	1c20b03a 	or	r16,r3,r16
    c99c:	1080fcc4 	addi	r2,r2,1011
    c9a0:	00abc83a 	sub	r21,zero,r2
    c9a4:	0027883a 	mov	r19,zero
    c9a8:	0013883a 	mov	r9,zero
    c9ac:	003f9106 	br	c7f4 <__alt_data_end+0xff00c7f4>
    c9b0:	3446b03a 	or	r3,r6,r17
    c9b4:	18001f1e 	bne	r3,zero,ca34 <__divdf3+0x2b8>
    c9b8:	0023883a 	mov	r17,zero
    c9bc:	0011883a 	mov	r8,zero
    c9c0:	01c00084 	movi	r7,2
    c9c4:	003f9d06 	br	c83c <__alt_data_end+0xff00c83c>
    c9c8:	3446b03a 	or	r3,r6,r17
    c9cc:	18001526 	beq	r3,zero,ca24 <__divdf3+0x2a8>
    c9d0:	88011b26 	beq	r17,zero,ce40 <__divdf3+0x6c4>
    c9d4:	8809883a 	mov	r4,r17
    c9d8:	d9800315 	stw	r6,12(sp)
    c9dc:	da400115 	stw	r9,4(sp)
    c9e0:	000e4d40 	call	e4d4 <__clzsi2>
    c9e4:	d9800317 	ldw	r6,12(sp)
    c9e8:	da400117 	ldw	r9,4(sp)
    c9ec:	113ffd44 	addi	r4,r2,-11
    c9f0:	00c00704 	movi	r3,28
    c9f4:	19010e16 	blt	r3,r4,ce30 <__divdf3+0x6b4>
    c9f8:	00c00744 	movi	r3,29
    c9fc:	123ffe04 	addi	r8,r2,-8
    ca00:	1907c83a 	sub	r3,r3,r4
    ca04:	8a22983a 	sll	r17,r17,r8
    ca08:	30c6d83a 	srl	r3,r6,r3
    ca0c:	3210983a 	sll	r8,r6,r8
    ca10:	1c62b03a 	or	r17,r3,r17
    ca14:	1080fcc4 	addi	r2,r2,1011
    ca18:	0085c83a 	sub	r2,zero,r2
    ca1c:	000f883a 	mov	r7,zero
    ca20:	003f8606 	br	c83c <__alt_data_end+0xff00c83c>
    ca24:	0023883a 	mov	r17,zero
    ca28:	0011883a 	mov	r8,zero
    ca2c:	01c00044 	movi	r7,1
    ca30:	003f8206 	br	c83c <__alt_data_end+0xff00c83c>
    ca34:	01c000c4 	movi	r7,3
    ca38:	003f8006 	br	c83c <__alt_data_end+0xff00c83c>
    ca3c:	04c00104 	movi	r19,4
    ca40:	0021883a 	mov	r16,zero
    ca44:	0025883a 	mov	r18,zero
    ca48:	02400044 	movi	r9,1
    ca4c:	003f6906 	br	c7f4 <__alt_data_end+0xff00c7f4>
    ca50:	04c00304 	movi	r19,12
    ca54:	024000c4 	movi	r9,3
    ca58:	003f6606 	br	c7f4 <__alt_data_end+0xff00c7f4>
    ca5c:	01400434 	movhi	r5,16
    ca60:	0007883a 	mov	r3,zero
    ca64:	297fffc4 	addi	r5,r5,-1
    ca68:	04bfffc4 	movi	r18,-1
    ca6c:	0081ffc4 	movi	r2,2047
    ca70:	003fa106 	br	c8f8 <__alt_data_end+0xff00c8f8>
    ca74:	00c00044 	movi	r3,1
    ca78:	1887c83a 	sub	r3,r3,r2
    ca7c:	01000e04 	movi	r4,56
    ca80:	20c1210e 	bge	r4,r3,cf08 <__divdf3+0x78c>
    ca84:	98c0004c 	andi	r3,r19,1
    ca88:	0005883a 	mov	r2,zero
    ca8c:	000b883a 	mov	r5,zero
    ca90:	0025883a 	mov	r18,zero
    ca94:	003f9806 	br	c8f8 <__alt_data_end+0xff00c8f8>
    ca98:	8c00fd36 	bltu	r17,r16,ce90 <__divdf3+0x714>
    ca9c:	8440fb26 	beq	r16,r17,ce8c <__divdf3+0x710>
    caa0:	8007883a 	mov	r3,r16
    caa4:	ad7fffc4 	addi	r21,r21,-1
    caa8:	0021883a 	mov	r16,zero
    caac:	4004d63a 	srli	r2,r8,24
    cab0:	8822923a 	slli	r17,r17,8
    cab4:	1809883a 	mov	r4,r3
    cab8:	402c923a 	slli	r22,r8,8
    cabc:	88b8b03a 	or	fp,r17,r2
    cac0:	e028d43a 	srli	r20,fp,16
    cac4:	d8c00015 	stw	r3,0(sp)
    cac8:	e5ffffcc 	andi	r23,fp,65535
    cacc:	a00b883a 	mov	r5,r20
    cad0:	0001ce80 	call	1ce8 <__udivsi3>
    cad4:	d8c00017 	ldw	r3,0(sp)
    cad8:	a00b883a 	mov	r5,r20
    cadc:	d8800315 	stw	r2,12(sp)
    cae0:	1809883a 	mov	r4,r3
    cae4:	0001d4c0 	call	1d4c <__umodsi3>
    cae8:	d9800317 	ldw	r6,12(sp)
    caec:	1006943a 	slli	r3,r2,16
    caf0:	9004d43a 	srli	r2,r18,16
    caf4:	b9a3383a 	mul	r17,r23,r6
    caf8:	10c4b03a 	or	r2,r2,r3
    cafc:	1440062e 	bgeu	r2,r17,cb18 <__divdf3+0x39c>
    cb00:	1705883a 	add	r2,r2,fp
    cb04:	30ffffc4 	addi	r3,r6,-1
    cb08:	1700ee36 	bltu	r2,fp,cec4 <__divdf3+0x748>
    cb0c:	1440ed2e 	bgeu	r2,r17,cec4 <__divdf3+0x748>
    cb10:	31bfff84 	addi	r6,r6,-2
    cb14:	1705883a 	add	r2,r2,fp
    cb18:	1463c83a 	sub	r17,r2,r17
    cb1c:	a00b883a 	mov	r5,r20
    cb20:	8809883a 	mov	r4,r17
    cb24:	d9800315 	stw	r6,12(sp)
    cb28:	0001ce80 	call	1ce8 <__udivsi3>
    cb2c:	a00b883a 	mov	r5,r20
    cb30:	8809883a 	mov	r4,r17
    cb34:	d8800215 	stw	r2,8(sp)
    cb38:	0001d4c0 	call	1d4c <__umodsi3>
    cb3c:	d9c00217 	ldw	r7,8(sp)
    cb40:	1004943a 	slli	r2,r2,16
    cb44:	94bfffcc 	andi	r18,r18,65535
    cb48:	b9d1383a 	mul	r8,r23,r7
    cb4c:	90a4b03a 	or	r18,r18,r2
    cb50:	d9800317 	ldw	r6,12(sp)
    cb54:	9200062e 	bgeu	r18,r8,cb70 <__divdf3+0x3f4>
    cb58:	9725883a 	add	r18,r18,fp
    cb5c:	38bfffc4 	addi	r2,r7,-1
    cb60:	9700d636 	bltu	r18,fp,cebc <__divdf3+0x740>
    cb64:	9200d52e 	bgeu	r18,r8,cebc <__divdf3+0x740>
    cb68:	39ffff84 	addi	r7,r7,-2
    cb6c:	9725883a 	add	r18,r18,fp
    cb70:	3004943a 	slli	r2,r6,16
    cb74:	b012d43a 	srli	r9,r22,16
    cb78:	b1bfffcc 	andi	r6,r22,65535
    cb7c:	11e2b03a 	or	r17,r2,r7
    cb80:	8806d43a 	srli	r3,r17,16
    cb84:	893fffcc 	andi	r4,r17,65535
    cb88:	218b383a 	mul	r5,r4,r6
    cb8c:	30c5383a 	mul	r2,r6,r3
    cb90:	2249383a 	mul	r4,r4,r9
    cb94:	280ed43a 	srli	r7,r5,16
    cb98:	9225c83a 	sub	r18,r18,r8
    cb9c:	2089883a 	add	r4,r4,r2
    cba0:	3909883a 	add	r4,r7,r4
    cba4:	1a47383a 	mul	r3,r3,r9
    cba8:	2080022e 	bgeu	r4,r2,cbb4 <__divdf3+0x438>
    cbac:	00800074 	movhi	r2,1
    cbb0:	1887883a 	add	r3,r3,r2
    cbb4:	2004d43a 	srli	r2,r4,16
    cbb8:	2008943a 	slli	r4,r4,16
    cbbc:	297fffcc 	andi	r5,r5,65535
    cbc0:	10c7883a 	add	r3,r2,r3
    cbc4:	2149883a 	add	r4,r4,r5
    cbc8:	90c0a536 	bltu	r18,r3,ce60 <__divdf3+0x6e4>
    cbcc:	90c0bf26 	beq	r18,r3,cecc <__divdf3+0x750>
    cbd0:	90c7c83a 	sub	r3,r18,r3
    cbd4:	810fc83a 	sub	r7,r16,r4
    cbd8:	81e5803a 	cmpltu	r18,r16,r7
    cbdc:	1ca5c83a 	sub	r18,r3,r18
    cbe0:	e480c126 	beq	fp,r18,cee8 <__divdf3+0x76c>
    cbe4:	a00b883a 	mov	r5,r20
    cbe8:	9009883a 	mov	r4,r18
    cbec:	d9800315 	stw	r6,12(sp)
    cbf0:	d9c00215 	stw	r7,8(sp)
    cbf4:	da400115 	stw	r9,4(sp)
    cbf8:	0001ce80 	call	1ce8 <__udivsi3>
    cbfc:	a00b883a 	mov	r5,r20
    cc00:	9009883a 	mov	r4,r18
    cc04:	d8800015 	stw	r2,0(sp)
    cc08:	0001d4c0 	call	1d4c <__umodsi3>
    cc0c:	d9c00217 	ldw	r7,8(sp)
    cc10:	da000017 	ldw	r8,0(sp)
    cc14:	1006943a 	slli	r3,r2,16
    cc18:	3804d43a 	srli	r2,r7,16
    cc1c:	ba21383a 	mul	r16,r23,r8
    cc20:	d9800317 	ldw	r6,12(sp)
    cc24:	10c4b03a 	or	r2,r2,r3
    cc28:	da400117 	ldw	r9,4(sp)
    cc2c:	1400062e 	bgeu	r2,r16,cc48 <__divdf3+0x4cc>
    cc30:	1705883a 	add	r2,r2,fp
    cc34:	40ffffc4 	addi	r3,r8,-1
    cc38:	1700ad36 	bltu	r2,fp,cef0 <__divdf3+0x774>
    cc3c:	1400ac2e 	bgeu	r2,r16,cef0 <__divdf3+0x774>
    cc40:	423fff84 	addi	r8,r8,-2
    cc44:	1705883a 	add	r2,r2,fp
    cc48:	1421c83a 	sub	r16,r2,r16
    cc4c:	a00b883a 	mov	r5,r20
    cc50:	8009883a 	mov	r4,r16
    cc54:	d9800315 	stw	r6,12(sp)
    cc58:	d9c00215 	stw	r7,8(sp)
    cc5c:	da000015 	stw	r8,0(sp)
    cc60:	da400115 	stw	r9,4(sp)
    cc64:	0001ce80 	call	1ce8 <__udivsi3>
    cc68:	8009883a 	mov	r4,r16
    cc6c:	a00b883a 	mov	r5,r20
    cc70:	1025883a 	mov	r18,r2
    cc74:	0001d4c0 	call	1d4c <__umodsi3>
    cc78:	d9c00217 	ldw	r7,8(sp)
    cc7c:	1004943a 	slli	r2,r2,16
    cc80:	bcaf383a 	mul	r23,r23,r18
    cc84:	393fffcc 	andi	r4,r7,65535
    cc88:	2088b03a 	or	r4,r4,r2
    cc8c:	d9800317 	ldw	r6,12(sp)
    cc90:	da000017 	ldw	r8,0(sp)
    cc94:	da400117 	ldw	r9,4(sp)
    cc98:	25c0062e 	bgeu	r4,r23,ccb4 <__divdf3+0x538>
    cc9c:	2709883a 	add	r4,r4,fp
    cca0:	90bfffc4 	addi	r2,r18,-1
    cca4:	27009436 	bltu	r4,fp,cef8 <__divdf3+0x77c>
    cca8:	25c0932e 	bgeu	r4,r23,cef8 <__divdf3+0x77c>
    ccac:	94bfff84 	addi	r18,r18,-2
    ccb0:	2709883a 	add	r4,r4,fp
    ccb4:	4004943a 	slli	r2,r8,16
    ccb8:	25efc83a 	sub	r23,r4,r23
    ccbc:	1490b03a 	or	r8,r2,r18
    ccc0:	4008d43a 	srli	r4,r8,16
    ccc4:	40ffffcc 	andi	r3,r8,65535
    ccc8:	30c5383a 	mul	r2,r6,r3
    cccc:	1a47383a 	mul	r3,r3,r9
    ccd0:	310d383a 	mul	r6,r6,r4
    ccd4:	100ad43a 	srli	r5,r2,16
    ccd8:	4913383a 	mul	r9,r9,r4
    ccdc:	1987883a 	add	r3,r3,r6
    cce0:	28c7883a 	add	r3,r5,r3
    cce4:	1980022e 	bgeu	r3,r6,ccf0 <__divdf3+0x574>
    cce8:	01000074 	movhi	r4,1
    ccec:	4913883a 	add	r9,r9,r4
    ccf0:	1808d43a 	srli	r4,r3,16
    ccf4:	1806943a 	slli	r3,r3,16
    ccf8:	10bfffcc 	andi	r2,r2,65535
    ccfc:	2253883a 	add	r9,r4,r9
    cd00:	1887883a 	add	r3,r3,r2
    cd04:	ba403836 	bltu	r23,r9,cde8 <__divdf3+0x66c>
    cd08:	ba403626 	beq	r23,r9,cde4 <__divdf3+0x668>
    cd0c:	42000054 	ori	r8,r8,1
    cd10:	a880ffc4 	addi	r2,r21,1023
    cd14:	00bf570e 	bge	zero,r2,ca74 <__alt_data_end+0xff00ca74>
    cd18:	40c001cc 	andi	r3,r8,7
    cd1c:	18000726 	beq	r3,zero,cd3c <__divdf3+0x5c0>
    cd20:	40c003cc 	andi	r3,r8,15
    cd24:	01000104 	movi	r4,4
    cd28:	19000426 	beq	r3,r4,cd3c <__divdf3+0x5c0>
    cd2c:	4107883a 	add	r3,r8,r4
    cd30:	1a11803a 	cmpltu	r8,r3,r8
    cd34:	8a23883a 	add	r17,r17,r8
    cd38:	1811883a 	mov	r8,r3
    cd3c:	88c0402c 	andhi	r3,r17,256
    cd40:	18000426 	beq	r3,zero,cd54 <__divdf3+0x5d8>
    cd44:	00ffc034 	movhi	r3,65280
    cd48:	18ffffc4 	addi	r3,r3,-1
    cd4c:	a8810004 	addi	r2,r21,1024
    cd50:	88e2703a 	and	r17,r17,r3
    cd54:	00c1ff84 	movi	r3,2046
    cd58:	18bee316 	blt	r3,r2,c8e8 <__alt_data_end+0xff00c8e8>
    cd5c:	8824977a 	slli	r18,r17,29
    cd60:	4010d0fa 	srli	r8,r8,3
    cd64:	8822927a 	slli	r17,r17,9
    cd68:	1081ffcc 	andi	r2,r2,2047
    cd6c:	9224b03a 	or	r18,r18,r8
    cd70:	880ad33a 	srli	r5,r17,12
    cd74:	98c0004c 	andi	r3,r19,1
    cd78:	003edf06 	br	c8f8 <__alt_data_end+0xff00c8f8>
    cd7c:	8080022c 	andhi	r2,r16,8
    cd80:	10001226 	beq	r2,zero,cdcc <__divdf3+0x650>
    cd84:	8880022c 	andhi	r2,r17,8
    cd88:	1000101e 	bne	r2,zero,cdcc <__divdf3+0x650>
    cd8c:	00800434 	movhi	r2,16
    cd90:	89400234 	orhi	r5,r17,8
    cd94:	10bfffc4 	addi	r2,r2,-1
    cd98:	b007883a 	mov	r3,r22
    cd9c:	288a703a 	and	r5,r5,r2
    cda0:	4025883a 	mov	r18,r8
    cda4:	003f3106 	br	ca6c <__alt_data_end+0xff00ca6c>
    cda8:	008000c4 	movi	r2,3
    cdac:	3880a626 	beq	r7,r2,d048 <__divdf3+0x8cc>
    cdb0:	00800044 	movi	r2,1
    cdb4:	3880521e 	bne	r7,r2,cf00 <__divdf3+0x784>
    cdb8:	b807883a 	mov	r3,r23
    cdbc:	0005883a 	mov	r2,zero
    cdc0:	000b883a 	mov	r5,zero
    cdc4:	0025883a 	mov	r18,zero
    cdc8:	003ecb06 	br	c8f8 <__alt_data_end+0xff00c8f8>
    cdcc:	00800434 	movhi	r2,16
    cdd0:	81400234 	orhi	r5,r16,8
    cdd4:	10bfffc4 	addi	r2,r2,-1
    cdd8:	a007883a 	mov	r3,r20
    cddc:	288a703a 	and	r5,r5,r2
    cde0:	003f2206 	br	ca6c <__alt_data_end+0xff00ca6c>
    cde4:	183fca26 	beq	r3,zero,cd10 <__alt_data_end+0xff00cd10>
    cde8:	e5ef883a 	add	r23,fp,r23
    cdec:	40bfffc4 	addi	r2,r8,-1
    cdf0:	bf00392e 	bgeu	r23,fp,ced8 <__divdf3+0x75c>
    cdf4:	1011883a 	mov	r8,r2
    cdf8:	ba7fc41e 	bne	r23,r9,cd0c <__alt_data_end+0xff00cd0c>
    cdfc:	b0ffc31e 	bne	r22,r3,cd0c <__alt_data_end+0xff00cd0c>
    ce00:	003fc306 	br	cd10 <__alt_data_end+0xff00cd10>
    ce04:	143ff604 	addi	r16,r2,-40
    ce08:	9c20983a 	sll	r16,r19,r16
    ce0c:	0025883a 	mov	r18,zero
    ce10:	003ee206 	br	c99c <__alt_data_end+0xff00c99c>
    ce14:	d9800315 	stw	r6,12(sp)
    ce18:	d9c00215 	stw	r7,8(sp)
    ce1c:	000e4d40 	call	e4d4 <__clzsi2>
    ce20:	10800804 	addi	r2,r2,32
    ce24:	d9c00217 	ldw	r7,8(sp)
    ce28:	d9800317 	ldw	r6,12(sp)
    ce2c:	003ed106 	br	c974 <__alt_data_end+0xff00c974>
    ce30:	147ff604 	addi	r17,r2,-40
    ce34:	3462983a 	sll	r17,r6,r17
    ce38:	0011883a 	mov	r8,zero
    ce3c:	003ef506 	br	ca14 <__alt_data_end+0xff00ca14>
    ce40:	3009883a 	mov	r4,r6
    ce44:	d9800315 	stw	r6,12(sp)
    ce48:	da400115 	stw	r9,4(sp)
    ce4c:	000e4d40 	call	e4d4 <__clzsi2>
    ce50:	10800804 	addi	r2,r2,32
    ce54:	da400117 	ldw	r9,4(sp)
    ce58:	d9800317 	ldw	r6,12(sp)
    ce5c:	003ee306 	br	c9ec <__alt_data_end+0xff00c9ec>
    ce60:	85a1883a 	add	r16,r16,r22
    ce64:	8585803a 	cmpltu	r2,r16,r22
    ce68:	1705883a 	add	r2,r2,fp
    ce6c:	14a5883a 	add	r18,r2,r18
    ce70:	88bfffc4 	addi	r2,r17,-1
    ce74:	e4800c2e 	bgeu	fp,r18,cea8 <__divdf3+0x72c>
    ce78:	90c03e36 	bltu	r18,r3,cf74 <__divdf3+0x7f8>
    ce7c:	1c806926 	beq	r3,r18,d024 <__divdf3+0x8a8>
    ce80:	90c7c83a 	sub	r3,r18,r3
    ce84:	1023883a 	mov	r17,r2
    ce88:	003f5206 	br	cbd4 <__alt_data_end+0xff00cbd4>
    ce8c:	923f0436 	bltu	r18,r8,caa0 <__alt_data_end+0xff00caa0>
    ce90:	800897fa 	slli	r4,r16,31
    ce94:	9004d07a 	srli	r2,r18,1
    ce98:	8006d07a 	srli	r3,r16,1
    ce9c:	902097fa 	slli	r16,r18,31
    cea0:	20a4b03a 	or	r18,r4,r2
    cea4:	003f0106 	br	caac <__alt_data_end+0xff00caac>
    cea8:	e4bff51e 	bne	fp,r18,ce80 <__alt_data_end+0xff00ce80>
    ceac:	85bff22e 	bgeu	r16,r22,ce78 <__alt_data_end+0xff00ce78>
    ceb0:	e0c7c83a 	sub	r3,fp,r3
    ceb4:	1023883a 	mov	r17,r2
    ceb8:	003f4606 	br	cbd4 <__alt_data_end+0xff00cbd4>
    cebc:	100f883a 	mov	r7,r2
    cec0:	003f2b06 	br	cb70 <__alt_data_end+0xff00cb70>
    cec4:	180d883a 	mov	r6,r3
    cec8:	003f1306 	br	cb18 <__alt_data_end+0xff00cb18>
    cecc:	813fe436 	bltu	r16,r4,ce60 <__alt_data_end+0xff00ce60>
    ced0:	0007883a 	mov	r3,zero
    ced4:	003f3f06 	br	cbd4 <__alt_data_end+0xff00cbd4>
    ced8:	ba402c36 	bltu	r23,r9,cf8c <__divdf3+0x810>
    cedc:	4dc05426 	beq	r9,r23,d030 <__divdf3+0x8b4>
    cee0:	1011883a 	mov	r8,r2
    cee4:	003f8906 	br	cd0c <__alt_data_end+0xff00cd0c>
    cee8:	023fffc4 	movi	r8,-1
    ceec:	003f8806 	br	cd10 <__alt_data_end+0xff00cd10>
    cef0:	1811883a 	mov	r8,r3
    cef4:	003f5406 	br	cc48 <__alt_data_end+0xff00cc48>
    cef8:	1025883a 	mov	r18,r2
    cefc:	003f6d06 	br	ccb4 <__alt_data_end+0xff00ccb4>
    cf00:	b827883a 	mov	r19,r23
    cf04:	003f8206 	br	cd10 <__alt_data_end+0xff00cd10>
    cf08:	010007c4 	movi	r4,31
    cf0c:	20c02616 	blt	r4,r3,cfa8 <__divdf3+0x82c>
    cf10:	00800804 	movi	r2,32
    cf14:	10c5c83a 	sub	r2,r2,r3
    cf18:	888a983a 	sll	r5,r17,r2
    cf1c:	40c8d83a 	srl	r4,r8,r3
    cf20:	4084983a 	sll	r2,r8,r2
    cf24:	88e2d83a 	srl	r17,r17,r3
    cf28:	2906b03a 	or	r3,r5,r4
    cf2c:	1004c03a 	cmpne	r2,r2,zero
    cf30:	1886b03a 	or	r3,r3,r2
    cf34:	188001cc 	andi	r2,r3,7
    cf38:	10000726 	beq	r2,zero,cf58 <__divdf3+0x7dc>
    cf3c:	188003cc 	andi	r2,r3,15
    cf40:	01000104 	movi	r4,4
    cf44:	11000426 	beq	r2,r4,cf58 <__divdf3+0x7dc>
    cf48:	1805883a 	mov	r2,r3
    cf4c:	10c00104 	addi	r3,r2,4
    cf50:	1885803a 	cmpltu	r2,r3,r2
    cf54:	88a3883a 	add	r17,r17,r2
    cf58:	8880202c 	andhi	r2,r17,128
    cf5c:	10002726 	beq	r2,zero,cffc <__divdf3+0x880>
    cf60:	98c0004c 	andi	r3,r19,1
    cf64:	00800044 	movi	r2,1
    cf68:	000b883a 	mov	r5,zero
    cf6c:	0025883a 	mov	r18,zero
    cf70:	003e6106 	br	c8f8 <__alt_data_end+0xff00c8f8>
    cf74:	85a1883a 	add	r16,r16,r22
    cf78:	8585803a 	cmpltu	r2,r16,r22
    cf7c:	1705883a 	add	r2,r2,fp
    cf80:	14a5883a 	add	r18,r2,r18
    cf84:	8c7fff84 	addi	r17,r17,-2
    cf88:	003f1106 	br	cbd0 <__alt_data_end+0xff00cbd0>
    cf8c:	b589883a 	add	r4,r22,r22
    cf90:	25ad803a 	cmpltu	r22,r4,r22
    cf94:	b739883a 	add	fp,r22,fp
    cf98:	40bfff84 	addi	r2,r8,-2
    cf9c:	bf2f883a 	add	r23,r23,fp
    cfa0:	202d883a 	mov	r22,r4
    cfa4:	003f9306 	br	cdf4 <__alt_data_end+0xff00cdf4>
    cfa8:	013ff844 	movi	r4,-31
    cfac:	2085c83a 	sub	r2,r4,r2
    cfb0:	8888d83a 	srl	r4,r17,r2
    cfb4:	00800804 	movi	r2,32
    cfb8:	18802126 	beq	r3,r2,d040 <__divdf3+0x8c4>
    cfbc:	00801004 	movi	r2,64
    cfc0:	10c5c83a 	sub	r2,r2,r3
    cfc4:	8884983a 	sll	r2,r17,r2
    cfc8:	1204b03a 	or	r2,r2,r8
    cfcc:	1004c03a 	cmpne	r2,r2,zero
    cfd0:	2084b03a 	or	r2,r4,r2
    cfd4:	144001cc 	andi	r17,r2,7
    cfd8:	88000d1e 	bne	r17,zero,d010 <__divdf3+0x894>
    cfdc:	000b883a 	mov	r5,zero
    cfe0:	1024d0fa 	srli	r18,r2,3
    cfe4:	98c0004c 	andi	r3,r19,1
    cfe8:	0005883a 	mov	r2,zero
    cfec:	9464b03a 	or	r18,r18,r17
    cff0:	003e4106 	br	c8f8 <__alt_data_end+0xff00c8f8>
    cff4:	1007883a 	mov	r3,r2
    cff8:	0023883a 	mov	r17,zero
    cffc:	880a927a 	slli	r5,r17,9
    d000:	1805883a 	mov	r2,r3
    d004:	8822977a 	slli	r17,r17,29
    d008:	280ad33a 	srli	r5,r5,12
    d00c:	003ff406 	br	cfe0 <__alt_data_end+0xff00cfe0>
    d010:	10c003cc 	andi	r3,r2,15
    d014:	01000104 	movi	r4,4
    d018:	193ff626 	beq	r3,r4,cff4 <__alt_data_end+0xff00cff4>
    d01c:	0023883a 	mov	r17,zero
    d020:	003fca06 	br	cf4c <__alt_data_end+0xff00cf4c>
    d024:	813fd336 	bltu	r16,r4,cf74 <__alt_data_end+0xff00cf74>
    d028:	1023883a 	mov	r17,r2
    d02c:	003fa806 	br	ced0 <__alt_data_end+0xff00ced0>
    d030:	b0ffd636 	bltu	r22,r3,cf8c <__alt_data_end+0xff00cf8c>
    d034:	1011883a 	mov	r8,r2
    d038:	b0ff341e 	bne	r22,r3,cd0c <__alt_data_end+0xff00cd0c>
    d03c:	003f3406 	br	cd10 <__alt_data_end+0xff00cd10>
    d040:	0005883a 	mov	r2,zero
    d044:	003fe006 	br	cfc8 <__alt_data_end+0xff00cfc8>
    d048:	00800434 	movhi	r2,16
    d04c:	89400234 	orhi	r5,r17,8
    d050:	10bfffc4 	addi	r2,r2,-1
    d054:	b807883a 	mov	r3,r23
    d058:	288a703a 	and	r5,r5,r2
    d05c:	4025883a 	mov	r18,r8
    d060:	003e8206 	br	ca6c <__alt_data_end+0xff00ca6c>

0000d064 <__eqdf2>:
    d064:	2804d53a 	srli	r2,r5,20
    d068:	3806d53a 	srli	r3,r7,20
    d06c:	02000434 	movhi	r8,16
    d070:	423fffc4 	addi	r8,r8,-1
    d074:	1081ffcc 	andi	r2,r2,2047
    d078:	0281ffc4 	movi	r10,2047
    d07c:	2a12703a 	and	r9,r5,r8
    d080:	18c1ffcc 	andi	r3,r3,2047
    d084:	3a10703a 	and	r8,r7,r8
    d088:	280ad7fa 	srli	r5,r5,31
    d08c:	380ed7fa 	srli	r7,r7,31
    d090:	12801026 	beq	r2,r10,d0d4 <__eqdf2+0x70>
    d094:	0281ffc4 	movi	r10,2047
    d098:	1a800a26 	beq	r3,r10,d0c4 <__eqdf2+0x60>
    d09c:	10c00226 	beq	r2,r3,d0a8 <__eqdf2+0x44>
    d0a0:	00800044 	movi	r2,1
    d0a4:	f800283a 	ret
    d0a8:	4a3ffd1e 	bne	r9,r8,d0a0 <__alt_data_end+0xff00d0a0>
    d0ac:	21bffc1e 	bne	r4,r6,d0a0 <__alt_data_end+0xff00d0a0>
    d0b0:	29c00c26 	beq	r5,r7,d0e4 <__eqdf2+0x80>
    d0b4:	103ffa1e 	bne	r2,zero,d0a0 <__alt_data_end+0xff00d0a0>
    d0b8:	2244b03a 	or	r2,r4,r9
    d0bc:	1004c03a 	cmpne	r2,r2,zero
    d0c0:	f800283a 	ret
    d0c4:	3214b03a 	or	r10,r6,r8
    d0c8:	503ff426 	beq	r10,zero,d09c <__alt_data_end+0xff00d09c>
    d0cc:	00800044 	movi	r2,1
    d0d0:	f800283a 	ret
    d0d4:	2254b03a 	or	r10,r4,r9
    d0d8:	503fee26 	beq	r10,zero,d094 <__alt_data_end+0xff00d094>
    d0dc:	00800044 	movi	r2,1
    d0e0:	f800283a 	ret
    d0e4:	0005883a 	mov	r2,zero
    d0e8:	f800283a 	ret

0000d0ec <__gedf2>:
    d0ec:	2804d53a 	srli	r2,r5,20
    d0f0:	3806d53a 	srli	r3,r7,20
    d0f4:	02000434 	movhi	r8,16
    d0f8:	423fffc4 	addi	r8,r8,-1
    d0fc:	1081ffcc 	andi	r2,r2,2047
    d100:	0241ffc4 	movi	r9,2047
    d104:	2a14703a 	and	r10,r5,r8
    d108:	18c1ffcc 	andi	r3,r3,2047
    d10c:	3a10703a 	and	r8,r7,r8
    d110:	280ad7fa 	srli	r5,r5,31
    d114:	380ed7fa 	srli	r7,r7,31
    d118:	12401d26 	beq	r2,r9,d190 <__gedf2+0xa4>
    d11c:	0241ffc4 	movi	r9,2047
    d120:	1a401226 	beq	r3,r9,d16c <__gedf2+0x80>
    d124:	1000081e 	bne	r2,zero,d148 <__gedf2+0x5c>
    d128:	2296b03a 	or	r11,r4,r10
    d12c:	5813003a 	cmpeq	r9,r11,zero
    d130:	1800091e 	bne	r3,zero,d158 <__gedf2+0x6c>
    d134:	3218b03a 	or	r12,r6,r8
    d138:	6000071e 	bne	r12,zero,d158 <__gedf2+0x6c>
    d13c:	0005883a 	mov	r2,zero
    d140:	5800101e 	bne	r11,zero,d184 <__gedf2+0x98>
    d144:	f800283a 	ret
    d148:	18000c1e 	bne	r3,zero,d17c <__gedf2+0x90>
    d14c:	3212b03a 	or	r9,r6,r8
    d150:	48000c26 	beq	r9,zero,d184 <__gedf2+0x98>
    d154:	0013883a 	mov	r9,zero
    d158:	39c03fcc 	andi	r7,r7,255
    d15c:	48000826 	beq	r9,zero,d180 <__gedf2+0x94>
    d160:	38000926 	beq	r7,zero,d188 <__gedf2+0x9c>
    d164:	00800044 	movi	r2,1
    d168:	f800283a 	ret
    d16c:	3212b03a 	or	r9,r6,r8
    d170:	483fec26 	beq	r9,zero,d124 <__alt_data_end+0xff00d124>
    d174:	00bfff84 	movi	r2,-2
    d178:	f800283a 	ret
    d17c:	39c03fcc 	andi	r7,r7,255
    d180:	29c00626 	beq	r5,r7,d19c <__gedf2+0xb0>
    d184:	283ff726 	beq	r5,zero,d164 <__alt_data_end+0xff00d164>
    d188:	00bfffc4 	movi	r2,-1
    d18c:	f800283a 	ret
    d190:	2292b03a 	or	r9,r4,r10
    d194:	483fe126 	beq	r9,zero,d11c <__alt_data_end+0xff00d11c>
    d198:	003ff606 	br	d174 <__alt_data_end+0xff00d174>
    d19c:	18bff916 	blt	r3,r2,d184 <__alt_data_end+0xff00d184>
    d1a0:	10c00316 	blt	r2,r3,d1b0 <__gedf2+0xc4>
    d1a4:	42bff736 	bltu	r8,r10,d184 <__alt_data_end+0xff00d184>
    d1a8:	52000326 	beq	r10,r8,d1b8 <__gedf2+0xcc>
    d1ac:	5200042e 	bgeu	r10,r8,d1c0 <__gedf2+0xd4>
    d1b0:	283fec1e 	bne	r5,zero,d164 <__alt_data_end+0xff00d164>
    d1b4:	003ff406 	br	d188 <__alt_data_end+0xff00d188>
    d1b8:	313ff236 	bltu	r6,r4,d184 <__alt_data_end+0xff00d184>
    d1bc:	21bffc36 	bltu	r4,r6,d1b0 <__alt_data_end+0xff00d1b0>
    d1c0:	0005883a 	mov	r2,zero
    d1c4:	f800283a 	ret

0000d1c8 <__ledf2>:
    d1c8:	2804d53a 	srli	r2,r5,20
    d1cc:	3810d53a 	srli	r8,r7,20
    d1d0:	00c00434 	movhi	r3,16
    d1d4:	18ffffc4 	addi	r3,r3,-1
    d1d8:	1081ffcc 	andi	r2,r2,2047
    d1dc:	0241ffc4 	movi	r9,2047
    d1e0:	28d4703a 	and	r10,r5,r3
    d1e4:	4201ffcc 	andi	r8,r8,2047
    d1e8:	38c6703a 	and	r3,r7,r3
    d1ec:	280ad7fa 	srli	r5,r5,31
    d1f0:	380ed7fa 	srli	r7,r7,31
    d1f4:	12401f26 	beq	r2,r9,d274 <__ledf2+0xac>
    d1f8:	0241ffc4 	movi	r9,2047
    d1fc:	42401426 	beq	r8,r9,d250 <__ledf2+0x88>
    d200:	1000091e 	bne	r2,zero,d228 <__ledf2+0x60>
    d204:	2296b03a 	or	r11,r4,r10
    d208:	5813003a 	cmpeq	r9,r11,zero
    d20c:	29403fcc 	andi	r5,r5,255
    d210:	40000a1e 	bne	r8,zero,d23c <__ledf2+0x74>
    d214:	30d8b03a 	or	r12,r6,r3
    d218:	6000081e 	bne	r12,zero,d23c <__ledf2+0x74>
    d21c:	0005883a 	mov	r2,zero
    d220:	5800111e 	bne	r11,zero,d268 <__ledf2+0xa0>
    d224:	f800283a 	ret
    d228:	29403fcc 	andi	r5,r5,255
    d22c:	40000c1e 	bne	r8,zero,d260 <__ledf2+0x98>
    d230:	30d2b03a 	or	r9,r6,r3
    d234:	48000c26 	beq	r9,zero,d268 <__ledf2+0xa0>
    d238:	0013883a 	mov	r9,zero
    d23c:	39c03fcc 	andi	r7,r7,255
    d240:	48000826 	beq	r9,zero,d264 <__ledf2+0x9c>
    d244:	38001126 	beq	r7,zero,d28c <__ledf2+0xc4>
    d248:	00800044 	movi	r2,1
    d24c:	f800283a 	ret
    d250:	30d2b03a 	or	r9,r6,r3
    d254:	483fea26 	beq	r9,zero,d200 <__alt_data_end+0xff00d200>
    d258:	00800084 	movi	r2,2
    d25c:	f800283a 	ret
    d260:	39c03fcc 	andi	r7,r7,255
    d264:	39400726 	beq	r7,r5,d284 <__ledf2+0xbc>
    d268:	2800081e 	bne	r5,zero,d28c <__ledf2+0xc4>
    d26c:	00800044 	movi	r2,1
    d270:	f800283a 	ret
    d274:	2292b03a 	or	r9,r4,r10
    d278:	483fdf26 	beq	r9,zero,d1f8 <__alt_data_end+0xff00d1f8>
    d27c:	00800084 	movi	r2,2
    d280:	f800283a 	ret
    d284:	4080030e 	bge	r8,r2,d294 <__ledf2+0xcc>
    d288:	383fef26 	beq	r7,zero,d248 <__alt_data_end+0xff00d248>
    d28c:	00bfffc4 	movi	r2,-1
    d290:	f800283a 	ret
    d294:	123feb16 	blt	r2,r8,d244 <__alt_data_end+0xff00d244>
    d298:	1abff336 	bltu	r3,r10,d268 <__alt_data_end+0xff00d268>
    d29c:	50c00326 	beq	r10,r3,d2ac <__ledf2+0xe4>
    d2a0:	50c0042e 	bgeu	r10,r3,d2b4 <__ledf2+0xec>
    d2a4:	283fe81e 	bne	r5,zero,d248 <__alt_data_end+0xff00d248>
    d2a8:	003ff806 	br	d28c <__alt_data_end+0xff00d28c>
    d2ac:	313fee36 	bltu	r6,r4,d268 <__alt_data_end+0xff00d268>
    d2b0:	21bffc36 	bltu	r4,r6,d2a4 <__alt_data_end+0xff00d2a4>
    d2b4:	0005883a 	mov	r2,zero
    d2b8:	f800283a 	ret

0000d2bc <__muldf3>:
    d2bc:	defff304 	addi	sp,sp,-52
    d2c0:	2804d53a 	srli	r2,r5,20
    d2c4:	dd800915 	stw	r22,36(sp)
    d2c8:	282cd7fa 	srli	r22,r5,31
    d2cc:	dc000315 	stw	r16,12(sp)
    d2d0:	04000434 	movhi	r16,16
    d2d4:	dd400815 	stw	r21,32(sp)
    d2d8:	dc800515 	stw	r18,20(sp)
    d2dc:	843fffc4 	addi	r16,r16,-1
    d2e0:	dfc00c15 	stw	ra,48(sp)
    d2e4:	df000b15 	stw	fp,44(sp)
    d2e8:	ddc00a15 	stw	r23,40(sp)
    d2ec:	dd000715 	stw	r20,28(sp)
    d2f0:	dcc00615 	stw	r19,24(sp)
    d2f4:	dc400415 	stw	r17,16(sp)
    d2f8:	1481ffcc 	andi	r18,r2,2047
    d2fc:	2c20703a 	and	r16,r5,r16
    d300:	b02b883a 	mov	r21,r22
    d304:	b2403fcc 	andi	r9,r22,255
    d308:	90006026 	beq	r18,zero,d48c <__muldf3+0x1d0>
    d30c:	0081ffc4 	movi	r2,2047
    d310:	2029883a 	mov	r20,r4
    d314:	90803626 	beq	r18,r2,d3f0 <__muldf3+0x134>
    d318:	80800434 	orhi	r2,r16,16
    d31c:	100490fa 	slli	r2,r2,3
    d320:	2020d77a 	srli	r16,r4,29
    d324:	202890fa 	slli	r20,r4,3
    d328:	94bf0044 	addi	r18,r18,-1023
    d32c:	80a0b03a 	or	r16,r16,r2
    d330:	0027883a 	mov	r19,zero
    d334:	0039883a 	mov	fp,zero
    d338:	3804d53a 	srli	r2,r7,20
    d33c:	382ed7fa 	srli	r23,r7,31
    d340:	04400434 	movhi	r17,16
    d344:	8c7fffc4 	addi	r17,r17,-1
    d348:	1081ffcc 	andi	r2,r2,2047
    d34c:	3011883a 	mov	r8,r6
    d350:	3c62703a 	and	r17,r7,r17
    d354:	ba803fcc 	andi	r10,r23,255
    d358:	10006d26 	beq	r2,zero,d510 <__muldf3+0x254>
    d35c:	00c1ffc4 	movi	r3,2047
    d360:	10c06526 	beq	r2,r3,d4f8 <__muldf3+0x23c>
    d364:	88c00434 	orhi	r3,r17,16
    d368:	180690fa 	slli	r3,r3,3
    d36c:	3022d77a 	srli	r17,r6,29
    d370:	301090fa 	slli	r8,r6,3
    d374:	10bf0044 	addi	r2,r2,-1023
    d378:	88e2b03a 	or	r17,r17,r3
    d37c:	000b883a 	mov	r5,zero
    d380:	9085883a 	add	r2,r18,r2
    d384:	2cc8b03a 	or	r4,r5,r19
    d388:	00c003c4 	movi	r3,15
    d38c:	bdacf03a 	xor	r22,r23,r22
    d390:	12c00044 	addi	r11,r2,1
    d394:	19009936 	bltu	r3,r4,d5fc <__muldf3+0x340>
    d398:	200890ba 	slli	r4,r4,2
    d39c:	00c00074 	movhi	r3,1
    d3a0:	18f4ec04 	addi	r3,r3,-11344
    d3a4:	20c9883a 	add	r4,r4,r3
    d3a8:	20c00017 	ldw	r3,0(r4)
    d3ac:	1800683a 	jmp	r3
    d3b0:	0000d5fc 	xorhi	zero,zero,855
    d3b4:	0000d410 	cmplti	zero,zero,848
    d3b8:	0000d410 	cmplti	zero,zero,848
    d3bc:	0000d40c 	andi	zero,zero,848
    d3c0:	0000d5d8 	cmpnei	zero,zero,855
    d3c4:	0000d5d8 	cmpnei	zero,zero,855
    d3c8:	0000d5c0 	call	d5c <init_LCD+0x324>
    d3cc:	0000d40c 	andi	zero,zero,848
    d3d0:	0000d5d8 	cmpnei	zero,zero,855
    d3d4:	0000d5c0 	call	d5c <init_LCD+0x324>
    d3d8:	0000d5d8 	cmpnei	zero,zero,855
    d3dc:	0000d40c 	andi	zero,zero,848
    d3e0:	0000d5e8 	cmpgeui	zero,zero,855
    d3e4:	0000d5e8 	cmpgeui	zero,zero,855
    d3e8:	0000d5e8 	cmpgeui	zero,zero,855
    d3ec:	0000d804 	movi	zero,864
    d3f0:	2404b03a 	or	r2,r4,r16
    d3f4:	10006f1e 	bne	r2,zero,d5b4 <__muldf3+0x2f8>
    d3f8:	04c00204 	movi	r19,8
    d3fc:	0021883a 	mov	r16,zero
    d400:	0029883a 	mov	r20,zero
    d404:	07000084 	movi	fp,2
    d408:	003fcb06 	br	d338 <__alt_data_end+0xff00d338>
    d40c:	502d883a 	mov	r22,r10
    d410:	00800084 	movi	r2,2
    d414:	28805726 	beq	r5,r2,d574 <__muldf3+0x2b8>
    d418:	008000c4 	movi	r2,3
    d41c:	28816626 	beq	r5,r2,d9b8 <__muldf3+0x6fc>
    d420:	00800044 	movi	r2,1
    d424:	2881411e 	bne	r5,r2,d92c <__muldf3+0x670>
    d428:	b02b883a 	mov	r21,r22
    d42c:	0005883a 	mov	r2,zero
    d430:	000b883a 	mov	r5,zero
    d434:	0029883a 	mov	r20,zero
    d438:	1004953a 	slli	r2,r2,20
    d43c:	a8c03fcc 	andi	r3,r21,255
    d440:	04400434 	movhi	r17,16
    d444:	8c7fffc4 	addi	r17,r17,-1
    d448:	180697fa 	slli	r3,r3,31
    d44c:	2c4a703a 	and	r5,r5,r17
    d450:	288ab03a 	or	r5,r5,r2
    d454:	28c6b03a 	or	r3,r5,r3
    d458:	a005883a 	mov	r2,r20
    d45c:	dfc00c17 	ldw	ra,48(sp)
    d460:	df000b17 	ldw	fp,44(sp)
    d464:	ddc00a17 	ldw	r23,40(sp)
    d468:	dd800917 	ldw	r22,36(sp)
    d46c:	dd400817 	ldw	r21,32(sp)
    d470:	dd000717 	ldw	r20,28(sp)
    d474:	dcc00617 	ldw	r19,24(sp)
    d478:	dc800517 	ldw	r18,20(sp)
    d47c:	dc400417 	ldw	r17,16(sp)
    d480:	dc000317 	ldw	r16,12(sp)
    d484:	dec00d04 	addi	sp,sp,52
    d488:	f800283a 	ret
    d48c:	2404b03a 	or	r2,r4,r16
    d490:	2027883a 	mov	r19,r4
    d494:	10004226 	beq	r2,zero,d5a0 <__muldf3+0x2e4>
    d498:	8000fc26 	beq	r16,zero,d88c <__muldf3+0x5d0>
    d49c:	8009883a 	mov	r4,r16
    d4a0:	d9800215 	stw	r6,8(sp)
    d4a4:	d9c00015 	stw	r7,0(sp)
    d4a8:	da400115 	stw	r9,4(sp)
    d4ac:	000e4d40 	call	e4d4 <__clzsi2>
    d4b0:	d9800217 	ldw	r6,8(sp)
    d4b4:	d9c00017 	ldw	r7,0(sp)
    d4b8:	da400117 	ldw	r9,4(sp)
    d4bc:	113ffd44 	addi	r4,r2,-11
    d4c0:	00c00704 	movi	r3,28
    d4c4:	1900ed16 	blt	r3,r4,d87c <__muldf3+0x5c0>
    d4c8:	00c00744 	movi	r3,29
    d4cc:	147ffe04 	addi	r17,r2,-8
    d4d0:	1907c83a 	sub	r3,r3,r4
    d4d4:	8460983a 	sll	r16,r16,r17
    d4d8:	98c6d83a 	srl	r3,r19,r3
    d4dc:	9c68983a 	sll	r20,r19,r17
    d4e0:	1c20b03a 	or	r16,r3,r16
    d4e4:	1080fcc4 	addi	r2,r2,1011
    d4e8:	00a5c83a 	sub	r18,zero,r2
    d4ec:	0027883a 	mov	r19,zero
    d4f0:	0039883a 	mov	fp,zero
    d4f4:	003f9006 	br	d338 <__alt_data_end+0xff00d338>
    d4f8:	3446b03a 	or	r3,r6,r17
    d4fc:	1800261e 	bne	r3,zero,d598 <__muldf3+0x2dc>
    d500:	0023883a 	mov	r17,zero
    d504:	0011883a 	mov	r8,zero
    d508:	01400084 	movi	r5,2
    d50c:	003f9c06 	br	d380 <__alt_data_end+0xff00d380>
    d510:	3446b03a 	or	r3,r6,r17
    d514:	18001c26 	beq	r3,zero,d588 <__muldf3+0x2cc>
    d518:	8800ce26 	beq	r17,zero,d854 <__muldf3+0x598>
    d51c:	8809883a 	mov	r4,r17
    d520:	d9800215 	stw	r6,8(sp)
    d524:	da400115 	stw	r9,4(sp)
    d528:	da800015 	stw	r10,0(sp)
    d52c:	000e4d40 	call	e4d4 <__clzsi2>
    d530:	d9800217 	ldw	r6,8(sp)
    d534:	da400117 	ldw	r9,4(sp)
    d538:	da800017 	ldw	r10,0(sp)
    d53c:	113ffd44 	addi	r4,r2,-11
    d540:	00c00704 	movi	r3,28
    d544:	1900bf16 	blt	r3,r4,d844 <__muldf3+0x588>
    d548:	00c00744 	movi	r3,29
    d54c:	123ffe04 	addi	r8,r2,-8
    d550:	1907c83a 	sub	r3,r3,r4
    d554:	8a22983a 	sll	r17,r17,r8
    d558:	30c6d83a 	srl	r3,r6,r3
    d55c:	3210983a 	sll	r8,r6,r8
    d560:	1c62b03a 	or	r17,r3,r17
    d564:	1080fcc4 	addi	r2,r2,1011
    d568:	0085c83a 	sub	r2,zero,r2
    d56c:	000b883a 	mov	r5,zero
    d570:	003f8306 	br	d380 <__alt_data_end+0xff00d380>
    d574:	b02b883a 	mov	r21,r22
    d578:	0081ffc4 	movi	r2,2047
    d57c:	000b883a 	mov	r5,zero
    d580:	0029883a 	mov	r20,zero
    d584:	003fac06 	br	d438 <__alt_data_end+0xff00d438>
    d588:	0023883a 	mov	r17,zero
    d58c:	0011883a 	mov	r8,zero
    d590:	01400044 	movi	r5,1
    d594:	003f7a06 	br	d380 <__alt_data_end+0xff00d380>
    d598:	014000c4 	movi	r5,3
    d59c:	003f7806 	br	d380 <__alt_data_end+0xff00d380>
    d5a0:	04c00104 	movi	r19,4
    d5a4:	0021883a 	mov	r16,zero
    d5a8:	0029883a 	mov	r20,zero
    d5ac:	07000044 	movi	fp,1
    d5b0:	003f6106 	br	d338 <__alt_data_end+0xff00d338>
    d5b4:	04c00304 	movi	r19,12
    d5b8:	070000c4 	movi	fp,3
    d5bc:	003f5e06 	br	d338 <__alt_data_end+0xff00d338>
    d5c0:	01400434 	movhi	r5,16
    d5c4:	002b883a 	mov	r21,zero
    d5c8:	297fffc4 	addi	r5,r5,-1
    d5cc:	053fffc4 	movi	r20,-1
    d5d0:	0081ffc4 	movi	r2,2047
    d5d4:	003f9806 	br	d438 <__alt_data_end+0xff00d438>
    d5d8:	8023883a 	mov	r17,r16
    d5dc:	a011883a 	mov	r8,r20
    d5e0:	e00b883a 	mov	r5,fp
    d5e4:	003f8a06 	br	d410 <__alt_data_end+0xff00d410>
    d5e8:	8023883a 	mov	r17,r16
    d5ec:	a011883a 	mov	r8,r20
    d5f0:	482d883a 	mov	r22,r9
    d5f4:	e00b883a 	mov	r5,fp
    d5f8:	003f8506 	br	d410 <__alt_data_end+0xff00d410>
    d5fc:	a00ad43a 	srli	r5,r20,16
    d600:	401ad43a 	srli	r13,r8,16
    d604:	a53fffcc 	andi	r20,r20,65535
    d608:	423fffcc 	andi	r8,r8,65535
    d60c:	4519383a 	mul	r12,r8,r20
    d610:	4147383a 	mul	r3,r8,r5
    d614:	6d09383a 	mul	r4,r13,r20
    d618:	600cd43a 	srli	r6,r12,16
    d61c:	2b5d383a 	mul	r14,r5,r13
    d620:	20c9883a 	add	r4,r4,r3
    d624:	310d883a 	add	r6,r6,r4
    d628:	30c0022e 	bgeu	r6,r3,d634 <__muldf3+0x378>
    d62c:	00c00074 	movhi	r3,1
    d630:	70dd883a 	add	r14,r14,r3
    d634:	8826d43a 	srli	r19,r17,16
    d638:	8bffffcc 	andi	r15,r17,65535
    d63c:	7d23383a 	mul	r17,r15,r20
    d640:	7949383a 	mul	r4,r15,r5
    d644:	9d29383a 	mul	r20,r19,r20
    d648:	8814d43a 	srli	r10,r17,16
    d64c:	3012943a 	slli	r9,r6,16
    d650:	a129883a 	add	r20,r20,r4
    d654:	633fffcc 	andi	r12,r12,65535
    d658:	5515883a 	add	r10,r10,r20
    d65c:	3006d43a 	srli	r3,r6,16
    d660:	4b13883a 	add	r9,r9,r12
    d664:	2ccb383a 	mul	r5,r5,r19
    d668:	5100022e 	bgeu	r10,r4,d674 <__muldf3+0x3b8>
    d66c:	01000074 	movhi	r4,1
    d670:	290b883a 	add	r5,r5,r4
    d674:	802ad43a 	srli	r21,r16,16
    d678:	843fffcc 	andi	r16,r16,65535
    d67c:	440d383a 	mul	r6,r8,r16
    d680:	4565383a 	mul	r18,r8,r21
    d684:	8349383a 	mul	r4,r16,r13
    d688:	500e943a 	slli	r7,r10,16
    d68c:	3010d43a 	srli	r8,r6,16
    d690:	5028d43a 	srli	r20,r10,16
    d694:	2489883a 	add	r4,r4,r18
    d698:	8abfffcc 	andi	r10,r17,65535
    d69c:	3a95883a 	add	r10,r7,r10
    d6a0:	4119883a 	add	r12,r8,r4
    d6a4:	a169883a 	add	r20,r20,r5
    d6a8:	1a87883a 	add	r3,r3,r10
    d6ac:	6d5b383a 	mul	r13,r13,r21
    d6b0:	6480022e 	bgeu	r12,r18,d6bc <__muldf3+0x400>
    d6b4:	01000074 	movhi	r4,1
    d6b8:	691b883a 	add	r13,r13,r4
    d6bc:	7c25383a 	mul	r18,r15,r16
    d6c0:	7d4b383a 	mul	r5,r15,r21
    d6c4:	84cf383a 	mul	r7,r16,r19
    d6c8:	901ed43a 	srli	r15,r18,16
    d6cc:	6008d43a 	srli	r4,r12,16
    d6d0:	6010943a 	slli	r8,r12,16
    d6d4:	394f883a 	add	r7,r7,r5
    d6d8:	333fffcc 	andi	r12,r6,65535
    d6dc:	79df883a 	add	r15,r15,r7
    d6e0:	235b883a 	add	r13,r4,r13
    d6e4:	9d63383a 	mul	r17,r19,r21
    d6e8:	4309883a 	add	r4,r8,r12
    d6ec:	7940022e 	bgeu	r15,r5,d6f8 <__muldf3+0x43c>
    d6f0:	01400074 	movhi	r5,1
    d6f4:	8963883a 	add	r17,r17,r5
    d6f8:	780a943a 	slli	r5,r15,16
    d6fc:	91bfffcc 	andi	r6,r18,65535
    d700:	70c7883a 	add	r3,r14,r3
    d704:	298d883a 	add	r6,r5,r6
    d708:	1a8f803a 	cmpltu	r7,r3,r10
    d70c:	350b883a 	add	r5,r6,r20
    d710:	20c7883a 	add	r3,r4,r3
    d714:	3955883a 	add	r10,r7,r5
    d718:	1909803a 	cmpltu	r4,r3,r4
    d71c:	6a91883a 	add	r8,r13,r10
    d720:	780cd43a 	srli	r6,r15,16
    d724:	2219883a 	add	r12,r4,r8
    d728:	2d0b803a 	cmpltu	r5,r5,r20
    d72c:	51cf803a 	cmpltu	r7,r10,r7
    d730:	29ceb03a 	or	r7,r5,r7
    d734:	4351803a 	cmpltu	r8,r8,r13
    d738:	610b803a 	cmpltu	r5,r12,r4
    d73c:	4148b03a 	or	r4,r8,r5
    d740:	398f883a 	add	r7,r7,r6
    d744:	3909883a 	add	r4,r7,r4
    d748:	1810927a 	slli	r8,r3,9
    d74c:	2449883a 	add	r4,r4,r17
    d750:	2008927a 	slli	r4,r4,9
    d754:	6022d5fa 	srli	r17,r12,23
    d758:	1806d5fa 	srli	r3,r3,23
    d75c:	4252b03a 	or	r9,r8,r9
    d760:	600a927a 	slli	r5,r12,9
    d764:	4810c03a 	cmpne	r8,r9,zero
    d768:	2462b03a 	or	r17,r4,r17
    d76c:	40c6b03a 	or	r3,r8,r3
    d770:	8900402c 	andhi	r4,r17,256
    d774:	1950b03a 	or	r8,r3,r5
    d778:	20000726 	beq	r4,zero,d798 <__muldf3+0x4dc>
    d77c:	4006d07a 	srli	r3,r8,1
    d780:	880497fa 	slli	r2,r17,31
    d784:	4200004c 	andi	r8,r8,1
    d788:	8822d07a 	srli	r17,r17,1
    d78c:	1a10b03a 	or	r8,r3,r8
    d790:	1210b03a 	or	r8,r2,r8
    d794:	5805883a 	mov	r2,r11
    d798:	1140ffc4 	addi	r5,r2,1023
    d79c:	0140440e 	bge	zero,r5,d8b0 <__muldf3+0x5f4>
    d7a0:	40c001cc 	andi	r3,r8,7
    d7a4:	18000726 	beq	r3,zero,d7c4 <__muldf3+0x508>
    d7a8:	40c003cc 	andi	r3,r8,15
    d7ac:	01000104 	movi	r4,4
    d7b0:	19000426 	beq	r3,r4,d7c4 <__muldf3+0x508>
    d7b4:	4107883a 	add	r3,r8,r4
    d7b8:	1a11803a 	cmpltu	r8,r3,r8
    d7bc:	8a23883a 	add	r17,r17,r8
    d7c0:	1811883a 	mov	r8,r3
    d7c4:	88c0402c 	andhi	r3,r17,256
    d7c8:	18000426 	beq	r3,zero,d7dc <__muldf3+0x520>
    d7cc:	11410004 	addi	r5,r2,1024
    d7d0:	00bfc034 	movhi	r2,65280
    d7d4:	10bfffc4 	addi	r2,r2,-1
    d7d8:	88a2703a 	and	r17,r17,r2
    d7dc:	0081ff84 	movi	r2,2046
    d7e0:	117f6416 	blt	r2,r5,d574 <__alt_data_end+0xff00d574>
    d7e4:	8828977a 	slli	r20,r17,29
    d7e8:	4010d0fa 	srli	r8,r8,3
    d7ec:	8822927a 	slli	r17,r17,9
    d7f0:	2881ffcc 	andi	r2,r5,2047
    d7f4:	a228b03a 	or	r20,r20,r8
    d7f8:	880ad33a 	srli	r5,r17,12
    d7fc:	b02b883a 	mov	r21,r22
    d800:	003f0d06 	br	d438 <__alt_data_end+0xff00d438>
    d804:	8080022c 	andhi	r2,r16,8
    d808:	10000926 	beq	r2,zero,d830 <__muldf3+0x574>
    d80c:	8880022c 	andhi	r2,r17,8
    d810:	1000071e 	bne	r2,zero,d830 <__muldf3+0x574>
    d814:	00800434 	movhi	r2,16
    d818:	89400234 	orhi	r5,r17,8
    d81c:	10bfffc4 	addi	r2,r2,-1
    d820:	b82b883a 	mov	r21,r23
    d824:	288a703a 	and	r5,r5,r2
    d828:	4029883a 	mov	r20,r8
    d82c:	003f6806 	br	d5d0 <__alt_data_end+0xff00d5d0>
    d830:	00800434 	movhi	r2,16
    d834:	81400234 	orhi	r5,r16,8
    d838:	10bfffc4 	addi	r2,r2,-1
    d83c:	288a703a 	and	r5,r5,r2
    d840:	003f6306 	br	d5d0 <__alt_data_end+0xff00d5d0>
    d844:	147ff604 	addi	r17,r2,-40
    d848:	3462983a 	sll	r17,r6,r17
    d84c:	0011883a 	mov	r8,zero
    d850:	003f4406 	br	d564 <__alt_data_end+0xff00d564>
    d854:	3009883a 	mov	r4,r6
    d858:	d9800215 	stw	r6,8(sp)
    d85c:	da400115 	stw	r9,4(sp)
    d860:	da800015 	stw	r10,0(sp)
    d864:	000e4d40 	call	e4d4 <__clzsi2>
    d868:	10800804 	addi	r2,r2,32
    d86c:	da800017 	ldw	r10,0(sp)
    d870:	da400117 	ldw	r9,4(sp)
    d874:	d9800217 	ldw	r6,8(sp)
    d878:	003f3006 	br	d53c <__alt_data_end+0xff00d53c>
    d87c:	143ff604 	addi	r16,r2,-40
    d880:	9c20983a 	sll	r16,r19,r16
    d884:	0029883a 	mov	r20,zero
    d888:	003f1606 	br	d4e4 <__alt_data_end+0xff00d4e4>
    d88c:	d9800215 	stw	r6,8(sp)
    d890:	d9c00015 	stw	r7,0(sp)
    d894:	da400115 	stw	r9,4(sp)
    d898:	000e4d40 	call	e4d4 <__clzsi2>
    d89c:	10800804 	addi	r2,r2,32
    d8a0:	da400117 	ldw	r9,4(sp)
    d8a4:	d9c00017 	ldw	r7,0(sp)
    d8a8:	d9800217 	ldw	r6,8(sp)
    d8ac:	003f0306 	br	d4bc <__alt_data_end+0xff00d4bc>
    d8b0:	00c00044 	movi	r3,1
    d8b4:	1947c83a 	sub	r3,r3,r5
    d8b8:	00800e04 	movi	r2,56
    d8bc:	10feda16 	blt	r2,r3,d428 <__alt_data_end+0xff00d428>
    d8c0:	008007c4 	movi	r2,31
    d8c4:	10c01b16 	blt	r2,r3,d934 <__muldf3+0x678>
    d8c8:	00800804 	movi	r2,32
    d8cc:	10c5c83a 	sub	r2,r2,r3
    d8d0:	888a983a 	sll	r5,r17,r2
    d8d4:	40c8d83a 	srl	r4,r8,r3
    d8d8:	4084983a 	sll	r2,r8,r2
    d8dc:	88e2d83a 	srl	r17,r17,r3
    d8e0:	2906b03a 	or	r3,r5,r4
    d8e4:	1004c03a 	cmpne	r2,r2,zero
    d8e8:	1886b03a 	or	r3,r3,r2
    d8ec:	188001cc 	andi	r2,r3,7
    d8f0:	10000726 	beq	r2,zero,d910 <__muldf3+0x654>
    d8f4:	188003cc 	andi	r2,r3,15
    d8f8:	01000104 	movi	r4,4
    d8fc:	11000426 	beq	r2,r4,d910 <__muldf3+0x654>
    d900:	1805883a 	mov	r2,r3
    d904:	10c00104 	addi	r3,r2,4
    d908:	1885803a 	cmpltu	r2,r3,r2
    d90c:	88a3883a 	add	r17,r17,r2
    d910:	8880202c 	andhi	r2,r17,128
    d914:	10001c26 	beq	r2,zero,d988 <__muldf3+0x6cc>
    d918:	b02b883a 	mov	r21,r22
    d91c:	00800044 	movi	r2,1
    d920:	000b883a 	mov	r5,zero
    d924:	0029883a 	mov	r20,zero
    d928:	003ec306 	br	d438 <__alt_data_end+0xff00d438>
    d92c:	5805883a 	mov	r2,r11
    d930:	003f9906 	br	d798 <__alt_data_end+0xff00d798>
    d934:	00bff844 	movi	r2,-31
    d938:	1145c83a 	sub	r2,r2,r5
    d93c:	8888d83a 	srl	r4,r17,r2
    d940:	00800804 	movi	r2,32
    d944:	18801a26 	beq	r3,r2,d9b0 <__muldf3+0x6f4>
    d948:	00801004 	movi	r2,64
    d94c:	10c5c83a 	sub	r2,r2,r3
    d950:	8884983a 	sll	r2,r17,r2
    d954:	1204b03a 	or	r2,r2,r8
    d958:	1004c03a 	cmpne	r2,r2,zero
    d95c:	2084b03a 	or	r2,r4,r2
    d960:	144001cc 	andi	r17,r2,7
    d964:	88000d1e 	bne	r17,zero,d99c <__muldf3+0x6e0>
    d968:	000b883a 	mov	r5,zero
    d96c:	1028d0fa 	srli	r20,r2,3
    d970:	b02b883a 	mov	r21,r22
    d974:	0005883a 	mov	r2,zero
    d978:	a468b03a 	or	r20,r20,r17
    d97c:	003eae06 	br	d438 <__alt_data_end+0xff00d438>
    d980:	1007883a 	mov	r3,r2
    d984:	0023883a 	mov	r17,zero
    d988:	880a927a 	slli	r5,r17,9
    d98c:	1805883a 	mov	r2,r3
    d990:	8822977a 	slli	r17,r17,29
    d994:	280ad33a 	srli	r5,r5,12
    d998:	003ff406 	br	d96c <__alt_data_end+0xff00d96c>
    d99c:	10c003cc 	andi	r3,r2,15
    d9a0:	01000104 	movi	r4,4
    d9a4:	193ff626 	beq	r3,r4,d980 <__alt_data_end+0xff00d980>
    d9a8:	0023883a 	mov	r17,zero
    d9ac:	003fd506 	br	d904 <__alt_data_end+0xff00d904>
    d9b0:	0005883a 	mov	r2,zero
    d9b4:	003fe706 	br	d954 <__alt_data_end+0xff00d954>
    d9b8:	00800434 	movhi	r2,16
    d9bc:	89400234 	orhi	r5,r17,8
    d9c0:	10bfffc4 	addi	r2,r2,-1
    d9c4:	b02b883a 	mov	r21,r22
    d9c8:	288a703a 	and	r5,r5,r2
    d9cc:	4029883a 	mov	r20,r8
    d9d0:	003eff06 	br	d5d0 <__alt_data_end+0xff00d5d0>

0000d9d4 <__subdf3>:
    d9d4:	02000434 	movhi	r8,16
    d9d8:	423fffc4 	addi	r8,r8,-1
    d9dc:	defffb04 	addi	sp,sp,-20
    d9e0:	2a14703a 	and	r10,r5,r8
    d9e4:	3812d53a 	srli	r9,r7,20
    d9e8:	3a10703a 	and	r8,r7,r8
    d9ec:	2006d77a 	srli	r3,r4,29
    d9f0:	3004d77a 	srli	r2,r6,29
    d9f4:	dc000015 	stw	r16,0(sp)
    d9f8:	501490fa 	slli	r10,r10,3
    d9fc:	2820d53a 	srli	r16,r5,20
    da00:	401090fa 	slli	r8,r8,3
    da04:	dc800215 	stw	r18,8(sp)
    da08:	dc400115 	stw	r17,4(sp)
    da0c:	dfc00415 	stw	ra,16(sp)
    da10:	202290fa 	slli	r17,r4,3
    da14:	dcc00315 	stw	r19,12(sp)
    da18:	4a41ffcc 	andi	r9,r9,2047
    da1c:	0101ffc4 	movi	r4,2047
    da20:	2824d7fa 	srli	r18,r5,31
    da24:	8401ffcc 	andi	r16,r16,2047
    da28:	50c6b03a 	or	r3,r10,r3
    da2c:	380ed7fa 	srli	r7,r7,31
    da30:	408ab03a 	or	r5,r8,r2
    da34:	300c90fa 	slli	r6,r6,3
    da38:	49009626 	beq	r9,r4,dc94 <__subdf3+0x2c0>
    da3c:	39c0005c 	xori	r7,r7,1
    da40:	8245c83a 	sub	r2,r16,r9
    da44:	3c807426 	beq	r7,r18,dc18 <__subdf3+0x244>
    da48:	0080af0e 	bge	zero,r2,dd08 <__subdf3+0x334>
    da4c:	48002a1e 	bne	r9,zero,daf8 <__subdf3+0x124>
    da50:	2988b03a 	or	r4,r5,r6
    da54:	20009a1e 	bne	r4,zero,dcc0 <__subdf3+0x2ec>
    da58:	888001cc 	andi	r2,r17,7
    da5c:	10000726 	beq	r2,zero,da7c <__subdf3+0xa8>
    da60:	888003cc 	andi	r2,r17,15
    da64:	01000104 	movi	r4,4
    da68:	11000426 	beq	r2,r4,da7c <__subdf3+0xa8>
    da6c:	890b883a 	add	r5,r17,r4
    da70:	2c63803a 	cmpltu	r17,r5,r17
    da74:	1c47883a 	add	r3,r3,r17
    da78:	2823883a 	mov	r17,r5
    da7c:	1880202c 	andhi	r2,r3,128
    da80:	10005926 	beq	r2,zero,dbe8 <__subdf3+0x214>
    da84:	84000044 	addi	r16,r16,1
    da88:	0081ffc4 	movi	r2,2047
    da8c:	8080be26 	beq	r16,r2,dd88 <__subdf3+0x3b4>
    da90:	017fe034 	movhi	r5,65408
    da94:	297fffc4 	addi	r5,r5,-1
    da98:	1946703a 	and	r3,r3,r5
    da9c:	1804977a 	slli	r2,r3,29
    daa0:	1806927a 	slli	r3,r3,9
    daa4:	8822d0fa 	srli	r17,r17,3
    daa8:	8401ffcc 	andi	r16,r16,2047
    daac:	180ad33a 	srli	r5,r3,12
    dab0:	9100004c 	andi	r4,r18,1
    dab4:	1444b03a 	or	r2,r2,r17
    dab8:	80c1ffcc 	andi	r3,r16,2047
    dabc:	1820953a 	slli	r16,r3,20
    dac0:	20c03fcc 	andi	r3,r4,255
    dac4:	180897fa 	slli	r4,r3,31
    dac8:	00c00434 	movhi	r3,16
    dacc:	18ffffc4 	addi	r3,r3,-1
    dad0:	28c6703a 	and	r3,r5,r3
    dad4:	1c06b03a 	or	r3,r3,r16
    dad8:	1906b03a 	or	r3,r3,r4
    dadc:	dfc00417 	ldw	ra,16(sp)
    dae0:	dcc00317 	ldw	r19,12(sp)
    dae4:	dc800217 	ldw	r18,8(sp)
    dae8:	dc400117 	ldw	r17,4(sp)
    daec:	dc000017 	ldw	r16,0(sp)
    daf0:	dec00504 	addi	sp,sp,20
    daf4:	f800283a 	ret
    daf8:	0101ffc4 	movi	r4,2047
    dafc:	813fd626 	beq	r16,r4,da58 <__alt_data_end+0xff00da58>
    db00:	29402034 	orhi	r5,r5,128
    db04:	01000e04 	movi	r4,56
    db08:	2080a316 	blt	r4,r2,dd98 <__subdf3+0x3c4>
    db0c:	010007c4 	movi	r4,31
    db10:	2080c616 	blt	r4,r2,de2c <__subdf3+0x458>
    db14:	01000804 	movi	r4,32
    db18:	2089c83a 	sub	r4,r4,r2
    db1c:	2910983a 	sll	r8,r5,r4
    db20:	308ed83a 	srl	r7,r6,r2
    db24:	3108983a 	sll	r4,r6,r4
    db28:	2884d83a 	srl	r2,r5,r2
    db2c:	41ccb03a 	or	r6,r8,r7
    db30:	2008c03a 	cmpne	r4,r4,zero
    db34:	310cb03a 	or	r6,r6,r4
    db38:	898dc83a 	sub	r6,r17,r6
    db3c:	89a3803a 	cmpltu	r17,r17,r6
    db40:	1887c83a 	sub	r3,r3,r2
    db44:	1c47c83a 	sub	r3,r3,r17
    db48:	3023883a 	mov	r17,r6
    db4c:	1880202c 	andhi	r2,r3,128
    db50:	10002326 	beq	r2,zero,dbe0 <__subdf3+0x20c>
    db54:	04c02034 	movhi	r19,128
    db58:	9cffffc4 	addi	r19,r19,-1
    db5c:	1ce6703a 	and	r19,r3,r19
    db60:	98007a26 	beq	r19,zero,dd4c <__subdf3+0x378>
    db64:	9809883a 	mov	r4,r19
    db68:	000e4d40 	call	e4d4 <__clzsi2>
    db6c:	113ffe04 	addi	r4,r2,-8
    db70:	00c007c4 	movi	r3,31
    db74:	19007b16 	blt	r3,r4,dd64 <__subdf3+0x390>
    db78:	00800804 	movi	r2,32
    db7c:	1105c83a 	sub	r2,r2,r4
    db80:	8884d83a 	srl	r2,r17,r2
    db84:	9906983a 	sll	r3,r19,r4
    db88:	8922983a 	sll	r17,r17,r4
    db8c:	10c4b03a 	or	r2,r2,r3
    db90:	24007816 	blt	r4,r16,dd74 <__subdf3+0x3a0>
    db94:	2421c83a 	sub	r16,r4,r16
    db98:	80c00044 	addi	r3,r16,1
    db9c:	010007c4 	movi	r4,31
    dba0:	20c09516 	blt	r4,r3,ddf8 <__subdf3+0x424>
    dba4:	01400804 	movi	r5,32
    dba8:	28cbc83a 	sub	r5,r5,r3
    dbac:	88c8d83a 	srl	r4,r17,r3
    dbb0:	8962983a 	sll	r17,r17,r5
    dbb4:	114a983a 	sll	r5,r2,r5
    dbb8:	10c6d83a 	srl	r3,r2,r3
    dbbc:	8804c03a 	cmpne	r2,r17,zero
    dbc0:	290ab03a 	or	r5,r5,r4
    dbc4:	28a2b03a 	or	r17,r5,r2
    dbc8:	0021883a 	mov	r16,zero
    dbcc:	003fa206 	br	da58 <__alt_data_end+0xff00da58>
    dbd0:	2090b03a 	or	r8,r4,r2
    dbd4:	40018e26 	beq	r8,zero,e210 <__subdf3+0x83c>
    dbd8:	1007883a 	mov	r3,r2
    dbdc:	2023883a 	mov	r17,r4
    dbe0:	888001cc 	andi	r2,r17,7
    dbe4:	103f9e1e 	bne	r2,zero,da60 <__alt_data_end+0xff00da60>
    dbe8:	1804977a 	slli	r2,r3,29
    dbec:	8822d0fa 	srli	r17,r17,3
    dbf0:	1810d0fa 	srli	r8,r3,3
    dbf4:	9100004c 	andi	r4,r18,1
    dbf8:	1444b03a 	or	r2,r2,r17
    dbfc:	00c1ffc4 	movi	r3,2047
    dc00:	80c02826 	beq	r16,r3,dca4 <__subdf3+0x2d0>
    dc04:	01400434 	movhi	r5,16
    dc08:	297fffc4 	addi	r5,r5,-1
    dc0c:	80e0703a 	and	r16,r16,r3
    dc10:	414a703a 	and	r5,r8,r5
    dc14:	003fa806 	br	dab8 <__alt_data_end+0xff00dab8>
    dc18:	0080630e 	bge	zero,r2,dda8 <__subdf3+0x3d4>
    dc1c:	48003026 	beq	r9,zero,dce0 <__subdf3+0x30c>
    dc20:	0101ffc4 	movi	r4,2047
    dc24:	813f8c26 	beq	r16,r4,da58 <__alt_data_end+0xff00da58>
    dc28:	29402034 	orhi	r5,r5,128
    dc2c:	01000e04 	movi	r4,56
    dc30:	2080a90e 	bge	r4,r2,ded8 <__subdf3+0x504>
    dc34:	298cb03a 	or	r6,r5,r6
    dc38:	3012c03a 	cmpne	r9,r6,zero
    dc3c:	0005883a 	mov	r2,zero
    dc40:	4c53883a 	add	r9,r9,r17
    dc44:	4c63803a 	cmpltu	r17,r9,r17
    dc48:	10c7883a 	add	r3,r2,r3
    dc4c:	88c7883a 	add	r3,r17,r3
    dc50:	4823883a 	mov	r17,r9
    dc54:	1880202c 	andhi	r2,r3,128
    dc58:	1000d026 	beq	r2,zero,df9c <__subdf3+0x5c8>
    dc5c:	84000044 	addi	r16,r16,1
    dc60:	0081ffc4 	movi	r2,2047
    dc64:	8080fe26 	beq	r16,r2,e060 <__subdf3+0x68c>
    dc68:	00bfe034 	movhi	r2,65408
    dc6c:	10bfffc4 	addi	r2,r2,-1
    dc70:	1886703a 	and	r3,r3,r2
    dc74:	880ad07a 	srli	r5,r17,1
    dc78:	180497fa 	slli	r2,r3,31
    dc7c:	8900004c 	andi	r4,r17,1
    dc80:	2922b03a 	or	r17,r5,r4
    dc84:	1806d07a 	srli	r3,r3,1
    dc88:	1462b03a 	or	r17,r2,r17
    dc8c:	3825883a 	mov	r18,r7
    dc90:	003f7106 	br	da58 <__alt_data_end+0xff00da58>
    dc94:	2984b03a 	or	r2,r5,r6
    dc98:	103f6826 	beq	r2,zero,da3c <__alt_data_end+0xff00da3c>
    dc9c:	39c03fcc 	andi	r7,r7,255
    dca0:	003f6706 	br	da40 <__alt_data_end+0xff00da40>
    dca4:	4086b03a 	or	r3,r8,r2
    dca8:	18015226 	beq	r3,zero,e1f4 <__subdf3+0x820>
    dcac:	00c00434 	movhi	r3,16
    dcb0:	41400234 	orhi	r5,r8,8
    dcb4:	18ffffc4 	addi	r3,r3,-1
    dcb8:	28ca703a 	and	r5,r5,r3
    dcbc:	003f7e06 	br	dab8 <__alt_data_end+0xff00dab8>
    dcc0:	10bfffc4 	addi	r2,r2,-1
    dcc4:	1000491e 	bne	r2,zero,ddec <__subdf3+0x418>
    dcc8:	898fc83a 	sub	r7,r17,r6
    dccc:	89e3803a 	cmpltu	r17,r17,r7
    dcd0:	1947c83a 	sub	r3,r3,r5
    dcd4:	1c47c83a 	sub	r3,r3,r17
    dcd8:	3823883a 	mov	r17,r7
    dcdc:	003f9b06 	br	db4c <__alt_data_end+0xff00db4c>
    dce0:	2988b03a 	or	r4,r5,r6
    dce4:	203f5c26 	beq	r4,zero,da58 <__alt_data_end+0xff00da58>
    dce8:	10bfffc4 	addi	r2,r2,-1
    dcec:	1000931e 	bne	r2,zero,df3c <__subdf3+0x568>
    dcf0:	898d883a 	add	r6,r17,r6
    dcf4:	3463803a 	cmpltu	r17,r6,r17
    dcf8:	1947883a 	add	r3,r3,r5
    dcfc:	88c7883a 	add	r3,r17,r3
    dd00:	3023883a 	mov	r17,r6
    dd04:	003fd306 	br	dc54 <__alt_data_end+0xff00dc54>
    dd08:	1000541e 	bne	r2,zero,de5c <__subdf3+0x488>
    dd0c:	80800044 	addi	r2,r16,1
    dd10:	1081ffcc 	andi	r2,r2,2047
    dd14:	01000044 	movi	r4,1
    dd18:	2080a20e 	bge	r4,r2,dfa4 <__subdf3+0x5d0>
    dd1c:	8989c83a 	sub	r4,r17,r6
    dd20:	8905803a 	cmpltu	r2,r17,r4
    dd24:	1967c83a 	sub	r19,r3,r5
    dd28:	98a7c83a 	sub	r19,r19,r2
    dd2c:	9880202c 	andhi	r2,r19,128
    dd30:	10006326 	beq	r2,zero,dec0 <__subdf3+0x4ec>
    dd34:	3463c83a 	sub	r17,r6,r17
    dd38:	28c7c83a 	sub	r3,r5,r3
    dd3c:	344d803a 	cmpltu	r6,r6,r17
    dd40:	19a7c83a 	sub	r19,r3,r6
    dd44:	3825883a 	mov	r18,r7
    dd48:	983f861e 	bne	r19,zero,db64 <__alt_data_end+0xff00db64>
    dd4c:	8809883a 	mov	r4,r17
    dd50:	000e4d40 	call	e4d4 <__clzsi2>
    dd54:	10800804 	addi	r2,r2,32
    dd58:	113ffe04 	addi	r4,r2,-8
    dd5c:	00c007c4 	movi	r3,31
    dd60:	193f850e 	bge	r3,r4,db78 <__alt_data_end+0xff00db78>
    dd64:	10bff604 	addi	r2,r2,-40
    dd68:	8884983a 	sll	r2,r17,r2
    dd6c:	0023883a 	mov	r17,zero
    dd70:	243f880e 	bge	r4,r16,db94 <__alt_data_end+0xff00db94>
    dd74:	00ffe034 	movhi	r3,65408
    dd78:	18ffffc4 	addi	r3,r3,-1
    dd7c:	8121c83a 	sub	r16,r16,r4
    dd80:	10c6703a 	and	r3,r2,r3
    dd84:	003f3406 	br	da58 <__alt_data_end+0xff00da58>
    dd88:	9100004c 	andi	r4,r18,1
    dd8c:	000b883a 	mov	r5,zero
    dd90:	0005883a 	mov	r2,zero
    dd94:	003f4806 	br	dab8 <__alt_data_end+0xff00dab8>
    dd98:	298cb03a 	or	r6,r5,r6
    dd9c:	300cc03a 	cmpne	r6,r6,zero
    dda0:	0005883a 	mov	r2,zero
    dda4:	003f6406 	br	db38 <__alt_data_end+0xff00db38>
    dda8:	10009a1e 	bne	r2,zero,e014 <__subdf3+0x640>
    ddac:	82400044 	addi	r9,r16,1
    ddb0:	4881ffcc 	andi	r2,r9,2047
    ddb4:	02800044 	movi	r10,1
    ddb8:	5080670e 	bge	r10,r2,df58 <__subdf3+0x584>
    ddbc:	0081ffc4 	movi	r2,2047
    ddc0:	4880af26 	beq	r9,r2,e080 <__subdf3+0x6ac>
    ddc4:	898d883a 	add	r6,r17,r6
    ddc8:	1945883a 	add	r2,r3,r5
    ddcc:	3447803a 	cmpltu	r3,r6,r17
    ddd0:	1887883a 	add	r3,r3,r2
    ddd4:	182297fa 	slli	r17,r3,31
    ddd8:	300cd07a 	srli	r6,r6,1
    dddc:	1806d07a 	srli	r3,r3,1
    dde0:	4821883a 	mov	r16,r9
    dde4:	89a2b03a 	or	r17,r17,r6
    dde8:	003f1b06 	br	da58 <__alt_data_end+0xff00da58>
    ddec:	0101ffc4 	movi	r4,2047
    ddf0:	813f441e 	bne	r16,r4,db04 <__alt_data_end+0xff00db04>
    ddf4:	003f1806 	br	da58 <__alt_data_end+0xff00da58>
    ddf8:	843ff844 	addi	r16,r16,-31
    ddfc:	01400804 	movi	r5,32
    de00:	1408d83a 	srl	r4,r2,r16
    de04:	19405026 	beq	r3,r5,df48 <__subdf3+0x574>
    de08:	01401004 	movi	r5,64
    de0c:	28c7c83a 	sub	r3,r5,r3
    de10:	10c4983a 	sll	r2,r2,r3
    de14:	88a2b03a 	or	r17,r17,r2
    de18:	8822c03a 	cmpne	r17,r17,zero
    de1c:	2462b03a 	or	r17,r4,r17
    de20:	0007883a 	mov	r3,zero
    de24:	0021883a 	mov	r16,zero
    de28:	003f6d06 	br	dbe0 <__alt_data_end+0xff00dbe0>
    de2c:	11fff804 	addi	r7,r2,-32
    de30:	01000804 	movi	r4,32
    de34:	29ced83a 	srl	r7,r5,r7
    de38:	11004526 	beq	r2,r4,df50 <__subdf3+0x57c>
    de3c:	01001004 	movi	r4,64
    de40:	2089c83a 	sub	r4,r4,r2
    de44:	2904983a 	sll	r2,r5,r4
    de48:	118cb03a 	or	r6,r2,r6
    de4c:	300cc03a 	cmpne	r6,r6,zero
    de50:	398cb03a 	or	r6,r7,r6
    de54:	0005883a 	mov	r2,zero
    de58:	003f3706 	br	db38 <__alt_data_end+0xff00db38>
    de5c:	80002a26 	beq	r16,zero,df08 <__subdf3+0x534>
    de60:	0101ffc4 	movi	r4,2047
    de64:	49006626 	beq	r9,r4,e000 <__subdf3+0x62c>
    de68:	0085c83a 	sub	r2,zero,r2
    de6c:	18c02034 	orhi	r3,r3,128
    de70:	01000e04 	movi	r4,56
    de74:	20807e16 	blt	r4,r2,e070 <__subdf3+0x69c>
    de78:	010007c4 	movi	r4,31
    de7c:	2080e716 	blt	r4,r2,e21c <__subdf3+0x848>
    de80:	01000804 	movi	r4,32
    de84:	2089c83a 	sub	r4,r4,r2
    de88:	1914983a 	sll	r10,r3,r4
    de8c:	8890d83a 	srl	r8,r17,r2
    de90:	8908983a 	sll	r4,r17,r4
    de94:	1884d83a 	srl	r2,r3,r2
    de98:	5222b03a 	or	r17,r10,r8
    de9c:	2006c03a 	cmpne	r3,r4,zero
    dea0:	88e2b03a 	or	r17,r17,r3
    dea4:	3463c83a 	sub	r17,r6,r17
    dea8:	2885c83a 	sub	r2,r5,r2
    deac:	344d803a 	cmpltu	r6,r6,r17
    deb0:	1187c83a 	sub	r3,r2,r6
    deb4:	4821883a 	mov	r16,r9
    deb8:	3825883a 	mov	r18,r7
    debc:	003f2306 	br	db4c <__alt_data_end+0xff00db4c>
    dec0:	24d0b03a 	or	r8,r4,r19
    dec4:	40001b1e 	bne	r8,zero,df34 <__subdf3+0x560>
    dec8:	0005883a 	mov	r2,zero
    decc:	0009883a 	mov	r4,zero
    ded0:	0021883a 	mov	r16,zero
    ded4:	003f4906 	br	dbfc <__alt_data_end+0xff00dbfc>
    ded8:	010007c4 	movi	r4,31
    dedc:	20803a16 	blt	r4,r2,dfc8 <__subdf3+0x5f4>
    dee0:	01000804 	movi	r4,32
    dee4:	2089c83a 	sub	r4,r4,r2
    dee8:	2912983a 	sll	r9,r5,r4
    deec:	3090d83a 	srl	r8,r6,r2
    def0:	3108983a 	sll	r4,r6,r4
    def4:	2884d83a 	srl	r2,r5,r2
    def8:	4a12b03a 	or	r9,r9,r8
    defc:	2008c03a 	cmpne	r4,r4,zero
    df00:	4912b03a 	or	r9,r9,r4
    df04:	003f4e06 	br	dc40 <__alt_data_end+0xff00dc40>
    df08:	1c48b03a 	or	r4,r3,r17
    df0c:	20003c26 	beq	r4,zero,e000 <__subdf3+0x62c>
    df10:	0084303a 	nor	r2,zero,r2
    df14:	1000381e 	bne	r2,zero,dff8 <__subdf3+0x624>
    df18:	3463c83a 	sub	r17,r6,r17
    df1c:	28c5c83a 	sub	r2,r5,r3
    df20:	344d803a 	cmpltu	r6,r6,r17
    df24:	1187c83a 	sub	r3,r2,r6
    df28:	4821883a 	mov	r16,r9
    df2c:	3825883a 	mov	r18,r7
    df30:	003f0606 	br	db4c <__alt_data_end+0xff00db4c>
    df34:	2023883a 	mov	r17,r4
    df38:	003f0906 	br	db60 <__alt_data_end+0xff00db60>
    df3c:	0101ffc4 	movi	r4,2047
    df40:	813f3a1e 	bne	r16,r4,dc2c <__alt_data_end+0xff00dc2c>
    df44:	003ec406 	br	da58 <__alt_data_end+0xff00da58>
    df48:	0005883a 	mov	r2,zero
    df4c:	003fb106 	br	de14 <__alt_data_end+0xff00de14>
    df50:	0005883a 	mov	r2,zero
    df54:	003fbc06 	br	de48 <__alt_data_end+0xff00de48>
    df58:	1c44b03a 	or	r2,r3,r17
    df5c:	80008e1e 	bne	r16,zero,e198 <__subdf3+0x7c4>
    df60:	1000c826 	beq	r2,zero,e284 <__subdf3+0x8b0>
    df64:	2984b03a 	or	r2,r5,r6
    df68:	103ebb26 	beq	r2,zero,da58 <__alt_data_end+0xff00da58>
    df6c:	8989883a 	add	r4,r17,r6
    df70:	1945883a 	add	r2,r3,r5
    df74:	2447803a 	cmpltu	r3,r4,r17
    df78:	1887883a 	add	r3,r3,r2
    df7c:	1880202c 	andhi	r2,r3,128
    df80:	2023883a 	mov	r17,r4
    df84:	103f1626 	beq	r2,zero,dbe0 <__alt_data_end+0xff00dbe0>
    df88:	00bfe034 	movhi	r2,65408
    df8c:	10bfffc4 	addi	r2,r2,-1
    df90:	5021883a 	mov	r16,r10
    df94:	1886703a 	and	r3,r3,r2
    df98:	003eaf06 	br	da58 <__alt_data_end+0xff00da58>
    df9c:	3825883a 	mov	r18,r7
    dfa0:	003f0f06 	br	dbe0 <__alt_data_end+0xff00dbe0>
    dfa4:	1c44b03a 	or	r2,r3,r17
    dfa8:	8000251e 	bne	r16,zero,e040 <__subdf3+0x66c>
    dfac:	1000661e 	bne	r2,zero,e148 <__subdf3+0x774>
    dfb0:	2990b03a 	or	r8,r5,r6
    dfb4:	40009626 	beq	r8,zero,e210 <__subdf3+0x83c>
    dfb8:	2807883a 	mov	r3,r5
    dfbc:	3023883a 	mov	r17,r6
    dfc0:	3825883a 	mov	r18,r7
    dfc4:	003ea406 	br	da58 <__alt_data_end+0xff00da58>
    dfc8:	127ff804 	addi	r9,r2,-32
    dfcc:	01000804 	movi	r4,32
    dfd0:	2a52d83a 	srl	r9,r5,r9
    dfd4:	11008c26 	beq	r2,r4,e208 <__subdf3+0x834>
    dfd8:	01001004 	movi	r4,64
    dfdc:	2085c83a 	sub	r2,r4,r2
    dfe0:	2884983a 	sll	r2,r5,r2
    dfe4:	118cb03a 	or	r6,r2,r6
    dfe8:	300cc03a 	cmpne	r6,r6,zero
    dfec:	4992b03a 	or	r9,r9,r6
    dff0:	0005883a 	mov	r2,zero
    dff4:	003f1206 	br	dc40 <__alt_data_end+0xff00dc40>
    dff8:	0101ffc4 	movi	r4,2047
    dffc:	493f9c1e 	bne	r9,r4,de70 <__alt_data_end+0xff00de70>
    e000:	2807883a 	mov	r3,r5
    e004:	3023883a 	mov	r17,r6
    e008:	4821883a 	mov	r16,r9
    e00c:	3825883a 	mov	r18,r7
    e010:	003e9106 	br	da58 <__alt_data_end+0xff00da58>
    e014:	80001f1e 	bne	r16,zero,e094 <__subdf3+0x6c0>
    e018:	1c48b03a 	or	r4,r3,r17
    e01c:	20005a26 	beq	r4,zero,e188 <__subdf3+0x7b4>
    e020:	0084303a 	nor	r2,zero,r2
    e024:	1000561e 	bne	r2,zero,e180 <__subdf3+0x7ac>
    e028:	89a3883a 	add	r17,r17,r6
    e02c:	1945883a 	add	r2,r3,r5
    e030:	898d803a 	cmpltu	r6,r17,r6
    e034:	3087883a 	add	r3,r6,r2
    e038:	4821883a 	mov	r16,r9
    e03c:	003f0506 	br	dc54 <__alt_data_end+0xff00dc54>
    e040:	10002b1e 	bne	r2,zero,e0f0 <__subdf3+0x71c>
    e044:	2984b03a 	or	r2,r5,r6
    e048:	10008026 	beq	r2,zero,e24c <__subdf3+0x878>
    e04c:	2807883a 	mov	r3,r5
    e050:	3023883a 	mov	r17,r6
    e054:	3825883a 	mov	r18,r7
    e058:	0401ffc4 	movi	r16,2047
    e05c:	003e7e06 	br	da58 <__alt_data_end+0xff00da58>
    e060:	3809883a 	mov	r4,r7
    e064:	0011883a 	mov	r8,zero
    e068:	0005883a 	mov	r2,zero
    e06c:	003ee306 	br	dbfc <__alt_data_end+0xff00dbfc>
    e070:	1c62b03a 	or	r17,r3,r17
    e074:	8822c03a 	cmpne	r17,r17,zero
    e078:	0005883a 	mov	r2,zero
    e07c:	003f8906 	br	dea4 <__alt_data_end+0xff00dea4>
    e080:	3809883a 	mov	r4,r7
    e084:	4821883a 	mov	r16,r9
    e088:	0011883a 	mov	r8,zero
    e08c:	0005883a 	mov	r2,zero
    e090:	003eda06 	br	dbfc <__alt_data_end+0xff00dbfc>
    e094:	0101ffc4 	movi	r4,2047
    e098:	49003b26 	beq	r9,r4,e188 <__subdf3+0x7b4>
    e09c:	0085c83a 	sub	r2,zero,r2
    e0a0:	18c02034 	orhi	r3,r3,128
    e0a4:	01000e04 	movi	r4,56
    e0a8:	20806e16 	blt	r4,r2,e264 <__subdf3+0x890>
    e0ac:	010007c4 	movi	r4,31
    e0b0:	20807716 	blt	r4,r2,e290 <__subdf3+0x8bc>
    e0b4:	01000804 	movi	r4,32
    e0b8:	2089c83a 	sub	r4,r4,r2
    e0bc:	1914983a 	sll	r10,r3,r4
    e0c0:	8890d83a 	srl	r8,r17,r2
    e0c4:	8908983a 	sll	r4,r17,r4
    e0c8:	1884d83a 	srl	r2,r3,r2
    e0cc:	5222b03a 	or	r17,r10,r8
    e0d0:	2006c03a 	cmpne	r3,r4,zero
    e0d4:	88e2b03a 	or	r17,r17,r3
    e0d8:	89a3883a 	add	r17,r17,r6
    e0dc:	1145883a 	add	r2,r2,r5
    e0e0:	898d803a 	cmpltu	r6,r17,r6
    e0e4:	3087883a 	add	r3,r6,r2
    e0e8:	4821883a 	mov	r16,r9
    e0ec:	003ed906 	br	dc54 <__alt_data_end+0xff00dc54>
    e0f0:	2984b03a 	or	r2,r5,r6
    e0f4:	10004226 	beq	r2,zero,e200 <__subdf3+0x82c>
    e0f8:	1808d0fa 	srli	r4,r3,3
    e0fc:	8822d0fa 	srli	r17,r17,3
    e100:	1806977a 	slli	r3,r3,29
    e104:	2080022c 	andhi	r2,r4,8
    e108:	1c62b03a 	or	r17,r3,r17
    e10c:	10000826 	beq	r2,zero,e130 <__subdf3+0x75c>
    e110:	2812d0fa 	srli	r9,r5,3
    e114:	4880022c 	andhi	r2,r9,8
    e118:	1000051e 	bne	r2,zero,e130 <__subdf3+0x75c>
    e11c:	300cd0fa 	srli	r6,r6,3
    e120:	2804977a 	slli	r2,r5,29
    e124:	4809883a 	mov	r4,r9
    e128:	3825883a 	mov	r18,r7
    e12c:	11a2b03a 	or	r17,r2,r6
    e130:	8806d77a 	srli	r3,r17,29
    e134:	200890fa 	slli	r4,r4,3
    e138:	882290fa 	slli	r17,r17,3
    e13c:	0401ffc4 	movi	r16,2047
    e140:	1906b03a 	or	r3,r3,r4
    e144:	003e4406 	br	da58 <__alt_data_end+0xff00da58>
    e148:	2984b03a 	or	r2,r5,r6
    e14c:	103e4226 	beq	r2,zero,da58 <__alt_data_end+0xff00da58>
    e150:	8989c83a 	sub	r4,r17,r6
    e154:	8911803a 	cmpltu	r8,r17,r4
    e158:	1945c83a 	sub	r2,r3,r5
    e15c:	1205c83a 	sub	r2,r2,r8
    e160:	1200202c 	andhi	r8,r2,128
    e164:	403e9a26 	beq	r8,zero,dbd0 <__alt_data_end+0xff00dbd0>
    e168:	3463c83a 	sub	r17,r6,r17
    e16c:	28c5c83a 	sub	r2,r5,r3
    e170:	344d803a 	cmpltu	r6,r6,r17
    e174:	1187c83a 	sub	r3,r2,r6
    e178:	3825883a 	mov	r18,r7
    e17c:	003e3606 	br	da58 <__alt_data_end+0xff00da58>
    e180:	0101ffc4 	movi	r4,2047
    e184:	493fc71e 	bne	r9,r4,e0a4 <__alt_data_end+0xff00e0a4>
    e188:	2807883a 	mov	r3,r5
    e18c:	3023883a 	mov	r17,r6
    e190:	4821883a 	mov	r16,r9
    e194:	003e3006 	br	da58 <__alt_data_end+0xff00da58>
    e198:	10003626 	beq	r2,zero,e274 <__subdf3+0x8a0>
    e19c:	2984b03a 	or	r2,r5,r6
    e1a0:	10001726 	beq	r2,zero,e200 <__subdf3+0x82c>
    e1a4:	1808d0fa 	srli	r4,r3,3
    e1a8:	8822d0fa 	srli	r17,r17,3
    e1ac:	1806977a 	slli	r3,r3,29
    e1b0:	2080022c 	andhi	r2,r4,8
    e1b4:	1c62b03a 	or	r17,r3,r17
    e1b8:	10000726 	beq	r2,zero,e1d8 <__subdf3+0x804>
    e1bc:	2812d0fa 	srli	r9,r5,3
    e1c0:	4880022c 	andhi	r2,r9,8
    e1c4:	1000041e 	bne	r2,zero,e1d8 <__subdf3+0x804>
    e1c8:	300cd0fa 	srli	r6,r6,3
    e1cc:	2804977a 	slli	r2,r5,29
    e1d0:	4809883a 	mov	r4,r9
    e1d4:	11a2b03a 	or	r17,r2,r6
    e1d8:	8806d77a 	srli	r3,r17,29
    e1dc:	200890fa 	slli	r4,r4,3
    e1e0:	882290fa 	slli	r17,r17,3
    e1e4:	3825883a 	mov	r18,r7
    e1e8:	1906b03a 	or	r3,r3,r4
    e1ec:	0401ffc4 	movi	r16,2047
    e1f0:	003e1906 	br	da58 <__alt_data_end+0xff00da58>
    e1f4:	000b883a 	mov	r5,zero
    e1f8:	0005883a 	mov	r2,zero
    e1fc:	003e2e06 	br	dab8 <__alt_data_end+0xff00dab8>
    e200:	0401ffc4 	movi	r16,2047
    e204:	003e1406 	br	da58 <__alt_data_end+0xff00da58>
    e208:	0005883a 	mov	r2,zero
    e20c:	003f7506 	br	dfe4 <__alt_data_end+0xff00dfe4>
    e210:	0005883a 	mov	r2,zero
    e214:	0009883a 	mov	r4,zero
    e218:	003e7806 	br	dbfc <__alt_data_end+0xff00dbfc>
    e21c:	123ff804 	addi	r8,r2,-32
    e220:	01000804 	movi	r4,32
    e224:	1a10d83a 	srl	r8,r3,r8
    e228:	11002526 	beq	r2,r4,e2c0 <__subdf3+0x8ec>
    e22c:	01001004 	movi	r4,64
    e230:	2085c83a 	sub	r2,r4,r2
    e234:	1884983a 	sll	r2,r3,r2
    e238:	1444b03a 	or	r2,r2,r17
    e23c:	1004c03a 	cmpne	r2,r2,zero
    e240:	40a2b03a 	or	r17,r8,r2
    e244:	0005883a 	mov	r2,zero
    e248:	003f1606 	br	dea4 <__alt_data_end+0xff00dea4>
    e24c:	02000434 	movhi	r8,16
    e250:	0009883a 	mov	r4,zero
    e254:	423fffc4 	addi	r8,r8,-1
    e258:	00bfffc4 	movi	r2,-1
    e25c:	0401ffc4 	movi	r16,2047
    e260:	003e6606 	br	dbfc <__alt_data_end+0xff00dbfc>
    e264:	1c62b03a 	or	r17,r3,r17
    e268:	8822c03a 	cmpne	r17,r17,zero
    e26c:	0005883a 	mov	r2,zero
    e270:	003f9906 	br	e0d8 <__alt_data_end+0xff00e0d8>
    e274:	2807883a 	mov	r3,r5
    e278:	3023883a 	mov	r17,r6
    e27c:	0401ffc4 	movi	r16,2047
    e280:	003df506 	br	da58 <__alt_data_end+0xff00da58>
    e284:	2807883a 	mov	r3,r5
    e288:	3023883a 	mov	r17,r6
    e28c:	003df206 	br	da58 <__alt_data_end+0xff00da58>
    e290:	123ff804 	addi	r8,r2,-32
    e294:	01000804 	movi	r4,32
    e298:	1a10d83a 	srl	r8,r3,r8
    e29c:	11000a26 	beq	r2,r4,e2c8 <__subdf3+0x8f4>
    e2a0:	01001004 	movi	r4,64
    e2a4:	2085c83a 	sub	r2,r4,r2
    e2a8:	1884983a 	sll	r2,r3,r2
    e2ac:	1444b03a 	or	r2,r2,r17
    e2b0:	1004c03a 	cmpne	r2,r2,zero
    e2b4:	40a2b03a 	or	r17,r8,r2
    e2b8:	0005883a 	mov	r2,zero
    e2bc:	003f8606 	br	e0d8 <__alt_data_end+0xff00e0d8>
    e2c0:	0005883a 	mov	r2,zero
    e2c4:	003fdc06 	br	e238 <__alt_data_end+0xff00e238>
    e2c8:	0005883a 	mov	r2,zero
    e2cc:	003ff706 	br	e2ac <__alt_data_end+0xff00e2ac>

0000e2d0 <__fixdfsi>:
    e2d0:	280cd53a 	srli	r6,r5,20
    e2d4:	00c00434 	movhi	r3,16
    e2d8:	18ffffc4 	addi	r3,r3,-1
    e2dc:	3181ffcc 	andi	r6,r6,2047
    e2e0:	01c0ff84 	movi	r7,1022
    e2e4:	28c6703a 	and	r3,r5,r3
    e2e8:	280ad7fa 	srli	r5,r5,31
    e2ec:	3980120e 	bge	r7,r6,e338 <__fixdfsi+0x68>
    e2f0:	00810744 	movi	r2,1053
    e2f4:	11800c16 	blt	r2,r6,e328 <__fixdfsi+0x58>
    e2f8:	00810cc4 	movi	r2,1075
    e2fc:	1185c83a 	sub	r2,r2,r6
    e300:	01c007c4 	movi	r7,31
    e304:	18c00434 	orhi	r3,r3,16
    e308:	38800d16 	blt	r7,r2,e340 <__fixdfsi+0x70>
    e30c:	31befb44 	addi	r6,r6,-1043
    e310:	2084d83a 	srl	r2,r4,r2
    e314:	1986983a 	sll	r3,r3,r6
    e318:	1884b03a 	or	r2,r3,r2
    e31c:	28000726 	beq	r5,zero,e33c <__fixdfsi+0x6c>
    e320:	0085c83a 	sub	r2,zero,r2
    e324:	f800283a 	ret
    e328:	00a00034 	movhi	r2,32768
    e32c:	10bfffc4 	addi	r2,r2,-1
    e330:	2885883a 	add	r2,r5,r2
    e334:	f800283a 	ret
    e338:	0005883a 	mov	r2,zero
    e33c:	f800283a 	ret
    e340:	008104c4 	movi	r2,1043
    e344:	1185c83a 	sub	r2,r2,r6
    e348:	1884d83a 	srl	r2,r3,r2
    e34c:	003ff306 	br	e31c <__alt_data_end+0xff00e31c>

0000e350 <__floatsidf>:
    e350:	defffd04 	addi	sp,sp,-12
    e354:	dfc00215 	stw	ra,8(sp)
    e358:	dc400115 	stw	r17,4(sp)
    e35c:	dc000015 	stw	r16,0(sp)
    e360:	20002b26 	beq	r4,zero,e410 <__floatsidf+0xc0>
    e364:	2023883a 	mov	r17,r4
    e368:	2020d7fa 	srli	r16,r4,31
    e36c:	20002d16 	blt	r4,zero,e424 <__floatsidf+0xd4>
    e370:	8809883a 	mov	r4,r17
    e374:	000e4d40 	call	e4d4 <__clzsi2>
    e378:	01410784 	movi	r5,1054
    e37c:	288bc83a 	sub	r5,r5,r2
    e380:	01010cc4 	movi	r4,1075
    e384:	2149c83a 	sub	r4,r4,r5
    e388:	00c007c4 	movi	r3,31
    e38c:	1900160e 	bge	r3,r4,e3e8 <__floatsidf+0x98>
    e390:	00c104c4 	movi	r3,1043
    e394:	1947c83a 	sub	r3,r3,r5
    e398:	88c6983a 	sll	r3,r17,r3
    e39c:	00800434 	movhi	r2,16
    e3a0:	10bfffc4 	addi	r2,r2,-1
    e3a4:	1886703a 	and	r3,r3,r2
    e3a8:	2941ffcc 	andi	r5,r5,2047
    e3ac:	800d883a 	mov	r6,r16
    e3b0:	0005883a 	mov	r2,zero
    e3b4:	280a953a 	slli	r5,r5,20
    e3b8:	31803fcc 	andi	r6,r6,255
    e3bc:	01000434 	movhi	r4,16
    e3c0:	300c97fa 	slli	r6,r6,31
    e3c4:	213fffc4 	addi	r4,r4,-1
    e3c8:	1906703a 	and	r3,r3,r4
    e3cc:	1946b03a 	or	r3,r3,r5
    e3d0:	1986b03a 	or	r3,r3,r6
    e3d4:	dfc00217 	ldw	ra,8(sp)
    e3d8:	dc400117 	ldw	r17,4(sp)
    e3dc:	dc000017 	ldw	r16,0(sp)
    e3e0:	dec00304 	addi	sp,sp,12
    e3e4:	f800283a 	ret
    e3e8:	00c002c4 	movi	r3,11
    e3ec:	1887c83a 	sub	r3,r3,r2
    e3f0:	88c6d83a 	srl	r3,r17,r3
    e3f4:	8904983a 	sll	r2,r17,r4
    e3f8:	01000434 	movhi	r4,16
    e3fc:	213fffc4 	addi	r4,r4,-1
    e400:	2941ffcc 	andi	r5,r5,2047
    e404:	1906703a 	and	r3,r3,r4
    e408:	800d883a 	mov	r6,r16
    e40c:	003fe906 	br	e3b4 <__alt_data_end+0xff00e3b4>
    e410:	000d883a 	mov	r6,zero
    e414:	000b883a 	mov	r5,zero
    e418:	0007883a 	mov	r3,zero
    e41c:	0005883a 	mov	r2,zero
    e420:	003fe406 	br	e3b4 <__alt_data_end+0xff00e3b4>
    e424:	0123c83a 	sub	r17,zero,r4
    e428:	003fd106 	br	e370 <__alt_data_end+0xff00e370>

0000e42c <__floatunsidf>:
    e42c:	defffe04 	addi	sp,sp,-8
    e430:	dc000015 	stw	r16,0(sp)
    e434:	dfc00115 	stw	ra,4(sp)
    e438:	2021883a 	mov	r16,r4
    e43c:	20002226 	beq	r4,zero,e4c8 <__floatunsidf+0x9c>
    e440:	000e4d40 	call	e4d4 <__clzsi2>
    e444:	01010784 	movi	r4,1054
    e448:	2089c83a 	sub	r4,r4,r2
    e44c:	01810cc4 	movi	r6,1075
    e450:	310dc83a 	sub	r6,r6,r4
    e454:	00c007c4 	movi	r3,31
    e458:	1980120e 	bge	r3,r6,e4a4 <__floatunsidf+0x78>
    e45c:	00c104c4 	movi	r3,1043
    e460:	1907c83a 	sub	r3,r3,r4
    e464:	80ca983a 	sll	r5,r16,r3
    e468:	00800434 	movhi	r2,16
    e46c:	10bfffc4 	addi	r2,r2,-1
    e470:	2101ffcc 	andi	r4,r4,2047
    e474:	0021883a 	mov	r16,zero
    e478:	288a703a 	and	r5,r5,r2
    e47c:	2008953a 	slli	r4,r4,20
    e480:	00c00434 	movhi	r3,16
    e484:	18ffffc4 	addi	r3,r3,-1
    e488:	28c6703a 	and	r3,r5,r3
    e48c:	8005883a 	mov	r2,r16
    e490:	1906b03a 	or	r3,r3,r4
    e494:	dfc00117 	ldw	ra,4(sp)
    e498:	dc000017 	ldw	r16,0(sp)
    e49c:	dec00204 	addi	sp,sp,8
    e4a0:	f800283a 	ret
    e4a4:	00c002c4 	movi	r3,11
    e4a8:	188bc83a 	sub	r5,r3,r2
    e4ac:	814ad83a 	srl	r5,r16,r5
    e4b0:	00c00434 	movhi	r3,16
    e4b4:	18ffffc4 	addi	r3,r3,-1
    e4b8:	81a0983a 	sll	r16,r16,r6
    e4bc:	2101ffcc 	andi	r4,r4,2047
    e4c0:	28ca703a 	and	r5,r5,r3
    e4c4:	003fed06 	br	e47c <__alt_data_end+0xff00e47c>
    e4c8:	0009883a 	mov	r4,zero
    e4cc:	000b883a 	mov	r5,zero
    e4d0:	003fea06 	br	e47c <__alt_data_end+0xff00e47c>

0000e4d4 <__clzsi2>:
    e4d4:	00bfffd4 	movui	r2,65535
    e4d8:	11000536 	bltu	r2,r4,e4f0 <__clzsi2+0x1c>
    e4dc:	00803fc4 	movi	r2,255
    e4e0:	11000f36 	bltu	r2,r4,e520 <__clzsi2+0x4c>
    e4e4:	00800804 	movi	r2,32
    e4e8:	0007883a 	mov	r3,zero
    e4ec:	00000506 	br	e504 <__clzsi2+0x30>
    e4f0:	00804034 	movhi	r2,256
    e4f4:	10bfffc4 	addi	r2,r2,-1
    e4f8:	11000c2e 	bgeu	r2,r4,e52c <__clzsi2+0x58>
    e4fc:	00800204 	movi	r2,8
    e500:	00c00604 	movi	r3,24
    e504:	20c8d83a 	srl	r4,r4,r3
    e508:	00c00074 	movhi	r3,1
    e50c:	18c58504 	addi	r3,r3,5652
    e510:	1909883a 	add	r4,r3,r4
    e514:	20c00003 	ldbu	r3,0(r4)
    e518:	10c5c83a 	sub	r2,r2,r3
    e51c:	f800283a 	ret
    e520:	00800604 	movi	r2,24
    e524:	00c00204 	movi	r3,8
    e528:	003ff606 	br	e504 <__alt_data_end+0xff00e504>
    e52c:	00800404 	movi	r2,16
    e530:	1007883a 	mov	r3,r2
    e534:	003ff306 	br	e504 <__alt_data_end+0xff00e504>

0000e538 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e538:	defffe04 	addi	sp,sp,-8
    e53c:	dfc00115 	stw	ra,4(sp)
    e540:	df000015 	stw	fp,0(sp)
    e544:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e548:	d0a00b17 	ldw	r2,-32724(gp)
    e54c:	10000326 	beq	r2,zero,e55c <alt_get_errno+0x24>
    e550:	d0a00b17 	ldw	r2,-32724(gp)
    e554:	103ee83a 	callr	r2
    e558:	00000106 	br	e560 <alt_get_errno+0x28>
    e55c:	d0a6d804 	addi	r2,gp,-25760
}
    e560:	e037883a 	mov	sp,fp
    e564:	dfc00117 	ldw	ra,4(sp)
    e568:	df000017 	ldw	fp,0(sp)
    e56c:	dec00204 	addi	sp,sp,8
    e570:	f800283a 	ret

0000e574 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e574:	defffb04 	addi	sp,sp,-20
    e578:	dfc00415 	stw	ra,16(sp)
    e57c:	df000315 	stw	fp,12(sp)
    e580:	df000304 	addi	fp,sp,12
    e584:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e588:	e0bfff17 	ldw	r2,-4(fp)
    e58c:	10000616 	blt	r2,zero,e5a8 <close+0x34>
    e590:	e0bfff17 	ldw	r2,-4(fp)
    e594:	10c00324 	muli	r3,r2,12
    e598:	00800074 	movhi	r2,1
    e59c:	10880304 	addi	r2,r2,8204
    e5a0:	1885883a 	add	r2,r3,r2
    e5a4:	00000106 	br	e5ac <close+0x38>
    e5a8:	0005883a 	mov	r2,zero
    e5ac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e5b0:	e0bffd17 	ldw	r2,-12(fp)
    e5b4:	10001926 	beq	r2,zero,e61c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e5b8:	e0bffd17 	ldw	r2,-12(fp)
    e5bc:	10800017 	ldw	r2,0(r2)
    e5c0:	10800417 	ldw	r2,16(r2)
    e5c4:	10000626 	beq	r2,zero,e5e0 <close+0x6c>
    e5c8:	e0bffd17 	ldw	r2,-12(fp)
    e5cc:	10800017 	ldw	r2,0(r2)
    e5d0:	10800417 	ldw	r2,16(r2)
    e5d4:	e13ffd17 	ldw	r4,-12(fp)
    e5d8:	103ee83a 	callr	r2
    e5dc:	00000106 	br	e5e4 <close+0x70>
    e5e0:	0005883a 	mov	r2,zero
    e5e4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e5e8:	e13fff17 	ldw	r4,-4(fp)
    e5ec:	000ec340 	call	ec34 <alt_release_fd>
    if (rval < 0)
    e5f0:	e0bffe17 	ldw	r2,-8(fp)
    e5f4:	1000070e 	bge	r2,zero,e614 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e5f8:	000e5380 	call	e538 <alt_get_errno>
    e5fc:	1007883a 	mov	r3,r2
    e600:	e0bffe17 	ldw	r2,-8(fp)
    e604:	0085c83a 	sub	r2,zero,r2
    e608:	18800015 	stw	r2,0(r3)
      return -1;
    e60c:	00bfffc4 	movi	r2,-1
    e610:	00000706 	br	e630 <close+0xbc>
    }
    return 0;
    e614:	0005883a 	mov	r2,zero
    e618:	00000506 	br	e630 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e61c:	000e5380 	call	e538 <alt_get_errno>
    e620:	1007883a 	mov	r3,r2
    e624:	00801444 	movi	r2,81
    e628:	18800015 	stw	r2,0(r3)
    return -1;
    e62c:	00bfffc4 	movi	r2,-1
  }
}
    e630:	e037883a 	mov	sp,fp
    e634:	dfc00117 	ldw	ra,4(sp)
    e638:	df000017 	ldw	fp,0(sp)
    e63c:	dec00204 	addi	sp,sp,8
    e640:	f800283a 	ret

0000e644 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e644:	defffc04 	addi	sp,sp,-16
    e648:	df000315 	stw	fp,12(sp)
    e64c:	df000304 	addi	fp,sp,12
    e650:	e13ffd15 	stw	r4,-12(fp)
    e654:	e17ffe15 	stw	r5,-8(fp)
    e658:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e65c:	e0bfff17 	ldw	r2,-4(fp)
}
    e660:	e037883a 	mov	sp,fp
    e664:	df000017 	ldw	fp,0(sp)
    e668:	dec00104 	addi	sp,sp,4
    e66c:	f800283a 	ret

0000e670 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e670:	defffe04 	addi	sp,sp,-8
    e674:	dfc00115 	stw	ra,4(sp)
    e678:	df000015 	stw	fp,0(sp)
    e67c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e680:	d0a00b17 	ldw	r2,-32724(gp)
    e684:	10000326 	beq	r2,zero,e694 <alt_get_errno+0x24>
    e688:	d0a00b17 	ldw	r2,-32724(gp)
    e68c:	103ee83a 	callr	r2
    e690:	00000106 	br	e698 <alt_get_errno+0x28>
    e694:	d0a6d804 	addi	r2,gp,-25760
}
    e698:	e037883a 	mov	sp,fp
    e69c:	dfc00117 	ldw	ra,4(sp)
    e6a0:	df000017 	ldw	fp,0(sp)
    e6a4:	dec00204 	addi	sp,sp,8
    e6a8:	f800283a 	ret

0000e6ac <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e6ac:	defffb04 	addi	sp,sp,-20
    e6b0:	dfc00415 	stw	ra,16(sp)
    e6b4:	df000315 	stw	fp,12(sp)
    e6b8:	df000304 	addi	fp,sp,12
    e6bc:	e13ffe15 	stw	r4,-8(fp)
    e6c0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e6c4:	e0bffe17 	ldw	r2,-8(fp)
    e6c8:	10000616 	blt	r2,zero,e6e4 <fstat+0x38>
    e6cc:	e0bffe17 	ldw	r2,-8(fp)
    e6d0:	10c00324 	muli	r3,r2,12
    e6d4:	00800074 	movhi	r2,1
    e6d8:	10880304 	addi	r2,r2,8204
    e6dc:	1885883a 	add	r2,r3,r2
    e6e0:	00000106 	br	e6e8 <fstat+0x3c>
    e6e4:	0005883a 	mov	r2,zero
    e6e8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e6ec:	e0bffd17 	ldw	r2,-12(fp)
    e6f0:	10001026 	beq	r2,zero,e734 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e6f4:	e0bffd17 	ldw	r2,-12(fp)
    e6f8:	10800017 	ldw	r2,0(r2)
    e6fc:	10800817 	ldw	r2,32(r2)
    e700:	10000726 	beq	r2,zero,e720 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e704:	e0bffd17 	ldw	r2,-12(fp)
    e708:	10800017 	ldw	r2,0(r2)
    e70c:	10800817 	ldw	r2,32(r2)
    e710:	e17fff17 	ldw	r5,-4(fp)
    e714:	e13ffd17 	ldw	r4,-12(fp)
    e718:	103ee83a 	callr	r2
    e71c:	00000a06 	br	e748 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e720:	e0bfff17 	ldw	r2,-4(fp)
    e724:	00c80004 	movi	r3,8192
    e728:	10c00115 	stw	r3,4(r2)
      return 0;
    e72c:	0005883a 	mov	r2,zero
    e730:	00000506 	br	e748 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e734:	000e6700 	call	e670 <alt_get_errno>
    e738:	1007883a 	mov	r3,r2
    e73c:	00801444 	movi	r2,81
    e740:	18800015 	stw	r2,0(r3)
    return -1;
    e744:	00bfffc4 	movi	r2,-1
  }
}
    e748:	e037883a 	mov	sp,fp
    e74c:	dfc00117 	ldw	ra,4(sp)
    e750:	df000017 	ldw	fp,0(sp)
    e754:	dec00204 	addi	sp,sp,8
    e758:	f800283a 	ret

0000e75c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e75c:	defffe04 	addi	sp,sp,-8
    e760:	dfc00115 	stw	ra,4(sp)
    e764:	df000015 	stw	fp,0(sp)
    e768:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e76c:	d0a00b17 	ldw	r2,-32724(gp)
    e770:	10000326 	beq	r2,zero,e780 <alt_get_errno+0x24>
    e774:	d0a00b17 	ldw	r2,-32724(gp)
    e778:	103ee83a 	callr	r2
    e77c:	00000106 	br	e784 <alt_get_errno+0x28>
    e780:	d0a6d804 	addi	r2,gp,-25760
}
    e784:	e037883a 	mov	sp,fp
    e788:	dfc00117 	ldw	ra,4(sp)
    e78c:	df000017 	ldw	fp,0(sp)
    e790:	dec00204 	addi	sp,sp,8
    e794:	f800283a 	ret

0000e798 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e798:	deffed04 	addi	sp,sp,-76
    e79c:	dfc01215 	stw	ra,72(sp)
    e7a0:	df001115 	stw	fp,68(sp)
    e7a4:	df001104 	addi	fp,sp,68
    e7a8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e7ac:	e0bfff17 	ldw	r2,-4(fp)
    e7b0:	10000616 	blt	r2,zero,e7cc <isatty+0x34>
    e7b4:	e0bfff17 	ldw	r2,-4(fp)
    e7b8:	10c00324 	muli	r3,r2,12
    e7bc:	00800074 	movhi	r2,1
    e7c0:	10880304 	addi	r2,r2,8204
    e7c4:	1885883a 	add	r2,r3,r2
    e7c8:	00000106 	br	e7d0 <isatty+0x38>
    e7cc:	0005883a 	mov	r2,zero
    e7d0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e7d4:	e0bfef17 	ldw	r2,-68(fp)
    e7d8:	10000e26 	beq	r2,zero,e814 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e7dc:	e0bfef17 	ldw	r2,-68(fp)
    e7e0:	10800017 	ldw	r2,0(r2)
    e7e4:	10800817 	ldw	r2,32(r2)
    e7e8:	1000021e 	bne	r2,zero,e7f4 <isatty+0x5c>
    {
      return 1;
    e7ec:	00800044 	movi	r2,1
    e7f0:	00000d06 	br	e828 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e7f4:	e0bff004 	addi	r2,fp,-64
    e7f8:	100b883a 	mov	r5,r2
    e7fc:	e13fff17 	ldw	r4,-4(fp)
    e800:	000e6ac0 	call	e6ac <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e804:	e0bff117 	ldw	r2,-60(fp)
    e808:	10880020 	cmpeqi	r2,r2,8192
    e80c:	10803fcc 	andi	r2,r2,255
    e810:	00000506 	br	e828 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e814:	000e75c0 	call	e75c <alt_get_errno>
    e818:	1007883a 	mov	r3,r2
    e81c:	00801444 	movi	r2,81
    e820:	18800015 	stw	r2,0(r3)
    return 0;
    e824:	0005883a 	mov	r2,zero
  }
}
    e828:	e037883a 	mov	sp,fp
    e82c:	dfc00117 	ldw	ra,4(sp)
    e830:	df000017 	ldw	fp,0(sp)
    e834:	dec00204 	addi	sp,sp,8
    e838:	f800283a 	ret

0000e83c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    e83c:	defffc04 	addi	sp,sp,-16
    e840:	df000315 	stw	fp,12(sp)
    e844:	df000304 	addi	fp,sp,12
    e848:	e13ffd15 	stw	r4,-12(fp)
    e84c:	e17ffe15 	stw	r5,-8(fp)
    e850:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    e854:	e0fffe17 	ldw	r3,-8(fp)
    e858:	e0bffd17 	ldw	r2,-12(fp)
    e85c:	18800c26 	beq	r3,r2,e890 <alt_load_section+0x54>
  {
    while( to != end )
    e860:	00000806 	br	e884 <alt_load_section+0x48>
    {
      *to++ = *from++;
    e864:	e0bffe17 	ldw	r2,-8(fp)
    e868:	10c00104 	addi	r3,r2,4
    e86c:	e0fffe15 	stw	r3,-8(fp)
    e870:	e0fffd17 	ldw	r3,-12(fp)
    e874:	19000104 	addi	r4,r3,4
    e878:	e13ffd15 	stw	r4,-12(fp)
    e87c:	18c00017 	ldw	r3,0(r3)
    e880:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    e884:	e0fffe17 	ldw	r3,-8(fp)
    e888:	e0bfff17 	ldw	r2,-4(fp)
    e88c:	18bff51e 	bne	r3,r2,e864 <__alt_data_end+0xff00e864>
    {
      *to++ = *from++;
    }
  }
}
    e890:	0001883a 	nop
    e894:	e037883a 	mov	sp,fp
    e898:	df000017 	ldw	fp,0(sp)
    e89c:	dec00104 	addi	sp,sp,4
    e8a0:	f800283a 	ret

0000e8a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e8a4:	defffe04 	addi	sp,sp,-8
    e8a8:	dfc00115 	stw	ra,4(sp)
    e8ac:	df000015 	stw	fp,0(sp)
    e8b0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    e8b4:	01800074 	movhi	r6,1
    e8b8:	318c8b04 	addi	r6,r6,12844
    e8bc:	01400074 	movhi	r5,1
    e8c0:	2945d004 	addi	r5,r5,5952
    e8c4:	01000074 	movhi	r4,1
    e8c8:	210c8b04 	addi	r4,r4,12844
    e8cc:	000e83c0 	call	e83c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    e8d0:	01800034 	movhi	r6,0
    e8d4:	31809104 	addi	r6,r6,580
    e8d8:	01400034 	movhi	r5,0
    e8dc:	29400804 	addi	r5,r5,32
    e8e0:	01000034 	movhi	r4,0
    e8e4:	21000804 	addi	r4,r4,32
    e8e8:	000e83c0 	call	e83c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    e8ec:	01800074 	movhi	r6,1
    e8f0:	3185d004 	addi	r6,r6,5952
    e8f4:	01400074 	movhi	r5,1
    e8f8:	2943e804 	addi	r5,r5,4000
    e8fc:	01000074 	movhi	r4,1
    e900:	2103e804 	addi	r4,r4,4000
    e904:	000e83c0 	call	e83c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e908:	000fe8c0 	call	fe8c <alt_dcache_flush_all>
  alt_icache_flush_all();
    e90c:	00100740 	call	10074 <alt_icache_flush_all>
}
    e910:	0001883a 	nop
    e914:	e037883a 	mov	sp,fp
    e918:	dfc00117 	ldw	ra,4(sp)
    e91c:	df000017 	ldw	fp,0(sp)
    e920:	dec00204 	addi	sp,sp,8
    e924:	f800283a 	ret

0000e928 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e928:	defffe04 	addi	sp,sp,-8
    e92c:	dfc00115 	stw	ra,4(sp)
    e930:	df000015 	stw	fp,0(sp)
    e934:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e938:	d0a00b17 	ldw	r2,-32724(gp)
    e93c:	10000326 	beq	r2,zero,e94c <alt_get_errno+0x24>
    e940:	d0a00b17 	ldw	r2,-32724(gp)
    e944:	103ee83a 	callr	r2
    e948:	00000106 	br	e950 <alt_get_errno+0x28>
    e94c:	d0a6d804 	addi	r2,gp,-25760
}
    e950:	e037883a 	mov	sp,fp
    e954:	dfc00117 	ldw	ra,4(sp)
    e958:	df000017 	ldw	fp,0(sp)
    e95c:	dec00204 	addi	sp,sp,8
    e960:	f800283a 	ret

0000e964 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e964:	defff904 	addi	sp,sp,-28
    e968:	dfc00615 	stw	ra,24(sp)
    e96c:	df000515 	stw	fp,20(sp)
    e970:	df000504 	addi	fp,sp,20
    e974:	e13ffd15 	stw	r4,-12(fp)
    e978:	e17ffe15 	stw	r5,-8(fp)
    e97c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e980:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e984:	e0bffd17 	ldw	r2,-12(fp)
    e988:	10000616 	blt	r2,zero,e9a4 <lseek+0x40>
    e98c:	e0bffd17 	ldw	r2,-12(fp)
    e990:	10c00324 	muli	r3,r2,12
    e994:	00800074 	movhi	r2,1
    e998:	10880304 	addi	r2,r2,8204
    e99c:	1885883a 	add	r2,r3,r2
    e9a0:	00000106 	br	e9a8 <lseek+0x44>
    e9a4:	0005883a 	mov	r2,zero
    e9a8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    e9ac:	e0bffc17 	ldw	r2,-16(fp)
    e9b0:	10001026 	beq	r2,zero,e9f4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e9b4:	e0bffc17 	ldw	r2,-16(fp)
    e9b8:	10800017 	ldw	r2,0(r2)
    e9bc:	10800717 	ldw	r2,28(r2)
    e9c0:	10000926 	beq	r2,zero,e9e8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e9c4:	e0bffc17 	ldw	r2,-16(fp)
    e9c8:	10800017 	ldw	r2,0(r2)
    e9cc:	10800717 	ldw	r2,28(r2)
    e9d0:	e1bfff17 	ldw	r6,-4(fp)
    e9d4:	e17ffe17 	ldw	r5,-8(fp)
    e9d8:	e13ffc17 	ldw	r4,-16(fp)
    e9dc:	103ee83a 	callr	r2
    e9e0:	e0bffb15 	stw	r2,-20(fp)
    e9e4:	00000506 	br	e9fc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e9e8:	00bfde84 	movi	r2,-134
    e9ec:	e0bffb15 	stw	r2,-20(fp)
    e9f0:	00000206 	br	e9fc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    e9f4:	00bfebc4 	movi	r2,-81
    e9f8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    e9fc:	e0bffb17 	ldw	r2,-20(fp)
    ea00:	1000070e 	bge	r2,zero,ea20 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    ea04:	000e9280 	call	e928 <alt_get_errno>
    ea08:	1007883a 	mov	r3,r2
    ea0c:	e0bffb17 	ldw	r2,-20(fp)
    ea10:	0085c83a 	sub	r2,zero,r2
    ea14:	18800015 	stw	r2,0(r3)
    rc = -1;
    ea18:	00bfffc4 	movi	r2,-1
    ea1c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    ea20:	e0bffb17 	ldw	r2,-20(fp)
}
    ea24:	e037883a 	mov	sp,fp
    ea28:	dfc00117 	ldw	ra,4(sp)
    ea2c:	df000017 	ldw	fp,0(sp)
    ea30:	dec00204 	addi	sp,sp,8
    ea34:	f800283a 	ret

0000ea38 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ea38:	defffd04 	addi	sp,sp,-12
    ea3c:	dfc00215 	stw	ra,8(sp)
    ea40:	df000115 	stw	fp,4(sp)
    ea44:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ea48:	0009883a 	mov	r4,zero
    ea4c:	000eee00 	call	eee0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    ea50:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ea54:	000ef180 	call	ef18 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ea58:	01800074 	movhi	r6,1
    ea5c:	3185c804 	addi	r6,r6,5920
    ea60:	01400074 	movhi	r5,1
    ea64:	2945c804 	addi	r5,r5,5920
    ea68:	01000074 	movhi	r4,1
    ea6c:	2105c804 	addi	r4,r4,5920
    ea70:	001040c0 	call	1040c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ea74:	000ffb40 	call	ffb4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ea78:	01000074 	movhi	r4,1
    ea7c:	21000504 	addi	r4,r4,20
    ea80:	0010c0c0 	call	10c0c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ea84:	d0a6dc17 	ldw	r2,-25744(gp)
    ea88:	d0e6dd17 	ldw	r3,-25740(gp)
    ea8c:	d126de17 	ldw	r4,-25736(gp)
    ea90:	200d883a 	mov	r6,r4
    ea94:	180b883a 	mov	r5,r3
    ea98:	1009883a 	mov	r4,r2
    ea9c:	0000f500 	call	f50 <main>
    eaa0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    eaa4:	01000044 	movi	r4,1
    eaa8:	000e5740 	call	e574 <close>
  exit (result);
    eaac:	e13fff17 	ldw	r4,-4(fp)
    eab0:	0010c200 	call	10c20 <exit>

0000eab4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    eab4:	defffe04 	addi	sp,sp,-8
    eab8:	df000115 	stw	fp,4(sp)
    eabc:	df000104 	addi	fp,sp,4
    eac0:	e13fff15 	stw	r4,-4(fp)
}
    eac4:	0001883a 	nop
    eac8:	e037883a 	mov	sp,fp
    eacc:	df000017 	ldw	fp,0(sp)
    ead0:	dec00104 	addi	sp,sp,4
    ead4:	f800283a 	ret

0000ead8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    ead8:	defffe04 	addi	sp,sp,-8
    eadc:	df000115 	stw	fp,4(sp)
    eae0:	df000104 	addi	fp,sp,4
    eae4:	e13fff15 	stw	r4,-4(fp)
}
    eae8:	0001883a 	nop
    eaec:	e037883a 	mov	sp,fp
    eaf0:	df000017 	ldw	fp,0(sp)
    eaf4:	dec00104 	addi	sp,sp,4
    eaf8:	f800283a 	ret

0000eafc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eafc:	defffe04 	addi	sp,sp,-8
    eb00:	dfc00115 	stw	ra,4(sp)
    eb04:	df000015 	stw	fp,0(sp)
    eb08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eb0c:	d0a00b17 	ldw	r2,-32724(gp)
    eb10:	10000326 	beq	r2,zero,eb20 <alt_get_errno+0x24>
    eb14:	d0a00b17 	ldw	r2,-32724(gp)
    eb18:	103ee83a 	callr	r2
    eb1c:	00000106 	br	eb24 <alt_get_errno+0x28>
    eb20:	d0a6d804 	addi	r2,gp,-25760
}
    eb24:	e037883a 	mov	sp,fp
    eb28:	dfc00117 	ldw	ra,4(sp)
    eb2c:	df000017 	ldw	fp,0(sp)
    eb30:	dec00204 	addi	sp,sp,8
    eb34:	f800283a 	ret

0000eb38 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    eb38:	defff904 	addi	sp,sp,-28
    eb3c:	dfc00615 	stw	ra,24(sp)
    eb40:	df000515 	stw	fp,20(sp)
    eb44:	df000504 	addi	fp,sp,20
    eb48:	e13ffd15 	stw	r4,-12(fp)
    eb4c:	e17ffe15 	stw	r5,-8(fp)
    eb50:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    eb54:	e0bffd17 	ldw	r2,-12(fp)
    eb58:	10000616 	blt	r2,zero,eb74 <read+0x3c>
    eb5c:	e0bffd17 	ldw	r2,-12(fp)
    eb60:	10c00324 	muli	r3,r2,12
    eb64:	00800074 	movhi	r2,1
    eb68:	10880304 	addi	r2,r2,8204
    eb6c:	1885883a 	add	r2,r3,r2
    eb70:	00000106 	br	eb78 <read+0x40>
    eb74:	0005883a 	mov	r2,zero
    eb78:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    eb7c:	e0bffb17 	ldw	r2,-20(fp)
    eb80:	10002226 	beq	r2,zero,ec0c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    eb84:	e0bffb17 	ldw	r2,-20(fp)
    eb88:	10800217 	ldw	r2,8(r2)
    eb8c:	108000cc 	andi	r2,r2,3
    eb90:	10800060 	cmpeqi	r2,r2,1
    eb94:	1000181e 	bne	r2,zero,ebf8 <read+0xc0>
        (fd->dev->read))
    eb98:	e0bffb17 	ldw	r2,-20(fp)
    eb9c:	10800017 	ldw	r2,0(r2)
    eba0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    eba4:	10001426 	beq	r2,zero,ebf8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    eba8:	e0bffb17 	ldw	r2,-20(fp)
    ebac:	10800017 	ldw	r2,0(r2)
    ebb0:	10800517 	ldw	r2,20(r2)
    ebb4:	e0ffff17 	ldw	r3,-4(fp)
    ebb8:	180d883a 	mov	r6,r3
    ebbc:	e17ffe17 	ldw	r5,-8(fp)
    ebc0:	e13ffb17 	ldw	r4,-20(fp)
    ebc4:	103ee83a 	callr	r2
    ebc8:	e0bffc15 	stw	r2,-16(fp)
    ebcc:	e0bffc17 	ldw	r2,-16(fp)
    ebd0:	1000070e 	bge	r2,zero,ebf0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    ebd4:	000eafc0 	call	eafc <alt_get_errno>
    ebd8:	1007883a 	mov	r3,r2
    ebdc:	e0bffc17 	ldw	r2,-16(fp)
    ebe0:	0085c83a 	sub	r2,zero,r2
    ebe4:	18800015 	stw	r2,0(r3)
          return -1;
    ebe8:	00bfffc4 	movi	r2,-1
    ebec:	00000c06 	br	ec20 <read+0xe8>
        }
        return rval;
    ebf0:	e0bffc17 	ldw	r2,-16(fp)
    ebf4:	00000a06 	br	ec20 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ebf8:	000eafc0 	call	eafc <alt_get_errno>
    ebfc:	1007883a 	mov	r3,r2
    ec00:	00800344 	movi	r2,13
    ec04:	18800015 	stw	r2,0(r3)
    ec08:	00000406 	br	ec1c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ec0c:	000eafc0 	call	eafc <alt_get_errno>
    ec10:	1007883a 	mov	r3,r2
    ec14:	00801444 	movi	r2,81
    ec18:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ec1c:	00bfffc4 	movi	r2,-1
}
    ec20:	e037883a 	mov	sp,fp
    ec24:	dfc00117 	ldw	ra,4(sp)
    ec28:	df000017 	ldw	fp,0(sp)
    ec2c:	dec00204 	addi	sp,sp,8
    ec30:	f800283a 	ret

0000ec34 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ec34:	defffe04 	addi	sp,sp,-8
    ec38:	df000115 	stw	fp,4(sp)
    ec3c:	df000104 	addi	fp,sp,4
    ec40:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ec44:	e0bfff17 	ldw	r2,-4(fp)
    ec48:	108000d0 	cmplti	r2,r2,3
    ec4c:	10000d1e 	bne	r2,zero,ec84 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    ec50:	00800074 	movhi	r2,1
    ec54:	10880304 	addi	r2,r2,8204
    ec58:	e0ffff17 	ldw	r3,-4(fp)
    ec5c:	18c00324 	muli	r3,r3,12
    ec60:	10c5883a 	add	r2,r2,r3
    ec64:	10800204 	addi	r2,r2,8
    ec68:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ec6c:	00800074 	movhi	r2,1
    ec70:	10880304 	addi	r2,r2,8204
    ec74:	e0ffff17 	ldw	r3,-4(fp)
    ec78:	18c00324 	muli	r3,r3,12
    ec7c:	10c5883a 	add	r2,r2,r3
    ec80:	10000015 	stw	zero,0(r2)
  }
}
    ec84:	0001883a 	nop
    ec88:	e037883a 	mov	sp,fp
    ec8c:	df000017 	ldw	fp,0(sp)
    ec90:	dec00104 	addi	sp,sp,4
    ec94:	f800283a 	ret

0000ec98 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ec98:	defff904 	addi	sp,sp,-28
    ec9c:	df000615 	stw	fp,24(sp)
    eca0:	df000604 	addi	fp,sp,24
    eca4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eca8:	0005303a 	rdctl	r2,status
    ecac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ecb0:	e0fffe17 	ldw	r3,-8(fp)
    ecb4:	00bfff84 	movi	r2,-2
    ecb8:	1884703a 	and	r2,r3,r2
    ecbc:	1001703a 	wrctl	status,r2
  
  return context;
    ecc0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    ecc4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ecc8:	d0a00c17 	ldw	r2,-32720(gp)
    eccc:	10c000c4 	addi	r3,r2,3
    ecd0:	00bfff04 	movi	r2,-4
    ecd4:	1884703a 	and	r2,r3,r2
    ecd8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ecdc:	d0e00c17 	ldw	r3,-32720(gp)
    ece0:	e0bfff17 	ldw	r2,-4(fp)
    ece4:	1887883a 	add	r3,r3,r2
    ece8:	00804034 	movhi	r2,256
    ecec:	10800004 	addi	r2,r2,0
    ecf0:	10c0062e 	bgeu	r2,r3,ed0c <sbrk+0x74>
    ecf4:	e0bffb17 	ldw	r2,-20(fp)
    ecf8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ecfc:	e0bffa17 	ldw	r2,-24(fp)
    ed00:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ed04:	00bfffc4 	movi	r2,-1
    ed08:	00000b06 	br	ed38 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    ed0c:	d0a00c17 	ldw	r2,-32720(gp)
    ed10:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    ed14:	d0e00c17 	ldw	r3,-32720(gp)
    ed18:	e0bfff17 	ldw	r2,-4(fp)
    ed1c:	1885883a 	add	r2,r3,r2
    ed20:	d0a00c15 	stw	r2,-32720(gp)
    ed24:	e0bffb17 	ldw	r2,-20(fp)
    ed28:	e0bffc15 	stw	r2,-16(fp)
    ed2c:	e0bffc17 	ldw	r2,-16(fp)
    ed30:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    ed34:	e0bffd17 	ldw	r2,-12(fp)
} 
    ed38:	e037883a 	mov	sp,fp
    ed3c:	df000017 	ldw	fp,0(sp)
    ed40:	dec00104 	addi	sp,sp,4
    ed44:	f800283a 	ret

0000ed48 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    ed48:	defffd04 	addi	sp,sp,-12
    ed4c:	dfc00215 	stw	ra,8(sp)
    ed50:	df000115 	stw	fp,4(sp)
    ed54:	df000104 	addi	fp,sp,4
    ed58:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    ed5c:	e13fff17 	ldw	r4,-4(fp)
    ed60:	000fd340 	call	fd34 <alt_busy_sleep>
}
    ed64:	e037883a 	mov	sp,fp
    ed68:	dfc00117 	ldw	ra,4(sp)
    ed6c:	df000017 	ldw	fp,0(sp)
    ed70:	dec00204 	addi	sp,sp,8
    ed74:	f800283a 	ret

0000ed78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ed78:	defffe04 	addi	sp,sp,-8
    ed7c:	dfc00115 	stw	ra,4(sp)
    ed80:	df000015 	stw	fp,0(sp)
    ed84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ed88:	d0a00b17 	ldw	r2,-32724(gp)
    ed8c:	10000326 	beq	r2,zero,ed9c <alt_get_errno+0x24>
    ed90:	d0a00b17 	ldw	r2,-32724(gp)
    ed94:	103ee83a 	callr	r2
    ed98:	00000106 	br	eda0 <alt_get_errno+0x28>
    ed9c:	d0a6d804 	addi	r2,gp,-25760
}
    eda0:	e037883a 	mov	sp,fp
    eda4:	dfc00117 	ldw	ra,4(sp)
    eda8:	df000017 	ldw	fp,0(sp)
    edac:	dec00204 	addi	sp,sp,8
    edb0:	f800283a 	ret

0000edb4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    edb4:	defff904 	addi	sp,sp,-28
    edb8:	dfc00615 	stw	ra,24(sp)
    edbc:	df000515 	stw	fp,20(sp)
    edc0:	df000504 	addi	fp,sp,20
    edc4:	e13ffd15 	stw	r4,-12(fp)
    edc8:	e17ffe15 	stw	r5,-8(fp)
    edcc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    edd0:	e0bffd17 	ldw	r2,-12(fp)
    edd4:	10000616 	blt	r2,zero,edf0 <write+0x3c>
    edd8:	e0bffd17 	ldw	r2,-12(fp)
    eddc:	10c00324 	muli	r3,r2,12
    ede0:	00800074 	movhi	r2,1
    ede4:	10880304 	addi	r2,r2,8204
    ede8:	1885883a 	add	r2,r3,r2
    edec:	00000106 	br	edf4 <write+0x40>
    edf0:	0005883a 	mov	r2,zero
    edf4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    edf8:	e0bffb17 	ldw	r2,-20(fp)
    edfc:	10002126 	beq	r2,zero,ee84 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ee00:	e0bffb17 	ldw	r2,-20(fp)
    ee04:	10800217 	ldw	r2,8(r2)
    ee08:	108000cc 	andi	r2,r2,3
    ee0c:	10001826 	beq	r2,zero,ee70 <write+0xbc>
    ee10:	e0bffb17 	ldw	r2,-20(fp)
    ee14:	10800017 	ldw	r2,0(r2)
    ee18:	10800617 	ldw	r2,24(r2)
    ee1c:	10001426 	beq	r2,zero,ee70 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ee20:	e0bffb17 	ldw	r2,-20(fp)
    ee24:	10800017 	ldw	r2,0(r2)
    ee28:	10800617 	ldw	r2,24(r2)
    ee2c:	e0ffff17 	ldw	r3,-4(fp)
    ee30:	180d883a 	mov	r6,r3
    ee34:	e17ffe17 	ldw	r5,-8(fp)
    ee38:	e13ffb17 	ldw	r4,-20(fp)
    ee3c:	103ee83a 	callr	r2
    ee40:	e0bffc15 	stw	r2,-16(fp)
    ee44:	e0bffc17 	ldw	r2,-16(fp)
    ee48:	1000070e 	bge	r2,zero,ee68 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    ee4c:	000ed780 	call	ed78 <alt_get_errno>
    ee50:	1007883a 	mov	r3,r2
    ee54:	e0bffc17 	ldw	r2,-16(fp)
    ee58:	0085c83a 	sub	r2,zero,r2
    ee5c:	18800015 	stw	r2,0(r3)
        return -1;
    ee60:	00bfffc4 	movi	r2,-1
    ee64:	00000c06 	br	ee98 <write+0xe4>
      }
      return rval;
    ee68:	e0bffc17 	ldw	r2,-16(fp)
    ee6c:	00000a06 	br	ee98 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    ee70:	000ed780 	call	ed78 <alt_get_errno>
    ee74:	1007883a 	mov	r3,r2
    ee78:	00800344 	movi	r2,13
    ee7c:	18800015 	stw	r2,0(r3)
    ee80:	00000406 	br	ee94 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    ee84:	000ed780 	call	ed78 <alt_get_errno>
    ee88:	1007883a 	mov	r3,r2
    ee8c:	00801444 	movi	r2,81
    ee90:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ee94:	00bfffc4 	movi	r2,-1
}
    ee98:	e037883a 	mov	sp,fp
    ee9c:	dfc00117 	ldw	ra,4(sp)
    eea0:	df000017 	ldw	fp,0(sp)
    eea4:	dec00204 	addi	sp,sp,8
    eea8:	f800283a 	ret

0000eeac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    eeac:	defffd04 	addi	sp,sp,-12
    eeb0:	dfc00215 	stw	ra,8(sp)
    eeb4:	df000115 	stw	fp,4(sp)
    eeb8:	df000104 	addi	fp,sp,4
    eebc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    eec0:	d1600804 	addi	r5,gp,-32736
    eec4:	e13fff17 	ldw	r4,-4(fp)
    eec8:	000ff100 	call	ff10 <alt_dev_llist_insert>
}
    eecc:	e037883a 	mov	sp,fp
    eed0:	dfc00117 	ldw	ra,4(sp)
    eed4:	df000017 	ldw	fp,0(sp)
    eed8:	dec00204 	addi	sp,sp,8
    eedc:	f800283a 	ret

0000eee0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    eee0:	defffd04 	addi	sp,sp,-12
    eee4:	dfc00215 	stw	ra,8(sp)
    eee8:	df000115 	stw	fp,4(sp)
    eeec:	df000104 	addi	fp,sp,4
    eef0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    eef4:	00108800 	call	10880 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    eef8:	00800044 	movi	r2,1
    eefc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ef00:	0001883a 	nop
    ef04:	e037883a 	mov	sp,fp
    ef08:	dfc00117 	ldw	ra,4(sp)
    ef0c:	df000017 	ldw	fp,0(sp)
    ef10:	dec00204 	addi	sp,sp,8
    ef14:	f800283a 	ret

0000ef18 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ef18:	defffe04 	addi	sp,sp,-8
    ef1c:	dfc00115 	stw	ra,4(sp)
    ef20:	df000015 	stw	fp,0(sp)
    ef24:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ef28:	00804034 	movhi	r2,256
    ef2c:	10840004 	addi	r2,r2,4096
    ef30:	d0a6df15 	stw	r2,-25732(gp)
    ef34:	0080bef4 	movhi	r2,763
    ef38:	10bc2004 	addi	r2,r2,-3968
    ef3c:	d0a6e015 	stw	r2,-25728(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ef40:	01c0fa04 	movi	r7,1000
    ef44:	01800104 	movi	r6,4
    ef48:	000b883a 	mov	r5,zero
    ef4c:	01004034 	movhi	r4,256
    ef50:	21040804 	addi	r4,r4,4128
    ef54:	000fa740 	call	fa74 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ef58:	000d883a 	mov	r6,zero
    ef5c:	000b883a 	mov	r5,zero
    ef60:	01000074 	movhi	r4,1
    ef64:	21086d04 	addi	r4,r4,8628
    ef68:	000f0f80 	call	f0f8 <altera_avalon_jtag_uart_init>
    ef6c:	01000074 	movhi	r4,1
    ef70:	21086304 	addi	r4,r4,8588
    ef74:	000eeac0 	call	eeac <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ef78:	0001883a 	nop
}
    ef7c:	0001883a 	nop
    ef80:	e037883a 	mov	sp,fp
    ef84:	dfc00117 	ldw	ra,4(sp)
    ef88:	df000017 	ldw	fp,0(sp)
    ef8c:	dec00204 	addi	sp,sp,8
    ef90:	f800283a 	ret

0000ef94 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    ef94:	defffa04 	addi	sp,sp,-24
    ef98:	dfc00515 	stw	ra,20(sp)
    ef9c:	df000415 	stw	fp,16(sp)
    efa0:	df000404 	addi	fp,sp,16
    efa4:	e13ffd15 	stw	r4,-12(fp)
    efa8:	e17ffe15 	stw	r5,-8(fp)
    efac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    efb0:	e0bffd17 	ldw	r2,-12(fp)
    efb4:	10800017 	ldw	r2,0(r2)
    efb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    efbc:	e0bffc17 	ldw	r2,-16(fp)
    efc0:	10c00a04 	addi	r3,r2,40
    efc4:	e0bffd17 	ldw	r2,-12(fp)
    efc8:	10800217 	ldw	r2,8(r2)
    efcc:	100f883a 	mov	r7,r2
    efd0:	e1bfff17 	ldw	r6,-4(fp)
    efd4:	e17ffe17 	ldw	r5,-8(fp)
    efd8:	1809883a 	mov	r4,r3
    efdc:	000f5bc0 	call	f5bc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    efe0:	e037883a 	mov	sp,fp
    efe4:	dfc00117 	ldw	ra,4(sp)
    efe8:	df000017 	ldw	fp,0(sp)
    efec:	dec00204 	addi	sp,sp,8
    eff0:	f800283a 	ret

0000eff4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    eff4:	defffa04 	addi	sp,sp,-24
    eff8:	dfc00515 	stw	ra,20(sp)
    effc:	df000415 	stw	fp,16(sp)
    f000:	df000404 	addi	fp,sp,16
    f004:	e13ffd15 	stw	r4,-12(fp)
    f008:	e17ffe15 	stw	r5,-8(fp)
    f00c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f010:	e0bffd17 	ldw	r2,-12(fp)
    f014:	10800017 	ldw	r2,0(r2)
    f018:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f01c:	e0bffc17 	ldw	r2,-16(fp)
    f020:	10c00a04 	addi	r3,r2,40
    f024:	e0bffd17 	ldw	r2,-12(fp)
    f028:	10800217 	ldw	r2,8(r2)
    f02c:	100f883a 	mov	r7,r2
    f030:	e1bfff17 	ldw	r6,-4(fp)
    f034:	e17ffe17 	ldw	r5,-8(fp)
    f038:	1809883a 	mov	r4,r3
    f03c:	000f7d80 	call	f7d8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f040:	e037883a 	mov	sp,fp
    f044:	dfc00117 	ldw	ra,4(sp)
    f048:	df000017 	ldw	fp,0(sp)
    f04c:	dec00204 	addi	sp,sp,8
    f050:	f800283a 	ret

0000f054 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f054:	defffc04 	addi	sp,sp,-16
    f058:	dfc00315 	stw	ra,12(sp)
    f05c:	df000215 	stw	fp,8(sp)
    f060:	df000204 	addi	fp,sp,8
    f064:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f068:	e0bfff17 	ldw	r2,-4(fp)
    f06c:	10800017 	ldw	r2,0(r2)
    f070:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f074:	e0bffe17 	ldw	r2,-8(fp)
    f078:	10c00a04 	addi	r3,r2,40
    f07c:	e0bfff17 	ldw	r2,-4(fp)
    f080:	10800217 	ldw	r2,8(r2)
    f084:	100b883a 	mov	r5,r2
    f088:	1809883a 	mov	r4,r3
    f08c:	000f4640 	call	f464 <altera_avalon_jtag_uart_close>
}
    f090:	e037883a 	mov	sp,fp
    f094:	dfc00117 	ldw	ra,4(sp)
    f098:	df000017 	ldw	fp,0(sp)
    f09c:	dec00204 	addi	sp,sp,8
    f0a0:	f800283a 	ret

0000f0a4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f0a4:	defffa04 	addi	sp,sp,-24
    f0a8:	dfc00515 	stw	ra,20(sp)
    f0ac:	df000415 	stw	fp,16(sp)
    f0b0:	df000404 	addi	fp,sp,16
    f0b4:	e13ffd15 	stw	r4,-12(fp)
    f0b8:	e17ffe15 	stw	r5,-8(fp)
    f0bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f0c0:	e0bffd17 	ldw	r2,-12(fp)
    f0c4:	10800017 	ldw	r2,0(r2)
    f0c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f0cc:	e0bffc17 	ldw	r2,-16(fp)
    f0d0:	10800a04 	addi	r2,r2,40
    f0d4:	e1bfff17 	ldw	r6,-4(fp)
    f0d8:	e17ffe17 	ldw	r5,-8(fp)
    f0dc:	1009883a 	mov	r4,r2
    f0e0:	000f4cc0 	call	f4cc <altera_avalon_jtag_uart_ioctl>
}
    f0e4:	e037883a 	mov	sp,fp
    f0e8:	dfc00117 	ldw	ra,4(sp)
    f0ec:	df000017 	ldw	fp,0(sp)
    f0f0:	dec00204 	addi	sp,sp,8
    f0f4:	f800283a 	ret

0000f0f8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f0f8:	defffa04 	addi	sp,sp,-24
    f0fc:	dfc00515 	stw	ra,20(sp)
    f100:	df000415 	stw	fp,16(sp)
    f104:	df000404 	addi	fp,sp,16
    f108:	e13ffd15 	stw	r4,-12(fp)
    f10c:	e17ffe15 	stw	r5,-8(fp)
    f110:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f114:	e0bffd17 	ldw	r2,-12(fp)
    f118:	00c00044 	movi	r3,1
    f11c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f120:	e0bffd17 	ldw	r2,-12(fp)
    f124:	10800017 	ldw	r2,0(r2)
    f128:	10800104 	addi	r2,r2,4
    f12c:	1007883a 	mov	r3,r2
    f130:	e0bffd17 	ldw	r2,-12(fp)
    f134:	10800817 	ldw	r2,32(r2)
    f138:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f13c:	e0bffe17 	ldw	r2,-8(fp)
    f140:	e0ffff17 	ldw	r3,-4(fp)
    f144:	d8000015 	stw	zero,0(sp)
    f148:	e1fffd17 	ldw	r7,-12(fp)
    f14c:	01800074 	movhi	r6,1
    f150:	31bc6e04 	addi	r6,r6,-3656
    f154:	180b883a 	mov	r5,r3
    f158:	1009883a 	mov	r4,r2
    f15c:	00100a80 	call	100a8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f160:	e0bffd17 	ldw	r2,-12(fp)
    f164:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f168:	e0bffd17 	ldw	r2,-12(fp)
    f16c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f170:	d0e6e217 	ldw	r3,-25720(gp)
    f174:	e1fffd17 	ldw	r7,-12(fp)
    f178:	01800074 	movhi	r6,1
    f17c:	31bcf104 	addi	r6,r6,-3132
    f180:	180b883a 	mov	r5,r3
    f184:	1009883a 	mov	r4,r2
    f188:	000fc080 	call	fc08 <alt_alarm_start>
    f18c:	1000040e 	bge	r2,zero,f1a0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f190:	e0fffd17 	ldw	r3,-12(fp)
    f194:	00a00034 	movhi	r2,32768
    f198:	10bfffc4 	addi	r2,r2,-1
    f19c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f1a0:	0001883a 	nop
    f1a4:	e037883a 	mov	sp,fp
    f1a8:	dfc00117 	ldw	ra,4(sp)
    f1ac:	df000017 	ldw	fp,0(sp)
    f1b0:	dec00204 	addi	sp,sp,8
    f1b4:	f800283a 	ret

0000f1b8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f1b8:	defff804 	addi	sp,sp,-32
    f1bc:	df000715 	stw	fp,28(sp)
    f1c0:	df000704 	addi	fp,sp,28
    f1c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f1c8:	e0bfff17 	ldw	r2,-4(fp)
    f1cc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f1d0:	e0bffb17 	ldw	r2,-20(fp)
    f1d4:	10800017 	ldw	r2,0(r2)
    f1d8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f1dc:	e0bffc17 	ldw	r2,-16(fp)
    f1e0:	10800104 	addi	r2,r2,4
    f1e4:	10800037 	ldwio	r2,0(r2)
    f1e8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f1ec:	e0bffd17 	ldw	r2,-12(fp)
    f1f0:	1080c00c 	andi	r2,r2,768
    f1f4:	10006d26 	beq	r2,zero,f3ac <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f1f8:	e0bffd17 	ldw	r2,-12(fp)
    f1fc:	1080400c 	andi	r2,r2,256
    f200:	10003526 	beq	r2,zero,f2d8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f204:	00800074 	movhi	r2,1
    f208:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f20c:	e0bffb17 	ldw	r2,-20(fp)
    f210:	10800a17 	ldw	r2,40(r2)
    f214:	10800044 	addi	r2,r2,1
    f218:	1081ffcc 	andi	r2,r2,2047
    f21c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f220:	e0bffb17 	ldw	r2,-20(fp)
    f224:	10c00b17 	ldw	r3,44(r2)
    f228:	e0bffe17 	ldw	r2,-8(fp)
    f22c:	18801526 	beq	r3,r2,f284 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f230:	e0bffc17 	ldw	r2,-16(fp)
    f234:	10800037 	ldwio	r2,0(r2)
    f238:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f23c:	e0bff917 	ldw	r2,-28(fp)
    f240:	10a0000c 	andi	r2,r2,32768
    f244:	10001126 	beq	r2,zero,f28c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f248:	e0bffb17 	ldw	r2,-20(fp)
    f24c:	10800a17 	ldw	r2,40(r2)
    f250:	e0fff917 	ldw	r3,-28(fp)
    f254:	1809883a 	mov	r4,r3
    f258:	e0fffb17 	ldw	r3,-20(fp)
    f25c:	1885883a 	add	r2,r3,r2
    f260:	10800e04 	addi	r2,r2,56
    f264:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f268:	e0bffb17 	ldw	r2,-20(fp)
    f26c:	10800a17 	ldw	r2,40(r2)
    f270:	10800044 	addi	r2,r2,1
    f274:	10c1ffcc 	andi	r3,r2,2047
    f278:	e0bffb17 	ldw	r2,-20(fp)
    f27c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f280:	003fe206 	br	f20c <__alt_data_end+0xff00f20c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f284:	0001883a 	nop
    f288:	00000106 	br	f290 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f28c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f290:	e0bff917 	ldw	r2,-28(fp)
    f294:	10bfffec 	andhi	r2,r2,65535
    f298:	10000f26 	beq	r2,zero,f2d8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f29c:	e0bffb17 	ldw	r2,-20(fp)
    f2a0:	10c00817 	ldw	r3,32(r2)
    f2a4:	00bfff84 	movi	r2,-2
    f2a8:	1886703a 	and	r3,r3,r2
    f2ac:	e0bffb17 	ldw	r2,-20(fp)
    f2b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f2b4:	e0bffc17 	ldw	r2,-16(fp)
    f2b8:	10800104 	addi	r2,r2,4
    f2bc:	1007883a 	mov	r3,r2
    f2c0:	e0bffb17 	ldw	r2,-20(fp)
    f2c4:	10800817 	ldw	r2,32(r2)
    f2c8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f2cc:	e0bffc17 	ldw	r2,-16(fp)
    f2d0:	10800104 	addi	r2,r2,4
    f2d4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f2d8:	e0bffd17 	ldw	r2,-12(fp)
    f2dc:	1080800c 	andi	r2,r2,512
    f2e0:	103fbe26 	beq	r2,zero,f1dc <__alt_data_end+0xff00f1dc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f2e4:	e0bffd17 	ldw	r2,-12(fp)
    f2e8:	1004d43a 	srli	r2,r2,16
    f2ec:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f2f0:	00001406 	br	f344 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f2f4:	e0bffc17 	ldw	r2,-16(fp)
    f2f8:	e0fffb17 	ldw	r3,-20(fp)
    f2fc:	18c00d17 	ldw	r3,52(r3)
    f300:	e13ffb17 	ldw	r4,-20(fp)
    f304:	20c7883a 	add	r3,r4,r3
    f308:	18c20e04 	addi	r3,r3,2104
    f30c:	18c00003 	ldbu	r3,0(r3)
    f310:	18c03fcc 	andi	r3,r3,255
    f314:	18c0201c 	xori	r3,r3,128
    f318:	18ffe004 	addi	r3,r3,-128
    f31c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f320:	e0bffb17 	ldw	r2,-20(fp)
    f324:	10800d17 	ldw	r2,52(r2)
    f328:	10800044 	addi	r2,r2,1
    f32c:	10c1ffcc 	andi	r3,r2,2047
    f330:	e0bffb17 	ldw	r2,-20(fp)
    f334:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f338:	e0bffa17 	ldw	r2,-24(fp)
    f33c:	10bfffc4 	addi	r2,r2,-1
    f340:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f344:	e0bffa17 	ldw	r2,-24(fp)
    f348:	10000526 	beq	r2,zero,f360 <altera_avalon_jtag_uart_irq+0x1a8>
    f34c:	e0bffb17 	ldw	r2,-20(fp)
    f350:	10c00d17 	ldw	r3,52(r2)
    f354:	e0bffb17 	ldw	r2,-20(fp)
    f358:	10800c17 	ldw	r2,48(r2)
    f35c:	18bfe51e 	bne	r3,r2,f2f4 <__alt_data_end+0xff00f2f4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f360:	e0bffa17 	ldw	r2,-24(fp)
    f364:	103f9d26 	beq	r2,zero,f1dc <__alt_data_end+0xff00f1dc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f368:	e0bffb17 	ldw	r2,-20(fp)
    f36c:	10c00817 	ldw	r3,32(r2)
    f370:	00bfff44 	movi	r2,-3
    f374:	1886703a 	and	r3,r3,r2
    f378:	e0bffb17 	ldw	r2,-20(fp)
    f37c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f380:	e0bffb17 	ldw	r2,-20(fp)
    f384:	10800017 	ldw	r2,0(r2)
    f388:	10800104 	addi	r2,r2,4
    f38c:	1007883a 	mov	r3,r2
    f390:	e0bffb17 	ldw	r2,-20(fp)
    f394:	10800817 	ldw	r2,32(r2)
    f398:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f39c:	e0bffc17 	ldw	r2,-16(fp)
    f3a0:	10800104 	addi	r2,r2,4
    f3a4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f3a8:	003f8c06 	br	f1dc <__alt_data_end+0xff00f1dc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    f3ac:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    f3b0:	0001883a 	nop
    f3b4:	e037883a 	mov	sp,fp
    f3b8:	df000017 	ldw	fp,0(sp)
    f3bc:	dec00104 	addi	sp,sp,4
    f3c0:	f800283a 	ret

0000f3c4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f3c4:	defff804 	addi	sp,sp,-32
    f3c8:	df000715 	stw	fp,28(sp)
    f3cc:	df000704 	addi	fp,sp,28
    f3d0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f3d4:	e0bffb17 	ldw	r2,-20(fp)
    f3d8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f3dc:	e0bff917 	ldw	r2,-28(fp)
    f3e0:	10800017 	ldw	r2,0(r2)
    f3e4:	10800104 	addi	r2,r2,4
    f3e8:	10800037 	ldwio	r2,0(r2)
    f3ec:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f3f0:	e0bffa17 	ldw	r2,-24(fp)
    f3f4:	1081000c 	andi	r2,r2,1024
    f3f8:	10000b26 	beq	r2,zero,f428 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f3fc:	e0bff917 	ldw	r2,-28(fp)
    f400:	10800017 	ldw	r2,0(r2)
    f404:	10800104 	addi	r2,r2,4
    f408:	1007883a 	mov	r3,r2
    f40c:	e0bff917 	ldw	r2,-28(fp)
    f410:	10800817 	ldw	r2,32(r2)
    f414:	10810014 	ori	r2,r2,1024
    f418:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f41c:	e0bff917 	ldw	r2,-28(fp)
    f420:	10000915 	stw	zero,36(r2)
    f424:	00000a06 	br	f450 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f428:	e0bff917 	ldw	r2,-28(fp)
    f42c:	10c00917 	ldw	r3,36(r2)
    f430:	00a00034 	movhi	r2,32768
    f434:	10bfff04 	addi	r2,r2,-4
    f438:	10c00536 	bltu	r2,r3,f450 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f43c:	e0bff917 	ldw	r2,-28(fp)
    f440:	10800917 	ldw	r2,36(r2)
    f444:	10c00044 	addi	r3,r2,1
    f448:	e0bff917 	ldw	r2,-28(fp)
    f44c:	10c00915 	stw	r3,36(r2)
    f450:	d0a6e217 	ldw	r2,-25720(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f454:	e037883a 	mov	sp,fp
    f458:	df000017 	ldw	fp,0(sp)
    f45c:	dec00104 	addi	sp,sp,4
    f460:	f800283a 	ret

0000f464 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f464:	defffd04 	addi	sp,sp,-12
    f468:	df000215 	stw	fp,8(sp)
    f46c:	df000204 	addi	fp,sp,8
    f470:	e13ffe15 	stw	r4,-8(fp)
    f474:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f478:	00000506 	br	f490 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f47c:	e0bfff17 	ldw	r2,-4(fp)
    f480:	1090000c 	andi	r2,r2,16384
    f484:	10000226 	beq	r2,zero,f490 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f488:	00bffd44 	movi	r2,-11
    f48c:	00000b06 	br	f4bc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f490:	e0bffe17 	ldw	r2,-8(fp)
    f494:	10c00d17 	ldw	r3,52(r2)
    f498:	e0bffe17 	ldw	r2,-8(fp)
    f49c:	10800c17 	ldw	r2,48(r2)
    f4a0:	18800526 	beq	r3,r2,f4b8 <altera_avalon_jtag_uart_close+0x54>
    f4a4:	e0bffe17 	ldw	r2,-8(fp)
    f4a8:	10c00917 	ldw	r3,36(r2)
    f4ac:	e0bffe17 	ldw	r2,-8(fp)
    f4b0:	10800117 	ldw	r2,4(r2)
    f4b4:	18bff136 	bltu	r3,r2,f47c <__alt_data_end+0xff00f47c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f4b8:	0005883a 	mov	r2,zero
}
    f4bc:	e037883a 	mov	sp,fp
    f4c0:	df000017 	ldw	fp,0(sp)
    f4c4:	dec00104 	addi	sp,sp,4
    f4c8:	f800283a 	ret

0000f4cc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f4cc:	defffa04 	addi	sp,sp,-24
    f4d0:	df000515 	stw	fp,20(sp)
    f4d4:	df000504 	addi	fp,sp,20
    f4d8:	e13ffd15 	stw	r4,-12(fp)
    f4dc:	e17ffe15 	stw	r5,-8(fp)
    f4e0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f4e4:	00bff9c4 	movi	r2,-25
    f4e8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f4ec:	e0bffe17 	ldw	r2,-8(fp)
    f4f0:	10da8060 	cmpeqi	r3,r2,27137
    f4f4:	1800031e 	bne	r3,zero,f504 <altera_avalon_jtag_uart_ioctl+0x38>
    f4f8:	109a80a0 	cmpeqi	r2,r2,27138
    f4fc:	1000181e 	bne	r2,zero,f560 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    f500:	00002906 	br	f5a8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f504:	e0bffd17 	ldw	r2,-12(fp)
    f508:	10c00117 	ldw	r3,4(r2)
    f50c:	00a00034 	movhi	r2,32768
    f510:	10bfffc4 	addi	r2,r2,-1
    f514:	18802126 	beq	r3,r2,f59c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    f518:	e0bfff17 	ldw	r2,-4(fp)
    f51c:	10800017 	ldw	r2,0(r2)
    f520:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f524:	e0bffc17 	ldw	r2,-16(fp)
    f528:	10800090 	cmplti	r2,r2,2
    f52c:	1000061e 	bne	r2,zero,f548 <altera_avalon_jtag_uart_ioctl+0x7c>
    f530:	e0fffc17 	ldw	r3,-16(fp)
    f534:	00a00034 	movhi	r2,32768
    f538:	10bfffc4 	addi	r2,r2,-1
    f53c:	18800226 	beq	r3,r2,f548 <altera_avalon_jtag_uart_ioctl+0x7c>
    f540:	e0bffc17 	ldw	r2,-16(fp)
    f544:	00000206 	br	f550 <altera_avalon_jtag_uart_ioctl+0x84>
    f548:	00a00034 	movhi	r2,32768
    f54c:	10bfff84 	addi	r2,r2,-2
    f550:	e0fffd17 	ldw	r3,-12(fp)
    f554:	18800115 	stw	r2,4(r3)
      rc = 0;
    f558:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f55c:	00000f06 	br	f59c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f560:	e0bffd17 	ldw	r2,-12(fp)
    f564:	10c00117 	ldw	r3,4(r2)
    f568:	00a00034 	movhi	r2,32768
    f56c:	10bfffc4 	addi	r2,r2,-1
    f570:	18800c26 	beq	r3,r2,f5a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f574:	e0bffd17 	ldw	r2,-12(fp)
    f578:	10c00917 	ldw	r3,36(r2)
    f57c:	e0bffd17 	ldw	r2,-12(fp)
    f580:	10800117 	ldw	r2,4(r2)
    f584:	1885803a 	cmpltu	r2,r3,r2
    f588:	10c03fcc 	andi	r3,r2,255
    f58c:	e0bfff17 	ldw	r2,-4(fp)
    f590:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f594:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f598:	00000206 	br	f5a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    f59c:	0001883a 	nop
    f5a0:	00000106 	br	f5a8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    f5a4:	0001883a 	nop

  default:
    break;
  }

  return rc;
    f5a8:	e0bffb17 	ldw	r2,-20(fp)
}
    f5ac:	e037883a 	mov	sp,fp
    f5b0:	df000017 	ldw	fp,0(sp)
    f5b4:	dec00104 	addi	sp,sp,4
    f5b8:	f800283a 	ret

0000f5bc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f5bc:	defff304 	addi	sp,sp,-52
    f5c0:	dfc00c15 	stw	ra,48(sp)
    f5c4:	df000b15 	stw	fp,44(sp)
    f5c8:	df000b04 	addi	fp,sp,44
    f5cc:	e13ffc15 	stw	r4,-16(fp)
    f5d0:	e17ffd15 	stw	r5,-12(fp)
    f5d4:	e1bffe15 	stw	r6,-8(fp)
    f5d8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    f5dc:	e0bffd17 	ldw	r2,-12(fp)
    f5e0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f5e4:	00004706 	br	f704 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f5e8:	e0bffc17 	ldw	r2,-16(fp)
    f5ec:	10800a17 	ldw	r2,40(r2)
    f5f0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    f5f4:	e0bffc17 	ldw	r2,-16(fp)
    f5f8:	10800b17 	ldw	r2,44(r2)
    f5fc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    f600:	e0fff717 	ldw	r3,-36(fp)
    f604:	e0bff817 	ldw	r2,-32(fp)
    f608:	18800536 	bltu	r3,r2,f620 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    f60c:	e0fff717 	ldw	r3,-36(fp)
    f610:	e0bff817 	ldw	r2,-32(fp)
    f614:	1885c83a 	sub	r2,r3,r2
    f618:	e0bff615 	stw	r2,-40(fp)
    f61c:	00000406 	br	f630 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f620:	00c20004 	movi	r3,2048
    f624:	e0bff817 	ldw	r2,-32(fp)
    f628:	1885c83a 	sub	r2,r3,r2
    f62c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f630:	e0bff617 	ldw	r2,-40(fp)
    f634:	10001e26 	beq	r2,zero,f6b0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    f638:	e0fffe17 	ldw	r3,-8(fp)
    f63c:	e0bff617 	ldw	r2,-40(fp)
    f640:	1880022e 	bgeu	r3,r2,f64c <altera_avalon_jtag_uart_read+0x90>
        n = space;
    f644:	e0bffe17 	ldw	r2,-8(fp)
    f648:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    f64c:	e0bffc17 	ldw	r2,-16(fp)
    f650:	10c00e04 	addi	r3,r2,56
    f654:	e0bff817 	ldw	r2,-32(fp)
    f658:	1885883a 	add	r2,r3,r2
    f65c:	e1bff617 	ldw	r6,-40(fp)
    f660:	100b883a 	mov	r5,r2
    f664:	e13ff517 	ldw	r4,-44(fp)
    f668:	00078ec0 	call	78ec <memcpy>
      ptr   += n;
    f66c:	e0fff517 	ldw	r3,-44(fp)
    f670:	e0bff617 	ldw	r2,-40(fp)
    f674:	1885883a 	add	r2,r3,r2
    f678:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    f67c:	e0fffe17 	ldw	r3,-8(fp)
    f680:	e0bff617 	ldw	r2,-40(fp)
    f684:	1885c83a 	sub	r2,r3,r2
    f688:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f68c:	e0fff817 	ldw	r3,-32(fp)
    f690:	e0bff617 	ldw	r2,-40(fp)
    f694:	1885883a 	add	r2,r3,r2
    f698:	10c1ffcc 	andi	r3,r2,2047
    f69c:	e0bffc17 	ldw	r2,-16(fp)
    f6a0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    f6a4:	e0bffe17 	ldw	r2,-8(fp)
    f6a8:	00bfcf16 	blt	zero,r2,f5e8 <__alt_data_end+0xff00f5e8>
    f6ac:	00000106 	br	f6b4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    f6b0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    f6b4:	e0fff517 	ldw	r3,-44(fp)
    f6b8:	e0bffd17 	ldw	r2,-12(fp)
    f6bc:	1880141e 	bne	r3,r2,f710 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f6c0:	e0bfff17 	ldw	r2,-4(fp)
    f6c4:	1090000c 	andi	r2,r2,16384
    f6c8:	1000131e 	bne	r2,zero,f718 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f6cc:	0001883a 	nop
    f6d0:	e0bffc17 	ldw	r2,-16(fp)
    f6d4:	10c00a17 	ldw	r3,40(r2)
    f6d8:	e0bff717 	ldw	r2,-36(fp)
    f6dc:	1880051e 	bne	r3,r2,f6f4 <altera_avalon_jtag_uart_read+0x138>
    f6e0:	e0bffc17 	ldw	r2,-16(fp)
    f6e4:	10c00917 	ldw	r3,36(r2)
    f6e8:	e0bffc17 	ldw	r2,-16(fp)
    f6ec:	10800117 	ldw	r2,4(r2)
    f6f0:	18bff736 	bltu	r3,r2,f6d0 <__alt_data_end+0xff00f6d0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f6f4:	e0bffc17 	ldw	r2,-16(fp)
    f6f8:	10c00a17 	ldw	r3,40(r2)
    f6fc:	e0bff717 	ldw	r2,-36(fp)
    f700:	18800726 	beq	r3,r2,f720 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f704:	e0bffe17 	ldw	r2,-8(fp)
    f708:	00bfb716 	blt	zero,r2,f5e8 <__alt_data_end+0xff00f5e8>
    f70c:	00000506 	br	f724 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    f710:	0001883a 	nop
    f714:	00000306 	br	f724 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    f718:	0001883a 	nop
    f71c:	00000106 	br	f724 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    f720:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    f724:	e0fff517 	ldw	r3,-44(fp)
    f728:	e0bffd17 	ldw	r2,-12(fp)
    f72c:	18801826 	beq	r3,r2,f790 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f730:	0005303a 	rdctl	r2,status
    f734:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f738:	e0fffb17 	ldw	r3,-20(fp)
    f73c:	00bfff84 	movi	r2,-2
    f740:	1884703a 	and	r2,r3,r2
    f744:	1001703a 	wrctl	status,r2
  
  return context;
    f748:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    f74c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f750:	e0bffc17 	ldw	r2,-16(fp)
    f754:	10800817 	ldw	r2,32(r2)
    f758:	10c00054 	ori	r3,r2,1
    f75c:	e0bffc17 	ldw	r2,-16(fp)
    f760:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f764:	e0bffc17 	ldw	r2,-16(fp)
    f768:	10800017 	ldw	r2,0(r2)
    f76c:	10800104 	addi	r2,r2,4
    f770:	1007883a 	mov	r3,r2
    f774:	e0bffc17 	ldw	r2,-16(fp)
    f778:	10800817 	ldw	r2,32(r2)
    f77c:	18800035 	stwio	r2,0(r3)
    f780:	e0bffa17 	ldw	r2,-24(fp)
    f784:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f788:	e0bff917 	ldw	r2,-28(fp)
    f78c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    f790:	e0fff517 	ldw	r3,-44(fp)
    f794:	e0bffd17 	ldw	r2,-12(fp)
    f798:	18800426 	beq	r3,r2,f7ac <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    f79c:	e0fff517 	ldw	r3,-44(fp)
    f7a0:	e0bffd17 	ldw	r2,-12(fp)
    f7a4:	1885c83a 	sub	r2,r3,r2
    f7a8:	00000606 	br	f7c4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    f7ac:	e0bfff17 	ldw	r2,-4(fp)
    f7b0:	1090000c 	andi	r2,r2,16384
    f7b4:	10000226 	beq	r2,zero,f7c0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    f7b8:	00bffd44 	movi	r2,-11
    f7bc:	00000106 	br	f7c4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    f7c0:	00bffec4 	movi	r2,-5
}
    f7c4:	e037883a 	mov	sp,fp
    f7c8:	dfc00117 	ldw	ra,4(sp)
    f7cc:	df000017 	ldw	fp,0(sp)
    f7d0:	dec00204 	addi	sp,sp,8
    f7d4:	f800283a 	ret

0000f7d8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f7d8:	defff304 	addi	sp,sp,-52
    f7dc:	dfc00c15 	stw	ra,48(sp)
    f7e0:	df000b15 	stw	fp,44(sp)
    f7e4:	df000b04 	addi	fp,sp,44
    f7e8:	e13ffc15 	stw	r4,-16(fp)
    f7ec:	e17ffd15 	stw	r5,-12(fp)
    f7f0:	e1bffe15 	stw	r6,-8(fp)
    f7f4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    f7f8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    f7fc:	e0bffd17 	ldw	r2,-12(fp)
    f800:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f804:	00003706 	br	f8e4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f808:	e0bffc17 	ldw	r2,-16(fp)
    f80c:	10800c17 	ldw	r2,48(r2)
    f810:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    f814:	e0bffc17 	ldw	r2,-16(fp)
    f818:	10800d17 	ldw	r2,52(r2)
    f81c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    f820:	e0fff917 	ldw	r3,-28(fp)
    f824:	e0bff517 	ldw	r2,-44(fp)
    f828:	1880062e 	bgeu	r3,r2,f844 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    f82c:	e0fff517 	ldw	r3,-44(fp)
    f830:	e0bff917 	ldw	r2,-28(fp)
    f834:	1885c83a 	sub	r2,r3,r2
    f838:	10bfffc4 	addi	r2,r2,-1
    f83c:	e0bff615 	stw	r2,-40(fp)
    f840:	00000b06 	br	f870 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    f844:	e0bff517 	ldw	r2,-44(fp)
    f848:	10000526 	beq	r2,zero,f860 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f84c:	00c20004 	movi	r3,2048
    f850:	e0bff917 	ldw	r2,-28(fp)
    f854:	1885c83a 	sub	r2,r3,r2
    f858:	e0bff615 	stw	r2,-40(fp)
    f85c:	00000406 	br	f870 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f860:	00c1ffc4 	movi	r3,2047
    f864:	e0bff917 	ldw	r2,-28(fp)
    f868:	1885c83a 	sub	r2,r3,r2
    f86c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f870:	e0bff617 	ldw	r2,-40(fp)
    f874:	10001e26 	beq	r2,zero,f8f0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    f878:	e0fffe17 	ldw	r3,-8(fp)
    f87c:	e0bff617 	ldw	r2,-40(fp)
    f880:	1880022e 	bgeu	r3,r2,f88c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    f884:	e0bffe17 	ldw	r2,-8(fp)
    f888:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    f88c:	e0bffc17 	ldw	r2,-16(fp)
    f890:	10c20e04 	addi	r3,r2,2104
    f894:	e0bff917 	ldw	r2,-28(fp)
    f898:	1885883a 	add	r2,r3,r2
    f89c:	e1bff617 	ldw	r6,-40(fp)
    f8a0:	e17ffd17 	ldw	r5,-12(fp)
    f8a4:	1009883a 	mov	r4,r2
    f8a8:	00078ec0 	call	78ec <memcpy>
      ptr   += n;
    f8ac:	e0fffd17 	ldw	r3,-12(fp)
    f8b0:	e0bff617 	ldw	r2,-40(fp)
    f8b4:	1885883a 	add	r2,r3,r2
    f8b8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    f8bc:	e0fffe17 	ldw	r3,-8(fp)
    f8c0:	e0bff617 	ldw	r2,-40(fp)
    f8c4:	1885c83a 	sub	r2,r3,r2
    f8c8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f8cc:	e0fff917 	ldw	r3,-28(fp)
    f8d0:	e0bff617 	ldw	r2,-40(fp)
    f8d4:	1885883a 	add	r2,r3,r2
    f8d8:	10c1ffcc 	andi	r3,r2,2047
    f8dc:	e0bffc17 	ldw	r2,-16(fp)
    f8e0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f8e4:	e0bffe17 	ldw	r2,-8(fp)
    f8e8:	00bfc716 	blt	zero,r2,f808 <__alt_data_end+0xff00f808>
    f8ec:	00000106 	br	f8f4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    f8f0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f8f4:	0005303a 	rdctl	r2,status
    f8f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f8fc:	e0fffb17 	ldw	r3,-20(fp)
    f900:	00bfff84 	movi	r2,-2
    f904:	1884703a 	and	r2,r3,r2
    f908:	1001703a 	wrctl	status,r2
  
  return context;
    f90c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    f910:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f914:	e0bffc17 	ldw	r2,-16(fp)
    f918:	10800817 	ldw	r2,32(r2)
    f91c:	10c00094 	ori	r3,r2,2
    f920:	e0bffc17 	ldw	r2,-16(fp)
    f924:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f928:	e0bffc17 	ldw	r2,-16(fp)
    f92c:	10800017 	ldw	r2,0(r2)
    f930:	10800104 	addi	r2,r2,4
    f934:	1007883a 	mov	r3,r2
    f938:	e0bffc17 	ldw	r2,-16(fp)
    f93c:	10800817 	ldw	r2,32(r2)
    f940:	18800035 	stwio	r2,0(r3)
    f944:	e0bffa17 	ldw	r2,-24(fp)
    f948:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f94c:	e0bff817 	ldw	r2,-32(fp)
    f950:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f954:	e0bffe17 	ldw	r2,-8(fp)
    f958:	0080100e 	bge	zero,r2,f99c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    f95c:	e0bfff17 	ldw	r2,-4(fp)
    f960:	1090000c 	andi	r2,r2,16384
    f964:	1000101e 	bne	r2,zero,f9a8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f968:	0001883a 	nop
    f96c:	e0bffc17 	ldw	r2,-16(fp)
    f970:	10c00d17 	ldw	r3,52(r2)
    f974:	e0bff517 	ldw	r2,-44(fp)
    f978:	1880051e 	bne	r3,r2,f990 <altera_avalon_jtag_uart_write+0x1b8>
    f97c:	e0bffc17 	ldw	r2,-16(fp)
    f980:	10c00917 	ldw	r3,36(r2)
    f984:	e0bffc17 	ldw	r2,-16(fp)
    f988:	10800117 	ldw	r2,4(r2)
    f98c:	18bff736 	bltu	r3,r2,f96c <__alt_data_end+0xff00f96c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f990:	e0bffc17 	ldw	r2,-16(fp)
    f994:	10800917 	ldw	r2,36(r2)
    f998:	1000051e 	bne	r2,zero,f9b0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    f99c:	e0bffe17 	ldw	r2,-8(fp)
    f9a0:	00bfd016 	blt	zero,r2,f8e4 <__alt_data_end+0xff00f8e4>
    f9a4:	00000306 	br	f9b4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    f9a8:	0001883a 	nop
    f9ac:	00000106 	br	f9b4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    f9b0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f9b4:	e0fffd17 	ldw	r3,-12(fp)
    f9b8:	e0bff717 	ldw	r2,-36(fp)
    f9bc:	18800426 	beq	r3,r2,f9d0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    f9c0:	e0fffd17 	ldw	r3,-12(fp)
    f9c4:	e0bff717 	ldw	r2,-36(fp)
    f9c8:	1885c83a 	sub	r2,r3,r2
    f9cc:	00000606 	br	f9e8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    f9d0:	e0bfff17 	ldw	r2,-4(fp)
    f9d4:	1090000c 	andi	r2,r2,16384
    f9d8:	10000226 	beq	r2,zero,f9e4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    f9dc:	00bffd44 	movi	r2,-11
    f9e0:	00000106 	br	f9e8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f9e4:	00bffec4 	movi	r2,-5
}
    f9e8:	e037883a 	mov	sp,fp
    f9ec:	dfc00117 	ldw	ra,4(sp)
    f9f0:	df000017 	ldw	fp,0(sp)
    f9f4:	dec00204 	addi	sp,sp,8
    f9f8:	f800283a 	ret

0000f9fc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    f9fc:	defffa04 	addi	sp,sp,-24
    fa00:	dfc00515 	stw	ra,20(sp)
    fa04:	df000415 	stw	fp,16(sp)
    fa08:	df000404 	addi	fp,sp,16
    fa0c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    fa10:	0007883a 	mov	r3,zero
    fa14:	e0bfff17 	ldw	r2,-4(fp)
    fa18:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    fa1c:	e0bfff17 	ldw	r2,-4(fp)
    fa20:	10800104 	addi	r2,r2,4
    fa24:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fa28:	0005303a 	rdctl	r2,status
    fa2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa30:	e0fffd17 	ldw	r3,-12(fp)
    fa34:	00bfff84 	movi	r2,-2
    fa38:	1884703a 	and	r2,r3,r2
    fa3c:	1001703a 	wrctl	status,r2
  
  return context;
    fa40:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    fa44:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    fa48:	00107780 	call	10778 <alt_tick>
    fa4c:	e0bffc17 	ldw	r2,-16(fp)
    fa50:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa54:	e0bffe17 	ldw	r2,-8(fp)
    fa58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    fa5c:	0001883a 	nop
    fa60:	e037883a 	mov	sp,fp
    fa64:	dfc00117 	ldw	ra,4(sp)
    fa68:	df000017 	ldw	fp,0(sp)
    fa6c:	dec00204 	addi	sp,sp,8
    fa70:	f800283a 	ret

0000fa74 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    fa74:	defff804 	addi	sp,sp,-32
    fa78:	dfc00715 	stw	ra,28(sp)
    fa7c:	df000615 	stw	fp,24(sp)
    fa80:	df000604 	addi	fp,sp,24
    fa84:	e13ffc15 	stw	r4,-16(fp)
    fa88:	e17ffd15 	stw	r5,-12(fp)
    fa8c:	e1bffe15 	stw	r6,-8(fp)
    fa90:	e1ffff15 	stw	r7,-4(fp)
    fa94:	e0bfff17 	ldw	r2,-4(fp)
    fa98:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    fa9c:	d0a6e217 	ldw	r2,-25720(gp)
    faa0:	1000021e 	bne	r2,zero,faac <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    faa4:	e0bffb17 	ldw	r2,-20(fp)
    faa8:	d0a6e215 	stw	r2,-25720(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    faac:	e0bffc17 	ldw	r2,-16(fp)
    fab0:	10800104 	addi	r2,r2,4
    fab4:	00c001c4 	movi	r3,7
    fab8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    fabc:	d8000015 	stw	zero,0(sp)
    fac0:	e1fffc17 	ldw	r7,-16(fp)
    fac4:	01800074 	movhi	r6,1
    fac8:	31be7f04 	addi	r6,r6,-1540
    facc:	e17ffe17 	ldw	r5,-8(fp)
    fad0:	e13ffd17 	ldw	r4,-12(fp)
    fad4:	00100a80 	call	100a8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    fad8:	0001883a 	nop
    fadc:	e037883a 	mov	sp,fp
    fae0:	dfc00117 	ldw	ra,4(sp)
    fae4:	df000017 	ldw	fp,0(sp)
    fae8:	dec00204 	addi	sp,sp,8
    faec:	f800283a 	ret

0000faf0 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    faf0:	defffe04 	addi	sp,sp,-8
    faf4:	df000115 	stw	fp,4(sp)
    faf8:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
    fafc:	d0a6df17 	ldw	r2,-25732(gp)
    fb00:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
    fb04:	d0a6e017 	ldw	r2,-25728(gp)
    fb08:	1000021e 	bne	r2,zero,fb14 <alt_timestamp_start+0x24>
  {
    return -1;
    fb0c:	00bfffc4 	movi	r2,-1
    fb10:	00001106 	br	fb58 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    fb14:	e0bfff17 	ldw	r2,-4(fp)
    fb18:	10800104 	addi	r2,r2,4
    fb1c:	00c00204 	movi	r3,8
    fb20:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    fb24:	e0bfff17 	ldw	r2,-4(fp)
    fb28:	10800204 	addi	r2,r2,8
    fb2c:	00ffffd4 	movui	r3,65535
    fb30:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    fb34:	e0bfff17 	ldw	r2,-4(fp)
    fb38:	10800304 	addi	r2,r2,12
    fb3c:	00ffffd4 	movui	r3,65535
    fb40:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    fb44:	e0bfff17 	ldw	r2,-4(fp)
    fb48:	10800104 	addi	r2,r2,4
    fb4c:	00c00104 	movi	r3,4
    fb50:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
    fb54:	0005883a 	mov	r2,zero
}
    fb58:	e037883a 	mov	sp,fp
    fb5c:	df000017 	ldw	fp,0(sp)
    fb60:	dec00104 	addi	sp,sp,4
    fb64:	f800283a 	ret

0000fb68 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    fb68:	defffc04 	addi	sp,sp,-16
    fb6c:	df000315 	stw	fp,12(sp)
    fb70:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
    fb74:	d0a6df17 	ldw	r2,-25732(gp)
    fb78:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
    fb7c:	d0a6e017 	ldw	r2,-25728(gp)
    fb80:	1000021e 	bne	r2,zero,fb8c <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    fb84:	00bfffc4 	movi	r2,-1
    fb88:	00001306 	br	fbd8 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    fb8c:	e0bffd17 	ldw	r2,-12(fp)
    fb90:	10800404 	addi	r2,r2,16
    fb94:	0007883a 	mov	r3,zero
    fb98:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    fb9c:	e0bffd17 	ldw	r2,-12(fp)
    fba0:	10800404 	addi	r2,r2,16
    fba4:	10800037 	ldwio	r2,0(r2)
    fba8:	10bfffcc 	andi	r2,r2,65535
    fbac:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    fbb0:	e0bffd17 	ldw	r2,-12(fp)
    fbb4:	10800504 	addi	r2,r2,20
    fbb8:	10800037 	ldwio	r2,0(r2)
    fbbc:	10bfffcc 	andi	r2,r2,65535
    fbc0:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    fbc4:	e0bfff17 	ldw	r2,-4(fp)
    fbc8:	1006943a 	slli	r3,r2,16
    fbcc:	e0bffe17 	ldw	r2,-8(fp)
    fbd0:	1884b03a 	or	r2,r3,r2
    fbd4:	0084303a 	nor	r2,zero,r2
#endif
  }
}
    fbd8:	e037883a 	mov	sp,fp
    fbdc:	df000017 	ldw	fp,0(sp)
    fbe0:	dec00104 	addi	sp,sp,4
    fbe4:	f800283a 	ret

0000fbe8 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    fbe8:	deffff04 	addi	sp,sp,-4
    fbec:	df000015 	stw	fp,0(sp)
    fbf0:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    fbf4:	d0a6e017 	ldw	r2,-25728(gp)
}
    fbf8:	e037883a 	mov	sp,fp
    fbfc:	df000017 	ldw	fp,0(sp)
    fc00:	dec00104 	addi	sp,sp,4
    fc04:	f800283a 	ret

0000fc08 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    fc08:	defff504 	addi	sp,sp,-44
    fc0c:	df000a15 	stw	fp,40(sp)
    fc10:	df000a04 	addi	fp,sp,40
    fc14:	e13ffc15 	stw	r4,-16(fp)
    fc18:	e17ffd15 	stw	r5,-12(fp)
    fc1c:	e1bffe15 	stw	r6,-8(fp)
    fc20:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    fc24:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    fc28:	d0a6e217 	ldw	r2,-25720(gp)
  
  if (alt_ticks_per_second ())
    fc2c:	10003c26 	beq	r2,zero,fd20 <alt_alarm_start+0x118>
  {
    if (alarm)
    fc30:	e0bffc17 	ldw	r2,-16(fp)
    fc34:	10003826 	beq	r2,zero,fd18 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    fc38:	e0bffc17 	ldw	r2,-16(fp)
    fc3c:	e0fffe17 	ldw	r3,-8(fp)
    fc40:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    fc44:	e0bffc17 	ldw	r2,-16(fp)
    fc48:	e0ffff17 	ldw	r3,-4(fp)
    fc4c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc50:	0005303a 	rdctl	r2,status
    fc54:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc58:	e0fff917 	ldw	r3,-28(fp)
    fc5c:	00bfff84 	movi	r2,-2
    fc60:	1884703a 	and	r2,r3,r2
    fc64:	1001703a 	wrctl	status,r2
  
  return context;
    fc68:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    fc6c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    fc70:	d0a6e317 	ldw	r2,-25716(gp)
      
      current_nticks = alt_nticks();
    fc74:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    fc78:	e0fffd17 	ldw	r3,-12(fp)
    fc7c:	e0bff617 	ldw	r2,-40(fp)
    fc80:	1885883a 	add	r2,r3,r2
    fc84:	10c00044 	addi	r3,r2,1
    fc88:	e0bffc17 	ldw	r2,-16(fp)
    fc8c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    fc90:	e0bffc17 	ldw	r2,-16(fp)
    fc94:	10c00217 	ldw	r3,8(r2)
    fc98:	e0bff617 	ldw	r2,-40(fp)
    fc9c:	1880042e 	bgeu	r3,r2,fcb0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    fca0:	e0bffc17 	ldw	r2,-16(fp)
    fca4:	00c00044 	movi	r3,1
    fca8:	10c00405 	stb	r3,16(r2)
    fcac:	00000206 	br	fcb8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    fcb0:	e0bffc17 	ldw	r2,-16(fp)
    fcb4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    fcb8:	e0bffc17 	ldw	r2,-16(fp)
    fcbc:	d0e00e04 	addi	r3,gp,-32712
    fcc0:	e0fffa15 	stw	r3,-24(fp)
    fcc4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fcc8:	e0bffb17 	ldw	r2,-20(fp)
    fccc:	e0fffa17 	ldw	r3,-24(fp)
    fcd0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fcd4:	e0bffa17 	ldw	r2,-24(fp)
    fcd8:	10c00017 	ldw	r3,0(r2)
    fcdc:	e0bffb17 	ldw	r2,-20(fp)
    fce0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fce4:	e0bffa17 	ldw	r2,-24(fp)
    fce8:	10800017 	ldw	r2,0(r2)
    fcec:	e0fffb17 	ldw	r3,-20(fp)
    fcf0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fcf4:	e0bffa17 	ldw	r2,-24(fp)
    fcf8:	e0fffb17 	ldw	r3,-20(fp)
    fcfc:	10c00015 	stw	r3,0(r2)
    fd00:	e0bff817 	ldw	r2,-32(fp)
    fd04:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd08:	e0bff717 	ldw	r2,-36(fp)
    fd0c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    fd10:	0005883a 	mov	r2,zero
    fd14:	00000306 	br	fd24 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    fd18:	00bffa84 	movi	r2,-22
    fd1c:	00000106 	br	fd24 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    fd20:	00bfde84 	movi	r2,-134
  }
}
    fd24:	e037883a 	mov	sp,fp
    fd28:	df000017 	ldw	fp,0(sp)
    fd2c:	dec00104 	addi	sp,sp,4
    fd30:	f800283a 	ret

0000fd34 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    fd34:	defffa04 	addi	sp,sp,-24
    fd38:	dfc00515 	stw	ra,20(sp)
    fd3c:	df000415 	stw	fp,16(sp)
    fd40:	df000404 	addi	fp,sp,16
    fd44:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    fd48:	008000c4 	movi	r2,3
    fd4c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    fd50:	e0fffd17 	ldw	r3,-12(fp)
    fd54:	008003f4 	movhi	r2,15
    fd58:	10909004 	addi	r2,r2,16960
    fd5c:	1885383a 	mul	r2,r3,r2
    fd60:	100b883a 	mov	r5,r2
    fd64:	0100bef4 	movhi	r4,763
    fd68:	213c2004 	addi	r4,r4,-3968
    fd6c:	0001ce80 	call	1ce8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    fd70:	100b883a 	mov	r5,r2
    fd74:	01200034 	movhi	r4,32768
    fd78:	213fffc4 	addi	r4,r4,-1
    fd7c:	0001ce80 	call	1ce8 <__udivsi3>
    fd80:	100b883a 	mov	r5,r2
    fd84:	e13fff17 	ldw	r4,-4(fp)
    fd88:	0001ce80 	call	1ce8 <__udivsi3>
    fd8c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    fd90:	e0bffe17 	ldw	r2,-8(fp)
    fd94:	10002a26 	beq	r2,zero,fe40 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    fd98:	e03ffc15 	stw	zero,-16(fp)
    fd9c:	00001706 	br	fdfc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    fda0:	00a00034 	movhi	r2,32768
    fda4:	10bfffc4 	addi	r2,r2,-1
    fda8:	10bfffc4 	addi	r2,r2,-1
    fdac:	103ffe1e 	bne	r2,zero,fda8 <__alt_data_end+0xff00fda8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    fdb0:	e0fffd17 	ldw	r3,-12(fp)
    fdb4:	008003f4 	movhi	r2,15
    fdb8:	10909004 	addi	r2,r2,16960
    fdbc:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    fdc0:	100b883a 	mov	r5,r2
    fdc4:	0100bef4 	movhi	r4,763
    fdc8:	213c2004 	addi	r4,r4,-3968
    fdcc:	0001ce80 	call	1ce8 <__udivsi3>
    fdd0:	100b883a 	mov	r5,r2
    fdd4:	01200034 	movhi	r4,32768
    fdd8:	213fffc4 	addi	r4,r4,-1
    fddc:	0001ce80 	call	1ce8 <__udivsi3>
    fde0:	1007883a 	mov	r3,r2
    fde4:	e0bfff17 	ldw	r2,-4(fp)
    fde8:	10c5c83a 	sub	r2,r2,r3
    fdec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    fdf0:	e0bffc17 	ldw	r2,-16(fp)
    fdf4:	10800044 	addi	r2,r2,1
    fdf8:	e0bffc15 	stw	r2,-16(fp)
    fdfc:	e0fffc17 	ldw	r3,-16(fp)
    fe00:	e0bffe17 	ldw	r2,-8(fp)
    fe04:	18bfe616 	blt	r3,r2,fda0 <__alt_data_end+0xff00fda0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fe08:	e0fffd17 	ldw	r3,-12(fp)
    fe0c:	008003f4 	movhi	r2,15
    fe10:	10909004 	addi	r2,r2,16960
    fe14:	1885383a 	mul	r2,r3,r2
    fe18:	100b883a 	mov	r5,r2
    fe1c:	0100bef4 	movhi	r4,763
    fe20:	213c2004 	addi	r4,r4,-3968
    fe24:	0001ce80 	call	1ce8 <__udivsi3>
    fe28:	1007883a 	mov	r3,r2
    fe2c:	e0bfff17 	ldw	r2,-4(fp)
    fe30:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    fe34:	10bfffc4 	addi	r2,r2,-1
    fe38:	103ffe1e 	bne	r2,zero,fe34 <__alt_data_end+0xff00fe34>
    fe3c:	00000d06 	br	fe74 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fe40:	e0fffd17 	ldw	r3,-12(fp)
    fe44:	008003f4 	movhi	r2,15
    fe48:	10909004 	addi	r2,r2,16960
    fe4c:	1885383a 	mul	r2,r3,r2
    fe50:	100b883a 	mov	r5,r2
    fe54:	0100bef4 	movhi	r4,763
    fe58:	213c2004 	addi	r4,r4,-3968
    fe5c:	0001ce80 	call	1ce8 <__udivsi3>
    fe60:	1007883a 	mov	r3,r2
    fe64:	e0bfff17 	ldw	r2,-4(fp)
    fe68:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    fe6c:	10bfffc4 	addi	r2,r2,-1
    fe70:	00bffe16 	blt	zero,r2,fe6c <__alt_data_end+0xff00fe6c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    fe74:	0005883a 	mov	r2,zero
}
    fe78:	e037883a 	mov	sp,fp
    fe7c:	dfc00117 	ldw	ra,4(sp)
    fe80:	df000017 	ldw	fp,0(sp)
    fe84:	dec00204 	addi	sp,sp,8
    fe88:	f800283a 	ret

0000fe8c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    fe8c:	defffe04 	addi	sp,sp,-8
    fe90:	df000115 	stw	fp,4(sp)
    fe94:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    fe98:	e03fff15 	stw	zero,-4(fp)
    fe9c:	00000506 	br	feb4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    fea0:	e0bfff17 	ldw	r2,-4(fp)
    fea4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    fea8:	e0bfff17 	ldw	r2,-4(fp)
    feac:	10800804 	addi	r2,r2,32
    feb0:	e0bfff15 	stw	r2,-4(fp)
    feb4:	e0bfff17 	ldw	r2,-4(fp)
    feb8:	10900030 	cmpltui	r2,r2,16384
    febc:	103ff81e 	bne	r2,zero,fea0 <__alt_data_end+0xff00fea0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    fec0:	0001883a 	nop
    fec4:	e037883a 	mov	sp,fp
    fec8:	df000017 	ldw	fp,0(sp)
    fecc:	dec00104 	addi	sp,sp,4
    fed0:	f800283a 	ret

0000fed4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fed4:	defffe04 	addi	sp,sp,-8
    fed8:	dfc00115 	stw	ra,4(sp)
    fedc:	df000015 	stw	fp,0(sp)
    fee0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fee4:	d0a00b17 	ldw	r2,-32724(gp)
    fee8:	10000326 	beq	r2,zero,fef8 <alt_get_errno+0x24>
    feec:	d0a00b17 	ldw	r2,-32724(gp)
    fef0:	103ee83a 	callr	r2
    fef4:	00000106 	br	fefc <alt_get_errno+0x28>
    fef8:	d0a6d804 	addi	r2,gp,-25760
}
    fefc:	e037883a 	mov	sp,fp
    ff00:	dfc00117 	ldw	ra,4(sp)
    ff04:	df000017 	ldw	fp,0(sp)
    ff08:	dec00204 	addi	sp,sp,8
    ff0c:	f800283a 	ret

0000ff10 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    ff10:	defffa04 	addi	sp,sp,-24
    ff14:	dfc00515 	stw	ra,20(sp)
    ff18:	df000415 	stw	fp,16(sp)
    ff1c:	df000404 	addi	fp,sp,16
    ff20:	e13ffe15 	stw	r4,-8(fp)
    ff24:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    ff28:	e0bffe17 	ldw	r2,-8(fp)
    ff2c:	10000326 	beq	r2,zero,ff3c <alt_dev_llist_insert+0x2c>
    ff30:	e0bffe17 	ldw	r2,-8(fp)
    ff34:	10800217 	ldw	r2,8(r2)
    ff38:	1000061e 	bne	r2,zero,ff54 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    ff3c:	000fed40 	call	fed4 <alt_get_errno>
    ff40:	1007883a 	mov	r3,r2
    ff44:	00800584 	movi	r2,22
    ff48:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    ff4c:	00bffa84 	movi	r2,-22
    ff50:	00001306 	br	ffa0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    ff54:	e0bffe17 	ldw	r2,-8(fp)
    ff58:	e0ffff17 	ldw	r3,-4(fp)
    ff5c:	e0fffc15 	stw	r3,-16(fp)
    ff60:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ff64:	e0bffd17 	ldw	r2,-12(fp)
    ff68:	e0fffc17 	ldw	r3,-16(fp)
    ff6c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ff70:	e0bffc17 	ldw	r2,-16(fp)
    ff74:	10c00017 	ldw	r3,0(r2)
    ff78:	e0bffd17 	ldw	r2,-12(fp)
    ff7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    ff80:	e0bffc17 	ldw	r2,-16(fp)
    ff84:	10800017 	ldw	r2,0(r2)
    ff88:	e0fffd17 	ldw	r3,-12(fp)
    ff8c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    ff90:	e0bffc17 	ldw	r2,-16(fp)
    ff94:	e0fffd17 	ldw	r3,-12(fp)
    ff98:	10c00015 	stw	r3,0(r2)

  return 0;  
    ff9c:	0005883a 	mov	r2,zero
}
    ffa0:	e037883a 	mov	sp,fp
    ffa4:	dfc00117 	ldw	ra,4(sp)
    ffa8:	df000017 	ldw	fp,0(sp)
    ffac:	dec00204 	addi	sp,sp,8
    ffb0:	f800283a 	ret

0000ffb4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    ffb4:	defffd04 	addi	sp,sp,-12
    ffb8:	dfc00215 	stw	ra,8(sp)
    ffbc:	df000115 	stw	fp,4(sp)
    ffc0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ffc4:	00800074 	movhi	r2,1
    ffc8:	1083e704 	addi	r2,r2,3996
    ffcc:	e0bfff15 	stw	r2,-4(fp)
    ffd0:	00000606 	br	ffec <_do_ctors+0x38>
        (*ctor) (); 
    ffd4:	e0bfff17 	ldw	r2,-4(fp)
    ffd8:	10800017 	ldw	r2,0(r2)
    ffdc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ffe0:	e0bfff17 	ldw	r2,-4(fp)
    ffe4:	10bfff04 	addi	r2,r2,-4
    ffe8:	e0bfff15 	stw	r2,-4(fp)
    ffec:	e0ffff17 	ldw	r3,-4(fp)
    fff0:	00800074 	movhi	r2,1
    fff4:	1083e804 	addi	r2,r2,4000
    fff8:	18bff62e 	bgeu	r3,r2,ffd4 <__alt_data_end+0xff00ffd4>
        (*ctor) (); 
}
    fffc:	0001883a 	nop
   10000:	e037883a 	mov	sp,fp
   10004:	dfc00117 	ldw	ra,4(sp)
   10008:	df000017 	ldw	fp,0(sp)
   1000c:	dec00204 	addi	sp,sp,8
   10010:	f800283a 	ret

00010014 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10014:	defffd04 	addi	sp,sp,-12
   10018:	dfc00215 	stw	ra,8(sp)
   1001c:	df000115 	stw	fp,4(sp)
   10020:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10024:	00800074 	movhi	r2,1
   10028:	1083e704 	addi	r2,r2,3996
   1002c:	e0bfff15 	stw	r2,-4(fp)
   10030:	00000606 	br	1004c <_do_dtors+0x38>
        (*dtor) (); 
   10034:	e0bfff17 	ldw	r2,-4(fp)
   10038:	10800017 	ldw	r2,0(r2)
   1003c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10040:	e0bfff17 	ldw	r2,-4(fp)
   10044:	10bfff04 	addi	r2,r2,-4
   10048:	e0bfff15 	stw	r2,-4(fp)
   1004c:	e0ffff17 	ldw	r3,-4(fp)
   10050:	00800074 	movhi	r2,1
   10054:	1083e804 	addi	r2,r2,4000
   10058:	18bff62e 	bgeu	r3,r2,10034 <__alt_data_end+0xff010034>
        (*dtor) (); 
}
   1005c:	0001883a 	nop
   10060:	e037883a 	mov	sp,fp
   10064:	dfc00117 	ldw	ra,4(sp)
   10068:	df000017 	ldw	fp,0(sp)
   1006c:	dec00204 	addi	sp,sp,8
   10070:	f800283a 	ret

00010074 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10074:	defffe04 	addi	sp,sp,-8
   10078:	dfc00115 	stw	ra,4(sp)
   1007c:	df000015 	stw	fp,0(sp)
   10080:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10084:	01500004 	movi	r5,16384
   10088:	0009883a 	mov	r4,zero
   1008c:	0010ae00 	call	10ae0 <alt_icache_flush>
#endif
}
   10090:	0001883a 	nop
   10094:	e037883a 	mov	sp,fp
   10098:	dfc00117 	ldw	ra,4(sp)
   1009c:	df000017 	ldw	fp,0(sp)
   100a0:	dec00204 	addi	sp,sp,8
   100a4:	f800283a 	ret

000100a8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   100a8:	defff904 	addi	sp,sp,-28
   100ac:	dfc00615 	stw	ra,24(sp)
   100b0:	df000515 	stw	fp,20(sp)
   100b4:	df000504 	addi	fp,sp,20
   100b8:	e13ffc15 	stw	r4,-16(fp)
   100bc:	e17ffd15 	stw	r5,-12(fp)
   100c0:	e1bffe15 	stw	r6,-8(fp)
   100c4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   100c8:	e0800217 	ldw	r2,8(fp)
   100cc:	d8800015 	stw	r2,0(sp)
   100d0:	e1ffff17 	ldw	r7,-4(fp)
   100d4:	e1bffe17 	ldw	r6,-8(fp)
   100d8:	e17ffd17 	ldw	r5,-12(fp)
   100dc:	e13ffc17 	ldw	r4,-16(fp)
   100e0:	00102580 	call	10258 <alt_iic_isr_register>
}  
   100e4:	e037883a 	mov	sp,fp
   100e8:	dfc00117 	ldw	ra,4(sp)
   100ec:	df000017 	ldw	fp,0(sp)
   100f0:	dec00204 	addi	sp,sp,8
   100f4:	f800283a 	ret

000100f8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   100f8:	defff904 	addi	sp,sp,-28
   100fc:	df000615 	stw	fp,24(sp)
   10100:	df000604 	addi	fp,sp,24
   10104:	e13ffe15 	stw	r4,-8(fp)
   10108:	e17fff15 	stw	r5,-4(fp)
   1010c:	e0bfff17 	ldw	r2,-4(fp)
   10110:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10114:	0005303a 	rdctl	r2,status
   10118:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	00bfff84 	movi	r2,-2
   10124:	1884703a 	and	r2,r3,r2
   10128:	1001703a 	wrctl	status,r2
  
  return context;
   1012c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10130:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10134:	00c00044 	movi	r3,1
   10138:	e0bffa17 	ldw	r2,-24(fp)
   1013c:	1884983a 	sll	r2,r3,r2
   10140:	1007883a 	mov	r3,r2
   10144:	d0a6e117 	ldw	r2,-25724(gp)
   10148:	1884b03a 	or	r2,r3,r2
   1014c:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10150:	d0a6e117 	ldw	r2,-25724(gp)
   10154:	100170fa 	wrctl	ienable,r2
   10158:	e0bffc17 	ldw	r2,-16(fp)
   1015c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10160:	e0bffd17 	ldw	r2,-12(fp)
   10164:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10168:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   1016c:	0001883a 	nop
}
   10170:	e037883a 	mov	sp,fp
   10174:	df000017 	ldw	fp,0(sp)
   10178:	dec00104 	addi	sp,sp,4
   1017c:	f800283a 	ret

00010180 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10180:	defff904 	addi	sp,sp,-28
   10184:	df000615 	stw	fp,24(sp)
   10188:	df000604 	addi	fp,sp,24
   1018c:	e13ffe15 	stw	r4,-8(fp)
   10190:	e17fff15 	stw	r5,-4(fp)
   10194:	e0bfff17 	ldw	r2,-4(fp)
   10198:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1019c:	0005303a 	rdctl	r2,status
   101a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   101a4:	e0fffb17 	ldw	r3,-20(fp)
   101a8:	00bfff84 	movi	r2,-2
   101ac:	1884703a 	and	r2,r3,r2
   101b0:	1001703a 	wrctl	status,r2
  
  return context;
   101b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   101b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   101bc:	00c00044 	movi	r3,1
   101c0:	e0bffa17 	ldw	r2,-24(fp)
   101c4:	1884983a 	sll	r2,r3,r2
   101c8:	0084303a 	nor	r2,zero,r2
   101cc:	1007883a 	mov	r3,r2
   101d0:	d0a6e117 	ldw	r2,-25724(gp)
   101d4:	1884703a 	and	r2,r3,r2
   101d8:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   101dc:	d0a6e117 	ldw	r2,-25724(gp)
   101e0:	100170fa 	wrctl	ienable,r2
   101e4:	e0bffc17 	ldw	r2,-16(fp)
   101e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   101ec:	e0bffd17 	ldw	r2,-12(fp)
   101f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   101f4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   101f8:	0001883a 	nop
}
   101fc:	e037883a 	mov	sp,fp
   10200:	df000017 	ldw	fp,0(sp)
   10204:	dec00104 	addi	sp,sp,4
   10208:	f800283a 	ret

0001020c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1020c:	defffc04 	addi	sp,sp,-16
   10210:	df000315 	stw	fp,12(sp)
   10214:	df000304 	addi	fp,sp,12
   10218:	e13ffe15 	stw	r4,-8(fp)
   1021c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10220:	000530fa 	rdctl	r2,ienable
   10224:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10228:	00c00044 	movi	r3,1
   1022c:	e0bfff17 	ldw	r2,-4(fp)
   10230:	1884983a 	sll	r2,r3,r2
   10234:	1007883a 	mov	r3,r2
   10238:	e0bffd17 	ldw	r2,-12(fp)
   1023c:	1884703a 	and	r2,r3,r2
   10240:	1004c03a 	cmpne	r2,r2,zero
   10244:	10803fcc 	andi	r2,r2,255
}
   10248:	e037883a 	mov	sp,fp
   1024c:	df000017 	ldw	fp,0(sp)
   10250:	dec00104 	addi	sp,sp,4
   10254:	f800283a 	ret

00010258 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10258:	defff504 	addi	sp,sp,-44
   1025c:	dfc00a15 	stw	ra,40(sp)
   10260:	df000915 	stw	fp,36(sp)
   10264:	df000904 	addi	fp,sp,36
   10268:	e13ffc15 	stw	r4,-16(fp)
   1026c:	e17ffd15 	stw	r5,-12(fp)
   10270:	e1bffe15 	stw	r6,-8(fp)
   10274:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10278:	00bffa84 	movi	r2,-22
   1027c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10280:	e0bffd17 	ldw	r2,-12(fp)
   10284:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10288:	e0bff817 	ldw	r2,-32(fp)
   1028c:	10800808 	cmpgei	r2,r2,32
   10290:	1000271e 	bne	r2,zero,10330 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10294:	0005303a 	rdctl	r2,status
   10298:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1029c:	e0fffb17 	ldw	r3,-20(fp)
   102a0:	00bfff84 	movi	r2,-2
   102a4:	1884703a 	and	r2,r3,r2
   102a8:	1001703a 	wrctl	status,r2
  
  return context;
   102ac:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   102b0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   102b4:	00800074 	movhi	r2,1
   102b8:	10936a04 	addi	r2,r2,19880
   102bc:	e0fff817 	ldw	r3,-32(fp)
   102c0:	180690fa 	slli	r3,r3,3
   102c4:	10c5883a 	add	r2,r2,r3
   102c8:	e0fffe17 	ldw	r3,-8(fp)
   102cc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   102d0:	00800074 	movhi	r2,1
   102d4:	10936a04 	addi	r2,r2,19880
   102d8:	e0fff817 	ldw	r3,-32(fp)
   102dc:	180690fa 	slli	r3,r3,3
   102e0:	10c5883a 	add	r2,r2,r3
   102e4:	10800104 	addi	r2,r2,4
   102e8:	e0ffff17 	ldw	r3,-4(fp)
   102ec:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   102f0:	e0bffe17 	ldw	r2,-8(fp)
   102f4:	10000526 	beq	r2,zero,1030c <alt_iic_isr_register+0xb4>
   102f8:	e0bff817 	ldw	r2,-32(fp)
   102fc:	100b883a 	mov	r5,r2
   10300:	e13ffc17 	ldw	r4,-16(fp)
   10304:	00100f80 	call	100f8 <alt_ic_irq_enable>
   10308:	00000406 	br	1031c <alt_iic_isr_register+0xc4>
   1030c:	e0bff817 	ldw	r2,-32(fp)
   10310:	100b883a 	mov	r5,r2
   10314:	e13ffc17 	ldw	r4,-16(fp)
   10318:	00101800 	call	10180 <alt_ic_irq_disable>
   1031c:	e0bff715 	stw	r2,-36(fp)
   10320:	e0bffa17 	ldw	r2,-24(fp)
   10324:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10328:	e0bff917 	ldw	r2,-28(fp)
   1032c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10330:	e0bff717 	ldw	r2,-36(fp)
}
   10334:	e037883a 	mov	sp,fp
   10338:	dfc00117 	ldw	ra,4(sp)
   1033c:	df000017 	ldw	fp,0(sp)
   10340:	dec00204 	addi	sp,sp,8
   10344:	f800283a 	ret

00010348 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10348:	defff904 	addi	sp,sp,-28
   1034c:	dfc00615 	stw	ra,24(sp)
   10350:	df000515 	stw	fp,20(sp)
   10354:	df000504 	addi	fp,sp,20
   10358:	e13ffc15 	stw	r4,-16(fp)
   1035c:	e17ffd15 	stw	r5,-12(fp)
   10360:	e1bffe15 	stw	r6,-8(fp)
   10364:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   10368:	e1bfff17 	ldw	r6,-4(fp)
   1036c:	e17ffe17 	ldw	r5,-8(fp)
   10370:	e13ffd17 	ldw	r4,-12(fp)
   10374:	00105880 	call	10588 <open>
   10378:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1037c:	e0bffb17 	ldw	r2,-20(fp)
   10380:	10001c16 	blt	r2,zero,103f4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   10384:	00800074 	movhi	r2,1
   10388:	10880304 	addi	r2,r2,8204
   1038c:	e0fffb17 	ldw	r3,-20(fp)
   10390:	18c00324 	muli	r3,r3,12
   10394:	10c5883a 	add	r2,r2,r3
   10398:	10c00017 	ldw	r3,0(r2)
   1039c:	e0bffc17 	ldw	r2,-16(fp)
   103a0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   103a4:	00800074 	movhi	r2,1
   103a8:	10880304 	addi	r2,r2,8204
   103ac:	e0fffb17 	ldw	r3,-20(fp)
   103b0:	18c00324 	muli	r3,r3,12
   103b4:	10c5883a 	add	r2,r2,r3
   103b8:	10800104 	addi	r2,r2,4
   103bc:	10c00017 	ldw	r3,0(r2)
   103c0:	e0bffc17 	ldw	r2,-16(fp)
   103c4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   103c8:	00800074 	movhi	r2,1
   103cc:	10880304 	addi	r2,r2,8204
   103d0:	e0fffb17 	ldw	r3,-20(fp)
   103d4:	18c00324 	muli	r3,r3,12
   103d8:	10c5883a 	add	r2,r2,r3
   103dc:	10800204 	addi	r2,r2,8
   103e0:	10c00017 	ldw	r3,0(r2)
   103e4:	e0bffc17 	ldw	r2,-16(fp)
   103e8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   103ec:	e13ffb17 	ldw	r4,-20(fp)
   103f0:	000ec340 	call	ec34 <alt_release_fd>
  }
} 
   103f4:	0001883a 	nop
   103f8:	e037883a 	mov	sp,fp
   103fc:	dfc00117 	ldw	ra,4(sp)
   10400:	df000017 	ldw	fp,0(sp)
   10404:	dec00204 	addi	sp,sp,8
   10408:	f800283a 	ret

0001040c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1040c:	defffb04 	addi	sp,sp,-20
   10410:	dfc00415 	stw	ra,16(sp)
   10414:	df000315 	stw	fp,12(sp)
   10418:	df000304 	addi	fp,sp,12
   1041c:	e13ffd15 	stw	r4,-12(fp)
   10420:	e17ffe15 	stw	r5,-8(fp)
   10424:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10428:	01c07fc4 	movi	r7,511
   1042c:	01800044 	movi	r6,1
   10430:	e17ffd17 	ldw	r5,-12(fp)
   10434:	01000074 	movhi	r4,1
   10438:	21080604 	addi	r4,r4,8216
   1043c:	00103480 	call	10348 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10440:	01c07fc4 	movi	r7,511
   10444:	000d883a 	mov	r6,zero
   10448:	e17ffe17 	ldw	r5,-8(fp)
   1044c:	01000074 	movhi	r4,1
   10450:	21080304 	addi	r4,r4,8204
   10454:	00103480 	call	10348 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10458:	01c07fc4 	movi	r7,511
   1045c:	01800044 	movi	r6,1
   10460:	e17fff17 	ldw	r5,-4(fp)
   10464:	01000074 	movhi	r4,1
   10468:	21080904 	addi	r4,r4,8228
   1046c:	00103480 	call	10348 <alt_open_fd>
}  
   10470:	0001883a 	nop
   10474:	e037883a 	mov	sp,fp
   10478:	dfc00117 	ldw	ra,4(sp)
   1047c:	df000017 	ldw	fp,0(sp)
   10480:	dec00204 	addi	sp,sp,8
   10484:	f800283a 	ret

00010488 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10488:	defffe04 	addi	sp,sp,-8
   1048c:	dfc00115 	stw	ra,4(sp)
   10490:	df000015 	stw	fp,0(sp)
   10494:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10498:	d0a00b17 	ldw	r2,-32724(gp)
   1049c:	10000326 	beq	r2,zero,104ac <alt_get_errno+0x24>
   104a0:	d0a00b17 	ldw	r2,-32724(gp)
   104a4:	103ee83a 	callr	r2
   104a8:	00000106 	br	104b0 <alt_get_errno+0x28>
   104ac:	d0a6d804 	addi	r2,gp,-25760
}
   104b0:	e037883a 	mov	sp,fp
   104b4:	dfc00117 	ldw	ra,4(sp)
   104b8:	df000017 	ldw	fp,0(sp)
   104bc:	dec00204 	addi	sp,sp,8
   104c0:	f800283a 	ret

000104c4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   104c4:	defffd04 	addi	sp,sp,-12
   104c8:	df000215 	stw	fp,8(sp)
   104cc:	df000204 	addi	fp,sp,8
   104d0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   104d4:	e0bfff17 	ldw	r2,-4(fp)
   104d8:	10800217 	ldw	r2,8(r2)
   104dc:	10d00034 	orhi	r3,r2,16384
   104e0:	e0bfff17 	ldw	r2,-4(fp)
   104e4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   104e8:	e03ffe15 	stw	zero,-8(fp)
   104ec:	00001d06 	br	10564 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   104f0:	00800074 	movhi	r2,1
   104f4:	10880304 	addi	r2,r2,8204
   104f8:	e0fffe17 	ldw	r3,-8(fp)
   104fc:	18c00324 	muli	r3,r3,12
   10500:	10c5883a 	add	r2,r2,r3
   10504:	10c00017 	ldw	r3,0(r2)
   10508:	e0bfff17 	ldw	r2,-4(fp)
   1050c:	10800017 	ldw	r2,0(r2)
   10510:	1880111e 	bne	r3,r2,10558 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10514:	00800074 	movhi	r2,1
   10518:	10880304 	addi	r2,r2,8204
   1051c:	e0fffe17 	ldw	r3,-8(fp)
   10520:	18c00324 	muli	r3,r3,12
   10524:	10c5883a 	add	r2,r2,r3
   10528:	10800204 	addi	r2,r2,8
   1052c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10530:	1000090e 	bge	r2,zero,10558 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   10534:	e0bffe17 	ldw	r2,-8(fp)
   10538:	10c00324 	muli	r3,r2,12
   1053c:	00800074 	movhi	r2,1
   10540:	10880304 	addi	r2,r2,8204
   10544:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10548:	e0bfff17 	ldw	r2,-4(fp)
   1054c:	18800226 	beq	r3,r2,10558 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10550:	00bffcc4 	movi	r2,-13
   10554:	00000806 	br	10578 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10558:	e0bffe17 	ldw	r2,-8(fp)
   1055c:	10800044 	addi	r2,r2,1
   10560:	e0bffe15 	stw	r2,-8(fp)
   10564:	d0a00a17 	ldw	r2,-32728(gp)
   10568:	1007883a 	mov	r3,r2
   1056c:	e0bffe17 	ldw	r2,-8(fp)
   10570:	18bfdf2e 	bgeu	r3,r2,104f0 <__alt_data_end+0xff0104f0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10574:	0005883a 	mov	r2,zero
}
   10578:	e037883a 	mov	sp,fp
   1057c:	df000017 	ldw	fp,0(sp)
   10580:	dec00104 	addi	sp,sp,4
   10584:	f800283a 	ret

00010588 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10588:	defff604 	addi	sp,sp,-40
   1058c:	dfc00915 	stw	ra,36(sp)
   10590:	df000815 	stw	fp,32(sp)
   10594:	df000804 	addi	fp,sp,32
   10598:	e13ffd15 	stw	r4,-12(fp)
   1059c:	e17ffe15 	stw	r5,-8(fp)
   105a0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   105a4:	00bfffc4 	movi	r2,-1
   105a8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   105ac:	00bffb44 	movi	r2,-19
   105b0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   105b4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   105b8:	d1600804 	addi	r5,gp,-32736
   105bc:	e13ffd17 	ldw	r4,-12(fp)
   105c0:	00108a40 	call	108a4 <alt_find_dev>
   105c4:	e0bff815 	stw	r2,-32(fp)
   105c8:	e0bff817 	ldw	r2,-32(fp)
   105cc:	1000051e 	bne	r2,zero,105e4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   105d0:	e13ffd17 	ldw	r4,-12(fp)
   105d4:	00109340 	call	10934 <alt_find_file>
   105d8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   105dc:	00800044 	movi	r2,1
   105e0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   105e4:	e0bff817 	ldw	r2,-32(fp)
   105e8:	10002926 	beq	r2,zero,10690 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   105ec:	e13ff817 	ldw	r4,-32(fp)
   105f0:	0010a3c0 	call	10a3c <alt_get_fd>
   105f4:	e0bff915 	stw	r2,-28(fp)
   105f8:	e0bff917 	ldw	r2,-28(fp)
   105fc:	1000030e 	bge	r2,zero,1060c <open+0x84>
    {
      status = index;
   10600:	e0bff917 	ldw	r2,-28(fp)
   10604:	e0bffa15 	stw	r2,-24(fp)
   10608:	00002306 	br	10698 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   1060c:	e0bff917 	ldw	r2,-28(fp)
   10610:	10c00324 	muli	r3,r2,12
   10614:	00800074 	movhi	r2,1
   10618:	10880304 	addi	r2,r2,8204
   1061c:	1885883a 	add	r2,r3,r2
   10620:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10624:	e0fffe17 	ldw	r3,-8(fp)
   10628:	00900034 	movhi	r2,16384
   1062c:	10bfffc4 	addi	r2,r2,-1
   10630:	1886703a 	and	r3,r3,r2
   10634:	e0bffc17 	ldw	r2,-16(fp)
   10638:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1063c:	e0bffb17 	ldw	r2,-20(fp)
   10640:	1000051e 	bne	r2,zero,10658 <open+0xd0>
   10644:	e13ffc17 	ldw	r4,-16(fp)
   10648:	00104c40 	call	104c4 <alt_file_locked>
   1064c:	e0bffa15 	stw	r2,-24(fp)
   10650:	e0bffa17 	ldw	r2,-24(fp)
   10654:	10001016 	blt	r2,zero,10698 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10658:	e0bff817 	ldw	r2,-32(fp)
   1065c:	10800317 	ldw	r2,12(r2)
   10660:	10000826 	beq	r2,zero,10684 <open+0xfc>
   10664:	e0bff817 	ldw	r2,-32(fp)
   10668:	10800317 	ldw	r2,12(r2)
   1066c:	e1ffff17 	ldw	r7,-4(fp)
   10670:	e1bffe17 	ldw	r6,-8(fp)
   10674:	e17ffd17 	ldw	r5,-12(fp)
   10678:	e13ffc17 	ldw	r4,-16(fp)
   1067c:	103ee83a 	callr	r2
   10680:	00000106 	br	10688 <open+0x100>
   10684:	0005883a 	mov	r2,zero
   10688:	e0bffa15 	stw	r2,-24(fp)
   1068c:	00000206 	br	10698 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10690:	00bffb44 	movi	r2,-19
   10694:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10698:	e0bffa17 	ldw	r2,-24(fp)
   1069c:	1000090e 	bge	r2,zero,106c4 <open+0x13c>
  {
    alt_release_fd (index);  
   106a0:	e13ff917 	ldw	r4,-28(fp)
   106a4:	000ec340 	call	ec34 <alt_release_fd>
    ALT_ERRNO = -status;
   106a8:	00104880 	call	10488 <alt_get_errno>
   106ac:	1007883a 	mov	r3,r2
   106b0:	e0bffa17 	ldw	r2,-24(fp)
   106b4:	0085c83a 	sub	r2,zero,r2
   106b8:	18800015 	stw	r2,0(r3)
    return -1;
   106bc:	00bfffc4 	movi	r2,-1
   106c0:	00000106 	br	106c8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   106c4:	e0bff917 	ldw	r2,-28(fp)
}
   106c8:	e037883a 	mov	sp,fp
   106cc:	dfc00117 	ldw	ra,4(sp)
   106d0:	df000017 	ldw	fp,0(sp)
   106d4:	dec00204 	addi	sp,sp,8
   106d8:	f800283a 	ret

000106dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   106dc:	defffa04 	addi	sp,sp,-24
   106e0:	df000515 	stw	fp,20(sp)
   106e4:	df000504 	addi	fp,sp,20
   106e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106ec:	0005303a 	rdctl	r2,status
   106f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106f4:	e0fffc17 	ldw	r3,-16(fp)
   106f8:	00bfff84 	movi	r2,-2
   106fc:	1884703a 	and	r2,r3,r2
   10700:	1001703a 	wrctl	status,r2
  
  return context;
   10704:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10708:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1070c:	e0bfff17 	ldw	r2,-4(fp)
   10710:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10714:	e0bffd17 	ldw	r2,-12(fp)
   10718:	10800017 	ldw	r2,0(r2)
   1071c:	e0fffd17 	ldw	r3,-12(fp)
   10720:	18c00117 	ldw	r3,4(r3)
   10724:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10728:	e0bffd17 	ldw	r2,-12(fp)
   1072c:	10800117 	ldw	r2,4(r2)
   10730:	e0fffd17 	ldw	r3,-12(fp)
   10734:	18c00017 	ldw	r3,0(r3)
   10738:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1073c:	e0bffd17 	ldw	r2,-12(fp)
   10740:	e0fffd17 	ldw	r3,-12(fp)
   10744:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   10748:	e0bffd17 	ldw	r2,-12(fp)
   1074c:	e0fffd17 	ldw	r3,-12(fp)
   10750:	10c00015 	stw	r3,0(r2)
   10754:	e0bffb17 	ldw	r2,-20(fp)
   10758:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1075c:	e0bffe17 	ldw	r2,-8(fp)
   10760:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10764:	0001883a 	nop
   10768:	e037883a 	mov	sp,fp
   1076c:	df000017 	ldw	fp,0(sp)
   10770:	dec00104 	addi	sp,sp,4
   10774:	f800283a 	ret

00010778 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10778:	defffb04 	addi	sp,sp,-20
   1077c:	dfc00415 	stw	ra,16(sp)
   10780:	df000315 	stw	fp,12(sp)
   10784:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10788:	d0a00e17 	ldw	r2,-32712(gp)
   1078c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10790:	d0a6e317 	ldw	r2,-25716(gp)
   10794:	10800044 	addi	r2,r2,1
   10798:	d0a6e315 	stw	r2,-25716(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1079c:	00002e06 	br	10858 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   107a0:	e0bffd17 	ldw	r2,-12(fp)
   107a4:	10800017 	ldw	r2,0(r2)
   107a8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   107ac:	e0bffd17 	ldw	r2,-12(fp)
   107b0:	10800403 	ldbu	r2,16(r2)
   107b4:	10803fcc 	andi	r2,r2,255
   107b8:	10000426 	beq	r2,zero,107cc <alt_tick+0x54>
   107bc:	d0a6e317 	ldw	r2,-25716(gp)
   107c0:	1000021e 	bne	r2,zero,107cc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   107c4:	e0bffd17 	ldw	r2,-12(fp)
   107c8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   107cc:	e0bffd17 	ldw	r2,-12(fp)
   107d0:	10800217 	ldw	r2,8(r2)
   107d4:	d0e6e317 	ldw	r3,-25716(gp)
   107d8:	18801d36 	bltu	r3,r2,10850 <alt_tick+0xd8>
   107dc:	e0bffd17 	ldw	r2,-12(fp)
   107e0:	10800403 	ldbu	r2,16(r2)
   107e4:	10803fcc 	andi	r2,r2,255
   107e8:	1000191e 	bne	r2,zero,10850 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   107ec:	e0bffd17 	ldw	r2,-12(fp)
   107f0:	10800317 	ldw	r2,12(r2)
   107f4:	e0fffd17 	ldw	r3,-12(fp)
   107f8:	18c00517 	ldw	r3,20(r3)
   107fc:	1809883a 	mov	r4,r3
   10800:	103ee83a 	callr	r2
   10804:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10808:	e0bfff17 	ldw	r2,-4(fp)
   1080c:	1000031e 	bne	r2,zero,1081c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   10810:	e13ffd17 	ldw	r4,-12(fp)
   10814:	00106dc0 	call	106dc <alt_alarm_stop>
   10818:	00000d06 	br	10850 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1081c:	e0bffd17 	ldw	r2,-12(fp)
   10820:	10c00217 	ldw	r3,8(r2)
   10824:	e0bfff17 	ldw	r2,-4(fp)
   10828:	1887883a 	add	r3,r3,r2
   1082c:	e0bffd17 	ldw	r2,-12(fp)
   10830:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10834:	e0bffd17 	ldw	r2,-12(fp)
   10838:	10c00217 	ldw	r3,8(r2)
   1083c:	d0a6e317 	ldw	r2,-25716(gp)
   10840:	1880032e 	bgeu	r3,r2,10850 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   10844:	e0bffd17 	ldw	r2,-12(fp)
   10848:	00c00044 	movi	r3,1
   1084c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   10850:	e0bffe17 	ldw	r2,-8(fp)
   10854:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10858:	e0fffd17 	ldw	r3,-12(fp)
   1085c:	d0a00e04 	addi	r2,gp,-32712
   10860:	18bfcf1e 	bne	r3,r2,107a0 <__alt_data_end+0xff0107a0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10864:	0001883a 	nop
}
   10868:	0001883a 	nop
   1086c:	e037883a 	mov	sp,fp
   10870:	dfc00117 	ldw	ra,4(sp)
   10874:	df000017 	ldw	fp,0(sp)
   10878:	dec00204 	addi	sp,sp,8
   1087c:	f800283a 	ret

00010880 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10880:	deffff04 	addi	sp,sp,-4
   10884:	df000015 	stw	fp,0(sp)
   10888:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1088c:	000170fa 	wrctl	ienable,zero
}
   10890:	0001883a 	nop
   10894:	e037883a 	mov	sp,fp
   10898:	df000017 	ldw	fp,0(sp)
   1089c:	dec00104 	addi	sp,sp,4
   108a0:	f800283a 	ret

000108a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   108a4:	defffa04 	addi	sp,sp,-24
   108a8:	dfc00515 	stw	ra,20(sp)
   108ac:	df000415 	stw	fp,16(sp)
   108b0:	df000404 	addi	fp,sp,16
   108b4:	e13ffe15 	stw	r4,-8(fp)
   108b8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   108bc:	e0bfff17 	ldw	r2,-4(fp)
   108c0:	10800017 	ldw	r2,0(r2)
   108c4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   108c8:	e13ffe17 	ldw	r4,-8(fp)
   108cc:	000276c0 	call	276c <strlen>
   108d0:	10800044 	addi	r2,r2,1
   108d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   108d8:	00000d06 	br	10910 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   108dc:	e0bffc17 	ldw	r2,-16(fp)
   108e0:	10800217 	ldw	r2,8(r2)
   108e4:	e0fffd17 	ldw	r3,-12(fp)
   108e8:	180d883a 	mov	r6,r3
   108ec:	e17ffe17 	ldw	r5,-8(fp)
   108f0:	1009883a 	mov	r4,r2
   108f4:	0010c580 	call	10c58 <memcmp>
   108f8:	1000021e 	bne	r2,zero,10904 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   108fc:	e0bffc17 	ldw	r2,-16(fp)
   10900:	00000706 	br	10920 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10904:	e0bffc17 	ldw	r2,-16(fp)
   10908:	10800017 	ldw	r2,0(r2)
   1090c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10910:	e0fffc17 	ldw	r3,-16(fp)
   10914:	e0bfff17 	ldw	r2,-4(fp)
   10918:	18bff01e 	bne	r3,r2,108dc <__alt_data_end+0xff0108dc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1091c:	0005883a 	mov	r2,zero
}
   10920:	e037883a 	mov	sp,fp
   10924:	dfc00117 	ldw	ra,4(sp)
   10928:	df000017 	ldw	fp,0(sp)
   1092c:	dec00204 	addi	sp,sp,8
   10930:	f800283a 	ret

00010934 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10934:	defffb04 	addi	sp,sp,-20
   10938:	dfc00415 	stw	ra,16(sp)
   1093c:	df000315 	stw	fp,12(sp)
   10940:	df000304 	addi	fp,sp,12
   10944:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10948:	d0a00617 	ldw	r2,-32744(gp)
   1094c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10950:	00003106 	br	10a18 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   10954:	e0bffd17 	ldw	r2,-12(fp)
   10958:	10800217 	ldw	r2,8(r2)
   1095c:	1009883a 	mov	r4,r2
   10960:	000276c0 	call	276c <strlen>
   10964:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10968:	e0bffd17 	ldw	r2,-12(fp)
   1096c:	10c00217 	ldw	r3,8(r2)
   10970:	e0bffe17 	ldw	r2,-8(fp)
   10974:	10bfffc4 	addi	r2,r2,-1
   10978:	1885883a 	add	r2,r3,r2
   1097c:	10800003 	ldbu	r2,0(r2)
   10980:	10803fcc 	andi	r2,r2,255
   10984:	1080201c 	xori	r2,r2,128
   10988:	10bfe004 	addi	r2,r2,-128
   1098c:	10800bd8 	cmpnei	r2,r2,47
   10990:	1000031e 	bne	r2,zero,109a0 <alt_find_file+0x6c>
    {
      len -= 1;
   10994:	e0bffe17 	ldw	r2,-8(fp)
   10998:	10bfffc4 	addi	r2,r2,-1
   1099c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   109a0:	e0bffe17 	ldw	r2,-8(fp)
   109a4:	e0ffff17 	ldw	r3,-4(fp)
   109a8:	1885883a 	add	r2,r3,r2
   109ac:	10800003 	ldbu	r2,0(r2)
   109b0:	10803fcc 	andi	r2,r2,255
   109b4:	1080201c 	xori	r2,r2,128
   109b8:	10bfe004 	addi	r2,r2,-128
   109bc:	10800be0 	cmpeqi	r2,r2,47
   109c0:	1000081e 	bne	r2,zero,109e4 <alt_find_file+0xb0>
   109c4:	e0bffe17 	ldw	r2,-8(fp)
   109c8:	e0ffff17 	ldw	r3,-4(fp)
   109cc:	1885883a 	add	r2,r3,r2
   109d0:	10800003 	ldbu	r2,0(r2)
   109d4:	10803fcc 	andi	r2,r2,255
   109d8:	1080201c 	xori	r2,r2,128
   109dc:	10bfe004 	addi	r2,r2,-128
   109e0:	10000a1e 	bne	r2,zero,10a0c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   109e4:	e0bffd17 	ldw	r2,-12(fp)
   109e8:	10800217 	ldw	r2,8(r2)
   109ec:	e0fffe17 	ldw	r3,-8(fp)
   109f0:	180d883a 	mov	r6,r3
   109f4:	e17fff17 	ldw	r5,-4(fp)
   109f8:	1009883a 	mov	r4,r2
   109fc:	0010c580 	call	10c58 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10a00:	1000021e 	bne	r2,zero,10a0c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10a04:	e0bffd17 	ldw	r2,-12(fp)
   10a08:	00000706 	br	10a28 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   10a0c:	e0bffd17 	ldw	r2,-12(fp)
   10a10:	10800017 	ldw	r2,0(r2)
   10a14:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10a18:	e0fffd17 	ldw	r3,-12(fp)
   10a1c:	d0a00604 	addi	r2,gp,-32744
   10a20:	18bfcc1e 	bne	r3,r2,10954 <__alt_data_end+0xff010954>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10a24:	0005883a 	mov	r2,zero
}
   10a28:	e037883a 	mov	sp,fp
   10a2c:	dfc00117 	ldw	ra,4(sp)
   10a30:	df000017 	ldw	fp,0(sp)
   10a34:	dec00204 	addi	sp,sp,8
   10a38:	f800283a 	ret

00010a3c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10a3c:	defffc04 	addi	sp,sp,-16
   10a40:	df000315 	stw	fp,12(sp)
   10a44:	df000304 	addi	fp,sp,12
   10a48:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10a4c:	00bffa04 	movi	r2,-24
   10a50:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10a54:	e03ffd15 	stw	zero,-12(fp)
   10a58:	00001906 	br	10ac0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   10a5c:	00800074 	movhi	r2,1
   10a60:	10880304 	addi	r2,r2,8204
   10a64:	e0fffd17 	ldw	r3,-12(fp)
   10a68:	18c00324 	muli	r3,r3,12
   10a6c:	10c5883a 	add	r2,r2,r3
   10a70:	10800017 	ldw	r2,0(r2)
   10a74:	10000f1e 	bne	r2,zero,10ab4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   10a78:	00800074 	movhi	r2,1
   10a7c:	10880304 	addi	r2,r2,8204
   10a80:	e0fffd17 	ldw	r3,-12(fp)
   10a84:	18c00324 	muli	r3,r3,12
   10a88:	10c5883a 	add	r2,r2,r3
   10a8c:	e0ffff17 	ldw	r3,-4(fp)
   10a90:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10a94:	d0e00a17 	ldw	r3,-32728(gp)
   10a98:	e0bffd17 	ldw	r2,-12(fp)
   10a9c:	1880020e 	bge	r3,r2,10aa8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   10aa0:	e0bffd17 	ldw	r2,-12(fp)
   10aa4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   10aa8:	e0bffd17 	ldw	r2,-12(fp)
   10aac:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   10ab0:	00000606 	br	10acc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10ab4:	e0bffd17 	ldw	r2,-12(fp)
   10ab8:	10800044 	addi	r2,r2,1
   10abc:	e0bffd15 	stw	r2,-12(fp)
   10ac0:	e0bffd17 	ldw	r2,-12(fp)
   10ac4:	10800810 	cmplti	r2,r2,32
   10ac8:	103fe41e 	bne	r2,zero,10a5c <__alt_data_end+0xff010a5c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10acc:	e0bffe17 	ldw	r2,-8(fp)
}
   10ad0:	e037883a 	mov	sp,fp
   10ad4:	df000017 	ldw	fp,0(sp)
   10ad8:	dec00104 	addi	sp,sp,4
   10adc:	f800283a 	ret

00010ae0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   10ae0:	defffb04 	addi	sp,sp,-20
   10ae4:	df000415 	stw	fp,16(sp)
   10ae8:	df000404 	addi	fp,sp,16
   10aec:	e13ffe15 	stw	r4,-8(fp)
   10af0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   10af4:	e0bfff17 	ldw	r2,-4(fp)
   10af8:	10900070 	cmpltui	r2,r2,16385
   10afc:	1000021e 	bne	r2,zero,10b08 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   10b00:	00900004 	movi	r2,16384
   10b04:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   10b08:	e0fffe17 	ldw	r3,-8(fp)
   10b0c:	e0bfff17 	ldw	r2,-4(fp)
   10b10:	1885883a 	add	r2,r3,r2
   10b14:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10b18:	e0bffe17 	ldw	r2,-8(fp)
   10b1c:	e0bffc15 	stw	r2,-16(fp)
   10b20:	00000506 	br	10b38 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10b24:	e0bffc17 	ldw	r2,-16(fp)
   10b28:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10b2c:	e0bffc17 	ldw	r2,-16(fp)
   10b30:	10800804 	addi	r2,r2,32
   10b34:	e0bffc15 	stw	r2,-16(fp)
   10b38:	e0fffc17 	ldw	r3,-16(fp)
   10b3c:	e0bffd17 	ldw	r2,-12(fp)
   10b40:	18bff836 	bltu	r3,r2,10b24 <__alt_data_end+0xff010b24>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10b44:	e0bffe17 	ldw	r2,-8(fp)
   10b48:	108007cc 	andi	r2,r2,31
   10b4c:	10000226 	beq	r2,zero,10b58 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10b50:	e0bffc17 	ldw	r2,-16(fp)
   10b54:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10b58:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10b5c:	0001883a 	nop
   10b60:	e037883a 	mov	sp,fp
   10b64:	df000017 	ldw	fp,0(sp)
   10b68:	dec00104 	addi	sp,sp,4
   10b6c:	f800283a 	ret

00010b70 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10b70:	defffe04 	addi	sp,sp,-8
   10b74:	df000115 	stw	fp,4(sp)
   10b78:	df000104 	addi	fp,sp,4
   10b7c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10b80:	e0bfff17 	ldw	r2,-4(fp)
   10b84:	10bffe84 	addi	r2,r2,-6
   10b88:	10c00428 	cmpgeui	r3,r2,16
   10b8c:	18001a1e 	bne	r3,zero,10bf8 <alt_exception_cause_generated_bad_addr+0x88>
   10b90:	100690ba 	slli	r3,r2,2
   10b94:	00800074 	movhi	r2,1
   10b98:	1082ea04 	addi	r2,r2,2984
   10b9c:	1885883a 	add	r2,r3,r2
   10ba0:	10800017 	ldw	r2,0(r2)
   10ba4:	1000683a 	jmp	r2
   10ba8:	00010be8 	cmpgeui	zero,zero,1071
   10bac:	00010be8 	cmpgeui	zero,zero,1071
   10bb0:	00010bf8 	rdprs	zero,zero,1071
   10bb4:	00010bf8 	rdprs	zero,zero,1071
   10bb8:	00010bf8 	rdprs	zero,zero,1071
   10bbc:	00010be8 	cmpgeui	zero,zero,1071
   10bc0:	00010bf0 	cmpltui	zero,zero,1071
   10bc4:	00010bf8 	rdprs	zero,zero,1071
   10bc8:	00010be8 	cmpgeui	zero,zero,1071
   10bcc:	00010be8 	cmpgeui	zero,zero,1071
   10bd0:	00010bf8 	rdprs	zero,zero,1071
   10bd4:	00010be8 	cmpgeui	zero,zero,1071
   10bd8:	00010bf0 	cmpltui	zero,zero,1071
   10bdc:	00010bf8 	rdprs	zero,zero,1071
   10be0:	00010bf8 	rdprs	zero,zero,1071
   10be4:	00010be8 	cmpgeui	zero,zero,1071
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10be8:	00800044 	movi	r2,1
   10bec:	00000306 	br	10bfc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10bf0:	0005883a 	mov	r2,zero
   10bf4:	00000106 	br	10bfc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10bf8:	0005883a 	mov	r2,zero
  }
}
   10bfc:	e037883a 	mov	sp,fp
   10c00:	df000017 	ldw	fp,0(sp)
   10c04:	dec00104 	addi	sp,sp,4
   10c08:	f800283a 	ret

00010c0c <atexit>:
   10c0c:	200b883a 	mov	r5,r4
   10c10:	000f883a 	mov	r7,zero
   10c14:	000d883a 	mov	r6,zero
   10c18:	0009883a 	mov	r4,zero
   10c1c:	0010cd41 	jmpi	10cd4 <__register_exitproc>

00010c20 <exit>:
   10c20:	defffe04 	addi	sp,sp,-8
   10c24:	000b883a 	mov	r5,zero
   10c28:	dc000015 	stw	r16,0(sp)
   10c2c:	dfc00115 	stw	ra,4(sp)
   10c30:	2021883a 	mov	r16,r4
   10c34:	0010dec0 	call	10dec <__call_exitprocs>
   10c38:	00800074 	movhi	r2,1
   10c3c:	108c7d04 	addi	r2,r2,12788
   10c40:	11000017 	ldw	r4,0(r2)
   10c44:	20800f17 	ldw	r2,60(r4)
   10c48:	10000126 	beq	r2,zero,10c50 <exit+0x30>
   10c4c:	103ee83a 	callr	r2
   10c50:	8009883a 	mov	r4,r16
   10c54:	0010f6c0 	call	10f6c <_exit>

00010c58 <memcmp>:
   10c58:	01c000c4 	movi	r7,3
   10c5c:	3980192e 	bgeu	r7,r6,10cc4 <memcmp+0x6c>
   10c60:	2144b03a 	or	r2,r4,r5
   10c64:	11c4703a 	and	r2,r2,r7
   10c68:	10000f26 	beq	r2,zero,10ca8 <memcmp+0x50>
   10c6c:	20800003 	ldbu	r2,0(r4)
   10c70:	28c00003 	ldbu	r3,0(r5)
   10c74:	10c0151e 	bne	r2,r3,10ccc <memcmp+0x74>
   10c78:	31bfff84 	addi	r6,r6,-2
   10c7c:	01ffffc4 	movi	r7,-1
   10c80:	00000406 	br	10c94 <memcmp+0x3c>
   10c84:	20800003 	ldbu	r2,0(r4)
   10c88:	28c00003 	ldbu	r3,0(r5)
   10c8c:	31bfffc4 	addi	r6,r6,-1
   10c90:	10c00e1e 	bne	r2,r3,10ccc <memcmp+0x74>
   10c94:	21000044 	addi	r4,r4,1
   10c98:	29400044 	addi	r5,r5,1
   10c9c:	31fff91e 	bne	r6,r7,10c84 <__alt_data_end+0xff010c84>
   10ca0:	0005883a 	mov	r2,zero
   10ca4:	f800283a 	ret
   10ca8:	20c00017 	ldw	r3,0(r4)
   10cac:	28800017 	ldw	r2,0(r5)
   10cb0:	18bfee1e 	bne	r3,r2,10c6c <__alt_data_end+0xff010c6c>
   10cb4:	31bfff04 	addi	r6,r6,-4
   10cb8:	21000104 	addi	r4,r4,4
   10cbc:	29400104 	addi	r5,r5,4
   10cc0:	39bff936 	bltu	r7,r6,10ca8 <__alt_data_end+0xff010ca8>
   10cc4:	303fe91e 	bne	r6,zero,10c6c <__alt_data_end+0xff010c6c>
   10cc8:	003ff506 	br	10ca0 <__alt_data_end+0xff010ca0>
   10ccc:	10c5c83a 	sub	r2,r2,r3
   10cd0:	f800283a 	ret

00010cd4 <__register_exitproc>:
   10cd4:	defffa04 	addi	sp,sp,-24
   10cd8:	dc000315 	stw	r16,12(sp)
   10cdc:	04000074 	movhi	r16,1
   10ce0:	840c7d04 	addi	r16,r16,12788
   10ce4:	80c00017 	ldw	r3,0(r16)
   10ce8:	dc400415 	stw	r17,16(sp)
   10cec:	dfc00515 	stw	ra,20(sp)
   10cf0:	18805217 	ldw	r2,328(r3)
   10cf4:	2023883a 	mov	r17,r4
   10cf8:	10003726 	beq	r2,zero,10dd8 <__register_exitproc+0x104>
   10cfc:	10c00117 	ldw	r3,4(r2)
   10d00:	010007c4 	movi	r4,31
   10d04:	20c00e16 	blt	r4,r3,10d40 <__register_exitproc+0x6c>
   10d08:	1a000044 	addi	r8,r3,1
   10d0c:	8800221e 	bne	r17,zero,10d98 <__register_exitproc+0xc4>
   10d10:	18c00084 	addi	r3,r3,2
   10d14:	18c7883a 	add	r3,r3,r3
   10d18:	18c7883a 	add	r3,r3,r3
   10d1c:	12000115 	stw	r8,4(r2)
   10d20:	10c7883a 	add	r3,r2,r3
   10d24:	19400015 	stw	r5,0(r3)
   10d28:	0005883a 	mov	r2,zero
   10d2c:	dfc00517 	ldw	ra,20(sp)
   10d30:	dc400417 	ldw	r17,16(sp)
   10d34:	dc000317 	ldw	r16,12(sp)
   10d38:	dec00604 	addi	sp,sp,24
   10d3c:	f800283a 	ret
   10d40:	00800034 	movhi	r2,0
   10d44:	10876904 	addi	r2,r2,7588
   10d48:	10002626 	beq	r2,zero,10de4 <__register_exitproc+0x110>
   10d4c:	01006404 	movi	r4,400
   10d50:	d9400015 	stw	r5,0(sp)
   10d54:	d9800115 	stw	r6,4(sp)
   10d58:	d9c00215 	stw	r7,8(sp)
   10d5c:	0001da40 	call	1da4 <malloc>
   10d60:	d9400017 	ldw	r5,0(sp)
   10d64:	d9800117 	ldw	r6,4(sp)
   10d68:	d9c00217 	ldw	r7,8(sp)
   10d6c:	10001d26 	beq	r2,zero,10de4 <__register_exitproc+0x110>
   10d70:	81000017 	ldw	r4,0(r16)
   10d74:	10000115 	stw	zero,4(r2)
   10d78:	02000044 	movi	r8,1
   10d7c:	22405217 	ldw	r9,328(r4)
   10d80:	0007883a 	mov	r3,zero
   10d84:	12400015 	stw	r9,0(r2)
   10d88:	20805215 	stw	r2,328(r4)
   10d8c:	10006215 	stw	zero,392(r2)
   10d90:	10006315 	stw	zero,396(r2)
   10d94:	883fde26 	beq	r17,zero,10d10 <__alt_data_end+0xff010d10>
   10d98:	18c9883a 	add	r4,r3,r3
   10d9c:	2109883a 	add	r4,r4,r4
   10da0:	1109883a 	add	r4,r2,r4
   10da4:	21802215 	stw	r6,136(r4)
   10da8:	01800044 	movi	r6,1
   10dac:	12406217 	ldw	r9,392(r2)
   10db0:	30cc983a 	sll	r6,r6,r3
   10db4:	4992b03a 	or	r9,r9,r6
   10db8:	12406215 	stw	r9,392(r2)
   10dbc:	21c04215 	stw	r7,264(r4)
   10dc0:	01000084 	movi	r4,2
   10dc4:	893fd21e 	bne	r17,r4,10d10 <__alt_data_end+0xff010d10>
   10dc8:	11006317 	ldw	r4,396(r2)
   10dcc:	218cb03a 	or	r6,r4,r6
   10dd0:	11806315 	stw	r6,396(r2)
   10dd4:	003fce06 	br	10d10 <__alt_data_end+0xff010d10>
   10dd8:	18805304 	addi	r2,r3,332
   10ddc:	18805215 	stw	r2,328(r3)
   10de0:	003fc606 	br	10cfc <__alt_data_end+0xff010cfc>
   10de4:	00bfffc4 	movi	r2,-1
   10de8:	003fd006 	br	10d2c <__alt_data_end+0xff010d2c>

00010dec <__call_exitprocs>:
   10dec:	defff504 	addi	sp,sp,-44
   10df0:	df000915 	stw	fp,36(sp)
   10df4:	dd400615 	stw	r21,24(sp)
   10df8:	dc800315 	stw	r18,12(sp)
   10dfc:	dfc00a15 	stw	ra,40(sp)
   10e00:	ddc00815 	stw	r23,32(sp)
   10e04:	dd800715 	stw	r22,28(sp)
   10e08:	dd000515 	stw	r20,20(sp)
   10e0c:	dcc00415 	stw	r19,16(sp)
   10e10:	dc400215 	stw	r17,8(sp)
   10e14:	dc000115 	stw	r16,4(sp)
   10e18:	d9000015 	stw	r4,0(sp)
   10e1c:	2839883a 	mov	fp,r5
   10e20:	04800044 	movi	r18,1
   10e24:	057fffc4 	movi	r21,-1
   10e28:	00800074 	movhi	r2,1
   10e2c:	108c7d04 	addi	r2,r2,12788
   10e30:	12000017 	ldw	r8,0(r2)
   10e34:	45005217 	ldw	r20,328(r8)
   10e38:	44c05204 	addi	r19,r8,328
   10e3c:	a0001c26 	beq	r20,zero,10eb0 <__call_exitprocs+0xc4>
   10e40:	a0800117 	ldw	r2,4(r20)
   10e44:	15ffffc4 	addi	r23,r2,-1
   10e48:	b8000d16 	blt	r23,zero,10e80 <__call_exitprocs+0x94>
   10e4c:	14000044 	addi	r16,r2,1
   10e50:	8421883a 	add	r16,r16,r16
   10e54:	8421883a 	add	r16,r16,r16
   10e58:	84402004 	addi	r17,r16,128
   10e5c:	a463883a 	add	r17,r20,r17
   10e60:	a421883a 	add	r16,r20,r16
   10e64:	e0001e26 	beq	fp,zero,10ee0 <__call_exitprocs+0xf4>
   10e68:	80804017 	ldw	r2,256(r16)
   10e6c:	e0801c26 	beq	fp,r2,10ee0 <__call_exitprocs+0xf4>
   10e70:	bdffffc4 	addi	r23,r23,-1
   10e74:	843fff04 	addi	r16,r16,-4
   10e78:	8c7fff04 	addi	r17,r17,-4
   10e7c:	bd7ff91e 	bne	r23,r21,10e64 <__alt_data_end+0xff010e64>
   10e80:	00800034 	movhi	r2,0
   10e84:	10876e04 	addi	r2,r2,7608
   10e88:	10000926 	beq	r2,zero,10eb0 <__call_exitprocs+0xc4>
   10e8c:	a0800117 	ldw	r2,4(r20)
   10e90:	1000301e 	bne	r2,zero,10f54 <__call_exitprocs+0x168>
   10e94:	a0800017 	ldw	r2,0(r20)
   10e98:	10003226 	beq	r2,zero,10f64 <__call_exitprocs+0x178>
   10e9c:	a009883a 	mov	r4,r20
   10ea0:	98800015 	stw	r2,0(r19)
   10ea4:	0001db80 	call	1db8 <free>
   10ea8:	9d000017 	ldw	r20,0(r19)
   10eac:	a03fe41e 	bne	r20,zero,10e40 <__alt_data_end+0xff010e40>
   10eb0:	dfc00a17 	ldw	ra,40(sp)
   10eb4:	df000917 	ldw	fp,36(sp)
   10eb8:	ddc00817 	ldw	r23,32(sp)
   10ebc:	dd800717 	ldw	r22,28(sp)
   10ec0:	dd400617 	ldw	r21,24(sp)
   10ec4:	dd000517 	ldw	r20,20(sp)
   10ec8:	dcc00417 	ldw	r19,16(sp)
   10ecc:	dc800317 	ldw	r18,12(sp)
   10ed0:	dc400217 	ldw	r17,8(sp)
   10ed4:	dc000117 	ldw	r16,4(sp)
   10ed8:	dec00b04 	addi	sp,sp,44
   10edc:	f800283a 	ret
   10ee0:	a0800117 	ldw	r2,4(r20)
   10ee4:	80c00017 	ldw	r3,0(r16)
   10ee8:	10bfffc4 	addi	r2,r2,-1
   10eec:	15c01426 	beq	r2,r23,10f40 <__call_exitprocs+0x154>
   10ef0:	80000015 	stw	zero,0(r16)
   10ef4:	183fde26 	beq	r3,zero,10e70 <__alt_data_end+0xff010e70>
   10ef8:	95c8983a 	sll	r4,r18,r23
   10efc:	a0806217 	ldw	r2,392(r20)
   10f00:	a5800117 	ldw	r22,4(r20)
   10f04:	2084703a 	and	r2,r4,r2
   10f08:	10000b26 	beq	r2,zero,10f38 <__call_exitprocs+0x14c>
   10f0c:	a0806317 	ldw	r2,396(r20)
   10f10:	2088703a 	and	r4,r4,r2
   10f14:	20000c1e 	bne	r4,zero,10f48 <__call_exitprocs+0x15c>
   10f18:	89400017 	ldw	r5,0(r17)
   10f1c:	d9000017 	ldw	r4,0(sp)
   10f20:	183ee83a 	callr	r3
   10f24:	a0800117 	ldw	r2,4(r20)
   10f28:	15bfbf1e 	bne	r2,r22,10e28 <__alt_data_end+0xff010e28>
   10f2c:	98800017 	ldw	r2,0(r19)
   10f30:	153fcf26 	beq	r2,r20,10e70 <__alt_data_end+0xff010e70>
   10f34:	003fbc06 	br	10e28 <__alt_data_end+0xff010e28>
   10f38:	183ee83a 	callr	r3
   10f3c:	003ff906 	br	10f24 <__alt_data_end+0xff010f24>
   10f40:	a5c00115 	stw	r23,4(r20)
   10f44:	003feb06 	br	10ef4 <__alt_data_end+0xff010ef4>
   10f48:	89000017 	ldw	r4,0(r17)
   10f4c:	183ee83a 	callr	r3
   10f50:	003ff406 	br	10f24 <__alt_data_end+0xff010f24>
   10f54:	a0800017 	ldw	r2,0(r20)
   10f58:	a027883a 	mov	r19,r20
   10f5c:	1029883a 	mov	r20,r2
   10f60:	003fb606 	br	10e3c <__alt_data_end+0xff010e3c>
   10f64:	0005883a 	mov	r2,zero
   10f68:	003ffb06 	br	10f58 <__alt_data_end+0xff010f58>

00010f6c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   10f6c:	defffd04 	addi	sp,sp,-12
   10f70:	df000215 	stw	fp,8(sp)
   10f74:	df000204 	addi	fp,sp,8
   10f78:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   10f7c:	0001883a 	nop
   10f80:	e0bfff17 	ldw	r2,-4(fp)
   10f84:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   10f88:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10f8c:	10000226 	beq	r2,zero,10f98 <_exit+0x2c>
    ALT_SIM_FAIL();
   10f90:	002af070 	cmpltui	zero,zero,43969
   10f94:	00000106 	br	10f9c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   10f98:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   10f9c:	003fff06 	br	10f9c <__alt_data_end+0xff010f9c>

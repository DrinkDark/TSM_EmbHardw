
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000117dc memsz 0x000117dc flags r-x
    LOAD off    0x000127fc vaddr 0x000117fc paddr 0x000132e8 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00014dd4 vaddr 0x00014dd4 paddr 0x00014dd4 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010e18  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007a0  0001105c  0001105c  0001205c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  000117fc  000132e8  000127fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00014dd4  00014dd4  00014dd4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00014f64  00014f64  000142e8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000142e8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f38  00000000  00000000  00014310  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000240d7  00000000  00000000  00015248  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009371  00000000  00000000  0003931f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b7d2  00000000  00000000  00042690  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002158  00000000  00000000  0004de64  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000038a0  00000000  00000000  0004ffbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000178c0  00000000  00000000  0005385c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0006b11c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d8  00000000  00000000  0006b180  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007045e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00070461  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007046d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007046e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007046f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00070473  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00070477  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007047b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00070484  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007048d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00070496  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000057  00000000  00000000  000704a1  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  000704f8  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00075e3e  00000000  00000000  00075fd0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0001105c l    d  .rodata	00000000 .rodata
000117fc l    d  .rwdata	00000000 .rwdata
00014dd4 l    d  .bss	00000000 .bss
00014f64 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/adrie/OneDrive/Documents/HES/Master/TSM_EmbHardw/Labo/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001154a l     O .rodata	00000010 zeroes.4404
00004c1c l     F .text	000000bc __sbprintf
0001155a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004e2c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000695c l     F .text	00000008 __fp_unlock
00006970 l     F .text	0000019c __sinit.part.1
00006b0c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00011c04 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00012048 l     O .rwdata	00000020 lc_ctype_charset
00012028 l     O .rwdata	00000020 lc_message_charset
00012068 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001158c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009560 l     F .text	000000fc __sprint_r.part.0
000116c0 l     O .rodata	00000010 blanks.4348
000116b0 l     O .rodata	00000010 zeroes.4349
0000aaec l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e5f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e700 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e72c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e818 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000e8f8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e9e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000ebb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000132d8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000ee34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000ef68 l     F .text	00000034 alt_dev_reg
00012248 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f274 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000f480 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000fab8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ff90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010404 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00010544 l     F .text	0000003c alt_get_errno
00010580 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00014e38 g     O .bss	00000004 alt_instruction_exception_handler
00008bf8 g     F .text	00000074 _mprec_log10
00001a68 g     F .text	00000214 sobel
00008ce4 g     F .text	0000008c __any_on
0000b088 g     F .text	00000054 _isatty_r
00011598 g     O .rodata	00000028 __mprec_tinytens
0000eaf4 g     F .text	0000007c alt_main
00002848 g     F .text	000000c0 _puts_r
00014e64 g     O .bss	00000100 alt_irq
0000b0dc g     F .text	00000060 _lseek_r
000114f6 g     O .rodata	00000009 gy_array
000132e8 g       *ABS*	00000000 __flash_rwdata_start
0000d120 g     F .text	00000088 .hidden __eqdf2
00014f64 g       *ABS*	00000000 __alt_heap_start
0000280c g     F .text	0000003c printf
0000b2f4 g     F .text	0000009c _wcrtomb_r
00009420 g     F .text	0000005c __sseek
00006cac g     F .text	00000010 __sinit
0000b19c g     F .text	00000140 __swbuf_r
00007774 g     F .text	0000007c _setlocale_r
00006b14 g     F .text	00000068 __sfmoreglue
0000eb94 g     F .text	00000024 __malloc_unlock
00000a10 g     F .text	00000014 LCD_Write_Command
00014de4 g     O .bss	00000004 sobel_width
00014e28 g     O .bss	00000004 altera_avalon_timer_ts_freq
00007af0 g     F .text	0000015c memmove
00000a24 g     F .text	00000014 LCD_Write_Data
00006c94 g     F .text	00000018 _cleanup
00007d74 g     F .text	000000a8 _Balloc
0000d1a8 g     F .text	000000dc .hidden __gtdf2
0001093c g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000005a8 g     F .text	00000024 cam_get_xsize
0000b02c g     F .text	0000005c _fstat_r
00014e08 g     O .bss	00000004 errno
0000939c g     F .text	00000008 __seofread
00014e1c g     O .bss	00000004 alt_argv
0001b2a8 g       *ABS*	00000000 _gp
0000ee04 g     F .text	00000030 usleep
00000668 g     F .text	00000074 cam_set_image_pointer
000120c8 g     O .rwdata	00000180 alt_fd_list
00001c8c g     F .text	00000010 vga_set_pointer
00010960 g     F .text	00000090 alt_find_dev
00002694 g     F .text	00000148 memcpy
00006964 g     F .text	0000000c _cleanup_r
0000e40c g     F .text	000000dc .hidden __floatsidf
000104c8 g     F .text	0000007c alt_io_redirect
0000d284 g     F .text	000000f4 .hidden __ltdf2
0001105c g       *ABS*	00000000 __DTOR_END__
00002908 g     F .text	00000014 puts
00010c2c g     F .text	0000009c alt_exception_cause_generated_bad_addr
000092d4 g     F .text	00000074 __fpclassifyd
00008b54 g     F .text	000000a4 __ratio
0000aad0 g     F .text	0000001c __vfiprintf_internal
0000f678 g     F .text	0000021c altera_avalon_jtag_uart_read
00001e60 g     F .text	00000014 malloc
000027dc g     F .text	00000030 _printf_r
00000864 g     F .text	00000008 get_grayscale_picture
00001da4 g     F .text	00000064 .hidden __udivsi3
000110bc g     O .rodata	00000128 lens_roll_off_tbl
00000290 g     F .text	00000318 init_camera
0000e854 g     F .text	000000a4 isatty
000115e8 g     O .rodata	000000c8 __mprec_tens
000077f0 g     F .text	0000000c __locale_charset
00010b9c g     F .text	00000090 alt_icache_flush
00014e04 g     O .bss	00000004 __malloc_top_pad
000132b8 g     O .rwdata	00000004 __mb_cur_max
00007820 g     F .text	0000000c _localeconv_r
000014d4 g     F .text	00000100 sobel_x
00008180 g     F .text	0000003c __i2b
00007130 g     F .text	000004bc __sfvwrite_r
00000a38 g     F .text	00000414 init_LCD
0000291c g     F .text	00000054 _sbrk_r
000005f0 g     F .text	00000078 cam_get_profiling
0000b13c g     F .text	00000060 _read_r
00014de8 g     O .bss	00000004 sobel_result
000132d0 g     O .rwdata	00000004 alt_max_fd
0000ad20 g     F .text	000000f0 _fclose_r
0000692c g     F .text	00000030 fflush
00014e00 g     O .bss	00000004 __malloc_max_sbrked_mem
00014ddc g     O .bss	00000004 grayscale_array
0000bf8c g     F .text	000008ac .hidden __adddf3
000005cc g     F .text	00000024 cam_get_ysize
000088fc g     F .text	0000010c __b2d
0000ba54 g     F .text	00000538 .hidden __umoddi3
0000ea20 g     F .text	000000d4 lseek
0000092c g     F .text	0000008c i2c_short_read
000132b0 g     O .rwdata	00000004 _global_impure_ptr
00008d70 g     F .text	00000564 _realloc_r
00014f64 g       *ABS*	00000000 __bss_end
00010314 g     F .text	000000f0 alt_iic_isr_register
00010834 g     F .text	00000108 alt_tick
0000b4dc g     F .text	00000578 .hidden __udivdi3
0000af88 g     F .text	00000024 _fputwc_r
000115c0 g     O .rodata	00000028 __mprec_bigtens
00007f64 g     F .text	00000104 __s2b
0000e4e8 g     F .text	000000a8 .hidden __floatunsidf
0000863c g     F .text	00000060 __mcmp
00006ccc g     F .text	00000018 __fp_lock_all
000102c8 g     F .text	0000004c alt_ic_irq_enabled
00014dd4 g     O .bss	00000004 grayscape_height
00010798 g     F .text	0000009c alt_alarm_stop
00014e2c g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
000120a0 g     O .rwdata	00000028 alt_dev_null
00000ed8 g     F .text	00000078 transfer_LCD_with_dma
0000ff48 g     F .text	00000048 alt_dcache_flush_all
00008068 g     F .text	00000068 __hi0bits
0000e38c g     F .text	00000080 .hidden __fixdfsi
000132e8 g       *ABS*	00000000 __ram_rwdata_end
000132c8 g     O .rwdata	00000008 alt_dev_list
0000ee70 g     F .text	000000f8 write
0000fca4 g     F .text	00000020 alt_timestamp_freq
000117fc g       *ABS*	00000000 __ram_rodata_end
0000e768 g     F .text	000000b0 fstat
0000d284 g     F .text	000000f4 .hidden __ledf2
000083b4 g     F .text	00000140 __pow5mult
00009674 g     F .text	0000145c ___vfiprintf_internal_r
00014e14 g     O .bss	00000004 __nlocale_changed
00001e08 g     F .text	00000058 .hidden __umodsi3
00001c7c g     F .text	00000008 GetSobel_rgb
00014f64 g       *ABS*	00000000 end
00001c84 g     F .text	00000008 GetSobelResult
00000700 g     F .text	00000020 take_picture_blocking
00000760 g     F .text	00000014 DIPSW_get_value
0000184c g     F .text	00000168 sobel_y_with_rgb
0000f1b4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006f0 g     F .text	00000010 current_image_pointer
0001105c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000fb30 g     F .text	0000007c alt_avalon_timer_sc_init
0000e590 g     F .text	00000064 .hidden __clzsi2
0000f894 g     F .text	00000224 altera_avalon_jtag_uart_write
00006cbc g     F .text	00000004 __sfp_lock_acquire
00007a0c g     F .text	000000e4 memchr
00002a08 g     F .text	000021f8 ___vfprintf_internal_r
00006e20 g     F .text	00000310 _free_r
000077fc g     F .text	00000010 __locale_mb_cur_max
00001750 g     F .text	000000fc sobel_y
000111e4 g     O .rodata	00000140 noise_reduction_reg_settings_array
00010ea8 g     F .text	00000180 __call_exitprocs
00014e10 g     O .bss	00000004 __mlocale_changed
000132a8 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00014e30 g     O .bss	00000004 _alt_tick_rate
000084f4 g     F .text	00000148 __lshift
00014e34 g     O .bss	00000004 _alt_nticks
0000ebf4 g     F .text	000000fc read
0000efd4 g     F .text	0000007c alt_sys_init
000015d4 g     F .text	0000017c sobel_x_with_rgb
00010d90 g     F .text	00000118 __register_exitproc
000081bc g     F .text	000001f8 __multiply
0000f520 g     F .text	00000068 altera_avalon_jtag_uart_close
000117fc g       *ABS*	00000000 __ram_rwdata_start
0001105c g       *ABS*	00000000 __ram_rodata_start
00014e3c g     O .bss	00000028 __malloc_current_mallinfo
00008a08 g     F .text	0000014c __d2b
00014dec g     O .bss	00000004 sobel_height
00000720 g     F .text	00000014 enable_continues_mode
0000f050 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001334 g     F .text	000000e4 init_sobel_arrays
00010af8 g     F .text	000000a4 alt_get_fd
0000fdf0 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000ac08 g     F .text	00000054 _close_r
00010d14 g     F .text	0000007c memcmp
0000f110 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00014f64 g       *ABS*	00000000 __alt_stack_base
0000f160 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00004cd8 g     F .text	00000154 __swsetup_r
0000c838 g     F .text	000008e8 .hidden __divdf3
00006b7c g     F .text	00000118 __sfp
00008c6c g     F .text	00000078 __copybits
000117fc g     O .rwdata	00000408 __malloc_av_
00006cc8 g     F .text	00000004 __sinit_lock_release
0000d378 g     F .text	00000718 .hidden __muldf3
00009348 g     F .text	00000054 __sread
000109f0 g     F .text	00000108 alt_find_file
0000ffcc g     F .text	000000a4 alt_dev_llist_insert
0000eb70 g     F .text	00000024 __malloc_lock
0000ed54 g     F .text	000000b0 sbrk
000068d0 g     F .text	0000005c _fflush_r
0000ac5c g     F .text	000000c4 _calloc_r
00014dd4 g       *ABS*	00000000 __bss_start
00007c4c g     F .text	00000128 memset
00000f50 g     F .text	000003e4 main
00014e20 g     O .bss	00000004 alt_envp
00014dfc g     O .bss	00000004 __malloc_max_total_mem
00000854 g     F .text	00000008 get_grayscale_width
0000f0b0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000b2dc g     F .text	00000018 __swbuf
00014df0 g     O .bss	00000004 sobel_x_result
0000947c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000ae10 g     F .text	00000014 fclose
0000fbac g     F .text	00000078 alt_timestamp_start
0000502c g     F .text	00001688 _dtoa_r
00001e88 g     F .text	0000080c _malloc_r
0000b450 g     F .text	00000030 __ascii_wctomb
000132d4 g     O .rwdata	00000004 alt_errno
000075ec g     F .text	000000c4 _fwalk
00001cac g     F .text	00000084 .hidden __divsi3
00006cfc g     F .text	00000124 _malloc_trim_r
0001105c g       *ABS*	00000000 __CTOR_END__
00014dd8 g     O .bss	00000004 grayscale_width
00009484 g     F .text	000000dc strcmp
00000e4c g     F .text	0000008c transfer_LCD_no_dma
0001105c g       *ABS*	00000000 __flash_rodata_start
0001105c g       *ABS*	00000000 __DTOR_LIST__
0000d120 g     F .text	00000088 .hidden __nedf2
00011324 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000ef9c g     F .text	00000038 alt_irq_init
0000ecf0 g     F .text	00000064 alt_release_fd
00000884 g     F .text	000000a8 i2c_auto_detect
000116d0 g     O .rodata	00000100 .hidden __clz_tab
000006dc g     F .text	00000014 current_image_valid
00014e0c g     O .bss	00000004 _PathLocale
0000086c g     F .text	00000018 i2c_busy_wait
00010cc8 g     F .text	00000014 atexit
0000aba8 g     F .text	00000060 _write_r
0000782c g     F .text	00000018 setlocale
000132b4 g     O .rwdata	00000004 _impure_ptr
00014e18 g     O .bss	00000004 alt_argc
000066b4 g     F .text	0000021c __sflush_r
00014e24 g     O .bss	00000004 altera_avalon_timer_ts_base
000100d0 g     F .text	00000060 _do_dtors
00007818 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00008898 g     F .text	00000064 __ulp
00006ce4 g     F .text	00000018 __fp_unlock_all
000132c0 g     O .rwdata	00000008 alt_fs_list
00014df4 g     O .bss	00000004 sobel_y_result
000009b8 g     F .text	00000058 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00014de0 g     O .bss	00000002 LCD_height
00007844 g     F .text	0000000c localeconv
0000fc24 g     F .text	00000080 alt_timestamp
00001c9c g     F .text	00000010 vga_set_swap
00010164 g     F .text	00000050 alt_ic_isr_register
000019b4 g     F .text	000000b4 sobel_threshold
000132e8 g       *ABS*	00000000 _edata
00014f64 g       *ABS*	00000000 _end
0000ae24 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000f588 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000114ff g     O .rodata	00000009 gx_array
0001023c g     F .text	0000008c alt_ic_irq_disable
000093a4 g     F .text	0000007c __swrite
000132ac g     O .rwdata	00000004 __malloc_trim_threshold
00014de2 g     O .bss	00000002 LCD_width
00000774 g     F .text	000000e0 conv_grayscale
0000780c g     F .text	0000000c __locale_msgcharset
00010cdc g     F .text	00000038 exit
000076b0 g     F .text	000000c4 _fwalk_reent
0000869c g     F .text	000001fc __mdiff
00001d30 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006cc0 g     F .text	00000004 __sfp_lock_release
0000085c g     F .text	00000008 get_grayscale_height
00011028 g     F .text	00000034 _exit
00001418 g     F .text	000000bc sobel_mac
0000fcc4 g     F .text	0000012c alt_alarm_start
00007850 g     F .text	000001bc __smakebuf_r
00014df8 g     O .bss	00000004 sobel_rgb565
00002970 g     F .text	00000098 strlen
00010644 g     F .text	00000154 open
0000d1a8 g     F .text	000000dc .hidden __gedf2
000132bc g     O .rwdata	00000004 __wctomb
0000965c g     F .text	00000018 __sprint_r
00010130 g     F .text	00000034 alt_icache_flush_all
000132dc g     O .rwdata	00000004 alt_priority_mask
000101b4 g     F .text	00000088 alt_ic_irq_enable
00004c00 g     F .text	0000001c __vfprintf_internal
0000b480 g     F .text	0000005c _wctomb_r
0000da90 g     F .text	000008fc .hidden __subdf3
000080d0 g     F .text	000000b0 __lo0bits
000132e0 g     O .rwdata	00000008 alt_alarm_list
00010070 g     F .text	00000060 _do_ctors
0000b390 g     F .text	000000c0 wcrtomb
0000e630 g     F .text	000000d0 close
0000e960 g     F .text	00000084 alt_load
0000afac g     F .text	00000080 fputwc
00001e74 g     F .text	00000014 free
00006cc4 g     F .text	00000004 __sinit_lock_acquire
00007e44 g     F .text	00000120 __multadd
00007e1c g     F .text	00000028 _Bfree
00000734 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00900014 	movui	r2,16384
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10939904 	addi	r2,r2,20068
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10939904 	addi	r2,r2,20068
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6e417 	ldw	r2,-25712(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6e417 	ldw	r2,-25712(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6acaa14 	ori	gp,gp,45736
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	10937514 	ori	r2,r2,19924

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18d3d914 	ori	r3,r3,20324

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000e9600 	call	e960 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000eaf40 	call	eaf4 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_data_end+0xff00028c>

00000290 <init_camera>:
     290:	00804034 	movhi	r2,256
     294:	10842744 	addi	r2,r2,4253
     298:	00c00084 	movi	r3,2
     29c:	10c00025 	stbio	r3,0(r2)
     2a0:	00804034 	movhi	r2,256
     2a4:	10841304 	addi	r2,r2,4172
     2a8:	00c00044 	movi	r3,1
     2ac:	10c00025 	stbio	r3,0(r2)
     2b0:	008003f4 	movhi	r2,15
     2b4:	10909004 	addi	r2,r2,16960
     2b8:	0001883a 	nop
     2bc:	10bfffc4 	addi	r2,r2,-1
     2c0:	103ffd1e 	bne	r2,zero,2b8 <__alt_data_end+0xff0002b8>
     2c4:	00804034 	movhi	r2,256
     2c8:	10841304 	addi	r2,r2,4172
     2cc:	10000025 	stbio	zero,0(r2)
     2d0:	008003f4 	movhi	r2,15
     2d4:	10909004 	addi	r2,r2,16960
     2d8:	0001883a 	nop
     2dc:	10bfffc4 	addi	r2,r2,-1
     2e0:	103ffd1e 	bne	r2,zero,2d8 <__alt_data_end+0xff0002d8>
     2e4:	defffc04 	addi	sp,sp,-16
     2e8:	01800044 	movi	r6,1
     2ec:	014ce184 	movi	r5,13190
     2f0:	01001e04 	movi	r4,120
     2f4:	dfc00315 	stw	ra,12(sp)
     2f8:	dc800215 	stw	r18,8(sp)
     2fc:	dc400115 	stw	r17,4(sp)
     300:	dc000015 	stw	r16,0(sp)
     304:	00009b80 	call	9b8 <i2c_short_write>
     308:	000d883a 	mov	r6,zero
     30c:	014ce184 	movi	r5,13190
     310:	01001e04 	movi	r4,120
     314:	00009b80 	call	9b8 <i2c_short_write>
     318:	008003f4 	movhi	r2,15
     31c:	10909004 	addi	r2,r2,16960
     320:	0001883a 	nop
     324:	10bfffc4 	addi	r2,r2,-1
     328:	103ffd1e 	bne	r2,zero,320 <__alt_data_end+0xff000320>
     32c:	01803104 	movi	r6,196
     330:	014c0684 	movi	r5,12314
     334:	01001e04 	movi	r4,120
     338:	00009b80 	call	9b8 <i2c_short_write>
     33c:	01800204 	movi	r6,8
     340:	014c8084 	movi	r5,12802
     344:	01001e04 	movi	r4,120
     348:	00009b80 	call	9b8 <i2c_short_write>
     34c:	0180c744 	movi	r6,797
     350:	014cfd04 	movi	r5,13300
     354:	01001e04 	movi	r4,120
     358:	00009b80 	call	9b8 <i2c_short_write>
     35c:	008000b4 	movhi	r2,2
     360:	10a1a804 	addi	r2,r2,-31072
     364:	0001883a 	nop
     368:	10bfffc4 	addi	r2,r2,-1
     36c:	103ffd1e 	bne	r2,zero,364 <__alt_data_end+0xff000364>
     370:	01a3c254 	movui	r6,36617
     374:	014d0784 	movi	r5,13342
     378:	01001e04 	movi	r4,120
     37c:	00009b80 	call	9b8 <i2c_short_write>
     380:	01805404 	movi	r6,336
     384:	014d0704 	movi	r5,13340
     388:	01001e04 	movi	r4,120
     38c:	00009b80 	call	9b8 <i2c_short_write>
     390:	01a3c254 	movui	r6,36617
     394:	014d0784 	movi	r5,13342
     398:	01001e04 	movi	r4,120
     39c:	00009b80 	call	9b8 <i2c_short_write>
     3a0:	008000b4 	movhi	r2,2
     3a4:	10a1a804 	addi	r2,r2,-31072
     3a8:	0001883a 	nop
     3ac:	10bfffc4 	addi	r2,r2,-1
     3b0:	103ffd1e 	bne	r2,zero,3a8 <__alt_data_end+0xff0003a8>
     3b4:	04000074 	movhi	r16,1
     3b8:	8404c904 	addi	r16,r16,4900
     3bc:	01a3c214 	movui	r6,36616
     3c0:	014d0784 	movi	r5,13342
     3c4:	01001e04 	movi	r4,120
     3c8:	00009b80 	call	9b8 <i2c_short_write>
     3cc:	84400084 	addi	r17,r16,2
     3d0:	84804604 	addi	r18,r16,280
     3d4:	8980000b 	ldhu	r6,0(r17)
     3d8:	8140000b 	ldhu	r5,0(r16)
     3dc:	01001e04 	movi	r4,120
     3e0:	84000104 	addi	r16,r16,4
     3e4:	00009b80 	call	9b8 <i2c_short_write>
     3e8:	8c400104 	addi	r17,r17,4
     3ec:	84bff91e 	bne	r16,r18,3d4 <__alt_data_end+0xff0003d4>
     3f0:	04000074 	movhi	r16,1
     3f4:	84047904 	addi	r16,r16,4580
     3f8:	84400084 	addi	r17,r16,2
     3fc:	84805004 	addi	r18,r16,320
     400:	8980000b 	ldhu	r6,0(r17)
     404:	8140000b 	ldhu	r5,0(r16)
     408:	01001e04 	movi	r4,120
     40c:	84000104 	addi	r16,r16,4
     410:	00009b80 	call	9b8 <i2c_short_write>
     414:	8c400104 	addi	r17,r17,4
     418:	943ff91e 	bne	r18,r16,400 <__alt_data_end+0xff000400>
     41c:	018164c4 	movi	r6,1427
     420:	014d6904 	movi	r5,13732
     424:	01001e04 	movi	r4,120
     428:	00009b80 	call	9b8 <i2c_short_write>
     42c:	0189e644 	movi	r6,10137
     430:	014ce304 	movi	r5,13196
     434:	01001e04 	movi	r4,120
     438:	00009b80 	call	9b8 <i2c_short_write>
     43c:	01991004 	movi	r6,25664
     440:	014ce404 	movi	r5,13200
     444:	01001e04 	movi	r4,120
     448:	00009b80 	call	9b8 <i2c_short_write>
     44c:	008000b4 	movhi	r2,2
     450:	10a1a804 	addi	r2,r2,-31072
     454:	0001883a 	nop
     458:	10bfffc4 	addi	r2,r2,-1
     45c:	103ffd1e 	bne	r2,zero,454 <__alt_data_end+0xff000454>
     460:	0189e6c4 	movi	r6,10139
     464:	014ce304 	movi	r5,13196
     468:	01001e04 	movi	r4,120
     46c:	00009b80 	call	9b8 <i2c_short_write>
     470:	01991004 	movi	r6,25664
     474:	014ce404 	movi	r5,13200
     478:	01001e04 	movi	r4,120
     47c:	00009b80 	call	9b8 <i2c_short_write>
     480:	008000b4 	movhi	r2,2
     484:	10a1a804 	addi	r2,r2,-31072
     488:	0001883a 	nop
     48c:	10bfffc4 	addi	r2,r2,-1
     490:	103ffd1e 	bne	r2,zero,488 <__alt_data_end+0xff000488>
     494:	01a840d4 	movui	r6,41219
     498:	014ce304 	movi	r5,13196
     49c:	01001e04 	movi	r4,120
     4a0:	00009b80 	call	9b8 <i2c_short_write>
     4a4:	01800144 	movi	r6,5
     4a8:	014ce404 	movi	r5,13200
     4ac:	01001e04 	movi	r4,120
     4b0:	00009b80 	call	9b8 <i2c_short_write>
     4b4:	008000b4 	movhi	r2,2
     4b8:	10a1a804 	addi	r2,r2,-31072
     4bc:	0001883a 	nop
     4c0:	10bfffc4 	addi	r2,r2,-1
     4c4:	103ffd1e 	bne	r2,zero,4bc <__alt_data_end+0xff0004bc>
     4c8:	01a840d4 	movui	r6,41219
     4cc:	014ce304 	movi	r5,13196
     4d0:	01001e04 	movi	r4,120
     4d4:	00009b80 	call	9b8 <i2c_short_write>
     4d8:	01800184 	movi	r6,6
     4dc:	014ce404 	movi	r5,13200
     4e0:	01001e04 	movi	r4,120
     4e4:	00009b80 	call	9b8 <i2c_short_write>
     4e8:	008000b4 	movhi	r2,2
     4ec:	10a1a804 	addi	r2,r2,-31072
     4f0:	0001883a 	nop
     4f4:	10bfffc4 	addi	r2,r2,-1
     4f8:	103ffd1e 	bne	r2,zero,4f0 <__alt_data_end+0xff0004f0>
     4fc:	04000074 	movhi	r16,1
     500:	84042f04 	addi	r16,r16,4284
     504:	84400084 	addi	r17,r16,2
     508:	84804a04 	addi	r18,r16,296
     50c:	8980000b 	ldhu	r6,0(r17)
     510:	8140000b 	ldhu	r5,0(r16)
     514:	01001e04 	movi	r4,120
     518:	84000104 	addi	r16,r16,4
     51c:	00009b80 	call	9b8 <i2c_short_write>
     520:	8c400104 	addi	r17,r17,4
     524:	943ff91e 	bne	r18,r16,50c <__alt_data_end+0xff00050c>
     528:	008003f4 	movhi	r2,15
     52c:	10909004 	addi	r2,r2,16960
     530:	0001883a 	nop
     534:	10bfffc4 	addi	r2,r2,-1
     538:	103ffd1e 	bne	r2,zero,530 <__alt_data_end+0xff000530>
     53c:	01800804 	movi	r6,32
     540:	014ccb84 	movi	r5,13102
     544:	01001e04 	movi	r4,120
     548:	00009b80 	call	9b8 <i2c_short_write>
     54c:	008003f4 	movhi	r2,15
     550:	10909004 	addi	r2,r2,16960
     554:	0001883a 	nop
     558:	10bfffc4 	addi	r2,r2,-1
     55c:	103ffd1e 	bne	r2,zero,554 <__alt_data_end+0xff000554>
     560:	01800884 	movi	r6,34
     564:	014d0104 	movi	r5,13316
     568:	01001e04 	movi	r4,120
     56c:	00009b80 	call	9b8 <i2c_short_write>
     570:	008003f4 	movhi	r2,15
     574:	10909004 	addi	r2,r2,16960
     578:	0001883a 	nop
     57c:	10bfffc4 	addi	r2,r2,-1
     580:	103ffd1e 	bne	r2,zero,578 <__alt_data_end+0xff000578>
     584:	018009c4 	movi	r6,39
     588:	014c1004 	movi	r5,12352
     58c:	01001e04 	movi	r4,120
     590:	dfc00317 	ldw	ra,12(sp)
     594:	dc800217 	ldw	r18,8(sp)
     598:	dc400117 	ldw	r17,4(sp)
     59c:	dc000017 	ldw	r16,0(sp)
     5a0:	dec00404 	addi	sp,sp,16
     5a4:	00009b81 	jmpi	9b8 <i2c_short_write>

000005a8 <cam_get_xsize>:
     5a8:	00c04034 	movhi	r3,256
     5ac:	18c41304 	addi	r3,r3,4172
     5b0:	18800023 	ldbuio	r2,0(r3)
     5b4:	1080010c 	andi	r2,r2,4
     5b8:	103ffd26 	beq	r2,zero,5b0 <__alt_data_end+0xff0005b0>
     5bc:	00804034 	movhi	r2,256
     5c0:	10841004 	addi	r2,r2,4160
     5c4:	1080002b 	ldhuio	r2,0(r2)
     5c8:	f800283a 	ret

000005cc <cam_get_ysize>:
     5cc:	00c04034 	movhi	r3,256
     5d0:	18c41304 	addi	r3,r3,4172
     5d4:	18800023 	ldbuio	r2,0(r3)
     5d8:	1080010c 	andi	r2,r2,4
     5dc:	103ffd26 	beq	r2,zero,5d4 <__alt_data_end+0xff0005d4>
     5e0:	00804034 	movhi	r2,256
     5e4:	10841104 	addi	r2,r2,4164
     5e8:	1080002b 	ldhuio	r2,0(r2)
     5ec:	f800283a 	ret

000005f0 <cam_get_profiling>:
     5f0:	00c04034 	movhi	r3,256
     5f4:	18c41304 	addi	r3,r3,4172
     5f8:	18800023 	ldbuio	r2,0(r3)
     5fc:	1080010c 	andi	r2,r2,4
     600:	103ffd26 	beq	r2,zero,5f8 <__alt_data_end+0xff0005f8>
     604:	00804034 	movhi	r2,256
     608:	deffff04 	addi	sp,sp,-4
     60c:	10841004 	addi	r2,r2,4160
     610:	dfc00015 	stw	ra,0(sp)
     614:	1140002b 	ldhuio	r5,0(r2)
     618:	01000074 	movhi	r4,1
     61c:	21041704 	addi	r4,r4,4188
     620:	297fffcc 	andi	r5,r5,65535
     624:	000280c0 	call	280c <printf>
     628:	00804034 	movhi	r2,256
     62c:	10841104 	addi	r2,r2,4164
     630:	1140002b 	ldhuio	r5,0(r2)
     634:	01000074 	movhi	r4,1
     638:	21041f04 	addi	r4,r4,4220
     63c:	297fffcc 	andi	r5,r5,65535
     640:	000280c0 	call	280c <printf>
     644:	00804034 	movhi	r2,256
     648:	10841204 	addi	r2,r2,4168
     64c:	1140002b 	ldhuio	r5,0(r2)
     650:	01000074 	movhi	r4,1
     654:	21042704 	addi	r4,r4,4252
     658:	297fffcc 	andi	r5,r5,65535
     65c:	dfc00017 	ldw	ra,0(sp)
     660:	dec00104 	addi	sp,sp,4
     664:	000280c1 	jmpi	280c <printf>

00000668 <cam_set_image_pointer>:
     668:	21003fcc 	andi	r4,r4,255
     66c:	2100201c 	xori	r4,r4,128
     670:	213fe004 	addi	r4,r4,-128
     674:	00800044 	movi	r2,1
     678:	20801226 	beq	r4,r2,6c4 <cam_set_image_pointer+0x5c>
     67c:	11000c0e 	bge	r2,r4,6b0 <cam_set_image_pointer+0x48>
     680:	00800084 	movi	r2,2
     684:	20800626 	beq	r4,r2,6a0 <cam_set_image_pointer+0x38>
     688:	008000c4 	movi	r2,3
     68c:	2080111e 	bne	r4,r2,6d4 <cam_set_image_pointer+0x6c>
     690:	00804034 	movhi	r2,256
     694:	10841704 	addi	r2,r2,4188
     698:	11400035 	stwio	r5,0(r2)
     69c:	f800283a 	ret
     6a0:	00804034 	movhi	r2,256
     6a4:	10841604 	addi	r2,r2,4184
     6a8:	11400035 	stwio	r5,0(r2)
     6ac:	f800283a 	ret
     6b0:	2000091e 	bne	r4,zero,6d8 <cam_set_image_pointer+0x70>
     6b4:	00804034 	movhi	r2,256
     6b8:	10841404 	addi	r2,r2,4176
     6bc:	11400035 	stwio	r5,0(r2)
     6c0:	f800283a 	ret
     6c4:	00804034 	movhi	r2,256
     6c8:	10841504 	addi	r2,r2,4180
     6cc:	11400035 	stwio	r5,0(r2)
     6d0:	f800283a 	ret
     6d4:	f800283a 	ret
     6d8:	f800283a 	ret

000006dc <current_image_valid>:
     6dc:	00804034 	movhi	r2,256
     6e0:	10841304 	addi	r2,r2,4172
     6e4:	1080002b 	ldhuio	r2,0(r2)
     6e8:	1080800c 	andi	r2,r2,512
     6ec:	f800283a 	ret

000006f0 <current_image_pointer>:
     6f0:	00804034 	movhi	r2,256
     6f4:	10841404 	addi	r2,r2,4176
     6f8:	10800037 	ldwio	r2,0(r2)
     6fc:	f800283a 	ret

00000700 <take_picture_blocking>:
     700:	00c04034 	movhi	r3,256
     704:	18c41304 	addi	r3,r3,4172
     708:	00800204 	movi	r2,8
     70c:	1880002d 	sthio	r2,0(r3)
     710:	1880002b 	ldhuio	r2,0(r3)
     714:	1080020c 	andi	r2,r2,8
     718:	103ffd1e 	bne	r2,zero,710 <__alt_data_end+0xff000710>
     71c:	f800283a 	ret

00000720 <enable_continues_mode>:
     720:	00804034 	movhi	r2,256
     724:	10841304 	addi	r2,r2,4172
     728:	00c00404 	movi	r3,16
     72c:	10c0002d 	sthio	r3,0(r2)
     730:	f800283a 	ret

00000734 <new_image_available>:
     734:	00c04034 	movhi	r3,256
     738:	18c41304 	addi	r3,r3,4172
     73c:	1880002b 	ldhuio	r2,0(r3)
     740:	1080200c 	andi	r2,r2,128
     744:	1000021e 	bne	r2,zero,750 <new_image_available+0x1c>
     748:	0005883a 	mov	r2,zero
     74c:	f800283a 	ret
     750:	00804004 	movi	r2,256
     754:	1880002d 	sthio	r2,0(r3)
     758:	00800044 	movi	r2,1
     75c:	f800283a 	ret

00000760 <DIPSW_get_value>:
     760:	00804034 	movhi	r2,256
     764:	10842804 	addi	r2,r2,4256
     768:	10800023 	ldbuio	r2,0(r2)
     76c:	0084303a 	nor	r2,zero,r2
     770:	f800283a 	ret

00000774 <conv_grayscale>:
     774:	d0a6cd17 	ldw	r2,-25804(gp)
     778:	defffc04 	addi	sp,sp,-16
     77c:	dc800215 	stw	r18,8(sp)
     780:	dc400115 	stw	r17,4(sp)
     784:	dc000015 	stw	r16,0(sp)
     788:	dfc00315 	stw	ra,12(sp)
     78c:	d166cc15 	stw	r5,-25808(gp)
     790:	d1a6cb15 	stw	r6,-25812(gp)
     794:	2821883a 	mov	r16,r5
     798:	3023883a 	mov	r17,r6
     79c:	2025883a 	mov	r18,r4
     7a0:	10000226 	beq	r2,zero,7ac <conv_grayscale+0x38>
     7a4:	1009883a 	mov	r4,r2
     7a8:	0001e740 	call	1e74 <free>
     7ac:	8449383a 	mul	r4,r16,r17
     7b0:	0001e600 	call	1e60 <malloc>
     7b4:	d0a6cd15 	stw	r2,-25804(gp)
     7b8:	0440200e 	bge	zero,r17,83c <conv_grayscale+0xc8>
     7bc:	840d883a 	add	r6,r16,r16
     7c0:	9009883a 	mov	r4,r18
     7c4:	8017883a 	mov	r11,r16
     7c8:	000b883a 	mov	r5,zero
     7cc:	0400170e 	bge	zero,r16,82c <conv_grayscale+0xb8>
     7d0:	5c13c83a 	sub	r9,r11,r16
     7d4:	2015883a 	mov	r10,r4
     7d8:	5080000b 	ldhu	r2,0(r10)
     7dc:	100ed17a 	srli	r7,r2,5
     7e0:	1010d2fa 	srli	r8,r2,11
     7e4:	100690fa 	slli	r3,r2,3
     7e8:	39cf883a 	add	r7,r7,r7
     7ec:	400490fa 	slli	r2,r8,3
     7f0:	39cf883a 	add	r7,r7,r7
     7f4:	39c03fcc 	andi	r7,r7,255
     7f8:	39c01724 	muli	r7,r7,92
     7fc:	108006e4 	muli	r2,r2,27
     800:	18c03fcc 	andi	r3,r3,255
     804:	18c00264 	muli	r3,r3,9
     808:	3885883a 	add	r2,r7,r2
     80c:	d1e6cd17 	ldw	r7,-25804(gp)
     810:	10c5883a 	add	r2,r2,r3
     814:	1005d1fa 	srai	r2,r2,7
     818:	3a4f883a 	add	r7,r7,r9
     81c:	38800025 	stbio	r2,0(r7)
     820:	4a400044 	addi	r9,r9,1
     824:	52800084 	addi	r10,r10,2
     828:	5a7feb1e 	bne	r11,r9,7d8 <__alt_data_end+0xff0007d8>
     82c:	29400044 	addi	r5,r5,1
     830:	2189883a 	add	r4,r4,r6
     834:	5c17883a 	add	r11,r11,r16
     838:	897fe41e 	bne	r17,r5,7cc <__alt_data_end+0xff0007cc>
     83c:	dfc00317 	ldw	ra,12(sp)
     840:	dc800217 	ldw	r18,8(sp)
     844:	dc400117 	ldw	r17,4(sp)
     848:	dc000017 	ldw	r16,0(sp)
     84c:	dec00404 	addi	sp,sp,16
     850:	f800283a 	ret

00000854 <get_grayscale_width>:
     854:	d0a6cc17 	ldw	r2,-25808(gp)
     858:	f800283a 	ret

0000085c <get_grayscale_height>:
     85c:	d0a6cb17 	ldw	r2,-25812(gp)
     860:	f800283a 	ret

00000864 <get_grayscale_picture>:
     864:	d0a6cd17 	ldw	r2,-25804(gp)
     868:	f800283a 	ret

0000086c <i2c_busy_wait>:
     86c:	00c04034 	movhi	r3,256
     870:	18c42704 	addi	r3,r3,4252
     874:	18800037 	ldwio	r2,0(r3)
     878:	108000cc 	andi	r2,r2,3
     87c:	103ffd1e 	bne	r2,zero,874 <__alt_data_end+0xff000874>
     880:	f800283a 	ret

00000884 <i2c_auto_detect>:
     884:	01004034 	movhi	r4,256
     888:	21042704 	addi	r4,r4,4252
     88c:	00c04034 	movhi	r3,256
     890:	18c42704 	addi	r3,r3,4252
     894:	20800037 	ldwio	r2,0(r4)
     898:	108000cc 	andi	r2,r2,3
     89c:	103ffb1e 	bne	r2,zero,88c <__alt_data_end+0xff00088c>
     8a0:	00800104 	movi	r2,4
     8a4:	18800035 	stwio	r2,0(r3)
     8a8:	18800037 	ldwio	r2,0(r3)
     8ac:	108000cc 	andi	r2,r2,3
     8b0:	103ffd1e 	bne	r2,zero,8a8 <__alt_data_end+0xff0008a8>
     8b4:	00804034 	movhi	r2,256
     8b8:	defffc04 	addi	sp,sp,-16
     8bc:	10842504 	addi	r2,r2,4244
     8c0:	dfc00315 	stw	ra,12(sp)
     8c4:	dc800215 	stw	r18,8(sp)
     8c8:	dc400115 	stw	r17,4(sp)
     8cc:	dc000015 	stw	r16,0(sp)
     8d0:	14800037 	ldwio	r18,0(r2)
     8d4:	01000074 	movhi	r4,1
     8d8:	21050f04 	addi	r4,r4,5180
     8dc:	900b883a 	mov	r5,r18
     8e0:	0021883a 	mov	r16,zero
     8e4:	000280c0 	call	280c <printf>
     8e8:	04800a0e 	bge	zero,r18,914 <i2c_auto_detect+0x90>
     8ec:	04404034 	movhi	r17,256
     8f0:	8c442404 	addi	r17,r17,4240
     8f4:	8c000035 	stwio	r16,0(r17)
     8f8:	89800037 	ldwio	r6,0(r17)
     8fc:	01000074 	movhi	r4,1
     900:	800b883a 	mov	r5,r16
     904:	21051804 	addi	r4,r4,5216
     908:	84000044 	addi	r16,r16,1
     90c:	000280c0 	call	280c <printf>
     910:	943ff81e 	bne	r18,r16,8f4 <__alt_data_end+0xff0008f4>
     914:	dfc00317 	ldw	ra,12(sp)
     918:	dc800217 	ldw	r18,8(sp)
     91c:	dc400117 	ldw	r17,4(sp)
     920:	dc000017 	ldw	r16,0(sp)
     924:	dec00404 	addi	sp,sp,16
     928:	f800283a 	ret

0000092c <i2c_short_read>:
     92c:	01804034 	movhi	r6,256
     930:	31842704 	addi	r6,r6,4252
     934:	00c04034 	movhi	r3,256
     938:	18c42704 	addi	r3,r3,4252
     93c:	30800037 	ldwio	r2,0(r6)
     940:	108000cc 	andi	r2,r2,3
     944:	103ffb1e 	bne	r2,zero,934 <__alt_data_end+0xff000934>
     948:	00804034 	movhi	r2,256
     94c:	21003fcc 	andi	r4,r4,255
     950:	10842404 	addi	r2,r2,4240
     954:	11000025 	stbio	r4,0(r2)
     958:	00804034 	movhi	r2,256
     95c:	10842504 	addi	r2,r2,4244
     960:	1140002d 	sthio	r5,0(r2)
     964:	008010c4 	movi	r2,67
     968:	18800025 	stbio	r2,0(r3)
     96c:	180b883a 	mov	r5,r3
     970:	00c04034 	movhi	r3,256
     974:	18c42704 	addi	r3,r3,4252
     978:	28800037 	ldwio	r2,0(r5)
     97c:	108000cc 	andi	r2,r2,3
     980:	103ffb1e 	bne	r2,zero,970 <__alt_data_end+0xff000970>
     984:	00804034 	movhi	r2,256
     988:	21000044 	addi	r4,r4,1
     98c:	10842404 	addi	r2,r2,4240
     990:	11000025 	stbio	r4,0(r2)
     994:	00800884 	movi	r2,34
     998:	18800025 	stbio	r2,0(r3)
     99c:	18800037 	ldwio	r2,0(r3)
     9a0:	108000cc 	andi	r2,r2,3
     9a4:	103ffd1e 	bne	r2,zero,99c <__alt_data_end+0xff00099c>
     9a8:	00804034 	movhi	r2,256
     9ac:	10842604 	addi	r2,r2,4248
     9b0:	10800037 	ldwio	r2,0(r2)
     9b4:	f800283a 	ret

000009b8 <i2c_short_write>:
     9b8:	01c04034 	movhi	r7,256
     9bc:	39c42704 	addi	r7,r7,4252
     9c0:	00c04034 	movhi	r3,256
     9c4:	18c42704 	addi	r3,r3,4252
     9c8:	38800037 	ldwio	r2,0(r7)
     9cc:	108000cc 	andi	r2,r2,3
     9d0:	103ffb1e 	bne	r2,zero,9c0 <__alt_data_end+0xff0009c0>
     9d4:	00804034 	movhi	r2,256
     9d8:	10842404 	addi	r2,r2,4240
     9dc:	11000025 	stbio	r4,0(r2)
     9e0:	00804034 	movhi	r2,256
     9e4:	10842504 	addi	r2,r2,4244
     9e8:	1140002d 	sthio	r5,0(r2)
     9ec:	00804034 	movhi	r2,256
     9f0:	10842604 	addi	r2,r2,4248
     9f4:	1180002d 	sthio	r6,0(r2)
     9f8:	00801084 	movi	r2,66
     9fc:	18800025 	stbio	r2,0(r3)
     a00:	18800037 	ldwio	r2,0(r3)
     a04:	108000cc 	andi	r2,r2,3
     a08:	103ffd1e 	bne	r2,zero,a00 <__alt_data_end+0xff000a00>
     a0c:	f800283a 	ret

00000a10 <LCD_Write_Command>:
     a10:	00804034 	movhi	r2,256
     a14:	10841804 	addi	r2,r2,4192
     a18:	1100002d 	sthio	r4,0(r2)
     a1c:	01000284 	movi	r4,10
     a20:	000ee041 	jmpi	ee04 <usleep>

00000a24 <LCD_Write_Data>:
     a24:	00804034 	movhi	r2,256
     a28:	10841904 	addi	r2,r2,4196
     a2c:	1100002d 	sthio	r4,0(r2)
     a30:	01000284 	movi	r4,10
     a34:	000ee041 	jmpi	ee04 <usleep>

00000a38 <init_LCD>:
     a38:	defff704 	addi	sp,sp,-36
     a3c:	00804034 	movhi	r2,256
     a40:	dd400515 	stw	r21,20(sp)
     a44:	dfc00815 	stw	ra,32(sp)
     a48:	ddc00715 	stw	r23,28(sp)
     a4c:	dd800615 	stw	r22,24(sp)
     a50:	dd000415 	stw	r20,16(sp)
     a54:	dcc00315 	stw	r19,12(sp)
     a58:	dc800215 	stw	r18,8(sp)
     a5c:	dc400115 	stw	r17,4(sp)
     a60:	dc000015 	stw	r16,0(sp)
     a64:	05400084 	movi	r21,2
     a68:	10841a04 	addi	r2,r2,4200
     a6c:	1540002d 	sthio	r21,0(r2)
     a70:	04804034 	movhi	r18,256
     a74:	94841804 	addi	r18,r18,4192
     a78:	00800a04 	movi	r2,40
     a7c:	9080002d 	sthio	r2,0(r18)
     a80:	04000284 	movi	r16,10
     a84:	8009883a 	mov	r4,r16
     a88:	000ee040 	call	ee04 <usleep>
     a8c:	05c00444 	movi	r23,17
     a90:	95c0002d 	sthio	r23,0(r18)
     a94:	8009883a 	mov	r4,r16
     a98:	04404034 	movhi	r17,256
     a9c:	8c441904 	addi	r17,r17,4196
     aa0:	000ee040 	call	ee04 <usleep>
     aa4:	0027883a 	mov	r19,zero
     aa8:	8cc0002d 	sthio	r19,0(r17)
     aac:	8009883a 	mov	r4,r16
     ab0:	000ee040 	call	ee04 <usleep>
     ab4:	008032c4 	movi	r2,203
     ab8:	9080002d 	sthio	r2,0(r18)
     abc:	8009883a 	mov	r4,r16
     ac0:	000ee040 	call	ee04 <usleep>
     ac4:	00800e44 	movi	r2,57
     ac8:	8880002d 	sthio	r2,0(r17)
     acc:	8009883a 	mov	r4,r16
     ad0:	000ee040 	call	ee04 <usleep>
     ad4:	00800b04 	movi	r2,44
     ad8:	8880002d 	sthio	r2,0(r17)
     adc:	8009883a 	mov	r4,r16
     ae0:	000ee040 	call	ee04 <usleep>
     ae4:	8cc0002d 	sthio	r19,0(r17)
     ae8:	8009883a 	mov	r4,r16
     aec:	000ee040 	call	ee04 <usleep>
     af0:	00800d04 	movi	r2,52
     af4:	8880002d 	sthio	r2,0(r17)
     af8:	8009883a 	mov	r4,r16
     afc:	000ee040 	call	ee04 <usleep>
     b00:	8d40002d 	sthio	r21,0(r17)
     b04:	8009883a 	mov	r4,r16
     b08:	000ee040 	call	ee04 <usleep>
     b0c:	008033c4 	movi	r2,207
     b10:	9080002d 	sthio	r2,0(r18)
     b14:	8009883a 	mov	r4,r16
     b18:	000ee040 	call	ee04 <usleep>
     b1c:	8cc0002d 	sthio	r19,0(r17)
     b20:	8009883a 	mov	r4,r16
     b24:	000ee040 	call	ee04 <usleep>
     b28:	05802044 	movi	r22,129
     b2c:	8d80002d 	sthio	r22,0(r17)
     b30:	8009883a 	mov	r4,r16
     b34:	000ee040 	call	ee04 <usleep>
     b38:	00800c04 	movi	r2,48
     b3c:	8880002d 	sthio	r2,0(r17)
     b40:	8009883a 	mov	r4,r16
     b44:	000ee040 	call	ee04 <usleep>
     b48:	00803a04 	movi	r2,232
     b4c:	9080002d 	sthio	r2,0(r18)
     b50:	8009883a 	mov	r4,r16
     b54:	000ee040 	call	ee04 <usleep>
     b58:	00802144 	movi	r2,133
     b5c:	8880002d 	sthio	r2,0(r17)
     b60:	8009883a 	mov	r4,r16
     b64:	000ee040 	call	ee04 <usleep>
     b68:	05000044 	movi	r20,1
     b6c:	8d00002d 	sthio	r20,0(r17)
     b70:	8009883a 	mov	r4,r16
     b74:	000ee040 	call	ee04 <usleep>
     b78:	00801e44 	movi	r2,121
     b7c:	8880002d 	sthio	r2,0(r17)
     b80:	8009883a 	mov	r4,r16
     b84:	000ee040 	call	ee04 <usleep>
     b88:	00803a84 	movi	r2,234
     b8c:	9080002d 	sthio	r2,0(r18)
     b90:	8009883a 	mov	r4,r16
     b94:	000ee040 	call	ee04 <usleep>
     b98:	8cc0002d 	sthio	r19,0(r17)
     b9c:	8009883a 	mov	r4,r16
     ba0:	000ee040 	call	ee04 <usleep>
     ba4:	8cc0002d 	sthio	r19,0(r17)
     ba8:	8009883a 	mov	r4,r16
     bac:	000ee040 	call	ee04 <usleep>
     bb0:	00801904 	movi	r2,100
     bb4:	8880002d 	sthio	r2,0(r17)
     bb8:	8009883a 	mov	r4,r16
     bbc:	000ee040 	call	ee04 <usleep>
     bc0:	008000c4 	movi	r2,3
     bc4:	8880002d 	sthio	r2,0(r17)
     bc8:	8009883a 	mov	r4,r16
     bcc:	000ee040 	call	ee04 <usleep>
     bd0:	00800484 	movi	r2,18
     bd4:	8880002d 	sthio	r2,0(r17)
     bd8:	8009883a 	mov	r4,r16
     bdc:	000ee040 	call	ee04 <usleep>
     be0:	8d80002d 	sthio	r22,0(r17)
     be4:	8009883a 	mov	r4,r16
     be8:	000ee040 	call	ee04 <usleep>
     bec:	00803dc4 	movi	r2,247
     bf0:	9080002d 	sthio	r2,0(r18)
     bf4:	8009883a 	mov	r4,r16
     bf8:	000ee040 	call	ee04 <usleep>
     bfc:	00800804 	movi	r2,32
     c00:	8880002d 	sthio	r2,0(r17)
     c04:	8009883a 	mov	r4,r16
     c08:	000ee040 	call	ee04 <usleep>
     c0c:	00803004 	movi	r2,192
     c10:	9080002d 	sthio	r2,0(r18)
     c14:	8009883a 	mov	r4,r16
     c18:	000ee040 	call	ee04 <usleep>
     c1c:	05800984 	movi	r22,38
     c20:	8d80002d 	sthio	r22,0(r17)
     c24:	8009883a 	mov	r4,r16
     c28:	000ee040 	call	ee04 <usleep>
     c2c:	00800104 	movi	r2,4
     c30:	8880002d 	sthio	r2,0(r17)
     c34:	8009883a 	mov	r4,r16
     c38:	000ee040 	call	ee04 <usleep>
     c3c:	00803044 	movi	r2,193
     c40:	9080002d 	sthio	r2,0(r18)
     c44:	8009883a 	mov	r4,r16
     c48:	000ee040 	call	ee04 <usleep>
     c4c:	8dc0002d 	sthio	r23,0(r17)
     c50:	8009883a 	mov	r4,r16
     c54:	000ee040 	call	ee04 <usleep>
     c58:	00803144 	movi	r2,197
     c5c:	9080002d 	sthio	r2,0(r18)
     c60:	8009883a 	mov	r4,r16
     c64:	000ee040 	call	ee04 <usleep>
     c68:	00800d44 	movi	r2,53
     c6c:	8880002d 	sthio	r2,0(r17)
     c70:	8009883a 	mov	r4,r16
     c74:	000ee040 	call	ee04 <usleep>
     c78:	00800f84 	movi	r2,62
     c7c:	8880002d 	sthio	r2,0(r17)
     c80:	8009883a 	mov	r4,r16
     c84:	000ee040 	call	ee04 <usleep>
     c88:	008031c4 	movi	r2,199
     c8c:	9080002d 	sthio	r2,0(r18)
     c90:	8009883a 	mov	r4,r16
     c94:	000ee040 	call	ee04 <usleep>
     c98:	00802f84 	movi	r2,190
     c9c:	8880002d 	sthio	r2,0(r17)
     ca0:	8009883a 	mov	r4,r16
     ca4:	000ee040 	call	ee04 <usleep>
     ca8:	00802c44 	movi	r2,177
     cac:	9080002d 	sthio	r2,0(r18)
     cb0:	8009883a 	mov	r4,r16
     cb4:	000ee040 	call	ee04 <usleep>
     cb8:	8cc0002d 	sthio	r19,0(r17)
     cbc:	8009883a 	mov	r4,r16
     cc0:	000ee040 	call	ee04 <usleep>
     cc4:	00800404 	movi	r2,16
     cc8:	8880002d 	sthio	r2,0(r17)
     ccc:	8009883a 	mov	r4,r16
     cd0:	000ee040 	call	ee04 <usleep>
     cd4:	00800e84 	movi	r2,58
     cd8:	9080002d 	sthio	r2,0(r18)
     cdc:	8009883a 	mov	r4,r16
     ce0:	000ee040 	call	ee04 <usleep>
     ce4:	00801544 	movi	r2,85
     ce8:	8880002d 	sthio	r2,0(r17)
     cec:	8009883a 	mov	r4,r16
     cf0:	000ee040 	call	ee04 <usleep>
     cf4:	00802d84 	movi	r2,182
     cf8:	9080002d 	sthio	r2,0(r18)
     cfc:	8009883a 	mov	r4,r16
     d00:	000ee040 	call	ee04 <usleep>
     d04:	8c00002d 	sthio	r16,0(r17)
     d08:	8009883a 	mov	r4,r16
     d0c:	000ee040 	call	ee04 <usleep>
     d10:	00802884 	movi	r2,162
     d14:	8880002d 	sthio	r2,0(r17)
     d18:	8009883a 	mov	r4,r16
     d1c:	000ee040 	call	ee04 <usleep>
     d20:	00803c84 	movi	r2,242
     d24:	9080002d 	sthio	r2,0(r18)
     d28:	8009883a 	mov	r4,r16
     d2c:	000ee040 	call	ee04 <usleep>
     d30:	8d40002d 	sthio	r21,0(r17)
     d34:	8009883a 	mov	r4,r16
     d38:	000ee040 	call	ee04 <usleep>
     d3c:	9580002d 	sthio	r22,0(r18)
     d40:	8009883a 	mov	r4,r16
     d44:	000ee040 	call	ee04 <usleep>
     d48:	8d00002d 	sthio	r20,0(r17)
     d4c:	8009883a 	mov	r4,r16
     d50:	000ee040 	call	ee04 <usleep>
     d54:	00800d84 	movi	r2,54
     d58:	9080002d 	sthio	r2,0(r18)
     d5c:	8009883a 	mov	r4,r16
     d60:	000ee040 	call	ee04 <usleep>
     d64:	8cc0002d 	sthio	r19,0(r17)
     d68:	8009883a 	mov	r4,r16
     d6c:	000ee040 	call	ee04 <usleep>
     d70:	00800a84 	movi	r2,42
     d74:	9080002d 	sthio	r2,0(r18)
     d78:	8009883a 	mov	r4,r16
     d7c:	000ee040 	call	ee04 <usleep>
     d80:	8cc0002d 	sthio	r19,0(r17)
     d84:	8009883a 	mov	r4,r16
     d88:	000ee040 	call	ee04 <usleep>
     d8c:	8cc0002d 	sthio	r19,0(r17)
     d90:	8009883a 	mov	r4,r16
     d94:	000ee040 	call	ee04 <usleep>
     d98:	8cc0002d 	sthio	r19,0(r17)
     d9c:	8009883a 	mov	r4,r16
     da0:	000ee040 	call	ee04 <usleep>
     da4:	00803bc4 	movi	r2,239
     da8:	8880002d 	sthio	r2,0(r17)
     dac:	8009883a 	mov	r4,r16
     db0:	000ee040 	call	ee04 <usleep>
     db4:	00800ac4 	movi	r2,43
     db8:	9080002d 	sthio	r2,0(r18)
     dbc:	8009883a 	mov	r4,r16
     dc0:	000ee040 	call	ee04 <usleep>
     dc4:	8cc0002d 	sthio	r19,0(r17)
     dc8:	8009883a 	mov	r4,r16
     dcc:	000ee040 	call	ee04 <usleep>
     dd0:	8cc0002d 	sthio	r19,0(r17)
     dd4:	8009883a 	mov	r4,r16
     dd8:	000ee040 	call	ee04 <usleep>
     ddc:	8d00002d 	sthio	r20,0(r17)
     de0:	8009883a 	mov	r4,r16
     de4:	000ee040 	call	ee04 <usleep>
     de8:	00800fc4 	movi	r2,63
     dec:	8880002d 	sthio	r2,0(r17)
     df0:	8009883a 	mov	r4,r16
     df4:	000ee040 	call	ee04 <usleep>
     df8:	00c04034 	movhi	r3,256
     dfc:	00803c04 	movi	r2,240
     e00:	18c41d04 	addi	r3,r3,4212
     e04:	18800035 	stwio	r2,0(r3)
     e08:	d0a6ce8d 	sth	r2,-25798(gp)
     e0c:	00805004 	movi	r2,320
     e10:	d0a6ce0d 	sth	r2,-25800(gp)
     e14:	00800a44 	movi	r2,41
     e18:	9080002d 	sthio	r2,0(r18)
     e1c:	8009883a 	mov	r4,r16
     e20:	dfc00817 	ldw	ra,32(sp)
     e24:	ddc00717 	ldw	r23,28(sp)
     e28:	dd800617 	ldw	r22,24(sp)
     e2c:	dd400517 	ldw	r21,20(sp)
     e30:	dd000417 	ldw	r20,16(sp)
     e34:	dcc00317 	ldw	r19,12(sp)
     e38:	dc800217 	ldw	r18,8(sp)
     e3c:	dc400117 	ldw	r17,4(sp)
     e40:	dc000017 	ldw	r16,0(sp)
     e44:	dec00904 	addi	sp,sp,36
     e48:	000ee041 	jmpi	ee04 <usleep>

00000e4c <transfer_LCD_no_dma>:
     e4c:	defffb04 	addi	sp,sp,-20
     e50:	00804034 	movhi	r2,256
     e54:	dc000015 	stw	r16,0(sp)
     e58:	dfc00415 	stw	ra,16(sp)
     e5c:	dcc00315 	stw	r19,12(sp)
     e60:	dc800215 	stw	r18,8(sp)
     e64:	dc400115 	stw	r17,4(sp)
     e68:	2021883a 	mov	r16,r4
     e6c:	10841e04 	addi	r2,r2,4216
     e70:	11400035 	stwio	r5,0(r2)
     e74:	00804034 	movhi	r2,256
     e78:	10841804 	addi	r2,r2,4192
     e7c:	00c00b04 	movi	r3,44
     e80:	10c0002d 	sthio	r3,0(r2)
     e84:	29a5383a 	mul	r18,r5,r6
     e88:	01000284 	movi	r4,10
     e8c:	000ee040 	call	ee04 <usleep>
     e90:	90000a26 	beq	r18,zero,ebc <transfer_LCD_no_dma+0x70>
     e94:	04c04034 	movhi	r19,256
     e98:	9cc41904 	addi	r19,r19,4196
     e9c:	0023883a 	mov	r17,zero
     ea0:	8080000b 	ldhu	r2,0(r16)
     ea4:	9880002d 	sthio	r2,0(r19)
     ea8:	01000284 	movi	r4,10
     eac:	8c400044 	addi	r17,r17,1
     eb0:	000ee040 	call	ee04 <usleep>
     eb4:	84000084 	addi	r16,r16,2
     eb8:	8cbff91e 	bne	r17,r18,ea0 <__alt_data_end+0xff000ea0>
     ebc:	dfc00417 	ldw	ra,16(sp)
     ec0:	dcc00317 	ldw	r19,12(sp)
     ec4:	dc800217 	ldw	r18,8(sp)
     ec8:	dc400117 	ldw	r17,4(sp)
     ecc:	dc000017 	ldw	r16,0(sp)
     ed0:	dec00504 	addi	sp,sp,20
     ed4:	f800283a 	ret

00000ed8 <transfer_LCD_with_dma>:
     ed8:	d0a6ce0b 	ldhu	r2,-25800(gp)
     edc:	3080010e 	bge	r6,r2,ee4 <transfer_LCD_with_dma+0xc>
     ee0:	3005883a 	mov	r2,r6
     ee4:	d0e6ce8b 	ldhu	r3,-25798(gp)
     ee8:	28c0010e 	bge	r5,r3,ef0 <transfer_LCD_with_dma+0x18>
     eec:	2807883a 	mov	r3,r5
     ef0:	01804034 	movhi	r6,256
     ef4:	31841e04 	addi	r6,r6,4216
     ef8:	31400035 	stwio	r5,0(r6)
     efc:	01404034 	movhi	r5,256
     f00:	29441b04 	addi	r5,r5,4204
     f04:	29000035 	stwio	r4,0(r5)
     f08:	18ffffcc 	andi	r3,r3,65535
     f0c:	10bfffcc 	andi	r2,r2,65535
     f10:	1885383a 	mul	r2,r3,r2
     f14:	00c04034 	movhi	r3,256
     f18:	18c41c04 	addi	r3,r3,4208
     f1c:	18800035 	stwio	r2,0(r3)
     f20:	39c03fcc 	andi	r7,r7,255
     f24:	39c0201c 	xori	r7,r7,128
     f28:	00804034 	movhi	r2,256
     f2c:	39ffe004 	addi	r7,r7,-128
     f30:	10841a04 	addi	r2,r2,4200
     f34:	38000326 	beq	r7,zero,f44 <transfer_LCD_with_dma+0x6c>
     f38:	00c04404 	movi	r3,272
     f3c:	10c0002d 	sthio	r3,0(r2)
     f40:	f800283a 	ret
     f44:	00c04004 	movi	r3,256
     f48:	10c0002d 	sthio	r3,0(r2)
     f4c:	f800283a 	ret

00000f50 <main>:
     f50:	defff804 	addi	sp,sp,-32
     f54:	dfc00715 	stw	ra,28(sp)
     f58:	dd400515 	stw	r21,20(sp)
     f5c:	dd000415 	stw	r20,16(sp)
     f60:	dcc00315 	stw	r19,12(sp)
     f64:	dc800215 	stw	r18,8(sp)
     f68:	dc400115 	stw	r17,4(sp)
     f6c:	dc000015 	stw	r16,0(sp)
     f70:	dd800615 	stw	r22,24(sp)
     f74:	0000a380 	call	a38 <init_LCD>
     f78:	00002900 	call	290 <init_camera>
     f7c:	01000604 	movi	r4,24
     f80:	0001c9c0 	call	1c9c <vga_set_swap>
     f84:	000fbac0 	call	fbac <alt_timestamp_start>
     f88:	01000074 	movhi	r4,1
     f8c:	21052104 	addi	r4,r4,5252
     f90:	00029080 	call	2908 <puts>
     f94:	00005f00 	call	5f0 <cam_get_profiling>
     f98:	00005a80 	call	5a8 <cam_get_xsize>
     f9c:	1021883a 	mov	r16,r2
     fa0:	00005cc0 	call	5cc <cam_get_ysize>
     fa4:	10bfffcc 	andi	r2,r2,65535
     fa8:	813fffcc 	andi	r4,r16,65535
     fac:	2089383a 	mul	r4,r4,r2
     fb0:	04800044 	movi	r18,1
     fb4:	04e04414 	movui	r19,33040
     fb8:	0001e600 	call	1e60 <malloc>
     fbc:	102b883a 	mov	r21,r2
     fc0:	00005a80 	call	5a8 <cam_get_xsize>
     fc4:	1021883a 	mov	r16,r2
     fc8:	00005cc0 	call	5cc <cam_get_ysize>
     fcc:	10bfffcc 	andi	r2,r2,65535
     fd0:	813fffcc 	andi	r4,r16,65535
     fd4:	2089383a 	mul	r4,r4,r2
     fd8:	0001e600 	call	1e60 <malloc>
     fdc:	1029883a 	mov	r20,r2
     fe0:	00005a80 	call	5a8 <cam_get_xsize>
     fe4:	1021883a 	mov	r16,r2
     fe8:	00005cc0 	call	5cc <cam_get_ysize>
     fec:	10bfffcc 	andi	r2,r2,65535
     ff0:	813fffcc 	andi	r4,r16,65535
     ff4:	2089383a 	mul	r4,r4,r2
     ff8:	0001e600 	call	1e60 <malloc>
     ffc:	1023883a 	mov	r17,r2
    1000:	00005a80 	call	5a8 <cam_get_xsize>
    1004:	1021883a 	mov	r16,r2
    1008:	00005cc0 	call	5cc <cam_get_ysize>
    100c:	10bfffcc 	andi	r2,r2,65535
    1010:	813fffcc 	andi	r4,r16,65535
    1014:	2089383a 	mul	r4,r4,r2
    1018:	0001e600 	call	1e60 <malloc>
    101c:	a80b883a 	mov	r5,r21
    1020:	0009883a 	mov	r4,zero
    1024:	1021883a 	mov	r16,r2
    1028:	00006680 	call	668 <cam_set_image_pointer>
    102c:	a00b883a 	mov	r5,r20
    1030:	9009883a 	mov	r4,r18
    1034:	00006680 	call	668 <cam_set_image_pointer>
    1038:	880b883a 	mov	r5,r17
    103c:	01000084 	movi	r4,2
    1040:	00006680 	call	668 <cam_set_image_pointer>
    1044:	800b883a 	mov	r5,r16
    1048:	010000c4 	movi	r4,3
    104c:	00006680 	call	668 <cam_set_image_pointer>
    1050:	00007200 	call	720 <enable_continues_mode>
    1054:	00005a80 	call	5a8 <cam_get_xsize>
    1058:	1021883a 	mov	r16,r2
    105c:	00005cc0 	call	5cc <cam_get_ysize>
    1060:	813fffcc 	andi	r4,r16,65535
    1064:	2488d83a 	srl	r4,r4,r18
    1068:	117fffcc 	andi	r5,r2,65535
    106c:	00013340 	call	1334 <init_sobel_arrays>
    1070:	00007340 	call	734 <new_image_available>
    1074:	10803fcc 	andi	r2,r2,255
    1078:	1080201c 	xori	r2,r2,128
    107c:	10bfe004 	addi	r2,r2,-128
    1080:	103ffb26 	beq	r2,zero,1070 <__alt_data_end+0xff001070>
    1084:	00006dc0 	call	6dc <current_image_valid>
    1088:	10bfffcc 	andi	r2,r2,65535
    108c:	10a0001c 	xori	r2,r2,32768
    1090:	10a00004 	addi	r2,r2,-32768
    1094:	103ff626 	beq	r2,zero,1070 <__alt_data_end+0xff001070>
    1098:	00007600 	call	760 <DIPSW_get_value>
    109c:	1021883a 	mov	r16,r2
    10a0:	00006f00 	call	6f0 <current_image_pointer>
    10a4:	1023883a 	mov	r17,r2
    10a8:	808001cc 	andi	r2,r16,7
    10ac:	14808026 	beq	r2,r18,12b0 <main+0x360>
    10b0:	10006d26 	beq	r2,zero,1268 <main+0x318>
    10b4:	00c00084 	movi	r3,2
    10b8:	10c05f26 	beq	r2,r3,1238 <main+0x2e8>
    10bc:	00c000c4 	movi	r3,3
    10c0:	10c0221e 	bne	r2,r3,114c <main+0x1fc>
    10c4:	00005a80 	call	5a8 <cam_get_xsize>
    10c8:	1029883a 	mov	r20,r2
    10cc:	00005cc0 	call	5cc <cam_get_ysize>
    10d0:	a17fffcc 	andi	r5,r20,65535
    10d4:	280ad07a 	srli	r5,r5,1
    10d8:	8809883a 	mov	r4,r17
    10dc:	11bfffcc 	andi	r6,r2,65535
    10e0:	00007740 	call	774 <conv_grayscale>
    10e4:	00008640 	call	864 <get_grayscale_picture>
    10e8:	1009883a 	mov	r4,r2
    10ec:	1023883a 	mov	r17,r2
    10f0:	00014d40 	call	14d4 <sobel_x>
    10f4:	8809883a 	mov	r4,r17
    10f8:	000184c0 	call	184c <sobel_y_with_rgb>
    10fc:	0001c7c0 	call	1c7c <GetSobel_rgb>
    1100:	1029883a 	mov	r20,r2
    1104:	00005a80 	call	5a8 <cam_get_xsize>
    1108:	1023883a 	mov	r17,r2
    110c:	00005cc0 	call	5cc <cam_get_ysize>
    1110:	897fffcc 	andi	r5,r17,65535
    1114:	280ad07a 	srli	r5,r5,1
    1118:	84003fcc 	andi	r16,r16,255
    111c:	8400201c 	xori	r16,r16,128
    1120:	000f883a 	mov	r7,zero
    1124:	11bfffcc 	andi	r6,r2,65535
    1128:	a4c9883a 	add	r4,r20,r19
    112c:	843fe004 	addi	r16,r16,-128
    1130:	0000ed80 	call	ed8 <transfer_LCD_with_dma>
    1134:	803fce0e 	bge	r16,zero,1070 <__alt_data_end+0xff001070>
    1138:	01000204 	movi	r4,8
    113c:	0001c9c0 	call	1c9c <vga_set_swap>
    1140:	a009883a 	mov	r4,r20
    1144:	0001c8c0 	call	1c8c <vga_set_pointer>
    1148:	003fc906 	br	1070 <__alt_data_end+0xff001070>
    114c:	000fbac0 	call	fbac <alt_timestamp_start>
    1150:	000fc240 	call	fc24 <alt_timestamp>
    1154:	1029883a 	mov	r20,r2
    1158:	00005a80 	call	5a8 <cam_get_xsize>
    115c:	102b883a 	mov	r21,r2
    1160:	00005cc0 	call	5cc <cam_get_ysize>
    1164:	a97fffcc 	andi	r5,r21,65535
    1168:	280ad07a 	srli	r5,r5,1
    116c:	11bfffcc 	andi	r6,r2,65535
    1170:	8809883a 	mov	r4,r17
    1174:	00007740 	call	774 <conv_grayscale>
    1178:	00008640 	call	864 <get_grayscale_picture>
    117c:	102b883a 	mov	r21,r2
    1180:	000fc240 	call	fc24 <alt_timestamp>
    1184:	1529c83a 	sub	r20,r2,r20
    1188:	a009883a 	mov	r4,r20
    118c:	014000f4 	movhi	r5,3
    1190:	0001da40 	call	1da4 <__udivsi3>
    1194:	01000074 	movhi	r4,1
    1198:	100b883a 	mov	r5,r2
    119c:	21052604 	addi	r4,r4,5272
    11a0:	000280c0 	call	280c <printf>
    11a4:	000fc240 	call	fc24 <alt_timestamp>
    11a8:	a809883a 	mov	r4,r21
    11ac:	01402004 	movi	r5,128
    11b0:	1023883a 	mov	r17,r2
    11b4:	0001a680 	call	1a68 <sobel>
    11b8:	000fc240 	call	fc24 <alt_timestamp>
    11bc:	1463c83a 	sub	r17,r2,r17
    11c0:	8809883a 	mov	r4,r17
    11c4:	014000f4 	movhi	r5,3
    11c8:	0001da40 	call	1da4 <__udivsi3>
    11cc:	01000074 	movhi	r4,1
    11d0:	100b883a 	mov	r5,r2
    11d4:	21052e04 	addi	r4,r4,5304
    11d8:	000280c0 	call	280c <printf>
    11dc:	0001c840 	call	1c84 <GetSobelResult>
    11e0:	102d883a 	mov	r22,r2
    11e4:	00005a80 	call	5a8 <cam_get_xsize>
    11e8:	102b883a 	mov	r21,r2
    11ec:	00005cc0 	call	5cc <cam_get_ysize>
    11f0:	a97fffcc 	andi	r5,r21,65535
    11f4:	280ad07a 	srli	r5,r5,1
    11f8:	84003fcc 	andi	r16,r16,255
    11fc:	8400201c 	xori	r16,r16,128
    1200:	01c00044 	movi	r7,1
    1204:	11bfffcc 	andi	r6,r2,65535
    1208:	b1102204 	addi	r4,r22,16520
    120c:	843fe004 	addi	r16,r16,-128
    1210:	0000ed80 	call	ed8 <transfer_LCD_with_dma>
    1214:	80004216 	blt	r16,zero,1320 <main+0x3d0>
    1218:	a449883a 	add	r4,r20,r17
    121c:	014000f4 	movhi	r5,3
    1220:	0001da40 	call	1da4 <__udivsi3>
    1224:	01000074 	movhi	r4,1
    1228:	100b883a 	mov	r5,r2
    122c:	21053704 	addi	r4,r4,5340
    1230:	000280c0 	call	280c <printf>
    1234:	003f8e06 	br	1070 <__alt_data_end+0xff001070>
    1238:	00005a80 	call	5a8 <cam_get_xsize>
    123c:	1029883a 	mov	r20,r2
    1240:	00005cc0 	call	5cc <cam_get_ysize>
    1244:	a17fffcc 	andi	r5,r20,65535
    1248:	280ad07a 	srli	r5,r5,1
    124c:	8809883a 	mov	r4,r17
    1250:	11bfffcc 	andi	r6,r2,65535
    1254:	00007740 	call	774 <conv_grayscale>
    1258:	00008640 	call	864 <get_grayscale_picture>
    125c:	1009883a 	mov	r4,r2
    1260:	00015d40 	call	15d4 <sobel_x_with_rgb>
    1264:	003fa506 	br	10fc <__alt_data_end+0xff0010fc>
    1268:	00005a80 	call	5a8 <cam_get_xsize>
    126c:	1029883a 	mov	r20,r2
    1270:	00005cc0 	call	5cc <cam_get_ysize>
    1274:	a17fffcc 	andi	r5,r20,65535
    1278:	280ad07a 	srli	r5,r5,1
    127c:	84003fcc 	andi	r16,r16,255
    1280:	8400201c 	xori	r16,r16,128
    1284:	000f883a 	mov	r7,zero
    1288:	11bfffcc 	andi	r6,r2,65535
    128c:	8cc9883a 	add	r4,r17,r19
    1290:	843fe004 	addi	r16,r16,-128
    1294:	0000ed80 	call	ed8 <transfer_LCD_with_dma>
    1298:	803f750e 	bge	r16,zero,1070 <__alt_data_end+0xff001070>
    129c:	01000204 	movi	r4,8
    12a0:	0001c9c0 	call	1c9c <vga_set_swap>
    12a4:	8809883a 	mov	r4,r17
    12a8:	0001c8c0 	call	1c8c <vga_set_pointer>
    12ac:	003f7006 	br	1070 <__alt_data_end+0xff001070>
    12b0:	00005a80 	call	5a8 <cam_get_xsize>
    12b4:	1029883a 	mov	r20,r2
    12b8:	00005cc0 	call	5cc <cam_get_ysize>
    12bc:	a17fffcc 	andi	r5,r20,65535
    12c0:	280ad07a 	srli	r5,r5,1
    12c4:	8809883a 	mov	r4,r17
    12c8:	11bfffcc 	andi	r6,r2,65535
    12cc:	00007740 	call	774 <conv_grayscale>
    12d0:	00008640 	call	864 <get_grayscale_picture>
    12d4:	1029883a 	mov	r20,r2
    12d8:	00005a80 	call	5a8 <cam_get_xsize>
    12dc:	1023883a 	mov	r17,r2
    12e0:	00005cc0 	call	5cc <cam_get_ysize>
    12e4:	897fffcc 	andi	r5,r17,65535
    12e8:	280ad07a 	srli	r5,r5,1
    12ec:	84003fcc 	andi	r16,r16,255
    12f0:	8400201c 	xori	r16,r16,128
    12f4:	900f883a 	mov	r7,r18
    12f8:	11bfffcc 	andi	r6,r2,65535
    12fc:	a1102204 	addi	r4,r20,16520
    1300:	843fe004 	addi	r16,r16,-128
    1304:	0000ed80 	call	ed8 <transfer_LCD_with_dma>
    1308:	803f590e 	bge	r16,zero,1070 <__alt_data_end+0xff001070>
    130c:	01000604 	movi	r4,24
    1310:	0001c9c0 	call	1c9c <vga_set_swap>
    1314:	a009883a 	mov	r4,r20
    1318:	0001c8c0 	call	1c8c <vga_set_pointer>
    131c:	003f5406 	br	1070 <__alt_data_end+0xff001070>
    1320:	01000604 	movi	r4,24
    1324:	0001c9c0 	call	1c9c <vga_set_swap>
    1328:	b009883a 	mov	r4,r22
    132c:	0001c8c0 	call	1c8c <vga_set_pointer>
    1330:	003fb906 	br	1218 <__alt_data_end+0xff001218>

00001334 <init_sobel_arrays>:
    1334:	d0a6d217 	ldw	r2,-25784(gp)
    1338:	defffd04 	addi	sp,sp,-12
    133c:	dc400115 	stw	r17,4(sp)
    1340:	dc000015 	stw	r16,0(sp)
    1344:	dfc00215 	stw	ra,8(sp)
    1348:	d126cf15 	stw	r4,-25796(gp)
    134c:	d166d115 	stw	r5,-25788(gp)
    1350:	2023883a 	mov	r17,r4
    1354:	2821883a 	mov	r16,r5
    1358:	10000226 	beq	r2,zero,1364 <init_sobel_arrays+0x30>
    135c:	1009883a 	mov	r4,r2
    1360:	0001e740 	call	1e74 <free>
    1364:	8c21383a 	mul	r16,r17,r16
    1368:	8423883a 	add	r17,r16,r16
    136c:	8809883a 	mov	r4,r17
    1370:	0001e600 	call	1e60 <malloc>
    1374:	d126d317 	ldw	r4,-25780(gp)
    1378:	d0a6d215 	stw	r2,-25784(gp)
    137c:	20000126 	beq	r4,zero,1384 <init_sobel_arrays+0x50>
    1380:	0001e740 	call	1e74 <free>
    1384:	8809883a 	mov	r4,r17
    1388:	0001e600 	call	1e60 <malloc>
    138c:	d126d017 	ldw	r4,-25792(gp)
    1390:	d0a6d315 	stw	r2,-25780(gp)
    1394:	20000126 	beq	r4,zero,139c <init_sobel_arrays+0x68>
    1398:	0001e740 	call	1e74 <free>
    139c:	8009883a 	mov	r4,r16
    13a0:	0001e600 	call	1e60 <malloc>
    13a4:	d126d417 	ldw	r4,-25776(gp)
    13a8:	d0a6d015 	stw	r2,-25792(gp)
    13ac:	20000126 	beq	r4,zero,13b4 <init_sobel_arrays+0x80>
    13b0:	0001e740 	call	1e74 <free>
    13b4:	8809883a 	mov	r4,r17
    13b8:	0001e600 	call	1e60 <malloc>
    13bc:	d0a6d415 	stw	r2,-25776(gp)
    13c0:	0005883a 	mov	r2,zero
    13c4:	04000f0e 	bge	zero,r16,1404 <init_sobel_arrays+0xd0>
    13c8:	d226d217 	ldw	r8,-25784(gp)
    13cc:	d1e6d317 	ldw	r7,-25780(gp)
    13d0:	d1a6d017 	ldw	r6,-25792(gp)
    13d4:	1087883a 	add	r3,r2,r2
    13d8:	40d1883a 	add	r8,r8,r3
    13dc:	4000000d 	sth	zero,0(r8)
    13e0:	38cf883a 	add	r7,r7,r3
    13e4:	308d883a 	add	r6,r6,r2
    13e8:	3800000d 	sth	zero,0(r7)
    13ec:	30000005 	stb	zero,0(r6)
    13f0:	d1a6d417 	ldw	r6,-25776(gp)
    13f4:	10800044 	addi	r2,r2,1
    13f8:	30c7883a 	add	r3,r6,r3
    13fc:	1800000d 	sth	zero,0(r3)
    1400:	80bff11e 	bne	r16,r2,13c8 <__alt_data_end+0xff0013c8>
    1404:	dfc00217 	ldw	ra,8(sp)
    1408:	dc400117 	ldw	r17,4(sp)
    140c:	dc000017 	ldw	r16,0(sp)
    1410:	dec00304 	addi	sp,sp,12
    1414:	f800283a 	ret

00001418 <sobel_mac>:
    1418:	da800017 	ldw	r10,0(sp)
    141c:	31bfffc4 	addi	r6,r6,-1
    1420:	38c00047 	ldb	r3,1(r7)
    1424:	328d383a 	mul	r6,r6,r10
    1428:	3b8000c7 	ldb	r14,3(r7)
    142c:	3a000107 	ldb	r8,4(r7)
    1430:	5185883a 	add	r2,r10,r6
    1434:	2893883a 	add	r9,r5,r2
    1438:	314d883a 	add	r6,r6,r5
    143c:	218d883a 	add	r6,r4,r6
    1440:	2253883a 	add	r9,r4,r9
    1444:	33000003 	ldbu	r12,0(r6)
    1448:	5095883a 	add	r10,r10,r2
    144c:	48bfffc3 	ldbu	r2,-1(r9)
    1450:	5155883a 	add	r10,r10,r5
    1454:	4ac00003 	ldbu	r11,0(r9)
    1458:	229b883a 	add	r13,r4,r10
    145c:	49000043 	ldbu	r4,1(r9)
    1460:	3a800147 	ldb	r10,5(r7)
    1464:	139d383a 	mul	r14,r2,r14
    1468:	60d9383a 	mul	r12,r12,r3
    146c:	68800003 	ldbu	r2,0(r13)
    1470:	38c001c7 	ldb	r3,7(r7)
    1474:	5a17383a 	mul	r11,r11,r8
    1478:	33ffffc3 	ldbu	r15,-1(r6)
    147c:	3a000007 	ldb	r8,0(r7)
    1480:	2295383a 	mul	r10,r4,r10
    1484:	31000043 	ldbu	r4,1(r6)
    1488:	39800087 	ldb	r6,2(r7)
    148c:	730b883a 	add	r5,r14,r12
    1490:	10d3383a 	mul	r9,r2,r3
    1494:	6b3fffc3 	ldbu	r12,-1(r13)
    1498:	38c00187 	ldb	r3,6(r7)
    149c:	2acb883a 	add	r5,r5,r11
    14a0:	7a11383a 	mul	r8,r15,r8
    14a4:	6ac00043 	ldbu	r11,1(r13)
    14a8:	39c00207 	ldb	r7,8(r7)
    14ac:	2a8b883a 	add	r5,r5,r10
    14b0:	2189383a 	mul	r4,r4,r6
    14b4:	2a45883a 	add	r2,r5,r9
    14b8:	60c7383a 	mul	r3,r12,r3
    14bc:	1205883a 	add	r2,r2,r8
    14c0:	59cb383a 	mul	r5,r11,r7
    14c4:	1105883a 	add	r2,r2,r4
    14c8:	10c5883a 	add	r2,r2,r3
    14cc:	1145883a 	add	r2,r2,r5
    14d0:	f800283a 	ret

000014d4 <sobel_x>:
    14d4:	defff904 	addi	sp,sp,-28
    14d8:	dc400115 	stw	r17,4(sp)
    14dc:	d466d117 	ldw	r17,-25788(gp)
    14e0:	dc000015 	stw	r16,0(sp)
    14e4:	dfc00615 	stw	ra,24(sp)
    14e8:	dd400515 	stw	r21,20(sp)
    14ec:	dd000415 	stw	r20,16(sp)
    14f0:	dcc00315 	stw	r19,12(sp)
    14f4:	dc800215 	stw	r18,8(sp)
    14f8:	04000084 	movi	r16,2
    14fc:	84402c0e 	bge	r16,r17,15b0 <sobel_x+0xdc>
    1500:	d366cf17 	ldw	r13,-25796(gp)
    1504:	d3a6d217 	ldw	r14,-25784(gp)
    1508:	8c7fffc4 	addi	r17,r17,-1
    150c:	6b65883a 	add	r18,r13,r13
    1510:	9405883a 	add	r2,r18,r16
    1514:	2499883a 	add	r12,r4,r18
    1518:	709d883a 	add	r14,r14,r2
    151c:	03c00044 	movi	r15,1
    1520:	6c27883a 	add	r19,r13,r16
    1524:	693f883a 	add	ra,r13,r4
    1528:	83401c0e 	bge	r16,r13,159c <sobel_x+0xc8>
    152c:	f817883a 	mov	r11,ra
    1530:	22800084 	addi	r10,r4,2
    1534:	990d883a 	add	r6,r19,r4
    1538:	62400084 	addi	r9,r12,2
    153c:	7011883a 	mov	r8,r14
    1540:	600f883a 	mov	r7,r12
    1544:	4d000003 	ldbu	r20,0(r9)
    1548:	50c00003 	ldbu	r3,0(r10)
    154c:	59400003 	ldbu	r5,0(r11)
    1550:	30800003 	ldbu	r2,0(r6)
    1554:	1d07883a 	add	r3,r3,r20
    1558:	25400003 	ldbu	r21,0(r4)
    155c:	1947c83a 	sub	r3,r3,r5
    1560:	3d000003 	ldbu	r20,0(r7)
    1564:	194bc83a 	sub	r5,r3,r5
    1568:	1087883a 	add	r3,r2,r2
    156c:	28c7883a 	add	r3,r5,r3
    1570:	1d45c83a 	sub	r2,r3,r21
    1574:	1505c83a 	sub	r2,r2,r20
    1578:	4080000d 	sth	r2,0(r8)
    157c:	31800044 	addi	r6,r6,1
    1580:	21000044 	addi	r4,r4,1
    1584:	5ac00044 	addi	r11,r11,1
    1588:	52800044 	addi	r10,r10,1
    158c:	39c00044 	addi	r7,r7,1
    1590:	4a400044 	addi	r9,r9,1
    1594:	42000084 	addi	r8,r8,2
    1598:	61bfea1e 	bne	r12,r6,1544 <__alt_data_end+0xff001544>
    159c:	7bc00044 	addi	r15,r15,1
    15a0:	f809883a 	mov	r4,ra
    15a4:	6359883a 	add	r12,r12,r13
    15a8:	749d883a 	add	r14,r14,r18
    15ac:	7c7fdd1e 	bne	r15,r17,1524 <__alt_data_end+0xff001524>
    15b0:	dfc00617 	ldw	ra,24(sp)
    15b4:	dd400517 	ldw	r21,20(sp)
    15b8:	dd000417 	ldw	r20,16(sp)
    15bc:	dcc00317 	ldw	r19,12(sp)
    15c0:	dc800217 	ldw	r18,8(sp)
    15c4:	dc400117 	ldw	r17,4(sp)
    15c8:	dc000017 	ldw	r16,0(sp)
    15cc:	dec00704 	addi	sp,sp,28
    15d0:	f800283a 	ret

000015d4 <sobel_x_with_rgb>:
    15d4:	defff504 	addi	sp,sp,-44
    15d8:	dd800715 	stw	r22,28(sp)
    15dc:	d5a6d117 	ldw	r22,-25788(gp)
    15e0:	dfc00a15 	stw	ra,40(sp)
    15e4:	df000915 	stw	fp,36(sp)
    15e8:	ddc00815 	stw	r23,32(sp)
    15ec:	dd400615 	stw	r21,24(sp)
    15f0:	dd000515 	stw	r20,20(sp)
    15f4:	dcc00415 	stw	r19,16(sp)
    15f8:	dc800315 	stw	r18,12(sp)
    15fc:	dc400215 	stw	r17,8(sp)
    1600:	dc000115 	stw	r16,4(sp)
    1604:	b5bfffc4 	addi	r22,r22,-1
    1608:	00800044 	movi	r2,1
    160c:	1580440e 	bge	r2,r22,1720 <sobel_x_with_rgb+0x14c>
    1610:	d7e6cf17 	ldw	ra,-25796(gp)
    1614:	d4a6d217 	ldw	r18,-25784(gp)
    1618:	d466d417 	ldw	r17,-25776(gp)
    161c:	ffe9883a 	add	r20,ra,ra
    1620:	a0800084 	addi	r2,r20,2
    1624:	04000084 	movi	r16,2
    1628:	90a5883a 	add	r18,r18,r2
    162c:	88a3883a 	add	r17,r17,r2
    1630:	fc05883a 	add	r2,ra,r16
    1634:	27df883a 	add	r15,r4,ra
    1638:	802f883a 	mov	r23,r16
    163c:	87f9c83a 	sub	fp,r16,ra
    1640:	d8800015 	stw	r2,0(sp)
    1644:	bfc02f0e 	bge	r23,ra,1704 <sobel_x_with_rgb+0x130>
    1648:	d8800017 	ldw	r2,0(sp)
    164c:	7fe7883a 	add	r19,r15,ra
    1650:	802b883a 	mov	r21,r16
    1654:	7fdbc83a 	sub	r13,r15,ra
    1658:	e3cf883a 	add	r7,fp,r15
    165c:	7b000084 	addi	r12,r15,2
    1660:	9817883a 	mov	r11,r19
    1664:	13d5883a 	add	r10,r2,r15
    1668:	881d883a 	mov	r14,r17
    166c:	9013883a 	mov	r9,r18
    1670:	7811883a 	mov	r8,r15
    1674:	00000b06 	br	16a4 <sobel_x_with_rgb+0xd0>
    1678:	180692fa 	slli	r3,r3,11
    167c:	70c0000d 	sth	r3,0(r14)
    1680:	39c00044 	addi	r7,r7,1
    1684:	6b400044 	addi	r13,r13,1
    1688:	42000044 	addi	r8,r8,1
    168c:	63000044 	addi	r12,r12,1
    1690:	5ac00044 	addi	r11,r11,1
    1694:	52800044 	addi	r10,r10,1
    1698:	4a400084 	addi	r9,r9,2
    169c:	73800084 	addi	r14,r14,2
    16a0:	79c01a26 	beq	r15,r7,170c <sobel_x_with_rgb+0x138>
    16a4:	50800003 	ldbu	r2,0(r10)
    16a8:	39400003 	ldbu	r5,0(r7)
    16ac:	41800003 	ldbu	r6,0(r8)
    16b0:	60c00003 	ldbu	r3,0(r12)
    16b4:	288b883a 	add	r5,r5,r2
    16b8:	298bc83a 	sub	r5,r5,r6
    16bc:	68800003 	ldbu	r2,0(r13)
    16c0:	59000003 	ldbu	r4,0(r11)
    16c4:	298bc83a 	sub	r5,r5,r6
    16c8:	18c7883a 	add	r3,r3,r3
    16cc:	28c7883a 	add	r3,r5,r3
    16d0:	1887c83a 	sub	r3,r3,r2
    16d4:	1905c83a 	sub	r2,r3,r4
    16d8:	4880000d 	sth	r2,0(r9)
    16dc:	10bfffcc 	andi	r2,r2,65535
    16e0:	10a0001c 	xori	r2,r2,32768
    16e4:	10a00004 	addi	r2,r2,-32768
    16e8:	1007d0fa 	srai	r3,r2,3
    16ec:	103fe20e 	bge	r2,zero,1678 <__alt_data_end+0xff001678>
    16f0:	0085c83a 	sub	r2,zero,r2
    16f4:	1005d0ba 	srai	r2,r2,2
    16f8:	1004917a 	slli	r2,r2,5
    16fc:	7080000d 	sth	r2,0(r14)
    1700:	003fdf06 	br	1680 <__alt_data_end+0xff001680>
    1704:	802b883a 	mov	r21,r16
    1708:	7fe7883a 	add	r19,r15,ra
    170c:	84000044 	addi	r16,r16,1
    1710:	981f883a 	mov	r15,r19
    1714:	9525883a 	add	r18,r18,r20
    1718:	8d23883a 	add	r17,r17,r20
    171c:	adbfc916 	blt	r21,r22,1644 <__alt_data_end+0xff001644>
    1720:	dfc00a17 	ldw	ra,40(sp)
    1724:	df000917 	ldw	fp,36(sp)
    1728:	ddc00817 	ldw	r23,32(sp)
    172c:	dd800717 	ldw	r22,28(sp)
    1730:	dd400617 	ldw	r21,24(sp)
    1734:	dd000517 	ldw	r20,20(sp)
    1738:	dcc00417 	ldw	r19,16(sp)
    173c:	dc800317 	ldw	r18,12(sp)
    1740:	dc400217 	ldw	r17,8(sp)
    1744:	dc000117 	ldw	r16,4(sp)
    1748:	dec00b04 	addi	sp,sp,44
    174c:	f800283a 	ret

00001750 <sobel_y>:
    1750:	defff904 	addi	sp,sp,-28
    1754:	dc800215 	stw	r18,8(sp)
    1758:	d4a6d117 	ldw	r18,-25788(gp)
    175c:	dc400115 	stw	r17,4(sp)
    1760:	dfc00615 	stw	ra,24(sp)
    1764:	dd400515 	stw	r21,20(sp)
    1768:	dd000415 	stw	r20,16(sp)
    176c:	dcc00315 	stw	r19,12(sp)
    1770:	dc000015 	stw	r16,0(sp)
    1774:	04400084 	movi	r17,2
    1778:	8c802b0e 	bge	r17,r18,1828 <sobel_y+0xd8>
    177c:	d3e6cf17 	ldw	r15,-25796(gp)
    1780:	d3a6d317 	ldw	r14,-25780(gp)
    1784:	07c00044 	movi	ra,1
    1788:	7be1883a 	add	r16,r15,r15
    178c:	8467883a 	add	r19,r16,r17
    1790:	74dd883a 	add	r14,r14,r19
    1794:	94bfffc4 	addi	r18,r18,-1
    1798:	87e9883a 	add	r20,r16,ra
    179c:	8bc01e0e 	bge	r17,r15,1818 <sobel_y+0xc8>
    17a0:	810f883a 	add	r7,r16,r4
    17a4:	23000044 	addi	r12,r4,1
    17a8:	21800084 	addi	r6,r4,2
    17ac:	a117883a 	add	r11,r20,r4
    17b0:	9915883a 	add	r10,r19,r4
    17b4:	3bdbc83a 	sub	r13,r7,r15
    17b8:	7013883a 	mov	r9,r14
    17bc:	2011883a 	mov	r8,r4
    17c0:	31400003 	ldbu	r5,0(r6)
    17c4:	60800003 	ldbu	r2,0(r12)
    17c8:	40c00003 	ldbu	r3,0(r8)
    17cc:	5d400003 	ldbu	r21,0(r11)
    17d0:	31800044 	addi	r6,r6,1
    17d4:	1947883a 	add	r3,r3,r5
    17d8:	108b883a 	add	r5,r2,r2
    17dc:	1947883a 	add	r3,r3,r5
    17e0:	38800003 	ldbu	r2,0(r7)
    17e4:	51400003 	ldbu	r5,0(r10)
    17e8:	1d47c83a 	sub	r3,r3,r21
    17ec:	1d47c83a 	sub	r3,r3,r21
    17f0:	1885c83a 	sub	r2,r3,r2
    17f4:	1145c83a 	sub	r2,r2,r5
    17f8:	4880000d 	sth	r2,0(r9)
    17fc:	42000044 	addi	r8,r8,1
    1800:	63000044 	addi	r12,r12,1
    1804:	5ac00044 	addi	r11,r11,1
    1808:	39c00044 	addi	r7,r7,1
    180c:	52800044 	addi	r10,r10,1
    1810:	4a400084 	addi	r9,r9,2
    1814:	69bfea1e 	bne	r13,r6,17c0 <__alt_data_end+0xff0017c0>
    1818:	ffc00044 	addi	ra,ra,1
    181c:	23c9883a 	add	r4,r4,r15
    1820:	741d883a 	add	r14,r14,r16
    1824:	97ffdd1e 	bne	r18,ra,179c <__alt_data_end+0xff00179c>
    1828:	dfc00617 	ldw	ra,24(sp)
    182c:	dd400517 	ldw	r21,20(sp)
    1830:	dd000417 	ldw	r20,16(sp)
    1834:	dcc00317 	ldw	r19,12(sp)
    1838:	dc800217 	ldw	r18,8(sp)
    183c:	dc400117 	ldw	r17,4(sp)
    1840:	dc000017 	ldw	r16,0(sp)
    1844:	dec00704 	addi	sp,sp,28
    1848:	f800283a 	ret

0000184c <sobel_y_with_rgb>:
    184c:	defff604 	addi	sp,sp,-40
    1850:	dcc00315 	stw	r19,12(sp)
    1854:	d4e6d117 	ldw	r19,-25788(gp)
    1858:	dfc00915 	stw	ra,36(sp)
    185c:	df000815 	stw	fp,32(sp)
    1860:	ddc00715 	stw	r23,28(sp)
    1864:	dd800615 	stw	r22,24(sp)
    1868:	dd400515 	stw	r21,20(sp)
    186c:	dd000415 	stw	r20,16(sp)
    1870:	dc800215 	stw	r18,8(sp)
    1874:	dc400115 	stw	r17,4(sp)
    1878:	dc000015 	stw	r16,0(sp)
    187c:	9cffffc4 	addi	r19,r19,-1
    1880:	00800044 	movi	r2,1
    1884:	14c03f0e 	bge	r2,r19,1984 <sobel_y_with_rgb+0x138>
    1888:	d466cf17 	ldw	r17,-25796(gp)
    188c:	d426d317 	ldw	r16,-25780(gp)
    1890:	d7e6d417 	ldw	ra,-25776(gp)
    1894:	8c5d883a 	add	r14,r17,r17
    1898:	75000084 	addi	r20,r14,2
    189c:	03c00084 	movi	r15,2
    18a0:	8521883a 	add	r16,r16,r20
    18a4:	fd3f883a 	add	ra,ra,r20
    18a8:	782b883a 	mov	r21,r15
    18ac:	70ad883a 	add	r22,r14,r2
    18b0:	7825883a 	mov	r18,r15
    18b4:	ac402e0e 	bge	r21,r17,1970 <sobel_y_with_rgb+0x124>
    18b8:	238d883a 	add	r6,r4,r14
    18bc:	7825883a 	mov	r18,r15
    18c0:	22c00044 	addi	r11,r4,1
    18c4:	22800084 	addi	r10,r4,2
    18c8:	b113883a 	add	r9,r22,r4
    18cc:	a10b883a 	add	r5,r20,r4
    18d0:	899b883a 	add	r13,r17,r6
    18d4:	f819883a 	mov	r12,ra
    18d8:	8011883a 	mov	r8,r16
    18dc:	200f883a 	mov	r7,r4
    18e0:	00000b06 	br	1910 <sobel_y_with_rgb+0xc4>
    18e4:	180692fa 	slli	r3,r3,11
    18e8:	60c0000d 	sth	r3,0(r12)
    18ec:	29400044 	addi	r5,r5,1
    18f0:	39c00044 	addi	r7,r7,1
    18f4:	5ac00044 	addi	r11,r11,1
    18f8:	52800044 	addi	r10,r10,1
    18fc:	31800044 	addi	r6,r6,1
    1900:	4a400044 	addi	r9,r9,1
    1904:	42000084 	addi	r8,r8,2
    1908:	63000084 	addi	r12,r12,2
    190c:	69401826 	beq	r13,r5,1970 <sobel_y_with_rgb+0x124>
    1910:	50800003 	ldbu	r2,0(r10)
    1914:	3f000003 	ldbu	fp,0(r7)
    1918:	58c00003 	ldbu	r3,0(r11)
    191c:	4dc00003 	ldbu	r23,0(r9)
    1920:	e0b9883a 	add	fp,fp,r2
    1924:	18c7883a 	add	r3,r3,r3
    1928:	30800003 	ldbu	r2,0(r6)
    192c:	e0c7883a 	add	r3,fp,r3
    1930:	1dc7c83a 	sub	r3,r3,r23
    1934:	2f000003 	ldbu	fp,0(r5)
    1938:	1dc7c83a 	sub	r3,r3,r23
    193c:	1885c83a 	sub	r2,r3,r2
    1940:	1705c83a 	sub	r2,r2,fp
    1944:	4080000d 	sth	r2,0(r8)
    1948:	10bfffcc 	andi	r2,r2,65535
    194c:	10a0001c 	xori	r2,r2,32768
    1950:	10a00004 	addi	r2,r2,-32768
    1954:	1007d0fa 	srai	r3,r2,3
    1958:	103fe20e 	bge	r2,zero,18e4 <__alt_data_end+0xff0018e4>
    195c:	0085c83a 	sub	r2,zero,r2
    1960:	1005d0ba 	srai	r2,r2,2
    1964:	1004917a 	slli	r2,r2,5
    1968:	6080000d 	sth	r2,0(r12)
    196c:	003fdf06 	br	18ec <__alt_data_end+0xff0018ec>
    1970:	7bc00044 	addi	r15,r15,1
    1974:	2449883a 	add	r4,r4,r17
    1978:	83a1883a 	add	r16,r16,r14
    197c:	fbbf883a 	add	ra,ra,r14
    1980:	94ffcb16 	blt	r18,r19,18b0 <__alt_data_end+0xff0018b0>
    1984:	dfc00917 	ldw	ra,36(sp)
    1988:	df000817 	ldw	fp,32(sp)
    198c:	ddc00717 	ldw	r23,28(sp)
    1990:	dd800617 	ldw	r22,24(sp)
    1994:	dd400517 	ldw	r21,20(sp)
    1998:	dd000417 	ldw	r20,16(sp)
    199c:	dcc00317 	ldw	r19,12(sp)
    19a0:	dc800217 	ldw	r18,8(sp)
    19a4:	dc400117 	ldw	r17,4(sp)
    19a8:	dc000017 	ldw	r16,0(sp)
    19ac:	dec00a04 	addi	sp,sp,40
    19b0:	f800283a 	ret

000019b4 <sobel_threshold>:
    19b4:	d0a6d117 	ldw	r2,-25788(gp)
    19b8:	02400084 	movi	r9,2
    19bc:	4880290e 	bge	r9,r2,1a64 <sobel_threshold+0xb0>
    19c0:	223fffcc 	andi	r8,r4,65535
    19c4:	d0e6cf17 	ldw	r3,-25796(gp)
    19c8:	4220001c 	xori	r8,r8,32768
    19cc:	01c00044 	movi	r7,1
    19d0:	42200004 	addi	r8,r8,-32768
    19d4:	48c0200e 	bge	r9,r3,1a58 <sobel_threshold+0xa4>
    19d8:	01400044 	movi	r5,1
    19dc:	00000c06 	br	1a10 <sobel_threshold+0x5c>
    19e0:	2080000f 	ldh	r2,0(r4)
    19e4:	10001916 	blt	r2,zero,1a4c <sobel_threshold+0x98>
    19e8:	3085883a 	add	r2,r6,r2
    19ec:	10bfffcc 	andi	r2,r2,65535
    19f0:	10a0001c 	xori	r2,r2,32768
    19f4:	10a00004 	addi	r2,r2,-32768
    19f8:	4084803a 	cmplt	r2,r8,r2
    19fc:	0085c83a 	sub	r2,zero,r2
    1a00:	18800005 	stb	r2,0(r3)
    1a04:	d0e6cf17 	ldw	r3,-25796(gp)
    1a08:	18bfffc4 	addi	r2,r3,-1
    1a0c:	2880110e 	bge	r5,r2,1a54 <sobel_threshold+0xa0>
    1a10:	38c7383a 	mul	r3,r7,r3
    1a14:	d1a6d317 	ldw	r6,-25780(gp)
    1a18:	d126d217 	ldw	r4,-25784(gp)
    1a1c:	1947883a 	add	r3,r3,r5
    1a20:	18c5883a 	add	r2,r3,r3
    1a24:	308d883a 	add	r6,r6,r2
    1a28:	2089883a 	add	r4,r4,r2
    1a2c:	3180000f 	ldh	r6,0(r6)
    1a30:	d0a6d017 	ldw	r2,-25792(gp)
    1a34:	29400044 	addi	r5,r5,1
    1a38:	10c7883a 	add	r3,r2,r3
    1a3c:	303fe80e 	bge	r6,zero,19e0 <__alt_data_end+0xff0019e0>
    1a40:	2080000f 	ldh	r2,0(r4)
    1a44:	018dc83a 	sub	r6,zero,r6
    1a48:	103fe70e 	bge	r2,zero,19e8 <__alt_data_end+0xff0019e8>
    1a4c:	0085c83a 	sub	r2,zero,r2
    1a50:	003fe506 	br	19e8 <__alt_data_end+0xff0019e8>
    1a54:	d0a6d117 	ldw	r2,-25788(gp)
    1a58:	39c00044 	addi	r7,r7,1
    1a5c:	113fffc4 	addi	r4,r2,-1
    1a60:	393fdc16 	blt	r7,r4,19d4 <__alt_data_end+0xff0019d4>
    1a64:	f800283a 	ret

00001a68 <sobel>:
    1a68:	d0a6d117 	ldw	r2,-25788(gp)
    1a6c:	defff504 	addi	sp,sp,-44
    1a70:	df000915 	stw	fp,36(sp)
    1a74:	dc400215 	stw	r17,8(sp)
    1a78:	dfc00a15 	stw	ra,40(sp)
    1a7c:	ddc00815 	stw	r23,32(sp)
    1a80:	dd800715 	stw	r22,28(sp)
    1a84:	dd400615 	stw	r21,24(sp)
    1a88:	dd000515 	stw	r20,20(sp)
    1a8c:	dcc00415 	stw	r19,16(sp)
    1a90:	dc800315 	stw	r18,12(sp)
    1a94:	dc000115 	stw	r16,4(sp)
    1a98:	04400084 	movi	r17,2
    1a9c:	df000904 	addi	fp,sp,36
    1aa0:	8880690e 	bge	r17,r2,1c48 <sobel+0x1e0>
    1aa4:	2cffffcc 	andi	r19,r5,65535
    1aa8:	9ce0001c 	xori	r19,r19,32768
    1aac:	2021883a 	mov	r16,r4
    1ab0:	04800044 	movi	r18,1
    1ab4:	9ce00004 	addi	r19,r19,-32768
    1ab8:	d526cf17 	ldw	r20,-25796(gp)
    1abc:	917fffc4 	addi	r5,r18,-1
    1ac0:	e6fff715 	stw	sp,-36(fp)
    1ac4:	a08000c4 	addi	r2,r20,3
    1ac8:	1004d0ba 	srli	r2,r2,2
    1acc:	2d0b383a 	mul	r5,r5,r20
    1ad0:	a4af383a 	mul	r23,r20,r18
    1ad4:	1085883a 	add	r2,r2,r2
    1ad8:	1085883a 	add	r2,r2,r2
    1adc:	d8b7c83a 	sub	sp,sp,r2
    1ae0:	d823883a 	mov	r17,sp
    1ae4:	d8b7c83a 	sub	sp,sp,r2
    1ae8:	d82d883a 	mov	r22,sp
    1aec:	a00d883a 	mov	r6,r20
    1af0:	d8b7c83a 	sub	sp,sp,r2
    1af4:	814b883a 	add	r5,r16,r5
    1af8:	8809883a 	mov	r4,r17
    1afc:	00026940 	call	2694 <memcpy>
    1b00:	a00d883a 	mov	r6,r20
    1b04:	85cb883a 	add	r5,r16,r23
    1b08:	b009883a 	mov	r4,r22
    1b0c:	00026940 	call	2694 <memcpy>
    1b10:	a5cb883a 	add	r5,r20,r23
    1b14:	a00d883a 	mov	r6,r20
    1b18:	814b883a 	add	r5,r16,r5
    1b1c:	d809883a 	mov	r4,sp
    1b20:	00026940 	call	2694 <memcpy>
    1b24:	00800084 	movi	r2,2
    1b28:	95400044 	addi	r21,r18,1
    1b2c:	1500410e 	bge	r2,r20,1c34 <sobel+0x1cc>
    1b30:	8809883a 	mov	r4,r17
    1b34:	b011883a 	mov	r8,r22
    1b38:	8b800044 	addi	r14,r17,1
    1b3c:	8b400084 	addi	r13,r17,2
    1b40:	b3000084 	addi	r12,r22,2
    1b44:	dac00044 	addi	r11,sp,1
    1b48:	d815883a 	mov	r10,sp
    1b4c:	da400084 	addi	r9,sp,2
    1b50:	01c00044 	movi	r7,1
    1b54:	00001c06 	br	1bc8 <sobel+0x160>
    1b58:	71400003 	ldbu	r5,0(r14)
    1b5c:	58800003 	ldbu	r2,0(r11)
    1b60:	294b883a 	add	r5,r5,r5
    1b64:	2fcb883a 	add	r5,r5,ra
    1b68:	288bc83a 	sub	r5,r5,r2
    1b6c:	288bc83a 	sub	r5,r5,r2
    1b70:	28c7c83a 	sub	r3,r5,r3
    1b74:	1d87c83a 	sub	r3,r3,r22
    1b78:	18bfffcc 	andi	r2,r3,65535
    1b7c:	10a0001c 	xori	r2,r2,32768
    1b80:	10a00004 	addi	r2,r2,-32768
    1b84:	10002916 	blt	r2,zero,1c2c <sobel+0x1c4>
    1b88:	7885883a 	add	r2,r15,r2
    1b8c:	10bfffcc 	andi	r2,r2,65535
    1b90:	14c5c032 	custom	0,r2,r2,r19
    1b94:	30800005 	stb	r2,0(r6)
    1b98:	d526cf17 	ldw	r20,-25796(gp)
    1b9c:	21000044 	addi	r4,r4,1
    1ba0:	73800044 	addi	r14,r14,1
    1ba4:	a0bfffc4 	addi	r2,r20,-1
    1ba8:	42000044 	addi	r8,r8,1
    1bac:	6b400044 	addi	r13,r13,1
    1bb0:	63000044 	addi	r12,r12,1
    1bb4:	5ac00044 	addi	r11,r11,1
    1bb8:	52800044 	addi	r10,r10,1
    1bbc:	4a400044 	addi	r9,r9,1
    1bc0:	38801c0e 	bge	r7,r2,1c34 <sobel+0x1cc>
    1bc4:	a4af383a 	mul	r23,r20,r18
    1bc8:	40800003 	ldbu	r2,0(r8)
    1bcc:	6fc00003 	ldbu	ra,0(r13)
    1bd0:	4d800003 	ldbu	r22,0(r9)
    1bd4:	61800003 	ldbu	r6,0(r12)
    1bd8:	0085c83a 	sub	r2,zero,r2
    1bdc:	23c00003 	ldbu	r15,0(r4)
    1be0:	fd8b883a 	add	r5,ra,r22
    1be4:	1085883a 	add	r2,r2,r2
    1be8:	1145883a 	add	r2,r2,r5
    1bec:	50c00003 	ldbu	r3,0(r10)
    1bf0:	318d883a 	add	r6,r6,r6
    1bf4:	118d883a 	add	r6,r2,r6
    1bf8:	33c5c83a 	sub	r2,r6,r15
    1bfc:	10c5c83a 	sub	r2,r2,r3
    1c00:	7fff883a 	add	ra,r15,ra
    1c04:	d1a6d017 	ldw	r6,-25792(gp)
    1c08:	13ffffcc 	andi	r15,r2,65535
    1c0c:	7be0001c 	xori	r15,r15,32768
    1c10:	b9ef883a 	add	r23,r23,r7
    1c14:	7be00004 	addi	r15,r15,-32768
    1c18:	35cd883a 	add	r6,r6,r23
    1c1c:	39c00044 	addi	r7,r7,1
    1c20:	783fcd0e 	bge	r15,zero,1b58 <__alt_data_end+0xff001b58>
    1c24:	03dfc83a 	sub	r15,zero,r15
    1c28:	003fcb06 	br	1b58 <__alt_data_end+0xff001b58>
    1c2c:	0085c83a 	sub	r2,zero,r2
    1c30:	003fd506 	br	1b88 <__alt_data_end+0xff001b88>
    1c34:	d0a6d117 	ldw	r2,-25788(gp)
    1c38:	a825883a 	mov	r18,r21
    1c3c:	e6fff717 	ldw	sp,-36(fp)
    1c40:	10bfffc4 	addi	r2,r2,-1
    1c44:	a8bf9c16 	blt	r21,r2,1ab8 <__alt_data_end+0xff001ab8>
    1c48:	e6fff804 	addi	sp,fp,-32
    1c4c:	dfc00917 	ldw	ra,36(sp)
    1c50:	df000817 	ldw	fp,32(sp)
    1c54:	ddc00717 	ldw	r23,28(sp)
    1c58:	dd800617 	ldw	r22,24(sp)
    1c5c:	dd400517 	ldw	r21,20(sp)
    1c60:	dd000417 	ldw	r20,16(sp)
    1c64:	dcc00317 	ldw	r19,12(sp)
    1c68:	dc800217 	ldw	r18,8(sp)
    1c6c:	dc400117 	ldw	r17,4(sp)
    1c70:	dc000017 	ldw	r16,0(sp)
    1c74:	dec00a04 	addi	sp,sp,40
    1c78:	f800283a 	ret

00001c7c <GetSobel_rgb>:
    1c7c:	d0a6d417 	ldw	r2,-25776(gp)
    1c80:	f800283a 	ret

00001c84 <GetSobelResult>:
    1c84:	d0a6d017 	ldw	r2,-25792(gp)
    1c88:	f800283a 	ret

00001c8c <vga_set_pointer>:
    1c8c:	00804034 	movhi	r2,256
    1c90:	10843404 	addi	r2,r2,4304
    1c94:	11000035 	stwio	r4,0(r2)
    1c98:	f800283a 	ret

00001c9c <vga_set_swap>:
    1c9c:	00804034 	movhi	r2,256
    1ca0:	10843504 	addi	r2,r2,4308
    1ca4:	11000025 	stbio	r4,0(r2)
    1ca8:	f800283a 	ret

00001cac <__divsi3>:
    1cac:	20001b16 	blt	r4,zero,1d1c <__divsi3+0x70>
    1cb0:	000f883a 	mov	r7,zero
    1cb4:	28001616 	blt	r5,zero,1d10 <__divsi3+0x64>
    1cb8:	200d883a 	mov	r6,r4
    1cbc:	29001a2e 	bgeu	r5,r4,1d28 <__divsi3+0x7c>
    1cc0:	00800804 	movi	r2,32
    1cc4:	00c00044 	movi	r3,1
    1cc8:	00000106 	br	1cd0 <__divsi3+0x24>
    1ccc:	10000d26 	beq	r2,zero,1d04 <__divsi3+0x58>
    1cd0:	294b883a 	add	r5,r5,r5
    1cd4:	10bfffc4 	addi	r2,r2,-1
    1cd8:	18c7883a 	add	r3,r3,r3
    1cdc:	293ffb36 	bltu	r5,r4,1ccc <__alt_data_end+0xff001ccc>
    1ce0:	0005883a 	mov	r2,zero
    1ce4:	18000726 	beq	r3,zero,1d04 <__divsi3+0x58>
    1ce8:	0005883a 	mov	r2,zero
    1cec:	31400236 	bltu	r6,r5,1cf8 <__divsi3+0x4c>
    1cf0:	314dc83a 	sub	r6,r6,r5
    1cf4:	10c4b03a 	or	r2,r2,r3
    1cf8:	1806d07a 	srli	r3,r3,1
    1cfc:	280ad07a 	srli	r5,r5,1
    1d00:	183ffa1e 	bne	r3,zero,1cec <__alt_data_end+0xff001cec>
    1d04:	38000126 	beq	r7,zero,1d0c <__divsi3+0x60>
    1d08:	0085c83a 	sub	r2,zero,r2
    1d0c:	f800283a 	ret
    1d10:	014bc83a 	sub	r5,zero,r5
    1d14:	39c0005c 	xori	r7,r7,1
    1d18:	003fe706 	br	1cb8 <__alt_data_end+0xff001cb8>
    1d1c:	0109c83a 	sub	r4,zero,r4
    1d20:	01c00044 	movi	r7,1
    1d24:	003fe306 	br	1cb4 <__alt_data_end+0xff001cb4>
    1d28:	00c00044 	movi	r3,1
    1d2c:	003fee06 	br	1ce8 <__alt_data_end+0xff001ce8>

00001d30 <__modsi3>:
    1d30:	20001716 	blt	r4,zero,1d90 <__modsi3+0x60>
    1d34:	000f883a 	mov	r7,zero
    1d38:	2005883a 	mov	r2,r4
    1d3c:	28001216 	blt	r5,zero,1d88 <__modsi3+0x58>
    1d40:	2900162e 	bgeu	r5,r4,1d9c <__modsi3+0x6c>
    1d44:	01800804 	movi	r6,32
    1d48:	00c00044 	movi	r3,1
    1d4c:	00000106 	br	1d54 <__modsi3+0x24>
    1d50:	30000a26 	beq	r6,zero,1d7c <__modsi3+0x4c>
    1d54:	294b883a 	add	r5,r5,r5
    1d58:	31bfffc4 	addi	r6,r6,-1
    1d5c:	18c7883a 	add	r3,r3,r3
    1d60:	293ffb36 	bltu	r5,r4,1d50 <__alt_data_end+0xff001d50>
    1d64:	18000526 	beq	r3,zero,1d7c <__modsi3+0x4c>
    1d68:	1806d07a 	srli	r3,r3,1
    1d6c:	11400136 	bltu	r2,r5,1d74 <__modsi3+0x44>
    1d70:	1145c83a 	sub	r2,r2,r5
    1d74:	280ad07a 	srli	r5,r5,1
    1d78:	183ffb1e 	bne	r3,zero,1d68 <__alt_data_end+0xff001d68>
    1d7c:	38000126 	beq	r7,zero,1d84 <__modsi3+0x54>
    1d80:	0085c83a 	sub	r2,zero,r2
    1d84:	f800283a 	ret
    1d88:	014bc83a 	sub	r5,zero,r5
    1d8c:	003fec06 	br	1d40 <__alt_data_end+0xff001d40>
    1d90:	0109c83a 	sub	r4,zero,r4
    1d94:	01c00044 	movi	r7,1
    1d98:	003fe706 	br	1d38 <__alt_data_end+0xff001d38>
    1d9c:	00c00044 	movi	r3,1
    1da0:	003ff106 	br	1d68 <__alt_data_end+0xff001d68>

00001da4 <__udivsi3>:
    1da4:	200d883a 	mov	r6,r4
    1da8:	2900152e 	bgeu	r5,r4,1e00 <__udivsi3+0x5c>
    1dac:	28001416 	blt	r5,zero,1e00 <__udivsi3+0x5c>
    1db0:	00800804 	movi	r2,32
    1db4:	00c00044 	movi	r3,1
    1db8:	00000206 	br	1dc4 <__udivsi3+0x20>
    1dbc:	10000e26 	beq	r2,zero,1df8 <__udivsi3+0x54>
    1dc0:	28000516 	blt	r5,zero,1dd8 <__udivsi3+0x34>
    1dc4:	294b883a 	add	r5,r5,r5
    1dc8:	10bfffc4 	addi	r2,r2,-1
    1dcc:	18c7883a 	add	r3,r3,r3
    1dd0:	293ffa36 	bltu	r5,r4,1dbc <__alt_data_end+0xff001dbc>
    1dd4:	18000826 	beq	r3,zero,1df8 <__udivsi3+0x54>
    1dd8:	0005883a 	mov	r2,zero
    1ddc:	31400236 	bltu	r6,r5,1de8 <__udivsi3+0x44>
    1de0:	314dc83a 	sub	r6,r6,r5
    1de4:	10c4b03a 	or	r2,r2,r3
    1de8:	1806d07a 	srli	r3,r3,1
    1dec:	280ad07a 	srli	r5,r5,1
    1df0:	183ffa1e 	bne	r3,zero,1ddc <__alt_data_end+0xff001ddc>
    1df4:	f800283a 	ret
    1df8:	0005883a 	mov	r2,zero
    1dfc:	f800283a 	ret
    1e00:	00c00044 	movi	r3,1
    1e04:	003ff406 	br	1dd8 <__alt_data_end+0xff001dd8>

00001e08 <__umodsi3>:
    1e08:	2005883a 	mov	r2,r4
    1e0c:	2900122e 	bgeu	r5,r4,1e58 <__umodsi3+0x50>
    1e10:	28001116 	blt	r5,zero,1e58 <__umodsi3+0x50>
    1e14:	01800804 	movi	r6,32
    1e18:	00c00044 	movi	r3,1
    1e1c:	00000206 	br	1e28 <__umodsi3+0x20>
    1e20:	30000c26 	beq	r6,zero,1e54 <__umodsi3+0x4c>
    1e24:	28000516 	blt	r5,zero,1e3c <__umodsi3+0x34>
    1e28:	294b883a 	add	r5,r5,r5
    1e2c:	31bfffc4 	addi	r6,r6,-1
    1e30:	18c7883a 	add	r3,r3,r3
    1e34:	293ffa36 	bltu	r5,r4,1e20 <__alt_data_end+0xff001e20>
    1e38:	18000626 	beq	r3,zero,1e54 <__umodsi3+0x4c>
    1e3c:	1806d07a 	srli	r3,r3,1
    1e40:	11400136 	bltu	r2,r5,1e48 <__umodsi3+0x40>
    1e44:	1145c83a 	sub	r2,r2,r5
    1e48:	280ad07a 	srli	r5,r5,1
    1e4c:	183ffb1e 	bne	r3,zero,1e3c <__alt_data_end+0xff001e3c>
    1e50:	f800283a 	ret
    1e54:	f800283a 	ret
    1e58:	00c00044 	movi	r3,1
    1e5c:	003ff706 	br	1e3c <__alt_data_end+0xff001e3c>

00001e60 <malloc>:
    1e60:	00800074 	movhi	r2,1
    1e64:	108cad04 	addi	r2,r2,12980
    1e68:	200b883a 	mov	r5,r4
    1e6c:	11000017 	ldw	r4,0(r2)
    1e70:	0001e881 	jmpi	1e88 <_malloc_r>

00001e74 <free>:
    1e74:	00800074 	movhi	r2,1
    1e78:	108cad04 	addi	r2,r2,12980
    1e7c:	200b883a 	mov	r5,r4
    1e80:	11000017 	ldw	r4,0(r2)
    1e84:	0006e201 	jmpi	6e20 <_free_r>

00001e88 <_malloc_r>:
    1e88:	defff504 	addi	sp,sp,-44
    1e8c:	dc800315 	stw	r18,12(sp)
    1e90:	dfc00a15 	stw	ra,40(sp)
    1e94:	df000915 	stw	fp,36(sp)
    1e98:	ddc00815 	stw	r23,32(sp)
    1e9c:	dd800715 	stw	r22,28(sp)
    1ea0:	dd400615 	stw	r21,24(sp)
    1ea4:	dd000515 	stw	r20,20(sp)
    1ea8:	dcc00415 	stw	r19,16(sp)
    1eac:	dc400215 	stw	r17,8(sp)
    1eb0:	dc000115 	stw	r16,4(sp)
    1eb4:	288002c4 	addi	r2,r5,11
    1eb8:	00c00584 	movi	r3,22
    1ebc:	2025883a 	mov	r18,r4
    1ec0:	18807f2e 	bgeu	r3,r2,20c0 <_malloc_r+0x238>
    1ec4:	047ffe04 	movi	r17,-8
    1ec8:	1462703a 	and	r17,r2,r17
    1ecc:	8800a316 	blt	r17,zero,215c <_malloc_r+0x2d4>
    1ed0:	8940a236 	bltu	r17,r5,215c <_malloc_r+0x2d4>
    1ed4:	000eb700 	call	eb70 <__malloc_lock>
    1ed8:	00807dc4 	movi	r2,503
    1edc:	1441e92e 	bgeu	r2,r17,2684 <_malloc_r+0x7fc>
    1ee0:	8804d27a 	srli	r2,r17,9
    1ee4:	1000a126 	beq	r2,zero,216c <_malloc_r+0x2e4>
    1ee8:	00c00104 	movi	r3,4
    1eec:	18811e36 	bltu	r3,r2,2368 <_malloc_r+0x4e0>
    1ef0:	8804d1ba 	srli	r2,r17,6
    1ef4:	12000e44 	addi	r8,r2,57
    1ef8:	11c00e04 	addi	r7,r2,56
    1efc:	4209883a 	add	r4,r8,r8
    1f00:	04c00074 	movhi	r19,1
    1f04:	2109883a 	add	r4,r4,r4
    1f08:	9cc5ff04 	addi	r19,r19,6140
    1f0c:	2109883a 	add	r4,r4,r4
    1f10:	9909883a 	add	r4,r19,r4
    1f14:	24000117 	ldw	r16,4(r4)
    1f18:	213ffe04 	addi	r4,r4,-8
    1f1c:	24009726 	beq	r4,r16,217c <_malloc_r+0x2f4>
    1f20:	80800117 	ldw	r2,4(r16)
    1f24:	01bfff04 	movi	r6,-4
    1f28:	014003c4 	movi	r5,15
    1f2c:	1184703a 	and	r2,r2,r6
    1f30:	1447c83a 	sub	r3,r2,r17
    1f34:	28c00716 	blt	r5,r3,1f54 <_malloc_r+0xcc>
    1f38:	1800920e 	bge	r3,zero,2184 <_malloc_r+0x2fc>
    1f3c:	84000317 	ldw	r16,12(r16)
    1f40:	24008e26 	beq	r4,r16,217c <_malloc_r+0x2f4>
    1f44:	80800117 	ldw	r2,4(r16)
    1f48:	1184703a 	and	r2,r2,r6
    1f4c:	1447c83a 	sub	r3,r2,r17
    1f50:	28fff90e 	bge	r5,r3,1f38 <__alt_data_end+0xff001f38>
    1f54:	3809883a 	mov	r4,r7
    1f58:	01800074 	movhi	r6,1
    1f5c:	9c000417 	ldw	r16,16(r19)
    1f60:	3185ff04 	addi	r6,r6,6140
    1f64:	32000204 	addi	r8,r6,8
    1f68:	82013426 	beq	r16,r8,243c <_malloc_r+0x5b4>
    1f6c:	80c00117 	ldw	r3,4(r16)
    1f70:	00bfff04 	movi	r2,-4
    1f74:	188e703a 	and	r7,r3,r2
    1f78:	3c45c83a 	sub	r2,r7,r17
    1f7c:	00c003c4 	movi	r3,15
    1f80:	18811f16 	blt	r3,r2,2400 <_malloc_r+0x578>
    1f84:	32000515 	stw	r8,20(r6)
    1f88:	32000415 	stw	r8,16(r6)
    1f8c:	10007f0e 	bge	r2,zero,218c <_malloc_r+0x304>
    1f90:	00807fc4 	movi	r2,511
    1f94:	11c0fd36 	bltu	r2,r7,238c <_malloc_r+0x504>
    1f98:	3806d0fa 	srli	r3,r7,3
    1f9c:	01c00044 	movi	r7,1
    1fa0:	30800117 	ldw	r2,4(r6)
    1fa4:	19400044 	addi	r5,r3,1
    1fa8:	294b883a 	add	r5,r5,r5
    1fac:	1807d0ba 	srai	r3,r3,2
    1fb0:	294b883a 	add	r5,r5,r5
    1fb4:	294b883a 	add	r5,r5,r5
    1fb8:	298b883a 	add	r5,r5,r6
    1fbc:	38c6983a 	sll	r3,r7,r3
    1fc0:	29c00017 	ldw	r7,0(r5)
    1fc4:	2a7ffe04 	addi	r9,r5,-8
    1fc8:	1886b03a 	or	r3,r3,r2
    1fcc:	82400315 	stw	r9,12(r16)
    1fd0:	81c00215 	stw	r7,8(r16)
    1fd4:	30c00115 	stw	r3,4(r6)
    1fd8:	2c000015 	stw	r16,0(r5)
    1fdc:	3c000315 	stw	r16,12(r7)
    1fe0:	2005d0ba 	srai	r2,r4,2
    1fe4:	01400044 	movi	r5,1
    1fe8:	288a983a 	sll	r5,r5,r2
    1fec:	19406f36 	bltu	r3,r5,21ac <_malloc_r+0x324>
    1ff0:	28c4703a 	and	r2,r5,r3
    1ff4:	10000a1e 	bne	r2,zero,2020 <_malloc_r+0x198>
    1ff8:	00bfff04 	movi	r2,-4
    1ffc:	294b883a 	add	r5,r5,r5
    2000:	2088703a 	and	r4,r4,r2
    2004:	28c4703a 	and	r2,r5,r3
    2008:	21000104 	addi	r4,r4,4
    200c:	1000041e 	bne	r2,zero,2020 <_malloc_r+0x198>
    2010:	294b883a 	add	r5,r5,r5
    2014:	28c4703a 	and	r2,r5,r3
    2018:	21000104 	addi	r4,r4,4
    201c:	103ffc26 	beq	r2,zero,2010 <__alt_data_end+0xff002010>
    2020:	02bfff04 	movi	r10,-4
    2024:	024003c4 	movi	r9,15
    2028:	21800044 	addi	r6,r4,1
    202c:	318d883a 	add	r6,r6,r6
    2030:	318d883a 	add	r6,r6,r6
    2034:	318d883a 	add	r6,r6,r6
    2038:	998d883a 	add	r6,r19,r6
    203c:	333ffe04 	addi	r12,r6,-8
    2040:	2017883a 	mov	r11,r4
    2044:	31800104 	addi	r6,r6,4
    2048:	34000017 	ldw	r16,0(r6)
    204c:	31fffd04 	addi	r7,r6,-12
    2050:	81c0041e 	bne	r16,r7,2064 <_malloc_r+0x1dc>
    2054:	0000fb06 	br	2444 <_malloc_r+0x5bc>
    2058:	1801030e 	bge	r3,zero,2468 <_malloc_r+0x5e0>
    205c:	84000317 	ldw	r16,12(r16)
    2060:	81c0f826 	beq	r16,r7,2444 <_malloc_r+0x5bc>
    2064:	80800117 	ldw	r2,4(r16)
    2068:	1284703a 	and	r2,r2,r10
    206c:	1447c83a 	sub	r3,r2,r17
    2070:	48fff90e 	bge	r9,r3,2058 <__alt_data_end+0xff002058>
    2074:	80800317 	ldw	r2,12(r16)
    2078:	81000217 	ldw	r4,8(r16)
    207c:	89400054 	ori	r5,r17,1
    2080:	81400115 	stw	r5,4(r16)
    2084:	20800315 	stw	r2,12(r4)
    2088:	11000215 	stw	r4,8(r2)
    208c:	8463883a 	add	r17,r16,r17
    2090:	9c400515 	stw	r17,20(r19)
    2094:	9c400415 	stw	r17,16(r19)
    2098:	18800054 	ori	r2,r3,1
    209c:	88800115 	stw	r2,4(r17)
    20a0:	8a000315 	stw	r8,12(r17)
    20a4:	8a000215 	stw	r8,8(r17)
    20a8:	88e3883a 	add	r17,r17,r3
    20ac:	88c00015 	stw	r3,0(r17)
    20b0:	9009883a 	mov	r4,r18
    20b4:	000eb940 	call	eb94 <__malloc_unlock>
    20b8:	80800204 	addi	r2,r16,8
    20bc:	00001b06 	br	212c <_malloc_r+0x2a4>
    20c0:	04400404 	movi	r17,16
    20c4:	89402536 	bltu	r17,r5,215c <_malloc_r+0x2d4>
    20c8:	000eb700 	call	eb70 <__malloc_lock>
    20cc:	00800184 	movi	r2,6
    20d0:	01000084 	movi	r4,2
    20d4:	04c00074 	movhi	r19,1
    20d8:	1085883a 	add	r2,r2,r2
    20dc:	9cc5ff04 	addi	r19,r19,6140
    20e0:	1085883a 	add	r2,r2,r2
    20e4:	9885883a 	add	r2,r19,r2
    20e8:	14000117 	ldw	r16,4(r2)
    20ec:	10fffe04 	addi	r3,r2,-8
    20f0:	80c0d926 	beq	r16,r3,2458 <_malloc_r+0x5d0>
    20f4:	80c00117 	ldw	r3,4(r16)
    20f8:	81000317 	ldw	r4,12(r16)
    20fc:	00bfff04 	movi	r2,-4
    2100:	1884703a 	and	r2,r3,r2
    2104:	81400217 	ldw	r5,8(r16)
    2108:	8085883a 	add	r2,r16,r2
    210c:	10c00117 	ldw	r3,4(r2)
    2110:	29000315 	stw	r4,12(r5)
    2114:	21400215 	stw	r5,8(r4)
    2118:	18c00054 	ori	r3,r3,1
    211c:	10c00115 	stw	r3,4(r2)
    2120:	9009883a 	mov	r4,r18
    2124:	000eb940 	call	eb94 <__malloc_unlock>
    2128:	80800204 	addi	r2,r16,8
    212c:	dfc00a17 	ldw	ra,40(sp)
    2130:	df000917 	ldw	fp,36(sp)
    2134:	ddc00817 	ldw	r23,32(sp)
    2138:	dd800717 	ldw	r22,28(sp)
    213c:	dd400617 	ldw	r21,24(sp)
    2140:	dd000517 	ldw	r20,20(sp)
    2144:	dcc00417 	ldw	r19,16(sp)
    2148:	dc800317 	ldw	r18,12(sp)
    214c:	dc400217 	ldw	r17,8(sp)
    2150:	dc000117 	ldw	r16,4(sp)
    2154:	dec00b04 	addi	sp,sp,44
    2158:	f800283a 	ret
    215c:	00800304 	movi	r2,12
    2160:	90800015 	stw	r2,0(r18)
    2164:	0005883a 	mov	r2,zero
    2168:	003ff006 	br	212c <__alt_data_end+0xff00212c>
    216c:	01002004 	movi	r4,128
    2170:	02001004 	movi	r8,64
    2174:	01c00fc4 	movi	r7,63
    2178:	003f6106 	br	1f00 <__alt_data_end+0xff001f00>
    217c:	4009883a 	mov	r4,r8
    2180:	003f7506 	br	1f58 <__alt_data_end+0xff001f58>
    2184:	81000317 	ldw	r4,12(r16)
    2188:	003fde06 	br	2104 <__alt_data_end+0xff002104>
    218c:	81c5883a 	add	r2,r16,r7
    2190:	11400117 	ldw	r5,4(r2)
    2194:	9009883a 	mov	r4,r18
    2198:	29400054 	ori	r5,r5,1
    219c:	11400115 	stw	r5,4(r2)
    21a0:	000eb940 	call	eb94 <__malloc_unlock>
    21a4:	80800204 	addi	r2,r16,8
    21a8:	003fe006 	br	212c <__alt_data_end+0xff00212c>
    21ac:	9c000217 	ldw	r16,8(r19)
    21b0:	00bfff04 	movi	r2,-4
    21b4:	85800117 	ldw	r22,4(r16)
    21b8:	b0ac703a 	and	r22,r22,r2
    21bc:	b4400336 	bltu	r22,r17,21cc <_malloc_r+0x344>
    21c0:	b445c83a 	sub	r2,r22,r17
    21c4:	00c003c4 	movi	r3,15
    21c8:	18805d16 	blt	r3,r2,2340 <_malloc_r+0x4b8>
    21cc:	05c00074 	movhi	r23,1
    21d0:	00800074 	movhi	r2,1
    21d4:	10938104 	addi	r2,r2,19972
    21d8:	bdccaa04 	addi	r23,r23,12968
    21dc:	15400017 	ldw	r21,0(r2)
    21e0:	b8c00017 	ldw	r3,0(r23)
    21e4:	00bfffc4 	movi	r2,-1
    21e8:	858d883a 	add	r6,r16,r22
    21ec:	8d6b883a 	add	r21,r17,r21
    21f0:	1880ea26 	beq	r3,r2,259c <_malloc_r+0x714>
    21f4:	ad4403c4 	addi	r21,r21,4111
    21f8:	00bc0004 	movi	r2,-4096
    21fc:	a8aa703a 	and	r21,r21,r2
    2200:	a80b883a 	mov	r5,r21
    2204:	9009883a 	mov	r4,r18
    2208:	d9800015 	stw	r6,0(sp)
    220c:	000291c0 	call	291c <_sbrk_r>
    2210:	1029883a 	mov	r20,r2
    2214:	00bfffc4 	movi	r2,-1
    2218:	d9800017 	ldw	r6,0(sp)
    221c:	a080e826 	beq	r20,r2,25c0 <_malloc_r+0x738>
    2220:	a180a636 	bltu	r20,r6,24bc <_malloc_r+0x634>
    2224:	07000074 	movhi	fp,1
    2228:	e7138f04 	addi	fp,fp,20028
    222c:	e0800017 	ldw	r2,0(fp)
    2230:	a887883a 	add	r3,r21,r2
    2234:	e0c00015 	stw	r3,0(fp)
    2238:	3500e626 	beq	r6,r20,25d4 <_malloc_r+0x74c>
    223c:	b9000017 	ldw	r4,0(r23)
    2240:	00bfffc4 	movi	r2,-1
    2244:	2080ee26 	beq	r4,r2,2600 <_malloc_r+0x778>
    2248:	a185c83a 	sub	r2,r20,r6
    224c:	10c5883a 	add	r2,r2,r3
    2250:	e0800015 	stw	r2,0(fp)
    2254:	a0c001cc 	andi	r3,r20,7
    2258:	1800bc26 	beq	r3,zero,254c <_malloc_r+0x6c4>
    225c:	a0e9c83a 	sub	r20,r20,r3
    2260:	00840204 	movi	r2,4104
    2264:	a5000204 	addi	r20,r20,8
    2268:	10c7c83a 	sub	r3,r2,r3
    226c:	a545883a 	add	r2,r20,r21
    2270:	1083ffcc 	andi	r2,r2,4095
    2274:	18abc83a 	sub	r21,r3,r2
    2278:	a80b883a 	mov	r5,r21
    227c:	9009883a 	mov	r4,r18
    2280:	000291c0 	call	291c <_sbrk_r>
    2284:	00ffffc4 	movi	r3,-1
    2288:	10c0e126 	beq	r2,r3,2610 <_malloc_r+0x788>
    228c:	1505c83a 	sub	r2,r2,r20
    2290:	1545883a 	add	r2,r2,r21
    2294:	10800054 	ori	r2,r2,1
    2298:	e0c00017 	ldw	r3,0(fp)
    229c:	9d000215 	stw	r20,8(r19)
    22a0:	a0800115 	stw	r2,4(r20)
    22a4:	a8c7883a 	add	r3,r21,r3
    22a8:	e0c00015 	stw	r3,0(fp)
    22ac:	84c00e26 	beq	r16,r19,22e8 <_malloc_r+0x460>
    22b0:	018003c4 	movi	r6,15
    22b4:	3580a72e 	bgeu	r6,r22,2554 <_malloc_r+0x6cc>
    22b8:	81400117 	ldw	r5,4(r16)
    22bc:	013ffe04 	movi	r4,-8
    22c0:	b0bffd04 	addi	r2,r22,-12
    22c4:	1104703a 	and	r2,r2,r4
    22c8:	2900004c 	andi	r4,r5,1
    22cc:	2088b03a 	or	r4,r4,r2
    22d0:	81000115 	stw	r4,4(r16)
    22d4:	01400144 	movi	r5,5
    22d8:	8089883a 	add	r4,r16,r2
    22dc:	21400115 	stw	r5,4(r4)
    22e0:	21400215 	stw	r5,8(r4)
    22e4:	3080cd36 	bltu	r6,r2,261c <_malloc_r+0x794>
    22e8:	00800074 	movhi	r2,1
    22ec:	10938004 	addi	r2,r2,19968
    22f0:	11000017 	ldw	r4,0(r2)
    22f4:	20c0012e 	bgeu	r4,r3,22fc <_malloc_r+0x474>
    22f8:	10c00015 	stw	r3,0(r2)
    22fc:	00800074 	movhi	r2,1
    2300:	10937f04 	addi	r2,r2,19964
    2304:	11000017 	ldw	r4,0(r2)
    2308:	9c000217 	ldw	r16,8(r19)
    230c:	20c0012e 	bgeu	r4,r3,2314 <_malloc_r+0x48c>
    2310:	10c00015 	stw	r3,0(r2)
    2314:	80c00117 	ldw	r3,4(r16)
    2318:	00bfff04 	movi	r2,-4
    231c:	1886703a 	and	r3,r3,r2
    2320:	1c45c83a 	sub	r2,r3,r17
    2324:	1c400236 	bltu	r3,r17,2330 <_malloc_r+0x4a8>
    2328:	00c003c4 	movi	r3,15
    232c:	18800416 	blt	r3,r2,2340 <_malloc_r+0x4b8>
    2330:	9009883a 	mov	r4,r18
    2334:	000eb940 	call	eb94 <__malloc_unlock>
    2338:	0005883a 	mov	r2,zero
    233c:	003f7b06 	br	212c <__alt_data_end+0xff00212c>
    2340:	88c00054 	ori	r3,r17,1
    2344:	80c00115 	stw	r3,4(r16)
    2348:	8463883a 	add	r17,r16,r17
    234c:	10800054 	ori	r2,r2,1
    2350:	9c400215 	stw	r17,8(r19)
    2354:	88800115 	stw	r2,4(r17)
    2358:	9009883a 	mov	r4,r18
    235c:	000eb940 	call	eb94 <__malloc_unlock>
    2360:	80800204 	addi	r2,r16,8
    2364:	003f7106 	br	212c <__alt_data_end+0xff00212c>
    2368:	00c00504 	movi	r3,20
    236c:	18804a2e 	bgeu	r3,r2,2498 <_malloc_r+0x610>
    2370:	00c01504 	movi	r3,84
    2374:	18806e36 	bltu	r3,r2,2530 <_malloc_r+0x6a8>
    2378:	8804d33a 	srli	r2,r17,12
    237c:	12001bc4 	addi	r8,r2,111
    2380:	11c01b84 	addi	r7,r2,110
    2384:	4209883a 	add	r4,r8,r8
    2388:	003edd06 	br	1f00 <__alt_data_end+0xff001f00>
    238c:	3804d27a 	srli	r2,r7,9
    2390:	00c00104 	movi	r3,4
    2394:	1880442e 	bgeu	r3,r2,24a8 <_malloc_r+0x620>
    2398:	00c00504 	movi	r3,20
    239c:	18808136 	bltu	r3,r2,25a4 <_malloc_r+0x71c>
    23a0:	11401704 	addi	r5,r2,92
    23a4:	10c016c4 	addi	r3,r2,91
    23a8:	294b883a 	add	r5,r5,r5
    23ac:	294b883a 	add	r5,r5,r5
    23b0:	294b883a 	add	r5,r5,r5
    23b4:	994b883a 	add	r5,r19,r5
    23b8:	28800017 	ldw	r2,0(r5)
    23bc:	01800074 	movhi	r6,1
    23c0:	297ffe04 	addi	r5,r5,-8
    23c4:	3185ff04 	addi	r6,r6,6140
    23c8:	28806526 	beq	r5,r2,2560 <_malloc_r+0x6d8>
    23cc:	01bfff04 	movi	r6,-4
    23d0:	10c00117 	ldw	r3,4(r2)
    23d4:	1986703a 	and	r3,r3,r6
    23d8:	38c0022e 	bgeu	r7,r3,23e4 <_malloc_r+0x55c>
    23dc:	10800217 	ldw	r2,8(r2)
    23e0:	28bffb1e 	bne	r5,r2,23d0 <__alt_data_end+0xff0023d0>
    23e4:	11400317 	ldw	r5,12(r2)
    23e8:	98c00117 	ldw	r3,4(r19)
    23ec:	81400315 	stw	r5,12(r16)
    23f0:	80800215 	stw	r2,8(r16)
    23f4:	2c000215 	stw	r16,8(r5)
    23f8:	14000315 	stw	r16,12(r2)
    23fc:	003ef806 	br	1fe0 <__alt_data_end+0xff001fe0>
    2400:	88c00054 	ori	r3,r17,1
    2404:	80c00115 	stw	r3,4(r16)
    2408:	8463883a 	add	r17,r16,r17
    240c:	34400515 	stw	r17,20(r6)
    2410:	34400415 	stw	r17,16(r6)
    2414:	10c00054 	ori	r3,r2,1
    2418:	8a000315 	stw	r8,12(r17)
    241c:	8a000215 	stw	r8,8(r17)
    2420:	88c00115 	stw	r3,4(r17)
    2424:	88a3883a 	add	r17,r17,r2
    2428:	88800015 	stw	r2,0(r17)
    242c:	9009883a 	mov	r4,r18
    2430:	000eb940 	call	eb94 <__malloc_unlock>
    2434:	80800204 	addi	r2,r16,8
    2438:	003f3c06 	br	212c <__alt_data_end+0xff00212c>
    243c:	30c00117 	ldw	r3,4(r6)
    2440:	003ee706 	br	1fe0 <__alt_data_end+0xff001fe0>
    2444:	5ac00044 	addi	r11,r11,1
    2448:	588000cc 	andi	r2,r11,3
    244c:	31800204 	addi	r6,r6,8
    2450:	103efd1e 	bne	r2,zero,2048 <__alt_data_end+0xff002048>
    2454:	00002406 	br	24e8 <_malloc_r+0x660>
    2458:	14000317 	ldw	r16,12(r2)
    245c:	143f251e 	bne	r2,r16,20f4 <__alt_data_end+0xff0020f4>
    2460:	21000084 	addi	r4,r4,2
    2464:	003ebc06 	br	1f58 <__alt_data_end+0xff001f58>
    2468:	8085883a 	add	r2,r16,r2
    246c:	10c00117 	ldw	r3,4(r2)
    2470:	81000317 	ldw	r4,12(r16)
    2474:	81400217 	ldw	r5,8(r16)
    2478:	18c00054 	ori	r3,r3,1
    247c:	10c00115 	stw	r3,4(r2)
    2480:	29000315 	stw	r4,12(r5)
    2484:	21400215 	stw	r5,8(r4)
    2488:	9009883a 	mov	r4,r18
    248c:	000eb940 	call	eb94 <__malloc_unlock>
    2490:	80800204 	addi	r2,r16,8
    2494:	003f2506 	br	212c <__alt_data_end+0xff00212c>
    2498:	12001704 	addi	r8,r2,92
    249c:	11c016c4 	addi	r7,r2,91
    24a0:	4209883a 	add	r4,r8,r8
    24a4:	003e9606 	br	1f00 <__alt_data_end+0xff001f00>
    24a8:	3804d1ba 	srli	r2,r7,6
    24ac:	11400e44 	addi	r5,r2,57
    24b0:	10c00e04 	addi	r3,r2,56
    24b4:	294b883a 	add	r5,r5,r5
    24b8:	003fbc06 	br	23ac <__alt_data_end+0xff0023ac>
    24bc:	84ff5926 	beq	r16,r19,2224 <__alt_data_end+0xff002224>
    24c0:	00800074 	movhi	r2,1
    24c4:	1085ff04 	addi	r2,r2,6140
    24c8:	14000217 	ldw	r16,8(r2)
    24cc:	00bfff04 	movi	r2,-4
    24d0:	80c00117 	ldw	r3,4(r16)
    24d4:	1886703a 	and	r3,r3,r2
    24d8:	003f9106 	br	2320 <__alt_data_end+0xff002320>
    24dc:	60800217 	ldw	r2,8(r12)
    24e0:	213fffc4 	addi	r4,r4,-1
    24e4:	1300651e 	bne	r2,r12,267c <_malloc_r+0x7f4>
    24e8:	208000cc 	andi	r2,r4,3
    24ec:	633ffe04 	addi	r12,r12,-8
    24f0:	103ffa1e 	bne	r2,zero,24dc <__alt_data_end+0xff0024dc>
    24f4:	98800117 	ldw	r2,4(r19)
    24f8:	0146303a 	nor	r3,zero,r5
    24fc:	1884703a 	and	r2,r3,r2
    2500:	98800115 	stw	r2,4(r19)
    2504:	294b883a 	add	r5,r5,r5
    2508:	117f2836 	bltu	r2,r5,21ac <__alt_data_end+0xff0021ac>
    250c:	283f2726 	beq	r5,zero,21ac <__alt_data_end+0xff0021ac>
    2510:	2886703a 	and	r3,r5,r2
    2514:	5809883a 	mov	r4,r11
    2518:	183ec31e 	bne	r3,zero,2028 <__alt_data_end+0xff002028>
    251c:	294b883a 	add	r5,r5,r5
    2520:	2886703a 	and	r3,r5,r2
    2524:	21000104 	addi	r4,r4,4
    2528:	183ffc26 	beq	r3,zero,251c <__alt_data_end+0xff00251c>
    252c:	003ebe06 	br	2028 <__alt_data_end+0xff002028>
    2530:	00c05504 	movi	r3,340
    2534:	18801236 	bltu	r3,r2,2580 <_malloc_r+0x6f8>
    2538:	8804d3fa 	srli	r2,r17,15
    253c:	12001e04 	addi	r8,r2,120
    2540:	11c01dc4 	addi	r7,r2,119
    2544:	4209883a 	add	r4,r8,r8
    2548:	003e6d06 	br	1f00 <__alt_data_end+0xff001f00>
    254c:	00c40004 	movi	r3,4096
    2550:	003f4606 	br	226c <__alt_data_end+0xff00226c>
    2554:	00800044 	movi	r2,1
    2558:	a0800115 	stw	r2,4(r20)
    255c:	003f7406 	br	2330 <__alt_data_end+0xff002330>
    2560:	1805d0ba 	srai	r2,r3,2
    2564:	01c00044 	movi	r7,1
    2568:	30c00117 	ldw	r3,4(r6)
    256c:	388e983a 	sll	r7,r7,r2
    2570:	2805883a 	mov	r2,r5
    2574:	38c6b03a 	or	r3,r7,r3
    2578:	30c00115 	stw	r3,4(r6)
    257c:	003f9b06 	br	23ec <__alt_data_end+0xff0023ec>
    2580:	00c15504 	movi	r3,1364
    2584:	18801a36 	bltu	r3,r2,25f0 <_malloc_r+0x768>
    2588:	8804d4ba 	srli	r2,r17,18
    258c:	12001f44 	addi	r8,r2,125
    2590:	11c01f04 	addi	r7,r2,124
    2594:	4209883a 	add	r4,r8,r8
    2598:	003e5906 	br	1f00 <__alt_data_end+0xff001f00>
    259c:	ad400404 	addi	r21,r21,16
    25a0:	003f1706 	br	2200 <__alt_data_end+0xff002200>
    25a4:	00c01504 	movi	r3,84
    25a8:	18802336 	bltu	r3,r2,2638 <_malloc_r+0x7b0>
    25ac:	3804d33a 	srli	r2,r7,12
    25b0:	11401bc4 	addi	r5,r2,111
    25b4:	10c01b84 	addi	r3,r2,110
    25b8:	294b883a 	add	r5,r5,r5
    25bc:	003f7b06 	br	23ac <__alt_data_end+0xff0023ac>
    25c0:	9c000217 	ldw	r16,8(r19)
    25c4:	00bfff04 	movi	r2,-4
    25c8:	80c00117 	ldw	r3,4(r16)
    25cc:	1886703a 	and	r3,r3,r2
    25d0:	003f5306 	br	2320 <__alt_data_end+0xff002320>
    25d4:	3083ffcc 	andi	r2,r6,4095
    25d8:	103f181e 	bne	r2,zero,223c <__alt_data_end+0xff00223c>
    25dc:	99000217 	ldw	r4,8(r19)
    25e0:	b545883a 	add	r2,r22,r21
    25e4:	10800054 	ori	r2,r2,1
    25e8:	20800115 	stw	r2,4(r4)
    25ec:	003f3e06 	br	22e8 <__alt_data_end+0xff0022e8>
    25f0:	01003f84 	movi	r4,254
    25f4:	02001fc4 	movi	r8,127
    25f8:	01c01f84 	movi	r7,126
    25fc:	003e4006 	br	1f00 <__alt_data_end+0xff001f00>
    2600:	00800074 	movhi	r2,1
    2604:	108caa04 	addi	r2,r2,12968
    2608:	15000015 	stw	r20,0(r2)
    260c:	003f1106 	br	2254 <__alt_data_end+0xff002254>
    2610:	00800044 	movi	r2,1
    2614:	002b883a 	mov	r21,zero
    2618:	003f1f06 	br	2298 <__alt_data_end+0xff002298>
    261c:	81400204 	addi	r5,r16,8
    2620:	9009883a 	mov	r4,r18
    2624:	0006e200 	call	6e20 <_free_r>
    2628:	00800074 	movhi	r2,1
    262c:	10938f04 	addi	r2,r2,20028
    2630:	10c00017 	ldw	r3,0(r2)
    2634:	003f2c06 	br	22e8 <__alt_data_end+0xff0022e8>
    2638:	00c05504 	movi	r3,340
    263c:	18800536 	bltu	r3,r2,2654 <_malloc_r+0x7cc>
    2640:	3804d3fa 	srli	r2,r7,15
    2644:	11401e04 	addi	r5,r2,120
    2648:	10c01dc4 	addi	r3,r2,119
    264c:	294b883a 	add	r5,r5,r5
    2650:	003f5606 	br	23ac <__alt_data_end+0xff0023ac>
    2654:	00c15504 	movi	r3,1364
    2658:	18800536 	bltu	r3,r2,2670 <_malloc_r+0x7e8>
    265c:	3804d4ba 	srli	r2,r7,18
    2660:	11401f44 	addi	r5,r2,125
    2664:	10c01f04 	addi	r3,r2,124
    2668:	294b883a 	add	r5,r5,r5
    266c:	003f4f06 	br	23ac <__alt_data_end+0xff0023ac>
    2670:	01403f84 	movi	r5,254
    2674:	00c01f84 	movi	r3,126
    2678:	003f4c06 	br	23ac <__alt_data_end+0xff0023ac>
    267c:	98800117 	ldw	r2,4(r19)
    2680:	003fa006 	br	2504 <__alt_data_end+0xff002504>
    2684:	8808d0fa 	srli	r4,r17,3
    2688:	20800044 	addi	r2,r4,1
    268c:	1085883a 	add	r2,r2,r2
    2690:	003e9006 	br	20d4 <__alt_data_end+0xff0020d4>

00002694 <memcpy>:
    2694:	defffd04 	addi	sp,sp,-12
    2698:	dfc00215 	stw	ra,8(sp)
    269c:	dc400115 	stw	r17,4(sp)
    26a0:	dc000015 	stw	r16,0(sp)
    26a4:	00c003c4 	movi	r3,15
    26a8:	2005883a 	mov	r2,r4
    26ac:	1980452e 	bgeu	r3,r6,27c4 <memcpy+0x130>
    26b0:	2906b03a 	or	r3,r5,r4
    26b4:	18c000cc 	andi	r3,r3,3
    26b8:	1800441e 	bne	r3,zero,27cc <memcpy+0x138>
    26bc:	347ffc04 	addi	r17,r6,-16
    26c0:	8822d13a 	srli	r17,r17,4
    26c4:	28c00104 	addi	r3,r5,4
    26c8:	23400104 	addi	r13,r4,4
    26cc:	8820913a 	slli	r16,r17,4
    26d0:	2b000204 	addi	r12,r5,8
    26d4:	22c00204 	addi	r11,r4,8
    26d8:	84000504 	addi	r16,r16,20
    26dc:	2a800304 	addi	r10,r5,12
    26e0:	22400304 	addi	r9,r4,12
    26e4:	2c21883a 	add	r16,r5,r16
    26e8:	2811883a 	mov	r8,r5
    26ec:	200f883a 	mov	r7,r4
    26f0:	41000017 	ldw	r4,0(r8)
    26f4:	1fc00017 	ldw	ra,0(r3)
    26f8:	63c00017 	ldw	r15,0(r12)
    26fc:	39000015 	stw	r4,0(r7)
    2700:	53800017 	ldw	r14,0(r10)
    2704:	6fc00015 	stw	ra,0(r13)
    2708:	5bc00015 	stw	r15,0(r11)
    270c:	4b800015 	stw	r14,0(r9)
    2710:	18c00404 	addi	r3,r3,16
    2714:	39c00404 	addi	r7,r7,16
    2718:	42000404 	addi	r8,r8,16
    271c:	6b400404 	addi	r13,r13,16
    2720:	63000404 	addi	r12,r12,16
    2724:	5ac00404 	addi	r11,r11,16
    2728:	52800404 	addi	r10,r10,16
    272c:	4a400404 	addi	r9,r9,16
    2730:	1c3fef1e 	bne	r3,r16,26f0 <__alt_data_end+0xff0026f0>
    2734:	89c00044 	addi	r7,r17,1
    2738:	380e913a 	slli	r7,r7,4
    273c:	310003cc 	andi	r4,r6,15
    2740:	02c000c4 	movi	r11,3
    2744:	11c7883a 	add	r3,r2,r7
    2748:	29cb883a 	add	r5,r5,r7
    274c:	5900212e 	bgeu	r11,r4,27d4 <memcpy+0x140>
    2750:	1813883a 	mov	r9,r3
    2754:	2811883a 	mov	r8,r5
    2758:	200f883a 	mov	r7,r4
    275c:	42800017 	ldw	r10,0(r8)
    2760:	4a400104 	addi	r9,r9,4
    2764:	39ffff04 	addi	r7,r7,-4
    2768:	4abfff15 	stw	r10,-4(r9)
    276c:	42000104 	addi	r8,r8,4
    2770:	59fffa36 	bltu	r11,r7,275c <__alt_data_end+0xff00275c>
    2774:	213fff04 	addi	r4,r4,-4
    2778:	2008d0ba 	srli	r4,r4,2
    277c:	318000cc 	andi	r6,r6,3
    2780:	21000044 	addi	r4,r4,1
    2784:	2109883a 	add	r4,r4,r4
    2788:	2109883a 	add	r4,r4,r4
    278c:	1907883a 	add	r3,r3,r4
    2790:	290b883a 	add	r5,r5,r4
    2794:	30000626 	beq	r6,zero,27b0 <memcpy+0x11c>
    2798:	198d883a 	add	r6,r3,r6
    279c:	29c00003 	ldbu	r7,0(r5)
    27a0:	18c00044 	addi	r3,r3,1
    27a4:	29400044 	addi	r5,r5,1
    27a8:	19ffffc5 	stb	r7,-1(r3)
    27ac:	19bffb1e 	bne	r3,r6,279c <__alt_data_end+0xff00279c>
    27b0:	dfc00217 	ldw	ra,8(sp)
    27b4:	dc400117 	ldw	r17,4(sp)
    27b8:	dc000017 	ldw	r16,0(sp)
    27bc:	dec00304 	addi	sp,sp,12
    27c0:	f800283a 	ret
    27c4:	2007883a 	mov	r3,r4
    27c8:	003ff206 	br	2794 <__alt_data_end+0xff002794>
    27cc:	2007883a 	mov	r3,r4
    27d0:	003ff106 	br	2798 <__alt_data_end+0xff002798>
    27d4:	200d883a 	mov	r6,r4
    27d8:	003fee06 	br	2794 <__alt_data_end+0xff002794>

000027dc <_printf_r>:
    27dc:	defffd04 	addi	sp,sp,-12
    27e0:	2805883a 	mov	r2,r5
    27e4:	dfc00015 	stw	ra,0(sp)
    27e8:	d9800115 	stw	r6,4(sp)
    27ec:	d9c00215 	stw	r7,8(sp)
    27f0:	21400217 	ldw	r5,8(r4)
    27f4:	d9c00104 	addi	r7,sp,4
    27f8:	100d883a 	mov	r6,r2
    27fc:	0002a080 	call	2a08 <___vfprintf_internal_r>
    2800:	dfc00017 	ldw	ra,0(sp)
    2804:	dec00304 	addi	sp,sp,12
    2808:	f800283a 	ret

0000280c <printf>:
    280c:	defffc04 	addi	sp,sp,-16
    2810:	dfc00015 	stw	ra,0(sp)
    2814:	d9400115 	stw	r5,4(sp)
    2818:	d9800215 	stw	r6,8(sp)
    281c:	d9c00315 	stw	r7,12(sp)
    2820:	00800074 	movhi	r2,1
    2824:	108cad04 	addi	r2,r2,12980
    2828:	10800017 	ldw	r2,0(r2)
    282c:	200b883a 	mov	r5,r4
    2830:	d9800104 	addi	r6,sp,4
    2834:	11000217 	ldw	r4,8(r2)
    2838:	0004c000 	call	4c00 <__vfprintf_internal>
    283c:	dfc00017 	ldw	ra,0(sp)
    2840:	dec00404 	addi	sp,sp,16
    2844:	f800283a 	ret

00002848 <_puts_r>:
    2848:	defff604 	addi	sp,sp,-40
    284c:	dc000715 	stw	r16,28(sp)
    2850:	2021883a 	mov	r16,r4
    2854:	2809883a 	mov	r4,r5
    2858:	dc400815 	stw	r17,32(sp)
    285c:	dfc00915 	stw	ra,36(sp)
    2860:	2823883a 	mov	r17,r5
    2864:	00029700 	call	2970 <strlen>
    2868:	10c00044 	addi	r3,r2,1
    286c:	d8800115 	stw	r2,4(sp)
    2870:	00800074 	movhi	r2,1
    2874:	10853d04 	addi	r2,r2,5364
    2878:	d8800215 	stw	r2,8(sp)
    287c:	00800044 	movi	r2,1
    2880:	d8800315 	stw	r2,12(sp)
    2884:	00800084 	movi	r2,2
    2888:	dc400015 	stw	r17,0(sp)
    288c:	d8c00615 	stw	r3,24(sp)
    2890:	dec00415 	stw	sp,16(sp)
    2894:	d8800515 	stw	r2,20(sp)
    2898:	80000226 	beq	r16,zero,28a4 <_puts_r+0x5c>
    289c:	80800e17 	ldw	r2,56(r16)
    28a0:	10001426 	beq	r2,zero,28f4 <_puts_r+0xac>
    28a4:	81400217 	ldw	r5,8(r16)
    28a8:	2880030b 	ldhu	r2,12(r5)
    28ac:	10c8000c 	andi	r3,r2,8192
    28b0:	1800061e 	bne	r3,zero,28cc <_puts_r+0x84>
    28b4:	29001917 	ldw	r4,100(r5)
    28b8:	00f7ffc4 	movi	r3,-8193
    28bc:	10880014 	ori	r2,r2,8192
    28c0:	20c6703a 	and	r3,r4,r3
    28c4:	2880030d 	sth	r2,12(r5)
    28c8:	28c01915 	stw	r3,100(r5)
    28cc:	d9800404 	addi	r6,sp,16
    28d0:	8009883a 	mov	r4,r16
    28d4:	00071300 	call	7130 <__sfvwrite_r>
    28d8:	1000091e 	bne	r2,zero,2900 <_puts_r+0xb8>
    28dc:	00800284 	movi	r2,10
    28e0:	dfc00917 	ldw	ra,36(sp)
    28e4:	dc400817 	ldw	r17,32(sp)
    28e8:	dc000717 	ldw	r16,28(sp)
    28ec:	dec00a04 	addi	sp,sp,40
    28f0:	f800283a 	ret
    28f4:	8009883a 	mov	r4,r16
    28f8:	0006cac0 	call	6cac <__sinit>
    28fc:	003fe906 	br	28a4 <__alt_data_end+0xff0028a4>
    2900:	00bfffc4 	movi	r2,-1
    2904:	003ff606 	br	28e0 <__alt_data_end+0xff0028e0>

00002908 <puts>:
    2908:	00800074 	movhi	r2,1
    290c:	108cad04 	addi	r2,r2,12980
    2910:	200b883a 	mov	r5,r4
    2914:	11000017 	ldw	r4,0(r2)
    2918:	00028481 	jmpi	2848 <_puts_r>

0000291c <_sbrk_r>:
    291c:	defffd04 	addi	sp,sp,-12
    2920:	dc000015 	stw	r16,0(sp)
    2924:	04000074 	movhi	r16,1
    2928:	dc400115 	stw	r17,4(sp)
    292c:	84138204 	addi	r16,r16,19976
    2930:	2023883a 	mov	r17,r4
    2934:	2809883a 	mov	r4,r5
    2938:	dfc00215 	stw	ra,8(sp)
    293c:	80000015 	stw	zero,0(r16)
    2940:	000ed540 	call	ed54 <sbrk>
    2944:	00ffffc4 	movi	r3,-1
    2948:	10c00526 	beq	r2,r3,2960 <_sbrk_r+0x44>
    294c:	dfc00217 	ldw	ra,8(sp)
    2950:	dc400117 	ldw	r17,4(sp)
    2954:	dc000017 	ldw	r16,0(sp)
    2958:	dec00304 	addi	sp,sp,12
    295c:	f800283a 	ret
    2960:	80c00017 	ldw	r3,0(r16)
    2964:	183ff926 	beq	r3,zero,294c <__alt_data_end+0xff00294c>
    2968:	88c00015 	stw	r3,0(r17)
    296c:	003ff706 	br	294c <__alt_data_end+0xff00294c>

00002970 <strlen>:
    2970:	208000cc 	andi	r2,r4,3
    2974:	10002026 	beq	r2,zero,29f8 <strlen+0x88>
    2978:	20800007 	ldb	r2,0(r4)
    297c:	10002026 	beq	r2,zero,2a00 <strlen+0x90>
    2980:	2005883a 	mov	r2,r4
    2984:	00000206 	br	2990 <strlen+0x20>
    2988:	10c00007 	ldb	r3,0(r2)
    298c:	18001826 	beq	r3,zero,29f0 <strlen+0x80>
    2990:	10800044 	addi	r2,r2,1
    2994:	10c000cc 	andi	r3,r2,3
    2998:	183ffb1e 	bne	r3,zero,2988 <__alt_data_end+0xff002988>
    299c:	10c00017 	ldw	r3,0(r2)
    29a0:	01ffbff4 	movhi	r7,65279
    29a4:	39ffbfc4 	addi	r7,r7,-257
    29a8:	00ca303a 	nor	r5,zero,r3
    29ac:	01a02074 	movhi	r6,32897
    29b0:	19c7883a 	add	r3,r3,r7
    29b4:	31a02004 	addi	r6,r6,-32640
    29b8:	1946703a 	and	r3,r3,r5
    29bc:	1986703a 	and	r3,r3,r6
    29c0:	1800091e 	bne	r3,zero,29e8 <strlen+0x78>
    29c4:	10800104 	addi	r2,r2,4
    29c8:	10c00017 	ldw	r3,0(r2)
    29cc:	19cb883a 	add	r5,r3,r7
    29d0:	00c6303a 	nor	r3,zero,r3
    29d4:	28c6703a 	and	r3,r5,r3
    29d8:	1986703a 	and	r3,r3,r6
    29dc:	183ff926 	beq	r3,zero,29c4 <__alt_data_end+0xff0029c4>
    29e0:	00000106 	br	29e8 <strlen+0x78>
    29e4:	10800044 	addi	r2,r2,1
    29e8:	10c00007 	ldb	r3,0(r2)
    29ec:	183ffd1e 	bne	r3,zero,29e4 <__alt_data_end+0xff0029e4>
    29f0:	1105c83a 	sub	r2,r2,r4
    29f4:	f800283a 	ret
    29f8:	2005883a 	mov	r2,r4
    29fc:	003fe706 	br	299c <__alt_data_end+0xff00299c>
    2a00:	0005883a 	mov	r2,zero
    2a04:	f800283a 	ret

00002a08 <___vfprintf_internal_r>:
    2a08:	deffb804 	addi	sp,sp,-288
    2a0c:	dfc04715 	stw	ra,284(sp)
    2a10:	ddc04515 	stw	r23,276(sp)
    2a14:	dd404315 	stw	r21,268(sp)
    2a18:	d9002c15 	stw	r4,176(sp)
    2a1c:	282f883a 	mov	r23,r5
    2a20:	302b883a 	mov	r21,r6
    2a24:	d9c02d15 	stw	r7,180(sp)
    2a28:	df004615 	stw	fp,280(sp)
    2a2c:	dd804415 	stw	r22,272(sp)
    2a30:	dd004215 	stw	r20,264(sp)
    2a34:	dcc04115 	stw	r19,260(sp)
    2a38:	dc804015 	stw	r18,256(sp)
    2a3c:	dc403f15 	stw	r17,252(sp)
    2a40:	dc003e15 	stw	r16,248(sp)
    2a44:	00078200 	call	7820 <_localeconv_r>
    2a48:	10800017 	ldw	r2,0(r2)
    2a4c:	1009883a 	mov	r4,r2
    2a50:	d8803415 	stw	r2,208(sp)
    2a54:	00029700 	call	2970 <strlen>
    2a58:	d8803715 	stw	r2,220(sp)
    2a5c:	d8802c17 	ldw	r2,176(sp)
    2a60:	10000226 	beq	r2,zero,2a6c <___vfprintf_internal_r+0x64>
    2a64:	10800e17 	ldw	r2,56(r2)
    2a68:	1000f926 	beq	r2,zero,2e50 <___vfprintf_internal_r+0x448>
    2a6c:	b880030b 	ldhu	r2,12(r23)
    2a70:	10c8000c 	andi	r3,r2,8192
    2a74:	1800061e 	bne	r3,zero,2a90 <___vfprintf_internal_r+0x88>
    2a78:	b9001917 	ldw	r4,100(r23)
    2a7c:	00f7ffc4 	movi	r3,-8193
    2a80:	10880014 	ori	r2,r2,8192
    2a84:	20c6703a 	and	r3,r4,r3
    2a88:	b880030d 	sth	r2,12(r23)
    2a8c:	b8c01915 	stw	r3,100(r23)
    2a90:	10c0020c 	andi	r3,r2,8
    2a94:	1800c126 	beq	r3,zero,2d9c <___vfprintf_internal_r+0x394>
    2a98:	b8c00417 	ldw	r3,16(r23)
    2a9c:	1800bf26 	beq	r3,zero,2d9c <___vfprintf_internal_r+0x394>
    2aa0:	1080068c 	andi	r2,r2,26
    2aa4:	00c00284 	movi	r3,10
    2aa8:	10c0c426 	beq	r2,r3,2dbc <___vfprintf_internal_r+0x3b4>
    2aac:	d8c00404 	addi	r3,sp,16
    2ab0:	05000074 	movhi	r20,1
    2ab4:	d9001e04 	addi	r4,sp,120
    2ab8:	a5055284 	addi	r20,r20,5450
    2abc:	d8c01e15 	stw	r3,120(sp)
    2ac0:	d8002015 	stw	zero,128(sp)
    2ac4:	d8001f15 	stw	zero,124(sp)
    2ac8:	d8003315 	stw	zero,204(sp)
    2acc:	d8003615 	stw	zero,216(sp)
    2ad0:	d8003815 	stw	zero,224(sp)
    2ad4:	1811883a 	mov	r8,r3
    2ad8:	d8003915 	stw	zero,228(sp)
    2adc:	d8003a15 	stw	zero,232(sp)
    2ae0:	d8002f15 	stw	zero,188(sp)
    2ae4:	d9002815 	stw	r4,160(sp)
    2ae8:	a8800007 	ldb	r2,0(r21)
    2aec:	10027b26 	beq	r2,zero,34dc <___vfprintf_internal_r+0xad4>
    2af0:	00c00944 	movi	r3,37
    2af4:	a821883a 	mov	r16,r21
    2af8:	10c0021e 	bne	r2,r3,2b04 <___vfprintf_internal_r+0xfc>
    2afc:	00001406 	br	2b50 <___vfprintf_internal_r+0x148>
    2b00:	10c00326 	beq	r2,r3,2b10 <___vfprintf_internal_r+0x108>
    2b04:	84000044 	addi	r16,r16,1
    2b08:	80800007 	ldb	r2,0(r16)
    2b0c:	103ffc1e 	bne	r2,zero,2b00 <__alt_data_end+0xff002b00>
    2b10:	8563c83a 	sub	r17,r16,r21
    2b14:	88000e26 	beq	r17,zero,2b50 <___vfprintf_internal_r+0x148>
    2b18:	d8c02017 	ldw	r3,128(sp)
    2b1c:	d8801f17 	ldw	r2,124(sp)
    2b20:	45400015 	stw	r21,0(r8)
    2b24:	1c47883a 	add	r3,r3,r17
    2b28:	10800044 	addi	r2,r2,1
    2b2c:	d8c02015 	stw	r3,128(sp)
    2b30:	44400115 	stw	r17,4(r8)
    2b34:	d8801f15 	stw	r2,124(sp)
    2b38:	00c001c4 	movi	r3,7
    2b3c:	1880a716 	blt	r3,r2,2ddc <___vfprintf_internal_r+0x3d4>
    2b40:	42000204 	addi	r8,r8,8
    2b44:	d9402f17 	ldw	r5,188(sp)
    2b48:	2c4b883a 	add	r5,r5,r17
    2b4c:	d9402f15 	stw	r5,188(sp)
    2b50:	80800007 	ldb	r2,0(r16)
    2b54:	1000a826 	beq	r2,zero,2df8 <___vfprintf_internal_r+0x3f0>
    2b58:	84400047 	ldb	r17,1(r16)
    2b5c:	00bfffc4 	movi	r2,-1
    2b60:	85400044 	addi	r21,r16,1
    2b64:	d8002785 	stb	zero,158(sp)
    2b68:	0007883a 	mov	r3,zero
    2b6c:	000f883a 	mov	r7,zero
    2b70:	d8802915 	stw	r2,164(sp)
    2b74:	d8003115 	stw	zero,196(sp)
    2b78:	0025883a 	mov	r18,zero
    2b7c:	01401604 	movi	r5,88
    2b80:	01800244 	movi	r6,9
    2b84:	02800a84 	movi	r10,42
    2b88:	02401b04 	movi	r9,108
    2b8c:	ad400044 	addi	r21,r21,1
    2b90:	88bff804 	addi	r2,r17,-32
    2b94:	28830436 	bltu	r5,r2,37a8 <___vfprintf_internal_r+0xda0>
    2b98:	100490ba 	slli	r2,r2,2
    2b9c:	01000034 	movhi	r4,0
    2ba0:	210aec04 	addi	r4,r4,11184
    2ba4:	1105883a 	add	r2,r2,r4
    2ba8:	10800017 	ldw	r2,0(r2)
    2bac:	1000683a 	jmp	r2
    2bb0:	000036c8 	cmpgei	zero,zero,219
    2bb4:	000037a8 	cmpgeui	zero,zero,222
    2bb8:	000037a8 	cmpgeui	zero,zero,222
    2bbc:	000036e8 	cmpgeui	zero,zero,219
    2bc0:	000037a8 	cmpgeui	zero,zero,222
    2bc4:	000037a8 	cmpgeui	zero,zero,222
    2bc8:	000037a8 	cmpgeui	zero,zero,222
    2bcc:	000037a8 	cmpgeui	zero,zero,222
    2bd0:	000037a8 	cmpgeui	zero,zero,222
    2bd4:	000037a8 	cmpgeui	zero,zero,222
    2bd8:	00002e5c 	xori	zero,zero,185
    2bdc:	00003604 	movi	zero,216
    2be0:	000037a8 	cmpgeui	zero,zero,222
    2be4:	00002d24 	muli	zero,zero,180
    2be8:	00002e84 	movi	zero,186
    2bec:	000037a8 	cmpgeui	zero,zero,222
    2bf0:	00002ec4 	movi	zero,187
    2bf4:	00002ed0 	cmplti	zero,zero,187
    2bf8:	00002ed0 	cmplti	zero,zero,187
    2bfc:	00002ed0 	cmplti	zero,zero,187
    2c00:	00002ed0 	cmplti	zero,zero,187
    2c04:	00002ed0 	cmplti	zero,zero,187
    2c08:	00002ed0 	cmplti	zero,zero,187
    2c0c:	00002ed0 	cmplti	zero,zero,187
    2c10:	00002ed0 	cmplti	zero,zero,187
    2c14:	00002ed0 	cmplti	zero,zero,187
    2c18:	000037a8 	cmpgeui	zero,zero,222
    2c1c:	000037a8 	cmpgeui	zero,zero,222
    2c20:	000037a8 	cmpgeui	zero,zero,222
    2c24:	000037a8 	cmpgeui	zero,zero,222
    2c28:	000037a8 	cmpgeui	zero,zero,222
    2c2c:	000037a8 	cmpgeui	zero,zero,222
    2c30:	000037a8 	cmpgeui	zero,zero,222
    2c34:	000037a8 	cmpgeui	zero,zero,222
    2c38:	000037a8 	cmpgeui	zero,zero,222
    2c3c:	000037a8 	cmpgeui	zero,zero,222
    2c40:	00002f04 	movi	zero,188
    2c44:	00002fc0 	call	2fc <init_camera+0x6c>
    2c48:	000037a8 	cmpgeui	zero,zero,222
    2c4c:	00002fc0 	call	2fc <init_camera+0x6c>
    2c50:	000037a8 	cmpgeui	zero,zero,222
    2c54:	000037a8 	cmpgeui	zero,zero,222
    2c58:	000037a8 	cmpgeui	zero,zero,222
    2c5c:	000037a8 	cmpgeui	zero,zero,222
    2c60:	00003060 	cmpeqi	zero,zero,193
    2c64:	000037a8 	cmpgeui	zero,zero,222
    2c68:	000037a8 	cmpgeui	zero,zero,222
    2c6c:	0000306c 	andhi	zero,zero,193
    2c70:	000037a8 	cmpgeui	zero,zero,222
    2c74:	000037a8 	cmpgeui	zero,zero,222
    2c78:	000037a8 	cmpgeui	zero,zero,222
    2c7c:	000037a8 	cmpgeui	zero,zero,222
    2c80:	000037a8 	cmpgeui	zero,zero,222
    2c84:	000034e4 	muli	zero,zero,211
    2c88:	000037a8 	cmpgeui	zero,zero,222
    2c8c:	000037a8 	cmpgeui	zero,zero,222
    2c90:	00003544 	movi	zero,213
    2c94:	000037a8 	cmpgeui	zero,zero,222
    2c98:	000037a8 	cmpgeui	zero,zero,222
    2c9c:	000037a8 	cmpgeui	zero,zero,222
    2ca0:	000037a8 	cmpgeui	zero,zero,222
    2ca4:	000037a8 	cmpgeui	zero,zero,222
    2ca8:	000037a8 	cmpgeui	zero,zero,222
    2cac:	000037a8 	cmpgeui	zero,zero,222
    2cb0:	000037a8 	cmpgeui	zero,zero,222
    2cb4:	000037a8 	cmpgeui	zero,zero,222
    2cb8:	000037a8 	cmpgeui	zero,zero,222
    2cbc:	00003754 	movui	zero,221
    2cc0:	000036f4 	movhi	zero,219
    2cc4:	00002fc0 	call	2fc <init_camera+0x6c>
    2cc8:	00002fc0 	call	2fc <init_camera+0x6c>
    2ccc:	00002fc0 	call	2fc <init_camera+0x6c>
    2cd0:	00003704 	movi	zero,220
    2cd4:	000036f4 	movhi	zero,219
    2cd8:	000037a8 	cmpgeui	zero,zero,222
    2cdc:	000037a8 	cmpgeui	zero,zero,222
    2ce0:	00003710 	cmplti	zero,zero,220
    2ce4:	000037a8 	cmpgeui	zero,zero,222
    2ce8:	00003720 	cmpeqi	zero,zero,220
    2cec:	000035f4 	movhi	zero,215
    2cf0:	00002d30 	cmpltui	zero,zero,180
    2cf4:	00003614 	movui	zero,216
    2cf8:	000037a8 	cmpgeui	zero,zero,222
    2cfc:	00003620 	cmpeqi	zero,zero,216
    2d00:	000037a8 	cmpgeui	zero,zero,222
    2d04:	0000367c 	xorhi	zero,zero,217
    2d08:	000037a8 	cmpgeui	zero,zero,222
    2d0c:	000037a8 	cmpgeui	zero,zero,222
    2d10:	0000368c 	andi	zero,zero,218
    2d14:	d9003117 	ldw	r4,196(sp)
    2d18:	d8802d15 	stw	r2,180(sp)
    2d1c:	0109c83a 	sub	r4,zero,r4
    2d20:	d9003115 	stw	r4,196(sp)
    2d24:	94800114 	ori	r18,r18,4
    2d28:	ac400007 	ldb	r17,0(r21)
    2d2c:	003f9706 	br	2b8c <__alt_data_end+0xff002b8c>
    2d30:	00800c04 	movi	r2,48
    2d34:	d9002d17 	ldw	r4,180(sp)
    2d38:	d9402917 	ldw	r5,164(sp)
    2d3c:	d8802705 	stb	r2,156(sp)
    2d40:	00801e04 	movi	r2,120
    2d44:	d8802745 	stb	r2,157(sp)
    2d48:	d8002785 	stb	zero,158(sp)
    2d4c:	20c00104 	addi	r3,r4,4
    2d50:	24c00017 	ldw	r19,0(r4)
    2d54:	002d883a 	mov	r22,zero
    2d58:	90800094 	ori	r2,r18,2
    2d5c:	28029a16 	blt	r5,zero,37c8 <___vfprintf_internal_r+0xdc0>
    2d60:	00bfdfc4 	movi	r2,-129
    2d64:	90a4703a 	and	r18,r18,r2
    2d68:	d8c02d15 	stw	r3,180(sp)
    2d6c:	94800094 	ori	r18,r18,2
    2d70:	9802871e 	bne	r19,zero,3790 <___vfprintf_internal_r+0xd88>
    2d74:	00800074 	movhi	r2,1
    2d78:	10854b04 	addi	r2,r2,5420
    2d7c:	d8803915 	stw	r2,228(sp)
    2d80:	04401e04 	movi	r17,120
    2d84:	d8802917 	ldw	r2,164(sp)
    2d88:	0039883a 	mov	fp,zero
    2d8c:	1001e926 	beq	r2,zero,3534 <___vfprintf_internal_r+0xb2c>
    2d90:	0027883a 	mov	r19,zero
    2d94:	002d883a 	mov	r22,zero
    2d98:	00020506 	br	35b0 <___vfprintf_internal_r+0xba8>
    2d9c:	d9002c17 	ldw	r4,176(sp)
    2da0:	b80b883a 	mov	r5,r23
    2da4:	0004cd80 	call	4cd8 <__swsetup_r>
    2da8:	1005ac1e 	bne	r2,zero,445c <___vfprintf_internal_r+0x1a54>
    2dac:	b880030b 	ldhu	r2,12(r23)
    2db0:	00c00284 	movi	r3,10
    2db4:	1080068c 	andi	r2,r2,26
    2db8:	10ff3c1e 	bne	r2,r3,2aac <__alt_data_end+0xff002aac>
    2dbc:	b880038f 	ldh	r2,14(r23)
    2dc0:	103f3a16 	blt	r2,zero,2aac <__alt_data_end+0xff002aac>
    2dc4:	d9c02d17 	ldw	r7,180(sp)
    2dc8:	d9002c17 	ldw	r4,176(sp)
    2dcc:	a80d883a 	mov	r6,r21
    2dd0:	b80b883a 	mov	r5,r23
    2dd4:	0004c1c0 	call	4c1c <__sbprintf>
    2dd8:	00001106 	br	2e20 <___vfprintf_internal_r+0x418>
    2ddc:	d9002c17 	ldw	r4,176(sp)
    2de0:	d9801e04 	addi	r6,sp,120
    2de4:	b80b883a 	mov	r5,r23
    2de8:	000965c0 	call	965c <__sprint_r>
    2dec:	1000081e 	bne	r2,zero,2e10 <___vfprintf_internal_r+0x408>
    2df0:	da000404 	addi	r8,sp,16
    2df4:	003f5306 	br	2b44 <__alt_data_end+0xff002b44>
    2df8:	d8802017 	ldw	r2,128(sp)
    2dfc:	10000426 	beq	r2,zero,2e10 <___vfprintf_internal_r+0x408>
    2e00:	d9002c17 	ldw	r4,176(sp)
    2e04:	d9801e04 	addi	r6,sp,120
    2e08:	b80b883a 	mov	r5,r23
    2e0c:	000965c0 	call	965c <__sprint_r>
    2e10:	b880030b 	ldhu	r2,12(r23)
    2e14:	1080100c 	andi	r2,r2,64
    2e18:	1005901e 	bne	r2,zero,445c <___vfprintf_internal_r+0x1a54>
    2e1c:	d8802f17 	ldw	r2,188(sp)
    2e20:	dfc04717 	ldw	ra,284(sp)
    2e24:	df004617 	ldw	fp,280(sp)
    2e28:	ddc04517 	ldw	r23,276(sp)
    2e2c:	dd804417 	ldw	r22,272(sp)
    2e30:	dd404317 	ldw	r21,268(sp)
    2e34:	dd004217 	ldw	r20,264(sp)
    2e38:	dcc04117 	ldw	r19,260(sp)
    2e3c:	dc804017 	ldw	r18,256(sp)
    2e40:	dc403f17 	ldw	r17,252(sp)
    2e44:	dc003e17 	ldw	r16,248(sp)
    2e48:	dec04804 	addi	sp,sp,288
    2e4c:	f800283a 	ret
    2e50:	d9002c17 	ldw	r4,176(sp)
    2e54:	0006cac0 	call	6cac <__sinit>
    2e58:	003f0406 	br	2a6c <__alt_data_end+0xff002a6c>
    2e5c:	d8802d17 	ldw	r2,180(sp)
    2e60:	d9002d17 	ldw	r4,180(sp)
    2e64:	10800017 	ldw	r2,0(r2)
    2e68:	d8803115 	stw	r2,196(sp)
    2e6c:	20800104 	addi	r2,r4,4
    2e70:	d9003117 	ldw	r4,196(sp)
    2e74:	203fa716 	blt	r4,zero,2d14 <__alt_data_end+0xff002d14>
    2e78:	d8802d15 	stw	r2,180(sp)
    2e7c:	ac400007 	ldb	r17,0(r21)
    2e80:	003f4206 	br	2b8c <__alt_data_end+0xff002b8c>
    2e84:	ac400007 	ldb	r17,0(r21)
    2e88:	aac00044 	addi	r11,r21,1
    2e8c:	8a872826 	beq	r17,r10,4b30 <___vfprintf_internal_r+0x2128>
    2e90:	88bff404 	addi	r2,r17,-48
    2e94:	0009883a 	mov	r4,zero
    2e98:	30867d36 	bltu	r6,r2,4890 <___vfprintf_internal_r+0x1e88>
    2e9c:	5c400007 	ldb	r17,0(r11)
    2ea0:	210002a4 	muli	r4,r4,10
    2ea4:	5d400044 	addi	r21,r11,1
    2ea8:	a817883a 	mov	r11,r21
    2eac:	2089883a 	add	r4,r4,r2
    2eb0:	88bff404 	addi	r2,r17,-48
    2eb4:	30bff92e 	bgeu	r6,r2,2e9c <__alt_data_end+0xff002e9c>
    2eb8:	2005c916 	blt	r4,zero,45e0 <___vfprintf_internal_r+0x1bd8>
    2ebc:	d9002915 	stw	r4,164(sp)
    2ec0:	003f3306 	br	2b90 <__alt_data_end+0xff002b90>
    2ec4:	94802014 	ori	r18,r18,128
    2ec8:	ac400007 	ldb	r17,0(r21)
    2ecc:	003f2f06 	br	2b8c <__alt_data_end+0xff002b8c>
    2ed0:	a809883a 	mov	r4,r21
    2ed4:	d8003115 	stw	zero,196(sp)
    2ed8:	88bff404 	addi	r2,r17,-48
    2edc:	0017883a 	mov	r11,zero
    2ee0:	24400007 	ldb	r17,0(r4)
    2ee4:	5ac002a4 	muli	r11,r11,10
    2ee8:	ad400044 	addi	r21,r21,1
    2eec:	a809883a 	mov	r4,r21
    2ef0:	12d7883a 	add	r11,r2,r11
    2ef4:	88bff404 	addi	r2,r17,-48
    2ef8:	30bff92e 	bgeu	r6,r2,2ee0 <__alt_data_end+0xff002ee0>
    2efc:	dac03115 	stw	r11,196(sp)
    2f00:	003f2306 	br	2b90 <__alt_data_end+0xff002b90>
    2f04:	18c03fcc 	andi	r3,r3,255
    2f08:	18072b1e 	bne	r3,zero,4bb8 <___vfprintf_internal_r+0x21b0>
    2f0c:	94800414 	ori	r18,r18,16
    2f10:	9080080c 	andi	r2,r18,32
    2f14:	10037b26 	beq	r2,zero,3d04 <___vfprintf_internal_r+0x12fc>
    2f18:	d9402d17 	ldw	r5,180(sp)
    2f1c:	28800117 	ldw	r2,4(r5)
    2f20:	2cc00017 	ldw	r19,0(r5)
    2f24:	29400204 	addi	r5,r5,8
    2f28:	d9402d15 	stw	r5,180(sp)
    2f2c:	102d883a 	mov	r22,r2
    2f30:	10044b16 	blt	r2,zero,4060 <___vfprintf_internal_r+0x1658>
    2f34:	d9402917 	ldw	r5,164(sp)
    2f38:	df002783 	ldbu	fp,158(sp)
    2f3c:	2803bc16 	blt	r5,zero,3e30 <___vfprintf_internal_r+0x1428>
    2f40:	00ffdfc4 	movi	r3,-129
    2f44:	9d84b03a 	or	r2,r19,r22
    2f48:	90e4703a 	and	r18,r18,r3
    2f4c:	10017726 	beq	r2,zero,352c <___vfprintf_internal_r+0xb24>
    2f50:	b0038326 	beq	r22,zero,3d60 <___vfprintf_internal_r+0x1358>
    2f54:	dc402a15 	stw	r17,168(sp)
    2f58:	dc001e04 	addi	r16,sp,120
    2f5c:	b023883a 	mov	r17,r22
    2f60:	402d883a 	mov	r22,r8
    2f64:	9809883a 	mov	r4,r19
    2f68:	880b883a 	mov	r5,r17
    2f6c:	01800284 	movi	r6,10
    2f70:	000f883a 	mov	r7,zero
    2f74:	000ba540 	call	ba54 <__umoddi3>
    2f78:	10800c04 	addi	r2,r2,48
    2f7c:	843fffc4 	addi	r16,r16,-1
    2f80:	9809883a 	mov	r4,r19
    2f84:	880b883a 	mov	r5,r17
    2f88:	80800005 	stb	r2,0(r16)
    2f8c:	01800284 	movi	r6,10
    2f90:	000f883a 	mov	r7,zero
    2f94:	000b4dc0 	call	b4dc <__udivdi3>
    2f98:	1027883a 	mov	r19,r2
    2f9c:	10c4b03a 	or	r2,r2,r3
    2fa0:	1823883a 	mov	r17,r3
    2fa4:	103fef1e 	bne	r2,zero,2f64 <__alt_data_end+0xff002f64>
    2fa8:	d8c02817 	ldw	r3,160(sp)
    2fac:	dc402a17 	ldw	r17,168(sp)
    2fb0:	b011883a 	mov	r8,r22
    2fb4:	1c07c83a 	sub	r3,r3,r16
    2fb8:	d8c02e15 	stw	r3,184(sp)
    2fbc:	00005906 	br	3124 <___vfprintf_internal_r+0x71c>
    2fc0:	18c03fcc 	andi	r3,r3,255
    2fc4:	1806fa1e 	bne	r3,zero,4bb0 <___vfprintf_internal_r+0x21a8>
    2fc8:	9080020c 	andi	r2,r18,8
    2fcc:	10048a26 	beq	r2,zero,41f8 <___vfprintf_internal_r+0x17f0>
    2fd0:	d8c02d17 	ldw	r3,180(sp)
    2fd4:	d9002d17 	ldw	r4,180(sp)
    2fd8:	d9402d17 	ldw	r5,180(sp)
    2fdc:	18c00017 	ldw	r3,0(r3)
    2fe0:	21000117 	ldw	r4,4(r4)
    2fe4:	29400204 	addi	r5,r5,8
    2fe8:	d8c03615 	stw	r3,216(sp)
    2fec:	d9003815 	stw	r4,224(sp)
    2ff0:	d9402d15 	stw	r5,180(sp)
    2ff4:	d9003617 	ldw	r4,216(sp)
    2ff8:	d9403817 	ldw	r5,224(sp)
    2ffc:	da003d15 	stw	r8,244(sp)
    3000:	04000044 	movi	r16,1
    3004:	00092d40 	call	92d4 <__fpclassifyd>
    3008:	da003d17 	ldw	r8,244(sp)
    300c:	14041f1e 	bne	r2,r16,408c <___vfprintf_internal_r+0x1684>
    3010:	d9003617 	ldw	r4,216(sp)
    3014:	d9403817 	ldw	r5,224(sp)
    3018:	000d883a 	mov	r6,zero
    301c:	000f883a 	mov	r7,zero
    3020:	000d2840 	call	d284 <__ledf2>
    3024:	da003d17 	ldw	r8,244(sp)
    3028:	1005be16 	blt	r2,zero,4724 <___vfprintf_internal_r+0x1d1c>
    302c:	df002783 	ldbu	fp,158(sp)
    3030:	008011c4 	movi	r2,71
    3034:	1445330e 	bge	r2,r17,4504 <___vfprintf_internal_r+0x1afc>
    3038:	04000074 	movhi	r16,1
    303c:	84054304 	addi	r16,r16,5388
    3040:	00c000c4 	movi	r3,3
    3044:	00bfdfc4 	movi	r2,-129
    3048:	d8c02a15 	stw	r3,168(sp)
    304c:	90a4703a 	and	r18,r18,r2
    3050:	d8c02e15 	stw	r3,184(sp)
    3054:	d8002915 	stw	zero,164(sp)
    3058:	d8003215 	stw	zero,200(sp)
    305c:	00003706 	br	313c <___vfprintf_internal_r+0x734>
    3060:	94800214 	ori	r18,r18,8
    3064:	ac400007 	ldb	r17,0(r21)
    3068:	003ec806 	br	2b8c <__alt_data_end+0xff002b8c>
    306c:	18c03fcc 	andi	r3,r3,255
    3070:	1806db1e 	bne	r3,zero,4be0 <___vfprintf_internal_r+0x21d8>
    3074:	94800414 	ori	r18,r18,16
    3078:	9080080c 	andi	r2,r18,32
    307c:	1002d826 	beq	r2,zero,3be0 <___vfprintf_internal_r+0x11d8>
    3080:	d9402d17 	ldw	r5,180(sp)
    3084:	d8c02917 	ldw	r3,164(sp)
    3088:	d8002785 	stb	zero,158(sp)
    308c:	28800204 	addi	r2,r5,8
    3090:	2cc00017 	ldw	r19,0(r5)
    3094:	2d800117 	ldw	r22,4(r5)
    3098:	18048f16 	blt	r3,zero,42d8 <___vfprintf_internal_r+0x18d0>
    309c:	013fdfc4 	movi	r4,-129
    30a0:	9d86b03a 	or	r3,r19,r22
    30a4:	d8802d15 	stw	r2,180(sp)
    30a8:	9124703a 	and	r18,r18,r4
    30ac:	1802d91e 	bne	r3,zero,3c14 <___vfprintf_internal_r+0x120c>
    30b0:	d8c02917 	ldw	r3,164(sp)
    30b4:	0039883a 	mov	fp,zero
    30b8:	1805c326 	beq	r3,zero,47c8 <___vfprintf_internal_r+0x1dc0>
    30bc:	0027883a 	mov	r19,zero
    30c0:	002d883a 	mov	r22,zero
    30c4:	dc001e04 	addi	r16,sp,120
    30c8:	9806d0fa 	srli	r3,r19,3
    30cc:	b008977a 	slli	r4,r22,29
    30d0:	b02cd0fa 	srli	r22,r22,3
    30d4:	9cc001cc 	andi	r19,r19,7
    30d8:	98800c04 	addi	r2,r19,48
    30dc:	843fffc4 	addi	r16,r16,-1
    30e0:	20e6b03a 	or	r19,r4,r3
    30e4:	80800005 	stb	r2,0(r16)
    30e8:	9d86b03a 	or	r3,r19,r22
    30ec:	183ff61e 	bne	r3,zero,30c8 <__alt_data_end+0xff0030c8>
    30f0:	90c0004c 	andi	r3,r18,1
    30f4:	18013b26 	beq	r3,zero,35e4 <___vfprintf_internal_r+0xbdc>
    30f8:	10803fcc 	andi	r2,r2,255
    30fc:	1080201c 	xori	r2,r2,128
    3100:	10bfe004 	addi	r2,r2,-128
    3104:	00c00c04 	movi	r3,48
    3108:	10c13626 	beq	r2,r3,35e4 <___vfprintf_internal_r+0xbdc>
    310c:	80ffffc5 	stb	r3,-1(r16)
    3110:	d8c02817 	ldw	r3,160(sp)
    3114:	80bfffc4 	addi	r2,r16,-1
    3118:	1021883a 	mov	r16,r2
    311c:	1887c83a 	sub	r3,r3,r2
    3120:	d8c02e15 	stw	r3,184(sp)
    3124:	d8802e17 	ldw	r2,184(sp)
    3128:	d9002917 	ldw	r4,164(sp)
    312c:	1100010e 	bge	r2,r4,3134 <___vfprintf_internal_r+0x72c>
    3130:	2005883a 	mov	r2,r4
    3134:	d8802a15 	stw	r2,168(sp)
    3138:	d8003215 	stw	zero,200(sp)
    313c:	e7003fcc 	andi	fp,fp,255
    3140:	e700201c 	xori	fp,fp,128
    3144:	e73fe004 	addi	fp,fp,-128
    3148:	e0000326 	beq	fp,zero,3158 <___vfprintf_internal_r+0x750>
    314c:	d8c02a17 	ldw	r3,168(sp)
    3150:	18c00044 	addi	r3,r3,1
    3154:	d8c02a15 	stw	r3,168(sp)
    3158:	90c0008c 	andi	r3,r18,2
    315c:	d8c02b15 	stw	r3,172(sp)
    3160:	18000326 	beq	r3,zero,3170 <___vfprintf_internal_r+0x768>
    3164:	d8c02a17 	ldw	r3,168(sp)
    3168:	18c00084 	addi	r3,r3,2
    316c:	d8c02a15 	stw	r3,168(sp)
    3170:	90c0210c 	andi	r3,r18,132
    3174:	d8c03015 	stw	r3,192(sp)
    3178:	1801a31e 	bne	r3,zero,3808 <___vfprintf_internal_r+0xe00>
    317c:	d9003117 	ldw	r4,196(sp)
    3180:	d8c02a17 	ldw	r3,168(sp)
    3184:	20e7c83a 	sub	r19,r4,r3
    3188:	04c19f0e 	bge	zero,r19,3808 <___vfprintf_internal_r+0xe00>
    318c:	02400404 	movi	r9,16
    3190:	d8c02017 	ldw	r3,128(sp)
    3194:	d8801f17 	ldw	r2,124(sp)
    3198:	4cc50d0e 	bge	r9,r19,45d0 <___vfprintf_internal_r+0x1bc8>
    319c:	01400074 	movhi	r5,1
    31a0:	29455684 	addi	r5,r5,5466
    31a4:	dc403b15 	stw	r17,236(sp)
    31a8:	d9403515 	stw	r5,212(sp)
    31ac:	9823883a 	mov	r17,r19
    31b0:	482d883a 	mov	r22,r9
    31b4:	9027883a 	mov	r19,r18
    31b8:	070001c4 	movi	fp,7
    31bc:	8025883a 	mov	r18,r16
    31c0:	dc002c17 	ldw	r16,176(sp)
    31c4:	00000306 	br	31d4 <___vfprintf_internal_r+0x7cc>
    31c8:	8c7ffc04 	addi	r17,r17,-16
    31cc:	42000204 	addi	r8,r8,8
    31d0:	b440130e 	bge	r22,r17,3220 <___vfprintf_internal_r+0x818>
    31d4:	01000074 	movhi	r4,1
    31d8:	18c00404 	addi	r3,r3,16
    31dc:	10800044 	addi	r2,r2,1
    31e0:	21055684 	addi	r4,r4,5466
    31e4:	41000015 	stw	r4,0(r8)
    31e8:	45800115 	stw	r22,4(r8)
    31ec:	d8c02015 	stw	r3,128(sp)
    31f0:	d8801f15 	stw	r2,124(sp)
    31f4:	e0bff40e 	bge	fp,r2,31c8 <__alt_data_end+0xff0031c8>
    31f8:	d9801e04 	addi	r6,sp,120
    31fc:	b80b883a 	mov	r5,r23
    3200:	8009883a 	mov	r4,r16
    3204:	000965c0 	call	965c <__sprint_r>
    3208:	103f011e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    320c:	8c7ffc04 	addi	r17,r17,-16
    3210:	d8c02017 	ldw	r3,128(sp)
    3214:	d8801f17 	ldw	r2,124(sp)
    3218:	da000404 	addi	r8,sp,16
    321c:	b47fed16 	blt	r22,r17,31d4 <__alt_data_end+0xff0031d4>
    3220:	9021883a 	mov	r16,r18
    3224:	9825883a 	mov	r18,r19
    3228:	8827883a 	mov	r19,r17
    322c:	dc403b17 	ldw	r17,236(sp)
    3230:	d9403517 	ldw	r5,212(sp)
    3234:	98c7883a 	add	r3,r19,r3
    3238:	10800044 	addi	r2,r2,1
    323c:	41400015 	stw	r5,0(r8)
    3240:	44c00115 	stw	r19,4(r8)
    3244:	d8c02015 	stw	r3,128(sp)
    3248:	d8801f15 	stw	r2,124(sp)
    324c:	010001c4 	movi	r4,7
    3250:	2082a316 	blt	r4,r2,3ce0 <___vfprintf_internal_r+0x12d8>
    3254:	df002787 	ldb	fp,158(sp)
    3258:	42000204 	addi	r8,r8,8
    325c:	e0000c26 	beq	fp,zero,3290 <___vfprintf_internal_r+0x888>
    3260:	d8801f17 	ldw	r2,124(sp)
    3264:	d9002784 	addi	r4,sp,158
    3268:	18c00044 	addi	r3,r3,1
    326c:	10800044 	addi	r2,r2,1
    3270:	41000015 	stw	r4,0(r8)
    3274:	01000044 	movi	r4,1
    3278:	41000115 	stw	r4,4(r8)
    327c:	d8c02015 	stw	r3,128(sp)
    3280:	d8801f15 	stw	r2,124(sp)
    3284:	010001c4 	movi	r4,7
    3288:	20823c16 	blt	r4,r2,3b7c <___vfprintf_internal_r+0x1174>
    328c:	42000204 	addi	r8,r8,8
    3290:	d8802b17 	ldw	r2,172(sp)
    3294:	10000c26 	beq	r2,zero,32c8 <___vfprintf_internal_r+0x8c0>
    3298:	d8801f17 	ldw	r2,124(sp)
    329c:	d9002704 	addi	r4,sp,156
    32a0:	18c00084 	addi	r3,r3,2
    32a4:	10800044 	addi	r2,r2,1
    32a8:	41000015 	stw	r4,0(r8)
    32ac:	01000084 	movi	r4,2
    32b0:	41000115 	stw	r4,4(r8)
    32b4:	d8c02015 	stw	r3,128(sp)
    32b8:	d8801f15 	stw	r2,124(sp)
    32bc:	010001c4 	movi	r4,7
    32c0:	20823616 	blt	r4,r2,3b9c <___vfprintf_internal_r+0x1194>
    32c4:	42000204 	addi	r8,r8,8
    32c8:	d9003017 	ldw	r4,192(sp)
    32cc:	00802004 	movi	r2,128
    32d0:	20819926 	beq	r4,r2,3938 <___vfprintf_internal_r+0xf30>
    32d4:	d9402917 	ldw	r5,164(sp)
    32d8:	d8802e17 	ldw	r2,184(sp)
    32dc:	28adc83a 	sub	r22,r5,r2
    32e0:	0580310e 	bge	zero,r22,33a8 <___vfprintf_internal_r+0x9a0>
    32e4:	07000404 	movi	fp,16
    32e8:	d8801f17 	ldw	r2,124(sp)
    32ec:	e584140e 	bge	fp,r22,4340 <___vfprintf_internal_r+0x1938>
    32f0:	01400074 	movhi	r5,1
    32f4:	29455284 	addi	r5,r5,5450
    32f8:	dc402915 	stw	r17,164(sp)
    32fc:	d9402b15 	stw	r5,172(sp)
    3300:	b023883a 	mov	r17,r22
    3304:	04c001c4 	movi	r19,7
    3308:	a82d883a 	mov	r22,r21
    330c:	902b883a 	mov	r21,r18
    3310:	8025883a 	mov	r18,r16
    3314:	dc002c17 	ldw	r16,176(sp)
    3318:	00000306 	br	3328 <___vfprintf_internal_r+0x920>
    331c:	8c7ffc04 	addi	r17,r17,-16
    3320:	42000204 	addi	r8,r8,8
    3324:	e440110e 	bge	fp,r17,336c <___vfprintf_internal_r+0x964>
    3328:	18c00404 	addi	r3,r3,16
    332c:	10800044 	addi	r2,r2,1
    3330:	45000015 	stw	r20,0(r8)
    3334:	47000115 	stw	fp,4(r8)
    3338:	d8c02015 	stw	r3,128(sp)
    333c:	d8801f15 	stw	r2,124(sp)
    3340:	98bff60e 	bge	r19,r2,331c <__alt_data_end+0xff00331c>
    3344:	d9801e04 	addi	r6,sp,120
    3348:	b80b883a 	mov	r5,r23
    334c:	8009883a 	mov	r4,r16
    3350:	000965c0 	call	965c <__sprint_r>
    3354:	103eae1e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    3358:	8c7ffc04 	addi	r17,r17,-16
    335c:	d8c02017 	ldw	r3,128(sp)
    3360:	d8801f17 	ldw	r2,124(sp)
    3364:	da000404 	addi	r8,sp,16
    3368:	e47fef16 	blt	fp,r17,3328 <__alt_data_end+0xff003328>
    336c:	9021883a 	mov	r16,r18
    3370:	a825883a 	mov	r18,r21
    3374:	b02b883a 	mov	r21,r22
    3378:	882d883a 	mov	r22,r17
    337c:	dc402917 	ldw	r17,164(sp)
    3380:	d9002b17 	ldw	r4,172(sp)
    3384:	1d87883a 	add	r3,r3,r22
    3388:	10800044 	addi	r2,r2,1
    338c:	41000015 	stw	r4,0(r8)
    3390:	45800115 	stw	r22,4(r8)
    3394:	d8c02015 	stw	r3,128(sp)
    3398:	d8801f15 	stw	r2,124(sp)
    339c:	010001c4 	movi	r4,7
    33a0:	2081ee16 	blt	r4,r2,3b5c <___vfprintf_internal_r+0x1154>
    33a4:	42000204 	addi	r8,r8,8
    33a8:	9080400c 	andi	r2,r18,256
    33ac:	1001181e 	bne	r2,zero,3810 <___vfprintf_internal_r+0xe08>
    33b0:	d9402e17 	ldw	r5,184(sp)
    33b4:	d8801f17 	ldw	r2,124(sp)
    33b8:	44000015 	stw	r16,0(r8)
    33bc:	1947883a 	add	r3,r3,r5
    33c0:	10800044 	addi	r2,r2,1
    33c4:	41400115 	stw	r5,4(r8)
    33c8:	d8c02015 	stw	r3,128(sp)
    33cc:	d8801f15 	stw	r2,124(sp)
    33d0:	010001c4 	movi	r4,7
    33d4:	2081d316 	blt	r4,r2,3b24 <___vfprintf_internal_r+0x111c>
    33d8:	42000204 	addi	r8,r8,8
    33dc:	9480010c 	andi	r18,r18,4
    33e0:	90003226 	beq	r18,zero,34ac <___vfprintf_internal_r+0xaa4>
    33e4:	d9403117 	ldw	r5,196(sp)
    33e8:	d8802a17 	ldw	r2,168(sp)
    33ec:	28a1c83a 	sub	r16,r5,r2
    33f0:	04002e0e 	bge	zero,r16,34ac <___vfprintf_internal_r+0xaa4>
    33f4:	04400404 	movi	r17,16
    33f8:	d8801f17 	ldw	r2,124(sp)
    33fc:	8c04a20e 	bge	r17,r16,4688 <___vfprintf_internal_r+0x1c80>
    3400:	01400074 	movhi	r5,1
    3404:	29455684 	addi	r5,r5,5466
    3408:	d9403515 	stw	r5,212(sp)
    340c:	048001c4 	movi	r18,7
    3410:	dcc02c17 	ldw	r19,176(sp)
    3414:	00000306 	br	3424 <___vfprintf_internal_r+0xa1c>
    3418:	843ffc04 	addi	r16,r16,-16
    341c:	42000204 	addi	r8,r8,8
    3420:	8c00130e 	bge	r17,r16,3470 <___vfprintf_internal_r+0xa68>
    3424:	01000074 	movhi	r4,1
    3428:	18c00404 	addi	r3,r3,16
    342c:	10800044 	addi	r2,r2,1
    3430:	21055684 	addi	r4,r4,5466
    3434:	41000015 	stw	r4,0(r8)
    3438:	44400115 	stw	r17,4(r8)
    343c:	d8c02015 	stw	r3,128(sp)
    3440:	d8801f15 	stw	r2,124(sp)
    3444:	90bff40e 	bge	r18,r2,3418 <__alt_data_end+0xff003418>
    3448:	d9801e04 	addi	r6,sp,120
    344c:	b80b883a 	mov	r5,r23
    3450:	9809883a 	mov	r4,r19
    3454:	000965c0 	call	965c <__sprint_r>
    3458:	103e6d1e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    345c:	843ffc04 	addi	r16,r16,-16
    3460:	d8c02017 	ldw	r3,128(sp)
    3464:	d8801f17 	ldw	r2,124(sp)
    3468:	da000404 	addi	r8,sp,16
    346c:	8c3fed16 	blt	r17,r16,3424 <__alt_data_end+0xff003424>
    3470:	d9403517 	ldw	r5,212(sp)
    3474:	1c07883a 	add	r3,r3,r16
    3478:	10800044 	addi	r2,r2,1
    347c:	41400015 	stw	r5,0(r8)
    3480:	44000115 	stw	r16,4(r8)
    3484:	d8c02015 	stw	r3,128(sp)
    3488:	d8801f15 	stw	r2,124(sp)
    348c:	010001c4 	movi	r4,7
    3490:	2080060e 	bge	r4,r2,34ac <___vfprintf_internal_r+0xaa4>
    3494:	d9002c17 	ldw	r4,176(sp)
    3498:	d9801e04 	addi	r6,sp,120
    349c:	b80b883a 	mov	r5,r23
    34a0:	000965c0 	call	965c <__sprint_r>
    34a4:	103e5a1e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    34a8:	d8c02017 	ldw	r3,128(sp)
    34ac:	d8803117 	ldw	r2,196(sp)
    34b0:	d9002a17 	ldw	r4,168(sp)
    34b4:	1100010e 	bge	r2,r4,34bc <___vfprintf_internal_r+0xab4>
    34b8:	2005883a 	mov	r2,r4
    34bc:	d9402f17 	ldw	r5,188(sp)
    34c0:	288b883a 	add	r5,r5,r2
    34c4:	d9402f15 	stw	r5,188(sp)
    34c8:	18019e1e 	bne	r3,zero,3b44 <___vfprintf_internal_r+0x113c>
    34cc:	a8800007 	ldb	r2,0(r21)
    34d0:	d8001f15 	stw	zero,124(sp)
    34d4:	da000404 	addi	r8,sp,16
    34d8:	103d851e 	bne	r2,zero,2af0 <__alt_data_end+0xff002af0>
    34dc:	a821883a 	mov	r16,r21
    34e0:	003d9b06 	br	2b50 <__alt_data_end+0xff002b50>
    34e4:	18c03fcc 	andi	r3,r3,255
    34e8:	1805c11e 	bne	r3,zero,4bf0 <___vfprintf_internal_r+0x21e8>
    34ec:	94800414 	ori	r18,r18,16
    34f0:	9080080c 	andi	r2,r18,32
    34f4:	10020c26 	beq	r2,zero,3d28 <___vfprintf_internal_r+0x1320>
    34f8:	d8802d17 	ldw	r2,180(sp)
    34fc:	d9002917 	ldw	r4,164(sp)
    3500:	d8002785 	stb	zero,158(sp)
    3504:	10c00204 	addi	r3,r2,8
    3508:	14c00017 	ldw	r19,0(r2)
    350c:	15800117 	ldw	r22,4(r2)
    3510:	20040f16 	blt	r4,zero,4550 <___vfprintf_internal_r+0x1b48>
    3514:	013fdfc4 	movi	r4,-129
    3518:	9d84b03a 	or	r2,r19,r22
    351c:	d8c02d15 	stw	r3,180(sp)
    3520:	9124703a 	and	r18,r18,r4
    3524:	0039883a 	mov	fp,zero
    3528:	103e891e 	bne	r2,zero,2f50 <__alt_data_end+0xff002f50>
    352c:	d9002917 	ldw	r4,164(sp)
    3530:	2002c11e 	bne	r4,zero,4038 <___vfprintf_internal_r+0x1630>
    3534:	d8002915 	stw	zero,164(sp)
    3538:	d8002e15 	stw	zero,184(sp)
    353c:	dc001e04 	addi	r16,sp,120
    3540:	003ef806 	br	3124 <__alt_data_end+0xff003124>
    3544:	18c03fcc 	andi	r3,r3,255
    3548:	18059d1e 	bne	r3,zero,4bc0 <___vfprintf_internal_r+0x21b8>
    354c:	01400074 	movhi	r5,1
    3550:	29454604 	addi	r5,r5,5400
    3554:	d9403915 	stw	r5,228(sp)
    3558:	9080080c 	andi	r2,r18,32
    355c:	10005226 	beq	r2,zero,36a8 <___vfprintf_internal_r+0xca0>
    3560:	d8802d17 	ldw	r2,180(sp)
    3564:	14c00017 	ldw	r19,0(r2)
    3568:	15800117 	ldw	r22,4(r2)
    356c:	10800204 	addi	r2,r2,8
    3570:	d8802d15 	stw	r2,180(sp)
    3574:	9080004c 	andi	r2,r18,1
    3578:	10019026 	beq	r2,zero,3bbc <___vfprintf_internal_r+0x11b4>
    357c:	9d84b03a 	or	r2,r19,r22
    3580:	10036926 	beq	r2,zero,4328 <___vfprintf_internal_r+0x1920>
    3584:	d8c02917 	ldw	r3,164(sp)
    3588:	00800c04 	movi	r2,48
    358c:	d8802705 	stb	r2,156(sp)
    3590:	dc402745 	stb	r17,157(sp)
    3594:	d8002785 	stb	zero,158(sp)
    3598:	90800094 	ori	r2,r18,2
    359c:	18045d16 	blt	r3,zero,4714 <___vfprintf_internal_r+0x1d0c>
    35a0:	00bfdfc4 	movi	r2,-129
    35a4:	90a4703a 	and	r18,r18,r2
    35a8:	94800094 	ori	r18,r18,2
    35ac:	0039883a 	mov	fp,zero
    35b0:	d9003917 	ldw	r4,228(sp)
    35b4:	dc001e04 	addi	r16,sp,120
    35b8:	988003cc 	andi	r2,r19,15
    35bc:	b006973a 	slli	r3,r22,28
    35c0:	2085883a 	add	r2,r4,r2
    35c4:	9826d13a 	srli	r19,r19,4
    35c8:	10800003 	ldbu	r2,0(r2)
    35cc:	b02cd13a 	srli	r22,r22,4
    35d0:	843fffc4 	addi	r16,r16,-1
    35d4:	1ce6b03a 	or	r19,r3,r19
    35d8:	80800005 	stb	r2,0(r16)
    35dc:	9d84b03a 	or	r2,r19,r22
    35e0:	103ff51e 	bne	r2,zero,35b8 <__alt_data_end+0xff0035b8>
    35e4:	d8c02817 	ldw	r3,160(sp)
    35e8:	1c07c83a 	sub	r3,r3,r16
    35ec:	d8c02e15 	stw	r3,184(sp)
    35f0:	003ecc06 	br	3124 <__alt_data_end+0xff003124>
    35f4:	18c03fcc 	andi	r3,r3,255
    35f8:	183e9f26 	beq	r3,zero,3078 <__alt_data_end+0xff003078>
    35fc:	d9c02785 	stb	r7,158(sp)
    3600:	003e9d06 	br	3078 <__alt_data_end+0xff003078>
    3604:	00c00044 	movi	r3,1
    3608:	01c00ac4 	movi	r7,43
    360c:	ac400007 	ldb	r17,0(r21)
    3610:	003d5e06 	br	2b8c <__alt_data_end+0xff002b8c>
    3614:	94800814 	ori	r18,r18,32
    3618:	ac400007 	ldb	r17,0(r21)
    361c:	003d5b06 	br	2b8c <__alt_data_end+0xff002b8c>
    3620:	d8c02d17 	ldw	r3,180(sp)
    3624:	d8002785 	stb	zero,158(sp)
    3628:	1c000017 	ldw	r16,0(r3)
    362c:	1cc00104 	addi	r19,r3,4
    3630:	80041926 	beq	r16,zero,4698 <___vfprintf_internal_r+0x1c90>
    3634:	d9002917 	ldw	r4,164(sp)
    3638:	2003d016 	blt	r4,zero,457c <___vfprintf_internal_r+0x1b74>
    363c:	200d883a 	mov	r6,r4
    3640:	000b883a 	mov	r5,zero
    3644:	8009883a 	mov	r4,r16
    3648:	da003d15 	stw	r8,244(sp)
    364c:	0007a0c0 	call	7a0c <memchr>
    3650:	da003d17 	ldw	r8,244(sp)
    3654:	10045426 	beq	r2,zero,47a8 <___vfprintf_internal_r+0x1da0>
    3658:	1405c83a 	sub	r2,r2,r16
    365c:	d8802e15 	stw	r2,184(sp)
    3660:	1003cc16 	blt	r2,zero,4594 <___vfprintf_internal_r+0x1b8c>
    3664:	df002783 	ldbu	fp,158(sp)
    3668:	d8802a15 	stw	r2,168(sp)
    366c:	dcc02d15 	stw	r19,180(sp)
    3670:	d8002915 	stw	zero,164(sp)
    3674:	d8003215 	stw	zero,200(sp)
    3678:	003eb006 	br	313c <__alt_data_end+0xff00313c>
    367c:	18c03fcc 	andi	r3,r3,255
    3680:	183f9b26 	beq	r3,zero,34f0 <__alt_data_end+0xff0034f0>
    3684:	d9c02785 	stb	r7,158(sp)
    3688:	003f9906 	br	34f0 <__alt_data_end+0xff0034f0>
    368c:	18c03fcc 	andi	r3,r3,255
    3690:	1805551e 	bne	r3,zero,4be8 <___vfprintf_internal_r+0x21e0>
    3694:	01400074 	movhi	r5,1
    3698:	29454b04 	addi	r5,r5,5420
    369c:	d9403915 	stw	r5,228(sp)
    36a0:	9080080c 	andi	r2,r18,32
    36a4:	103fae1e 	bne	r2,zero,3560 <__alt_data_end+0xff003560>
    36a8:	9080040c 	andi	r2,r18,16
    36ac:	1002de26 	beq	r2,zero,4228 <___vfprintf_internal_r+0x1820>
    36b0:	d8c02d17 	ldw	r3,180(sp)
    36b4:	002d883a 	mov	r22,zero
    36b8:	1cc00017 	ldw	r19,0(r3)
    36bc:	18c00104 	addi	r3,r3,4
    36c0:	d8c02d15 	stw	r3,180(sp)
    36c4:	003fab06 	br	3574 <__alt_data_end+0xff003574>
    36c8:	38803fcc 	andi	r2,r7,255
    36cc:	1080201c 	xori	r2,r2,128
    36d0:	10bfe004 	addi	r2,r2,-128
    36d4:	1002d21e 	bne	r2,zero,4220 <___vfprintf_internal_r+0x1818>
    36d8:	00c00044 	movi	r3,1
    36dc:	01c00804 	movi	r7,32
    36e0:	ac400007 	ldb	r17,0(r21)
    36e4:	003d2906 	br	2b8c <__alt_data_end+0xff002b8c>
    36e8:	94800054 	ori	r18,r18,1
    36ec:	ac400007 	ldb	r17,0(r21)
    36f0:	003d2606 	br	2b8c <__alt_data_end+0xff002b8c>
    36f4:	18c03fcc 	andi	r3,r3,255
    36f8:	183e0526 	beq	r3,zero,2f10 <__alt_data_end+0xff002f10>
    36fc:	d9c02785 	stb	r7,158(sp)
    3700:	003e0306 	br	2f10 <__alt_data_end+0xff002f10>
    3704:	94801014 	ori	r18,r18,64
    3708:	ac400007 	ldb	r17,0(r21)
    370c:	003d1f06 	br	2b8c <__alt_data_end+0xff002b8c>
    3710:	ac400007 	ldb	r17,0(r21)
    3714:	8a438726 	beq	r17,r9,4534 <___vfprintf_internal_r+0x1b2c>
    3718:	94800414 	ori	r18,r18,16
    371c:	003d1b06 	br	2b8c <__alt_data_end+0xff002b8c>
    3720:	18c03fcc 	andi	r3,r3,255
    3724:	1805341e 	bne	r3,zero,4bf8 <___vfprintf_internal_r+0x21f0>
    3728:	9080080c 	andi	r2,r18,32
    372c:	1002cd26 	beq	r2,zero,4264 <___vfprintf_internal_r+0x185c>
    3730:	d9402d17 	ldw	r5,180(sp)
    3734:	d9002f17 	ldw	r4,188(sp)
    3738:	28800017 	ldw	r2,0(r5)
    373c:	2007d7fa 	srai	r3,r4,31
    3740:	29400104 	addi	r5,r5,4
    3744:	d9402d15 	stw	r5,180(sp)
    3748:	11000015 	stw	r4,0(r2)
    374c:	10c00115 	stw	r3,4(r2)
    3750:	003ce506 	br	2ae8 <__alt_data_end+0xff002ae8>
    3754:	d8c02d17 	ldw	r3,180(sp)
    3758:	d9002d17 	ldw	r4,180(sp)
    375c:	d8002785 	stb	zero,158(sp)
    3760:	18800017 	ldw	r2,0(r3)
    3764:	21000104 	addi	r4,r4,4
    3768:	00c00044 	movi	r3,1
    376c:	d8c02a15 	stw	r3,168(sp)
    3770:	d8801405 	stb	r2,80(sp)
    3774:	d9002d15 	stw	r4,180(sp)
    3778:	d8c02e15 	stw	r3,184(sp)
    377c:	d8002915 	stw	zero,164(sp)
    3780:	d8003215 	stw	zero,200(sp)
    3784:	dc001404 	addi	r16,sp,80
    3788:	0039883a 	mov	fp,zero
    378c:	003e7206 	br	3158 <__alt_data_end+0xff003158>
    3790:	01000074 	movhi	r4,1
    3794:	21054b04 	addi	r4,r4,5420
    3798:	0039883a 	mov	fp,zero
    379c:	d9003915 	stw	r4,228(sp)
    37a0:	04401e04 	movi	r17,120
    37a4:	003f8206 	br	35b0 <__alt_data_end+0xff0035b0>
    37a8:	18c03fcc 	andi	r3,r3,255
    37ac:	1805061e 	bne	r3,zero,4bc8 <___vfprintf_internal_r+0x21c0>
    37b0:	883d9126 	beq	r17,zero,2df8 <__alt_data_end+0xff002df8>
    37b4:	00c00044 	movi	r3,1
    37b8:	d8c02a15 	stw	r3,168(sp)
    37bc:	dc401405 	stb	r17,80(sp)
    37c0:	d8002785 	stb	zero,158(sp)
    37c4:	003fec06 	br	3778 <__alt_data_end+0xff003778>
    37c8:	01400074 	movhi	r5,1
    37cc:	29454b04 	addi	r5,r5,5420
    37d0:	d9403915 	stw	r5,228(sp)
    37d4:	d8c02d15 	stw	r3,180(sp)
    37d8:	1025883a 	mov	r18,r2
    37dc:	04401e04 	movi	r17,120
    37e0:	9d84b03a 	or	r2,r19,r22
    37e4:	1000fc1e 	bne	r2,zero,3bd8 <___vfprintf_internal_r+0x11d0>
    37e8:	0039883a 	mov	fp,zero
    37ec:	00800084 	movi	r2,2
    37f0:	10803fcc 	andi	r2,r2,255
    37f4:	00c00044 	movi	r3,1
    37f8:	10c20f26 	beq	r2,r3,4038 <___vfprintf_internal_r+0x1630>
    37fc:	00c00084 	movi	r3,2
    3800:	10fd6326 	beq	r2,r3,2d90 <__alt_data_end+0xff002d90>
    3804:	003e2d06 	br	30bc <__alt_data_end+0xff0030bc>
    3808:	d8c02017 	ldw	r3,128(sp)
    380c:	003e9306 	br	325c <__alt_data_end+0xff00325c>
    3810:	00801944 	movi	r2,101
    3814:	14407e0e 	bge	r2,r17,3a10 <___vfprintf_internal_r+0x1008>
    3818:	d9003617 	ldw	r4,216(sp)
    381c:	d9403817 	ldw	r5,224(sp)
    3820:	000d883a 	mov	r6,zero
    3824:	000f883a 	mov	r7,zero
    3828:	d8c03c15 	stw	r3,240(sp)
    382c:	da003d15 	stw	r8,244(sp)
    3830:	000d1200 	call	d120 <__eqdf2>
    3834:	d8c03c17 	ldw	r3,240(sp)
    3838:	da003d17 	ldw	r8,244(sp)
    383c:	1000f71e 	bne	r2,zero,3c1c <___vfprintf_internal_r+0x1214>
    3840:	d8801f17 	ldw	r2,124(sp)
    3844:	01000074 	movhi	r4,1
    3848:	21055204 	addi	r4,r4,5448
    384c:	18c00044 	addi	r3,r3,1
    3850:	10800044 	addi	r2,r2,1
    3854:	41000015 	stw	r4,0(r8)
    3858:	01000044 	movi	r4,1
    385c:	41000115 	stw	r4,4(r8)
    3860:	d8c02015 	stw	r3,128(sp)
    3864:	d8801f15 	stw	r2,124(sp)
    3868:	010001c4 	movi	r4,7
    386c:	2082b816 	blt	r4,r2,4350 <___vfprintf_internal_r+0x1948>
    3870:	42000204 	addi	r8,r8,8
    3874:	d8802617 	ldw	r2,152(sp)
    3878:	d9403317 	ldw	r5,204(sp)
    387c:	11400216 	blt	r2,r5,3888 <___vfprintf_internal_r+0xe80>
    3880:	9080004c 	andi	r2,r18,1
    3884:	103ed526 	beq	r2,zero,33dc <__alt_data_end+0xff0033dc>
    3888:	d8803717 	ldw	r2,220(sp)
    388c:	d9003417 	ldw	r4,208(sp)
    3890:	d9403717 	ldw	r5,220(sp)
    3894:	1887883a 	add	r3,r3,r2
    3898:	d8801f17 	ldw	r2,124(sp)
    389c:	41000015 	stw	r4,0(r8)
    38a0:	41400115 	stw	r5,4(r8)
    38a4:	10800044 	addi	r2,r2,1
    38a8:	d8c02015 	stw	r3,128(sp)
    38ac:	d8801f15 	stw	r2,124(sp)
    38b0:	010001c4 	movi	r4,7
    38b4:	20832916 	blt	r4,r2,455c <___vfprintf_internal_r+0x1b54>
    38b8:	42000204 	addi	r8,r8,8
    38bc:	d8803317 	ldw	r2,204(sp)
    38c0:	143fffc4 	addi	r16,r2,-1
    38c4:	043ec50e 	bge	zero,r16,33dc <__alt_data_end+0xff0033dc>
    38c8:	04400404 	movi	r17,16
    38cc:	d8801f17 	ldw	r2,124(sp)
    38d0:	8c00880e 	bge	r17,r16,3af4 <___vfprintf_internal_r+0x10ec>
    38d4:	01400074 	movhi	r5,1
    38d8:	29455284 	addi	r5,r5,5450
    38dc:	d9402b15 	stw	r5,172(sp)
    38e0:	058001c4 	movi	r22,7
    38e4:	dcc02c17 	ldw	r19,176(sp)
    38e8:	00000306 	br	38f8 <___vfprintf_internal_r+0xef0>
    38ec:	42000204 	addi	r8,r8,8
    38f0:	843ffc04 	addi	r16,r16,-16
    38f4:	8c00820e 	bge	r17,r16,3b00 <___vfprintf_internal_r+0x10f8>
    38f8:	18c00404 	addi	r3,r3,16
    38fc:	10800044 	addi	r2,r2,1
    3900:	45000015 	stw	r20,0(r8)
    3904:	44400115 	stw	r17,4(r8)
    3908:	d8c02015 	stw	r3,128(sp)
    390c:	d8801f15 	stw	r2,124(sp)
    3910:	b0bff60e 	bge	r22,r2,38ec <__alt_data_end+0xff0038ec>
    3914:	d9801e04 	addi	r6,sp,120
    3918:	b80b883a 	mov	r5,r23
    391c:	9809883a 	mov	r4,r19
    3920:	000965c0 	call	965c <__sprint_r>
    3924:	103d3a1e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    3928:	d8c02017 	ldw	r3,128(sp)
    392c:	d8801f17 	ldw	r2,124(sp)
    3930:	da000404 	addi	r8,sp,16
    3934:	003fee06 	br	38f0 <__alt_data_end+0xff0038f0>
    3938:	d9403117 	ldw	r5,196(sp)
    393c:	d8802a17 	ldw	r2,168(sp)
    3940:	28adc83a 	sub	r22,r5,r2
    3944:	05be630e 	bge	zero,r22,32d4 <__alt_data_end+0xff0032d4>
    3948:	07000404 	movi	fp,16
    394c:	d8801f17 	ldw	r2,124(sp)
    3950:	e5838f0e 	bge	fp,r22,4790 <___vfprintf_internal_r+0x1d88>
    3954:	01400074 	movhi	r5,1
    3958:	29455284 	addi	r5,r5,5450
    395c:	dc403015 	stw	r17,192(sp)
    3960:	d9402b15 	stw	r5,172(sp)
    3964:	b023883a 	mov	r17,r22
    3968:	04c001c4 	movi	r19,7
    396c:	a82d883a 	mov	r22,r21
    3970:	902b883a 	mov	r21,r18
    3974:	8025883a 	mov	r18,r16
    3978:	dc002c17 	ldw	r16,176(sp)
    397c:	00000306 	br	398c <___vfprintf_internal_r+0xf84>
    3980:	8c7ffc04 	addi	r17,r17,-16
    3984:	42000204 	addi	r8,r8,8
    3988:	e440110e 	bge	fp,r17,39d0 <___vfprintf_internal_r+0xfc8>
    398c:	18c00404 	addi	r3,r3,16
    3990:	10800044 	addi	r2,r2,1
    3994:	45000015 	stw	r20,0(r8)
    3998:	47000115 	stw	fp,4(r8)
    399c:	d8c02015 	stw	r3,128(sp)
    39a0:	d8801f15 	stw	r2,124(sp)
    39a4:	98bff60e 	bge	r19,r2,3980 <__alt_data_end+0xff003980>
    39a8:	d9801e04 	addi	r6,sp,120
    39ac:	b80b883a 	mov	r5,r23
    39b0:	8009883a 	mov	r4,r16
    39b4:	000965c0 	call	965c <__sprint_r>
    39b8:	103d151e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    39bc:	8c7ffc04 	addi	r17,r17,-16
    39c0:	d8c02017 	ldw	r3,128(sp)
    39c4:	d8801f17 	ldw	r2,124(sp)
    39c8:	da000404 	addi	r8,sp,16
    39cc:	e47fef16 	blt	fp,r17,398c <__alt_data_end+0xff00398c>
    39d0:	9021883a 	mov	r16,r18
    39d4:	a825883a 	mov	r18,r21
    39d8:	b02b883a 	mov	r21,r22
    39dc:	882d883a 	mov	r22,r17
    39e0:	dc403017 	ldw	r17,192(sp)
    39e4:	d9002b17 	ldw	r4,172(sp)
    39e8:	1d87883a 	add	r3,r3,r22
    39ec:	10800044 	addi	r2,r2,1
    39f0:	41000015 	stw	r4,0(r8)
    39f4:	45800115 	stw	r22,4(r8)
    39f8:	d8c02015 	stw	r3,128(sp)
    39fc:	d8801f15 	stw	r2,124(sp)
    3a00:	010001c4 	movi	r4,7
    3a04:	20818e16 	blt	r4,r2,4040 <___vfprintf_internal_r+0x1638>
    3a08:	42000204 	addi	r8,r8,8
    3a0c:	003e3106 	br	32d4 <__alt_data_end+0xff0032d4>
    3a10:	d9403317 	ldw	r5,204(sp)
    3a14:	00800044 	movi	r2,1
    3a18:	18c00044 	addi	r3,r3,1
    3a1c:	1141530e 	bge	r2,r5,3f6c <___vfprintf_internal_r+0x1564>
    3a20:	dc401f17 	ldw	r17,124(sp)
    3a24:	00800044 	movi	r2,1
    3a28:	40800115 	stw	r2,4(r8)
    3a2c:	8c400044 	addi	r17,r17,1
    3a30:	44000015 	stw	r16,0(r8)
    3a34:	d8c02015 	stw	r3,128(sp)
    3a38:	dc401f15 	stw	r17,124(sp)
    3a3c:	008001c4 	movi	r2,7
    3a40:	14416b16 	blt	r2,r17,3ff0 <___vfprintf_internal_r+0x15e8>
    3a44:	42000204 	addi	r8,r8,8
    3a48:	d8803717 	ldw	r2,220(sp)
    3a4c:	d9003417 	ldw	r4,208(sp)
    3a50:	8c400044 	addi	r17,r17,1
    3a54:	10c7883a 	add	r3,r2,r3
    3a58:	40800115 	stw	r2,4(r8)
    3a5c:	41000015 	stw	r4,0(r8)
    3a60:	d8c02015 	stw	r3,128(sp)
    3a64:	dc401f15 	stw	r17,124(sp)
    3a68:	008001c4 	movi	r2,7
    3a6c:	14416916 	blt	r2,r17,4014 <___vfprintf_internal_r+0x160c>
    3a70:	45800204 	addi	r22,r8,8
    3a74:	d9003617 	ldw	r4,216(sp)
    3a78:	d9403817 	ldw	r5,224(sp)
    3a7c:	000d883a 	mov	r6,zero
    3a80:	000f883a 	mov	r7,zero
    3a84:	d8c03c15 	stw	r3,240(sp)
    3a88:	000d1200 	call	d120 <__eqdf2>
    3a8c:	d8c03c17 	ldw	r3,240(sp)
    3a90:	1000bc26 	beq	r2,zero,3d84 <___vfprintf_internal_r+0x137c>
    3a94:	d9403317 	ldw	r5,204(sp)
    3a98:	84000044 	addi	r16,r16,1
    3a9c:	8c400044 	addi	r17,r17,1
    3aa0:	28bfffc4 	addi	r2,r5,-1
    3aa4:	1887883a 	add	r3,r3,r2
    3aa8:	b0800115 	stw	r2,4(r22)
    3aac:	b4000015 	stw	r16,0(r22)
    3ab0:	d8c02015 	stw	r3,128(sp)
    3ab4:	dc401f15 	stw	r17,124(sp)
    3ab8:	008001c4 	movi	r2,7
    3abc:	14414316 	blt	r2,r17,3fcc <___vfprintf_internal_r+0x15c4>
    3ac0:	b5800204 	addi	r22,r22,8
    3ac4:	d9003a17 	ldw	r4,232(sp)
    3ac8:	df0022c4 	addi	fp,sp,139
    3acc:	8c400044 	addi	r17,r17,1
    3ad0:	20c7883a 	add	r3,r4,r3
    3ad4:	b7000015 	stw	fp,0(r22)
    3ad8:	b1000115 	stw	r4,4(r22)
    3adc:	d8c02015 	stw	r3,128(sp)
    3ae0:	dc401f15 	stw	r17,124(sp)
    3ae4:	008001c4 	movi	r2,7
    3ae8:	14400e16 	blt	r2,r17,3b24 <___vfprintf_internal_r+0x111c>
    3aec:	b2000204 	addi	r8,r22,8
    3af0:	003e3a06 	br	33dc <__alt_data_end+0xff0033dc>
    3af4:	01000074 	movhi	r4,1
    3af8:	21055284 	addi	r4,r4,5450
    3afc:	d9002b15 	stw	r4,172(sp)
    3b00:	d9002b17 	ldw	r4,172(sp)
    3b04:	1c07883a 	add	r3,r3,r16
    3b08:	44000115 	stw	r16,4(r8)
    3b0c:	41000015 	stw	r4,0(r8)
    3b10:	10800044 	addi	r2,r2,1
    3b14:	d8c02015 	stw	r3,128(sp)
    3b18:	d8801f15 	stw	r2,124(sp)
    3b1c:	010001c4 	movi	r4,7
    3b20:	20be2d0e 	bge	r4,r2,33d8 <__alt_data_end+0xff0033d8>
    3b24:	d9002c17 	ldw	r4,176(sp)
    3b28:	d9801e04 	addi	r6,sp,120
    3b2c:	b80b883a 	mov	r5,r23
    3b30:	000965c0 	call	965c <__sprint_r>
    3b34:	103cb61e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    3b38:	d8c02017 	ldw	r3,128(sp)
    3b3c:	da000404 	addi	r8,sp,16
    3b40:	003e2606 	br	33dc <__alt_data_end+0xff0033dc>
    3b44:	d9002c17 	ldw	r4,176(sp)
    3b48:	d9801e04 	addi	r6,sp,120
    3b4c:	b80b883a 	mov	r5,r23
    3b50:	000965c0 	call	965c <__sprint_r>
    3b54:	103e5d26 	beq	r2,zero,34cc <__alt_data_end+0xff0034cc>
    3b58:	003cad06 	br	2e10 <__alt_data_end+0xff002e10>
    3b5c:	d9002c17 	ldw	r4,176(sp)
    3b60:	d9801e04 	addi	r6,sp,120
    3b64:	b80b883a 	mov	r5,r23
    3b68:	000965c0 	call	965c <__sprint_r>
    3b6c:	103ca81e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    3b70:	d8c02017 	ldw	r3,128(sp)
    3b74:	da000404 	addi	r8,sp,16
    3b78:	003e0b06 	br	33a8 <__alt_data_end+0xff0033a8>
    3b7c:	d9002c17 	ldw	r4,176(sp)
    3b80:	d9801e04 	addi	r6,sp,120
    3b84:	b80b883a 	mov	r5,r23
    3b88:	000965c0 	call	965c <__sprint_r>
    3b8c:	103ca01e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    3b90:	d8c02017 	ldw	r3,128(sp)
    3b94:	da000404 	addi	r8,sp,16
    3b98:	003dbd06 	br	3290 <__alt_data_end+0xff003290>
    3b9c:	d9002c17 	ldw	r4,176(sp)
    3ba0:	d9801e04 	addi	r6,sp,120
    3ba4:	b80b883a 	mov	r5,r23
    3ba8:	000965c0 	call	965c <__sprint_r>
    3bac:	103c981e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    3bb0:	d8c02017 	ldw	r3,128(sp)
    3bb4:	da000404 	addi	r8,sp,16
    3bb8:	003dc306 	br	32c8 <__alt_data_end+0xff0032c8>
    3bbc:	d8802917 	ldw	r2,164(sp)
    3bc0:	d8002785 	stb	zero,158(sp)
    3bc4:	103f0616 	blt	r2,zero,37e0 <__alt_data_end+0xff0037e0>
    3bc8:	00ffdfc4 	movi	r3,-129
    3bcc:	9d84b03a 	or	r2,r19,r22
    3bd0:	90e4703a 	and	r18,r18,r3
    3bd4:	103c6b26 	beq	r2,zero,2d84 <__alt_data_end+0xff002d84>
    3bd8:	0039883a 	mov	fp,zero
    3bdc:	003e7406 	br	35b0 <__alt_data_end+0xff0035b0>
    3be0:	9080040c 	andi	r2,r18,16
    3be4:	1001b326 	beq	r2,zero,42b4 <___vfprintf_internal_r+0x18ac>
    3be8:	d9002d17 	ldw	r4,180(sp)
    3bec:	d9402917 	ldw	r5,164(sp)
    3bf0:	d8002785 	stb	zero,158(sp)
    3bf4:	20800104 	addi	r2,r4,4
    3bf8:	24c00017 	ldw	r19,0(r4)
    3bfc:	002d883a 	mov	r22,zero
    3c00:	2801b516 	blt	r5,zero,42d8 <___vfprintf_internal_r+0x18d0>
    3c04:	00ffdfc4 	movi	r3,-129
    3c08:	d8802d15 	stw	r2,180(sp)
    3c0c:	90e4703a 	and	r18,r18,r3
    3c10:	983d2726 	beq	r19,zero,30b0 <__alt_data_end+0xff0030b0>
    3c14:	0039883a 	mov	fp,zero
    3c18:	003d2a06 	br	30c4 <__alt_data_end+0xff0030c4>
    3c1c:	dc402617 	ldw	r17,152(sp)
    3c20:	0441d30e 	bge	zero,r17,4370 <___vfprintf_internal_r+0x1968>
    3c24:	dc403217 	ldw	r17,200(sp)
    3c28:	d8803317 	ldw	r2,204(sp)
    3c2c:	1440010e 	bge	r2,r17,3c34 <___vfprintf_internal_r+0x122c>
    3c30:	1023883a 	mov	r17,r2
    3c34:	04400a0e 	bge	zero,r17,3c60 <___vfprintf_internal_r+0x1258>
    3c38:	d8801f17 	ldw	r2,124(sp)
    3c3c:	1c47883a 	add	r3,r3,r17
    3c40:	44000015 	stw	r16,0(r8)
    3c44:	10800044 	addi	r2,r2,1
    3c48:	44400115 	stw	r17,4(r8)
    3c4c:	d8c02015 	stw	r3,128(sp)
    3c50:	d8801f15 	stw	r2,124(sp)
    3c54:	010001c4 	movi	r4,7
    3c58:	20826516 	blt	r4,r2,45f0 <___vfprintf_internal_r+0x1be8>
    3c5c:	42000204 	addi	r8,r8,8
    3c60:	88026116 	blt	r17,zero,45e8 <___vfprintf_internal_r+0x1be0>
    3c64:	d9003217 	ldw	r4,200(sp)
    3c68:	2463c83a 	sub	r17,r4,r17
    3c6c:	04407b0e 	bge	zero,r17,3e5c <___vfprintf_internal_r+0x1454>
    3c70:	05800404 	movi	r22,16
    3c74:	d8801f17 	ldw	r2,124(sp)
    3c78:	b4419d0e 	bge	r22,r17,42f0 <___vfprintf_internal_r+0x18e8>
    3c7c:	01000074 	movhi	r4,1
    3c80:	21055284 	addi	r4,r4,5450
    3c84:	d9002b15 	stw	r4,172(sp)
    3c88:	070001c4 	movi	fp,7
    3c8c:	dcc02c17 	ldw	r19,176(sp)
    3c90:	00000306 	br	3ca0 <___vfprintf_internal_r+0x1298>
    3c94:	42000204 	addi	r8,r8,8
    3c98:	8c7ffc04 	addi	r17,r17,-16
    3c9c:	b441970e 	bge	r22,r17,42fc <___vfprintf_internal_r+0x18f4>
    3ca0:	18c00404 	addi	r3,r3,16
    3ca4:	10800044 	addi	r2,r2,1
    3ca8:	45000015 	stw	r20,0(r8)
    3cac:	45800115 	stw	r22,4(r8)
    3cb0:	d8c02015 	stw	r3,128(sp)
    3cb4:	d8801f15 	stw	r2,124(sp)
    3cb8:	e0bff60e 	bge	fp,r2,3c94 <__alt_data_end+0xff003c94>
    3cbc:	d9801e04 	addi	r6,sp,120
    3cc0:	b80b883a 	mov	r5,r23
    3cc4:	9809883a 	mov	r4,r19
    3cc8:	000965c0 	call	965c <__sprint_r>
    3ccc:	103c501e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    3cd0:	d8c02017 	ldw	r3,128(sp)
    3cd4:	d8801f17 	ldw	r2,124(sp)
    3cd8:	da000404 	addi	r8,sp,16
    3cdc:	003fee06 	br	3c98 <__alt_data_end+0xff003c98>
    3ce0:	d9002c17 	ldw	r4,176(sp)
    3ce4:	d9801e04 	addi	r6,sp,120
    3ce8:	b80b883a 	mov	r5,r23
    3cec:	000965c0 	call	965c <__sprint_r>
    3cf0:	103c471e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    3cf4:	d8c02017 	ldw	r3,128(sp)
    3cf8:	df002787 	ldb	fp,158(sp)
    3cfc:	da000404 	addi	r8,sp,16
    3d00:	003d5606 	br	325c <__alt_data_end+0xff00325c>
    3d04:	9080040c 	andi	r2,r18,16
    3d08:	10016126 	beq	r2,zero,4290 <___vfprintf_internal_r+0x1888>
    3d0c:	d8802d17 	ldw	r2,180(sp)
    3d10:	14c00017 	ldw	r19,0(r2)
    3d14:	10800104 	addi	r2,r2,4
    3d18:	d8802d15 	stw	r2,180(sp)
    3d1c:	982dd7fa 	srai	r22,r19,31
    3d20:	b005883a 	mov	r2,r22
    3d24:	003c8206 	br	2f30 <__alt_data_end+0xff002f30>
    3d28:	9080040c 	andi	r2,r18,16
    3d2c:	10003526 	beq	r2,zero,3e04 <___vfprintf_internal_r+0x13fc>
    3d30:	d9402d17 	ldw	r5,180(sp)
    3d34:	d8c02917 	ldw	r3,164(sp)
    3d38:	d8002785 	stb	zero,158(sp)
    3d3c:	28800104 	addi	r2,r5,4
    3d40:	2cc00017 	ldw	r19,0(r5)
    3d44:	002d883a 	mov	r22,zero
    3d48:	18003716 	blt	r3,zero,3e28 <___vfprintf_internal_r+0x1420>
    3d4c:	00ffdfc4 	movi	r3,-129
    3d50:	d8802d15 	stw	r2,180(sp)
    3d54:	90e4703a 	and	r18,r18,r3
    3d58:	0039883a 	mov	fp,zero
    3d5c:	983df326 	beq	r19,zero,352c <__alt_data_end+0xff00352c>
    3d60:	00800244 	movi	r2,9
    3d64:	14fc7b36 	bltu	r2,r19,2f54 <__alt_data_end+0xff002f54>
    3d68:	d8c02817 	ldw	r3,160(sp)
    3d6c:	dc001dc4 	addi	r16,sp,119
    3d70:	9cc00c04 	addi	r19,r19,48
    3d74:	1c07c83a 	sub	r3,r3,r16
    3d78:	dcc01dc5 	stb	r19,119(sp)
    3d7c:	d8c02e15 	stw	r3,184(sp)
    3d80:	003ce806 	br	3124 <__alt_data_end+0xff003124>
    3d84:	d8803317 	ldw	r2,204(sp)
    3d88:	143fffc4 	addi	r16,r2,-1
    3d8c:	043f4d0e 	bge	zero,r16,3ac4 <__alt_data_end+0xff003ac4>
    3d90:	07000404 	movi	fp,16
    3d94:	e400810e 	bge	fp,r16,3f9c <___vfprintf_internal_r+0x1594>
    3d98:	01400074 	movhi	r5,1
    3d9c:	29455284 	addi	r5,r5,5450
    3da0:	d9402b15 	stw	r5,172(sp)
    3da4:	01c001c4 	movi	r7,7
    3da8:	dcc02c17 	ldw	r19,176(sp)
    3dac:	00000306 	br	3dbc <___vfprintf_internal_r+0x13b4>
    3db0:	b5800204 	addi	r22,r22,8
    3db4:	843ffc04 	addi	r16,r16,-16
    3db8:	e4007b0e 	bge	fp,r16,3fa8 <___vfprintf_internal_r+0x15a0>
    3dbc:	18c00404 	addi	r3,r3,16
    3dc0:	8c400044 	addi	r17,r17,1
    3dc4:	b5000015 	stw	r20,0(r22)
    3dc8:	b7000115 	stw	fp,4(r22)
    3dcc:	d8c02015 	stw	r3,128(sp)
    3dd0:	dc401f15 	stw	r17,124(sp)
    3dd4:	3c7ff60e 	bge	r7,r17,3db0 <__alt_data_end+0xff003db0>
    3dd8:	d9801e04 	addi	r6,sp,120
    3ddc:	b80b883a 	mov	r5,r23
    3de0:	9809883a 	mov	r4,r19
    3de4:	d9c03c15 	stw	r7,240(sp)
    3de8:	000965c0 	call	965c <__sprint_r>
    3dec:	d9c03c17 	ldw	r7,240(sp)
    3df0:	103c071e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    3df4:	d8c02017 	ldw	r3,128(sp)
    3df8:	dc401f17 	ldw	r17,124(sp)
    3dfc:	dd800404 	addi	r22,sp,16
    3e00:	003fec06 	br	3db4 <__alt_data_end+0xff003db4>
    3e04:	9080100c 	andi	r2,r18,64
    3e08:	d8002785 	stb	zero,158(sp)
    3e0c:	10010e26 	beq	r2,zero,4248 <___vfprintf_internal_r+0x1840>
    3e10:	d9002d17 	ldw	r4,180(sp)
    3e14:	d9402917 	ldw	r5,164(sp)
    3e18:	002d883a 	mov	r22,zero
    3e1c:	20800104 	addi	r2,r4,4
    3e20:	24c0000b 	ldhu	r19,0(r4)
    3e24:	283fc90e 	bge	r5,zero,3d4c <__alt_data_end+0xff003d4c>
    3e28:	d8802d15 	stw	r2,180(sp)
    3e2c:	0039883a 	mov	fp,zero
    3e30:	9d84b03a 	or	r2,r19,r22
    3e34:	103c461e 	bne	r2,zero,2f50 <__alt_data_end+0xff002f50>
    3e38:	00800044 	movi	r2,1
    3e3c:	003e6c06 	br	37f0 <__alt_data_end+0xff0037f0>
    3e40:	d9002c17 	ldw	r4,176(sp)
    3e44:	d9801e04 	addi	r6,sp,120
    3e48:	b80b883a 	mov	r5,r23
    3e4c:	000965c0 	call	965c <__sprint_r>
    3e50:	103bef1e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    3e54:	d8c02017 	ldw	r3,128(sp)
    3e58:	da000404 	addi	r8,sp,16
    3e5c:	d9003217 	ldw	r4,200(sp)
    3e60:	d8802617 	ldw	r2,152(sp)
    3e64:	d9403317 	ldw	r5,204(sp)
    3e68:	8123883a 	add	r17,r16,r4
    3e6c:	11400216 	blt	r2,r5,3e78 <___vfprintf_internal_r+0x1470>
    3e70:	9100004c 	andi	r4,r18,1
    3e74:	20000d26 	beq	r4,zero,3eac <___vfprintf_internal_r+0x14a4>
    3e78:	d9003717 	ldw	r4,220(sp)
    3e7c:	d9403417 	ldw	r5,208(sp)
    3e80:	1907883a 	add	r3,r3,r4
    3e84:	d9001f17 	ldw	r4,124(sp)
    3e88:	41400015 	stw	r5,0(r8)
    3e8c:	d9403717 	ldw	r5,220(sp)
    3e90:	21000044 	addi	r4,r4,1
    3e94:	d8c02015 	stw	r3,128(sp)
    3e98:	41400115 	stw	r5,4(r8)
    3e9c:	d9001f15 	stw	r4,124(sp)
    3ea0:	014001c4 	movi	r5,7
    3ea4:	2901e816 	blt	r5,r4,4648 <___vfprintf_internal_r+0x1c40>
    3ea8:	42000204 	addi	r8,r8,8
    3eac:	d9003317 	ldw	r4,204(sp)
    3eb0:	8121883a 	add	r16,r16,r4
    3eb4:	2085c83a 	sub	r2,r4,r2
    3eb8:	8461c83a 	sub	r16,r16,r17
    3ebc:	1400010e 	bge	r2,r16,3ec4 <___vfprintf_internal_r+0x14bc>
    3ec0:	1021883a 	mov	r16,r2
    3ec4:	04000a0e 	bge	zero,r16,3ef0 <___vfprintf_internal_r+0x14e8>
    3ec8:	d9001f17 	ldw	r4,124(sp)
    3ecc:	1c07883a 	add	r3,r3,r16
    3ed0:	44400015 	stw	r17,0(r8)
    3ed4:	21000044 	addi	r4,r4,1
    3ed8:	44000115 	stw	r16,4(r8)
    3edc:	d8c02015 	stw	r3,128(sp)
    3ee0:	d9001f15 	stw	r4,124(sp)
    3ee4:	014001c4 	movi	r5,7
    3ee8:	2901fb16 	blt	r5,r4,46d8 <___vfprintf_internal_r+0x1cd0>
    3eec:	42000204 	addi	r8,r8,8
    3ef0:	8001f716 	blt	r16,zero,46d0 <___vfprintf_internal_r+0x1cc8>
    3ef4:	1421c83a 	sub	r16,r2,r16
    3ef8:	043d380e 	bge	zero,r16,33dc <__alt_data_end+0xff0033dc>
    3efc:	04400404 	movi	r17,16
    3f00:	d8801f17 	ldw	r2,124(sp)
    3f04:	8c3efb0e 	bge	r17,r16,3af4 <__alt_data_end+0xff003af4>
    3f08:	01400074 	movhi	r5,1
    3f0c:	29455284 	addi	r5,r5,5450
    3f10:	d9402b15 	stw	r5,172(sp)
    3f14:	058001c4 	movi	r22,7
    3f18:	dcc02c17 	ldw	r19,176(sp)
    3f1c:	00000306 	br	3f2c <___vfprintf_internal_r+0x1524>
    3f20:	42000204 	addi	r8,r8,8
    3f24:	843ffc04 	addi	r16,r16,-16
    3f28:	8c3ef50e 	bge	r17,r16,3b00 <__alt_data_end+0xff003b00>
    3f2c:	18c00404 	addi	r3,r3,16
    3f30:	10800044 	addi	r2,r2,1
    3f34:	45000015 	stw	r20,0(r8)
    3f38:	44400115 	stw	r17,4(r8)
    3f3c:	d8c02015 	stw	r3,128(sp)
    3f40:	d8801f15 	stw	r2,124(sp)
    3f44:	b0bff60e 	bge	r22,r2,3f20 <__alt_data_end+0xff003f20>
    3f48:	d9801e04 	addi	r6,sp,120
    3f4c:	b80b883a 	mov	r5,r23
    3f50:	9809883a 	mov	r4,r19
    3f54:	000965c0 	call	965c <__sprint_r>
    3f58:	103bad1e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    3f5c:	d8c02017 	ldw	r3,128(sp)
    3f60:	d8801f17 	ldw	r2,124(sp)
    3f64:	da000404 	addi	r8,sp,16
    3f68:	003fee06 	br	3f24 <__alt_data_end+0xff003f24>
    3f6c:	9088703a 	and	r4,r18,r2
    3f70:	203eab1e 	bne	r4,zero,3a20 <__alt_data_end+0xff003a20>
    3f74:	dc401f17 	ldw	r17,124(sp)
    3f78:	40800115 	stw	r2,4(r8)
    3f7c:	44000015 	stw	r16,0(r8)
    3f80:	8c400044 	addi	r17,r17,1
    3f84:	d8c02015 	stw	r3,128(sp)
    3f88:	dc401f15 	stw	r17,124(sp)
    3f8c:	008001c4 	movi	r2,7
    3f90:	14400e16 	blt	r2,r17,3fcc <___vfprintf_internal_r+0x15c4>
    3f94:	45800204 	addi	r22,r8,8
    3f98:	003eca06 	br	3ac4 <__alt_data_end+0xff003ac4>
    3f9c:	01000074 	movhi	r4,1
    3fa0:	21055284 	addi	r4,r4,5450
    3fa4:	d9002b15 	stw	r4,172(sp)
    3fa8:	d8802b17 	ldw	r2,172(sp)
    3fac:	1c07883a 	add	r3,r3,r16
    3fb0:	8c400044 	addi	r17,r17,1
    3fb4:	b0800015 	stw	r2,0(r22)
    3fb8:	b4000115 	stw	r16,4(r22)
    3fbc:	d8c02015 	stw	r3,128(sp)
    3fc0:	dc401f15 	stw	r17,124(sp)
    3fc4:	008001c4 	movi	r2,7
    3fc8:	147ebd0e 	bge	r2,r17,3ac0 <__alt_data_end+0xff003ac0>
    3fcc:	d9002c17 	ldw	r4,176(sp)
    3fd0:	d9801e04 	addi	r6,sp,120
    3fd4:	b80b883a 	mov	r5,r23
    3fd8:	000965c0 	call	965c <__sprint_r>
    3fdc:	103b8c1e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    3fe0:	d8c02017 	ldw	r3,128(sp)
    3fe4:	dc401f17 	ldw	r17,124(sp)
    3fe8:	dd800404 	addi	r22,sp,16
    3fec:	003eb506 	br	3ac4 <__alt_data_end+0xff003ac4>
    3ff0:	d9002c17 	ldw	r4,176(sp)
    3ff4:	d9801e04 	addi	r6,sp,120
    3ff8:	b80b883a 	mov	r5,r23
    3ffc:	000965c0 	call	965c <__sprint_r>
    4000:	103b831e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    4004:	d8c02017 	ldw	r3,128(sp)
    4008:	dc401f17 	ldw	r17,124(sp)
    400c:	da000404 	addi	r8,sp,16
    4010:	003e8d06 	br	3a48 <__alt_data_end+0xff003a48>
    4014:	d9002c17 	ldw	r4,176(sp)
    4018:	d9801e04 	addi	r6,sp,120
    401c:	b80b883a 	mov	r5,r23
    4020:	000965c0 	call	965c <__sprint_r>
    4024:	103b7a1e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    4028:	d8c02017 	ldw	r3,128(sp)
    402c:	dc401f17 	ldw	r17,124(sp)
    4030:	dd800404 	addi	r22,sp,16
    4034:	003e8f06 	br	3a74 <__alt_data_end+0xff003a74>
    4038:	0027883a 	mov	r19,zero
    403c:	003f4a06 	br	3d68 <__alt_data_end+0xff003d68>
    4040:	d9002c17 	ldw	r4,176(sp)
    4044:	d9801e04 	addi	r6,sp,120
    4048:	b80b883a 	mov	r5,r23
    404c:	000965c0 	call	965c <__sprint_r>
    4050:	103b6f1e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    4054:	d8c02017 	ldw	r3,128(sp)
    4058:	da000404 	addi	r8,sp,16
    405c:	003c9d06 	br	32d4 <__alt_data_end+0xff0032d4>
    4060:	04e7c83a 	sub	r19,zero,r19
    4064:	9804c03a 	cmpne	r2,r19,zero
    4068:	05adc83a 	sub	r22,zero,r22
    406c:	b0adc83a 	sub	r22,r22,r2
    4070:	d8802917 	ldw	r2,164(sp)
    4074:	07000b44 	movi	fp,45
    4078:	df002785 	stb	fp,158(sp)
    407c:	10017b16 	blt	r2,zero,466c <___vfprintf_internal_r+0x1c64>
    4080:	00bfdfc4 	movi	r2,-129
    4084:	90a4703a 	and	r18,r18,r2
    4088:	003bb106 	br	2f50 <__alt_data_end+0xff002f50>
    408c:	d9003617 	ldw	r4,216(sp)
    4090:	d9403817 	ldw	r5,224(sp)
    4094:	da003d15 	stw	r8,244(sp)
    4098:	00092d40 	call	92d4 <__fpclassifyd>
    409c:	da003d17 	ldw	r8,244(sp)
    40a0:	1000f026 	beq	r2,zero,4464 <___vfprintf_internal_r+0x1a5c>
    40a4:	d9002917 	ldw	r4,164(sp)
    40a8:	05bff7c4 	movi	r22,-33
    40ac:	00bfffc4 	movi	r2,-1
    40b0:	8dac703a 	and	r22,r17,r22
    40b4:	20820026 	beq	r4,r2,48b8 <___vfprintf_internal_r+0x1eb0>
    40b8:	008011c4 	movi	r2,71
    40bc:	b081f726 	beq	r22,r2,489c <___vfprintf_internal_r+0x1e94>
    40c0:	d9003817 	ldw	r4,224(sp)
    40c4:	90c04014 	ori	r3,r18,256
    40c8:	d8c02b15 	stw	r3,172(sp)
    40cc:	20021516 	blt	r4,zero,4924 <___vfprintf_internal_r+0x1f1c>
    40d0:	dcc03817 	ldw	r19,224(sp)
    40d4:	d8002a05 	stb	zero,168(sp)
    40d8:	00801984 	movi	r2,102
    40dc:	8881f926 	beq	r17,r2,48c4 <___vfprintf_internal_r+0x1ebc>
    40e0:	00801184 	movi	r2,70
    40e4:	88821c26 	beq	r17,r2,4958 <___vfprintf_internal_r+0x1f50>
    40e8:	00801144 	movi	r2,69
    40ec:	b081ef26 	beq	r22,r2,48ac <___vfprintf_internal_r+0x1ea4>
    40f0:	d8c02917 	ldw	r3,164(sp)
    40f4:	d8802104 	addi	r2,sp,132
    40f8:	d8800315 	stw	r2,12(sp)
    40fc:	d9403617 	ldw	r5,216(sp)
    4100:	d8802504 	addi	r2,sp,148
    4104:	d9002c17 	ldw	r4,176(sp)
    4108:	d8800215 	stw	r2,8(sp)
    410c:	d8802604 	addi	r2,sp,152
    4110:	d8c00015 	stw	r3,0(sp)
    4114:	d8800115 	stw	r2,4(sp)
    4118:	01c00084 	movi	r7,2
    411c:	980d883a 	mov	r6,r19
    4120:	d8c03c15 	stw	r3,240(sp)
    4124:	da003d15 	stw	r8,244(sp)
    4128:	000502c0 	call	502c <_dtoa_r>
    412c:	1021883a 	mov	r16,r2
    4130:	008019c4 	movi	r2,103
    4134:	d8c03c17 	ldw	r3,240(sp)
    4138:	da003d17 	ldw	r8,244(sp)
    413c:	88817126 	beq	r17,r2,4704 <___vfprintf_internal_r+0x1cfc>
    4140:	008011c4 	movi	r2,71
    4144:	88829226 	beq	r17,r2,4b90 <___vfprintf_internal_r+0x2188>
    4148:	80f9883a 	add	fp,r16,r3
    414c:	d9003617 	ldw	r4,216(sp)
    4150:	000d883a 	mov	r6,zero
    4154:	000f883a 	mov	r7,zero
    4158:	980b883a 	mov	r5,r19
    415c:	da003d15 	stw	r8,244(sp)
    4160:	000d1200 	call	d120 <__eqdf2>
    4164:	da003d17 	ldw	r8,244(sp)
    4168:	10018d26 	beq	r2,zero,47a0 <___vfprintf_internal_r+0x1d98>
    416c:	d8802117 	ldw	r2,132(sp)
    4170:	1700062e 	bgeu	r2,fp,418c <___vfprintf_internal_r+0x1784>
    4174:	01000c04 	movi	r4,48
    4178:	10c00044 	addi	r3,r2,1
    417c:	d8c02115 	stw	r3,132(sp)
    4180:	11000005 	stb	r4,0(r2)
    4184:	d8802117 	ldw	r2,132(sp)
    4188:	173ffb36 	bltu	r2,fp,4178 <__alt_data_end+0xff004178>
    418c:	1405c83a 	sub	r2,r2,r16
    4190:	d8803315 	stw	r2,204(sp)
    4194:	008011c4 	movi	r2,71
    4198:	b0817626 	beq	r22,r2,4774 <___vfprintf_internal_r+0x1d6c>
    419c:	00801944 	movi	r2,101
    41a0:	1442810e 	bge	r2,r17,4ba8 <___vfprintf_internal_r+0x21a0>
    41a4:	d8c02617 	ldw	r3,152(sp)
    41a8:	00801984 	movi	r2,102
    41ac:	d8c03215 	stw	r3,200(sp)
    41b0:	8881fe26 	beq	r17,r2,49ac <___vfprintf_internal_r+0x1fa4>
    41b4:	d8c03217 	ldw	r3,200(sp)
    41b8:	d9003317 	ldw	r4,204(sp)
    41bc:	1901dd16 	blt	r3,r4,4934 <___vfprintf_internal_r+0x1f2c>
    41c0:	9480004c 	andi	r18,r18,1
    41c4:	90022b1e 	bne	r18,zero,4a74 <___vfprintf_internal_r+0x206c>
    41c8:	1805883a 	mov	r2,r3
    41cc:	18028016 	blt	r3,zero,4bd0 <___vfprintf_internal_r+0x21c8>
    41d0:	d8c03217 	ldw	r3,200(sp)
    41d4:	044019c4 	movi	r17,103
    41d8:	d8c02e15 	stw	r3,184(sp)
    41dc:	df002a07 	ldb	fp,168(sp)
    41e0:	e001531e 	bne	fp,zero,4730 <___vfprintf_internal_r+0x1d28>
    41e4:	df002783 	ldbu	fp,158(sp)
    41e8:	d8802a15 	stw	r2,168(sp)
    41ec:	dc802b17 	ldw	r18,172(sp)
    41f0:	d8002915 	stw	zero,164(sp)
    41f4:	003bd106 	br	313c <__alt_data_end+0xff00313c>
    41f8:	d8802d17 	ldw	r2,180(sp)
    41fc:	d8c02d17 	ldw	r3,180(sp)
    4200:	d9002d17 	ldw	r4,180(sp)
    4204:	10800017 	ldw	r2,0(r2)
    4208:	18c00117 	ldw	r3,4(r3)
    420c:	21000204 	addi	r4,r4,8
    4210:	d8803615 	stw	r2,216(sp)
    4214:	d8c03815 	stw	r3,224(sp)
    4218:	d9002d15 	stw	r4,180(sp)
    421c:	003b7506 	br	2ff4 <__alt_data_end+0xff002ff4>
    4220:	ac400007 	ldb	r17,0(r21)
    4224:	003a5906 	br	2b8c <__alt_data_end+0xff002b8c>
    4228:	9080100c 	andi	r2,r18,64
    422c:	1000a826 	beq	r2,zero,44d0 <___vfprintf_internal_r+0x1ac8>
    4230:	d9002d17 	ldw	r4,180(sp)
    4234:	002d883a 	mov	r22,zero
    4238:	24c0000b 	ldhu	r19,0(r4)
    423c:	21000104 	addi	r4,r4,4
    4240:	d9002d15 	stw	r4,180(sp)
    4244:	003ccb06 	br	3574 <__alt_data_end+0xff003574>
    4248:	d8c02d17 	ldw	r3,180(sp)
    424c:	d9002917 	ldw	r4,164(sp)
    4250:	002d883a 	mov	r22,zero
    4254:	18800104 	addi	r2,r3,4
    4258:	1cc00017 	ldw	r19,0(r3)
    425c:	203ebb0e 	bge	r4,zero,3d4c <__alt_data_end+0xff003d4c>
    4260:	003ef106 	br	3e28 <__alt_data_end+0xff003e28>
    4264:	9080040c 	andi	r2,r18,16
    4268:	1000921e 	bne	r2,zero,44b4 <___vfprintf_internal_r+0x1aac>
    426c:	9480100c 	andi	r18,r18,64
    4270:	90013926 	beq	r18,zero,4758 <___vfprintf_internal_r+0x1d50>
    4274:	d9002d17 	ldw	r4,180(sp)
    4278:	d9402f17 	ldw	r5,188(sp)
    427c:	20800017 	ldw	r2,0(r4)
    4280:	21000104 	addi	r4,r4,4
    4284:	d9002d15 	stw	r4,180(sp)
    4288:	1140000d 	sth	r5,0(r2)
    428c:	003a1606 	br	2ae8 <__alt_data_end+0xff002ae8>
    4290:	9080100c 	andi	r2,r18,64
    4294:	10008026 	beq	r2,zero,4498 <___vfprintf_internal_r+0x1a90>
    4298:	d8c02d17 	ldw	r3,180(sp)
    429c:	1cc0000f 	ldh	r19,0(r3)
    42a0:	18c00104 	addi	r3,r3,4
    42a4:	d8c02d15 	stw	r3,180(sp)
    42a8:	982dd7fa 	srai	r22,r19,31
    42ac:	b005883a 	mov	r2,r22
    42b0:	003b1f06 	br	2f30 <__alt_data_end+0xff002f30>
    42b4:	9080100c 	andi	r2,r18,64
    42b8:	d8002785 	stb	zero,158(sp)
    42bc:	10008a1e 	bne	r2,zero,44e8 <___vfprintf_internal_r+0x1ae0>
    42c0:	d9402d17 	ldw	r5,180(sp)
    42c4:	d8c02917 	ldw	r3,164(sp)
    42c8:	002d883a 	mov	r22,zero
    42cc:	28800104 	addi	r2,r5,4
    42d0:	2cc00017 	ldw	r19,0(r5)
    42d4:	183e4b0e 	bge	r3,zero,3c04 <__alt_data_end+0xff003c04>
    42d8:	9d86b03a 	or	r3,r19,r22
    42dc:	d8802d15 	stw	r2,180(sp)
    42e0:	183e4c1e 	bne	r3,zero,3c14 <__alt_data_end+0xff003c14>
    42e4:	0039883a 	mov	fp,zero
    42e8:	0005883a 	mov	r2,zero
    42ec:	003d4006 	br	37f0 <__alt_data_end+0xff0037f0>
    42f0:	01400074 	movhi	r5,1
    42f4:	29455284 	addi	r5,r5,5450
    42f8:	d9402b15 	stw	r5,172(sp)
    42fc:	d9402b17 	ldw	r5,172(sp)
    4300:	1c47883a 	add	r3,r3,r17
    4304:	10800044 	addi	r2,r2,1
    4308:	41400015 	stw	r5,0(r8)
    430c:	44400115 	stw	r17,4(r8)
    4310:	d8c02015 	stw	r3,128(sp)
    4314:	d8801f15 	stw	r2,124(sp)
    4318:	010001c4 	movi	r4,7
    431c:	20bec816 	blt	r4,r2,3e40 <__alt_data_end+0xff003e40>
    4320:	42000204 	addi	r8,r8,8
    4324:	003ecd06 	br	3e5c <__alt_data_end+0xff003e5c>
    4328:	d9002917 	ldw	r4,164(sp)
    432c:	d8002785 	stb	zero,158(sp)
    4330:	203d2d16 	blt	r4,zero,37e8 <__alt_data_end+0xff0037e8>
    4334:	00bfdfc4 	movi	r2,-129
    4338:	90a4703a 	and	r18,r18,r2
    433c:	003a9106 	br	2d84 <__alt_data_end+0xff002d84>
    4340:	01000074 	movhi	r4,1
    4344:	21055284 	addi	r4,r4,5450
    4348:	d9002b15 	stw	r4,172(sp)
    434c:	003c0c06 	br	3380 <__alt_data_end+0xff003380>
    4350:	d9002c17 	ldw	r4,176(sp)
    4354:	d9801e04 	addi	r6,sp,120
    4358:	b80b883a 	mov	r5,r23
    435c:	000965c0 	call	965c <__sprint_r>
    4360:	103aab1e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    4364:	d8c02017 	ldw	r3,128(sp)
    4368:	da000404 	addi	r8,sp,16
    436c:	003d4106 	br	3874 <__alt_data_end+0xff003874>
    4370:	d8801f17 	ldw	r2,124(sp)
    4374:	01400074 	movhi	r5,1
    4378:	01000044 	movi	r4,1
    437c:	18c00044 	addi	r3,r3,1
    4380:	10800044 	addi	r2,r2,1
    4384:	29455204 	addi	r5,r5,5448
    4388:	41000115 	stw	r4,4(r8)
    438c:	41400015 	stw	r5,0(r8)
    4390:	d8c02015 	stw	r3,128(sp)
    4394:	d8801f15 	stw	r2,124(sp)
    4398:	010001c4 	movi	r4,7
    439c:	20805c16 	blt	r4,r2,4510 <___vfprintf_internal_r+0x1b08>
    43a0:	42000204 	addi	r8,r8,8
    43a4:	8800041e 	bne	r17,zero,43b8 <___vfprintf_internal_r+0x19b0>
    43a8:	d8803317 	ldw	r2,204(sp)
    43ac:	1000021e 	bne	r2,zero,43b8 <___vfprintf_internal_r+0x19b0>
    43b0:	9080004c 	andi	r2,r18,1
    43b4:	103c0926 	beq	r2,zero,33dc <__alt_data_end+0xff0033dc>
    43b8:	d9003717 	ldw	r4,220(sp)
    43bc:	d8801f17 	ldw	r2,124(sp)
    43c0:	d9403417 	ldw	r5,208(sp)
    43c4:	20c7883a 	add	r3,r4,r3
    43c8:	10800044 	addi	r2,r2,1
    43cc:	41000115 	stw	r4,4(r8)
    43d0:	41400015 	stw	r5,0(r8)
    43d4:	d8c02015 	stw	r3,128(sp)
    43d8:	d8801f15 	stw	r2,124(sp)
    43dc:	010001c4 	movi	r4,7
    43e0:	20812116 	blt	r4,r2,4868 <___vfprintf_internal_r+0x1e60>
    43e4:	42000204 	addi	r8,r8,8
    43e8:	0463c83a 	sub	r17,zero,r17
    43ec:	0440730e 	bge	zero,r17,45bc <___vfprintf_internal_r+0x1bb4>
    43f0:	05800404 	movi	r22,16
    43f4:	b440860e 	bge	r22,r17,4610 <___vfprintf_internal_r+0x1c08>
    43f8:	01400074 	movhi	r5,1
    43fc:	29455284 	addi	r5,r5,5450
    4400:	d9402b15 	stw	r5,172(sp)
    4404:	070001c4 	movi	fp,7
    4408:	dcc02c17 	ldw	r19,176(sp)
    440c:	00000306 	br	441c <___vfprintf_internal_r+0x1a14>
    4410:	42000204 	addi	r8,r8,8
    4414:	8c7ffc04 	addi	r17,r17,-16
    4418:	b440800e 	bge	r22,r17,461c <___vfprintf_internal_r+0x1c14>
    441c:	18c00404 	addi	r3,r3,16
    4420:	10800044 	addi	r2,r2,1
    4424:	45000015 	stw	r20,0(r8)
    4428:	45800115 	stw	r22,4(r8)
    442c:	d8c02015 	stw	r3,128(sp)
    4430:	d8801f15 	stw	r2,124(sp)
    4434:	e0bff60e 	bge	fp,r2,4410 <__alt_data_end+0xff004410>
    4438:	d9801e04 	addi	r6,sp,120
    443c:	b80b883a 	mov	r5,r23
    4440:	9809883a 	mov	r4,r19
    4444:	000965c0 	call	965c <__sprint_r>
    4448:	103a711e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    444c:	d8c02017 	ldw	r3,128(sp)
    4450:	d8801f17 	ldw	r2,124(sp)
    4454:	da000404 	addi	r8,sp,16
    4458:	003fee06 	br	4414 <__alt_data_end+0xff004414>
    445c:	00bfffc4 	movi	r2,-1
    4460:	003a6f06 	br	2e20 <__alt_data_end+0xff002e20>
    4464:	008011c4 	movi	r2,71
    4468:	1440b816 	blt	r2,r17,474c <___vfprintf_internal_r+0x1d44>
    446c:	04000074 	movhi	r16,1
    4470:	84054404 	addi	r16,r16,5392
    4474:	00c000c4 	movi	r3,3
    4478:	00bfdfc4 	movi	r2,-129
    447c:	d8c02a15 	stw	r3,168(sp)
    4480:	90a4703a 	and	r18,r18,r2
    4484:	df002783 	ldbu	fp,158(sp)
    4488:	d8c02e15 	stw	r3,184(sp)
    448c:	d8002915 	stw	zero,164(sp)
    4490:	d8003215 	stw	zero,200(sp)
    4494:	003b2906 	br	313c <__alt_data_end+0xff00313c>
    4498:	d9002d17 	ldw	r4,180(sp)
    449c:	24c00017 	ldw	r19,0(r4)
    44a0:	21000104 	addi	r4,r4,4
    44a4:	d9002d15 	stw	r4,180(sp)
    44a8:	982dd7fa 	srai	r22,r19,31
    44ac:	b005883a 	mov	r2,r22
    44b0:	003a9f06 	br	2f30 <__alt_data_end+0xff002f30>
    44b4:	d9402d17 	ldw	r5,180(sp)
    44b8:	d8c02f17 	ldw	r3,188(sp)
    44bc:	28800017 	ldw	r2,0(r5)
    44c0:	29400104 	addi	r5,r5,4
    44c4:	d9402d15 	stw	r5,180(sp)
    44c8:	10c00015 	stw	r3,0(r2)
    44cc:	00398606 	br	2ae8 <__alt_data_end+0xff002ae8>
    44d0:	d9402d17 	ldw	r5,180(sp)
    44d4:	002d883a 	mov	r22,zero
    44d8:	2cc00017 	ldw	r19,0(r5)
    44dc:	29400104 	addi	r5,r5,4
    44e0:	d9402d15 	stw	r5,180(sp)
    44e4:	003c2306 	br	3574 <__alt_data_end+0xff003574>
    44e8:	d8c02d17 	ldw	r3,180(sp)
    44ec:	d9002917 	ldw	r4,164(sp)
    44f0:	002d883a 	mov	r22,zero
    44f4:	18800104 	addi	r2,r3,4
    44f8:	1cc0000b 	ldhu	r19,0(r3)
    44fc:	203dc10e 	bge	r4,zero,3c04 <__alt_data_end+0xff003c04>
    4500:	003f7506 	br	42d8 <__alt_data_end+0xff0042d8>
    4504:	04000074 	movhi	r16,1
    4508:	84054204 	addi	r16,r16,5384
    450c:	003acc06 	br	3040 <__alt_data_end+0xff003040>
    4510:	d9002c17 	ldw	r4,176(sp)
    4514:	d9801e04 	addi	r6,sp,120
    4518:	b80b883a 	mov	r5,r23
    451c:	000965c0 	call	965c <__sprint_r>
    4520:	103a3b1e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    4524:	dc402617 	ldw	r17,152(sp)
    4528:	d8c02017 	ldw	r3,128(sp)
    452c:	da000404 	addi	r8,sp,16
    4530:	003f9c06 	br	43a4 <__alt_data_end+0xff0043a4>
    4534:	ac400043 	ldbu	r17,1(r21)
    4538:	94800814 	ori	r18,r18,32
    453c:	ad400044 	addi	r21,r21,1
    4540:	8c403fcc 	andi	r17,r17,255
    4544:	8c40201c 	xori	r17,r17,128
    4548:	8c7fe004 	addi	r17,r17,-128
    454c:	00398f06 	br	2b8c <__alt_data_end+0xff002b8c>
    4550:	d8c02d15 	stw	r3,180(sp)
    4554:	0039883a 	mov	fp,zero
    4558:	003e3506 	br	3e30 <__alt_data_end+0xff003e30>
    455c:	d9002c17 	ldw	r4,176(sp)
    4560:	d9801e04 	addi	r6,sp,120
    4564:	b80b883a 	mov	r5,r23
    4568:	000965c0 	call	965c <__sprint_r>
    456c:	103a281e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    4570:	d8c02017 	ldw	r3,128(sp)
    4574:	da000404 	addi	r8,sp,16
    4578:	003cd006 	br	38bc <__alt_data_end+0xff0038bc>
    457c:	8009883a 	mov	r4,r16
    4580:	da003d15 	stw	r8,244(sp)
    4584:	00029700 	call	2970 <strlen>
    4588:	d8802e15 	stw	r2,184(sp)
    458c:	da003d17 	ldw	r8,244(sp)
    4590:	103c340e 	bge	r2,zero,3664 <__alt_data_end+0xff003664>
    4594:	0005883a 	mov	r2,zero
    4598:	003c3206 	br	3664 <__alt_data_end+0xff003664>
    459c:	d9002c17 	ldw	r4,176(sp)
    45a0:	d9801e04 	addi	r6,sp,120
    45a4:	b80b883a 	mov	r5,r23
    45a8:	000965c0 	call	965c <__sprint_r>
    45ac:	103a181e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    45b0:	d8c02017 	ldw	r3,128(sp)
    45b4:	d8801f17 	ldw	r2,124(sp)
    45b8:	da000404 	addi	r8,sp,16
    45bc:	d9403317 	ldw	r5,204(sp)
    45c0:	10800044 	addi	r2,r2,1
    45c4:	44000015 	stw	r16,0(r8)
    45c8:	28c7883a 	add	r3,r5,r3
    45cc:	003b7d06 	br	33c4 <__alt_data_end+0xff0033c4>
    45d0:	01000074 	movhi	r4,1
    45d4:	21055684 	addi	r4,r4,5466
    45d8:	d9003515 	stw	r4,212(sp)
    45dc:	003b1406 	br	3230 <__alt_data_end+0xff003230>
    45e0:	013fffc4 	movi	r4,-1
    45e4:	003a3506 	br	2ebc <__alt_data_end+0xff002ebc>
    45e8:	0023883a 	mov	r17,zero
    45ec:	003d9d06 	br	3c64 <__alt_data_end+0xff003c64>
    45f0:	d9002c17 	ldw	r4,176(sp)
    45f4:	d9801e04 	addi	r6,sp,120
    45f8:	b80b883a 	mov	r5,r23
    45fc:	000965c0 	call	965c <__sprint_r>
    4600:	103a031e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    4604:	d8c02017 	ldw	r3,128(sp)
    4608:	da000404 	addi	r8,sp,16
    460c:	003d9406 	br	3c60 <__alt_data_end+0xff003c60>
    4610:	01000074 	movhi	r4,1
    4614:	21055284 	addi	r4,r4,5450
    4618:	d9002b15 	stw	r4,172(sp)
    461c:	d9002b17 	ldw	r4,172(sp)
    4620:	1c47883a 	add	r3,r3,r17
    4624:	10800044 	addi	r2,r2,1
    4628:	41000015 	stw	r4,0(r8)
    462c:	44400115 	stw	r17,4(r8)
    4630:	d8c02015 	stw	r3,128(sp)
    4634:	d8801f15 	stw	r2,124(sp)
    4638:	010001c4 	movi	r4,7
    463c:	20bfd716 	blt	r4,r2,459c <__alt_data_end+0xff00459c>
    4640:	42000204 	addi	r8,r8,8
    4644:	003fdd06 	br	45bc <__alt_data_end+0xff0045bc>
    4648:	d9002c17 	ldw	r4,176(sp)
    464c:	d9801e04 	addi	r6,sp,120
    4650:	b80b883a 	mov	r5,r23
    4654:	000965c0 	call	965c <__sprint_r>
    4658:	1039ed1e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    465c:	d8802617 	ldw	r2,152(sp)
    4660:	d8c02017 	ldw	r3,128(sp)
    4664:	da000404 	addi	r8,sp,16
    4668:	003e1006 	br	3eac <__alt_data_end+0xff003eac>
    466c:	00800044 	movi	r2,1
    4670:	10803fcc 	andi	r2,r2,255
    4674:	00c00044 	movi	r3,1
    4678:	10fa3526 	beq	r2,r3,2f50 <__alt_data_end+0xff002f50>
    467c:	00c00084 	movi	r3,2
    4680:	10fbcb26 	beq	r2,r3,35b0 <__alt_data_end+0xff0035b0>
    4684:	003a8f06 	br	30c4 <__alt_data_end+0xff0030c4>
    4688:	01000074 	movhi	r4,1
    468c:	21055684 	addi	r4,r4,5466
    4690:	d9003515 	stw	r4,212(sp)
    4694:	003b7606 	br	3470 <__alt_data_end+0xff003470>
    4698:	d8802917 	ldw	r2,164(sp)
    469c:	00c00184 	movi	r3,6
    46a0:	1880012e 	bgeu	r3,r2,46a8 <___vfprintf_internal_r+0x1ca0>
    46a4:	1805883a 	mov	r2,r3
    46a8:	d8802e15 	stw	r2,184(sp)
    46ac:	1000ef16 	blt	r2,zero,4a6c <___vfprintf_internal_r+0x2064>
    46b0:	04000074 	movhi	r16,1
    46b4:	d8802a15 	stw	r2,168(sp)
    46b8:	dcc02d15 	stw	r19,180(sp)
    46bc:	d8002915 	stw	zero,164(sp)
    46c0:	d8003215 	stw	zero,200(sp)
    46c4:	84055004 	addi	r16,r16,5440
    46c8:	0039883a 	mov	fp,zero
    46cc:	003aa206 	br	3158 <__alt_data_end+0xff003158>
    46d0:	0021883a 	mov	r16,zero
    46d4:	003e0706 	br	3ef4 <__alt_data_end+0xff003ef4>
    46d8:	d9002c17 	ldw	r4,176(sp)
    46dc:	d9801e04 	addi	r6,sp,120
    46e0:	b80b883a 	mov	r5,r23
    46e4:	000965c0 	call	965c <__sprint_r>
    46e8:	1039c91e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    46ec:	d8802617 	ldw	r2,152(sp)
    46f0:	d9403317 	ldw	r5,204(sp)
    46f4:	d8c02017 	ldw	r3,128(sp)
    46f8:	da000404 	addi	r8,sp,16
    46fc:	2885c83a 	sub	r2,r5,r2
    4700:	003dfb06 	br	3ef0 <__alt_data_end+0xff003ef0>
    4704:	9080004c 	andi	r2,r18,1
    4708:	103e8f1e 	bne	r2,zero,4148 <__alt_data_end+0xff004148>
    470c:	d8802117 	ldw	r2,132(sp)
    4710:	003e9e06 	br	418c <__alt_data_end+0xff00418c>
    4714:	1025883a 	mov	r18,r2
    4718:	0039883a 	mov	fp,zero
    471c:	00800084 	movi	r2,2
    4720:	003fd306 	br	4670 <__alt_data_end+0xff004670>
    4724:	07000b44 	movi	fp,45
    4728:	df002785 	stb	fp,158(sp)
    472c:	003a4006 	br	3030 <__alt_data_end+0xff003030>
    4730:	00c00b44 	movi	r3,45
    4734:	d8c02785 	stb	r3,158(sp)
    4738:	d8802a15 	stw	r2,168(sp)
    473c:	dc802b17 	ldw	r18,172(sp)
    4740:	d8002915 	stw	zero,164(sp)
    4744:	07000b44 	movi	fp,45
    4748:	003a8006 	br	314c <__alt_data_end+0xff00314c>
    474c:	04000074 	movhi	r16,1
    4750:	84054504 	addi	r16,r16,5396
    4754:	003f4706 	br	4474 <__alt_data_end+0xff004474>
    4758:	d8c02d17 	ldw	r3,180(sp)
    475c:	d9002f17 	ldw	r4,188(sp)
    4760:	18800017 	ldw	r2,0(r3)
    4764:	18c00104 	addi	r3,r3,4
    4768:	d8c02d15 	stw	r3,180(sp)
    476c:	11000015 	stw	r4,0(r2)
    4770:	0038dd06 	br	2ae8 <__alt_data_end+0xff002ae8>
    4774:	dd802617 	ldw	r22,152(sp)
    4778:	00bfff44 	movi	r2,-3
    477c:	b0801c16 	blt	r22,r2,47f0 <___vfprintf_internal_r+0x1de8>
    4780:	d9402917 	ldw	r5,164(sp)
    4784:	2d801a16 	blt	r5,r22,47f0 <___vfprintf_internal_r+0x1de8>
    4788:	dd803215 	stw	r22,200(sp)
    478c:	003e8906 	br	41b4 <__alt_data_end+0xff0041b4>
    4790:	01000074 	movhi	r4,1
    4794:	21055284 	addi	r4,r4,5450
    4798:	d9002b15 	stw	r4,172(sp)
    479c:	003c9106 	br	39e4 <__alt_data_end+0xff0039e4>
    47a0:	e005883a 	mov	r2,fp
    47a4:	003e7906 	br	418c <__alt_data_end+0xff00418c>
    47a8:	d9402917 	ldw	r5,164(sp)
    47ac:	df002783 	ldbu	fp,158(sp)
    47b0:	dcc02d15 	stw	r19,180(sp)
    47b4:	d9402a15 	stw	r5,168(sp)
    47b8:	d9402e15 	stw	r5,184(sp)
    47bc:	d8002915 	stw	zero,164(sp)
    47c0:	d8003215 	stw	zero,200(sp)
    47c4:	003a5d06 	br	313c <__alt_data_end+0xff00313c>
    47c8:	9080004c 	andi	r2,r18,1
    47cc:	0039883a 	mov	fp,zero
    47d0:	10000426 	beq	r2,zero,47e4 <___vfprintf_internal_r+0x1ddc>
    47d4:	00800c04 	movi	r2,48
    47d8:	dc001dc4 	addi	r16,sp,119
    47dc:	d8801dc5 	stb	r2,119(sp)
    47e0:	003b8006 	br	35e4 <__alt_data_end+0xff0035e4>
    47e4:	d8002e15 	stw	zero,184(sp)
    47e8:	dc001e04 	addi	r16,sp,120
    47ec:	003a4d06 	br	3124 <__alt_data_end+0xff003124>
    47f0:	8c7fff84 	addi	r17,r17,-2
    47f4:	b5bfffc4 	addi	r22,r22,-1
    47f8:	dd802615 	stw	r22,152(sp)
    47fc:	dc4022c5 	stb	r17,139(sp)
    4800:	b000bf16 	blt	r22,zero,4b00 <___vfprintf_internal_r+0x20f8>
    4804:	00800ac4 	movi	r2,43
    4808:	d8802305 	stb	r2,140(sp)
    480c:	00800244 	movi	r2,9
    4810:	15807016 	blt	r2,r22,49d4 <___vfprintf_internal_r+0x1fcc>
    4814:	00800c04 	movi	r2,48
    4818:	b5800c04 	addi	r22,r22,48
    481c:	d8802345 	stb	r2,141(sp)
    4820:	dd802385 	stb	r22,142(sp)
    4824:	d88023c4 	addi	r2,sp,143
    4828:	df0022c4 	addi	fp,sp,139
    482c:	d8c03317 	ldw	r3,204(sp)
    4830:	1739c83a 	sub	fp,r2,fp
    4834:	d9003317 	ldw	r4,204(sp)
    4838:	e0c7883a 	add	r3,fp,r3
    483c:	df003a15 	stw	fp,232(sp)
    4840:	d8c02e15 	stw	r3,184(sp)
    4844:	00800044 	movi	r2,1
    4848:	1100b30e 	bge	r2,r4,4b18 <___vfprintf_internal_r+0x2110>
    484c:	d8c02e17 	ldw	r3,184(sp)
    4850:	18c00044 	addi	r3,r3,1
    4854:	d8c02e15 	stw	r3,184(sp)
    4858:	1805883a 	mov	r2,r3
    485c:	1800ac16 	blt	r3,zero,4b10 <___vfprintf_internal_r+0x2108>
    4860:	d8003215 	stw	zero,200(sp)
    4864:	003e5d06 	br	41dc <__alt_data_end+0xff0041dc>
    4868:	d9002c17 	ldw	r4,176(sp)
    486c:	d9801e04 	addi	r6,sp,120
    4870:	b80b883a 	mov	r5,r23
    4874:	000965c0 	call	965c <__sprint_r>
    4878:	1039651e 	bne	r2,zero,2e10 <__alt_data_end+0xff002e10>
    487c:	dc402617 	ldw	r17,152(sp)
    4880:	d8c02017 	ldw	r3,128(sp)
    4884:	d8801f17 	ldw	r2,124(sp)
    4888:	da000404 	addi	r8,sp,16
    488c:	003ed606 	br	43e8 <__alt_data_end+0xff0043e8>
    4890:	582b883a 	mov	r21,r11
    4894:	d8002915 	stw	zero,164(sp)
    4898:	0038bd06 	br	2b90 <__alt_data_end+0xff002b90>
    489c:	d8802917 	ldw	r2,164(sp)
    48a0:	103e071e 	bne	r2,zero,40c0 <__alt_data_end+0xff0040c0>
    48a4:	dc002915 	stw	r16,164(sp)
    48a8:	003e0506 	br	40c0 <__alt_data_end+0xff0040c0>
    48ac:	d9002917 	ldw	r4,164(sp)
    48b0:	20c00044 	addi	r3,r4,1
    48b4:	003e0f06 	br	40f4 <__alt_data_end+0xff0040f4>
    48b8:	01400184 	movi	r5,6
    48bc:	d9402915 	stw	r5,164(sp)
    48c0:	003dff06 	br	40c0 <__alt_data_end+0xff0040c0>
    48c4:	d8802104 	addi	r2,sp,132
    48c8:	d8800315 	stw	r2,12(sp)
    48cc:	d8802504 	addi	r2,sp,148
    48d0:	d8800215 	stw	r2,8(sp)
    48d4:	d8802604 	addi	r2,sp,152
    48d8:	d8800115 	stw	r2,4(sp)
    48dc:	d8802917 	ldw	r2,164(sp)
    48e0:	d9403617 	ldw	r5,216(sp)
    48e4:	d9002c17 	ldw	r4,176(sp)
    48e8:	d8800015 	stw	r2,0(sp)
    48ec:	01c000c4 	movi	r7,3
    48f0:	980d883a 	mov	r6,r19
    48f4:	da003d15 	stw	r8,244(sp)
    48f8:	000502c0 	call	502c <_dtoa_r>
    48fc:	d8c02917 	ldw	r3,164(sp)
    4900:	da003d17 	ldw	r8,244(sp)
    4904:	1021883a 	mov	r16,r2
    4908:	10f9883a 	add	fp,r2,r3
    490c:	81000007 	ldb	r4,0(r16)
    4910:	00800c04 	movi	r2,48
    4914:	20805e26 	beq	r4,r2,4a90 <___vfprintf_internal_r+0x2088>
    4918:	d8c02617 	ldw	r3,152(sp)
    491c:	e0f9883a 	add	fp,fp,r3
    4920:	003e0a06 	br	414c <__alt_data_end+0xff00414c>
    4924:	00c00b44 	movi	r3,45
    4928:	24e0003c 	xorhi	r19,r4,32768
    492c:	d8c02a05 	stb	r3,168(sp)
    4930:	003de906 	br	40d8 <__alt_data_end+0xff0040d8>
    4934:	d8c03217 	ldw	r3,200(sp)
    4938:	00c07a0e 	bge	zero,r3,4b24 <___vfprintf_internal_r+0x211c>
    493c:	00800044 	movi	r2,1
    4940:	d9003317 	ldw	r4,204(sp)
    4944:	1105883a 	add	r2,r2,r4
    4948:	d8802e15 	stw	r2,184(sp)
    494c:	10004e16 	blt	r2,zero,4a88 <___vfprintf_internal_r+0x2080>
    4950:	044019c4 	movi	r17,103
    4954:	003e2106 	br	41dc <__alt_data_end+0xff0041dc>
    4958:	d9002917 	ldw	r4,164(sp)
    495c:	d8802104 	addi	r2,sp,132
    4960:	d8800315 	stw	r2,12(sp)
    4964:	d9000015 	stw	r4,0(sp)
    4968:	d8802504 	addi	r2,sp,148
    496c:	d9403617 	ldw	r5,216(sp)
    4970:	d9002c17 	ldw	r4,176(sp)
    4974:	d8800215 	stw	r2,8(sp)
    4978:	d8802604 	addi	r2,sp,152
    497c:	d8800115 	stw	r2,4(sp)
    4980:	01c000c4 	movi	r7,3
    4984:	980d883a 	mov	r6,r19
    4988:	da003d15 	stw	r8,244(sp)
    498c:	000502c0 	call	502c <_dtoa_r>
    4990:	d8c02917 	ldw	r3,164(sp)
    4994:	da003d17 	ldw	r8,244(sp)
    4998:	1021883a 	mov	r16,r2
    499c:	00801184 	movi	r2,70
    49a0:	80f9883a 	add	fp,r16,r3
    49a4:	88bfd926 	beq	r17,r2,490c <__alt_data_end+0xff00490c>
    49a8:	003de806 	br	414c <__alt_data_end+0xff00414c>
    49ac:	d9002917 	ldw	r4,164(sp)
    49b0:	00c04d0e 	bge	zero,r3,4ae8 <___vfprintf_internal_r+0x20e0>
    49b4:	2000441e 	bne	r4,zero,4ac8 <___vfprintf_internal_r+0x20c0>
    49b8:	9480004c 	andi	r18,r18,1
    49bc:	9000421e 	bne	r18,zero,4ac8 <___vfprintf_internal_r+0x20c0>
    49c0:	1805883a 	mov	r2,r3
    49c4:	18007016 	blt	r3,zero,4b88 <___vfprintf_internal_r+0x2180>
    49c8:	d8c03217 	ldw	r3,200(sp)
    49cc:	d8c02e15 	stw	r3,184(sp)
    49d0:	003e0206 	br	41dc <__alt_data_end+0xff0041dc>
    49d4:	df0022c4 	addi	fp,sp,139
    49d8:	dc002915 	stw	r16,164(sp)
    49dc:	4027883a 	mov	r19,r8
    49e0:	e021883a 	mov	r16,fp
    49e4:	b009883a 	mov	r4,r22
    49e8:	01400284 	movi	r5,10
    49ec:	0001d300 	call	1d30 <__modsi3>
    49f0:	10800c04 	addi	r2,r2,48
    49f4:	843fffc4 	addi	r16,r16,-1
    49f8:	b009883a 	mov	r4,r22
    49fc:	01400284 	movi	r5,10
    4a00:	80800005 	stb	r2,0(r16)
    4a04:	0001cac0 	call	1cac <__divsi3>
    4a08:	102d883a 	mov	r22,r2
    4a0c:	00800244 	movi	r2,9
    4a10:	15bff416 	blt	r2,r22,49e4 <__alt_data_end+0xff0049e4>
    4a14:	9811883a 	mov	r8,r19
    4a18:	b0800c04 	addi	r2,r22,48
    4a1c:	8027883a 	mov	r19,r16
    4a20:	997fffc4 	addi	r5,r19,-1
    4a24:	98bfffc5 	stb	r2,-1(r19)
    4a28:	dc002917 	ldw	r16,164(sp)
    4a2c:	2f006a2e 	bgeu	r5,fp,4bd8 <___vfprintf_internal_r+0x21d0>
    4a30:	d9c02384 	addi	r7,sp,142
    4a34:	3ccfc83a 	sub	r7,r7,r19
    4a38:	d9002344 	addi	r4,sp,141
    4a3c:	e1cf883a 	add	r7,fp,r7
    4a40:	00000106 	br	4a48 <___vfprintf_internal_r+0x2040>
    4a44:	28800003 	ldbu	r2,0(r5)
    4a48:	20800005 	stb	r2,0(r4)
    4a4c:	21000044 	addi	r4,r4,1
    4a50:	29400044 	addi	r5,r5,1
    4a54:	393ffb1e 	bne	r7,r4,4a44 <__alt_data_end+0xff004a44>
    4a58:	d8802304 	addi	r2,sp,140
    4a5c:	14c5c83a 	sub	r2,r2,r19
    4a60:	d8c02344 	addi	r3,sp,141
    4a64:	1885883a 	add	r2,r3,r2
    4a68:	003f7006 	br	482c <__alt_data_end+0xff00482c>
    4a6c:	0005883a 	mov	r2,zero
    4a70:	003f0f06 	br	46b0 <__alt_data_end+0xff0046b0>
    4a74:	d8c03217 	ldw	r3,200(sp)
    4a78:	18c00044 	addi	r3,r3,1
    4a7c:	d8c02e15 	stw	r3,184(sp)
    4a80:	1805883a 	mov	r2,r3
    4a84:	183fb20e 	bge	r3,zero,4950 <__alt_data_end+0xff004950>
    4a88:	0005883a 	mov	r2,zero
    4a8c:	003fb006 	br	4950 <__alt_data_end+0xff004950>
    4a90:	d9003617 	ldw	r4,216(sp)
    4a94:	000d883a 	mov	r6,zero
    4a98:	000f883a 	mov	r7,zero
    4a9c:	980b883a 	mov	r5,r19
    4aa0:	d8c03c15 	stw	r3,240(sp)
    4aa4:	da003d15 	stw	r8,244(sp)
    4aa8:	000d1200 	call	d120 <__eqdf2>
    4aac:	d8c03c17 	ldw	r3,240(sp)
    4ab0:	da003d17 	ldw	r8,244(sp)
    4ab4:	103f9826 	beq	r2,zero,4918 <__alt_data_end+0xff004918>
    4ab8:	00800044 	movi	r2,1
    4abc:	10c7c83a 	sub	r3,r2,r3
    4ac0:	d8c02615 	stw	r3,152(sp)
    4ac4:	003f9506 	br	491c <__alt_data_end+0xff00491c>
    4ac8:	d9002917 	ldw	r4,164(sp)
    4acc:	d8c03217 	ldw	r3,200(sp)
    4ad0:	20800044 	addi	r2,r4,1
    4ad4:	1885883a 	add	r2,r3,r2
    4ad8:	d8802e15 	stw	r2,184(sp)
    4adc:	103dbf0e 	bge	r2,zero,41dc <__alt_data_end+0xff0041dc>
    4ae0:	0005883a 	mov	r2,zero
    4ae4:	003dbd06 	br	41dc <__alt_data_end+0xff0041dc>
    4ae8:	2000211e 	bne	r4,zero,4b70 <___vfprintf_internal_r+0x2168>
    4aec:	9480004c 	andi	r18,r18,1
    4af0:	90001f1e 	bne	r18,zero,4b70 <___vfprintf_internal_r+0x2168>
    4af4:	00800044 	movi	r2,1
    4af8:	d8802e15 	stw	r2,184(sp)
    4afc:	003db706 	br	41dc <__alt_data_end+0xff0041dc>
    4b00:	00800b44 	movi	r2,45
    4b04:	05adc83a 	sub	r22,zero,r22
    4b08:	d8802305 	stb	r2,140(sp)
    4b0c:	003f3f06 	br	480c <__alt_data_end+0xff00480c>
    4b10:	0005883a 	mov	r2,zero
    4b14:	003f5206 	br	4860 <__alt_data_end+0xff004860>
    4b18:	90a4703a 	and	r18,r18,r2
    4b1c:	903f4e26 	beq	r18,zero,4858 <__alt_data_end+0xff004858>
    4b20:	003f4a06 	br	484c <__alt_data_end+0xff00484c>
    4b24:	00800084 	movi	r2,2
    4b28:	10c5c83a 	sub	r2,r2,r3
    4b2c:	003f8406 	br	4940 <__alt_data_end+0xff004940>
    4b30:	d8802d17 	ldw	r2,180(sp)
    4b34:	d9002d17 	ldw	r4,180(sp)
    4b38:	ac400043 	ldbu	r17,1(r21)
    4b3c:	10800017 	ldw	r2,0(r2)
    4b40:	582b883a 	mov	r21,r11
    4b44:	d8802915 	stw	r2,164(sp)
    4b48:	20800104 	addi	r2,r4,4
    4b4c:	d9002917 	ldw	r4,164(sp)
    4b50:	d8802d15 	stw	r2,180(sp)
    4b54:	203e7a0e 	bge	r4,zero,4540 <__alt_data_end+0xff004540>
    4b58:	8c403fcc 	andi	r17,r17,255
    4b5c:	00bfffc4 	movi	r2,-1
    4b60:	8c40201c 	xori	r17,r17,128
    4b64:	d8802915 	stw	r2,164(sp)
    4b68:	8c7fe004 	addi	r17,r17,-128
    4b6c:	00380706 	br	2b8c <__alt_data_end+0xff002b8c>
    4b70:	d8c02917 	ldw	r3,164(sp)
    4b74:	18c00084 	addi	r3,r3,2
    4b78:	d8c02e15 	stw	r3,184(sp)
    4b7c:	1805883a 	mov	r2,r3
    4b80:	183d960e 	bge	r3,zero,41dc <__alt_data_end+0xff0041dc>
    4b84:	003fd606 	br	4ae0 <__alt_data_end+0xff004ae0>
    4b88:	0005883a 	mov	r2,zero
    4b8c:	003f8e06 	br	49c8 <__alt_data_end+0xff0049c8>
    4b90:	9080004c 	andi	r2,r18,1
    4b94:	103f811e 	bne	r2,zero,499c <__alt_data_end+0xff00499c>
    4b98:	d8802117 	ldw	r2,132(sp)
    4b9c:	1405c83a 	sub	r2,r2,r16
    4ba0:	d8803315 	stw	r2,204(sp)
    4ba4:	b47ef326 	beq	r22,r17,4774 <__alt_data_end+0xff004774>
    4ba8:	dd802617 	ldw	r22,152(sp)
    4bac:	003f1106 	br	47f4 <__alt_data_end+0xff0047f4>
    4bb0:	d9c02785 	stb	r7,158(sp)
    4bb4:	00390406 	br	2fc8 <__alt_data_end+0xff002fc8>
    4bb8:	d9c02785 	stb	r7,158(sp)
    4bbc:	0038d306 	br	2f0c <__alt_data_end+0xff002f0c>
    4bc0:	d9c02785 	stb	r7,158(sp)
    4bc4:	003a6106 	br	354c <__alt_data_end+0xff00354c>
    4bc8:	d9c02785 	stb	r7,158(sp)
    4bcc:	003af806 	br	37b0 <__alt_data_end+0xff0037b0>
    4bd0:	0005883a 	mov	r2,zero
    4bd4:	003d7e06 	br	41d0 <__alt_data_end+0xff0041d0>
    4bd8:	d8802344 	addi	r2,sp,141
    4bdc:	003f1306 	br	482c <__alt_data_end+0xff00482c>
    4be0:	d9c02785 	stb	r7,158(sp)
    4be4:	00392306 	br	3074 <__alt_data_end+0xff003074>
    4be8:	d9c02785 	stb	r7,158(sp)
    4bec:	003aa906 	br	3694 <__alt_data_end+0xff003694>
    4bf0:	d9c02785 	stb	r7,158(sp)
    4bf4:	003a3d06 	br	34ec <__alt_data_end+0xff0034ec>
    4bf8:	d9c02785 	stb	r7,158(sp)
    4bfc:	003aca06 	br	3728 <__alt_data_end+0xff003728>

00004c00 <__vfprintf_internal>:
    4c00:	00800074 	movhi	r2,1
    4c04:	108cad04 	addi	r2,r2,12980
    4c08:	300f883a 	mov	r7,r6
    4c0c:	280d883a 	mov	r6,r5
    4c10:	200b883a 	mov	r5,r4
    4c14:	11000017 	ldw	r4,0(r2)
    4c18:	0002a081 	jmpi	2a08 <___vfprintf_internal_r>

00004c1c <__sbprintf>:
    4c1c:	2880030b 	ldhu	r2,12(r5)
    4c20:	2ac01917 	ldw	r11,100(r5)
    4c24:	2a80038b 	ldhu	r10,14(r5)
    4c28:	2a400717 	ldw	r9,28(r5)
    4c2c:	2a000917 	ldw	r8,36(r5)
    4c30:	defee204 	addi	sp,sp,-1144
    4c34:	00c10004 	movi	r3,1024
    4c38:	dc011a15 	stw	r16,1128(sp)
    4c3c:	10bfff4c 	andi	r2,r2,65533
    4c40:	2821883a 	mov	r16,r5
    4c44:	d8cb883a 	add	r5,sp,r3
    4c48:	dc811c15 	stw	r18,1136(sp)
    4c4c:	dc411b15 	stw	r17,1132(sp)
    4c50:	dfc11d15 	stw	ra,1140(sp)
    4c54:	2025883a 	mov	r18,r4
    4c58:	d881030d 	sth	r2,1036(sp)
    4c5c:	dac11915 	stw	r11,1124(sp)
    4c60:	da81038d 	sth	r10,1038(sp)
    4c64:	da410715 	stw	r9,1052(sp)
    4c68:	da010915 	stw	r8,1060(sp)
    4c6c:	dec10015 	stw	sp,1024(sp)
    4c70:	dec10415 	stw	sp,1040(sp)
    4c74:	d8c10215 	stw	r3,1032(sp)
    4c78:	d8c10515 	stw	r3,1044(sp)
    4c7c:	d8010615 	stw	zero,1048(sp)
    4c80:	0002a080 	call	2a08 <___vfprintf_internal_r>
    4c84:	1023883a 	mov	r17,r2
    4c88:	10000416 	blt	r2,zero,4c9c <__sbprintf+0x80>
    4c8c:	d9410004 	addi	r5,sp,1024
    4c90:	9009883a 	mov	r4,r18
    4c94:	00068d00 	call	68d0 <_fflush_r>
    4c98:	10000d1e 	bne	r2,zero,4cd0 <__sbprintf+0xb4>
    4c9c:	d881030b 	ldhu	r2,1036(sp)
    4ca0:	1080100c 	andi	r2,r2,64
    4ca4:	10000326 	beq	r2,zero,4cb4 <__sbprintf+0x98>
    4ca8:	8080030b 	ldhu	r2,12(r16)
    4cac:	10801014 	ori	r2,r2,64
    4cb0:	8080030d 	sth	r2,12(r16)
    4cb4:	8805883a 	mov	r2,r17
    4cb8:	dfc11d17 	ldw	ra,1140(sp)
    4cbc:	dc811c17 	ldw	r18,1136(sp)
    4cc0:	dc411b17 	ldw	r17,1132(sp)
    4cc4:	dc011a17 	ldw	r16,1128(sp)
    4cc8:	dec11e04 	addi	sp,sp,1144
    4ccc:	f800283a 	ret
    4cd0:	047fffc4 	movi	r17,-1
    4cd4:	003ff106 	br	4c9c <__alt_data_end+0xff004c9c>

00004cd8 <__swsetup_r>:
    4cd8:	00800074 	movhi	r2,1
    4cdc:	defffd04 	addi	sp,sp,-12
    4ce0:	108cad04 	addi	r2,r2,12980
    4ce4:	dc400115 	stw	r17,4(sp)
    4ce8:	2023883a 	mov	r17,r4
    4cec:	11000017 	ldw	r4,0(r2)
    4cf0:	dc000015 	stw	r16,0(sp)
    4cf4:	dfc00215 	stw	ra,8(sp)
    4cf8:	2821883a 	mov	r16,r5
    4cfc:	20000226 	beq	r4,zero,4d08 <__swsetup_r+0x30>
    4d00:	20800e17 	ldw	r2,56(r4)
    4d04:	10003126 	beq	r2,zero,4dcc <__swsetup_r+0xf4>
    4d08:	8080030b 	ldhu	r2,12(r16)
    4d0c:	10c0020c 	andi	r3,r2,8
    4d10:	1009883a 	mov	r4,r2
    4d14:	18000f26 	beq	r3,zero,4d54 <__swsetup_r+0x7c>
    4d18:	80c00417 	ldw	r3,16(r16)
    4d1c:	18001526 	beq	r3,zero,4d74 <__swsetup_r+0x9c>
    4d20:	1100004c 	andi	r4,r2,1
    4d24:	20001c1e 	bne	r4,zero,4d98 <__swsetup_r+0xc0>
    4d28:	1080008c 	andi	r2,r2,2
    4d2c:	1000291e 	bne	r2,zero,4dd4 <__swsetup_r+0xfc>
    4d30:	80800517 	ldw	r2,20(r16)
    4d34:	80800215 	stw	r2,8(r16)
    4d38:	18001c26 	beq	r3,zero,4dac <__swsetup_r+0xd4>
    4d3c:	0005883a 	mov	r2,zero
    4d40:	dfc00217 	ldw	ra,8(sp)
    4d44:	dc400117 	ldw	r17,4(sp)
    4d48:	dc000017 	ldw	r16,0(sp)
    4d4c:	dec00304 	addi	sp,sp,12
    4d50:	f800283a 	ret
    4d54:	2080040c 	andi	r2,r4,16
    4d58:	10002e26 	beq	r2,zero,4e14 <__swsetup_r+0x13c>
    4d5c:	2080010c 	andi	r2,r4,4
    4d60:	10001e1e 	bne	r2,zero,4ddc <__swsetup_r+0x104>
    4d64:	80c00417 	ldw	r3,16(r16)
    4d68:	20800214 	ori	r2,r4,8
    4d6c:	8080030d 	sth	r2,12(r16)
    4d70:	183feb1e 	bne	r3,zero,4d20 <__alt_data_end+0xff004d20>
    4d74:	1100a00c 	andi	r4,r2,640
    4d78:	01408004 	movi	r5,512
    4d7c:	217fe826 	beq	r4,r5,4d20 <__alt_data_end+0xff004d20>
    4d80:	800b883a 	mov	r5,r16
    4d84:	8809883a 	mov	r4,r17
    4d88:	00078500 	call	7850 <__smakebuf_r>
    4d8c:	8080030b 	ldhu	r2,12(r16)
    4d90:	80c00417 	ldw	r3,16(r16)
    4d94:	003fe206 	br	4d20 <__alt_data_end+0xff004d20>
    4d98:	80800517 	ldw	r2,20(r16)
    4d9c:	80000215 	stw	zero,8(r16)
    4da0:	0085c83a 	sub	r2,zero,r2
    4da4:	80800615 	stw	r2,24(r16)
    4da8:	183fe41e 	bne	r3,zero,4d3c <__alt_data_end+0xff004d3c>
    4dac:	80c0030b 	ldhu	r3,12(r16)
    4db0:	0005883a 	mov	r2,zero
    4db4:	1900200c 	andi	r4,r3,128
    4db8:	203fe126 	beq	r4,zero,4d40 <__alt_data_end+0xff004d40>
    4dbc:	18c01014 	ori	r3,r3,64
    4dc0:	80c0030d 	sth	r3,12(r16)
    4dc4:	00bfffc4 	movi	r2,-1
    4dc8:	003fdd06 	br	4d40 <__alt_data_end+0xff004d40>
    4dcc:	0006cac0 	call	6cac <__sinit>
    4dd0:	003fcd06 	br	4d08 <__alt_data_end+0xff004d08>
    4dd4:	0005883a 	mov	r2,zero
    4dd8:	003fd606 	br	4d34 <__alt_data_end+0xff004d34>
    4ddc:	81400c17 	ldw	r5,48(r16)
    4de0:	28000626 	beq	r5,zero,4dfc <__swsetup_r+0x124>
    4de4:	80801004 	addi	r2,r16,64
    4de8:	28800326 	beq	r5,r2,4df8 <__swsetup_r+0x120>
    4dec:	8809883a 	mov	r4,r17
    4df0:	0006e200 	call	6e20 <_free_r>
    4df4:	8100030b 	ldhu	r4,12(r16)
    4df8:	80000c15 	stw	zero,48(r16)
    4dfc:	80c00417 	ldw	r3,16(r16)
    4e00:	00bff6c4 	movi	r2,-37
    4e04:	1108703a 	and	r4,r2,r4
    4e08:	80000115 	stw	zero,4(r16)
    4e0c:	80c00015 	stw	r3,0(r16)
    4e10:	003fd506 	br	4d68 <__alt_data_end+0xff004d68>
    4e14:	00800244 	movi	r2,9
    4e18:	88800015 	stw	r2,0(r17)
    4e1c:	20801014 	ori	r2,r4,64
    4e20:	8080030d 	sth	r2,12(r16)
    4e24:	00bfffc4 	movi	r2,-1
    4e28:	003fc506 	br	4d40 <__alt_data_end+0xff004d40>

00004e2c <quorem>:
    4e2c:	defff704 	addi	sp,sp,-36
    4e30:	dc800215 	stw	r18,8(sp)
    4e34:	20800417 	ldw	r2,16(r4)
    4e38:	2c800417 	ldw	r18,16(r5)
    4e3c:	dfc00815 	stw	ra,32(sp)
    4e40:	ddc00715 	stw	r23,28(sp)
    4e44:	dd800615 	stw	r22,24(sp)
    4e48:	dd400515 	stw	r21,20(sp)
    4e4c:	dd000415 	stw	r20,16(sp)
    4e50:	dcc00315 	stw	r19,12(sp)
    4e54:	dc400115 	stw	r17,4(sp)
    4e58:	dc000015 	stw	r16,0(sp)
    4e5c:	14807116 	blt	r2,r18,5024 <quorem+0x1f8>
    4e60:	94bfffc4 	addi	r18,r18,-1
    4e64:	94ad883a 	add	r22,r18,r18
    4e68:	b5ad883a 	add	r22,r22,r22
    4e6c:	2c400504 	addi	r17,r5,20
    4e70:	8da9883a 	add	r20,r17,r22
    4e74:	25400504 	addi	r21,r4,20
    4e78:	282f883a 	mov	r23,r5
    4e7c:	adad883a 	add	r22,r21,r22
    4e80:	a1400017 	ldw	r5,0(r20)
    4e84:	2021883a 	mov	r16,r4
    4e88:	b1000017 	ldw	r4,0(r22)
    4e8c:	29400044 	addi	r5,r5,1
    4e90:	0001da40 	call	1da4 <__udivsi3>
    4e94:	1027883a 	mov	r19,r2
    4e98:	10002c26 	beq	r2,zero,4f4c <quorem+0x120>
    4e9c:	a813883a 	mov	r9,r21
    4ea0:	880b883a 	mov	r5,r17
    4ea4:	0009883a 	mov	r4,zero
    4ea8:	000d883a 	mov	r6,zero
    4eac:	2a000017 	ldw	r8,0(r5)
    4eb0:	49c00017 	ldw	r7,0(r9)
    4eb4:	29400104 	addi	r5,r5,4
    4eb8:	40bfffcc 	andi	r2,r8,65535
    4ebc:	14c5383a 	mul	r2,r2,r19
    4ec0:	4010d43a 	srli	r8,r8,16
    4ec4:	38ffffcc 	andi	r3,r7,65535
    4ec8:	1105883a 	add	r2,r2,r4
    4ecc:	1008d43a 	srli	r4,r2,16
    4ed0:	44d1383a 	mul	r8,r8,r19
    4ed4:	198d883a 	add	r6,r3,r6
    4ed8:	10ffffcc 	andi	r3,r2,65535
    4edc:	30c7c83a 	sub	r3,r6,r3
    4ee0:	380ed43a 	srli	r7,r7,16
    4ee4:	4105883a 	add	r2,r8,r4
    4ee8:	180dd43a 	srai	r6,r3,16
    4eec:	113fffcc 	andi	r4,r2,65535
    4ef0:	390fc83a 	sub	r7,r7,r4
    4ef4:	398d883a 	add	r6,r7,r6
    4ef8:	300e943a 	slli	r7,r6,16
    4efc:	18ffffcc 	andi	r3,r3,65535
    4f00:	1008d43a 	srli	r4,r2,16
    4f04:	38ceb03a 	or	r7,r7,r3
    4f08:	49c00015 	stw	r7,0(r9)
    4f0c:	300dd43a 	srai	r6,r6,16
    4f10:	4a400104 	addi	r9,r9,4
    4f14:	a17fe52e 	bgeu	r20,r5,4eac <__alt_data_end+0xff004eac>
    4f18:	b0800017 	ldw	r2,0(r22)
    4f1c:	10000b1e 	bne	r2,zero,4f4c <quorem+0x120>
    4f20:	b0bfff04 	addi	r2,r22,-4
    4f24:	a880082e 	bgeu	r21,r2,4f48 <quorem+0x11c>
    4f28:	b0ffff17 	ldw	r3,-4(r22)
    4f2c:	18000326 	beq	r3,zero,4f3c <quorem+0x110>
    4f30:	00000506 	br	4f48 <quorem+0x11c>
    4f34:	10c00017 	ldw	r3,0(r2)
    4f38:	1800031e 	bne	r3,zero,4f48 <quorem+0x11c>
    4f3c:	10bfff04 	addi	r2,r2,-4
    4f40:	94bfffc4 	addi	r18,r18,-1
    4f44:	a8bffb36 	bltu	r21,r2,4f34 <__alt_data_end+0xff004f34>
    4f48:	84800415 	stw	r18,16(r16)
    4f4c:	b80b883a 	mov	r5,r23
    4f50:	8009883a 	mov	r4,r16
    4f54:	000863c0 	call	863c <__mcmp>
    4f58:	10002616 	blt	r2,zero,4ff4 <quorem+0x1c8>
    4f5c:	9cc00044 	addi	r19,r19,1
    4f60:	a805883a 	mov	r2,r21
    4f64:	000b883a 	mov	r5,zero
    4f68:	11000017 	ldw	r4,0(r2)
    4f6c:	89800017 	ldw	r6,0(r17)
    4f70:	10800104 	addi	r2,r2,4
    4f74:	20ffffcc 	andi	r3,r4,65535
    4f78:	194b883a 	add	r5,r3,r5
    4f7c:	30ffffcc 	andi	r3,r6,65535
    4f80:	28c7c83a 	sub	r3,r5,r3
    4f84:	300cd43a 	srli	r6,r6,16
    4f88:	2008d43a 	srli	r4,r4,16
    4f8c:	180bd43a 	srai	r5,r3,16
    4f90:	18ffffcc 	andi	r3,r3,65535
    4f94:	2189c83a 	sub	r4,r4,r6
    4f98:	2149883a 	add	r4,r4,r5
    4f9c:	200c943a 	slli	r6,r4,16
    4fa0:	8c400104 	addi	r17,r17,4
    4fa4:	200bd43a 	srai	r5,r4,16
    4fa8:	30c6b03a 	or	r3,r6,r3
    4fac:	10ffff15 	stw	r3,-4(r2)
    4fb0:	a47fed2e 	bgeu	r20,r17,4f68 <__alt_data_end+0xff004f68>
    4fb4:	9485883a 	add	r2,r18,r18
    4fb8:	1085883a 	add	r2,r2,r2
    4fbc:	a887883a 	add	r3,r21,r2
    4fc0:	18800017 	ldw	r2,0(r3)
    4fc4:	10000b1e 	bne	r2,zero,4ff4 <quorem+0x1c8>
    4fc8:	18bfff04 	addi	r2,r3,-4
    4fcc:	a880082e 	bgeu	r21,r2,4ff0 <quorem+0x1c4>
    4fd0:	18ffff17 	ldw	r3,-4(r3)
    4fd4:	18000326 	beq	r3,zero,4fe4 <quorem+0x1b8>
    4fd8:	00000506 	br	4ff0 <quorem+0x1c4>
    4fdc:	10c00017 	ldw	r3,0(r2)
    4fe0:	1800031e 	bne	r3,zero,4ff0 <quorem+0x1c4>
    4fe4:	10bfff04 	addi	r2,r2,-4
    4fe8:	94bfffc4 	addi	r18,r18,-1
    4fec:	a8bffb36 	bltu	r21,r2,4fdc <__alt_data_end+0xff004fdc>
    4ff0:	84800415 	stw	r18,16(r16)
    4ff4:	9805883a 	mov	r2,r19
    4ff8:	dfc00817 	ldw	ra,32(sp)
    4ffc:	ddc00717 	ldw	r23,28(sp)
    5000:	dd800617 	ldw	r22,24(sp)
    5004:	dd400517 	ldw	r21,20(sp)
    5008:	dd000417 	ldw	r20,16(sp)
    500c:	dcc00317 	ldw	r19,12(sp)
    5010:	dc800217 	ldw	r18,8(sp)
    5014:	dc400117 	ldw	r17,4(sp)
    5018:	dc000017 	ldw	r16,0(sp)
    501c:	dec00904 	addi	sp,sp,36
    5020:	f800283a 	ret
    5024:	0005883a 	mov	r2,zero
    5028:	003ff306 	br	4ff8 <__alt_data_end+0xff004ff8>

0000502c <_dtoa_r>:
    502c:	20801017 	ldw	r2,64(r4)
    5030:	deffde04 	addi	sp,sp,-136
    5034:	df002015 	stw	fp,128(sp)
    5038:	dcc01b15 	stw	r19,108(sp)
    503c:	dc801a15 	stw	r18,104(sp)
    5040:	dc401915 	stw	r17,100(sp)
    5044:	dc001815 	stw	r16,96(sp)
    5048:	dfc02115 	stw	ra,132(sp)
    504c:	ddc01f15 	stw	r23,124(sp)
    5050:	dd801e15 	stw	r22,120(sp)
    5054:	dd401d15 	stw	r21,116(sp)
    5058:	dd001c15 	stw	r20,112(sp)
    505c:	d9c00315 	stw	r7,12(sp)
    5060:	2039883a 	mov	fp,r4
    5064:	3023883a 	mov	r17,r6
    5068:	2825883a 	mov	r18,r5
    506c:	dc002417 	ldw	r16,144(sp)
    5070:	3027883a 	mov	r19,r6
    5074:	10000826 	beq	r2,zero,5098 <_dtoa_r+0x6c>
    5078:	21801117 	ldw	r6,68(r4)
    507c:	00c00044 	movi	r3,1
    5080:	100b883a 	mov	r5,r2
    5084:	1986983a 	sll	r3,r3,r6
    5088:	11800115 	stw	r6,4(r2)
    508c:	10c00215 	stw	r3,8(r2)
    5090:	0007e1c0 	call	7e1c <_Bfree>
    5094:	e0001015 	stw	zero,64(fp)
    5098:	88002e16 	blt	r17,zero,5154 <_dtoa_r+0x128>
    509c:	80000015 	stw	zero,0(r16)
    50a0:	889ffc2c 	andhi	r2,r17,32752
    50a4:	00dffc34 	movhi	r3,32752
    50a8:	10c01c26 	beq	r2,r3,511c <_dtoa_r+0xf0>
    50ac:	000d883a 	mov	r6,zero
    50b0:	000f883a 	mov	r7,zero
    50b4:	9009883a 	mov	r4,r18
    50b8:	980b883a 	mov	r5,r19
    50bc:	000d1200 	call	d120 <__eqdf2>
    50c0:	10002b1e 	bne	r2,zero,5170 <_dtoa_r+0x144>
    50c4:	d9c02317 	ldw	r7,140(sp)
    50c8:	00800044 	movi	r2,1
    50cc:	38800015 	stw	r2,0(r7)
    50d0:	d8802517 	ldw	r2,148(sp)
    50d4:	10019e26 	beq	r2,zero,5750 <_dtoa_r+0x724>
    50d8:	d8c02517 	ldw	r3,148(sp)
    50dc:	00800074 	movhi	r2,1
    50e0:	10855244 	addi	r2,r2,5449
    50e4:	18800015 	stw	r2,0(r3)
    50e8:	10bfffc4 	addi	r2,r2,-1
    50ec:	dfc02117 	ldw	ra,132(sp)
    50f0:	df002017 	ldw	fp,128(sp)
    50f4:	ddc01f17 	ldw	r23,124(sp)
    50f8:	dd801e17 	ldw	r22,120(sp)
    50fc:	dd401d17 	ldw	r21,116(sp)
    5100:	dd001c17 	ldw	r20,112(sp)
    5104:	dcc01b17 	ldw	r19,108(sp)
    5108:	dc801a17 	ldw	r18,104(sp)
    510c:	dc401917 	ldw	r17,100(sp)
    5110:	dc001817 	ldw	r16,96(sp)
    5114:	dec02204 	addi	sp,sp,136
    5118:	f800283a 	ret
    511c:	d8c02317 	ldw	r3,140(sp)
    5120:	0089c3c4 	movi	r2,9999
    5124:	18800015 	stw	r2,0(r3)
    5128:	90017726 	beq	r18,zero,5708 <_dtoa_r+0x6dc>
    512c:	00800074 	movhi	r2,1
    5130:	10855e04 	addi	r2,r2,5496
    5134:	d9002517 	ldw	r4,148(sp)
    5138:	203fec26 	beq	r4,zero,50ec <__alt_data_end+0xff0050ec>
    513c:	10c000c7 	ldb	r3,3(r2)
    5140:	1801781e 	bne	r3,zero,5724 <_dtoa_r+0x6f8>
    5144:	10c000c4 	addi	r3,r2,3
    5148:	d9802517 	ldw	r6,148(sp)
    514c:	30c00015 	stw	r3,0(r6)
    5150:	003fe606 	br	50ec <__alt_data_end+0xff0050ec>
    5154:	04e00034 	movhi	r19,32768
    5158:	9cffffc4 	addi	r19,r19,-1
    515c:	00800044 	movi	r2,1
    5160:	8ce6703a 	and	r19,r17,r19
    5164:	80800015 	stw	r2,0(r16)
    5168:	9823883a 	mov	r17,r19
    516c:	003fcc06 	br	50a0 <__alt_data_end+0xff0050a0>
    5170:	d8800204 	addi	r2,sp,8
    5174:	d8800015 	stw	r2,0(sp)
    5178:	d9c00104 	addi	r7,sp,4
    517c:	900b883a 	mov	r5,r18
    5180:	980d883a 	mov	r6,r19
    5184:	e009883a 	mov	r4,fp
    5188:	8820d53a 	srli	r16,r17,20
    518c:	0008a080 	call	8a08 <__d2b>
    5190:	d8800915 	stw	r2,36(sp)
    5194:	8001651e 	bne	r16,zero,572c <_dtoa_r+0x700>
    5198:	dd800217 	ldw	r22,8(sp)
    519c:	dc000117 	ldw	r16,4(sp)
    51a0:	00800804 	movi	r2,32
    51a4:	b421883a 	add	r16,r22,r16
    51a8:	80c10c84 	addi	r3,r16,1074
    51ac:	10c2d10e 	bge	r2,r3,5cf4 <_dtoa_r+0xcc8>
    51b0:	00801004 	movi	r2,64
    51b4:	81010484 	addi	r4,r16,1042
    51b8:	10c7c83a 	sub	r3,r2,r3
    51bc:	9108d83a 	srl	r4,r18,r4
    51c0:	88e2983a 	sll	r17,r17,r3
    51c4:	2448b03a 	or	r4,r4,r17
    51c8:	000e4e80 	call	e4e8 <__floatunsidf>
    51cc:	017f8434 	movhi	r5,65040
    51d0:	01800044 	movi	r6,1
    51d4:	1009883a 	mov	r4,r2
    51d8:	194b883a 	add	r5,r3,r5
    51dc:	843fffc4 	addi	r16,r16,-1
    51e0:	d9801115 	stw	r6,68(sp)
    51e4:	000d883a 	mov	r6,zero
    51e8:	01cffe34 	movhi	r7,16376
    51ec:	000da900 	call	da90 <__subdf3>
    51f0:	0198dbf4 	movhi	r6,25455
    51f4:	01cff4f4 	movhi	r7,16339
    51f8:	3190d844 	addi	r6,r6,17249
    51fc:	39e1e9c4 	addi	r7,r7,-30809
    5200:	1009883a 	mov	r4,r2
    5204:	180b883a 	mov	r5,r3
    5208:	000d3780 	call	d378 <__muldf3>
    520c:	01a2d874 	movhi	r6,35681
    5210:	01cff1f4 	movhi	r7,16327
    5214:	31b22cc4 	addi	r6,r6,-14157
    5218:	39e28a04 	addi	r7,r7,-30168
    521c:	180b883a 	mov	r5,r3
    5220:	1009883a 	mov	r4,r2
    5224:	000bf8c0 	call	bf8c <__adddf3>
    5228:	8009883a 	mov	r4,r16
    522c:	1029883a 	mov	r20,r2
    5230:	1823883a 	mov	r17,r3
    5234:	000e40c0 	call	e40c <__floatsidf>
    5238:	019427f4 	movhi	r6,20639
    523c:	01cff4f4 	movhi	r7,16339
    5240:	319e7ec4 	addi	r6,r6,31227
    5244:	39d104c4 	addi	r7,r7,17427
    5248:	1009883a 	mov	r4,r2
    524c:	180b883a 	mov	r5,r3
    5250:	000d3780 	call	d378 <__muldf3>
    5254:	100d883a 	mov	r6,r2
    5258:	180f883a 	mov	r7,r3
    525c:	a009883a 	mov	r4,r20
    5260:	880b883a 	mov	r5,r17
    5264:	000bf8c0 	call	bf8c <__adddf3>
    5268:	1009883a 	mov	r4,r2
    526c:	180b883a 	mov	r5,r3
    5270:	1029883a 	mov	r20,r2
    5274:	1823883a 	mov	r17,r3
    5278:	000e38c0 	call	e38c <__fixdfsi>
    527c:	000d883a 	mov	r6,zero
    5280:	000f883a 	mov	r7,zero
    5284:	a009883a 	mov	r4,r20
    5288:	880b883a 	mov	r5,r17
    528c:	d8800515 	stw	r2,20(sp)
    5290:	000d2840 	call	d284 <__ledf2>
    5294:	10028716 	blt	r2,zero,5cb4 <_dtoa_r+0xc88>
    5298:	d8c00517 	ldw	r3,20(sp)
    529c:	00800584 	movi	r2,22
    52a0:	10c27536 	bltu	r2,r3,5c78 <_dtoa_r+0xc4c>
    52a4:	180490fa 	slli	r2,r3,3
    52a8:	00c00074 	movhi	r3,1
    52ac:	18c57a04 	addi	r3,r3,5608
    52b0:	1885883a 	add	r2,r3,r2
    52b4:	11000017 	ldw	r4,0(r2)
    52b8:	11400117 	ldw	r5,4(r2)
    52bc:	900d883a 	mov	r6,r18
    52c0:	980f883a 	mov	r7,r19
    52c4:	000d1a80 	call	d1a8 <__gedf2>
    52c8:	00828d0e 	bge	zero,r2,5d00 <_dtoa_r+0xcd4>
    52cc:	d9000517 	ldw	r4,20(sp)
    52d0:	d8000e15 	stw	zero,56(sp)
    52d4:	213fffc4 	addi	r4,r4,-1
    52d8:	d9000515 	stw	r4,20(sp)
    52dc:	b42dc83a 	sub	r22,r22,r16
    52e0:	b5bfffc4 	addi	r22,r22,-1
    52e4:	b0026f16 	blt	r22,zero,5ca4 <_dtoa_r+0xc78>
    52e8:	d8000815 	stw	zero,32(sp)
    52ec:	d9c00517 	ldw	r7,20(sp)
    52f0:	38026416 	blt	r7,zero,5c84 <_dtoa_r+0xc58>
    52f4:	b1ed883a 	add	r22,r22,r7
    52f8:	d9c00d15 	stw	r7,52(sp)
    52fc:	d8000a15 	stw	zero,40(sp)
    5300:	d9800317 	ldw	r6,12(sp)
    5304:	00800244 	movi	r2,9
    5308:	11811436 	bltu	r2,r6,575c <_dtoa_r+0x730>
    530c:	00800144 	movi	r2,5
    5310:	1184e10e 	bge	r2,r6,6698 <_dtoa_r+0x166c>
    5314:	31bfff04 	addi	r6,r6,-4
    5318:	d9800315 	stw	r6,12(sp)
    531c:	0023883a 	mov	r17,zero
    5320:	d9800317 	ldw	r6,12(sp)
    5324:	008000c4 	movi	r2,3
    5328:	30836726 	beq	r6,r2,60c8 <_dtoa_r+0x109c>
    532c:	1183410e 	bge	r2,r6,6034 <_dtoa_r+0x1008>
    5330:	d9c00317 	ldw	r7,12(sp)
    5334:	00800104 	movi	r2,4
    5338:	38827c26 	beq	r7,r2,5d2c <_dtoa_r+0xd00>
    533c:	00800144 	movi	r2,5
    5340:	3884c41e 	bne	r7,r2,6654 <_dtoa_r+0x1628>
    5344:	00800044 	movi	r2,1
    5348:	d8800b15 	stw	r2,44(sp)
    534c:	d8c00517 	ldw	r3,20(sp)
    5350:	d9002217 	ldw	r4,136(sp)
    5354:	1907883a 	add	r3,r3,r4
    5358:	19800044 	addi	r6,r3,1
    535c:	d8c00c15 	stw	r3,48(sp)
    5360:	d9800615 	stw	r6,24(sp)
    5364:	0183a40e 	bge	zero,r6,61f8 <_dtoa_r+0x11cc>
    5368:	d9800617 	ldw	r6,24(sp)
    536c:	3021883a 	mov	r16,r6
    5370:	e0001115 	stw	zero,68(fp)
    5374:	008005c4 	movi	r2,23
    5378:	1184c92e 	bgeu	r2,r6,66a0 <_dtoa_r+0x1674>
    537c:	00c00044 	movi	r3,1
    5380:	00800104 	movi	r2,4
    5384:	1085883a 	add	r2,r2,r2
    5388:	11000504 	addi	r4,r2,20
    538c:	180b883a 	mov	r5,r3
    5390:	18c00044 	addi	r3,r3,1
    5394:	313ffb2e 	bgeu	r6,r4,5384 <__alt_data_end+0xff005384>
    5398:	e1401115 	stw	r5,68(fp)
    539c:	e009883a 	mov	r4,fp
    53a0:	0007d740 	call	7d74 <_Balloc>
    53a4:	d8800715 	stw	r2,28(sp)
    53a8:	e0801015 	stw	r2,64(fp)
    53ac:	00800384 	movi	r2,14
    53b0:	1400f736 	bltu	r2,r16,5790 <_dtoa_r+0x764>
    53b4:	8800f626 	beq	r17,zero,5790 <_dtoa_r+0x764>
    53b8:	d9c00517 	ldw	r7,20(sp)
    53bc:	01c39a0e 	bge	zero,r7,6228 <_dtoa_r+0x11fc>
    53c0:	388003cc 	andi	r2,r7,15
    53c4:	100490fa 	slli	r2,r2,3
    53c8:	382bd13a 	srai	r21,r7,4
    53cc:	00c00074 	movhi	r3,1
    53d0:	18c57a04 	addi	r3,r3,5608
    53d4:	1885883a 	add	r2,r3,r2
    53d8:	a8c0040c 	andi	r3,r21,16
    53dc:	12400017 	ldw	r9,0(r2)
    53e0:	12000117 	ldw	r8,4(r2)
    53e4:	18037926 	beq	r3,zero,61cc <_dtoa_r+0x11a0>
    53e8:	00800074 	movhi	r2,1
    53ec:	10857004 	addi	r2,r2,5568
    53f0:	11800817 	ldw	r6,32(r2)
    53f4:	11c00917 	ldw	r7,36(r2)
    53f8:	9009883a 	mov	r4,r18
    53fc:	980b883a 	mov	r5,r19
    5400:	da001715 	stw	r8,92(sp)
    5404:	da401615 	stw	r9,88(sp)
    5408:	000c8380 	call	c838 <__divdf3>
    540c:	da001717 	ldw	r8,92(sp)
    5410:	da401617 	ldw	r9,88(sp)
    5414:	ad4003cc 	andi	r21,r21,15
    5418:	040000c4 	movi	r16,3
    541c:	1023883a 	mov	r17,r2
    5420:	1829883a 	mov	r20,r3
    5424:	a8001126 	beq	r21,zero,546c <_dtoa_r+0x440>
    5428:	05c00074 	movhi	r23,1
    542c:	bdc57004 	addi	r23,r23,5568
    5430:	4805883a 	mov	r2,r9
    5434:	4007883a 	mov	r3,r8
    5438:	a980004c 	andi	r6,r21,1
    543c:	1009883a 	mov	r4,r2
    5440:	a82bd07a 	srai	r21,r21,1
    5444:	180b883a 	mov	r5,r3
    5448:	30000426 	beq	r6,zero,545c <_dtoa_r+0x430>
    544c:	b9800017 	ldw	r6,0(r23)
    5450:	b9c00117 	ldw	r7,4(r23)
    5454:	84000044 	addi	r16,r16,1
    5458:	000d3780 	call	d378 <__muldf3>
    545c:	bdc00204 	addi	r23,r23,8
    5460:	a83ff51e 	bne	r21,zero,5438 <__alt_data_end+0xff005438>
    5464:	1013883a 	mov	r9,r2
    5468:	1811883a 	mov	r8,r3
    546c:	480d883a 	mov	r6,r9
    5470:	400f883a 	mov	r7,r8
    5474:	8809883a 	mov	r4,r17
    5478:	a00b883a 	mov	r5,r20
    547c:	000c8380 	call	c838 <__divdf3>
    5480:	d8800f15 	stw	r2,60(sp)
    5484:	d8c01015 	stw	r3,64(sp)
    5488:	d8c00e17 	ldw	r3,56(sp)
    548c:	18000626 	beq	r3,zero,54a8 <_dtoa_r+0x47c>
    5490:	d9000f17 	ldw	r4,60(sp)
    5494:	d9401017 	ldw	r5,64(sp)
    5498:	000d883a 	mov	r6,zero
    549c:	01cffc34 	movhi	r7,16368
    54a0:	000d2840 	call	d284 <__ledf2>
    54a4:	10040b16 	blt	r2,zero,64d4 <_dtoa_r+0x14a8>
    54a8:	8009883a 	mov	r4,r16
    54ac:	000e40c0 	call	e40c <__floatsidf>
    54b0:	d9800f17 	ldw	r6,60(sp)
    54b4:	d9c01017 	ldw	r7,64(sp)
    54b8:	1009883a 	mov	r4,r2
    54bc:	180b883a 	mov	r5,r3
    54c0:	000d3780 	call	d378 <__muldf3>
    54c4:	000d883a 	mov	r6,zero
    54c8:	01d00734 	movhi	r7,16412
    54cc:	1009883a 	mov	r4,r2
    54d0:	180b883a 	mov	r5,r3
    54d4:	000bf8c0 	call	bf8c <__adddf3>
    54d8:	1021883a 	mov	r16,r2
    54dc:	d8800617 	ldw	r2,24(sp)
    54e0:	047f3034 	movhi	r17,64704
    54e4:	1c63883a 	add	r17,r3,r17
    54e8:	10031826 	beq	r2,zero,614c <_dtoa_r+0x1120>
    54ec:	d8c00517 	ldw	r3,20(sp)
    54f0:	db000617 	ldw	r12,24(sp)
    54f4:	d8c01315 	stw	r3,76(sp)
    54f8:	d9000b17 	ldw	r4,44(sp)
    54fc:	20038f26 	beq	r4,zero,633c <_dtoa_r+0x1310>
    5500:	60bfffc4 	addi	r2,r12,-1
    5504:	100490fa 	slli	r2,r2,3
    5508:	00c00074 	movhi	r3,1
    550c:	18c57a04 	addi	r3,r3,5608
    5510:	1885883a 	add	r2,r3,r2
    5514:	11800017 	ldw	r6,0(r2)
    5518:	11c00117 	ldw	r7,4(r2)
    551c:	d8800717 	ldw	r2,28(sp)
    5520:	0009883a 	mov	r4,zero
    5524:	014ff834 	movhi	r5,16352
    5528:	db001615 	stw	r12,88(sp)
    552c:	15c00044 	addi	r23,r2,1
    5530:	000c8380 	call	c838 <__divdf3>
    5534:	800d883a 	mov	r6,r16
    5538:	880f883a 	mov	r7,r17
    553c:	1009883a 	mov	r4,r2
    5540:	180b883a 	mov	r5,r3
    5544:	000da900 	call	da90 <__subdf3>
    5548:	d9401017 	ldw	r5,64(sp)
    554c:	d9000f17 	ldw	r4,60(sp)
    5550:	102b883a 	mov	r21,r2
    5554:	d8c01215 	stw	r3,72(sp)
    5558:	000e38c0 	call	e38c <__fixdfsi>
    555c:	1009883a 	mov	r4,r2
    5560:	1029883a 	mov	r20,r2
    5564:	000e40c0 	call	e40c <__floatsidf>
    5568:	d9000f17 	ldw	r4,60(sp)
    556c:	d9401017 	ldw	r5,64(sp)
    5570:	100d883a 	mov	r6,r2
    5574:	180f883a 	mov	r7,r3
    5578:	000da900 	call	da90 <__subdf3>
    557c:	1823883a 	mov	r17,r3
    5580:	d8c00717 	ldw	r3,28(sp)
    5584:	d9401217 	ldw	r5,72(sp)
    5588:	a2000c04 	addi	r8,r20,48
    558c:	1021883a 	mov	r16,r2
    5590:	1a000005 	stb	r8,0(r3)
    5594:	800d883a 	mov	r6,r16
    5598:	880f883a 	mov	r7,r17
    559c:	a809883a 	mov	r4,r21
    55a0:	4029883a 	mov	r20,r8
    55a4:	000d1a80 	call	d1a8 <__gedf2>
    55a8:	00841d16 	blt	zero,r2,6620 <_dtoa_r+0x15f4>
    55ac:	800d883a 	mov	r6,r16
    55b0:	880f883a 	mov	r7,r17
    55b4:	0009883a 	mov	r4,zero
    55b8:	014ffc34 	movhi	r5,16368
    55bc:	000da900 	call	da90 <__subdf3>
    55c0:	d9401217 	ldw	r5,72(sp)
    55c4:	100d883a 	mov	r6,r2
    55c8:	180f883a 	mov	r7,r3
    55cc:	a809883a 	mov	r4,r21
    55d0:	000d1a80 	call	d1a8 <__gedf2>
    55d4:	db001617 	ldw	r12,88(sp)
    55d8:	00840e16 	blt	zero,r2,6614 <_dtoa_r+0x15e8>
    55dc:	00800044 	movi	r2,1
    55e0:	13006b0e 	bge	r2,r12,5790 <_dtoa_r+0x764>
    55e4:	d9000717 	ldw	r4,28(sp)
    55e8:	dd800f15 	stw	r22,60(sp)
    55ec:	dcc01015 	stw	r19,64(sp)
    55f0:	2319883a 	add	r12,r4,r12
    55f4:	dcc01217 	ldw	r19,72(sp)
    55f8:	602d883a 	mov	r22,r12
    55fc:	dc801215 	stw	r18,72(sp)
    5600:	b825883a 	mov	r18,r23
    5604:	00000906 	br	562c <_dtoa_r+0x600>
    5608:	000da900 	call	da90 <__subdf3>
    560c:	a80d883a 	mov	r6,r21
    5610:	980f883a 	mov	r7,r19
    5614:	1009883a 	mov	r4,r2
    5618:	180b883a 	mov	r5,r3
    561c:	000d2840 	call	d284 <__ledf2>
    5620:	1003e816 	blt	r2,zero,65c4 <_dtoa_r+0x1598>
    5624:	b825883a 	mov	r18,r23
    5628:	bd83e926 	beq	r23,r22,65d0 <_dtoa_r+0x15a4>
    562c:	a809883a 	mov	r4,r21
    5630:	980b883a 	mov	r5,r19
    5634:	000d883a 	mov	r6,zero
    5638:	01d00934 	movhi	r7,16420
    563c:	000d3780 	call	d378 <__muldf3>
    5640:	000d883a 	mov	r6,zero
    5644:	01d00934 	movhi	r7,16420
    5648:	8009883a 	mov	r4,r16
    564c:	880b883a 	mov	r5,r17
    5650:	102b883a 	mov	r21,r2
    5654:	1827883a 	mov	r19,r3
    5658:	000d3780 	call	d378 <__muldf3>
    565c:	180b883a 	mov	r5,r3
    5660:	1009883a 	mov	r4,r2
    5664:	1821883a 	mov	r16,r3
    5668:	1023883a 	mov	r17,r2
    566c:	000e38c0 	call	e38c <__fixdfsi>
    5670:	1009883a 	mov	r4,r2
    5674:	1029883a 	mov	r20,r2
    5678:	000e40c0 	call	e40c <__floatsidf>
    567c:	8809883a 	mov	r4,r17
    5680:	800b883a 	mov	r5,r16
    5684:	100d883a 	mov	r6,r2
    5688:	180f883a 	mov	r7,r3
    568c:	000da900 	call	da90 <__subdf3>
    5690:	a5000c04 	addi	r20,r20,48
    5694:	a80d883a 	mov	r6,r21
    5698:	980f883a 	mov	r7,r19
    569c:	1009883a 	mov	r4,r2
    56a0:	180b883a 	mov	r5,r3
    56a4:	95000005 	stb	r20,0(r18)
    56a8:	1021883a 	mov	r16,r2
    56ac:	1823883a 	mov	r17,r3
    56b0:	000d2840 	call	d284 <__ledf2>
    56b4:	bdc00044 	addi	r23,r23,1
    56b8:	800d883a 	mov	r6,r16
    56bc:	880f883a 	mov	r7,r17
    56c0:	0009883a 	mov	r4,zero
    56c4:	014ffc34 	movhi	r5,16368
    56c8:	103fcf0e 	bge	r2,zero,5608 <__alt_data_end+0xff005608>
    56cc:	d8c01317 	ldw	r3,76(sp)
    56d0:	d8c00515 	stw	r3,20(sp)
    56d4:	d9400917 	ldw	r5,36(sp)
    56d8:	e009883a 	mov	r4,fp
    56dc:	0007e1c0 	call	7e1c <_Bfree>
    56e0:	d9000517 	ldw	r4,20(sp)
    56e4:	d9802317 	ldw	r6,140(sp)
    56e8:	d9c02517 	ldw	r7,148(sp)
    56ec:	b8000005 	stb	zero,0(r23)
    56f0:	20800044 	addi	r2,r4,1
    56f4:	30800015 	stw	r2,0(r6)
    56f8:	3802aa26 	beq	r7,zero,61a4 <_dtoa_r+0x1178>
    56fc:	3dc00015 	stw	r23,0(r7)
    5700:	d8800717 	ldw	r2,28(sp)
    5704:	003e7906 	br	50ec <__alt_data_end+0xff0050ec>
    5708:	00800434 	movhi	r2,16
    570c:	10bfffc4 	addi	r2,r2,-1
    5710:	88a2703a 	and	r17,r17,r2
    5714:	883e851e 	bne	r17,zero,512c <__alt_data_end+0xff00512c>
    5718:	00800074 	movhi	r2,1
    571c:	10855b04 	addi	r2,r2,5484
    5720:	003e8406 	br	5134 <__alt_data_end+0xff005134>
    5724:	10c00204 	addi	r3,r2,8
    5728:	003e8706 	br	5148 <__alt_data_end+0xff005148>
    572c:	01400434 	movhi	r5,16
    5730:	297fffc4 	addi	r5,r5,-1
    5734:	994a703a 	and	r5,r19,r5
    5738:	9009883a 	mov	r4,r18
    573c:	843f0044 	addi	r16,r16,-1023
    5740:	294ffc34 	orhi	r5,r5,16368
    5744:	dd800217 	ldw	r22,8(sp)
    5748:	d8001115 	stw	zero,68(sp)
    574c:	003ea506 	br	51e4 <__alt_data_end+0xff0051e4>
    5750:	00800074 	movhi	r2,1
    5754:	10855204 	addi	r2,r2,5448
    5758:	003e6406 	br	50ec <__alt_data_end+0xff0050ec>
    575c:	e0001115 	stw	zero,68(fp)
    5760:	000b883a 	mov	r5,zero
    5764:	e009883a 	mov	r4,fp
    5768:	0007d740 	call	7d74 <_Balloc>
    576c:	01bfffc4 	movi	r6,-1
    5770:	01c00044 	movi	r7,1
    5774:	d8800715 	stw	r2,28(sp)
    5778:	d9800c15 	stw	r6,48(sp)
    577c:	e0801015 	stw	r2,64(fp)
    5780:	d8000315 	stw	zero,12(sp)
    5784:	d9c00b15 	stw	r7,44(sp)
    5788:	d9800615 	stw	r6,24(sp)
    578c:	d8002215 	stw	zero,136(sp)
    5790:	d8800117 	ldw	r2,4(sp)
    5794:	10008916 	blt	r2,zero,59bc <_dtoa_r+0x990>
    5798:	d9000517 	ldw	r4,20(sp)
    579c:	00c00384 	movi	r3,14
    57a0:	19008616 	blt	r3,r4,59bc <_dtoa_r+0x990>
    57a4:	200490fa 	slli	r2,r4,3
    57a8:	00c00074 	movhi	r3,1
    57ac:	d9802217 	ldw	r6,136(sp)
    57b0:	18c57a04 	addi	r3,r3,5608
    57b4:	1885883a 	add	r2,r3,r2
    57b8:	14000017 	ldw	r16,0(r2)
    57bc:	14400117 	ldw	r17,4(r2)
    57c0:	30016316 	blt	r6,zero,5d50 <_dtoa_r+0xd24>
    57c4:	800d883a 	mov	r6,r16
    57c8:	880f883a 	mov	r7,r17
    57cc:	9009883a 	mov	r4,r18
    57d0:	980b883a 	mov	r5,r19
    57d4:	000c8380 	call	c838 <__divdf3>
    57d8:	180b883a 	mov	r5,r3
    57dc:	1009883a 	mov	r4,r2
    57e0:	000e38c0 	call	e38c <__fixdfsi>
    57e4:	1009883a 	mov	r4,r2
    57e8:	102b883a 	mov	r21,r2
    57ec:	000e40c0 	call	e40c <__floatsidf>
    57f0:	800d883a 	mov	r6,r16
    57f4:	880f883a 	mov	r7,r17
    57f8:	1009883a 	mov	r4,r2
    57fc:	180b883a 	mov	r5,r3
    5800:	000d3780 	call	d378 <__muldf3>
    5804:	100d883a 	mov	r6,r2
    5808:	180f883a 	mov	r7,r3
    580c:	9009883a 	mov	r4,r18
    5810:	980b883a 	mov	r5,r19
    5814:	000da900 	call	da90 <__subdf3>
    5818:	d9c00717 	ldw	r7,28(sp)
    581c:	1009883a 	mov	r4,r2
    5820:	a8800c04 	addi	r2,r21,48
    5824:	38800005 	stb	r2,0(r7)
    5828:	3dc00044 	addi	r23,r7,1
    582c:	d9c00617 	ldw	r7,24(sp)
    5830:	01800044 	movi	r6,1
    5834:	180b883a 	mov	r5,r3
    5838:	2005883a 	mov	r2,r4
    583c:	39803826 	beq	r7,r6,5920 <_dtoa_r+0x8f4>
    5840:	000d883a 	mov	r6,zero
    5844:	01d00934 	movhi	r7,16420
    5848:	000d3780 	call	d378 <__muldf3>
    584c:	000d883a 	mov	r6,zero
    5850:	000f883a 	mov	r7,zero
    5854:	1009883a 	mov	r4,r2
    5858:	180b883a 	mov	r5,r3
    585c:	1025883a 	mov	r18,r2
    5860:	1827883a 	mov	r19,r3
    5864:	000d1200 	call	d120 <__eqdf2>
    5868:	103f9a26 	beq	r2,zero,56d4 <__alt_data_end+0xff0056d4>
    586c:	d9c00617 	ldw	r7,24(sp)
    5870:	d8c00717 	ldw	r3,28(sp)
    5874:	b829883a 	mov	r20,r23
    5878:	38bfffc4 	addi	r2,r7,-1
    587c:	18ad883a 	add	r22,r3,r2
    5880:	00000a06 	br	58ac <_dtoa_r+0x880>
    5884:	000d3780 	call	d378 <__muldf3>
    5888:	000d883a 	mov	r6,zero
    588c:	000f883a 	mov	r7,zero
    5890:	1009883a 	mov	r4,r2
    5894:	180b883a 	mov	r5,r3
    5898:	1025883a 	mov	r18,r2
    589c:	1827883a 	mov	r19,r3
    58a0:	b829883a 	mov	r20,r23
    58a4:	000d1200 	call	d120 <__eqdf2>
    58a8:	103f8a26 	beq	r2,zero,56d4 <__alt_data_end+0xff0056d4>
    58ac:	800d883a 	mov	r6,r16
    58b0:	880f883a 	mov	r7,r17
    58b4:	9009883a 	mov	r4,r18
    58b8:	980b883a 	mov	r5,r19
    58bc:	000c8380 	call	c838 <__divdf3>
    58c0:	180b883a 	mov	r5,r3
    58c4:	1009883a 	mov	r4,r2
    58c8:	000e38c0 	call	e38c <__fixdfsi>
    58cc:	1009883a 	mov	r4,r2
    58d0:	102b883a 	mov	r21,r2
    58d4:	000e40c0 	call	e40c <__floatsidf>
    58d8:	800d883a 	mov	r6,r16
    58dc:	880f883a 	mov	r7,r17
    58e0:	1009883a 	mov	r4,r2
    58e4:	180b883a 	mov	r5,r3
    58e8:	000d3780 	call	d378 <__muldf3>
    58ec:	100d883a 	mov	r6,r2
    58f0:	180f883a 	mov	r7,r3
    58f4:	9009883a 	mov	r4,r18
    58f8:	980b883a 	mov	r5,r19
    58fc:	000da900 	call	da90 <__subdf3>
    5900:	aa000c04 	addi	r8,r21,48
    5904:	a2000005 	stb	r8,0(r20)
    5908:	000d883a 	mov	r6,zero
    590c:	01d00934 	movhi	r7,16420
    5910:	1009883a 	mov	r4,r2
    5914:	180b883a 	mov	r5,r3
    5918:	a5c00044 	addi	r23,r20,1
    591c:	b53fd91e 	bne	r22,r20,5884 <__alt_data_end+0xff005884>
    5920:	100d883a 	mov	r6,r2
    5924:	180f883a 	mov	r7,r3
    5928:	1009883a 	mov	r4,r2
    592c:	180b883a 	mov	r5,r3
    5930:	000bf8c0 	call	bf8c <__adddf3>
    5934:	100d883a 	mov	r6,r2
    5938:	180f883a 	mov	r7,r3
    593c:	8009883a 	mov	r4,r16
    5940:	880b883a 	mov	r5,r17
    5944:	1027883a 	mov	r19,r2
    5948:	1825883a 	mov	r18,r3
    594c:	000d2840 	call	d284 <__ledf2>
    5950:	10000816 	blt	r2,zero,5974 <_dtoa_r+0x948>
    5954:	980d883a 	mov	r6,r19
    5958:	900f883a 	mov	r7,r18
    595c:	8009883a 	mov	r4,r16
    5960:	880b883a 	mov	r5,r17
    5964:	000d1200 	call	d120 <__eqdf2>
    5968:	103f5a1e 	bne	r2,zero,56d4 <__alt_data_end+0xff0056d4>
    596c:	ad40004c 	andi	r21,r21,1
    5970:	a83f5826 	beq	r21,zero,56d4 <__alt_data_end+0xff0056d4>
    5974:	bd3fffc3 	ldbu	r20,-1(r23)
    5978:	b8bfffc4 	addi	r2,r23,-1
    597c:	1007883a 	mov	r3,r2
    5980:	01400e44 	movi	r5,57
    5984:	d9800717 	ldw	r6,28(sp)
    5988:	00000506 	br	59a0 <_dtoa_r+0x974>
    598c:	18ffffc4 	addi	r3,r3,-1
    5990:	11824726 	beq	r2,r6,62b0 <_dtoa_r+0x1284>
    5994:	1d000003 	ldbu	r20,0(r3)
    5998:	102f883a 	mov	r23,r2
    599c:	10bfffc4 	addi	r2,r2,-1
    59a0:	a1003fcc 	andi	r4,r20,255
    59a4:	2100201c 	xori	r4,r4,128
    59a8:	213fe004 	addi	r4,r4,-128
    59ac:	217ff726 	beq	r4,r5,598c <__alt_data_end+0xff00598c>
    59b0:	a2000044 	addi	r8,r20,1
    59b4:	12000005 	stb	r8,0(r2)
    59b8:	003f4606 	br	56d4 <__alt_data_end+0xff0056d4>
    59bc:	d9000b17 	ldw	r4,44(sp)
    59c0:	2000c826 	beq	r4,zero,5ce4 <_dtoa_r+0xcb8>
    59c4:	d9800317 	ldw	r6,12(sp)
    59c8:	00c00044 	movi	r3,1
    59cc:	1980f90e 	bge	r3,r6,5db4 <_dtoa_r+0xd88>
    59d0:	d8800617 	ldw	r2,24(sp)
    59d4:	d8c00a17 	ldw	r3,40(sp)
    59d8:	157fffc4 	addi	r21,r2,-1
    59dc:	1d41f316 	blt	r3,r21,61ac <_dtoa_r+0x1180>
    59e0:	1d6bc83a 	sub	r21,r3,r21
    59e4:	d9c00617 	ldw	r7,24(sp)
    59e8:	3802aa16 	blt	r7,zero,6494 <_dtoa_r+0x1468>
    59ec:	dd000817 	ldw	r20,32(sp)
    59f0:	d8800617 	ldw	r2,24(sp)
    59f4:	d8c00817 	ldw	r3,32(sp)
    59f8:	01400044 	movi	r5,1
    59fc:	e009883a 	mov	r4,fp
    5a00:	1887883a 	add	r3,r3,r2
    5a04:	d8c00815 	stw	r3,32(sp)
    5a08:	b0ad883a 	add	r22,r22,r2
    5a0c:	00081800 	call	8180 <__i2b>
    5a10:	1023883a 	mov	r17,r2
    5a14:	a0000826 	beq	r20,zero,5a38 <_dtoa_r+0xa0c>
    5a18:	0580070e 	bge	zero,r22,5a38 <_dtoa_r+0xa0c>
    5a1c:	a005883a 	mov	r2,r20
    5a20:	b500b916 	blt	r22,r20,5d08 <_dtoa_r+0xcdc>
    5a24:	d9000817 	ldw	r4,32(sp)
    5a28:	a0a9c83a 	sub	r20,r20,r2
    5a2c:	b0adc83a 	sub	r22,r22,r2
    5a30:	2089c83a 	sub	r4,r4,r2
    5a34:	d9000815 	stw	r4,32(sp)
    5a38:	d9800a17 	ldw	r6,40(sp)
    5a3c:	0181810e 	bge	zero,r6,6044 <_dtoa_r+0x1018>
    5a40:	d9c00b17 	ldw	r7,44(sp)
    5a44:	3800b326 	beq	r7,zero,5d14 <_dtoa_r+0xce8>
    5a48:	a800b226 	beq	r21,zero,5d14 <_dtoa_r+0xce8>
    5a4c:	880b883a 	mov	r5,r17
    5a50:	a80d883a 	mov	r6,r21
    5a54:	e009883a 	mov	r4,fp
    5a58:	00083b40 	call	83b4 <__pow5mult>
    5a5c:	d9800917 	ldw	r6,36(sp)
    5a60:	100b883a 	mov	r5,r2
    5a64:	e009883a 	mov	r4,fp
    5a68:	1023883a 	mov	r17,r2
    5a6c:	00081bc0 	call	81bc <__multiply>
    5a70:	1021883a 	mov	r16,r2
    5a74:	d8800a17 	ldw	r2,40(sp)
    5a78:	d9400917 	ldw	r5,36(sp)
    5a7c:	e009883a 	mov	r4,fp
    5a80:	1545c83a 	sub	r2,r2,r21
    5a84:	d8800a15 	stw	r2,40(sp)
    5a88:	0007e1c0 	call	7e1c <_Bfree>
    5a8c:	d8c00a17 	ldw	r3,40(sp)
    5a90:	18009f1e 	bne	r3,zero,5d10 <_dtoa_r+0xce4>
    5a94:	05c00044 	movi	r23,1
    5a98:	e009883a 	mov	r4,fp
    5a9c:	b80b883a 	mov	r5,r23
    5aa0:	00081800 	call	8180 <__i2b>
    5aa4:	d9000d17 	ldw	r4,52(sp)
    5aa8:	102b883a 	mov	r21,r2
    5aac:	2000ce26 	beq	r4,zero,5de8 <_dtoa_r+0xdbc>
    5ab0:	200d883a 	mov	r6,r4
    5ab4:	100b883a 	mov	r5,r2
    5ab8:	e009883a 	mov	r4,fp
    5abc:	00083b40 	call	83b4 <__pow5mult>
    5ac0:	d9800317 	ldw	r6,12(sp)
    5ac4:	102b883a 	mov	r21,r2
    5ac8:	b981810e 	bge	r23,r6,60d0 <_dtoa_r+0x10a4>
    5acc:	0027883a 	mov	r19,zero
    5ad0:	a8800417 	ldw	r2,16(r21)
    5ad4:	05c00804 	movi	r23,32
    5ad8:	10800104 	addi	r2,r2,4
    5adc:	1085883a 	add	r2,r2,r2
    5ae0:	1085883a 	add	r2,r2,r2
    5ae4:	a885883a 	add	r2,r21,r2
    5ae8:	11000017 	ldw	r4,0(r2)
    5aec:	00080680 	call	8068 <__hi0bits>
    5af0:	b885c83a 	sub	r2,r23,r2
    5af4:	1585883a 	add	r2,r2,r22
    5af8:	108007cc 	andi	r2,r2,31
    5afc:	1000b326 	beq	r2,zero,5dcc <_dtoa_r+0xda0>
    5b00:	00c00804 	movi	r3,32
    5b04:	1887c83a 	sub	r3,r3,r2
    5b08:	01000104 	movi	r4,4
    5b0c:	20c2cd0e 	bge	r4,r3,6644 <_dtoa_r+0x1618>
    5b10:	00c00704 	movi	r3,28
    5b14:	1885c83a 	sub	r2,r3,r2
    5b18:	d8c00817 	ldw	r3,32(sp)
    5b1c:	a0a9883a 	add	r20,r20,r2
    5b20:	b0ad883a 	add	r22,r22,r2
    5b24:	1887883a 	add	r3,r3,r2
    5b28:	d8c00815 	stw	r3,32(sp)
    5b2c:	d9800817 	ldw	r6,32(sp)
    5b30:	0180040e 	bge	zero,r6,5b44 <_dtoa_r+0xb18>
    5b34:	800b883a 	mov	r5,r16
    5b38:	e009883a 	mov	r4,fp
    5b3c:	00084f40 	call	84f4 <__lshift>
    5b40:	1021883a 	mov	r16,r2
    5b44:	0580050e 	bge	zero,r22,5b5c <_dtoa_r+0xb30>
    5b48:	a80b883a 	mov	r5,r21
    5b4c:	b00d883a 	mov	r6,r22
    5b50:	e009883a 	mov	r4,fp
    5b54:	00084f40 	call	84f4 <__lshift>
    5b58:	102b883a 	mov	r21,r2
    5b5c:	d9c00e17 	ldw	r7,56(sp)
    5b60:	3801211e 	bne	r7,zero,5fe8 <_dtoa_r+0xfbc>
    5b64:	d9800617 	ldw	r6,24(sp)
    5b68:	0181380e 	bge	zero,r6,604c <_dtoa_r+0x1020>
    5b6c:	d8c00b17 	ldw	r3,44(sp)
    5b70:	1800ab1e 	bne	r3,zero,5e20 <_dtoa_r+0xdf4>
    5b74:	dc800717 	ldw	r18,28(sp)
    5b78:	dcc00617 	ldw	r19,24(sp)
    5b7c:	9029883a 	mov	r20,r18
    5b80:	00000206 	br	5b8c <_dtoa_r+0xb60>
    5b84:	0007e440 	call	7e44 <__multadd>
    5b88:	1021883a 	mov	r16,r2
    5b8c:	a80b883a 	mov	r5,r21
    5b90:	8009883a 	mov	r4,r16
    5b94:	0004e2c0 	call	4e2c <quorem>
    5b98:	10800c04 	addi	r2,r2,48
    5b9c:	90800005 	stb	r2,0(r18)
    5ba0:	94800044 	addi	r18,r18,1
    5ba4:	9507c83a 	sub	r3,r18,r20
    5ba8:	000f883a 	mov	r7,zero
    5bac:	01800284 	movi	r6,10
    5bb0:	800b883a 	mov	r5,r16
    5bb4:	e009883a 	mov	r4,fp
    5bb8:	1cfff216 	blt	r3,r19,5b84 <__alt_data_end+0xff005b84>
    5bbc:	1011883a 	mov	r8,r2
    5bc0:	d8800617 	ldw	r2,24(sp)
    5bc4:	0082370e 	bge	zero,r2,64a4 <_dtoa_r+0x1478>
    5bc8:	d9000717 	ldw	r4,28(sp)
    5bcc:	0025883a 	mov	r18,zero
    5bd0:	20af883a 	add	r23,r4,r2
    5bd4:	01800044 	movi	r6,1
    5bd8:	800b883a 	mov	r5,r16
    5bdc:	e009883a 	mov	r4,fp
    5be0:	da001715 	stw	r8,92(sp)
    5be4:	00084f40 	call	84f4 <__lshift>
    5be8:	a80b883a 	mov	r5,r21
    5bec:	1009883a 	mov	r4,r2
    5bf0:	d8800915 	stw	r2,36(sp)
    5bf4:	000863c0 	call	863c <__mcmp>
    5bf8:	da001717 	ldw	r8,92(sp)
    5bfc:	0081800e 	bge	zero,r2,6200 <_dtoa_r+0x11d4>
    5c00:	b93fffc3 	ldbu	r4,-1(r23)
    5c04:	b8bfffc4 	addi	r2,r23,-1
    5c08:	1007883a 	mov	r3,r2
    5c0c:	01800e44 	movi	r6,57
    5c10:	d9c00717 	ldw	r7,28(sp)
    5c14:	00000506 	br	5c2c <_dtoa_r+0xc00>
    5c18:	18ffffc4 	addi	r3,r3,-1
    5c1c:	11c12326 	beq	r2,r7,60ac <_dtoa_r+0x1080>
    5c20:	19000003 	ldbu	r4,0(r3)
    5c24:	102f883a 	mov	r23,r2
    5c28:	10bfffc4 	addi	r2,r2,-1
    5c2c:	21403fcc 	andi	r5,r4,255
    5c30:	2940201c 	xori	r5,r5,128
    5c34:	297fe004 	addi	r5,r5,-128
    5c38:	29bff726 	beq	r5,r6,5c18 <__alt_data_end+0xff005c18>
    5c3c:	21000044 	addi	r4,r4,1
    5c40:	11000005 	stb	r4,0(r2)
    5c44:	a80b883a 	mov	r5,r21
    5c48:	e009883a 	mov	r4,fp
    5c4c:	0007e1c0 	call	7e1c <_Bfree>
    5c50:	883ea026 	beq	r17,zero,56d4 <__alt_data_end+0xff0056d4>
    5c54:	90000426 	beq	r18,zero,5c68 <_dtoa_r+0xc3c>
    5c58:	94400326 	beq	r18,r17,5c68 <_dtoa_r+0xc3c>
    5c5c:	900b883a 	mov	r5,r18
    5c60:	e009883a 	mov	r4,fp
    5c64:	0007e1c0 	call	7e1c <_Bfree>
    5c68:	880b883a 	mov	r5,r17
    5c6c:	e009883a 	mov	r4,fp
    5c70:	0007e1c0 	call	7e1c <_Bfree>
    5c74:	003e9706 	br	56d4 <__alt_data_end+0xff0056d4>
    5c78:	01800044 	movi	r6,1
    5c7c:	d9800e15 	stw	r6,56(sp)
    5c80:	003d9606 	br	52dc <__alt_data_end+0xff0052dc>
    5c84:	d8800817 	ldw	r2,32(sp)
    5c88:	d8c00517 	ldw	r3,20(sp)
    5c8c:	d8000d15 	stw	zero,52(sp)
    5c90:	10c5c83a 	sub	r2,r2,r3
    5c94:	00c9c83a 	sub	r4,zero,r3
    5c98:	d8800815 	stw	r2,32(sp)
    5c9c:	d9000a15 	stw	r4,40(sp)
    5ca0:	003d9706 	br	5300 <__alt_data_end+0xff005300>
    5ca4:	05adc83a 	sub	r22,zero,r22
    5ca8:	dd800815 	stw	r22,32(sp)
    5cac:	002d883a 	mov	r22,zero
    5cb0:	003d8e06 	br	52ec <__alt_data_end+0xff0052ec>
    5cb4:	d9000517 	ldw	r4,20(sp)
    5cb8:	000e40c0 	call	e40c <__floatsidf>
    5cbc:	100d883a 	mov	r6,r2
    5cc0:	180f883a 	mov	r7,r3
    5cc4:	a009883a 	mov	r4,r20
    5cc8:	880b883a 	mov	r5,r17
    5ccc:	000d1200 	call	d120 <__eqdf2>
    5cd0:	103d7126 	beq	r2,zero,5298 <__alt_data_end+0xff005298>
    5cd4:	d9c00517 	ldw	r7,20(sp)
    5cd8:	39ffffc4 	addi	r7,r7,-1
    5cdc:	d9c00515 	stw	r7,20(sp)
    5ce0:	003d6d06 	br	5298 <__alt_data_end+0xff005298>
    5ce4:	dd400a17 	ldw	r21,40(sp)
    5ce8:	dd000817 	ldw	r20,32(sp)
    5cec:	0023883a 	mov	r17,zero
    5cf0:	003f4806 	br	5a14 <__alt_data_end+0xff005a14>
    5cf4:	10e3c83a 	sub	r17,r2,r3
    5cf8:	9448983a 	sll	r4,r18,r17
    5cfc:	003d3206 	br	51c8 <__alt_data_end+0xff0051c8>
    5d00:	d8000e15 	stw	zero,56(sp)
    5d04:	003d7506 	br	52dc <__alt_data_end+0xff0052dc>
    5d08:	b005883a 	mov	r2,r22
    5d0c:	003f4506 	br	5a24 <__alt_data_end+0xff005a24>
    5d10:	dc000915 	stw	r16,36(sp)
    5d14:	d9800a17 	ldw	r6,40(sp)
    5d18:	d9400917 	ldw	r5,36(sp)
    5d1c:	e009883a 	mov	r4,fp
    5d20:	00083b40 	call	83b4 <__pow5mult>
    5d24:	1021883a 	mov	r16,r2
    5d28:	003f5a06 	br	5a94 <__alt_data_end+0xff005a94>
    5d2c:	01c00044 	movi	r7,1
    5d30:	d9c00b15 	stw	r7,44(sp)
    5d34:	d8802217 	ldw	r2,136(sp)
    5d38:	0081280e 	bge	zero,r2,61dc <_dtoa_r+0x11b0>
    5d3c:	100d883a 	mov	r6,r2
    5d40:	1021883a 	mov	r16,r2
    5d44:	d8800c15 	stw	r2,48(sp)
    5d48:	d8800615 	stw	r2,24(sp)
    5d4c:	003d8806 	br	5370 <__alt_data_end+0xff005370>
    5d50:	d8800617 	ldw	r2,24(sp)
    5d54:	00be9b16 	blt	zero,r2,57c4 <__alt_data_end+0xff0057c4>
    5d58:	10010f1e 	bne	r2,zero,6198 <_dtoa_r+0x116c>
    5d5c:	880b883a 	mov	r5,r17
    5d60:	000d883a 	mov	r6,zero
    5d64:	01d00534 	movhi	r7,16404
    5d68:	8009883a 	mov	r4,r16
    5d6c:	000d3780 	call	d378 <__muldf3>
    5d70:	900d883a 	mov	r6,r18
    5d74:	980f883a 	mov	r7,r19
    5d78:	1009883a 	mov	r4,r2
    5d7c:	180b883a 	mov	r5,r3
    5d80:	000d1a80 	call	d1a8 <__gedf2>
    5d84:	002b883a 	mov	r21,zero
    5d88:	0023883a 	mov	r17,zero
    5d8c:	1000bf16 	blt	r2,zero,608c <_dtoa_r+0x1060>
    5d90:	d9802217 	ldw	r6,136(sp)
    5d94:	ddc00717 	ldw	r23,28(sp)
    5d98:	018c303a 	nor	r6,zero,r6
    5d9c:	d9800515 	stw	r6,20(sp)
    5da0:	a80b883a 	mov	r5,r21
    5da4:	e009883a 	mov	r4,fp
    5da8:	0007e1c0 	call	7e1c <_Bfree>
    5dac:	883e4926 	beq	r17,zero,56d4 <__alt_data_end+0xff0056d4>
    5db0:	003fad06 	br	5c68 <__alt_data_end+0xff005c68>
    5db4:	d9c01117 	ldw	r7,68(sp)
    5db8:	3801bc26 	beq	r7,zero,64ac <_dtoa_r+0x1480>
    5dbc:	10810cc4 	addi	r2,r2,1075
    5dc0:	dd400a17 	ldw	r21,40(sp)
    5dc4:	dd000817 	ldw	r20,32(sp)
    5dc8:	003f0a06 	br	59f4 <__alt_data_end+0xff0059f4>
    5dcc:	00800704 	movi	r2,28
    5dd0:	d9000817 	ldw	r4,32(sp)
    5dd4:	a0a9883a 	add	r20,r20,r2
    5dd8:	b0ad883a 	add	r22,r22,r2
    5ddc:	2089883a 	add	r4,r4,r2
    5de0:	d9000815 	stw	r4,32(sp)
    5de4:	003f5106 	br	5b2c <__alt_data_end+0xff005b2c>
    5de8:	d8c00317 	ldw	r3,12(sp)
    5dec:	b8c1fc0e 	bge	r23,r3,65e0 <_dtoa_r+0x15b4>
    5df0:	0027883a 	mov	r19,zero
    5df4:	b805883a 	mov	r2,r23
    5df8:	003f3e06 	br	5af4 <__alt_data_end+0xff005af4>
    5dfc:	880b883a 	mov	r5,r17
    5e00:	e009883a 	mov	r4,fp
    5e04:	000f883a 	mov	r7,zero
    5e08:	01800284 	movi	r6,10
    5e0c:	0007e440 	call	7e44 <__multadd>
    5e10:	d9000c17 	ldw	r4,48(sp)
    5e14:	1023883a 	mov	r17,r2
    5e18:	0102040e 	bge	zero,r4,662c <_dtoa_r+0x1600>
    5e1c:	d9000615 	stw	r4,24(sp)
    5e20:	0500050e 	bge	zero,r20,5e38 <_dtoa_r+0xe0c>
    5e24:	880b883a 	mov	r5,r17
    5e28:	a00d883a 	mov	r6,r20
    5e2c:	e009883a 	mov	r4,fp
    5e30:	00084f40 	call	84f4 <__lshift>
    5e34:	1023883a 	mov	r17,r2
    5e38:	9801241e 	bne	r19,zero,62cc <_dtoa_r+0x12a0>
    5e3c:	8829883a 	mov	r20,r17
    5e40:	d9000617 	ldw	r4,24(sp)
    5e44:	dcc00717 	ldw	r19,28(sp)
    5e48:	9480004c 	andi	r18,r18,1
    5e4c:	20bfffc4 	addi	r2,r4,-1
    5e50:	9885883a 	add	r2,r19,r2
    5e54:	d8800415 	stw	r2,16(sp)
    5e58:	dc800615 	stw	r18,24(sp)
    5e5c:	a80b883a 	mov	r5,r21
    5e60:	8009883a 	mov	r4,r16
    5e64:	0004e2c0 	call	4e2c <quorem>
    5e68:	880b883a 	mov	r5,r17
    5e6c:	8009883a 	mov	r4,r16
    5e70:	102f883a 	mov	r23,r2
    5e74:	000863c0 	call	863c <__mcmp>
    5e78:	a80b883a 	mov	r5,r21
    5e7c:	a00d883a 	mov	r6,r20
    5e80:	e009883a 	mov	r4,fp
    5e84:	102d883a 	mov	r22,r2
    5e88:	000869c0 	call	869c <__mdiff>
    5e8c:	1007883a 	mov	r3,r2
    5e90:	10800317 	ldw	r2,12(r2)
    5e94:	bc800c04 	addi	r18,r23,48
    5e98:	180b883a 	mov	r5,r3
    5e9c:	10004e1e 	bne	r2,zero,5fd8 <_dtoa_r+0xfac>
    5ea0:	8009883a 	mov	r4,r16
    5ea4:	d8c01615 	stw	r3,88(sp)
    5ea8:	000863c0 	call	863c <__mcmp>
    5eac:	d8c01617 	ldw	r3,88(sp)
    5eb0:	e009883a 	mov	r4,fp
    5eb4:	d8801615 	stw	r2,88(sp)
    5eb8:	180b883a 	mov	r5,r3
    5ebc:	0007e1c0 	call	7e1c <_Bfree>
    5ec0:	d8801617 	ldw	r2,88(sp)
    5ec4:	1000041e 	bne	r2,zero,5ed8 <_dtoa_r+0xeac>
    5ec8:	d9800317 	ldw	r6,12(sp)
    5ecc:	3000021e 	bne	r6,zero,5ed8 <_dtoa_r+0xeac>
    5ed0:	d8c00617 	ldw	r3,24(sp)
    5ed4:	18003726 	beq	r3,zero,5fb4 <_dtoa_r+0xf88>
    5ed8:	b0002016 	blt	r22,zero,5f5c <_dtoa_r+0xf30>
    5edc:	b000041e 	bne	r22,zero,5ef0 <_dtoa_r+0xec4>
    5ee0:	d9000317 	ldw	r4,12(sp)
    5ee4:	2000021e 	bne	r4,zero,5ef0 <_dtoa_r+0xec4>
    5ee8:	d8c00617 	ldw	r3,24(sp)
    5eec:	18001b26 	beq	r3,zero,5f5c <_dtoa_r+0xf30>
    5ef0:	00810716 	blt	zero,r2,6310 <_dtoa_r+0x12e4>
    5ef4:	d8c00417 	ldw	r3,16(sp)
    5ef8:	9d800044 	addi	r22,r19,1
    5efc:	9c800005 	stb	r18,0(r19)
    5f00:	b02f883a 	mov	r23,r22
    5f04:	98c10626 	beq	r19,r3,6320 <_dtoa_r+0x12f4>
    5f08:	800b883a 	mov	r5,r16
    5f0c:	000f883a 	mov	r7,zero
    5f10:	01800284 	movi	r6,10
    5f14:	e009883a 	mov	r4,fp
    5f18:	0007e440 	call	7e44 <__multadd>
    5f1c:	1021883a 	mov	r16,r2
    5f20:	000f883a 	mov	r7,zero
    5f24:	01800284 	movi	r6,10
    5f28:	880b883a 	mov	r5,r17
    5f2c:	e009883a 	mov	r4,fp
    5f30:	8d002526 	beq	r17,r20,5fc8 <_dtoa_r+0xf9c>
    5f34:	0007e440 	call	7e44 <__multadd>
    5f38:	a00b883a 	mov	r5,r20
    5f3c:	000f883a 	mov	r7,zero
    5f40:	01800284 	movi	r6,10
    5f44:	e009883a 	mov	r4,fp
    5f48:	1023883a 	mov	r17,r2
    5f4c:	0007e440 	call	7e44 <__multadd>
    5f50:	1029883a 	mov	r20,r2
    5f54:	b027883a 	mov	r19,r22
    5f58:	003fc006 	br	5e5c <__alt_data_end+0xff005e5c>
    5f5c:	9011883a 	mov	r8,r18
    5f60:	00800e0e 	bge	zero,r2,5f9c <_dtoa_r+0xf70>
    5f64:	800b883a 	mov	r5,r16
    5f68:	01800044 	movi	r6,1
    5f6c:	e009883a 	mov	r4,fp
    5f70:	da001715 	stw	r8,92(sp)
    5f74:	00084f40 	call	84f4 <__lshift>
    5f78:	a80b883a 	mov	r5,r21
    5f7c:	1009883a 	mov	r4,r2
    5f80:	1021883a 	mov	r16,r2
    5f84:	000863c0 	call	863c <__mcmp>
    5f88:	da001717 	ldw	r8,92(sp)
    5f8c:	0081960e 	bge	zero,r2,65e8 <_dtoa_r+0x15bc>
    5f90:	00800e44 	movi	r2,57
    5f94:	40817026 	beq	r8,r2,6558 <_dtoa_r+0x152c>
    5f98:	ba000c44 	addi	r8,r23,49
    5f9c:	8825883a 	mov	r18,r17
    5fa0:	9dc00044 	addi	r23,r19,1
    5fa4:	9a000005 	stb	r8,0(r19)
    5fa8:	a023883a 	mov	r17,r20
    5fac:	dc000915 	stw	r16,36(sp)
    5fb0:	003f2406 	br	5c44 <__alt_data_end+0xff005c44>
    5fb4:	00800e44 	movi	r2,57
    5fb8:	9011883a 	mov	r8,r18
    5fbc:	90816626 	beq	r18,r2,6558 <_dtoa_r+0x152c>
    5fc0:	05bff516 	blt	zero,r22,5f98 <__alt_data_end+0xff005f98>
    5fc4:	003ff506 	br	5f9c <__alt_data_end+0xff005f9c>
    5fc8:	0007e440 	call	7e44 <__multadd>
    5fcc:	1023883a 	mov	r17,r2
    5fd0:	1029883a 	mov	r20,r2
    5fd4:	003fdf06 	br	5f54 <__alt_data_end+0xff005f54>
    5fd8:	e009883a 	mov	r4,fp
    5fdc:	0007e1c0 	call	7e1c <_Bfree>
    5fe0:	00800044 	movi	r2,1
    5fe4:	003fbc06 	br	5ed8 <__alt_data_end+0xff005ed8>
    5fe8:	a80b883a 	mov	r5,r21
    5fec:	8009883a 	mov	r4,r16
    5ff0:	000863c0 	call	863c <__mcmp>
    5ff4:	103edb0e 	bge	r2,zero,5b64 <__alt_data_end+0xff005b64>
    5ff8:	800b883a 	mov	r5,r16
    5ffc:	000f883a 	mov	r7,zero
    6000:	01800284 	movi	r6,10
    6004:	e009883a 	mov	r4,fp
    6008:	0007e440 	call	7e44 <__multadd>
    600c:	1021883a 	mov	r16,r2
    6010:	d8800517 	ldw	r2,20(sp)
    6014:	d8c00b17 	ldw	r3,44(sp)
    6018:	10bfffc4 	addi	r2,r2,-1
    601c:	d8800515 	stw	r2,20(sp)
    6020:	183f761e 	bne	r3,zero,5dfc <__alt_data_end+0xff005dfc>
    6024:	d9000c17 	ldw	r4,48(sp)
    6028:	0101730e 	bge	zero,r4,65f8 <_dtoa_r+0x15cc>
    602c:	d9000615 	stw	r4,24(sp)
    6030:	003ed006 	br	5b74 <__alt_data_end+0xff005b74>
    6034:	00800084 	movi	r2,2
    6038:	3081861e 	bne	r6,r2,6654 <_dtoa_r+0x1628>
    603c:	d8000b15 	stw	zero,44(sp)
    6040:	003f3c06 	br	5d34 <__alt_data_end+0xff005d34>
    6044:	dc000917 	ldw	r16,36(sp)
    6048:	003e9206 	br	5a94 <__alt_data_end+0xff005a94>
    604c:	d9c00317 	ldw	r7,12(sp)
    6050:	00800084 	movi	r2,2
    6054:	11fec50e 	bge	r2,r7,5b6c <__alt_data_end+0xff005b6c>
    6058:	d9000617 	ldw	r4,24(sp)
    605c:	20013c1e 	bne	r4,zero,6550 <_dtoa_r+0x1524>
    6060:	a80b883a 	mov	r5,r21
    6064:	000f883a 	mov	r7,zero
    6068:	01800144 	movi	r6,5
    606c:	e009883a 	mov	r4,fp
    6070:	0007e440 	call	7e44 <__multadd>
    6074:	100b883a 	mov	r5,r2
    6078:	8009883a 	mov	r4,r16
    607c:	102b883a 	mov	r21,r2
    6080:	000863c0 	call	863c <__mcmp>
    6084:	dc000915 	stw	r16,36(sp)
    6088:	00bf410e 	bge	zero,r2,5d90 <__alt_data_end+0xff005d90>
    608c:	d9c00717 	ldw	r7,28(sp)
    6090:	00800c44 	movi	r2,49
    6094:	38800005 	stb	r2,0(r7)
    6098:	d8800517 	ldw	r2,20(sp)
    609c:	3dc00044 	addi	r23,r7,1
    60a0:	10800044 	addi	r2,r2,1
    60a4:	d8800515 	stw	r2,20(sp)
    60a8:	003f3d06 	br	5da0 <__alt_data_end+0xff005da0>
    60ac:	d9800517 	ldw	r6,20(sp)
    60b0:	d9c00717 	ldw	r7,28(sp)
    60b4:	00800c44 	movi	r2,49
    60b8:	31800044 	addi	r6,r6,1
    60bc:	d9800515 	stw	r6,20(sp)
    60c0:	38800005 	stb	r2,0(r7)
    60c4:	003edf06 	br	5c44 <__alt_data_end+0xff005c44>
    60c8:	d8000b15 	stw	zero,44(sp)
    60cc:	003c9f06 	br	534c <__alt_data_end+0xff00534c>
    60d0:	903e7e1e 	bne	r18,zero,5acc <__alt_data_end+0xff005acc>
    60d4:	00800434 	movhi	r2,16
    60d8:	10bfffc4 	addi	r2,r2,-1
    60dc:	9884703a 	and	r2,r19,r2
    60e0:	1000ea1e 	bne	r2,zero,648c <_dtoa_r+0x1460>
    60e4:	9cdffc2c 	andhi	r19,r19,32752
    60e8:	9800e826 	beq	r19,zero,648c <_dtoa_r+0x1460>
    60ec:	d9c00817 	ldw	r7,32(sp)
    60f0:	b5800044 	addi	r22,r22,1
    60f4:	04c00044 	movi	r19,1
    60f8:	39c00044 	addi	r7,r7,1
    60fc:	d9c00815 	stw	r7,32(sp)
    6100:	d8800d17 	ldw	r2,52(sp)
    6104:	103e721e 	bne	r2,zero,5ad0 <__alt_data_end+0xff005ad0>
    6108:	00800044 	movi	r2,1
    610c:	003e7906 	br	5af4 <__alt_data_end+0xff005af4>
    6110:	8009883a 	mov	r4,r16
    6114:	000e40c0 	call	e40c <__floatsidf>
    6118:	d9800f17 	ldw	r6,60(sp)
    611c:	d9c01017 	ldw	r7,64(sp)
    6120:	1009883a 	mov	r4,r2
    6124:	180b883a 	mov	r5,r3
    6128:	000d3780 	call	d378 <__muldf3>
    612c:	000d883a 	mov	r6,zero
    6130:	01d00734 	movhi	r7,16412
    6134:	1009883a 	mov	r4,r2
    6138:	180b883a 	mov	r5,r3
    613c:	000bf8c0 	call	bf8c <__adddf3>
    6140:	047f3034 	movhi	r17,64704
    6144:	1021883a 	mov	r16,r2
    6148:	1c63883a 	add	r17,r3,r17
    614c:	d9000f17 	ldw	r4,60(sp)
    6150:	d9401017 	ldw	r5,64(sp)
    6154:	000d883a 	mov	r6,zero
    6158:	01d00534 	movhi	r7,16404
    615c:	000da900 	call	da90 <__subdf3>
    6160:	800d883a 	mov	r6,r16
    6164:	880f883a 	mov	r7,r17
    6168:	1009883a 	mov	r4,r2
    616c:	180b883a 	mov	r5,r3
    6170:	102b883a 	mov	r21,r2
    6174:	1829883a 	mov	r20,r3
    6178:	000d1a80 	call	d1a8 <__gedf2>
    617c:	00806c16 	blt	zero,r2,6330 <_dtoa_r+0x1304>
    6180:	89e0003c 	xorhi	r7,r17,32768
    6184:	800d883a 	mov	r6,r16
    6188:	a809883a 	mov	r4,r21
    618c:	a00b883a 	mov	r5,r20
    6190:	000d2840 	call	d284 <__ledf2>
    6194:	103d7e0e 	bge	r2,zero,5790 <__alt_data_end+0xff005790>
    6198:	002b883a 	mov	r21,zero
    619c:	0023883a 	mov	r17,zero
    61a0:	003efb06 	br	5d90 <__alt_data_end+0xff005d90>
    61a4:	d8800717 	ldw	r2,28(sp)
    61a8:	003bd006 	br	50ec <__alt_data_end+0xff0050ec>
    61ac:	d9000a17 	ldw	r4,40(sp)
    61b0:	d9800d17 	ldw	r6,52(sp)
    61b4:	dd400a15 	stw	r21,40(sp)
    61b8:	a905c83a 	sub	r2,r21,r4
    61bc:	308d883a 	add	r6,r6,r2
    61c0:	d9800d15 	stw	r6,52(sp)
    61c4:	002b883a 	mov	r21,zero
    61c8:	003e0606 	br	59e4 <__alt_data_end+0xff0059e4>
    61cc:	9023883a 	mov	r17,r18
    61d0:	9829883a 	mov	r20,r19
    61d4:	04000084 	movi	r16,2
    61d8:	003c9206 	br	5424 <__alt_data_end+0xff005424>
    61dc:	04000044 	movi	r16,1
    61e0:	dc000c15 	stw	r16,48(sp)
    61e4:	dc000615 	stw	r16,24(sp)
    61e8:	dc002215 	stw	r16,136(sp)
    61ec:	e0001115 	stw	zero,68(fp)
    61f0:	000b883a 	mov	r5,zero
    61f4:	003c6906 	br	539c <__alt_data_end+0xff00539c>
    61f8:	3021883a 	mov	r16,r6
    61fc:	003ffb06 	br	61ec <__alt_data_end+0xff0061ec>
    6200:	1000021e 	bne	r2,zero,620c <_dtoa_r+0x11e0>
    6204:	4200004c 	andi	r8,r8,1
    6208:	403e7d1e 	bne	r8,zero,5c00 <__alt_data_end+0xff005c00>
    620c:	01000c04 	movi	r4,48
    6210:	00000106 	br	6218 <_dtoa_r+0x11ec>
    6214:	102f883a 	mov	r23,r2
    6218:	b8bfffc4 	addi	r2,r23,-1
    621c:	10c00007 	ldb	r3,0(r2)
    6220:	193ffc26 	beq	r3,r4,6214 <__alt_data_end+0xff006214>
    6224:	003e8706 	br	5c44 <__alt_data_end+0xff005c44>
    6228:	d8800517 	ldw	r2,20(sp)
    622c:	00a3c83a 	sub	r17,zero,r2
    6230:	8800a426 	beq	r17,zero,64c4 <_dtoa_r+0x1498>
    6234:	888003cc 	andi	r2,r17,15
    6238:	100490fa 	slli	r2,r2,3
    623c:	00c00074 	movhi	r3,1
    6240:	18c57a04 	addi	r3,r3,5608
    6244:	1885883a 	add	r2,r3,r2
    6248:	11800017 	ldw	r6,0(r2)
    624c:	11c00117 	ldw	r7,4(r2)
    6250:	9009883a 	mov	r4,r18
    6254:	980b883a 	mov	r5,r19
    6258:	8823d13a 	srai	r17,r17,4
    625c:	000d3780 	call	d378 <__muldf3>
    6260:	d8800f15 	stw	r2,60(sp)
    6264:	d8c01015 	stw	r3,64(sp)
    6268:	8800e826 	beq	r17,zero,660c <_dtoa_r+0x15e0>
    626c:	05000074 	movhi	r20,1
    6270:	a5057004 	addi	r20,r20,5568
    6274:	04000084 	movi	r16,2
    6278:	8980004c 	andi	r6,r17,1
    627c:	1009883a 	mov	r4,r2
    6280:	8823d07a 	srai	r17,r17,1
    6284:	180b883a 	mov	r5,r3
    6288:	30000426 	beq	r6,zero,629c <_dtoa_r+0x1270>
    628c:	a1800017 	ldw	r6,0(r20)
    6290:	a1c00117 	ldw	r7,4(r20)
    6294:	84000044 	addi	r16,r16,1
    6298:	000d3780 	call	d378 <__muldf3>
    629c:	a5000204 	addi	r20,r20,8
    62a0:	883ff51e 	bne	r17,zero,6278 <__alt_data_end+0xff006278>
    62a4:	d8800f15 	stw	r2,60(sp)
    62a8:	d8c01015 	stw	r3,64(sp)
    62ac:	003c7606 	br	5488 <__alt_data_end+0xff005488>
    62b0:	00c00c04 	movi	r3,48
    62b4:	10c00005 	stb	r3,0(r2)
    62b8:	d8c00517 	ldw	r3,20(sp)
    62bc:	bd3fffc3 	ldbu	r20,-1(r23)
    62c0:	18c00044 	addi	r3,r3,1
    62c4:	d8c00515 	stw	r3,20(sp)
    62c8:	003db906 	br	59b0 <__alt_data_end+0xff0059b0>
    62cc:	89400117 	ldw	r5,4(r17)
    62d0:	e009883a 	mov	r4,fp
    62d4:	0007d740 	call	7d74 <_Balloc>
    62d8:	89800417 	ldw	r6,16(r17)
    62dc:	89400304 	addi	r5,r17,12
    62e0:	11000304 	addi	r4,r2,12
    62e4:	31800084 	addi	r6,r6,2
    62e8:	318d883a 	add	r6,r6,r6
    62ec:	318d883a 	add	r6,r6,r6
    62f0:	1027883a 	mov	r19,r2
    62f4:	00026940 	call	2694 <memcpy>
    62f8:	01800044 	movi	r6,1
    62fc:	980b883a 	mov	r5,r19
    6300:	e009883a 	mov	r4,fp
    6304:	00084f40 	call	84f4 <__lshift>
    6308:	1029883a 	mov	r20,r2
    630c:	003ecc06 	br	5e40 <__alt_data_end+0xff005e40>
    6310:	00800e44 	movi	r2,57
    6314:	90809026 	beq	r18,r2,6558 <_dtoa_r+0x152c>
    6318:	92000044 	addi	r8,r18,1
    631c:	003f1f06 	br	5f9c <__alt_data_end+0xff005f9c>
    6320:	9011883a 	mov	r8,r18
    6324:	8825883a 	mov	r18,r17
    6328:	a023883a 	mov	r17,r20
    632c:	003e2906 	br	5bd4 <__alt_data_end+0xff005bd4>
    6330:	002b883a 	mov	r21,zero
    6334:	0023883a 	mov	r17,zero
    6338:	003f5406 	br	608c <__alt_data_end+0xff00608c>
    633c:	61bfffc4 	addi	r6,r12,-1
    6340:	300490fa 	slli	r2,r6,3
    6344:	00c00074 	movhi	r3,1
    6348:	18c57a04 	addi	r3,r3,5608
    634c:	1885883a 	add	r2,r3,r2
    6350:	11000017 	ldw	r4,0(r2)
    6354:	11400117 	ldw	r5,4(r2)
    6358:	d8800717 	ldw	r2,28(sp)
    635c:	880f883a 	mov	r7,r17
    6360:	d9801215 	stw	r6,72(sp)
    6364:	800d883a 	mov	r6,r16
    6368:	db001615 	stw	r12,88(sp)
    636c:	15c00044 	addi	r23,r2,1
    6370:	000d3780 	call	d378 <__muldf3>
    6374:	d9401017 	ldw	r5,64(sp)
    6378:	d9000f17 	ldw	r4,60(sp)
    637c:	d8c01515 	stw	r3,84(sp)
    6380:	d8801415 	stw	r2,80(sp)
    6384:	000e38c0 	call	e38c <__fixdfsi>
    6388:	1009883a 	mov	r4,r2
    638c:	1021883a 	mov	r16,r2
    6390:	000e40c0 	call	e40c <__floatsidf>
    6394:	d9000f17 	ldw	r4,60(sp)
    6398:	d9401017 	ldw	r5,64(sp)
    639c:	100d883a 	mov	r6,r2
    63a0:	180f883a 	mov	r7,r3
    63a4:	000da900 	call	da90 <__subdf3>
    63a8:	1829883a 	mov	r20,r3
    63ac:	d8c00717 	ldw	r3,28(sp)
    63b0:	84000c04 	addi	r16,r16,48
    63b4:	1023883a 	mov	r17,r2
    63b8:	1c000005 	stb	r16,0(r3)
    63bc:	db001617 	ldw	r12,88(sp)
    63c0:	00800044 	movi	r2,1
    63c4:	60802226 	beq	r12,r2,6450 <_dtoa_r+0x1424>
    63c8:	d9c00717 	ldw	r7,28(sp)
    63cc:	8805883a 	mov	r2,r17
    63d0:	b82b883a 	mov	r21,r23
    63d4:	3b19883a 	add	r12,r7,r12
    63d8:	6023883a 	mov	r17,r12
    63dc:	a007883a 	mov	r3,r20
    63e0:	dc800f15 	stw	r18,60(sp)
    63e4:	000d883a 	mov	r6,zero
    63e8:	01d00934 	movhi	r7,16420
    63ec:	1009883a 	mov	r4,r2
    63f0:	180b883a 	mov	r5,r3
    63f4:	000d3780 	call	d378 <__muldf3>
    63f8:	180b883a 	mov	r5,r3
    63fc:	1009883a 	mov	r4,r2
    6400:	1829883a 	mov	r20,r3
    6404:	1025883a 	mov	r18,r2
    6408:	000e38c0 	call	e38c <__fixdfsi>
    640c:	1009883a 	mov	r4,r2
    6410:	1021883a 	mov	r16,r2
    6414:	000e40c0 	call	e40c <__floatsidf>
    6418:	100d883a 	mov	r6,r2
    641c:	180f883a 	mov	r7,r3
    6420:	9009883a 	mov	r4,r18
    6424:	a00b883a 	mov	r5,r20
    6428:	84000c04 	addi	r16,r16,48
    642c:	000da900 	call	da90 <__subdf3>
    6430:	ad400044 	addi	r21,r21,1
    6434:	ac3fffc5 	stb	r16,-1(r21)
    6438:	ac7fea1e 	bne	r21,r17,63e4 <__alt_data_end+0xff0063e4>
    643c:	1023883a 	mov	r17,r2
    6440:	d8801217 	ldw	r2,72(sp)
    6444:	dc800f17 	ldw	r18,60(sp)
    6448:	1829883a 	mov	r20,r3
    644c:	b8af883a 	add	r23,r23,r2
    6450:	d9001417 	ldw	r4,80(sp)
    6454:	d9401517 	ldw	r5,84(sp)
    6458:	000d883a 	mov	r6,zero
    645c:	01cff834 	movhi	r7,16352
    6460:	000bf8c0 	call	bf8c <__adddf3>
    6464:	880d883a 	mov	r6,r17
    6468:	a00f883a 	mov	r7,r20
    646c:	1009883a 	mov	r4,r2
    6470:	180b883a 	mov	r5,r3
    6474:	000d2840 	call	d284 <__ledf2>
    6478:	10003e0e 	bge	r2,zero,6574 <_dtoa_r+0x1548>
    647c:	d9001317 	ldw	r4,76(sp)
    6480:	bd3fffc3 	ldbu	r20,-1(r23)
    6484:	d9000515 	stw	r4,20(sp)
    6488:	003d3b06 	br	5978 <__alt_data_end+0xff005978>
    648c:	0027883a 	mov	r19,zero
    6490:	003f1b06 	br	6100 <__alt_data_end+0xff006100>
    6494:	d8800817 	ldw	r2,32(sp)
    6498:	11e9c83a 	sub	r20,r2,r7
    649c:	0005883a 	mov	r2,zero
    64a0:	003d5406 	br	59f4 <__alt_data_end+0xff0059f4>
    64a4:	00800044 	movi	r2,1
    64a8:	003dc706 	br	5bc8 <__alt_data_end+0xff005bc8>
    64ac:	d8c00217 	ldw	r3,8(sp)
    64b0:	00800d84 	movi	r2,54
    64b4:	dd400a17 	ldw	r21,40(sp)
    64b8:	10c5c83a 	sub	r2,r2,r3
    64bc:	dd000817 	ldw	r20,32(sp)
    64c0:	003d4c06 	br	59f4 <__alt_data_end+0xff0059f4>
    64c4:	dc800f15 	stw	r18,60(sp)
    64c8:	dcc01015 	stw	r19,64(sp)
    64cc:	04000084 	movi	r16,2
    64d0:	003bed06 	br	5488 <__alt_data_end+0xff005488>
    64d4:	d9000617 	ldw	r4,24(sp)
    64d8:	203f0d26 	beq	r4,zero,6110 <__alt_data_end+0xff006110>
    64dc:	d9800c17 	ldw	r6,48(sp)
    64e0:	01bcab0e 	bge	zero,r6,5790 <__alt_data_end+0xff005790>
    64e4:	d9401017 	ldw	r5,64(sp)
    64e8:	d9000f17 	ldw	r4,60(sp)
    64ec:	000d883a 	mov	r6,zero
    64f0:	01d00934 	movhi	r7,16420
    64f4:	000d3780 	call	d378 <__muldf3>
    64f8:	81000044 	addi	r4,r16,1
    64fc:	d8800f15 	stw	r2,60(sp)
    6500:	d8c01015 	stw	r3,64(sp)
    6504:	000e40c0 	call	e40c <__floatsidf>
    6508:	d9800f17 	ldw	r6,60(sp)
    650c:	d9c01017 	ldw	r7,64(sp)
    6510:	1009883a 	mov	r4,r2
    6514:	180b883a 	mov	r5,r3
    6518:	000d3780 	call	d378 <__muldf3>
    651c:	01d00734 	movhi	r7,16412
    6520:	000d883a 	mov	r6,zero
    6524:	1009883a 	mov	r4,r2
    6528:	180b883a 	mov	r5,r3
    652c:	000bf8c0 	call	bf8c <__adddf3>
    6530:	d9c00517 	ldw	r7,20(sp)
    6534:	047f3034 	movhi	r17,64704
    6538:	1021883a 	mov	r16,r2
    653c:	39ffffc4 	addi	r7,r7,-1
    6540:	d9c01315 	stw	r7,76(sp)
    6544:	1c63883a 	add	r17,r3,r17
    6548:	db000c17 	ldw	r12,48(sp)
    654c:	003bea06 	br	54f8 <__alt_data_end+0xff0054f8>
    6550:	dc000915 	stw	r16,36(sp)
    6554:	003e0e06 	br	5d90 <__alt_data_end+0xff005d90>
    6558:	01000e44 	movi	r4,57
    655c:	8825883a 	mov	r18,r17
    6560:	9dc00044 	addi	r23,r19,1
    6564:	99000005 	stb	r4,0(r19)
    6568:	a023883a 	mov	r17,r20
    656c:	dc000915 	stw	r16,36(sp)
    6570:	003da406 	br	5c04 <__alt_data_end+0xff005c04>
    6574:	d9801417 	ldw	r6,80(sp)
    6578:	d9c01517 	ldw	r7,84(sp)
    657c:	0009883a 	mov	r4,zero
    6580:	014ff834 	movhi	r5,16352
    6584:	000da900 	call	da90 <__subdf3>
    6588:	880d883a 	mov	r6,r17
    658c:	a00f883a 	mov	r7,r20
    6590:	1009883a 	mov	r4,r2
    6594:	180b883a 	mov	r5,r3
    6598:	000d1a80 	call	d1a8 <__gedf2>
    659c:	00bc7c0e 	bge	zero,r2,5790 <__alt_data_end+0xff005790>
    65a0:	01000c04 	movi	r4,48
    65a4:	00000106 	br	65ac <_dtoa_r+0x1580>
    65a8:	102f883a 	mov	r23,r2
    65ac:	b8bfffc4 	addi	r2,r23,-1
    65b0:	10c00007 	ldb	r3,0(r2)
    65b4:	193ffc26 	beq	r3,r4,65a8 <__alt_data_end+0xff0065a8>
    65b8:	d9801317 	ldw	r6,76(sp)
    65bc:	d9800515 	stw	r6,20(sp)
    65c0:	003c4406 	br	56d4 <__alt_data_end+0xff0056d4>
    65c4:	d9801317 	ldw	r6,76(sp)
    65c8:	d9800515 	stw	r6,20(sp)
    65cc:	003cea06 	br	5978 <__alt_data_end+0xff005978>
    65d0:	dd800f17 	ldw	r22,60(sp)
    65d4:	dcc01017 	ldw	r19,64(sp)
    65d8:	dc801217 	ldw	r18,72(sp)
    65dc:	003c6c06 	br	5790 <__alt_data_end+0xff005790>
    65e0:	903e031e 	bne	r18,zero,5df0 <__alt_data_end+0xff005df0>
    65e4:	003ebb06 	br	60d4 <__alt_data_end+0xff0060d4>
    65e8:	103e6c1e 	bne	r2,zero,5f9c <__alt_data_end+0xff005f9c>
    65ec:	4080004c 	andi	r2,r8,1
    65f0:	103e6a26 	beq	r2,zero,5f9c <__alt_data_end+0xff005f9c>
    65f4:	003e6606 	br	5f90 <__alt_data_end+0xff005f90>
    65f8:	d8c00317 	ldw	r3,12(sp)
    65fc:	00800084 	movi	r2,2
    6600:	10c02916 	blt	r2,r3,66a8 <_dtoa_r+0x167c>
    6604:	d9000c17 	ldw	r4,48(sp)
    6608:	003e8806 	br	602c <__alt_data_end+0xff00602c>
    660c:	04000084 	movi	r16,2
    6610:	003b9d06 	br	5488 <__alt_data_end+0xff005488>
    6614:	d9001317 	ldw	r4,76(sp)
    6618:	d9000515 	stw	r4,20(sp)
    661c:	003cd606 	br	5978 <__alt_data_end+0xff005978>
    6620:	d8801317 	ldw	r2,76(sp)
    6624:	d8800515 	stw	r2,20(sp)
    6628:	003c2a06 	br	56d4 <__alt_data_end+0xff0056d4>
    662c:	d9800317 	ldw	r6,12(sp)
    6630:	00800084 	movi	r2,2
    6634:	11801516 	blt	r2,r6,668c <_dtoa_r+0x1660>
    6638:	d9c00c17 	ldw	r7,48(sp)
    663c:	d9c00615 	stw	r7,24(sp)
    6640:	003df706 	br	5e20 <__alt_data_end+0xff005e20>
    6644:	193d3926 	beq	r3,r4,5b2c <__alt_data_end+0xff005b2c>
    6648:	00c00f04 	movi	r3,60
    664c:	1885c83a 	sub	r2,r3,r2
    6650:	003ddf06 	br	5dd0 <__alt_data_end+0xff005dd0>
    6654:	e009883a 	mov	r4,fp
    6658:	e0001115 	stw	zero,68(fp)
    665c:	000b883a 	mov	r5,zero
    6660:	0007d740 	call	7d74 <_Balloc>
    6664:	d8800715 	stw	r2,28(sp)
    6668:	d8c00717 	ldw	r3,28(sp)
    666c:	00bfffc4 	movi	r2,-1
    6670:	01000044 	movi	r4,1
    6674:	d8800c15 	stw	r2,48(sp)
    6678:	e0c01015 	stw	r3,64(fp)
    667c:	d9000b15 	stw	r4,44(sp)
    6680:	d8800615 	stw	r2,24(sp)
    6684:	d8002215 	stw	zero,136(sp)
    6688:	003c4106 	br	5790 <__alt_data_end+0xff005790>
    668c:	d8c00c17 	ldw	r3,48(sp)
    6690:	d8c00615 	stw	r3,24(sp)
    6694:	003e7006 	br	6058 <__alt_data_end+0xff006058>
    6698:	04400044 	movi	r17,1
    669c:	003b2006 	br	5320 <__alt_data_end+0xff005320>
    66a0:	000b883a 	mov	r5,zero
    66a4:	003b3d06 	br	539c <__alt_data_end+0xff00539c>
    66a8:	d8800c17 	ldw	r2,48(sp)
    66ac:	d8800615 	stw	r2,24(sp)
    66b0:	003e6906 	br	6058 <__alt_data_end+0xff006058>

000066b4 <__sflush_r>:
    66b4:	2880030b 	ldhu	r2,12(r5)
    66b8:	defffb04 	addi	sp,sp,-20
    66bc:	dcc00315 	stw	r19,12(sp)
    66c0:	dc400115 	stw	r17,4(sp)
    66c4:	dfc00415 	stw	ra,16(sp)
    66c8:	dc800215 	stw	r18,8(sp)
    66cc:	dc000015 	stw	r16,0(sp)
    66d0:	10c0020c 	andi	r3,r2,8
    66d4:	2823883a 	mov	r17,r5
    66d8:	2027883a 	mov	r19,r4
    66dc:	1800311e 	bne	r3,zero,67a4 <__sflush_r+0xf0>
    66e0:	28c00117 	ldw	r3,4(r5)
    66e4:	10820014 	ori	r2,r2,2048
    66e8:	2880030d 	sth	r2,12(r5)
    66ec:	00c04b0e 	bge	zero,r3,681c <__sflush_r+0x168>
    66f0:	8a000a17 	ldw	r8,40(r17)
    66f4:	40002326 	beq	r8,zero,6784 <__sflush_r+0xd0>
    66f8:	9c000017 	ldw	r16,0(r19)
    66fc:	10c4000c 	andi	r3,r2,4096
    6700:	98000015 	stw	zero,0(r19)
    6704:	18004826 	beq	r3,zero,6828 <__sflush_r+0x174>
    6708:	89801417 	ldw	r6,80(r17)
    670c:	10c0010c 	andi	r3,r2,4
    6710:	18000626 	beq	r3,zero,672c <__sflush_r+0x78>
    6714:	88c00117 	ldw	r3,4(r17)
    6718:	88800c17 	ldw	r2,48(r17)
    671c:	30cdc83a 	sub	r6,r6,r3
    6720:	10000226 	beq	r2,zero,672c <__sflush_r+0x78>
    6724:	88800f17 	ldw	r2,60(r17)
    6728:	308dc83a 	sub	r6,r6,r2
    672c:	89400717 	ldw	r5,28(r17)
    6730:	000f883a 	mov	r7,zero
    6734:	9809883a 	mov	r4,r19
    6738:	403ee83a 	callr	r8
    673c:	00ffffc4 	movi	r3,-1
    6740:	10c04426 	beq	r2,r3,6854 <__sflush_r+0x1a0>
    6744:	88c0030b 	ldhu	r3,12(r17)
    6748:	89000417 	ldw	r4,16(r17)
    674c:	88000115 	stw	zero,4(r17)
    6750:	197dffcc 	andi	r5,r3,63487
    6754:	8940030d 	sth	r5,12(r17)
    6758:	89000015 	stw	r4,0(r17)
    675c:	18c4000c 	andi	r3,r3,4096
    6760:	18002c1e 	bne	r3,zero,6814 <__sflush_r+0x160>
    6764:	89400c17 	ldw	r5,48(r17)
    6768:	9c000015 	stw	r16,0(r19)
    676c:	28000526 	beq	r5,zero,6784 <__sflush_r+0xd0>
    6770:	88801004 	addi	r2,r17,64
    6774:	28800226 	beq	r5,r2,6780 <__sflush_r+0xcc>
    6778:	9809883a 	mov	r4,r19
    677c:	0006e200 	call	6e20 <_free_r>
    6780:	88000c15 	stw	zero,48(r17)
    6784:	0005883a 	mov	r2,zero
    6788:	dfc00417 	ldw	ra,16(sp)
    678c:	dcc00317 	ldw	r19,12(sp)
    6790:	dc800217 	ldw	r18,8(sp)
    6794:	dc400117 	ldw	r17,4(sp)
    6798:	dc000017 	ldw	r16,0(sp)
    679c:	dec00504 	addi	sp,sp,20
    67a0:	f800283a 	ret
    67a4:	2c800417 	ldw	r18,16(r5)
    67a8:	903ff626 	beq	r18,zero,6784 <__alt_data_end+0xff006784>
    67ac:	2c000017 	ldw	r16,0(r5)
    67b0:	108000cc 	andi	r2,r2,3
    67b4:	2c800015 	stw	r18,0(r5)
    67b8:	84a1c83a 	sub	r16,r16,r18
    67bc:	1000131e 	bne	r2,zero,680c <__sflush_r+0x158>
    67c0:	28800517 	ldw	r2,20(r5)
    67c4:	88800215 	stw	r2,8(r17)
    67c8:	04000316 	blt	zero,r16,67d8 <__sflush_r+0x124>
    67cc:	003fed06 	br	6784 <__alt_data_end+0xff006784>
    67d0:	90a5883a 	add	r18,r18,r2
    67d4:	043feb0e 	bge	zero,r16,6784 <__alt_data_end+0xff006784>
    67d8:	88800917 	ldw	r2,36(r17)
    67dc:	89400717 	ldw	r5,28(r17)
    67e0:	800f883a 	mov	r7,r16
    67e4:	900d883a 	mov	r6,r18
    67e8:	9809883a 	mov	r4,r19
    67ec:	103ee83a 	callr	r2
    67f0:	80a1c83a 	sub	r16,r16,r2
    67f4:	00bff616 	blt	zero,r2,67d0 <__alt_data_end+0xff0067d0>
    67f8:	88c0030b 	ldhu	r3,12(r17)
    67fc:	00bfffc4 	movi	r2,-1
    6800:	18c01014 	ori	r3,r3,64
    6804:	88c0030d 	sth	r3,12(r17)
    6808:	003fdf06 	br	6788 <__alt_data_end+0xff006788>
    680c:	0005883a 	mov	r2,zero
    6810:	003fec06 	br	67c4 <__alt_data_end+0xff0067c4>
    6814:	88801415 	stw	r2,80(r17)
    6818:	003fd206 	br	6764 <__alt_data_end+0xff006764>
    681c:	28c00f17 	ldw	r3,60(r5)
    6820:	00ffb316 	blt	zero,r3,66f0 <__alt_data_end+0xff0066f0>
    6824:	003fd706 	br	6784 <__alt_data_end+0xff006784>
    6828:	89400717 	ldw	r5,28(r17)
    682c:	000d883a 	mov	r6,zero
    6830:	01c00044 	movi	r7,1
    6834:	9809883a 	mov	r4,r19
    6838:	403ee83a 	callr	r8
    683c:	100d883a 	mov	r6,r2
    6840:	00bfffc4 	movi	r2,-1
    6844:	30801426 	beq	r6,r2,6898 <__sflush_r+0x1e4>
    6848:	8880030b 	ldhu	r2,12(r17)
    684c:	8a000a17 	ldw	r8,40(r17)
    6850:	003fae06 	br	670c <__alt_data_end+0xff00670c>
    6854:	98c00017 	ldw	r3,0(r19)
    6858:	183fba26 	beq	r3,zero,6744 <__alt_data_end+0xff006744>
    685c:	01000744 	movi	r4,29
    6860:	19000626 	beq	r3,r4,687c <__sflush_r+0x1c8>
    6864:	01000584 	movi	r4,22
    6868:	19000426 	beq	r3,r4,687c <__sflush_r+0x1c8>
    686c:	88c0030b 	ldhu	r3,12(r17)
    6870:	18c01014 	ori	r3,r3,64
    6874:	88c0030d 	sth	r3,12(r17)
    6878:	003fc306 	br	6788 <__alt_data_end+0xff006788>
    687c:	8880030b 	ldhu	r2,12(r17)
    6880:	88c00417 	ldw	r3,16(r17)
    6884:	88000115 	stw	zero,4(r17)
    6888:	10bdffcc 	andi	r2,r2,63487
    688c:	8880030d 	sth	r2,12(r17)
    6890:	88c00015 	stw	r3,0(r17)
    6894:	003fb306 	br	6764 <__alt_data_end+0xff006764>
    6898:	98800017 	ldw	r2,0(r19)
    689c:	103fea26 	beq	r2,zero,6848 <__alt_data_end+0xff006848>
    68a0:	00c00744 	movi	r3,29
    68a4:	10c00226 	beq	r2,r3,68b0 <__sflush_r+0x1fc>
    68a8:	00c00584 	movi	r3,22
    68ac:	10c0031e 	bne	r2,r3,68bc <__sflush_r+0x208>
    68b0:	9c000015 	stw	r16,0(r19)
    68b4:	0005883a 	mov	r2,zero
    68b8:	003fb306 	br	6788 <__alt_data_end+0xff006788>
    68bc:	88c0030b 	ldhu	r3,12(r17)
    68c0:	3005883a 	mov	r2,r6
    68c4:	18c01014 	ori	r3,r3,64
    68c8:	88c0030d 	sth	r3,12(r17)
    68cc:	003fae06 	br	6788 <__alt_data_end+0xff006788>

000068d0 <_fflush_r>:
    68d0:	defffd04 	addi	sp,sp,-12
    68d4:	dc000115 	stw	r16,4(sp)
    68d8:	dfc00215 	stw	ra,8(sp)
    68dc:	2021883a 	mov	r16,r4
    68e0:	20000226 	beq	r4,zero,68ec <_fflush_r+0x1c>
    68e4:	20800e17 	ldw	r2,56(r4)
    68e8:	10000c26 	beq	r2,zero,691c <_fflush_r+0x4c>
    68ec:	2880030f 	ldh	r2,12(r5)
    68f0:	1000051e 	bne	r2,zero,6908 <_fflush_r+0x38>
    68f4:	0005883a 	mov	r2,zero
    68f8:	dfc00217 	ldw	ra,8(sp)
    68fc:	dc000117 	ldw	r16,4(sp)
    6900:	dec00304 	addi	sp,sp,12
    6904:	f800283a 	ret
    6908:	8009883a 	mov	r4,r16
    690c:	dfc00217 	ldw	ra,8(sp)
    6910:	dc000117 	ldw	r16,4(sp)
    6914:	dec00304 	addi	sp,sp,12
    6918:	00066b41 	jmpi	66b4 <__sflush_r>
    691c:	d9400015 	stw	r5,0(sp)
    6920:	0006cac0 	call	6cac <__sinit>
    6924:	d9400017 	ldw	r5,0(sp)
    6928:	003ff006 	br	68ec <__alt_data_end+0xff0068ec>

0000692c <fflush>:
    692c:	20000526 	beq	r4,zero,6944 <fflush+0x18>
    6930:	00800074 	movhi	r2,1
    6934:	108cad04 	addi	r2,r2,12980
    6938:	200b883a 	mov	r5,r4
    693c:	11000017 	ldw	r4,0(r2)
    6940:	00068d01 	jmpi	68d0 <_fflush_r>
    6944:	00800074 	movhi	r2,1
    6948:	108cac04 	addi	r2,r2,12976
    694c:	11000017 	ldw	r4,0(r2)
    6950:	01400034 	movhi	r5,0
    6954:	295a3404 	addi	r5,r5,26832
    6958:	00076b01 	jmpi	76b0 <_fwalk_reent>

0000695c <__fp_unlock>:
    695c:	0005883a 	mov	r2,zero
    6960:	f800283a 	ret

00006964 <_cleanup_r>:
    6964:	01400074 	movhi	r5,1
    6968:	296b4804 	addi	r5,r5,-21216
    696c:	00076b01 	jmpi	76b0 <_fwalk_reent>

00006970 <__sinit.part.1>:
    6970:	defff704 	addi	sp,sp,-36
    6974:	00c00034 	movhi	r3,0
    6978:	dfc00815 	stw	ra,32(sp)
    697c:	ddc00715 	stw	r23,28(sp)
    6980:	dd800615 	stw	r22,24(sp)
    6984:	dd400515 	stw	r21,20(sp)
    6988:	dd000415 	stw	r20,16(sp)
    698c:	dcc00315 	stw	r19,12(sp)
    6990:	dc800215 	stw	r18,8(sp)
    6994:	dc400115 	stw	r17,4(sp)
    6998:	dc000015 	stw	r16,0(sp)
    699c:	18da5904 	addi	r3,r3,26980
    69a0:	24000117 	ldw	r16,4(r4)
    69a4:	20c00f15 	stw	r3,60(r4)
    69a8:	2080bb04 	addi	r2,r4,748
    69ac:	00c000c4 	movi	r3,3
    69b0:	20c0b915 	stw	r3,740(r4)
    69b4:	2080ba15 	stw	r2,744(r4)
    69b8:	2000b815 	stw	zero,736(r4)
    69bc:	05c00204 	movi	r23,8
    69c0:	00800104 	movi	r2,4
    69c4:	2025883a 	mov	r18,r4
    69c8:	b80d883a 	mov	r6,r23
    69cc:	81001704 	addi	r4,r16,92
    69d0:	000b883a 	mov	r5,zero
    69d4:	80000015 	stw	zero,0(r16)
    69d8:	80000115 	stw	zero,4(r16)
    69dc:	80000215 	stw	zero,8(r16)
    69e0:	8080030d 	sth	r2,12(r16)
    69e4:	80001915 	stw	zero,100(r16)
    69e8:	8000038d 	sth	zero,14(r16)
    69ec:	80000415 	stw	zero,16(r16)
    69f0:	80000515 	stw	zero,20(r16)
    69f4:	80000615 	stw	zero,24(r16)
    69f8:	0007c4c0 	call	7c4c <memset>
    69fc:	05800074 	movhi	r22,1
    6a00:	94400217 	ldw	r17,8(r18)
    6a04:	05400074 	movhi	r21,1
    6a08:	05000074 	movhi	r20,1
    6a0c:	04c00074 	movhi	r19,1
    6a10:	b5a4d204 	addi	r22,r22,-27832
    6a14:	ad64e904 	addi	r21,r21,-27740
    6a18:	a5250804 	addi	r20,r20,-27616
    6a1c:	9ce51f04 	addi	r19,r19,-27524
    6a20:	85800815 	stw	r22,32(r16)
    6a24:	85400915 	stw	r21,36(r16)
    6a28:	85000a15 	stw	r20,40(r16)
    6a2c:	84c00b15 	stw	r19,44(r16)
    6a30:	84000715 	stw	r16,28(r16)
    6a34:	00800284 	movi	r2,10
    6a38:	8880030d 	sth	r2,12(r17)
    6a3c:	00800044 	movi	r2,1
    6a40:	b80d883a 	mov	r6,r23
    6a44:	89001704 	addi	r4,r17,92
    6a48:	000b883a 	mov	r5,zero
    6a4c:	88000015 	stw	zero,0(r17)
    6a50:	88000115 	stw	zero,4(r17)
    6a54:	88000215 	stw	zero,8(r17)
    6a58:	88001915 	stw	zero,100(r17)
    6a5c:	8880038d 	sth	r2,14(r17)
    6a60:	88000415 	stw	zero,16(r17)
    6a64:	88000515 	stw	zero,20(r17)
    6a68:	88000615 	stw	zero,24(r17)
    6a6c:	0007c4c0 	call	7c4c <memset>
    6a70:	94000317 	ldw	r16,12(r18)
    6a74:	00800484 	movi	r2,18
    6a78:	8c400715 	stw	r17,28(r17)
    6a7c:	8d800815 	stw	r22,32(r17)
    6a80:	8d400915 	stw	r21,36(r17)
    6a84:	8d000a15 	stw	r20,40(r17)
    6a88:	8cc00b15 	stw	r19,44(r17)
    6a8c:	8080030d 	sth	r2,12(r16)
    6a90:	00800084 	movi	r2,2
    6a94:	80000015 	stw	zero,0(r16)
    6a98:	80000115 	stw	zero,4(r16)
    6a9c:	80000215 	stw	zero,8(r16)
    6aa0:	80001915 	stw	zero,100(r16)
    6aa4:	8080038d 	sth	r2,14(r16)
    6aa8:	80000415 	stw	zero,16(r16)
    6aac:	80000515 	stw	zero,20(r16)
    6ab0:	80000615 	stw	zero,24(r16)
    6ab4:	b80d883a 	mov	r6,r23
    6ab8:	000b883a 	mov	r5,zero
    6abc:	81001704 	addi	r4,r16,92
    6ac0:	0007c4c0 	call	7c4c <memset>
    6ac4:	00800044 	movi	r2,1
    6ac8:	84000715 	stw	r16,28(r16)
    6acc:	85800815 	stw	r22,32(r16)
    6ad0:	85400915 	stw	r21,36(r16)
    6ad4:	85000a15 	stw	r20,40(r16)
    6ad8:	84c00b15 	stw	r19,44(r16)
    6adc:	90800e15 	stw	r2,56(r18)
    6ae0:	dfc00817 	ldw	ra,32(sp)
    6ae4:	ddc00717 	ldw	r23,28(sp)
    6ae8:	dd800617 	ldw	r22,24(sp)
    6aec:	dd400517 	ldw	r21,20(sp)
    6af0:	dd000417 	ldw	r20,16(sp)
    6af4:	dcc00317 	ldw	r19,12(sp)
    6af8:	dc800217 	ldw	r18,8(sp)
    6afc:	dc400117 	ldw	r17,4(sp)
    6b00:	dc000017 	ldw	r16,0(sp)
    6b04:	dec00904 	addi	sp,sp,36
    6b08:	f800283a 	ret

00006b0c <__fp_lock>:
    6b0c:	0005883a 	mov	r2,zero
    6b10:	f800283a 	ret

00006b14 <__sfmoreglue>:
    6b14:	defffc04 	addi	sp,sp,-16
    6b18:	dc400115 	stw	r17,4(sp)
    6b1c:	2c7fffc4 	addi	r17,r5,-1
    6b20:	8c401a24 	muli	r17,r17,104
    6b24:	dc800215 	stw	r18,8(sp)
    6b28:	2825883a 	mov	r18,r5
    6b2c:	89401d04 	addi	r5,r17,116
    6b30:	dc000015 	stw	r16,0(sp)
    6b34:	dfc00315 	stw	ra,12(sp)
    6b38:	0001e880 	call	1e88 <_malloc_r>
    6b3c:	1021883a 	mov	r16,r2
    6b40:	10000726 	beq	r2,zero,6b60 <__sfmoreglue+0x4c>
    6b44:	11000304 	addi	r4,r2,12
    6b48:	10000015 	stw	zero,0(r2)
    6b4c:	14800115 	stw	r18,4(r2)
    6b50:	11000215 	stw	r4,8(r2)
    6b54:	89801a04 	addi	r6,r17,104
    6b58:	000b883a 	mov	r5,zero
    6b5c:	0007c4c0 	call	7c4c <memset>
    6b60:	8005883a 	mov	r2,r16
    6b64:	dfc00317 	ldw	ra,12(sp)
    6b68:	dc800217 	ldw	r18,8(sp)
    6b6c:	dc400117 	ldw	r17,4(sp)
    6b70:	dc000017 	ldw	r16,0(sp)
    6b74:	dec00404 	addi	sp,sp,16
    6b78:	f800283a 	ret

00006b7c <__sfp>:
    6b7c:	defffb04 	addi	sp,sp,-20
    6b80:	dc000015 	stw	r16,0(sp)
    6b84:	04000074 	movhi	r16,1
    6b88:	840cac04 	addi	r16,r16,12976
    6b8c:	dcc00315 	stw	r19,12(sp)
    6b90:	2027883a 	mov	r19,r4
    6b94:	81000017 	ldw	r4,0(r16)
    6b98:	dfc00415 	stw	ra,16(sp)
    6b9c:	dc800215 	stw	r18,8(sp)
    6ba0:	20800e17 	ldw	r2,56(r4)
    6ba4:	dc400115 	stw	r17,4(sp)
    6ba8:	1000021e 	bne	r2,zero,6bb4 <__sfp+0x38>
    6bac:	00069700 	call	6970 <__sinit.part.1>
    6bb0:	81000017 	ldw	r4,0(r16)
    6bb4:	2480b804 	addi	r18,r4,736
    6bb8:	047fffc4 	movi	r17,-1
    6bbc:	91000117 	ldw	r4,4(r18)
    6bc0:	94000217 	ldw	r16,8(r18)
    6bc4:	213fffc4 	addi	r4,r4,-1
    6bc8:	20000a16 	blt	r4,zero,6bf4 <__sfp+0x78>
    6bcc:	8080030f 	ldh	r2,12(r16)
    6bd0:	10000c26 	beq	r2,zero,6c04 <__sfp+0x88>
    6bd4:	80c01d04 	addi	r3,r16,116
    6bd8:	00000206 	br	6be4 <__sfp+0x68>
    6bdc:	18bfe60f 	ldh	r2,-104(r3)
    6be0:	10000826 	beq	r2,zero,6c04 <__sfp+0x88>
    6be4:	213fffc4 	addi	r4,r4,-1
    6be8:	1c3ffd04 	addi	r16,r3,-12
    6bec:	18c01a04 	addi	r3,r3,104
    6bf0:	247ffa1e 	bne	r4,r17,6bdc <__alt_data_end+0xff006bdc>
    6bf4:	90800017 	ldw	r2,0(r18)
    6bf8:	10001d26 	beq	r2,zero,6c70 <__sfp+0xf4>
    6bfc:	1025883a 	mov	r18,r2
    6c00:	003fee06 	br	6bbc <__alt_data_end+0xff006bbc>
    6c04:	00bfffc4 	movi	r2,-1
    6c08:	8080038d 	sth	r2,14(r16)
    6c0c:	00800044 	movi	r2,1
    6c10:	8080030d 	sth	r2,12(r16)
    6c14:	80001915 	stw	zero,100(r16)
    6c18:	80000015 	stw	zero,0(r16)
    6c1c:	80000215 	stw	zero,8(r16)
    6c20:	80000115 	stw	zero,4(r16)
    6c24:	80000415 	stw	zero,16(r16)
    6c28:	80000515 	stw	zero,20(r16)
    6c2c:	80000615 	stw	zero,24(r16)
    6c30:	01800204 	movi	r6,8
    6c34:	000b883a 	mov	r5,zero
    6c38:	81001704 	addi	r4,r16,92
    6c3c:	0007c4c0 	call	7c4c <memset>
    6c40:	8005883a 	mov	r2,r16
    6c44:	80000c15 	stw	zero,48(r16)
    6c48:	80000d15 	stw	zero,52(r16)
    6c4c:	80001115 	stw	zero,68(r16)
    6c50:	80001215 	stw	zero,72(r16)
    6c54:	dfc00417 	ldw	ra,16(sp)
    6c58:	dcc00317 	ldw	r19,12(sp)
    6c5c:	dc800217 	ldw	r18,8(sp)
    6c60:	dc400117 	ldw	r17,4(sp)
    6c64:	dc000017 	ldw	r16,0(sp)
    6c68:	dec00504 	addi	sp,sp,20
    6c6c:	f800283a 	ret
    6c70:	01400104 	movi	r5,4
    6c74:	9809883a 	mov	r4,r19
    6c78:	0006b140 	call	6b14 <__sfmoreglue>
    6c7c:	90800015 	stw	r2,0(r18)
    6c80:	103fde1e 	bne	r2,zero,6bfc <__alt_data_end+0xff006bfc>
    6c84:	00800304 	movi	r2,12
    6c88:	98800015 	stw	r2,0(r19)
    6c8c:	0005883a 	mov	r2,zero
    6c90:	003ff006 	br	6c54 <__alt_data_end+0xff006c54>

00006c94 <_cleanup>:
    6c94:	00800074 	movhi	r2,1
    6c98:	108cac04 	addi	r2,r2,12976
    6c9c:	11000017 	ldw	r4,0(r2)
    6ca0:	01400074 	movhi	r5,1
    6ca4:	296b4804 	addi	r5,r5,-21216
    6ca8:	00076b01 	jmpi	76b0 <_fwalk_reent>

00006cac <__sinit>:
    6cac:	20800e17 	ldw	r2,56(r4)
    6cb0:	10000126 	beq	r2,zero,6cb8 <__sinit+0xc>
    6cb4:	f800283a 	ret
    6cb8:	00069701 	jmpi	6970 <__sinit.part.1>

00006cbc <__sfp_lock_acquire>:
    6cbc:	f800283a 	ret

00006cc0 <__sfp_lock_release>:
    6cc0:	f800283a 	ret

00006cc4 <__sinit_lock_acquire>:
    6cc4:	f800283a 	ret

00006cc8 <__sinit_lock_release>:
    6cc8:	f800283a 	ret

00006ccc <__fp_lock_all>:
    6ccc:	00800074 	movhi	r2,1
    6cd0:	108cad04 	addi	r2,r2,12980
    6cd4:	11000017 	ldw	r4,0(r2)
    6cd8:	01400034 	movhi	r5,0
    6cdc:	295ac304 	addi	r5,r5,27404
    6ce0:	00075ec1 	jmpi	75ec <_fwalk>

00006ce4 <__fp_unlock_all>:
    6ce4:	00800074 	movhi	r2,1
    6ce8:	108cad04 	addi	r2,r2,12980
    6cec:	11000017 	ldw	r4,0(r2)
    6cf0:	01400034 	movhi	r5,0
    6cf4:	295a5704 	addi	r5,r5,26972
    6cf8:	00075ec1 	jmpi	75ec <_fwalk>

00006cfc <_malloc_trim_r>:
    6cfc:	defffb04 	addi	sp,sp,-20
    6d00:	dcc00315 	stw	r19,12(sp)
    6d04:	04c00074 	movhi	r19,1
    6d08:	dc800215 	stw	r18,8(sp)
    6d0c:	dc400115 	stw	r17,4(sp)
    6d10:	dc000015 	stw	r16,0(sp)
    6d14:	dfc00415 	stw	ra,16(sp)
    6d18:	2821883a 	mov	r16,r5
    6d1c:	9cc5ff04 	addi	r19,r19,6140
    6d20:	2025883a 	mov	r18,r4
    6d24:	000eb700 	call	eb70 <__malloc_lock>
    6d28:	98800217 	ldw	r2,8(r19)
    6d2c:	14400117 	ldw	r17,4(r2)
    6d30:	00bfff04 	movi	r2,-4
    6d34:	88a2703a 	and	r17,r17,r2
    6d38:	8c21c83a 	sub	r16,r17,r16
    6d3c:	8403fbc4 	addi	r16,r16,4079
    6d40:	8020d33a 	srli	r16,r16,12
    6d44:	0083ffc4 	movi	r2,4095
    6d48:	843fffc4 	addi	r16,r16,-1
    6d4c:	8020933a 	slli	r16,r16,12
    6d50:	1400060e 	bge	r2,r16,6d6c <_malloc_trim_r+0x70>
    6d54:	000b883a 	mov	r5,zero
    6d58:	9009883a 	mov	r4,r18
    6d5c:	000291c0 	call	291c <_sbrk_r>
    6d60:	98c00217 	ldw	r3,8(r19)
    6d64:	1c47883a 	add	r3,r3,r17
    6d68:	10c00a26 	beq	r2,r3,6d94 <_malloc_trim_r+0x98>
    6d6c:	9009883a 	mov	r4,r18
    6d70:	000eb940 	call	eb94 <__malloc_unlock>
    6d74:	0005883a 	mov	r2,zero
    6d78:	dfc00417 	ldw	ra,16(sp)
    6d7c:	dcc00317 	ldw	r19,12(sp)
    6d80:	dc800217 	ldw	r18,8(sp)
    6d84:	dc400117 	ldw	r17,4(sp)
    6d88:	dc000017 	ldw	r16,0(sp)
    6d8c:	dec00504 	addi	sp,sp,20
    6d90:	f800283a 	ret
    6d94:	040bc83a 	sub	r5,zero,r16
    6d98:	9009883a 	mov	r4,r18
    6d9c:	000291c0 	call	291c <_sbrk_r>
    6da0:	00ffffc4 	movi	r3,-1
    6da4:	10c00d26 	beq	r2,r3,6ddc <_malloc_trim_r+0xe0>
    6da8:	00c00074 	movhi	r3,1
    6dac:	18d38f04 	addi	r3,r3,20028
    6db0:	18800017 	ldw	r2,0(r3)
    6db4:	99000217 	ldw	r4,8(r19)
    6db8:	8c23c83a 	sub	r17,r17,r16
    6dbc:	8c400054 	ori	r17,r17,1
    6dc0:	1421c83a 	sub	r16,r2,r16
    6dc4:	24400115 	stw	r17,4(r4)
    6dc8:	9009883a 	mov	r4,r18
    6dcc:	1c000015 	stw	r16,0(r3)
    6dd0:	000eb940 	call	eb94 <__malloc_unlock>
    6dd4:	00800044 	movi	r2,1
    6dd8:	003fe706 	br	6d78 <__alt_data_end+0xff006d78>
    6ddc:	000b883a 	mov	r5,zero
    6de0:	9009883a 	mov	r4,r18
    6de4:	000291c0 	call	291c <_sbrk_r>
    6de8:	99000217 	ldw	r4,8(r19)
    6dec:	014003c4 	movi	r5,15
    6df0:	1107c83a 	sub	r3,r2,r4
    6df4:	28ffdd0e 	bge	r5,r3,6d6c <__alt_data_end+0xff006d6c>
    6df8:	01400074 	movhi	r5,1
    6dfc:	294caa04 	addi	r5,r5,12968
    6e00:	29400017 	ldw	r5,0(r5)
    6e04:	18c00054 	ori	r3,r3,1
    6e08:	20c00115 	stw	r3,4(r4)
    6e0c:	00c00074 	movhi	r3,1
    6e10:	1145c83a 	sub	r2,r2,r5
    6e14:	18d38f04 	addi	r3,r3,20028
    6e18:	18800015 	stw	r2,0(r3)
    6e1c:	003fd306 	br	6d6c <__alt_data_end+0xff006d6c>

00006e20 <_free_r>:
    6e20:	28004126 	beq	r5,zero,6f28 <_free_r+0x108>
    6e24:	defffd04 	addi	sp,sp,-12
    6e28:	dc400115 	stw	r17,4(sp)
    6e2c:	dc000015 	stw	r16,0(sp)
    6e30:	2023883a 	mov	r17,r4
    6e34:	2821883a 	mov	r16,r5
    6e38:	dfc00215 	stw	ra,8(sp)
    6e3c:	000eb700 	call	eb70 <__malloc_lock>
    6e40:	81ffff17 	ldw	r7,-4(r16)
    6e44:	00bfff84 	movi	r2,-2
    6e48:	01000074 	movhi	r4,1
    6e4c:	81bffe04 	addi	r6,r16,-8
    6e50:	3884703a 	and	r2,r7,r2
    6e54:	2105ff04 	addi	r4,r4,6140
    6e58:	308b883a 	add	r5,r6,r2
    6e5c:	2a400117 	ldw	r9,4(r5)
    6e60:	22000217 	ldw	r8,8(r4)
    6e64:	00ffff04 	movi	r3,-4
    6e68:	48c6703a 	and	r3,r9,r3
    6e6c:	2a005726 	beq	r5,r8,6fcc <_free_r+0x1ac>
    6e70:	28c00115 	stw	r3,4(r5)
    6e74:	39c0004c 	andi	r7,r7,1
    6e78:	3800091e 	bne	r7,zero,6ea0 <_free_r+0x80>
    6e7c:	823ffe17 	ldw	r8,-8(r16)
    6e80:	22400204 	addi	r9,r4,8
    6e84:	320dc83a 	sub	r6,r6,r8
    6e88:	31c00217 	ldw	r7,8(r6)
    6e8c:	1205883a 	add	r2,r2,r8
    6e90:	3a406526 	beq	r7,r9,7028 <_free_r+0x208>
    6e94:	32000317 	ldw	r8,12(r6)
    6e98:	3a000315 	stw	r8,12(r7)
    6e9c:	41c00215 	stw	r7,8(r8)
    6ea0:	28cf883a 	add	r7,r5,r3
    6ea4:	39c00117 	ldw	r7,4(r7)
    6ea8:	39c0004c 	andi	r7,r7,1
    6eac:	38003a26 	beq	r7,zero,6f98 <_free_r+0x178>
    6eb0:	10c00054 	ori	r3,r2,1
    6eb4:	30c00115 	stw	r3,4(r6)
    6eb8:	3087883a 	add	r3,r6,r2
    6ebc:	18800015 	stw	r2,0(r3)
    6ec0:	00c07fc4 	movi	r3,511
    6ec4:	18801936 	bltu	r3,r2,6f2c <_free_r+0x10c>
    6ec8:	1004d0fa 	srli	r2,r2,3
    6ecc:	01c00044 	movi	r7,1
    6ed0:	21400117 	ldw	r5,4(r4)
    6ed4:	10c00044 	addi	r3,r2,1
    6ed8:	18c7883a 	add	r3,r3,r3
    6edc:	1005d0ba 	srai	r2,r2,2
    6ee0:	18c7883a 	add	r3,r3,r3
    6ee4:	18c7883a 	add	r3,r3,r3
    6ee8:	1907883a 	add	r3,r3,r4
    6eec:	3884983a 	sll	r2,r7,r2
    6ef0:	19c00017 	ldw	r7,0(r3)
    6ef4:	1a3ffe04 	addi	r8,r3,-8
    6ef8:	1144b03a 	or	r2,r2,r5
    6efc:	32000315 	stw	r8,12(r6)
    6f00:	31c00215 	stw	r7,8(r6)
    6f04:	20800115 	stw	r2,4(r4)
    6f08:	19800015 	stw	r6,0(r3)
    6f0c:	39800315 	stw	r6,12(r7)
    6f10:	8809883a 	mov	r4,r17
    6f14:	dfc00217 	ldw	ra,8(sp)
    6f18:	dc400117 	ldw	r17,4(sp)
    6f1c:	dc000017 	ldw	r16,0(sp)
    6f20:	dec00304 	addi	sp,sp,12
    6f24:	000eb941 	jmpi	eb94 <__malloc_unlock>
    6f28:	f800283a 	ret
    6f2c:	100ad27a 	srli	r5,r2,9
    6f30:	00c00104 	movi	r3,4
    6f34:	19404a36 	bltu	r3,r5,7060 <_free_r+0x240>
    6f38:	100ad1ba 	srli	r5,r2,6
    6f3c:	28c00e44 	addi	r3,r5,57
    6f40:	18c7883a 	add	r3,r3,r3
    6f44:	29400e04 	addi	r5,r5,56
    6f48:	18c7883a 	add	r3,r3,r3
    6f4c:	18c7883a 	add	r3,r3,r3
    6f50:	1909883a 	add	r4,r3,r4
    6f54:	20c00017 	ldw	r3,0(r4)
    6f58:	01c00074 	movhi	r7,1
    6f5c:	213ffe04 	addi	r4,r4,-8
    6f60:	39c5ff04 	addi	r7,r7,6140
    6f64:	20c04426 	beq	r4,r3,7078 <_free_r+0x258>
    6f68:	01ffff04 	movi	r7,-4
    6f6c:	19400117 	ldw	r5,4(r3)
    6f70:	29ca703a 	and	r5,r5,r7
    6f74:	1140022e 	bgeu	r2,r5,6f80 <_free_r+0x160>
    6f78:	18c00217 	ldw	r3,8(r3)
    6f7c:	20fffb1e 	bne	r4,r3,6f6c <__alt_data_end+0xff006f6c>
    6f80:	19000317 	ldw	r4,12(r3)
    6f84:	31000315 	stw	r4,12(r6)
    6f88:	30c00215 	stw	r3,8(r6)
    6f8c:	21800215 	stw	r6,8(r4)
    6f90:	19800315 	stw	r6,12(r3)
    6f94:	003fde06 	br	6f10 <__alt_data_end+0xff006f10>
    6f98:	29c00217 	ldw	r7,8(r5)
    6f9c:	10c5883a 	add	r2,r2,r3
    6fa0:	00c00074 	movhi	r3,1
    6fa4:	18c60104 	addi	r3,r3,6148
    6fa8:	38c03b26 	beq	r7,r3,7098 <_free_r+0x278>
    6fac:	2a000317 	ldw	r8,12(r5)
    6fb0:	11400054 	ori	r5,r2,1
    6fb4:	3087883a 	add	r3,r6,r2
    6fb8:	3a000315 	stw	r8,12(r7)
    6fbc:	41c00215 	stw	r7,8(r8)
    6fc0:	31400115 	stw	r5,4(r6)
    6fc4:	18800015 	stw	r2,0(r3)
    6fc8:	003fbd06 	br	6ec0 <__alt_data_end+0xff006ec0>
    6fcc:	39c0004c 	andi	r7,r7,1
    6fd0:	10c5883a 	add	r2,r2,r3
    6fd4:	3800071e 	bne	r7,zero,6ff4 <_free_r+0x1d4>
    6fd8:	81fffe17 	ldw	r7,-8(r16)
    6fdc:	31cdc83a 	sub	r6,r6,r7
    6fe0:	30c00317 	ldw	r3,12(r6)
    6fe4:	31400217 	ldw	r5,8(r6)
    6fe8:	11c5883a 	add	r2,r2,r7
    6fec:	28c00315 	stw	r3,12(r5)
    6ff0:	19400215 	stw	r5,8(r3)
    6ff4:	10c00054 	ori	r3,r2,1
    6ff8:	30c00115 	stw	r3,4(r6)
    6ffc:	00c00074 	movhi	r3,1
    7000:	18ccab04 	addi	r3,r3,12972
    7004:	18c00017 	ldw	r3,0(r3)
    7008:	21800215 	stw	r6,8(r4)
    700c:	10ffc036 	bltu	r2,r3,6f10 <__alt_data_end+0xff006f10>
    7010:	00800074 	movhi	r2,1
    7014:	10938104 	addi	r2,r2,19972
    7018:	11400017 	ldw	r5,0(r2)
    701c:	8809883a 	mov	r4,r17
    7020:	0006cfc0 	call	6cfc <_malloc_trim_r>
    7024:	003fba06 	br	6f10 <__alt_data_end+0xff006f10>
    7028:	28c9883a 	add	r4,r5,r3
    702c:	21000117 	ldw	r4,4(r4)
    7030:	2100004c 	andi	r4,r4,1
    7034:	2000391e 	bne	r4,zero,711c <_free_r+0x2fc>
    7038:	29c00217 	ldw	r7,8(r5)
    703c:	29000317 	ldw	r4,12(r5)
    7040:	1885883a 	add	r2,r3,r2
    7044:	10c00054 	ori	r3,r2,1
    7048:	39000315 	stw	r4,12(r7)
    704c:	21c00215 	stw	r7,8(r4)
    7050:	30c00115 	stw	r3,4(r6)
    7054:	308d883a 	add	r6,r6,r2
    7058:	30800015 	stw	r2,0(r6)
    705c:	003fac06 	br	6f10 <__alt_data_end+0xff006f10>
    7060:	00c00504 	movi	r3,20
    7064:	19401536 	bltu	r3,r5,70bc <_free_r+0x29c>
    7068:	28c01704 	addi	r3,r5,92
    706c:	18c7883a 	add	r3,r3,r3
    7070:	294016c4 	addi	r5,r5,91
    7074:	003fb406 	br	6f48 <__alt_data_end+0xff006f48>
    7078:	280bd0ba 	srai	r5,r5,2
    707c:	00c00044 	movi	r3,1
    7080:	38800117 	ldw	r2,4(r7)
    7084:	194a983a 	sll	r5,r3,r5
    7088:	2007883a 	mov	r3,r4
    708c:	2884b03a 	or	r2,r5,r2
    7090:	38800115 	stw	r2,4(r7)
    7094:	003fbb06 	br	6f84 <__alt_data_end+0xff006f84>
    7098:	21800515 	stw	r6,20(r4)
    709c:	21800415 	stw	r6,16(r4)
    70a0:	10c00054 	ori	r3,r2,1
    70a4:	31c00315 	stw	r7,12(r6)
    70a8:	31c00215 	stw	r7,8(r6)
    70ac:	30c00115 	stw	r3,4(r6)
    70b0:	308d883a 	add	r6,r6,r2
    70b4:	30800015 	stw	r2,0(r6)
    70b8:	003f9506 	br	6f10 <__alt_data_end+0xff006f10>
    70bc:	00c01504 	movi	r3,84
    70c0:	19400536 	bltu	r3,r5,70d8 <_free_r+0x2b8>
    70c4:	100ad33a 	srli	r5,r2,12
    70c8:	28c01bc4 	addi	r3,r5,111
    70cc:	18c7883a 	add	r3,r3,r3
    70d0:	29401b84 	addi	r5,r5,110
    70d4:	003f9c06 	br	6f48 <__alt_data_end+0xff006f48>
    70d8:	00c05504 	movi	r3,340
    70dc:	19400536 	bltu	r3,r5,70f4 <_free_r+0x2d4>
    70e0:	100ad3fa 	srli	r5,r2,15
    70e4:	28c01e04 	addi	r3,r5,120
    70e8:	18c7883a 	add	r3,r3,r3
    70ec:	29401dc4 	addi	r5,r5,119
    70f0:	003f9506 	br	6f48 <__alt_data_end+0xff006f48>
    70f4:	00c15504 	movi	r3,1364
    70f8:	19400536 	bltu	r3,r5,7110 <_free_r+0x2f0>
    70fc:	100ad4ba 	srli	r5,r2,18
    7100:	28c01f44 	addi	r3,r5,125
    7104:	18c7883a 	add	r3,r3,r3
    7108:	29401f04 	addi	r5,r5,124
    710c:	003f8e06 	br	6f48 <__alt_data_end+0xff006f48>
    7110:	00c03f84 	movi	r3,254
    7114:	01401f84 	movi	r5,126
    7118:	003f8b06 	br	6f48 <__alt_data_end+0xff006f48>
    711c:	10c00054 	ori	r3,r2,1
    7120:	30c00115 	stw	r3,4(r6)
    7124:	308d883a 	add	r6,r6,r2
    7128:	30800015 	stw	r2,0(r6)
    712c:	003f7806 	br	6f10 <__alt_data_end+0xff006f10>

00007130 <__sfvwrite_r>:
    7130:	30800217 	ldw	r2,8(r6)
    7134:	10006726 	beq	r2,zero,72d4 <__sfvwrite_r+0x1a4>
    7138:	28c0030b 	ldhu	r3,12(r5)
    713c:	defff404 	addi	sp,sp,-48
    7140:	dd400715 	stw	r21,28(sp)
    7144:	dd000615 	stw	r20,24(sp)
    7148:	dc000215 	stw	r16,8(sp)
    714c:	dfc00b15 	stw	ra,44(sp)
    7150:	df000a15 	stw	fp,40(sp)
    7154:	ddc00915 	stw	r23,36(sp)
    7158:	dd800815 	stw	r22,32(sp)
    715c:	dcc00515 	stw	r19,20(sp)
    7160:	dc800415 	stw	r18,16(sp)
    7164:	dc400315 	stw	r17,12(sp)
    7168:	1880020c 	andi	r2,r3,8
    716c:	2821883a 	mov	r16,r5
    7170:	202b883a 	mov	r21,r4
    7174:	3029883a 	mov	r20,r6
    7178:	10002726 	beq	r2,zero,7218 <__sfvwrite_r+0xe8>
    717c:	28800417 	ldw	r2,16(r5)
    7180:	10002526 	beq	r2,zero,7218 <__sfvwrite_r+0xe8>
    7184:	1880008c 	andi	r2,r3,2
    7188:	a4400017 	ldw	r17,0(r20)
    718c:	10002a26 	beq	r2,zero,7238 <__sfvwrite_r+0x108>
    7190:	05a00034 	movhi	r22,32768
    7194:	0027883a 	mov	r19,zero
    7198:	0025883a 	mov	r18,zero
    719c:	b5bf0004 	addi	r22,r22,-1024
    71a0:	980d883a 	mov	r6,r19
    71a4:	a809883a 	mov	r4,r21
    71a8:	90004626 	beq	r18,zero,72c4 <__sfvwrite_r+0x194>
    71ac:	900f883a 	mov	r7,r18
    71b0:	b480022e 	bgeu	r22,r18,71bc <__sfvwrite_r+0x8c>
    71b4:	01e00034 	movhi	r7,32768
    71b8:	39ff0004 	addi	r7,r7,-1024
    71bc:	80800917 	ldw	r2,36(r16)
    71c0:	81400717 	ldw	r5,28(r16)
    71c4:	103ee83a 	callr	r2
    71c8:	0080570e 	bge	zero,r2,7328 <__sfvwrite_r+0x1f8>
    71cc:	a0c00217 	ldw	r3,8(r20)
    71d0:	98a7883a 	add	r19,r19,r2
    71d4:	90a5c83a 	sub	r18,r18,r2
    71d8:	1885c83a 	sub	r2,r3,r2
    71dc:	a0800215 	stw	r2,8(r20)
    71e0:	103fef1e 	bne	r2,zero,71a0 <__alt_data_end+0xff0071a0>
    71e4:	0005883a 	mov	r2,zero
    71e8:	dfc00b17 	ldw	ra,44(sp)
    71ec:	df000a17 	ldw	fp,40(sp)
    71f0:	ddc00917 	ldw	r23,36(sp)
    71f4:	dd800817 	ldw	r22,32(sp)
    71f8:	dd400717 	ldw	r21,28(sp)
    71fc:	dd000617 	ldw	r20,24(sp)
    7200:	dcc00517 	ldw	r19,20(sp)
    7204:	dc800417 	ldw	r18,16(sp)
    7208:	dc400317 	ldw	r17,12(sp)
    720c:	dc000217 	ldw	r16,8(sp)
    7210:	dec00c04 	addi	sp,sp,48
    7214:	f800283a 	ret
    7218:	800b883a 	mov	r5,r16
    721c:	a809883a 	mov	r4,r21
    7220:	0004cd80 	call	4cd8 <__swsetup_r>
    7224:	1000eb1e 	bne	r2,zero,75d4 <__sfvwrite_r+0x4a4>
    7228:	80c0030b 	ldhu	r3,12(r16)
    722c:	a4400017 	ldw	r17,0(r20)
    7230:	1880008c 	andi	r2,r3,2
    7234:	103fd61e 	bne	r2,zero,7190 <__alt_data_end+0xff007190>
    7238:	1880004c 	andi	r2,r3,1
    723c:	10003f1e 	bne	r2,zero,733c <__sfvwrite_r+0x20c>
    7240:	0039883a 	mov	fp,zero
    7244:	0025883a 	mov	r18,zero
    7248:	90001a26 	beq	r18,zero,72b4 <__sfvwrite_r+0x184>
    724c:	1880800c 	andi	r2,r3,512
    7250:	84c00217 	ldw	r19,8(r16)
    7254:	10002126 	beq	r2,zero,72dc <__sfvwrite_r+0x1ac>
    7258:	982f883a 	mov	r23,r19
    725c:	94c09336 	bltu	r18,r19,74ac <__sfvwrite_r+0x37c>
    7260:	1881200c 	andi	r2,r3,1152
    7264:	10009e1e 	bne	r2,zero,74e0 <__sfvwrite_r+0x3b0>
    7268:	81000017 	ldw	r4,0(r16)
    726c:	b80d883a 	mov	r6,r23
    7270:	e00b883a 	mov	r5,fp
    7274:	0007af00 	call	7af0 <memmove>
    7278:	80c00217 	ldw	r3,8(r16)
    727c:	81000017 	ldw	r4,0(r16)
    7280:	9005883a 	mov	r2,r18
    7284:	1ce7c83a 	sub	r19,r3,r19
    7288:	25cf883a 	add	r7,r4,r23
    728c:	84c00215 	stw	r19,8(r16)
    7290:	81c00015 	stw	r7,0(r16)
    7294:	a0c00217 	ldw	r3,8(r20)
    7298:	e0b9883a 	add	fp,fp,r2
    729c:	90a5c83a 	sub	r18,r18,r2
    72a0:	18a7c83a 	sub	r19,r3,r2
    72a4:	a4c00215 	stw	r19,8(r20)
    72a8:	983fce26 	beq	r19,zero,71e4 <__alt_data_end+0xff0071e4>
    72ac:	80c0030b 	ldhu	r3,12(r16)
    72b0:	903fe61e 	bne	r18,zero,724c <__alt_data_end+0xff00724c>
    72b4:	8f000017 	ldw	fp,0(r17)
    72b8:	8c800117 	ldw	r18,4(r17)
    72bc:	8c400204 	addi	r17,r17,8
    72c0:	003fe106 	br	7248 <__alt_data_end+0xff007248>
    72c4:	8cc00017 	ldw	r19,0(r17)
    72c8:	8c800117 	ldw	r18,4(r17)
    72cc:	8c400204 	addi	r17,r17,8
    72d0:	003fb306 	br	71a0 <__alt_data_end+0xff0071a0>
    72d4:	0005883a 	mov	r2,zero
    72d8:	f800283a 	ret
    72dc:	81000017 	ldw	r4,0(r16)
    72e0:	80800417 	ldw	r2,16(r16)
    72e4:	11005736 	bltu	r2,r4,7444 <__sfvwrite_r+0x314>
    72e8:	85c00517 	ldw	r23,20(r16)
    72ec:	95c05536 	bltu	r18,r23,7444 <__sfvwrite_r+0x314>
    72f0:	00a00034 	movhi	r2,32768
    72f4:	10bfffc4 	addi	r2,r2,-1
    72f8:	9009883a 	mov	r4,r18
    72fc:	1480012e 	bgeu	r2,r18,7304 <__sfvwrite_r+0x1d4>
    7300:	1009883a 	mov	r4,r2
    7304:	b80b883a 	mov	r5,r23
    7308:	0001cac0 	call	1cac <__divsi3>
    730c:	15cf383a 	mul	r7,r2,r23
    7310:	81400717 	ldw	r5,28(r16)
    7314:	80800917 	ldw	r2,36(r16)
    7318:	e00d883a 	mov	r6,fp
    731c:	a809883a 	mov	r4,r21
    7320:	103ee83a 	callr	r2
    7324:	00bfdb16 	blt	zero,r2,7294 <__alt_data_end+0xff007294>
    7328:	8080030b 	ldhu	r2,12(r16)
    732c:	10801014 	ori	r2,r2,64
    7330:	8080030d 	sth	r2,12(r16)
    7334:	00bfffc4 	movi	r2,-1
    7338:	003fab06 	br	71e8 <__alt_data_end+0xff0071e8>
    733c:	0027883a 	mov	r19,zero
    7340:	0011883a 	mov	r8,zero
    7344:	0039883a 	mov	fp,zero
    7348:	0025883a 	mov	r18,zero
    734c:	90001f26 	beq	r18,zero,73cc <__sfvwrite_r+0x29c>
    7350:	40005a26 	beq	r8,zero,74bc <__sfvwrite_r+0x38c>
    7354:	982d883a 	mov	r22,r19
    7358:	94c0012e 	bgeu	r18,r19,7360 <__sfvwrite_r+0x230>
    735c:	902d883a 	mov	r22,r18
    7360:	81000017 	ldw	r4,0(r16)
    7364:	80800417 	ldw	r2,16(r16)
    7368:	b02f883a 	mov	r23,r22
    736c:	81c00517 	ldw	r7,20(r16)
    7370:	1100032e 	bgeu	r2,r4,7380 <__sfvwrite_r+0x250>
    7374:	80c00217 	ldw	r3,8(r16)
    7378:	38c7883a 	add	r3,r7,r3
    737c:	1d801816 	blt	r3,r22,73e0 <__sfvwrite_r+0x2b0>
    7380:	b1c03e16 	blt	r22,r7,747c <__sfvwrite_r+0x34c>
    7384:	80800917 	ldw	r2,36(r16)
    7388:	81400717 	ldw	r5,28(r16)
    738c:	e00d883a 	mov	r6,fp
    7390:	da000115 	stw	r8,4(sp)
    7394:	a809883a 	mov	r4,r21
    7398:	103ee83a 	callr	r2
    739c:	102f883a 	mov	r23,r2
    73a0:	da000117 	ldw	r8,4(sp)
    73a4:	00bfe00e 	bge	zero,r2,7328 <__alt_data_end+0xff007328>
    73a8:	9de7c83a 	sub	r19,r19,r23
    73ac:	98001f26 	beq	r19,zero,742c <__sfvwrite_r+0x2fc>
    73b0:	a0800217 	ldw	r2,8(r20)
    73b4:	e5f9883a 	add	fp,fp,r23
    73b8:	95e5c83a 	sub	r18,r18,r23
    73bc:	15efc83a 	sub	r23,r2,r23
    73c0:	a5c00215 	stw	r23,8(r20)
    73c4:	b83f8726 	beq	r23,zero,71e4 <__alt_data_end+0xff0071e4>
    73c8:	903fe11e 	bne	r18,zero,7350 <__alt_data_end+0xff007350>
    73cc:	8f000017 	ldw	fp,0(r17)
    73d0:	8c800117 	ldw	r18,4(r17)
    73d4:	0011883a 	mov	r8,zero
    73d8:	8c400204 	addi	r17,r17,8
    73dc:	003fdb06 	br	734c <__alt_data_end+0xff00734c>
    73e0:	180d883a 	mov	r6,r3
    73e4:	e00b883a 	mov	r5,fp
    73e8:	da000115 	stw	r8,4(sp)
    73ec:	d8c00015 	stw	r3,0(sp)
    73f0:	0007af00 	call	7af0 <memmove>
    73f4:	d8c00017 	ldw	r3,0(sp)
    73f8:	80800017 	ldw	r2,0(r16)
    73fc:	800b883a 	mov	r5,r16
    7400:	a809883a 	mov	r4,r21
    7404:	10c5883a 	add	r2,r2,r3
    7408:	80800015 	stw	r2,0(r16)
    740c:	d8c00015 	stw	r3,0(sp)
    7410:	00068d00 	call	68d0 <_fflush_r>
    7414:	d8c00017 	ldw	r3,0(sp)
    7418:	da000117 	ldw	r8,4(sp)
    741c:	103fc21e 	bne	r2,zero,7328 <__alt_data_end+0xff007328>
    7420:	182f883a 	mov	r23,r3
    7424:	9de7c83a 	sub	r19,r19,r23
    7428:	983fe11e 	bne	r19,zero,73b0 <__alt_data_end+0xff0073b0>
    742c:	800b883a 	mov	r5,r16
    7430:	a809883a 	mov	r4,r21
    7434:	00068d00 	call	68d0 <_fflush_r>
    7438:	103fbb1e 	bne	r2,zero,7328 <__alt_data_end+0xff007328>
    743c:	0011883a 	mov	r8,zero
    7440:	003fdb06 	br	73b0 <__alt_data_end+0xff0073b0>
    7444:	94c0012e 	bgeu	r18,r19,744c <__sfvwrite_r+0x31c>
    7448:	9027883a 	mov	r19,r18
    744c:	980d883a 	mov	r6,r19
    7450:	e00b883a 	mov	r5,fp
    7454:	0007af00 	call	7af0 <memmove>
    7458:	80800217 	ldw	r2,8(r16)
    745c:	80c00017 	ldw	r3,0(r16)
    7460:	14c5c83a 	sub	r2,r2,r19
    7464:	1cc7883a 	add	r3,r3,r19
    7468:	80800215 	stw	r2,8(r16)
    746c:	80c00015 	stw	r3,0(r16)
    7470:	10004326 	beq	r2,zero,7580 <__sfvwrite_r+0x450>
    7474:	9805883a 	mov	r2,r19
    7478:	003f8606 	br	7294 <__alt_data_end+0xff007294>
    747c:	b00d883a 	mov	r6,r22
    7480:	e00b883a 	mov	r5,fp
    7484:	da000115 	stw	r8,4(sp)
    7488:	0007af00 	call	7af0 <memmove>
    748c:	80800217 	ldw	r2,8(r16)
    7490:	80c00017 	ldw	r3,0(r16)
    7494:	da000117 	ldw	r8,4(sp)
    7498:	1585c83a 	sub	r2,r2,r22
    749c:	1dad883a 	add	r22,r3,r22
    74a0:	80800215 	stw	r2,8(r16)
    74a4:	85800015 	stw	r22,0(r16)
    74a8:	003fbf06 	br	73a8 <__alt_data_end+0xff0073a8>
    74ac:	81000017 	ldw	r4,0(r16)
    74b0:	9027883a 	mov	r19,r18
    74b4:	902f883a 	mov	r23,r18
    74b8:	003f6c06 	br	726c <__alt_data_end+0xff00726c>
    74bc:	900d883a 	mov	r6,r18
    74c0:	01400284 	movi	r5,10
    74c4:	e009883a 	mov	r4,fp
    74c8:	0007a0c0 	call	7a0c <memchr>
    74cc:	10003e26 	beq	r2,zero,75c8 <__sfvwrite_r+0x498>
    74d0:	10800044 	addi	r2,r2,1
    74d4:	1727c83a 	sub	r19,r2,fp
    74d8:	02000044 	movi	r8,1
    74dc:	003f9d06 	br	7354 <__alt_data_end+0xff007354>
    74e0:	80800517 	ldw	r2,20(r16)
    74e4:	81400417 	ldw	r5,16(r16)
    74e8:	81c00017 	ldw	r7,0(r16)
    74ec:	10a7883a 	add	r19,r2,r2
    74f0:	9885883a 	add	r2,r19,r2
    74f4:	1026d7fa 	srli	r19,r2,31
    74f8:	396dc83a 	sub	r22,r7,r5
    74fc:	b1000044 	addi	r4,r22,1
    7500:	9885883a 	add	r2,r19,r2
    7504:	1027d07a 	srai	r19,r2,1
    7508:	2485883a 	add	r2,r4,r18
    750c:	980d883a 	mov	r6,r19
    7510:	9880022e 	bgeu	r19,r2,751c <__sfvwrite_r+0x3ec>
    7514:	1027883a 	mov	r19,r2
    7518:	100d883a 	mov	r6,r2
    751c:	18c1000c 	andi	r3,r3,1024
    7520:	18001c26 	beq	r3,zero,7594 <__sfvwrite_r+0x464>
    7524:	300b883a 	mov	r5,r6
    7528:	a809883a 	mov	r4,r21
    752c:	0001e880 	call	1e88 <_malloc_r>
    7530:	102f883a 	mov	r23,r2
    7534:	10002926 	beq	r2,zero,75dc <__sfvwrite_r+0x4ac>
    7538:	81400417 	ldw	r5,16(r16)
    753c:	b00d883a 	mov	r6,r22
    7540:	1009883a 	mov	r4,r2
    7544:	00026940 	call	2694 <memcpy>
    7548:	8080030b 	ldhu	r2,12(r16)
    754c:	00fedfc4 	movi	r3,-1153
    7550:	10c4703a 	and	r2,r2,r3
    7554:	10802014 	ori	r2,r2,128
    7558:	8080030d 	sth	r2,12(r16)
    755c:	bd89883a 	add	r4,r23,r22
    7560:	9d8fc83a 	sub	r7,r19,r22
    7564:	85c00415 	stw	r23,16(r16)
    7568:	84c00515 	stw	r19,20(r16)
    756c:	81000015 	stw	r4,0(r16)
    7570:	9027883a 	mov	r19,r18
    7574:	81c00215 	stw	r7,8(r16)
    7578:	902f883a 	mov	r23,r18
    757c:	003f3b06 	br	726c <__alt_data_end+0xff00726c>
    7580:	800b883a 	mov	r5,r16
    7584:	a809883a 	mov	r4,r21
    7588:	00068d00 	call	68d0 <_fflush_r>
    758c:	103fb926 	beq	r2,zero,7474 <__alt_data_end+0xff007474>
    7590:	003f6506 	br	7328 <__alt_data_end+0xff007328>
    7594:	a809883a 	mov	r4,r21
    7598:	0008d700 	call	8d70 <_realloc_r>
    759c:	102f883a 	mov	r23,r2
    75a0:	103fee1e 	bne	r2,zero,755c <__alt_data_end+0xff00755c>
    75a4:	81400417 	ldw	r5,16(r16)
    75a8:	a809883a 	mov	r4,r21
    75ac:	0006e200 	call	6e20 <_free_r>
    75b0:	8080030b 	ldhu	r2,12(r16)
    75b4:	00ffdfc4 	movi	r3,-129
    75b8:	1884703a 	and	r2,r3,r2
    75bc:	00c00304 	movi	r3,12
    75c0:	a8c00015 	stw	r3,0(r21)
    75c4:	003f5906 	br	732c <__alt_data_end+0xff00732c>
    75c8:	94c00044 	addi	r19,r18,1
    75cc:	02000044 	movi	r8,1
    75d0:	003f6006 	br	7354 <__alt_data_end+0xff007354>
    75d4:	00bfffc4 	movi	r2,-1
    75d8:	003f0306 	br	71e8 <__alt_data_end+0xff0071e8>
    75dc:	00800304 	movi	r2,12
    75e0:	a8800015 	stw	r2,0(r21)
    75e4:	8080030b 	ldhu	r2,12(r16)
    75e8:	003f5006 	br	732c <__alt_data_end+0xff00732c>

000075ec <_fwalk>:
    75ec:	defff704 	addi	sp,sp,-36
    75f0:	dd000415 	stw	r20,16(sp)
    75f4:	dfc00815 	stw	ra,32(sp)
    75f8:	ddc00715 	stw	r23,28(sp)
    75fc:	dd800615 	stw	r22,24(sp)
    7600:	dd400515 	stw	r21,20(sp)
    7604:	dcc00315 	stw	r19,12(sp)
    7608:	dc800215 	stw	r18,8(sp)
    760c:	dc400115 	stw	r17,4(sp)
    7610:	dc000015 	stw	r16,0(sp)
    7614:	2500b804 	addi	r20,r4,736
    7618:	a0002326 	beq	r20,zero,76a8 <_fwalk+0xbc>
    761c:	282b883a 	mov	r21,r5
    7620:	002f883a 	mov	r23,zero
    7624:	05800044 	movi	r22,1
    7628:	04ffffc4 	movi	r19,-1
    762c:	a4400117 	ldw	r17,4(r20)
    7630:	a4800217 	ldw	r18,8(r20)
    7634:	8c7fffc4 	addi	r17,r17,-1
    7638:	88000d16 	blt	r17,zero,7670 <_fwalk+0x84>
    763c:	94000304 	addi	r16,r18,12
    7640:	94800384 	addi	r18,r18,14
    7644:	8080000b 	ldhu	r2,0(r16)
    7648:	8c7fffc4 	addi	r17,r17,-1
    764c:	813ffd04 	addi	r4,r16,-12
    7650:	b080042e 	bgeu	r22,r2,7664 <_fwalk+0x78>
    7654:	9080000f 	ldh	r2,0(r18)
    7658:	14c00226 	beq	r2,r19,7664 <_fwalk+0x78>
    765c:	a83ee83a 	callr	r21
    7660:	b8aeb03a 	or	r23,r23,r2
    7664:	84001a04 	addi	r16,r16,104
    7668:	94801a04 	addi	r18,r18,104
    766c:	8cfff51e 	bne	r17,r19,7644 <__alt_data_end+0xff007644>
    7670:	a5000017 	ldw	r20,0(r20)
    7674:	a03fed1e 	bne	r20,zero,762c <__alt_data_end+0xff00762c>
    7678:	b805883a 	mov	r2,r23
    767c:	dfc00817 	ldw	ra,32(sp)
    7680:	ddc00717 	ldw	r23,28(sp)
    7684:	dd800617 	ldw	r22,24(sp)
    7688:	dd400517 	ldw	r21,20(sp)
    768c:	dd000417 	ldw	r20,16(sp)
    7690:	dcc00317 	ldw	r19,12(sp)
    7694:	dc800217 	ldw	r18,8(sp)
    7698:	dc400117 	ldw	r17,4(sp)
    769c:	dc000017 	ldw	r16,0(sp)
    76a0:	dec00904 	addi	sp,sp,36
    76a4:	f800283a 	ret
    76a8:	002f883a 	mov	r23,zero
    76ac:	003ff206 	br	7678 <__alt_data_end+0xff007678>

000076b0 <_fwalk_reent>:
    76b0:	defff704 	addi	sp,sp,-36
    76b4:	dd000415 	stw	r20,16(sp)
    76b8:	dfc00815 	stw	ra,32(sp)
    76bc:	ddc00715 	stw	r23,28(sp)
    76c0:	dd800615 	stw	r22,24(sp)
    76c4:	dd400515 	stw	r21,20(sp)
    76c8:	dcc00315 	stw	r19,12(sp)
    76cc:	dc800215 	stw	r18,8(sp)
    76d0:	dc400115 	stw	r17,4(sp)
    76d4:	dc000015 	stw	r16,0(sp)
    76d8:	2500b804 	addi	r20,r4,736
    76dc:	a0002326 	beq	r20,zero,776c <_fwalk_reent+0xbc>
    76e0:	282b883a 	mov	r21,r5
    76e4:	2027883a 	mov	r19,r4
    76e8:	002f883a 	mov	r23,zero
    76ec:	05800044 	movi	r22,1
    76f0:	04bfffc4 	movi	r18,-1
    76f4:	a4400117 	ldw	r17,4(r20)
    76f8:	a4000217 	ldw	r16,8(r20)
    76fc:	8c7fffc4 	addi	r17,r17,-1
    7700:	88000c16 	blt	r17,zero,7734 <_fwalk_reent+0x84>
    7704:	84000304 	addi	r16,r16,12
    7708:	8080000b 	ldhu	r2,0(r16)
    770c:	8c7fffc4 	addi	r17,r17,-1
    7710:	817ffd04 	addi	r5,r16,-12
    7714:	b080052e 	bgeu	r22,r2,772c <_fwalk_reent+0x7c>
    7718:	8080008f 	ldh	r2,2(r16)
    771c:	9809883a 	mov	r4,r19
    7720:	14800226 	beq	r2,r18,772c <_fwalk_reent+0x7c>
    7724:	a83ee83a 	callr	r21
    7728:	b8aeb03a 	or	r23,r23,r2
    772c:	84001a04 	addi	r16,r16,104
    7730:	8cbff51e 	bne	r17,r18,7708 <__alt_data_end+0xff007708>
    7734:	a5000017 	ldw	r20,0(r20)
    7738:	a03fee1e 	bne	r20,zero,76f4 <__alt_data_end+0xff0076f4>
    773c:	b805883a 	mov	r2,r23
    7740:	dfc00817 	ldw	ra,32(sp)
    7744:	ddc00717 	ldw	r23,28(sp)
    7748:	dd800617 	ldw	r22,24(sp)
    774c:	dd400517 	ldw	r21,20(sp)
    7750:	dd000417 	ldw	r20,16(sp)
    7754:	dcc00317 	ldw	r19,12(sp)
    7758:	dc800217 	ldw	r18,8(sp)
    775c:	dc400117 	ldw	r17,4(sp)
    7760:	dc000017 	ldw	r16,0(sp)
    7764:	dec00904 	addi	sp,sp,36
    7768:	f800283a 	ret
    776c:	002f883a 	mov	r23,zero
    7770:	003ff206 	br	773c <__alt_data_end+0xff00773c>

00007774 <_setlocale_r>:
    7774:	30001b26 	beq	r6,zero,77e4 <_setlocale_r+0x70>
    7778:	01400074 	movhi	r5,1
    777c:	defffe04 	addi	sp,sp,-8
    7780:	29456004 	addi	r5,r5,5504
    7784:	3009883a 	mov	r4,r6
    7788:	dc000015 	stw	r16,0(sp)
    778c:	dfc00115 	stw	ra,4(sp)
    7790:	3021883a 	mov	r16,r6
    7794:	00094840 	call	9484 <strcmp>
    7798:	1000061e 	bne	r2,zero,77b4 <_setlocale_r+0x40>
    779c:	00800074 	movhi	r2,1
    77a0:	10855f04 	addi	r2,r2,5500
    77a4:	dfc00117 	ldw	ra,4(sp)
    77a8:	dc000017 	ldw	r16,0(sp)
    77ac:	dec00204 	addi	sp,sp,8
    77b0:	f800283a 	ret
    77b4:	01400074 	movhi	r5,1
    77b8:	29455f04 	addi	r5,r5,5500
    77bc:	8009883a 	mov	r4,r16
    77c0:	00094840 	call	9484 <strcmp>
    77c4:	103ff526 	beq	r2,zero,779c <__alt_data_end+0xff00779c>
    77c8:	01400074 	movhi	r5,1
    77cc:	29452d04 	addi	r5,r5,5300
    77d0:	8009883a 	mov	r4,r16
    77d4:	00094840 	call	9484 <strcmp>
    77d8:	103ff026 	beq	r2,zero,779c <__alt_data_end+0xff00779c>
    77dc:	0005883a 	mov	r2,zero
    77e0:	003ff006 	br	77a4 <__alt_data_end+0xff0077a4>
    77e4:	00800074 	movhi	r2,1
    77e8:	10855f04 	addi	r2,r2,5500
    77ec:	f800283a 	ret

000077f0 <__locale_charset>:
    77f0:	00800074 	movhi	r2,1
    77f4:	10881204 	addi	r2,r2,8264
    77f8:	f800283a 	ret

000077fc <__locale_mb_cur_max>:
    77fc:	00800074 	movhi	r2,1
    7800:	108cae04 	addi	r2,r2,12984
    7804:	10800017 	ldw	r2,0(r2)
    7808:	f800283a 	ret

0000780c <__locale_msgcharset>:
    780c:	00800074 	movhi	r2,1
    7810:	10880a04 	addi	r2,r2,8232
    7814:	f800283a 	ret

00007818 <__locale_cjk_lang>:
    7818:	0005883a 	mov	r2,zero
    781c:	f800283a 	ret

00007820 <_localeconv_r>:
    7820:	00800074 	movhi	r2,1
    7824:	10881a04 	addi	r2,r2,8296
    7828:	f800283a 	ret

0000782c <setlocale>:
    782c:	00800074 	movhi	r2,1
    7830:	108cad04 	addi	r2,r2,12980
    7834:	280d883a 	mov	r6,r5
    7838:	200b883a 	mov	r5,r4
    783c:	11000017 	ldw	r4,0(r2)
    7840:	00077741 	jmpi	7774 <_setlocale_r>

00007844 <localeconv>:
    7844:	00800074 	movhi	r2,1
    7848:	10881a04 	addi	r2,r2,8296
    784c:	f800283a 	ret

00007850 <__smakebuf_r>:
    7850:	2880030b 	ldhu	r2,12(r5)
    7854:	10c0008c 	andi	r3,r2,2
    7858:	1800411e 	bne	r3,zero,7960 <__smakebuf_r+0x110>
    785c:	deffec04 	addi	sp,sp,-80
    7860:	dc000f15 	stw	r16,60(sp)
    7864:	2821883a 	mov	r16,r5
    7868:	2940038f 	ldh	r5,14(r5)
    786c:	dc401015 	stw	r17,64(sp)
    7870:	dfc01315 	stw	ra,76(sp)
    7874:	dcc01215 	stw	r19,72(sp)
    7878:	dc801115 	stw	r18,68(sp)
    787c:	2023883a 	mov	r17,r4
    7880:	28001c16 	blt	r5,zero,78f4 <__smakebuf_r+0xa4>
    7884:	d80d883a 	mov	r6,sp
    7888:	000b02c0 	call	b02c <_fstat_r>
    788c:	10001816 	blt	r2,zero,78f0 <__smakebuf_r+0xa0>
    7890:	d8800117 	ldw	r2,4(sp)
    7894:	00e00014 	movui	r3,32768
    7898:	10bc000c 	andi	r2,r2,61440
    789c:	14c80020 	cmpeqi	r19,r2,8192
    78a0:	10c03726 	beq	r2,r3,7980 <__smakebuf_r+0x130>
    78a4:	80c0030b 	ldhu	r3,12(r16)
    78a8:	18c20014 	ori	r3,r3,2048
    78ac:	80c0030d 	sth	r3,12(r16)
    78b0:	00c80004 	movi	r3,8192
    78b4:	10c0521e 	bne	r2,r3,7a00 <__smakebuf_r+0x1b0>
    78b8:	8140038f 	ldh	r5,14(r16)
    78bc:	8809883a 	mov	r4,r17
    78c0:	000b0880 	call	b088 <_isatty_r>
    78c4:	10004c26 	beq	r2,zero,79f8 <__smakebuf_r+0x1a8>
    78c8:	8080030b 	ldhu	r2,12(r16)
    78cc:	80c010c4 	addi	r3,r16,67
    78d0:	80c00015 	stw	r3,0(r16)
    78d4:	10800054 	ori	r2,r2,1
    78d8:	8080030d 	sth	r2,12(r16)
    78dc:	00800044 	movi	r2,1
    78e0:	80c00415 	stw	r3,16(r16)
    78e4:	80800515 	stw	r2,20(r16)
    78e8:	04810004 	movi	r18,1024
    78ec:	00000706 	br	790c <__smakebuf_r+0xbc>
    78f0:	8080030b 	ldhu	r2,12(r16)
    78f4:	10c0200c 	andi	r3,r2,128
    78f8:	18001f1e 	bne	r3,zero,7978 <__smakebuf_r+0x128>
    78fc:	04810004 	movi	r18,1024
    7900:	10820014 	ori	r2,r2,2048
    7904:	8080030d 	sth	r2,12(r16)
    7908:	0027883a 	mov	r19,zero
    790c:	900b883a 	mov	r5,r18
    7910:	8809883a 	mov	r4,r17
    7914:	0001e880 	call	1e88 <_malloc_r>
    7918:	10002c26 	beq	r2,zero,79cc <__smakebuf_r+0x17c>
    791c:	80c0030b 	ldhu	r3,12(r16)
    7920:	01000034 	movhi	r4,0
    7924:	211a5904 	addi	r4,r4,26980
    7928:	89000f15 	stw	r4,60(r17)
    792c:	18c02014 	ori	r3,r3,128
    7930:	80c0030d 	sth	r3,12(r16)
    7934:	80800015 	stw	r2,0(r16)
    7938:	80800415 	stw	r2,16(r16)
    793c:	84800515 	stw	r18,20(r16)
    7940:	98001a1e 	bne	r19,zero,79ac <__smakebuf_r+0x15c>
    7944:	dfc01317 	ldw	ra,76(sp)
    7948:	dcc01217 	ldw	r19,72(sp)
    794c:	dc801117 	ldw	r18,68(sp)
    7950:	dc401017 	ldw	r17,64(sp)
    7954:	dc000f17 	ldw	r16,60(sp)
    7958:	dec01404 	addi	sp,sp,80
    795c:	f800283a 	ret
    7960:	288010c4 	addi	r2,r5,67
    7964:	28800015 	stw	r2,0(r5)
    7968:	28800415 	stw	r2,16(r5)
    796c:	00800044 	movi	r2,1
    7970:	28800515 	stw	r2,20(r5)
    7974:	f800283a 	ret
    7978:	04801004 	movi	r18,64
    797c:	003fe006 	br	7900 <__alt_data_end+0xff007900>
    7980:	81000a17 	ldw	r4,40(r16)
    7984:	00c00074 	movhi	r3,1
    7988:	18e50804 	addi	r3,r3,-27616
    798c:	20ffc51e 	bne	r4,r3,78a4 <__alt_data_end+0xff0078a4>
    7990:	8080030b 	ldhu	r2,12(r16)
    7994:	04810004 	movi	r18,1024
    7998:	84801315 	stw	r18,76(r16)
    799c:	1484b03a 	or	r2,r2,r18
    79a0:	8080030d 	sth	r2,12(r16)
    79a4:	0027883a 	mov	r19,zero
    79a8:	003fd806 	br	790c <__alt_data_end+0xff00790c>
    79ac:	8140038f 	ldh	r5,14(r16)
    79b0:	8809883a 	mov	r4,r17
    79b4:	000b0880 	call	b088 <_isatty_r>
    79b8:	103fe226 	beq	r2,zero,7944 <__alt_data_end+0xff007944>
    79bc:	8080030b 	ldhu	r2,12(r16)
    79c0:	10800054 	ori	r2,r2,1
    79c4:	8080030d 	sth	r2,12(r16)
    79c8:	003fde06 	br	7944 <__alt_data_end+0xff007944>
    79cc:	8080030b 	ldhu	r2,12(r16)
    79d0:	10c0800c 	andi	r3,r2,512
    79d4:	183fdb1e 	bne	r3,zero,7944 <__alt_data_end+0xff007944>
    79d8:	10800094 	ori	r2,r2,2
    79dc:	80c010c4 	addi	r3,r16,67
    79e0:	8080030d 	sth	r2,12(r16)
    79e4:	00800044 	movi	r2,1
    79e8:	80c00015 	stw	r3,0(r16)
    79ec:	80c00415 	stw	r3,16(r16)
    79f0:	80800515 	stw	r2,20(r16)
    79f4:	003fd306 	br	7944 <__alt_data_end+0xff007944>
    79f8:	04810004 	movi	r18,1024
    79fc:	003fc306 	br	790c <__alt_data_end+0xff00790c>
    7a00:	0027883a 	mov	r19,zero
    7a04:	04810004 	movi	r18,1024
    7a08:	003fc006 	br	790c <__alt_data_end+0xff00790c>

00007a0c <memchr>:
    7a0c:	208000cc 	andi	r2,r4,3
    7a10:	280f883a 	mov	r7,r5
    7a14:	10003426 	beq	r2,zero,7ae8 <memchr+0xdc>
    7a18:	30bfffc4 	addi	r2,r6,-1
    7a1c:	30001a26 	beq	r6,zero,7a88 <memchr+0x7c>
    7a20:	20c00003 	ldbu	r3,0(r4)
    7a24:	29803fcc 	andi	r6,r5,255
    7a28:	30c0051e 	bne	r6,r3,7a40 <memchr+0x34>
    7a2c:	00001806 	br	7a90 <memchr+0x84>
    7a30:	10001526 	beq	r2,zero,7a88 <memchr+0x7c>
    7a34:	20c00003 	ldbu	r3,0(r4)
    7a38:	10bfffc4 	addi	r2,r2,-1
    7a3c:	30c01426 	beq	r6,r3,7a90 <memchr+0x84>
    7a40:	21000044 	addi	r4,r4,1
    7a44:	20c000cc 	andi	r3,r4,3
    7a48:	183ff91e 	bne	r3,zero,7a30 <__alt_data_end+0xff007a30>
    7a4c:	020000c4 	movi	r8,3
    7a50:	40801136 	bltu	r8,r2,7a98 <memchr+0x8c>
    7a54:	10000c26 	beq	r2,zero,7a88 <memchr+0x7c>
    7a58:	20c00003 	ldbu	r3,0(r4)
    7a5c:	29403fcc 	andi	r5,r5,255
    7a60:	28c00b26 	beq	r5,r3,7a90 <memchr+0x84>
    7a64:	20c00044 	addi	r3,r4,1
    7a68:	39803fcc 	andi	r6,r7,255
    7a6c:	2089883a 	add	r4,r4,r2
    7a70:	00000306 	br	7a80 <memchr+0x74>
    7a74:	18c00044 	addi	r3,r3,1
    7a78:	197fffc3 	ldbu	r5,-1(r3)
    7a7c:	31400526 	beq	r6,r5,7a94 <memchr+0x88>
    7a80:	1805883a 	mov	r2,r3
    7a84:	20fffb1e 	bne	r4,r3,7a74 <__alt_data_end+0xff007a74>
    7a88:	0005883a 	mov	r2,zero
    7a8c:	f800283a 	ret
    7a90:	2005883a 	mov	r2,r4
    7a94:	f800283a 	ret
    7a98:	28c03fcc 	andi	r3,r5,255
    7a9c:	1812923a 	slli	r9,r3,8
    7aa0:	02ffbff4 	movhi	r11,65279
    7aa4:	02a02074 	movhi	r10,32897
    7aa8:	48d2b03a 	or	r9,r9,r3
    7aac:	4806943a 	slli	r3,r9,16
    7ab0:	5affbfc4 	addi	r11,r11,-257
    7ab4:	52a02004 	addi	r10,r10,-32640
    7ab8:	48d2b03a 	or	r9,r9,r3
    7abc:	20c00017 	ldw	r3,0(r4)
    7ac0:	48c6f03a 	xor	r3,r9,r3
    7ac4:	1acd883a 	add	r6,r3,r11
    7ac8:	00c6303a 	nor	r3,zero,r3
    7acc:	30c6703a 	and	r3,r6,r3
    7ad0:	1a86703a 	and	r3,r3,r10
    7ad4:	183fe01e 	bne	r3,zero,7a58 <__alt_data_end+0xff007a58>
    7ad8:	10bfff04 	addi	r2,r2,-4
    7adc:	21000104 	addi	r4,r4,4
    7ae0:	40bff636 	bltu	r8,r2,7abc <__alt_data_end+0xff007abc>
    7ae4:	003fdb06 	br	7a54 <__alt_data_end+0xff007a54>
    7ae8:	3005883a 	mov	r2,r6
    7aec:	003fd706 	br	7a4c <__alt_data_end+0xff007a4c>

00007af0 <memmove>:
    7af0:	2005883a 	mov	r2,r4
    7af4:	29000b2e 	bgeu	r5,r4,7b24 <memmove+0x34>
    7af8:	298f883a 	add	r7,r5,r6
    7afc:	21c0092e 	bgeu	r4,r7,7b24 <memmove+0x34>
    7b00:	2187883a 	add	r3,r4,r6
    7b04:	198bc83a 	sub	r5,r3,r6
    7b08:	30004826 	beq	r6,zero,7c2c <memmove+0x13c>
    7b0c:	39ffffc4 	addi	r7,r7,-1
    7b10:	39000003 	ldbu	r4,0(r7)
    7b14:	18ffffc4 	addi	r3,r3,-1
    7b18:	19000005 	stb	r4,0(r3)
    7b1c:	28fffb1e 	bne	r5,r3,7b0c <__alt_data_end+0xff007b0c>
    7b20:	f800283a 	ret
    7b24:	00c003c4 	movi	r3,15
    7b28:	1980412e 	bgeu	r3,r6,7c30 <memmove+0x140>
    7b2c:	2886b03a 	or	r3,r5,r2
    7b30:	18c000cc 	andi	r3,r3,3
    7b34:	1800401e 	bne	r3,zero,7c38 <memmove+0x148>
    7b38:	33fffc04 	addi	r15,r6,-16
    7b3c:	781ed13a 	srli	r15,r15,4
    7b40:	28c00104 	addi	r3,r5,4
    7b44:	13400104 	addi	r13,r2,4
    7b48:	781c913a 	slli	r14,r15,4
    7b4c:	2b000204 	addi	r12,r5,8
    7b50:	12c00204 	addi	r11,r2,8
    7b54:	73800504 	addi	r14,r14,20
    7b58:	2a800304 	addi	r10,r5,12
    7b5c:	12400304 	addi	r9,r2,12
    7b60:	2b9d883a 	add	r14,r5,r14
    7b64:	2811883a 	mov	r8,r5
    7b68:	100f883a 	mov	r7,r2
    7b6c:	41000017 	ldw	r4,0(r8)
    7b70:	39c00404 	addi	r7,r7,16
    7b74:	18c00404 	addi	r3,r3,16
    7b78:	393ffc15 	stw	r4,-16(r7)
    7b7c:	193ffc17 	ldw	r4,-16(r3)
    7b80:	6b400404 	addi	r13,r13,16
    7b84:	5ac00404 	addi	r11,r11,16
    7b88:	693ffc15 	stw	r4,-16(r13)
    7b8c:	61000017 	ldw	r4,0(r12)
    7b90:	4a400404 	addi	r9,r9,16
    7b94:	42000404 	addi	r8,r8,16
    7b98:	593ffc15 	stw	r4,-16(r11)
    7b9c:	51000017 	ldw	r4,0(r10)
    7ba0:	63000404 	addi	r12,r12,16
    7ba4:	52800404 	addi	r10,r10,16
    7ba8:	493ffc15 	stw	r4,-16(r9)
    7bac:	1bbfef1e 	bne	r3,r14,7b6c <__alt_data_end+0xff007b6c>
    7bb0:	79000044 	addi	r4,r15,1
    7bb4:	2008913a 	slli	r4,r4,4
    7bb8:	328003cc 	andi	r10,r6,15
    7bbc:	02c000c4 	movi	r11,3
    7bc0:	1107883a 	add	r3,r2,r4
    7bc4:	290b883a 	add	r5,r5,r4
    7bc8:	5a801e2e 	bgeu	r11,r10,7c44 <memmove+0x154>
    7bcc:	1813883a 	mov	r9,r3
    7bd0:	2811883a 	mov	r8,r5
    7bd4:	500f883a 	mov	r7,r10
    7bd8:	41000017 	ldw	r4,0(r8)
    7bdc:	4a400104 	addi	r9,r9,4
    7be0:	39ffff04 	addi	r7,r7,-4
    7be4:	493fff15 	stw	r4,-4(r9)
    7be8:	42000104 	addi	r8,r8,4
    7bec:	59fffa36 	bltu	r11,r7,7bd8 <__alt_data_end+0xff007bd8>
    7bf0:	513fff04 	addi	r4,r10,-4
    7bf4:	2008d0ba 	srli	r4,r4,2
    7bf8:	318000cc 	andi	r6,r6,3
    7bfc:	21000044 	addi	r4,r4,1
    7c00:	2109883a 	add	r4,r4,r4
    7c04:	2109883a 	add	r4,r4,r4
    7c08:	1907883a 	add	r3,r3,r4
    7c0c:	290b883a 	add	r5,r5,r4
    7c10:	30000b26 	beq	r6,zero,7c40 <memmove+0x150>
    7c14:	198d883a 	add	r6,r3,r6
    7c18:	29c00003 	ldbu	r7,0(r5)
    7c1c:	18c00044 	addi	r3,r3,1
    7c20:	29400044 	addi	r5,r5,1
    7c24:	19ffffc5 	stb	r7,-1(r3)
    7c28:	19bffb1e 	bne	r3,r6,7c18 <__alt_data_end+0xff007c18>
    7c2c:	f800283a 	ret
    7c30:	1007883a 	mov	r3,r2
    7c34:	003ff606 	br	7c10 <__alt_data_end+0xff007c10>
    7c38:	1007883a 	mov	r3,r2
    7c3c:	003ff506 	br	7c14 <__alt_data_end+0xff007c14>
    7c40:	f800283a 	ret
    7c44:	500d883a 	mov	r6,r10
    7c48:	003ff106 	br	7c10 <__alt_data_end+0xff007c10>

00007c4c <memset>:
    7c4c:	20c000cc 	andi	r3,r4,3
    7c50:	2005883a 	mov	r2,r4
    7c54:	18004426 	beq	r3,zero,7d68 <memset+0x11c>
    7c58:	31ffffc4 	addi	r7,r6,-1
    7c5c:	30004026 	beq	r6,zero,7d60 <memset+0x114>
    7c60:	2813883a 	mov	r9,r5
    7c64:	200d883a 	mov	r6,r4
    7c68:	2007883a 	mov	r3,r4
    7c6c:	00000406 	br	7c80 <memset+0x34>
    7c70:	3a3fffc4 	addi	r8,r7,-1
    7c74:	31800044 	addi	r6,r6,1
    7c78:	38003926 	beq	r7,zero,7d60 <memset+0x114>
    7c7c:	400f883a 	mov	r7,r8
    7c80:	18c00044 	addi	r3,r3,1
    7c84:	32400005 	stb	r9,0(r6)
    7c88:	1a0000cc 	andi	r8,r3,3
    7c8c:	403ff81e 	bne	r8,zero,7c70 <__alt_data_end+0xff007c70>
    7c90:	010000c4 	movi	r4,3
    7c94:	21c02d2e 	bgeu	r4,r7,7d4c <memset+0x100>
    7c98:	29003fcc 	andi	r4,r5,255
    7c9c:	200c923a 	slli	r6,r4,8
    7ca0:	3108b03a 	or	r4,r6,r4
    7ca4:	200c943a 	slli	r6,r4,16
    7ca8:	218cb03a 	or	r6,r4,r6
    7cac:	010003c4 	movi	r4,15
    7cb0:	21c0182e 	bgeu	r4,r7,7d14 <memset+0xc8>
    7cb4:	3b3ffc04 	addi	r12,r7,-16
    7cb8:	6018d13a 	srli	r12,r12,4
    7cbc:	1a000104 	addi	r8,r3,4
    7cc0:	1ac00204 	addi	r11,r3,8
    7cc4:	6008913a 	slli	r4,r12,4
    7cc8:	1a800304 	addi	r10,r3,12
    7ccc:	1813883a 	mov	r9,r3
    7cd0:	21000504 	addi	r4,r4,20
    7cd4:	1909883a 	add	r4,r3,r4
    7cd8:	49800015 	stw	r6,0(r9)
    7cdc:	41800015 	stw	r6,0(r8)
    7ce0:	59800015 	stw	r6,0(r11)
    7ce4:	51800015 	stw	r6,0(r10)
    7ce8:	42000404 	addi	r8,r8,16
    7cec:	4a400404 	addi	r9,r9,16
    7cf0:	5ac00404 	addi	r11,r11,16
    7cf4:	52800404 	addi	r10,r10,16
    7cf8:	413ff71e 	bne	r8,r4,7cd8 <__alt_data_end+0xff007cd8>
    7cfc:	63000044 	addi	r12,r12,1
    7d00:	6018913a 	slli	r12,r12,4
    7d04:	39c003cc 	andi	r7,r7,15
    7d08:	010000c4 	movi	r4,3
    7d0c:	1b07883a 	add	r3,r3,r12
    7d10:	21c00e2e 	bgeu	r4,r7,7d4c <memset+0x100>
    7d14:	1813883a 	mov	r9,r3
    7d18:	3811883a 	mov	r8,r7
    7d1c:	010000c4 	movi	r4,3
    7d20:	49800015 	stw	r6,0(r9)
    7d24:	423fff04 	addi	r8,r8,-4
    7d28:	4a400104 	addi	r9,r9,4
    7d2c:	223ffc36 	bltu	r4,r8,7d20 <__alt_data_end+0xff007d20>
    7d30:	393fff04 	addi	r4,r7,-4
    7d34:	2008d0ba 	srli	r4,r4,2
    7d38:	39c000cc 	andi	r7,r7,3
    7d3c:	21000044 	addi	r4,r4,1
    7d40:	2109883a 	add	r4,r4,r4
    7d44:	2109883a 	add	r4,r4,r4
    7d48:	1907883a 	add	r3,r3,r4
    7d4c:	38000526 	beq	r7,zero,7d64 <memset+0x118>
    7d50:	19cf883a 	add	r7,r3,r7
    7d54:	19400005 	stb	r5,0(r3)
    7d58:	18c00044 	addi	r3,r3,1
    7d5c:	38fffd1e 	bne	r7,r3,7d54 <__alt_data_end+0xff007d54>
    7d60:	f800283a 	ret
    7d64:	f800283a 	ret
    7d68:	2007883a 	mov	r3,r4
    7d6c:	300f883a 	mov	r7,r6
    7d70:	003fc706 	br	7c90 <__alt_data_end+0xff007c90>

00007d74 <_Balloc>:
    7d74:	20801317 	ldw	r2,76(r4)
    7d78:	defffc04 	addi	sp,sp,-16
    7d7c:	dc400115 	stw	r17,4(sp)
    7d80:	dc000015 	stw	r16,0(sp)
    7d84:	dfc00315 	stw	ra,12(sp)
    7d88:	dc800215 	stw	r18,8(sp)
    7d8c:	2023883a 	mov	r17,r4
    7d90:	2821883a 	mov	r16,r5
    7d94:	10000f26 	beq	r2,zero,7dd4 <_Balloc+0x60>
    7d98:	8407883a 	add	r3,r16,r16
    7d9c:	18c7883a 	add	r3,r3,r3
    7da0:	10c7883a 	add	r3,r2,r3
    7da4:	18800017 	ldw	r2,0(r3)
    7da8:	10001126 	beq	r2,zero,7df0 <_Balloc+0x7c>
    7dac:	11000017 	ldw	r4,0(r2)
    7db0:	19000015 	stw	r4,0(r3)
    7db4:	10000415 	stw	zero,16(r2)
    7db8:	10000315 	stw	zero,12(r2)
    7dbc:	dfc00317 	ldw	ra,12(sp)
    7dc0:	dc800217 	ldw	r18,8(sp)
    7dc4:	dc400117 	ldw	r17,4(sp)
    7dc8:	dc000017 	ldw	r16,0(sp)
    7dcc:	dec00404 	addi	sp,sp,16
    7dd0:	f800283a 	ret
    7dd4:	01800844 	movi	r6,33
    7dd8:	01400104 	movi	r5,4
    7ddc:	000ac5c0 	call	ac5c <_calloc_r>
    7de0:	88801315 	stw	r2,76(r17)
    7de4:	103fec1e 	bne	r2,zero,7d98 <__alt_data_end+0xff007d98>
    7de8:	0005883a 	mov	r2,zero
    7dec:	003ff306 	br	7dbc <__alt_data_end+0xff007dbc>
    7df0:	01400044 	movi	r5,1
    7df4:	2c24983a 	sll	r18,r5,r16
    7df8:	8809883a 	mov	r4,r17
    7dfc:	91800144 	addi	r6,r18,5
    7e00:	318d883a 	add	r6,r6,r6
    7e04:	318d883a 	add	r6,r6,r6
    7e08:	000ac5c0 	call	ac5c <_calloc_r>
    7e0c:	103ff626 	beq	r2,zero,7de8 <__alt_data_end+0xff007de8>
    7e10:	14000115 	stw	r16,4(r2)
    7e14:	14800215 	stw	r18,8(r2)
    7e18:	003fe606 	br	7db4 <__alt_data_end+0xff007db4>

00007e1c <_Bfree>:
    7e1c:	28000826 	beq	r5,zero,7e40 <_Bfree+0x24>
    7e20:	28c00117 	ldw	r3,4(r5)
    7e24:	20801317 	ldw	r2,76(r4)
    7e28:	18c7883a 	add	r3,r3,r3
    7e2c:	18c7883a 	add	r3,r3,r3
    7e30:	10c5883a 	add	r2,r2,r3
    7e34:	10c00017 	ldw	r3,0(r2)
    7e38:	28c00015 	stw	r3,0(r5)
    7e3c:	11400015 	stw	r5,0(r2)
    7e40:	f800283a 	ret

00007e44 <__multadd>:
    7e44:	defffa04 	addi	sp,sp,-24
    7e48:	dc800315 	stw	r18,12(sp)
    7e4c:	dc400215 	stw	r17,8(sp)
    7e50:	dc000115 	stw	r16,4(sp)
    7e54:	2823883a 	mov	r17,r5
    7e58:	2c000417 	ldw	r16,16(r5)
    7e5c:	dfc00515 	stw	ra,20(sp)
    7e60:	dcc00415 	stw	r19,16(sp)
    7e64:	2025883a 	mov	r18,r4
    7e68:	29400504 	addi	r5,r5,20
    7e6c:	0011883a 	mov	r8,zero
    7e70:	28c00017 	ldw	r3,0(r5)
    7e74:	29400104 	addi	r5,r5,4
    7e78:	42000044 	addi	r8,r8,1
    7e7c:	18bfffcc 	andi	r2,r3,65535
    7e80:	1185383a 	mul	r2,r2,r6
    7e84:	1806d43a 	srli	r3,r3,16
    7e88:	11cf883a 	add	r7,r2,r7
    7e8c:	3808d43a 	srli	r4,r7,16
    7e90:	1987383a 	mul	r3,r3,r6
    7e94:	38bfffcc 	andi	r2,r7,65535
    7e98:	1907883a 	add	r3,r3,r4
    7e9c:	1808943a 	slli	r4,r3,16
    7ea0:	180ed43a 	srli	r7,r3,16
    7ea4:	2085883a 	add	r2,r4,r2
    7ea8:	28bfff15 	stw	r2,-4(r5)
    7eac:	443ff016 	blt	r8,r16,7e70 <__alt_data_end+0xff007e70>
    7eb0:	38000926 	beq	r7,zero,7ed8 <__multadd+0x94>
    7eb4:	88800217 	ldw	r2,8(r17)
    7eb8:	80800f0e 	bge	r16,r2,7ef8 <__multadd+0xb4>
    7ebc:	80800144 	addi	r2,r16,5
    7ec0:	1085883a 	add	r2,r2,r2
    7ec4:	1085883a 	add	r2,r2,r2
    7ec8:	8885883a 	add	r2,r17,r2
    7ecc:	11c00015 	stw	r7,0(r2)
    7ed0:	84000044 	addi	r16,r16,1
    7ed4:	8c000415 	stw	r16,16(r17)
    7ed8:	8805883a 	mov	r2,r17
    7edc:	dfc00517 	ldw	ra,20(sp)
    7ee0:	dcc00417 	ldw	r19,16(sp)
    7ee4:	dc800317 	ldw	r18,12(sp)
    7ee8:	dc400217 	ldw	r17,8(sp)
    7eec:	dc000117 	ldw	r16,4(sp)
    7ef0:	dec00604 	addi	sp,sp,24
    7ef4:	f800283a 	ret
    7ef8:	89400117 	ldw	r5,4(r17)
    7efc:	9009883a 	mov	r4,r18
    7f00:	d9c00015 	stw	r7,0(sp)
    7f04:	29400044 	addi	r5,r5,1
    7f08:	0007d740 	call	7d74 <_Balloc>
    7f0c:	89800417 	ldw	r6,16(r17)
    7f10:	89400304 	addi	r5,r17,12
    7f14:	11000304 	addi	r4,r2,12
    7f18:	31800084 	addi	r6,r6,2
    7f1c:	318d883a 	add	r6,r6,r6
    7f20:	318d883a 	add	r6,r6,r6
    7f24:	1027883a 	mov	r19,r2
    7f28:	00026940 	call	2694 <memcpy>
    7f2c:	d9c00017 	ldw	r7,0(sp)
    7f30:	88000a26 	beq	r17,zero,7f5c <__multadd+0x118>
    7f34:	88c00117 	ldw	r3,4(r17)
    7f38:	90801317 	ldw	r2,76(r18)
    7f3c:	18c7883a 	add	r3,r3,r3
    7f40:	18c7883a 	add	r3,r3,r3
    7f44:	10c5883a 	add	r2,r2,r3
    7f48:	10c00017 	ldw	r3,0(r2)
    7f4c:	88c00015 	stw	r3,0(r17)
    7f50:	14400015 	stw	r17,0(r2)
    7f54:	9823883a 	mov	r17,r19
    7f58:	003fd806 	br	7ebc <__alt_data_end+0xff007ebc>
    7f5c:	9823883a 	mov	r17,r19
    7f60:	003fd606 	br	7ebc <__alt_data_end+0xff007ebc>

00007f64 <__s2b>:
    7f64:	defff904 	addi	sp,sp,-28
    7f68:	dc400115 	stw	r17,4(sp)
    7f6c:	dc000015 	stw	r16,0(sp)
    7f70:	2023883a 	mov	r17,r4
    7f74:	2821883a 	mov	r16,r5
    7f78:	39000204 	addi	r4,r7,8
    7f7c:	01400244 	movi	r5,9
    7f80:	dcc00315 	stw	r19,12(sp)
    7f84:	dc800215 	stw	r18,8(sp)
    7f88:	dfc00615 	stw	ra,24(sp)
    7f8c:	dd400515 	stw	r21,20(sp)
    7f90:	dd000415 	stw	r20,16(sp)
    7f94:	3825883a 	mov	r18,r7
    7f98:	3027883a 	mov	r19,r6
    7f9c:	0001cac0 	call	1cac <__divsi3>
    7fa0:	00c00044 	movi	r3,1
    7fa4:	000b883a 	mov	r5,zero
    7fa8:	1880030e 	bge	r3,r2,7fb8 <__s2b+0x54>
    7fac:	18c7883a 	add	r3,r3,r3
    7fb0:	29400044 	addi	r5,r5,1
    7fb4:	18bffd16 	blt	r3,r2,7fac <__alt_data_end+0xff007fac>
    7fb8:	8809883a 	mov	r4,r17
    7fbc:	0007d740 	call	7d74 <_Balloc>
    7fc0:	d8c00717 	ldw	r3,28(sp)
    7fc4:	10c00515 	stw	r3,20(r2)
    7fc8:	00c00044 	movi	r3,1
    7fcc:	10c00415 	stw	r3,16(r2)
    7fd0:	00c00244 	movi	r3,9
    7fd4:	1cc0210e 	bge	r3,r19,805c <__s2b+0xf8>
    7fd8:	80eb883a 	add	r21,r16,r3
    7fdc:	a829883a 	mov	r20,r21
    7fe0:	84e1883a 	add	r16,r16,r19
    7fe4:	a1c00007 	ldb	r7,0(r20)
    7fe8:	01800284 	movi	r6,10
    7fec:	a5000044 	addi	r20,r20,1
    7ff0:	100b883a 	mov	r5,r2
    7ff4:	39fff404 	addi	r7,r7,-48
    7ff8:	8809883a 	mov	r4,r17
    7ffc:	0007e440 	call	7e44 <__multadd>
    8000:	a43ff81e 	bne	r20,r16,7fe4 <__alt_data_end+0xff007fe4>
    8004:	ace1883a 	add	r16,r21,r19
    8008:	843ffe04 	addi	r16,r16,-8
    800c:	9c800a0e 	bge	r19,r18,8038 <__s2b+0xd4>
    8010:	94e5c83a 	sub	r18,r18,r19
    8014:	84a5883a 	add	r18,r16,r18
    8018:	81c00007 	ldb	r7,0(r16)
    801c:	01800284 	movi	r6,10
    8020:	84000044 	addi	r16,r16,1
    8024:	100b883a 	mov	r5,r2
    8028:	39fff404 	addi	r7,r7,-48
    802c:	8809883a 	mov	r4,r17
    8030:	0007e440 	call	7e44 <__multadd>
    8034:	84bff81e 	bne	r16,r18,8018 <__alt_data_end+0xff008018>
    8038:	dfc00617 	ldw	ra,24(sp)
    803c:	dd400517 	ldw	r21,20(sp)
    8040:	dd000417 	ldw	r20,16(sp)
    8044:	dcc00317 	ldw	r19,12(sp)
    8048:	dc800217 	ldw	r18,8(sp)
    804c:	dc400117 	ldw	r17,4(sp)
    8050:	dc000017 	ldw	r16,0(sp)
    8054:	dec00704 	addi	sp,sp,28
    8058:	f800283a 	ret
    805c:	84000284 	addi	r16,r16,10
    8060:	1827883a 	mov	r19,r3
    8064:	003fe906 	br	800c <__alt_data_end+0xff00800c>

00008068 <__hi0bits>:
    8068:	20bfffec 	andhi	r2,r4,65535
    806c:	1000141e 	bne	r2,zero,80c0 <__hi0bits+0x58>
    8070:	2008943a 	slli	r4,r4,16
    8074:	00800404 	movi	r2,16
    8078:	20ffc02c 	andhi	r3,r4,65280
    807c:	1800021e 	bne	r3,zero,8088 <__hi0bits+0x20>
    8080:	2008923a 	slli	r4,r4,8
    8084:	10800204 	addi	r2,r2,8
    8088:	20fc002c 	andhi	r3,r4,61440
    808c:	1800021e 	bne	r3,zero,8098 <__hi0bits+0x30>
    8090:	2008913a 	slli	r4,r4,4
    8094:	10800104 	addi	r2,r2,4
    8098:	20f0002c 	andhi	r3,r4,49152
    809c:	1800031e 	bne	r3,zero,80ac <__hi0bits+0x44>
    80a0:	2109883a 	add	r4,r4,r4
    80a4:	10800084 	addi	r2,r2,2
    80a8:	2109883a 	add	r4,r4,r4
    80ac:	20000316 	blt	r4,zero,80bc <__hi0bits+0x54>
    80b0:	2110002c 	andhi	r4,r4,16384
    80b4:	2000041e 	bne	r4,zero,80c8 <__hi0bits+0x60>
    80b8:	00800804 	movi	r2,32
    80bc:	f800283a 	ret
    80c0:	0005883a 	mov	r2,zero
    80c4:	003fec06 	br	8078 <__alt_data_end+0xff008078>
    80c8:	10800044 	addi	r2,r2,1
    80cc:	f800283a 	ret

000080d0 <__lo0bits>:
    80d0:	20c00017 	ldw	r3,0(r4)
    80d4:	188001cc 	andi	r2,r3,7
    80d8:	10000826 	beq	r2,zero,80fc <__lo0bits+0x2c>
    80dc:	1880004c 	andi	r2,r3,1
    80e0:	1000211e 	bne	r2,zero,8168 <__lo0bits+0x98>
    80e4:	1880008c 	andi	r2,r3,2
    80e8:	1000211e 	bne	r2,zero,8170 <__lo0bits+0xa0>
    80ec:	1806d0ba 	srli	r3,r3,2
    80f0:	00800084 	movi	r2,2
    80f4:	20c00015 	stw	r3,0(r4)
    80f8:	f800283a 	ret
    80fc:	18bfffcc 	andi	r2,r3,65535
    8100:	10001326 	beq	r2,zero,8150 <__lo0bits+0x80>
    8104:	0005883a 	mov	r2,zero
    8108:	19403fcc 	andi	r5,r3,255
    810c:	2800021e 	bne	r5,zero,8118 <__lo0bits+0x48>
    8110:	1806d23a 	srli	r3,r3,8
    8114:	10800204 	addi	r2,r2,8
    8118:	194003cc 	andi	r5,r3,15
    811c:	2800021e 	bne	r5,zero,8128 <__lo0bits+0x58>
    8120:	1806d13a 	srli	r3,r3,4
    8124:	10800104 	addi	r2,r2,4
    8128:	194000cc 	andi	r5,r3,3
    812c:	2800021e 	bne	r5,zero,8138 <__lo0bits+0x68>
    8130:	1806d0ba 	srli	r3,r3,2
    8134:	10800084 	addi	r2,r2,2
    8138:	1940004c 	andi	r5,r3,1
    813c:	2800081e 	bne	r5,zero,8160 <__lo0bits+0x90>
    8140:	1806d07a 	srli	r3,r3,1
    8144:	1800051e 	bne	r3,zero,815c <__lo0bits+0x8c>
    8148:	00800804 	movi	r2,32
    814c:	f800283a 	ret
    8150:	1806d43a 	srli	r3,r3,16
    8154:	00800404 	movi	r2,16
    8158:	003feb06 	br	8108 <__alt_data_end+0xff008108>
    815c:	10800044 	addi	r2,r2,1
    8160:	20c00015 	stw	r3,0(r4)
    8164:	f800283a 	ret
    8168:	0005883a 	mov	r2,zero
    816c:	f800283a 	ret
    8170:	1806d07a 	srli	r3,r3,1
    8174:	00800044 	movi	r2,1
    8178:	20c00015 	stw	r3,0(r4)
    817c:	f800283a 	ret

00008180 <__i2b>:
    8180:	defffd04 	addi	sp,sp,-12
    8184:	dc000015 	stw	r16,0(sp)
    8188:	04000044 	movi	r16,1
    818c:	dc400115 	stw	r17,4(sp)
    8190:	2823883a 	mov	r17,r5
    8194:	800b883a 	mov	r5,r16
    8198:	dfc00215 	stw	ra,8(sp)
    819c:	0007d740 	call	7d74 <_Balloc>
    81a0:	14400515 	stw	r17,20(r2)
    81a4:	14000415 	stw	r16,16(r2)
    81a8:	dfc00217 	ldw	ra,8(sp)
    81ac:	dc400117 	ldw	r17,4(sp)
    81b0:	dc000017 	ldw	r16,0(sp)
    81b4:	dec00304 	addi	sp,sp,12
    81b8:	f800283a 	ret

000081bc <__multiply>:
    81bc:	defffa04 	addi	sp,sp,-24
    81c0:	dcc00315 	stw	r19,12(sp)
    81c4:	dc800215 	stw	r18,8(sp)
    81c8:	34c00417 	ldw	r19,16(r6)
    81cc:	2c800417 	ldw	r18,16(r5)
    81d0:	dd000415 	stw	r20,16(sp)
    81d4:	dc400115 	stw	r17,4(sp)
    81d8:	dfc00515 	stw	ra,20(sp)
    81dc:	dc000015 	stw	r16,0(sp)
    81e0:	2829883a 	mov	r20,r5
    81e4:	3023883a 	mov	r17,r6
    81e8:	94c0050e 	bge	r18,r19,8200 <__multiply+0x44>
    81ec:	9007883a 	mov	r3,r18
    81f0:	3029883a 	mov	r20,r6
    81f4:	9825883a 	mov	r18,r19
    81f8:	2823883a 	mov	r17,r5
    81fc:	1827883a 	mov	r19,r3
    8200:	a0800217 	ldw	r2,8(r20)
    8204:	94e1883a 	add	r16,r18,r19
    8208:	a1400117 	ldw	r5,4(r20)
    820c:	1400010e 	bge	r2,r16,8214 <__multiply+0x58>
    8210:	29400044 	addi	r5,r5,1
    8214:	0007d740 	call	7d74 <_Balloc>
    8218:	8415883a 	add	r10,r16,r16
    821c:	12c00504 	addi	r11,r2,20
    8220:	5295883a 	add	r10,r10,r10
    8224:	5a95883a 	add	r10,r11,r10
    8228:	5807883a 	mov	r3,r11
    822c:	5a80032e 	bgeu	r11,r10,823c <__multiply+0x80>
    8230:	18000015 	stw	zero,0(r3)
    8234:	18c00104 	addi	r3,r3,4
    8238:	1abffd36 	bltu	r3,r10,8230 <__alt_data_end+0xff008230>
    823c:	9ce7883a 	add	r19,r19,r19
    8240:	94a5883a 	add	r18,r18,r18
    8244:	89800504 	addi	r6,r17,20
    8248:	9ce7883a 	add	r19,r19,r19
    824c:	a3400504 	addi	r13,r20,20
    8250:	94a5883a 	add	r18,r18,r18
    8254:	34d9883a 	add	r12,r6,r19
    8258:	6c93883a 	add	r9,r13,r18
    825c:	3300422e 	bgeu	r6,r12,8368 <__multiply+0x1ac>
    8260:	37c00017 	ldw	ra,0(r6)
    8264:	fbffffcc 	andi	r15,ra,65535
    8268:	78001b26 	beq	r15,zero,82d8 <__multiply+0x11c>
    826c:	5811883a 	mov	r8,r11
    8270:	681d883a 	mov	r14,r13
    8274:	000f883a 	mov	r7,zero
    8278:	71000017 	ldw	r4,0(r14)
    827c:	40c00017 	ldw	r3,0(r8)
    8280:	73800104 	addi	r14,r14,4
    8284:	217fffcc 	andi	r5,r4,65535
    8288:	2bcb383a 	mul	r5,r5,r15
    828c:	2008d43a 	srli	r4,r4,16
    8290:	1c7fffcc 	andi	r17,r3,65535
    8294:	2c4b883a 	add	r5,r5,r17
    8298:	29cb883a 	add	r5,r5,r7
    829c:	23c9383a 	mul	r4,r4,r15
    82a0:	1806d43a 	srli	r3,r3,16
    82a4:	280ed43a 	srli	r7,r5,16
    82a8:	297fffcc 	andi	r5,r5,65535
    82ac:	20c7883a 	add	r3,r4,r3
    82b0:	19c7883a 	add	r3,r3,r7
    82b4:	1808943a 	slli	r4,r3,16
    82b8:	4023883a 	mov	r17,r8
    82bc:	180ed43a 	srli	r7,r3,16
    82c0:	214ab03a 	or	r5,r4,r5
    82c4:	41400015 	stw	r5,0(r8)
    82c8:	42000104 	addi	r8,r8,4
    82cc:	727fea36 	bltu	r14,r9,8278 <__alt_data_end+0xff008278>
    82d0:	89c00115 	stw	r7,4(r17)
    82d4:	37c00017 	ldw	ra,0(r6)
    82d8:	f83ed43a 	srli	ra,ra,16
    82dc:	f8001f26 	beq	ra,zero,835c <__multiply+0x1a0>
    82e0:	58c00017 	ldw	r3,0(r11)
    82e4:	681d883a 	mov	r14,r13
    82e8:	581f883a 	mov	r15,r11
    82ec:	1811883a 	mov	r8,r3
    82f0:	5825883a 	mov	r18,r11
    82f4:	000f883a 	mov	r7,zero
    82f8:	00000106 	br	8300 <__multiply+0x144>
    82fc:	8825883a 	mov	r18,r17
    8300:	7140000b 	ldhu	r5,0(r14)
    8304:	4010d43a 	srli	r8,r8,16
    8308:	193fffcc 	andi	r4,r3,65535
    830c:	2fcb383a 	mul	r5,r5,ra
    8310:	7bc00104 	addi	r15,r15,4
    8314:	73800104 	addi	r14,r14,4
    8318:	2a0b883a 	add	r5,r5,r8
    831c:	29cb883a 	add	r5,r5,r7
    8320:	2806943a 	slli	r3,r5,16
    8324:	94400104 	addi	r17,r18,4
    8328:	280ad43a 	srli	r5,r5,16
    832c:	1908b03a 	or	r4,r3,r4
    8330:	793fff15 	stw	r4,-4(r15)
    8334:	70ffff17 	ldw	r3,-4(r14)
    8338:	8a000017 	ldw	r8,0(r17)
    833c:	1806d43a 	srli	r3,r3,16
    8340:	413fffcc 	andi	r4,r8,65535
    8344:	1fc7383a 	mul	r3,r3,ra
    8348:	1907883a 	add	r3,r3,r4
    834c:	1947883a 	add	r3,r3,r5
    8350:	180ed43a 	srli	r7,r3,16
    8354:	727fe936 	bltu	r14,r9,82fc <__alt_data_end+0xff0082fc>
    8358:	90c00115 	stw	r3,4(r18)
    835c:	31800104 	addi	r6,r6,4
    8360:	5ac00104 	addi	r11,r11,4
    8364:	333fbe36 	bltu	r6,r12,8260 <__alt_data_end+0xff008260>
    8368:	0400090e 	bge	zero,r16,8390 <__multiply+0x1d4>
    836c:	50ffff17 	ldw	r3,-4(r10)
    8370:	52bfff04 	addi	r10,r10,-4
    8374:	18000326 	beq	r3,zero,8384 <__multiply+0x1c8>
    8378:	00000506 	br	8390 <__multiply+0x1d4>
    837c:	50c00017 	ldw	r3,0(r10)
    8380:	1800031e 	bne	r3,zero,8390 <__multiply+0x1d4>
    8384:	843fffc4 	addi	r16,r16,-1
    8388:	52bfff04 	addi	r10,r10,-4
    838c:	803ffb1e 	bne	r16,zero,837c <__alt_data_end+0xff00837c>
    8390:	14000415 	stw	r16,16(r2)
    8394:	dfc00517 	ldw	ra,20(sp)
    8398:	dd000417 	ldw	r20,16(sp)
    839c:	dcc00317 	ldw	r19,12(sp)
    83a0:	dc800217 	ldw	r18,8(sp)
    83a4:	dc400117 	ldw	r17,4(sp)
    83a8:	dc000017 	ldw	r16,0(sp)
    83ac:	dec00604 	addi	sp,sp,24
    83b0:	f800283a 	ret

000083b4 <__pow5mult>:
    83b4:	defffa04 	addi	sp,sp,-24
    83b8:	dcc00315 	stw	r19,12(sp)
    83bc:	dc000015 	stw	r16,0(sp)
    83c0:	dfc00515 	stw	ra,20(sp)
    83c4:	dd000415 	stw	r20,16(sp)
    83c8:	dc800215 	stw	r18,8(sp)
    83cc:	dc400115 	stw	r17,4(sp)
    83d0:	308000cc 	andi	r2,r6,3
    83d4:	3021883a 	mov	r16,r6
    83d8:	2027883a 	mov	r19,r4
    83dc:	10002f1e 	bne	r2,zero,849c <__pow5mult+0xe8>
    83e0:	2825883a 	mov	r18,r5
    83e4:	8021d0ba 	srai	r16,r16,2
    83e8:	80001a26 	beq	r16,zero,8454 <__pow5mult+0xa0>
    83ec:	9c401217 	ldw	r17,72(r19)
    83f0:	8800061e 	bne	r17,zero,840c <__pow5mult+0x58>
    83f4:	00003406 	br	84c8 <__pow5mult+0x114>
    83f8:	8021d07a 	srai	r16,r16,1
    83fc:	80001526 	beq	r16,zero,8454 <__pow5mult+0xa0>
    8400:	88800017 	ldw	r2,0(r17)
    8404:	10001c26 	beq	r2,zero,8478 <__pow5mult+0xc4>
    8408:	1023883a 	mov	r17,r2
    840c:	8080004c 	andi	r2,r16,1
    8410:	103ff926 	beq	r2,zero,83f8 <__alt_data_end+0xff0083f8>
    8414:	880d883a 	mov	r6,r17
    8418:	900b883a 	mov	r5,r18
    841c:	9809883a 	mov	r4,r19
    8420:	00081bc0 	call	81bc <__multiply>
    8424:	90001b26 	beq	r18,zero,8494 <__pow5mult+0xe0>
    8428:	91000117 	ldw	r4,4(r18)
    842c:	98c01317 	ldw	r3,76(r19)
    8430:	8021d07a 	srai	r16,r16,1
    8434:	2109883a 	add	r4,r4,r4
    8438:	2109883a 	add	r4,r4,r4
    843c:	1907883a 	add	r3,r3,r4
    8440:	19000017 	ldw	r4,0(r3)
    8444:	91000015 	stw	r4,0(r18)
    8448:	1c800015 	stw	r18,0(r3)
    844c:	1025883a 	mov	r18,r2
    8450:	803feb1e 	bne	r16,zero,8400 <__alt_data_end+0xff008400>
    8454:	9005883a 	mov	r2,r18
    8458:	dfc00517 	ldw	ra,20(sp)
    845c:	dd000417 	ldw	r20,16(sp)
    8460:	dcc00317 	ldw	r19,12(sp)
    8464:	dc800217 	ldw	r18,8(sp)
    8468:	dc400117 	ldw	r17,4(sp)
    846c:	dc000017 	ldw	r16,0(sp)
    8470:	dec00604 	addi	sp,sp,24
    8474:	f800283a 	ret
    8478:	880d883a 	mov	r6,r17
    847c:	880b883a 	mov	r5,r17
    8480:	9809883a 	mov	r4,r19
    8484:	00081bc0 	call	81bc <__multiply>
    8488:	88800015 	stw	r2,0(r17)
    848c:	10000015 	stw	zero,0(r2)
    8490:	003fdd06 	br	8408 <__alt_data_end+0xff008408>
    8494:	1025883a 	mov	r18,r2
    8498:	003fd706 	br	83f8 <__alt_data_end+0xff0083f8>
    849c:	10bfffc4 	addi	r2,r2,-1
    84a0:	1085883a 	add	r2,r2,r2
    84a4:	00c00074 	movhi	r3,1
    84a8:	18c56304 	addi	r3,r3,5516
    84ac:	1085883a 	add	r2,r2,r2
    84b0:	1885883a 	add	r2,r3,r2
    84b4:	11800017 	ldw	r6,0(r2)
    84b8:	000f883a 	mov	r7,zero
    84bc:	0007e440 	call	7e44 <__multadd>
    84c0:	1025883a 	mov	r18,r2
    84c4:	003fc706 	br	83e4 <__alt_data_end+0xff0083e4>
    84c8:	05000044 	movi	r20,1
    84cc:	a00b883a 	mov	r5,r20
    84d0:	9809883a 	mov	r4,r19
    84d4:	0007d740 	call	7d74 <_Balloc>
    84d8:	1023883a 	mov	r17,r2
    84dc:	00809c44 	movi	r2,625
    84e0:	88800515 	stw	r2,20(r17)
    84e4:	8d000415 	stw	r20,16(r17)
    84e8:	9c401215 	stw	r17,72(r19)
    84ec:	88000015 	stw	zero,0(r17)
    84f0:	003fc606 	br	840c <__alt_data_end+0xff00840c>

000084f4 <__lshift>:
    84f4:	defff904 	addi	sp,sp,-28
    84f8:	dd400515 	stw	r21,20(sp)
    84fc:	dcc00315 	stw	r19,12(sp)
    8500:	302bd17a 	srai	r21,r6,5
    8504:	2cc00417 	ldw	r19,16(r5)
    8508:	28800217 	ldw	r2,8(r5)
    850c:	dd000415 	stw	r20,16(sp)
    8510:	ace7883a 	add	r19,r21,r19
    8514:	dc800215 	stw	r18,8(sp)
    8518:	dc400115 	stw	r17,4(sp)
    851c:	dc000015 	stw	r16,0(sp)
    8520:	dfc00615 	stw	ra,24(sp)
    8524:	9c000044 	addi	r16,r19,1
    8528:	2823883a 	mov	r17,r5
    852c:	3029883a 	mov	r20,r6
    8530:	2025883a 	mov	r18,r4
    8534:	29400117 	ldw	r5,4(r5)
    8538:	1400030e 	bge	r2,r16,8548 <__lshift+0x54>
    853c:	1085883a 	add	r2,r2,r2
    8540:	29400044 	addi	r5,r5,1
    8544:	143ffd16 	blt	r2,r16,853c <__alt_data_end+0xff00853c>
    8548:	9009883a 	mov	r4,r18
    854c:	0007d740 	call	7d74 <_Balloc>
    8550:	10c00504 	addi	r3,r2,20
    8554:	0540070e 	bge	zero,r21,8574 <__lshift+0x80>
    8558:	ad6b883a 	add	r21,r21,r21
    855c:	ad6b883a 	add	r21,r21,r21
    8560:	1809883a 	mov	r4,r3
    8564:	1d47883a 	add	r3,r3,r21
    8568:	20000015 	stw	zero,0(r4)
    856c:	21000104 	addi	r4,r4,4
    8570:	193ffd1e 	bne	r3,r4,8568 <__alt_data_end+0xff008568>
    8574:	8a000417 	ldw	r8,16(r17)
    8578:	89000504 	addi	r4,r17,20
    857c:	a18007cc 	andi	r6,r20,31
    8580:	4211883a 	add	r8,r8,r8
    8584:	4211883a 	add	r8,r8,r8
    8588:	2211883a 	add	r8,r4,r8
    858c:	30002326 	beq	r6,zero,861c <__lshift+0x128>
    8590:	02400804 	movi	r9,32
    8594:	4993c83a 	sub	r9,r9,r6
    8598:	000b883a 	mov	r5,zero
    859c:	21c00017 	ldw	r7,0(r4)
    85a0:	1815883a 	mov	r10,r3
    85a4:	18c00104 	addi	r3,r3,4
    85a8:	398e983a 	sll	r7,r7,r6
    85ac:	21000104 	addi	r4,r4,4
    85b0:	394ab03a 	or	r5,r7,r5
    85b4:	197fff15 	stw	r5,-4(r3)
    85b8:	217fff17 	ldw	r5,-4(r4)
    85bc:	2a4ad83a 	srl	r5,r5,r9
    85c0:	223ff636 	bltu	r4,r8,859c <__alt_data_end+0xff00859c>
    85c4:	51400115 	stw	r5,4(r10)
    85c8:	28001a1e 	bne	r5,zero,8634 <__lshift+0x140>
    85cc:	843fffc4 	addi	r16,r16,-1
    85d0:	14000415 	stw	r16,16(r2)
    85d4:	88000826 	beq	r17,zero,85f8 <__lshift+0x104>
    85d8:	89000117 	ldw	r4,4(r17)
    85dc:	90c01317 	ldw	r3,76(r18)
    85e0:	2109883a 	add	r4,r4,r4
    85e4:	2109883a 	add	r4,r4,r4
    85e8:	1907883a 	add	r3,r3,r4
    85ec:	19000017 	ldw	r4,0(r3)
    85f0:	89000015 	stw	r4,0(r17)
    85f4:	1c400015 	stw	r17,0(r3)
    85f8:	dfc00617 	ldw	ra,24(sp)
    85fc:	dd400517 	ldw	r21,20(sp)
    8600:	dd000417 	ldw	r20,16(sp)
    8604:	dcc00317 	ldw	r19,12(sp)
    8608:	dc800217 	ldw	r18,8(sp)
    860c:	dc400117 	ldw	r17,4(sp)
    8610:	dc000017 	ldw	r16,0(sp)
    8614:	dec00704 	addi	sp,sp,28
    8618:	f800283a 	ret
    861c:	21400017 	ldw	r5,0(r4)
    8620:	18c00104 	addi	r3,r3,4
    8624:	21000104 	addi	r4,r4,4
    8628:	197fff15 	stw	r5,-4(r3)
    862c:	223ffb36 	bltu	r4,r8,861c <__alt_data_end+0xff00861c>
    8630:	003fe606 	br	85cc <__alt_data_end+0xff0085cc>
    8634:	9c000084 	addi	r16,r19,2
    8638:	003fe406 	br	85cc <__alt_data_end+0xff0085cc>

0000863c <__mcmp>:
    863c:	20800417 	ldw	r2,16(r4)
    8640:	28c00417 	ldw	r3,16(r5)
    8644:	10c5c83a 	sub	r2,r2,r3
    8648:	1000111e 	bne	r2,zero,8690 <__mcmp+0x54>
    864c:	18c7883a 	add	r3,r3,r3
    8650:	18c7883a 	add	r3,r3,r3
    8654:	21000504 	addi	r4,r4,20
    8658:	29400504 	addi	r5,r5,20
    865c:	20c5883a 	add	r2,r4,r3
    8660:	28cb883a 	add	r5,r5,r3
    8664:	00000106 	br	866c <__mcmp+0x30>
    8668:	20800a2e 	bgeu	r4,r2,8694 <__mcmp+0x58>
    866c:	10bfff04 	addi	r2,r2,-4
    8670:	297fff04 	addi	r5,r5,-4
    8674:	11800017 	ldw	r6,0(r2)
    8678:	28c00017 	ldw	r3,0(r5)
    867c:	30fffa26 	beq	r6,r3,8668 <__alt_data_end+0xff008668>
    8680:	30c00236 	bltu	r6,r3,868c <__mcmp+0x50>
    8684:	00800044 	movi	r2,1
    8688:	f800283a 	ret
    868c:	00bfffc4 	movi	r2,-1
    8690:	f800283a 	ret
    8694:	0005883a 	mov	r2,zero
    8698:	f800283a 	ret

0000869c <__mdiff>:
    869c:	28c00417 	ldw	r3,16(r5)
    86a0:	30800417 	ldw	r2,16(r6)
    86a4:	defffa04 	addi	sp,sp,-24
    86a8:	dcc00315 	stw	r19,12(sp)
    86ac:	dc800215 	stw	r18,8(sp)
    86b0:	dfc00515 	stw	ra,20(sp)
    86b4:	dd000415 	stw	r20,16(sp)
    86b8:	dc400115 	stw	r17,4(sp)
    86bc:	dc000015 	stw	r16,0(sp)
    86c0:	1887c83a 	sub	r3,r3,r2
    86c4:	2825883a 	mov	r18,r5
    86c8:	3027883a 	mov	r19,r6
    86cc:	1800141e 	bne	r3,zero,8720 <__mdiff+0x84>
    86d0:	1085883a 	add	r2,r2,r2
    86d4:	1085883a 	add	r2,r2,r2
    86d8:	2a000504 	addi	r8,r5,20
    86dc:	34000504 	addi	r16,r6,20
    86e0:	4087883a 	add	r3,r8,r2
    86e4:	8085883a 	add	r2,r16,r2
    86e8:	00000106 	br	86f0 <__mdiff+0x54>
    86ec:	40c0592e 	bgeu	r8,r3,8854 <__mdiff+0x1b8>
    86f0:	18ffff04 	addi	r3,r3,-4
    86f4:	10bfff04 	addi	r2,r2,-4
    86f8:	19c00017 	ldw	r7,0(r3)
    86fc:	11400017 	ldw	r5,0(r2)
    8700:	397ffa26 	beq	r7,r5,86ec <__alt_data_end+0xff0086ec>
    8704:	3940592e 	bgeu	r7,r5,886c <__mdiff+0x1d0>
    8708:	9005883a 	mov	r2,r18
    870c:	4023883a 	mov	r17,r8
    8710:	9825883a 	mov	r18,r19
    8714:	05000044 	movi	r20,1
    8718:	1027883a 	mov	r19,r2
    871c:	00000406 	br	8730 <__mdiff+0x94>
    8720:	18005616 	blt	r3,zero,887c <__mdiff+0x1e0>
    8724:	34400504 	addi	r17,r6,20
    8728:	2c000504 	addi	r16,r5,20
    872c:	0029883a 	mov	r20,zero
    8730:	91400117 	ldw	r5,4(r18)
    8734:	0007d740 	call	7d74 <_Balloc>
    8738:	92400417 	ldw	r9,16(r18)
    873c:	9b000417 	ldw	r12,16(r19)
    8740:	12c00504 	addi	r11,r2,20
    8744:	4a51883a 	add	r8,r9,r9
    8748:	6319883a 	add	r12,r12,r12
    874c:	4211883a 	add	r8,r8,r8
    8750:	6319883a 	add	r12,r12,r12
    8754:	15000315 	stw	r20,12(r2)
    8758:	8211883a 	add	r8,r16,r8
    875c:	8b19883a 	add	r12,r17,r12
    8760:	0007883a 	mov	r3,zero
    8764:	81400017 	ldw	r5,0(r16)
    8768:	89c00017 	ldw	r7,0(r17)
    876c:	59800104 	addi	r6,r11,4
    8770:	293fffcc 	andi	r4,r5,65535
    8774:	20c7883a 	add	r3,r4,r3
    8778:	393fffcc 	andi	r4,r7,65535
    877c:	1909c83a 	sub	r4,r3,r4
    8780:	280ad43a 	srli	r5,r5,16
    8784:	380ed43a 	srli	r7,r7,16
    8788:	2007d43a 	srai	r3,r4,16
    878c:	213fffcc 	andi	r4,r4,65535
    8790:	29cbc83a 	sub	r5,r5,r7
    8794:	28c7883a 	add	r3,r5,r3
    8798:	180a943a 	slli	r5,r3,16
    879c:	8c400104 	addi	r17,r17,4
    87a0:	84000104 	addi	r16,r16,4
    87a4:	2908b03a 	or	r4,r5,r4
    87a8:	59000015 	stw	r4,0(r11)
    87ac:	1807d43a 	srai	r3,r3,16
    87b0:	3015883a 	mov	r10,r6
    87b4:	3017883a 	mov	r11,r6
    87b8:	8b3fea36 	bltu	r17,r12,8764 <__alt_data_end+0xff008764>
    87bc:	8200162e 	bgeu	r16,r8,8818 <__mdiff+0x17c>
    87c0:	8017883a 	mov	r11,r16
    87c4:	59400017 	ldw	r5,0(r11)
    87c8:	31800104 	addi	r6,r6,4
    87cc:	5ac00104 	addi	r11,r11,4
    87d0:	293fffcc 	andi	r4,r5,65535
    87d4:	20c7883a 	add	r3,r4,r3
    87d8:	280ed43a 	srli	r7,r5,16
    87dc:	180bd43a 	srai	r5,r3,16
    87e0:	193fffcc 	andi	r4,r3,65535
    87e4:	3947883a 	add	r3,r7,r5
    87e8:	180a943a 	slli	r5,r3,16
    87ec:	1807d43a 	srai	r3,r3,16
    87f0:	2908b03a 	or	r4,r5,r4
    87f4:	313fff15 	stw	r4,-4(r6)
    87f8:	5a3ff236 	bltu	r11,r8,87c4 <__alt_data_end+0xff0087c4>
    87fc:	0406303a 	nor	r3,zero,r16
    8800:	1a07883a 	add	r3,r3,r8
    8804:	1806d0ba 	srli	r3,r3,2
    8808:	18c00044 	addi	r3,r3,1
    880c:	18c7883a 	add	r3,r3,r3
    8810:	18c7883a 	add	r3,r3,r3
    8814:	50d5883a 	add	r10,r10,r3
    8818:	50ffff04 	addi	r3,r10,-4
    881c:	2000041e 	bne	r4,zero,8830 <__mdiff+0x194>
    8820:	18ffff04 	addi	r3,r3,-4
    8824:	19000017 	ldw	r4,0(r3)
    8828:	4a7fffc4 	addi	r9,r9,-1
    882c:	203ffc26 	beq	r4,zero,8820 <__alt_data_end+0xff008820>
    8830:	12400415 	stw	r9,16(r2)
    8834:	dfc00517 	ldw	ra,20(sp)
    8838:	dd000417 	ldw	r20,16(sp)
    883c:	dcc00317 	ldw	r19,12(sp)
    8840:	dc800217 	ldw	r18,8(sp)
    8844:	dc400117 	ldw	r17,4(sp)
    8848:	dc000017 	ldw	r16,0(sp)
    884c:	dec00604 	addi	sp,sp,24
    8850:	f800283a 	ret
    8854:	000b883a 	mov	r5,zero
    8858:	0007d740 	call	7d74 <_Balloc>
    885c:	00c00044 	movi	r3,1
    8860:	10c00415 	stw	r3,16(r2)
    8864:	10000515 	stw	zero,20(r2)
    8868:	003ff206 	br	8834 <__alt_data_end+0xff008834>
    886c:	8023883a 	mov	r17,r16
    8870:	0029883a 	mov	r20,zero
    8874:	4021883a 	mov	r16,r8
    8878:	003fad06 	br	8730 <__alt_data_end+0xff008730>
    887c:	9005883a 	mov	r2,r18
    8880:	94400504 	addi	r17,r18,20
    8884:	9c000504 	addi	r16,r19,20
    8888:	9825883a 	mov	r18,r19
    888c:	05000044 	movi	r20,1
    8890:	1027883a 	mov	r19,r2
    8894:	003fa606 	br	8730 <__alt_data_end+0xff008730>

00008898 <__ulp>:
    8898:	295ffc2c 	andhi	r5,r5,32752
    889c:	00bf3034 	movhi	r2,64704
    88a0:	2887883a 	add	r3,r5,r2
    88a4:	00c0020e 	bge	zero,r3,88b0 <__ulp+0x18>
    88a8:	0005883a 	mov	r2,zero
    88ac:	f800283a 	ret
    88b0:	00c7c83a 	sub	r3,zero,r3
    88b4:	1807d53a 	srai	r3,r3,20
    88b8:	008004c4 	movi	r2,19
    88bc:	10c00b0e 	bge	r2,r3,88ec <__ulp+0x54>
    88c0:	18bffb04 	addi	r2,r3,-20
    88c4:	01000784 	movi	r4,30
    88c8:	0007883a 	mov	r3,zero
    88cc:	20800516 	blt	r4,r2,88e4 <__ulp+0x4c>
    88d0:	010007c4 	movi	r4,31
    88d4:	2089c83a 	sub	r4,r4,r2
    88d8:	00800044 	movi	r2,1
    88dc:	1104983a 	sll	r2,r2,r4
    88e0:	f800283a 	ret
    88e4:	00800044 	movi	r2,1
    88e8:	f800283a 	ret
    88ec:	01400234 	movhi	r5,8
    88f0:	28c7d83a 	sra	r3,r5,r3
    88f4:	0005883a 	mov	r2,zero
    88f8:	f800283a 	ret

000088fc <__b2d>:
    88fc:	defffa04 	addi	sp,sp,-24
    8900:	dc000015 	stw	r16,0(sp)
    8904:	24000417 	ldw	r16,16(r4)
    8908:	dc400115 	stw	r17,4(sp)
    890c:	24400504 	addi	r17,r4,20
    8910:	8421883a 	add	r16,r16,r16
    8914:	8421883a 	add	r16,r16,r16
    8918:	8c21883a 	add	r16,r17,r16
    891c:	dc800215 	stw	r18,8(sp)
    8920:	84bfff17 	ldw	r18,-4(r16)
    8924:	dd000415 	stw	r20,16(sp)
    8928:	dcc00315 	stw	r19,12(sp)
    892c:	9009883a 	mov	r4,r18
    8930:	2829883a 	mov	r20,r5
    8934:	dfc00515 	stw	ra,20(sp)
    8938:	00080680 	call	8068 <__hi0bits>
    893c:	00c00804 	movi	r3,32
    8940:	1889c83a 	sub	r4,r3,r2
    8944:	a1000015 	stw	r4,0(r20)
    8948:	01000284 	movi	r4,10
    894c:	84ffff04 	addi	r19,r16,-4
    8950:	20801216 	blt	r4,r2,899c <__b2d+0xa0>
    8954:	018002c4 	movi	r6,11
    8958:	308dc83a 	sub	r6,r6,r2
    895c:	9186d83a 	srl	r3,r18,r6
    8960:	18cffc34 	orhi	r3,r3,16368
    8964:	8cc0212e 	bgeu	r17,r19,89ec <__b2d+0xf0>
    8968:	813ffe17 	ldw	r4,-8(r16)
    896c:	218cd83a 	srl	r6,r4,r6
    8970:	10800544 	addi	r2,r2,21
    8974:	9084983a 	sll	r2,r18,r2
    8978:	1184b03a 	or	r2,r2,r6
    897c:	dfc00517 	ldw	ra,20(sp)
    8980:	dd000417 	ldw	r20,16(sp)
    8984:	dcc00317 	ldw	r19,12(sp)
    8988:	dc800217 	ldw	r18,8(sp)
    898c:	dc400117 	ldw	r17,4(sp)
    8990:	dc000017 	ldw	r16,0(sp)
    8994:	dec00604 	addi	sp,sp,24
    8998:	f800283a 	ret
    899c:	8cc00f2e 	bgeu	r17,r19,89dc <__b2d+0xe0>
    89a0:	117ffd44 	addi	r5,r2,-11
    89a4:	80bffe17 	ldw	r2,-8(r16)
    89a8:	28000e26 	beq	r5,zero,89e4 <__b2d+0xe8>
    89ac:	1949c83a 	sub	r4,r3,r5
    89b0:	9164983a 	sll	r18,r18,r5
    89b4:	1106d83a 	srl	r3,r2,r4
    89b8:	81bffe04 	addi	r6,r16,-8
    89bc:	948ffc34 	orhi	r18,r18,16368
    89c0:	90c6b03a 	or	r3,r18,r3
    89c4:	89800e2e 	bgeu	r17,r6,8a00 <__b2d+0x104>
    89c8:	81bffd17 	ldw	r6,-12(r16)
    89cc:	1144983a 	sll	r2,r2,r5
    89d0:	310ad83a 	srl	r5,r6,r4
    89d4:	2884b03a 	or	r2,r5,r2
    89d8:	003fe806 	br	897c <__alt_data_end+0xff00897c>
    89dc:	10bffd44 	addi	r2,r2,-11
    89e0:	1000041e 	bne	r2,zero,89f4 <__b2d+0xf8>
    89e4:	90cffc34 	orhi	r3,r18,16368
    89e8:	003fe406 	br	897c <__alt_data_end+0xff00897c>
    89ec:	000d883a 	mov	r6,zero
    89f0:	003fdf06 	br	8970 <__alt_data_end+0xff008970>
    89f4:	90a4983a 	sll	r18,r18,r2
    89f8:	0005883a 	mov	r2,zero
    89fc:	003ff906 	br	89e4 <__alt_data_end+0xff0089e4>
    8a00:	1144983a 	sll	r2,r2,r5
    8a04:	003fdd06 	br	897c <__alt_data_end+0xff00897c>

00008a08 <__d2b>:
    8a08:	defff804 	addi	sp,sp,-32
    8a0c:	dc000215 	stw	r16,8(sp)
    8a10:	3021883a 	mov	r16,r6
    8a14:	dc400315 	stw	r17,12(sp)
    8a18:	8022907a 	slli	r17,r16,1
    8a1c:	dd000615 	stw	r20,24(sp)
    8a20:	2829883a 	mov	r20,r5
    8a24:	01400044 	movi	r5,1
    8a28:	dcc00515 	stw	r19,20(sp)
    8a2c:	dc800415 	stw	r18,16(sp)
    8a30:	dfc00715 	stw	ra,28(sp)
    8a34:	3825883a 	mov	r18,r7
    8a38:	8822d57a 	srli	r17,r17,21
    8a3c:	0007d740 	call	7d74 <_Balloc>
    8a40:	1027883a 	mov	r19,r2
    8a44:	00800434 	movhi	r2,16
    8a48:	10bfffc4 	addi	r2,r2,-1
    8a4c:	808c703a 	and	r6,r16,r2
    8a50:	88000126 	beq	r17,zero,8a58 <__d2b+0x50>
    8a54:	31800434 	orhi	r6,r6,16
    8a58:	d9800015 	stw	r6,0(sp)
    8a5c:	a0002426 	beq	r20,zero,8af0 <__d2b+0xe8>
    8a60:	d9000104 	addi	r4,sp,4
    8a64:	dd000115 	stw	r20,4(sp)
    8a68:	00080d00 	call	80d0 <__lo0bits>
    8a6c:	d8c00017 	ldw	r3,0(sp)
    8a70:	10002f1e 	bne	r2,zero,8b30 <__d2b+0x128>
    8a74:	d9000117 	ldw	r4,4(sp)
    8a78:	99000515 	stw	r4,20(r19)
    8a7c:	1821003a 	cmpeq	r16,r3,zero
    8a80:	01000084 	movi	r4,2
    8a84:	2421c83a 	sub	r16,r4,r16
    8a88:	98c00615 	stw	r3,24(r19)
    8a8c:	9c000415 	stw	r16,16(r19)
    8a90:	88001f1e 	bne	r17,zero,8b10 <__d2b+0x108>
    8a94:	10bef384 	addi	r2,r2,-1074
    8a98:	90800015 	stw	r2,0(r18)
    8a9c:	00900034 	movhi	r2,16384
    8aa0:	10bfffc4 	addi	r2,r2,-1
    8aa4:	8085883a 	add	r2,r16,r2
    8aa8:	1085883a 	add	r2,r2,r2
    8aac:	1085883a 	add	r2,r2,r2
    8ab0:	9885883a 	add	r2,r19,r2
    8ab4:	11000517 	ldw	r4,20(r2)
    8ab8:	8020917a 	slli	r16,r16,5
    8abc:	00080680 	call	8068 <__hi0bits>
    8ac0:	d8c00817 	ldw	r3,32(sp)
    8ac4:	8085c83a 	sub	r2,r16,r2
    8ac8:	18800015 	stw	r2,0(r3)
    8acc:	9805883a 	mov	r2,r19
    8ad0:	dfc00717 	ldw	ra,28(sp)
    8ad4:	dd000617 	ldw	r20,24(sp)
    8ad8:	dcc00517 	ldw	r19,20(sp)
    8adc:	dc800417 	ldw	r18,16(sp)
    8ae0:	dc400317 	ldw	r17,12(sp)
    8ae4:	dc000217 	ldw	r16,8(sp)
    8ae8:	dec00804 	addi	sp,sp,32
    8aec:	f800283a 	ret
    8af0:	d809883a 	mov	r4,sp
    8af4:	00080d00 	call	80d0 <__lo0bits>
    8af8:	d8c00017 	ldw	r3,0(sp)
    8afc:	04000044 	movi	r16,1
    8b00:	9c000415 	stw	r16,16(r19)
    8b04:	98c00515 	stw	r3,20(r19)
    8b08:	10800804 	addi	r2,r2,32
    8b0c:	883fe126 	beq	r17,zero,8a94 <__alt_data_end+0xff008a94>
    8b10:	00c00d44 	movi	r3,53
    8b14:	8c7ef344 	addi	r17,r17,-1075
    8b18:	88a3883a 	add	r17,r17,r2
    8b1c:	1885c83a 	sub	r2,r3,r2
    8b20:	d8c00817 	ldw	r3,32(sp)
    8b24:	94400015 	stw	r17,0(r18)
    8b28:	18800015 	stw	r2,0(r3)
    8b2c:	003fe706 	br	8acc <__alt_data_end+0xff008acc>
    8b30:	01000804 	movi	r4,32
    8b34:	2089c83a 	sub	r4,r4,r2
    8b38:	1908983a 	sll	r4,r3,r4
    8b3c:	d9400117 	ldw	r5,4(sp)
    8b40:	1886d83a 	srl	r3,r3,r2
    8b44:	2148b03a 	or	r4,r4,r5
    8b48:	99000515 	stw	r4,20(r19)
    8b4c:	d8c00015 	stw	r3,0(sp)
    8b50:	003fca06 	br	8a7c <__alt_data_end+0xff008a7c>

00008b54 <__ratio>:
    8b54:	defff904 	addi	sp,sp,-28
    8b58:	dc400315 	stw	r17,12(sp)
    8b5c:	2823883a 	mov	r17,r5
    8b60:	d9400104 	addi	r5,sp,4
    8b64:	dfc00615 	stw	ra,24(sp)
    8b68:	dcc00515 	stw	r19,20(sp)
    8b6c:	dc800415 	stw	r18,16(sp)
    8b70:	2027883a 	mov	r19,r4
    8b74:	dc000215 	stw	r16,8(sp)
    8b78:	00088fc0 	call	88fc <__b2d>
    8b7c:	d80b883a 	mov	r5,sp
    8b80:	8809883a 	mov	r4,r17
    8b84:	1025883a 	mov	r18,r2
    8b88:	1821883a 	mov	r16,r3
    8b8c:	00088fc0 	call	88fc <__b2d>
    8b90:	8a000417 	ldw	r8,16(r17)
    8b94:	99000417 	ldw	r4,16(r19)
    8b98:	d9400117 	ldw	r5,4(sp)
    8b9c:	2209c83a 	sub	r4,r4,r8
    8ba0:	2010917a 	slli	r8,r4,5
    8ba4:	d9000017 	ldw	r4,0(sp)
    8ba8:	2909c83a 	sub	r4,r5,r4
    8bac:	4109883a 	add	r4,r8,r4
    8bb0:	01000e0e 	bge	zero,r4,8bec <__ratio+0x98>
    8bb4:	2008953a 	slli	r4,r4,20
    8bb8:	2421883a 	add	r16,r4,r16
    8bbc:	100d883a 	mov	r6,r2
    8bc0:	180f883a 	mov	r7,r3
    8bc4:	9009883a 	mov	r4,r18
    8bc8:	800b883a 	mov	r5,r16
    8bcc:	000c8380 	call	c838 <__divdf3>
    8bd0:	dfc00617 	ldw	ra,24(sp)
    8bd4:	dcc00517 	ldw	r19,20(sp)
    8bd8:	dc800417 	ldw	r18,16(sp)
    8bdc:	dc400317 	ldw	r17,12(sp)
    8be0:	dc000217 	ldw	r16,8(sp)
    8be4:	dec00704 	addi	sp,sp,28
    8be8:	f800283a 	ret
    8bec:	2008953a 	slli	r4,r4,20
    8bf0:	1907c83a 	sub	r3,r3,r4
    8bf4:	003ff106 	br	8bbc <__alt_data_end+0xff008bbc>

00008bf8 <_mprec_log10>:
    8bf8:	defffe04 	addi	sp,sp,-8
    8bfc:	dc000015 	stw	r16,0(sp)
    8c00:	dfc00115 	stw	ra,4(sp)
    8c04:	008005c4 	movi	r2,23
    8c08:	2021883a 	mov	r16,r4
    8c0c:	11000d0e 	bge	r2,r4,8c44 <_mprec_log10+0x4c>
    8c10:	0005883a 	mov	r2,zero
    8c14:	00cffc34 	movhi	r3,16368
    8c18:	843fffc4 	addi	r16,r16,-1
    8c1c:	000d883a 	mov	r6,zero
    8c20:	01d00934 	movhi	r7,16420
    8c24:	1009883a 	mov	r4,r2
    8c28:	180b883a 	mov	r5,r3
    8c2c:	000d3780 	call	d378 <__muldf3>
    8c30:	803ff91e 	bne	r16,zero,8c18 <__alt_data_end+0xff008c18>
    8c34:	dfc00117 	ldw	ra,4(sp)
    8c38:	dc000017 	ldw	r16,0(sp)
    8c3c:	dec00204 	addi	sp,sp,8
    8c40:	f800283a 	ret
    8c44:	202090fa 	slli	r16,r4,3
    8c48:	00800074 	movhi	r2,1
    8c4c:	10857a04 	addi	r2,r2,5608
    8c50:	1421883a 	add	r16,r2,r16
    8c54:	80800017 	ldw	r2,0(r16)
    8c58:	80c00117 	ldw	r3,4(r16)
    8c5c:	dfc00117 	ldw	ra,4(sp)
    8c60:	dc000017 	ldw	r16,0(sp)
    8c64:	dec00204 	addi	sp,sp,8
    8c68:	f800283a 	ret

00008c6c <__copybits>:
    8c6c:	297fffc4 	addi	r5,r5,-1
    8c70:	280fd17a 	srai	r7,r5,5
    8c74:	30c00417 	ldw	r3,16(r6)
    8c78:	30800504 	addi	r2,r6,20
    8c7c:	39c00044 	addi	r7,r7,1
    8c80:	18c7883a 	add	r3,r3,r3
    8c84:	39cf883a 	add	r7,r7,r7
    8c88:	18c7883a 	add	r3,r3,r3
    8c8c:	39cf883a 	add	r7,r7,r7
    8c90:	10c7883a 	add	r3,r2,r3
    8c94:	21cf883a 	add	r7,r4,r7
    8c98:	10c00d2e 	bgeu	r2,r3,8cd0 <__copybits+0x64>
    8c9c:	200b883a 	mov	r5,r4
    8ca0:	12000017 	ldw	r8,0(r2)
    8ca4:	29400104 	addi	r5,r5,4
    8ca8:	10800104 	addi	r2,r2,4
    8cac:	2a3fff15 	stw	r8,-4(r5)
    8cb0:	10fffb36 	bltu	r2,r3,8ca0 <__alt_data_end+0xff008ca0>
    8cb4:	1985c83a 	sub	r2,r3,r6
    8cb8:	10bffac4 	addi	r2,r2,-21
    8cbc:	1004d0ba 	srli	r2,r2,2
    8cc0:	10800044 	addi	r2,r2,1
    8cc4:	1085883a 	add	r2,r2,r2
    8cc8:	1085883a 	add	r2,r2,r2
    8ccc:	2089883a 	add	r4,r4,r2
    8cd0:	21c0032e 	bgeu	r4,r7,8ce0 <__copybits+0x74>
    8cd4:	20000015 	stw	zero,0(r4)
    8cd8:	21000104 	addi	r4,r4,4
    8cdc:	21fffd36 	bltu	r4,r7,8cd4 <__alt_data_end+0xff008cd4>
    8ce0:	f800283a 	ret

00008ce4 <__any_on>:
    8ce4:	20c00417 	ldw	r3,16(r4)
    8ce8:	2805d17a 	srai	r2,r5,5
    8cec:	21000504 	addi	r4,r4,20
    8cf0:	18800d0e 	bge	r3,r2,8d28 <__any_on+0x44>
    8cf4:	18c7883a 	add	r3,r3,r3
    8cf8:	18c7883a 	add	r3,r3,r3
    8cfc:	20c7883a 	add	r3,r4,r3
    8d00:	20c0192e 	bgeu	r4,r3,8d68 <__any_on+0x84>
    8d04:	18bfff17 	ldw	r2,-4(r3)
    8d08:	18ffff04 	addi	r3,r3,-4
    8d0c:	1000041e 	bne	r2,zero,8d20 <__any_on+0x3c>
    8d10:	20c0142e 	bgeu	r4,r3,8d64 <__any_on+0x80>
    8d14:	18ffff04 	addi	r3,r3,-4
    8d18:	19400017 	ldw	r5,0(r3)
    8d1c:	283ffc26 	beq	r5,zero,8d10 <__alt_data_end+0xff008d10>
    8d20:	00800044 	movi	r2,1
    8d24:	f800283a 	ret
    8d28:	10c00a0e 	bge	r2,r3,8d54 <__any_on+0x70>
    8d2c:	1085883a 	add	r2,r2,r2
    8d30:	1085883a 	add	r2,r2,r2
    8d34:	294007cc 	andi	r5,r5,31
    8d38:	2087883a 	add	r3,r4,r2
    8d3c:	283ff026 	beq	r5,zero,8d00 <__alt_data_end+0xff008d00>
    8d40:	19800017 	ldw	r6,0(r3)
    8d44:	3144d83a 	srl	r2,r6,r5
    8d48:	114a983a 	sll	r5,r2,r5
    8d4c:	317ff41e 	bne	r6,r5,8d20 <__alt_data_end+0xff008d20>
    8d50:	003feb06 	br	8d00 <__alt_data_end+0xff008d00>
    8d54:	1085883a 	add	r2,r2,r2
    8d58:	1085883a 	add	r2,r2,r2
    8d5c:	2087883a 	add	r3,r4,r2
    8d60:	003fe706 	br	8d00 <__alt_data_end+0xff008d00>
    8d64:	f800283a 	ret
    8d68:	0005883a 	mov	r2,zero
    8d6c:	f800283a 	ret

00008d70 <_realloc_r>:
    8d70:	defff604 	addi	sp,sp,-40
    8d74:	dc800215 	stw	r18,8(sp)
    8d78:	dfc00915 	stw	ra,36(sp)
    8d7c:	df000815 	stw	fp,32(sp)
    8d80:	ddc00715 	stw	r23,28(sp)
    8d84:	dd800615 	stw	r22,24(sp)
    8d88:	dd400515 	stw	r21,20(sp)
    8d8c:	dd000415 	stw	r20,16(sp)
    8d90:	dcc00315 	stw	r19,12(sp)
    8d94:	dc400115 	stw	r17,4(sp)
    8d98:	dc000015 	stw	r16,0(sp)
    8d9c:	3025883a 	mov	r18,r6
    8da0:	2800b726 	beq	r5,zero,9080 <_realloc_r+0x310>
    8da4:	282b883a 	mov	r21,r5
    8da8:	2029883a 	mov	r20,r4
    8dac:	000eb700 	call	eb70 <__malloc_lock>
    8db0:	a8bfff17 	ldw	r2,-4(r21)
    8db4:	043fff04 	movi	r16,-4
    8db8:	90c002c4 	addi	r3,r18,11
    8dbc:	01000584 	movi	r4,22
    8dc0:	acfffe04 	addi	r19,r21,-8
    8dc4:	1420703a 	and	r16,r2,r16
    8dc8:	20c0332e 	bgeu	r4,r3,8e98 <_realloc_r+0x128>
    8dcc:	047ffe04 	movi	r17,-8
    8dd0:	1c62703a 	and	r17,r3,r17
    8dd4:	8807883a 	mov	r3,r17
    8dd8:	88005816 	blt	r17,zero,8f3c <_realloc_r+0x1cc>
    8ddc:	8c805736 	bltu	r17,r18,8f3c <_realloc_r+0x1cc>
    8de0:	80c0300e 	bge	r16,r3,8ea4 <_realloc_r+0x134>
    8de4:	07000074 	movhi	fp,1
    8de8:	e705ff04 	addi	fp,fp,6140
    8dec:	e1c00217 	ldw	r7,8(fp)
    8df0:	9c09883a 	add	r4,r19,r16
    8df4:	22000117 	ldw	r8,4(r4)
    8df8:	21c06326 	beq	r4,r7,8f88 <_realloc_r+0x218>
    8dfc:	017fff84 	movi	r5,-2
    8e00:	414a703a 	and	r5,r8,r5
    8e04:	214b883a 	add	r5,r4,r5
    8e08:	29800117 	ldw	r6,4(r5)
    8e0c:	3180004c 	andi	r6,r6,1
    8e10:	30003f26 	beq	r6,zero,8f10 <_realloc_r+0x1a0>
    8e14:	1080004c 	andi	r2,r2,1
    8e18:	10008326 	beq	r2,zero,9028 <_realloc_r+0x2b8>
    8e1c:	900b883a 	mov	r5,r18
    8e20:	a009883a 	mov	r4,r20
    8e24:	0001e880 	call	1e88 <_malloc_r>
    8e28:	1025883a 	mov	r18,r2
    8e2c:	10011e26 	beq	r2,zero,92a8 <_realloc_r+0x538>
    8e30:	a93fff17 	ldw	r4,-4(r21)
    8e34:	10fffe04 	addi	r3,r2,-8
    8e38:	00bfff84 	movi	r2,-2
    8e3c:	2084703a 	and	r2,r4,r2
    8e40:	9885883a 	add	r2,r19,r2
    8e44:	1880ee26 	beq	r3,r2,9200 <_realloc_r+0x490>
    8e48:	81bfff04 	addi	r6,r16,-4
    8e4c:	00800904 	movi	r2,36
    8e50:	1180b836 	bltu	r2,r6,9134 <_realloc_r+0x3c4>
    8e54:	00c004c4 	movi	r3,19
    8e58:	19809636 	bltu	r3,r6,90b4 <_realloc_r+0x344>
    8e5c:	9005883a 	mov	r2,r18
    8e60:	a807883a 	mov	r3,r21
    8e64:	19000017 	ldw	r4,0(r3)
    8e68:	11000015 	stw	r4,0(r2)
    8e6c:	19000117 	ldw	r4,4(r3)
    8e70:	11000115 	stw	r4,4(r2)
    8e74:	18c00217 	ldw	r3,8(r3)
    8e78:	10c00215 	stw	r3,8(r2)
    8e7c:	a80b883a 	mov	r5,r21
    8e80:	a009883a 	mov	r4,r20
    8e84:	0006e200 	call	6e20 <_free_r>
    8e88:	a009883a 	mov	r4,r20
    8e8c:	000eb940 	call	eb94 <__malloc_unlock>
    8e90:	9005883a 	mov	r2,r18
    8e94:	00001206 	br	8ee0 <_realloc_r+0x170>
    8e98:	00c00404 	movi	r3,16
    8e9c:	1823883a 	mov	r17,r3
    8ea0:	003fce06 	br	8ddc <__alt_data_end+0xff008ddc>
    8ea4:	a825883a 	mov	r18,r21
    8ea8:	8445c83a 	sub	r2,r16,r17
    8eac:	00c003c4 	movi	r3,15
    8eb0:	18802636 	bltu	r3,r2,8f4c <_realloc_r+0x1dc>
    8eb4:	99800117 	ldw	r6,4(r19)
    8eb8:	9c07883a 	add	r3,r19,r16
    8ebc:	3180004c 	andi	r6,r6,1
    8ec0:	3420b03a 	or	r16,r6,r16
    8ec4:	9c000115 	stw	r16,4(r19)
    8ec8:	18800117 	ldw	r2,4(r3)
    8ecc:	10800054 	ori	r2,r2,1
    8ed0:	18800115 	stw	r2,4(r3)
    8ed4:	a009883a 	mov	r4,r20
    8ed8:	000eb940 	call	eb94 <__malloc_unlock>
    8edc:	9005883a 	mov	r2,r18
    8ee0:	dfc00917 	ldw	ra,36(sp)
    8ee4:	df000817 	ldw	fp,32(sp)
    8ee8:	ddc00717 	ldw	r23,28(sp)
    8eec:	dd800617 	ldw	r22,24(sp)
    8ef0:	dd400517 	ldw	r21,20(sp)
    8ef4:	dd000417 	ldw	r20,16(sp)
    8ef8:	dcc00317 	ldw	r19,12(sp)
    8efc:	dc800217 	ldw	r18,8(sp)
    8f00:	dc400117 	ldw	r17,4(sp)
    8f04:	dc000017 	ldw	r16,0(sp)
    8f08:	dec00a04 	addi	sp,sp,40
    8f0c:	f800283a 	ret
    8f10:	017fff04 	movi	r5,-4
    8f14:	414a703a 	and	r5,r8,r5
    8f18:	814d883a 	add	r6,r16,r5
    8f1c:	30c01f16 	blt	r6,r3,8f9c <_realloc_r+0x22c>
    8f20:	20800317 	ldw	r2,12(r4)
    8f24:	20c00217 	ldw	r3,8(r4)
    8f28:	a825883a 	mov	r18,r21
    8f2c:	3021883a 	mov	r16,r6
    8f30:	18800315 	stw	r2,12(r3)
    8f34:	10c00215 	stw	r3,8(r2)
    8f38:	003fdb06 	br	8ea8 <__alt_data_end+0xff008ea8>
    8f3c:	00800304 	movi	r2,12
    8f40:	a0800015 	stw	r2,0(r20)
    8f44:	0005883a 	mov	r2,zero
    8f48:	003fe506 	br	8ee0 <__alt_data_end+0xff008ee0>
    8f4c:	98c00117 	ldw	r3,4(r19)
    8f50:	9c4b883a 	add	r5,r19,r17
    8f54:	11000054 	ori	r4,r2,1
    8f58:	18c0004c 	andi	r3,r3,1
    8f5c:	1c62b03a 	or	r17,r3,r17
    8f60:	9c400115 	stw	r17,4(r19)
    8f64:	29000115 	stw	r4,4(r5)
    8f68:	2885883a 	add	r2,r5,r2
    8f6c:	10c00117 	ldw	r3,4(r2)
    8f70:	29400204 	addi	r5,r5,8
    8f74:	a009883a 	mov	r4,r20
    8f78:	18c00054 	ori	r3,r3,1
    8f7c:	10c00115 	stw	r3,4(r2)
    8f80:	0006e200 	call	6e20 <_free_r>
    8f84:	003fd306 	br	8ed4 <__alt_data_end+0xff008ed4>
    8f88:	017fff04 	movi	r5,-4
    8f8c:	414a703a 	and	r5,r8,r5
    8f90:	89800404 	addi	r6,r17,16
    8f94:	8151883a 	add	r8,r16,r5
    8f98:	4180590e 	bge	r8,r6,9100 <_realloc_r+0x390>
    8f9c:	1080004c 	andi	r2,r2,1
    8fa0:	103f9e1e 	bne	r2,zero,8e1c <__alt_data_end+0xff008e1c>
    8fa4:	adbffe17 	ldw	r22,-8(r21)
    8fa8:	00bfff04 	movi	r2,-4
    8fac:	9dadc83a 	sub	r22,r19,r22
    8fb0:	b1800117 	ldw	r6,4(r22)
    8fb4:	3084703a 	and	r2,r6,r2
    8fb8:	20002026 	beq	r4,zero,903c <_realloc_r+0x2cc>
    8fbc:	80af883a 	add	r23,r16,r2
    8fc0:	b96f883a 	add	r23,r23,r5
    8fc4:	21c05f26 	beq	r4,r7,9144 <_realloc_r+0x3d4>
    8fc8:	b8c01c16 	blt	r23,r3,903c <_realloc_r+0x2cc>
    8fcc:	20800317 	ldw	r2,12(r4)
    8fd0:	20c00217 	ldw	r3,8(r4)
    8fd4:	81bfff04 	addi	r6,r16,-4
    8fd8:	01000904 	movi	r4,36
    8fdc:	18800315 	stw	r2,12(r3)
    8fe0:	10c00215 	stw	r3,8(r2)
    8fe4:	b0c00217 	ldw	r3,8(r22)
    8fe8:	b0800317 	ldw	r2,12(r22)
    8fec:	b4800204 	addi	r18,r22,8
    8ff0:	18800315 	stw	r2,12(r3)
    8ff4:	10c00215 	stw	r3,8(r2)
    8ff8:	21801b36 	bltu	r4,r6,9068 <_realloc_r+0x2f8>
    8ffc:	008004c4 	movi	r2,19
    9000:	1180352e 	bgeu	r2,r6,90d8 <_realloc_r+0x368>
    9004:	a8800017 	ldw	r2,0(r21)
    9008:	b0800215 	stw	r2,8(r22)
    900c:	a8800117 	ldw	r2,4(r21)
    9010:	b0800315 	stw	r2,12(r22)
    9014:	008006c4 	movi	r2,27
    9018:	11807f36 	bltu	r2,r6,9218 <_realloc_r+0x4a8>
    901c:	b0800404 	addi	r2,r22,16
    9020:	ad400204 	addi	r21,r21,8
    9024:	00002d06 	br	90dc <_realloc_r+0x36c>
    9028:	adbffe17 	ldw	r22,-8(r21)
    902c:	00bfff04 	movi	r2,-4
    9030:	9dadc83a 	sub	r22,r19,r22
    9034:	b1000117 	ldw	r4,4(r22)
    9038:	2084703a 	and	r2,r4,r2
    903c:	b03f7726 	beq	r22,zero,8e1c <__alt_data_end+0xff008e1c>
    9040:	80af883a 	add	r23,r16,r2
    9044:	b8ff7516 	blt	r23,r3,8e1c <__alt_data_end+0xff008e1c>
    9048:	b0800317 	ldw	r2,12(r22)
    904c:	b0c00217 	ldw	r3,8(r22)
    9050:	81bfff04 	addi	r6,r16,-4
    9054:	01000904 	movi	r4,36
    9058:	18800315 	stw	r2,12(r3)
    905c:	10c00215 	stw	r3,8(r2)
    9060:	b4800204 	addi	r18,r22,8
    9064:	21bfe52e 	bgeu	r4,r6,8ffc <__alt_data_end+0xff008ffc>
    9068:	a80b883a 	mov	r5,r21
    906c:	9009883a 	mov	r4,r18
    9070:	0007af00 	call	7af0 <memmove>
    9074:	b821883a 	mov	r16,r23
    9078:	b027883a 	mov	r19,r22
    907c:	003f8a06 	br	8ea8 <__alt_data_end+0xff008ea8>
    9080:	300b883a 	mov	r5,r6
    9084:	dfc00917 	ldw	ra,36(sp)
    9088:	df000817 	ldw	fp,32(sp)
    908c:	ddc00717 	ldw	r23,28(sp)
    9090:	dd800617 	ldw	r22,24(sp)
    9094:	dd400517 	ldw	r21,20(sp)
    9098:	dd000417 	ldw	r20,16(sp)
    909c:	dcc00317 	ldw	r19,12(sp)
    90a0:	dc800217 	ldw	r18,8(sp)
    90a4:	dc400117 	ldw	r17,4(sp)
    90a8:	dc000017 	ldw	r16,0(sp)
    90ac:	dec00a04 	addi	sp,sp,40
    90b0:	0001e881 	jmpi	1e88 <_malloc_r>
    90b4:	a8c00017 	ldw	r3,0(r21)
    90b8:	90c00015 	stw	r3,0(r18)
    90bc:	a8c00117 	ldw	r3,4(r21)
    90c0:	90c00115 	stw	r3,4(r18)
    90c4:	00c006c4 	movi	r3,27
    90c8:	19804536 	bltu	r3,r6,91e0 <_realloc_r+0x470>
    90cc:	90800204 	addi	r2,r18,8
    90d0:	a8c00204 	addi	r3,r21,8
    90d4:	003f6306 	br	8e64 <__alt_data_end+0xff008e64>
    90d8:	9005883a 	mov	r2,r18
    90dc:	a8c00017 	ldw	r3,0(r21)
    90e0:	b821883a 	mov	r16,r23
    90e4:	b027883a 	mov	r19,r22
    90e8:	10c00015 	stw	r3,0(r2)
    90ec:	a8c00117 	ldw	r3,4(r21)
    90f0:	10c00115 	stw	r3,4(r2)
    90f4:	a8c00217 	ldw	r3,8(r21)
    90f8:	10c00215 	stw	r3,8(r2)
    90fc:	003f6a06 	br	8ea8 <__alt_data_end+0xff008ea8>
    9100:	9c67883a 	add	r19,r19,r17
    9104:	4445c83a 	sub	r2,r8,r17
    9108:	e4c00215 	stw	r19,8(fp)
    910c:	10800054 	ori	r2,r2,1
    9110:	98800115 	stw	r2,4(r19)
    9114:	a8bfff17 	ldw	r2,-4(r21)
    9118:	a009883a 	mov	r4,r20
    911c:	1080004c 	andi	r2,r2,1
    9120:	1462b03a 	or	r17,r2,r17
    9124:	ac7fff15 	stw	r17,-4(r21)
    9128:	000eb940 	call	eb94 <__malloc_unlock>
    912c:	a805883a 	mov	r2,r21
    9130:	003f6b06 	br	8ee0 <__alt_data_end+0xff008ee0>
    9134:	a80b883a 	mov	r5,r21
    9138:	9009883a 	mov	r4,r18
    913c:	0007af00 	call	7af0 <memmove>
    9140:	003f4e06 	br	8e7c <__alt_data_end+0xff008e7c>
    9144:	89000404 	addi	r4,r17,16
    9148:	b93fbc16 	blt	r23,r4,903c <__alt_data_end+0xff00903c>
    914c:	b0800317 	ldw	r2,12(r22)
    9150:	b0c00217 	ldw	r3,8(r22)
    9154:	81bfff04 	addi	r6,r16,-4
    9158:	01000904 	movi	r4,36
    915c:	18800315 	stw	r2,12(r3)
    9160:	10c00215 	stw	r3,8(r2)
    9164:	b4800204 	addi	r18,r22,8
    9168:	21804336 	bltu	r4,r6,9278 <_realloc_r+0x508>
    916c:	008004c4 	movi	r2,19
    9170:	11803f2e 	bgeu	r2,r6,9270 <_realloc_r+0x500>
    9174:	a8800017 	ldw	r2,0(r21)
    9178:	b0800215 	stw	r2,8(r22)
    917c:	a8800117 	ldw	r2,4(r21)
    9180:	b0800315 	stw	r2,12(r22)
    9184:	008006c4 	movi	r2,27
    9188:	11803f36 	bltu	r2,r6,9288 <_realloc_r+0x518>
    918c:	b0800404 	addi	r2,r22,16
    9190:	ad400204 	addi	r21,r21,8
    9194:	a8c00017 	ldw	r3,0(r21)
    9198:	10c00015 	stw	r3,0(r2)
    919c:	a8c00117 	ldw	r3,4(r21)
    91a0:	10c00115 	stw	r3,4(r2)
    91a4:	a8c00217 	ldw	r3,8(r21)
    91a8:	10c00215 	stw	r3,8(r2)
    91ac:	b447883a 	add	r3,r22,r17
    91b0:	bc45c83a 	sub	r2,r23,r17
    91b4:	e0c00215 	stw	r3,8(fp)
    91b8:	10800054 	ori	r2,r2,1
    91bc:	18800115 	stw	r2,4(r3)
    91c0:	b0800117 	ldw	r2,4(r22)
    91c4:	a009883a 	mov	r4,r20
    91c8:	1080004c 	andi	r2,r2,1
    91cc:	1462b03a 	or	r17,r2,r17
    91d0:	b4400115 	stw	r17,4(r22)
    91d4:	000eb940 	call	eb94 <__malloc_unlock>
    91d8:	9005883a 	mov	r2,r18
    91dc:	003f4006 	br	8ee0 <__alt_data_end+0xff008ee0>
    91e0:	a8c00217 	ldw	r3,8(r21)
    91e4:	90c00215 	stw	r3,8(r18)
    91e8:	a8c00317 	ldw	r3,12(r21)
    91ec:	90c00315 	stw	r3,12(r18)
    91f0:	30801126 	beq	r6,r2,9238 <_realloc_r+0x4c8>
    91f4:	90800404 	addi	r2,r18,16
    91f8:	a8c00404 	addi	r3,r21,16
    91fc:	003f1906 	br	8e64 <__alt_data_end+0xff008e64>
    9200:	90ffff17 	ldw	r3,-4(r18)
    9204:	00bfff04 	movi	r2,-4
    9208:	a825883a 	mov	r18,r21
    920c:	1884703a 	and	r2,r3,r2
    9210:	80a1883a 	add	r16,r16,r2
    9214:	003f2406 	br	8ea8 <__alt_data_end+0xff008ea8>
    9218:	a8800217 	ldw	r2,8(r21)
    921c:	b0800415 	stw	r2,16(r22)
    9220:	a8800317 	ldw	r2,12(r21)
    9224:	b0800515 	stw	r2,20(r22)
    9228:	31000a26 	beq	r6,r4,9254 <_realloc_r+0x4e4>
    922c:	b0800604 	addi	r2,r22,24
    9230:	ad400404 	addi	r21,r21,16
    9234:	003fa906 	br	90dc <__alt_data_end+0xff0090dc>
    9238:	a9000417 	ldw	r4,16(r21)
    923c:	90800604 	addi	r2,r18,24
    9240:	a8c00604 	addi	r3,r21,24
    9244:	91000415 	stw	r4,16(r18)
    9248:	a9000517 	ldw	r4,20(r21)
    924c:	91000515 	stw	r4,20(r18)
    9250:	003f0406 	br	8e64 <__alt_data_end+0xff008e64>
    9254:	a8c00417 	ldw	r3,16(r21)
    9258:	ad400604 	addi	r21,r21,24
    925c:	b0800804 	addi	r2,r22,32
    9260:	b0c00615 	stw	r3,24(r22)
    9264:	a8ffff17 	ldw	r3,-4(r21)
    9268:	b0c00715 	stw	r3,28(r22)
    926c:	003f9b06 	br	90dc <__alt_data_end+0xff0090dc>
    9270:	9005883a 	mov	r2,r18
    9274:	003fc706 	br	9194 <__alt_data_end+0xff009194>
    9278:	a80b883a 	mov	r5,r21
    927c:	9009883a 	mov	r4,r18
    9280:	0007af00 	call	7af0 <memmove>
    9284:	003fc906 	br	91ac <__alt_data_end+0xff0091ac>
    9288:	a8800217 	ldw	r2,8(r21)
    928c:	b0800415 	stw	r2,16(r22)
    9290:	a8800317 	ldw	r2,12(r21)
    9294:	b0800515 	stw	r2,20(r22)
    9298:	31000726 	beq	r6,r4,92b8 <_realloc_r+0x548>
    929c:	b0800604 	addi	r2,r22,24
    92a0:	ad400404 	addi	r21,r21,16
    92a4:	003fbb06 	br	9194 <__alt_data_end+0xff009194>
    92a8:	a009883a 	mov	r4,r20
    92ac:	000eb940 	call	eb94 <__malloc_unlock>
    92b0:	0005883a 	mov	r2,zero
    92b4:	003f0a06 	br	8ee0 <__alt_data_end+0xff008ee0>
    92b8:	a8c00417 	ldw	r3,16(r21)
    92bc:	ad400604 	addi	r21,r21,24
    92c0:	b0800804 	addi	r2,r22,32
    92c4:	b0c00615 	stw	r3,24(r22)
    92c8:	a8ffff17 	ldw	r3,-4(r21)
    92cc:	b0c00715 	stw	r3,28(r22)
    92d0:	003fb006 	br	9194 <__alt_data_end+0xff009194>

000092d4 <__fpclassifyd>:
    92d4:	00a00034 	movhi	r2,32768
    92d8:	10bfffc4 	addi	r2,r2,-1
    92dc:	2884703a 	and	r2,r5,r2
    92e0:	10000726 	beq	r2,zero,9300 <__fpclassifyd+0x2c>
    92e4:	00fffc34 	movhi	r3,65520
    92e8:	019ff834 	movhi	r6,32736
    92ec:	28c7883a 	add	r3,r5,r3
    92f0:	31bfffc4 	addi	r6,r6,-1
    92f4:	30c00536 	bltu	r6,r3,930c <__fpclassifyd+0x38>
    92f8:	00800104 	movi	r2,4
    92fc:	f800283a 	ret
    9300:	2000021e 	bne	r4,zero,930c <__fpclassifyd+0x38>
    9304:	00800084 	movi	r2,2
    9308:	f800283a 	ret
    930c:	00dffc34 	movhi	r3,32752
    9310:	019ff834 	movhi	r6,32736
    9314:	28cb883a 	add	r5,r5,r3
    9318:	31bfffc4 	addi	r6,r6,-1
    931c:	317ff62e 	bgeu	r6,r5,92f8 <__alt_data_end+0xff0092f8>
    9320:	01400434 	movhi	r5,16
    9324:	297fffc4 	addi	r5,r5,-1
    9328:	28800236 	bltu	r5,r2,9334 <__fpclassifyd+0x60>
    932c:	008000c4 	movi	r2,3
    9330:	f800283a 	ret
    9334:	10c00226 	beq	r2,r3,9340 <__fpclassifyd+0x6c>
    9338:	0005883a 	mov	r2,zero
    933c:	f800283a 	ret
    9340:	2005003a 	cmpeq	r2,r4,zero
    9344:	f800283a 	ret

00009348 <__sread>:
    9348:	defffe04 	addi	sp,sp,-8
    934c:	dc000015 	stw	r16,0(sp)
    9350:	2821883a 	mov	r16,r5
    9354:	2940038f 	ldh	r5,14(r5)
    9358:	dfc00115 	stw	ra,4(sp)
    935c:	000b13c0 	call	b13c <_read_r>
    9360:	10000716 	blt	r2,zero,9380 <__sread+0x38>
    9364:	80c01417 	ldw	r3,80(r16)
    9368:	1887883a 	add	r3,r3,r2
    936c:	80c01415 	stw	r3,80(r16)
    9370:	dfc00117 	ldw	ra,4(sp)
    9374:	dc000017 	ldw	r16,0(sp)
    9378:	dec00204 	addi	sp,sp,8
    937c:	f800283a 	ret
    9380:	80c0030b 	ldhu	r3,12(r16)
    9384:	18fbffcc 	andi	r3,r3,61439
    9388:	80c0030d 	sth	r3,12(r16)
    938c:	dfc00117 	ldw	ra,4(sp)
    9390:	dc000017 	ldw	r16,0(sp)
    9394:	dec00204 	addi	sp,sp,8
    9398:	f800283a 	ret

0000939c <__seofread>:
    939c:	0005883a 	mov	r2,zero
    93a0:	f800283a 	ret

000093a4 <__swrite>:
    93a4:	2880030b 	ldhu	r2,12(r5)
    93a8:	defffb04 	addi	sp,sp,-20
    93ac:	dcc00315 	stw	r19,12(sp)
    93b0:	dc800215 	stw	r18,8(sp)
    93b4:	dc400115 	stw	r17,4(sp)
    93b8:	dc000015 	stw	r16,0(sp)
    93bc:	dfc00415 	stw	ra,16(sp)
    93c0:	10c0400c 	andi	r3,r2,256
    93c4:	2821883a 	mov	r16,r5
    93c8:	2023883a 	mov	r17,r4
    93cc:	3025883a 	mov	r18,r6
    93d0:	3827883a 	mov	r19,r7
    93d4:	18000526 	beq	r3,zero,93ec <__swrite+0x48>
    93d8:	2940038f 	ldh	r5,14(r5)
    93dc:	01c00084 	movi	r7,2
    93e0:	000d883a 	mov	r6,zero
    93e4:	000b0dc0 	call	b0dc <_lseek_r>
    93e8:	8080030b 	ldhu	r2,12(r16)
    93ec:	8140038f 	ldh	r5,14(r16)
    93f0:	10bbffcc 	andi	r2,r2,61439
    93f4:	980f883a 	mov	r7,r19
    93f8:	900d883a 	mov	r6,r18
    93fc:	8809883a 	mov	r4,r17
    9400:	8080030d 	sth	r2,12(r16)
    9404:	dfc00417 	ldw	ra,16(sp)
    9408:	dcc00317 	ldw	r19,12(sp)
    940c:	dc800217 	ldw	r18,8(sp)
    9410:	dc400117 	ldw	r17,4(sp)
    9414:	dc000017 	ldw	r16,0(sp)
    9418:	dec00504 	addi	sp,sp,20
    941c:	000aba81 	jmpi	aba8 <_write_r>

00009420 <__sseek>:
    9420:	defffe04 	addi	sp,sp,-8
    9424:	dc000015 	stw	r16,0(sp)
    9428:	2821883a 	mov	r16,r5
    942c:	2940038f 	ldh	r5,14(r5)
    9430:	dfc00115 	stw	ra,4(sp)
    9434:	000b0dc0 	call	b0dc <_lseek_r>
    9438:	00ffffc4 	movi	r3,-1
    943c:	10c00826 	beq	r2,r3,9460 <__sseek+0x40>
    9440:	80c0030b 	ldhu	r3,12(r16)
    9444:	80801415 	stw	r2,80(r16)
    9448:	18c40014 	ori	r3,r3,4096
    944c:	80c0030d 	sth	r3,12(r16)
    9450:	dfc00117 	ldw	ra,4(sp)
    9454:	dc000017 	ldw	r16,0(sp)
    9458:	dec00204 	addi	sp,sp,8
    945c:	f800283a 	ret
    9460:	80c0030b 	ldhu	r3,12(r16)
    9464:	18fbffcc 	andi	r3,r3,61439
    9468:	80c0030d 	sth	r3,12(r16)
    946c:	dfc00117 	ldw	ra,4(sp)
    9470:	dc000017 	ldw	r16,0(sp)
    9474:	dec00204 	addi	sp,sp,8
    9478:	f800283a 	ret

0000947c <__sclose>:
    947c:	2940038f 	ldh	r5,14(r5)
    9480:	000ac081 	jmpi	ac08 <_close_r>

00009484 <strcmp>:
    9484:	2144b03a 	or	r2,r4,r5
    9488:	108000cc 	andi	r2,r2,3
    948c:	1000171e 	bne	r2,zero,94ec <strcmp+0x68>
    9490:	20800017 	ldw	r2,0(r4)
    9494:	28c00017 	ldw	r3,0(r5)
    9498:	10c0141e 	bne	r2,r3,94ec <strcmp+0x68>
    949c:	027fbff4 	movhi	r9,65279
    94a0:	4a7fbfc4 	addi	r9,r9,-257
    94a4:	0086303a 	nor	r3,zero,r2
    94a8:	02202074 	movhi	r8,32897
    94ac:	1245883a 	add	r2,r2,r9
    94b0:	42202004 	addi	r8,r8,-32640
    94b4:	10c4703a 	and	r2,r2,r3
    94b8:	1204703a 	and	r2,r2,r8
    94bc:	10000226 	beq	r2,zero,94c8 <strcmp+0x44>
    94c0:	00002306 	br	9550 <strcmp+0xcc>
    94c4:	1000221e 	bne	r2,zero,9550 <strcmp+0xcc>
    94c8:	21000104 	addi	r4,r4,4
    94cc:	20c00017 	ldw	r3,0(r4)
    94d0:	29400104 	addi	r5,r5,4
    94d4:	29800017 	ldw	r6,0(r5)
    94d8:	1a4f883a 	add	r7,r3,r9
    94dc:	00c4303a 	nor	r2,zero,r3
    94e0:	3884703a 	and	r2,r7,r2
    94e4:	1204703a 	and	r2,r2,r8
    94e8:	19bff626 	beq	r3,r6,94c4 <__alt_data_end+0xff0094c4>
    94ec:	20800003 	ldbu	r2,0(r4)
    94f0:	10c03fcc 	andi	r3,r2,255
    94f4:	18c0201c 	xori	r3,r3,128
    94f8:	18ffe004 	addi	r3,r3,-128
    94fc:	18000c26 	beq	r3,zero,9530 <strcmp+0xac>
    9500:	29800007 	ldb	r6,0(r5)
    9504:	19800326 	beq	r3,r6,9514 <strcmp+0x90>
    9508:	00001306 	br	9558 <strcmp+0xd4>
    950c:	29800007 	ldb	r6,0(r5)
    9510:	11800b1e 	bne	r2,r6,9540 <strcmp+0xbc>
    9514:	21000044 	addi	r4,r4,1
    9518:	20c00003 	ldbu	r3,0(r4)
    951c:	29400044 	addi	r5,r5,1
    9520:	18803fcc 	andi	r2,r3,255
    9524:	1080201c 	xori	r2,r2,128
    9528:	10bfe004 	addi	r2,r2,-128
    952c:	103ff71e 	bne	r2,zero,950c <__alt_data_end+0xff00950c>
    9530:	0007883a 	mov	r3,zero
    9534:	28800003 	ldbu	r2,0(r5)
    9538:	1885c83a 	sub	r2,r3,r2
    953c:	f800283a 	ret
    9540:	28800003 	ldbu	r2,0(r5)
    9544:	18c03fcc 	andi	r3,r3,255
    9548:	1885c83a 	sub	r2,r3,r2
    954c:	f800283a 	ret
    9550:	0005883a 	mov	r2,zero
    9554:	f800283a 	ret
    9558:	10c03fcc 	andi	r3,r2,255
    955c:	003ff506 	br	9534 <__alt_data_end+0xff009534>

00009560 <__sprint_r.part.0>:
    9560:	28801917 	ldw	r2,100(r5)
    9564:	defff604 	addi	sp,sp,-40
    9568:	dd400515 	stw	r21,20(sp)
    956c:	dfc00915 	stw	ra,36(sp)
    9570:	df000815 	stw	fp,32(sp)
    9574:	ddc00715 	stw	r23,28(sp)
    9578:	dd800615 	stw	r22,24(sp)
    957c:	dd000415 	stw	r20,16(sp)
    9580:	dcc00315 	stw	r19,12(sp)
    9584:	dc800215 	stw	r18,8(sp)
    9588:	dc400115 	stw	r17,4(sp)
    958c:	dc000015 	stw	r16,0(sp)
    9590:	1088000c 	andi	r2,r2,8192
    9594:	302b883a 	mov	r21,r6
    9598:	10002e26 	beq	r2,zero,9654 <__sprint_r.part.0+0xf4>
    959c:	30800217 	ldw	r2,8(r6)
    95a0:	35800017 	ldw	r22,0(r6)
    95a4:	10002926 	beq	r2,zero,964c <__sprint_r.part.0+0xec>
    95a8:	2827883a 	mov	r19,r5
    95ac:	2029883a 	mov	r20,r4
    95b0:	b5c00104 	addi	r23,r22,4
    95b4:	04bfffc4 	movi	r18,-1
    95b8:	bc400017 	ldw	r17,0(r23)
    95bc:	b4000017 	ldw	r16,0(r22)
    95c0:	0039883a 	mov	fp,zero
    95c4:	8822d0ba 	srli	r17,r17,2
    95c8:	8800031e 	bne	r17,zero,95d8 <__sprint_r.part.0+0x78>
    95cc:	00001806 	br	9630 <__sprint_r.part.0+0xd0>
    95d0:	84000104 	addi	r16,r16,4
    95d4:	8f001526 	beq	r17,fp,962c <__sprint_r.part.0+0xcc>
    95d8:	81400017 	ldw	r5,0(r16)
    95dc:	980d883a 	mov	r6,r19
    95e0:	a009883a 	mov	r4,r20
    95e4:	000af880 	call	af88 <_fputwc_r>
    95e8:	e7000044 	addi	fp,fp,1
    95ec:	14bff81e 	bne	r2,r18,95d0 <__alt_data_end+0xff0095d0>
    95f0:	9005883a 	mov	r2,r18
    95f4:	a8000215 	stw	zero,8(r21)
    95f8:	a8000115 	stw	zero,4(r21)
    95fc:	dfc00917 	ldw	ra,36(sp)
    9600:	df000817 	ldw	fp,32(sp)
    9604:	ddc00717 	ldw	r23,28(sp)
    9608:	dd800617 	ldw	r22,24(sp)
    960c:	dd400517 	ldw	r21,20(sp)
    9610:	dd000417 	ldw	r20,16(sp)
    9614:	dcc00317 	ldw	r19,12(sp)
    9618:	dc800217 	ldw	r18,8(sp)
    961c:	dc400117 	ldw	r17,4(sp)
    9620:	dc000017 	ldw	r16,0(sp)
    9624:	dec00a04 	addi	sp,sp,40
    9628:	f800283a 	ret
    962c:	a8800217 	ldw	r2,8(r21)
    9630:	8c63883a 	add	r17,r17,r17
    9634:	8c63883a 	add	r17,r17,r17
    9638:	1445c83a 	sub	r2,r2,r17
    963c:	a8800215 	stw	r2,8(r21)
    9640:	b5800204 	addi	r22,r22,8
    9644:	bdc00204 	addi	r23,r23,8
    9648:	103fdb1e 	bne	r2,zero,95b8 <__alt_data_end+0xff0095b8>
    964c:	0005883a 	mov	r2,zero
    9650:	003fe806 	br	95f4 <__alt_data_end+0xff0095f4>
    9654:	00071300 	call	7130 <__sfvwrite_r>
    9658:	003fe606 	br	95f4 <__alt_data_end+0xff0095f4>

0000965c <__sprint_r>:
    965c:	30c00217 	ldw	r3,8(r6)
    9660:	18000126 	beq	r3,zero,9668 <__sprint_r+0xc>
    9664:	00095601 	jmpi	9560 <__sprint_r.part.0>
    9668:	30000115 	stw	zero,4(r6)
    966c:	0005883a 	mov	r2,zero
    9670:	f800283a 	ret

00009674 <___vfiprintf_internal_r>:
    9674:	deffc904 	addi	sp,sp,-220
    9678:	df003515 	stw	fp,212(sp)
    967c:	dd003115 	stw	r20,196(sp)
    9680:	dfc03615 	stw	ra,216(sp)
    9684:	ddc03415 	stw	r23,208(sp)
    9688:	dd803315 	stw	r22,204(sp)
    968c:	dd403215 	stw	r21,200(sp)
    9690:	dcc03015 	stw	r19,192(sp)
    9694:	dc802f15 	stw	r18,188(sp)
    9698:	dc402e15 	stw	r17,184(sp)
    969c:	dc002d15 	stw	r16,180(sp)
    96a0:	d9002015 	stw	r4,128(sp)
    96a4:	d9c02215 	stw	r7,136(sp)
    96a8:	2829883a 	mov	r20,r5
    96ac:	3039883a 	mov	fp,r6
    96b0:	20000226 	beq	r4,zero,96bc <___vfiprintf_internal_r+0x48>
    96b4:	20800e17 	ldw	r2,56(r4)
    96b8:	1000cf26 	beq	r2,zero,99f8 <___vfiprintf_internal_r+0x384>
    96bc:	a080030b 	ldhu	r2,12(r20)
    96c0:	10c8000c 	andi	r3,r2,8192
    96c4:	1800061e 	bne	r3,zero,96e0 <___vfiprintf_internal_r+0x6c>
    96c8:	a1001917 	ldw	r4,100(r20)
    96cc:	00f7ffc4 	movi	r3,-8193
    96d0:	10880014 	ori	r2,r2,8192
    96d4:	20c6703a 	and	r3,r4,r3
    96d8:	a080030d 	sth	r2,12(r20)
    96dc:	a0c01915 	stw	r3,100(r20)
    96e0:	10c0020c 	andi	r3,r2,8
    96e4:	1800a926 	beq	r3,zero,998c <___vfiprintf_internal_r+0x318>
    96e8:	a0c00417 	ldw	r3,16(r20)
    96ec:	1800a726 	beq	r3,zero,998c <___vfiprintf_internal_r+0x318>
    96f0:	1080068c 	andi	r2,r2,26
    96f4:	00c00284 	movi	r3,10
    96f8:	10c0ac26 	beq	r2,r3,99ac <___vfiprintf_internal_r+0x338>
    96fc:	da801a04 	addi	r10,sp,104
    9700:	da801e15 	stw	r10,120(sp)
    9704:	d8801e17 	ldw	r2,120(sp)
    9708:	da8019c4 	addi	r10,sp,103
    970c:	05800074 	movhi	r22,1
    9710:	05c00074 	movhi	r23,1
    9714:	da801f15 	stw	r10,124(sp)
    9718:	1295c83a 	sub	r10,r2,r10
    971c:	b585b004 	addi	r22,r22,5824
    9720:	bdc5ac04 	addi	r23,r23,5808
    9724:	dec01a15 	stw	sp,104(sp)
    9728:	d8001c15 	stw	zero,112(sp)
    972c:	d8001b15 	stw	zero,108(sp)
    9730:	d8002615 	stw	zero,152(sp)
    9734:	d8002315 	stw	zero,140(sp)
    9738:	da802715 	stw	r10,156(sp)
    973c:	d811883a 	mov	r8,sp
    9740:	dd002115 	stw	r20,132(sp)
    9744:	e021883a 	mov	r16,fp
    9748:	80800007 	ldb	r2,0(r16)
    974c:	1003ea26 	beq	r2,zero,a6f8 <___vfiprintf_internal_r+0x1084>
    9750:	00c00944 	movi	r3,37
    9754:	8025883a 	mov	r18,r16
    9758:	10c0021e 	bne	r2,r3,9764 <___vfiprintf_internal_r+0xf0>
    975c:	00001606 	br	97b8 <___vfiprintf_internal_r+0x144>
    9760:	10c00326 	beq	r2,r3,9770 <___vfiprintf_internal_r+0xfc>
    9764:	94800044 	addi	r18,r18,1
    9768:	90800007 	ldb	r2,0(r18)
    976c:	103ffc1e 	bne	r2,zero,9760 <__alt_data_end+0xff009760>
    9770:	9423c83a 	sub	r17,r18,r16
    9774:	88001026 	beq	r17,zero,97b8 <___vfiprintf_internal_r+0x144>
    9778:	d8c01c17 	ldw	r3,112(sp)
    977c:	d8801b17 	ldw	r2,108(sp)
    9780:	44000015 	stw	r16,0(r8)
    9784:	88c7883a 	add	r3,r17,r3
    9788:	10800044 	addi	r2,r2,1
    978c:	44400115 	stw	r17,4(r8)
    9790:	d8c01c15 	stw	r3,112(sp)
    9794:	d8801b15 	stw	r2,108(sp)
    9798:	010001c4 	movi	r4,7
    979c:	2080760e 	bge	r4,r2,9978 <___vfiprintf_internal_r+0x304>
    97a0:	1803821e 	bne	r3,zero,a5ac <___vfiprintf_internal_r+0xf38>
    97a4:	da802317 	ldw	r10,140(sp)
    97a8:	d8001b15 	stw	zero,108(sp)
    97ac:	d811883a 	mov	r8,sp
    97b0:	5455883a 	add	r10,r10,r17
    97b4:	da802315 	stw	r10,140(sp)
    97b8:	90800007 	ldb	r2,0(r18)
    97bc:	10044626 	beq	r2,zero,a8d8 <___vfiprintf_internal_r+0x1264>
    97c0:	90c00047 	ldb	r3,1(r18)
    97c4:	94000044 	addi	r16,r18,1
    97c8:	d8001d85 	stb	zero,118(sp)
    97cc:	0009883a 	mov	r4,zero
    97d0:	000f883a 	mov	r7,zero
    97d4:	027fffc4 	movi	r9,-1
    97d8:	0023883a 	mov	r17,zero
    97dc:	0029883a 	mov	r20,zero
    97e0:	01401604 	movi	r5,88
    97e4:	01800244 	movi	r6,9
    97e8:	03400a84 	movi	r13,42
    97ec:	03001b04 	movi	r12,108
    97f0:	84000044 	addi	r16,r16,1
    97f4:	18bff804 	addi	r2,r3,-32
    97f8:	28827336 	bltu	r5,r2,a1c8 <___vfiprintf_internal_r+0xb54>
    97fc:	100490ba 	slli	r2,r2,2
    9800:	02800074 	movhi	r10,1
    9804:	52a60504 	addi	r10,r10,-26604
    9808:	1285883a 	add	r2,r2,r10
    980c:	10800017 	ldw	r2,0(r2)
    9810:	1000683a 	jmp	r2
    9814:	00009efc 	xorhi	zero,zero,635
    9818:	0000a1c8 	cmpgei	zero,zero,647
    981c:	0000a1c8 	cmpgei	zero,zero,647
    9820:	00009f1c 	xori	zero,zero,636
    9824:	0000a1c8 	cmpgei	zero,zero,647
    9828:	0000a1c8 	cmpgei	zero,zero,647
    982c:	0000a1c8 	cmpgei	zero,zero,647
    9830:	0000a1c8 	cmpgei	zero,zero,647
    9834:	0000a1c8 	cmpgei	zero,zero,647
    9838:	0000a1c8 	cmpgei	zero,zero,647
    983c:	0000a104 	movi	zero,644
    9840:	0000a120 	cmpeqi	zero,zero,644
    9844:	0000a1c8 	cmpgei	zero,zero,647
    9848:	00009a08 	cmpgei	zero,zero,616
    984c:	0000a130 	cmpltui	zero,zero,644
    9850:	0000a1c8 	cmpgei	zero,zero,647
    9854:	00009f28 	cmpgeui	zero,zero,636
    9858:	00009f34 	movhi	zero,636
    985c:	00009f34 	movhi	zero,636
    9860:	00009f34 	movhi	zero,636
    9864:	00009f34 	movhi	zero,636
    9868:	00009f34 	movhi	zero,636
    986c:	00009f34 	movhi	zero,636
    9870:	00009f34 	movhi	zero,636
    9874:	00009f34 	movhi	zero,636
    9878:	00009f34 	movhi	zero,636
    987c:	0000a1c8 	cmpgei	zero,zero,647
    9880:	0000a1c8 	cmpgei	zero,zero,647
    9884:	0000a1c8 	cmpgei	zero,zero,647
    9888:	0000a1c8 	cmpgei	zero,zero,647
    988c:	0000a1c8 	cmpgei	zero,zero,647
    9890:	0000a1c8 	cmpgei	zero,zero,647
    9894:	0000a1c8 	cmpgei	zero,zero,647
    9898:	0000a1c8 	cmpgei	zero,zero,647
    989c:	0000a1c8 	cmpgei	zero,zero,647
    98a0:	0000a1c8 	cmpgei	zero,zero,647
    98a4:	00009f60 	cmpeqi	zero,zero,637
    98a8:	0000a1c8 	cmpgei	zero,zero,647
    98ac:	0000a1c8 	cmpgei	zero,zero,647
    98b0:	0000a1c8 	cmpgei	zero,zero,647
    98b4:	0000a1c8 	cmpgei	zero,zero,647
    98b8:	0000a1c8 	cmpgei	zero,zero,647
    98bc:	0000a1c8 	cmpgei	zero,zero,647
    98c0:	0000a1c8 	cmpgei	zero,zero,647
    98c4:	0000a1c8 	cmpgei	zero,zero,647
    98c8:	0000a1c8 	cmpgei	zero,zero,647
    98cc:	0000a1c8 	cmpgei	zero,zero,647
    98d0:	00009f98 	cmpnei	zero,zero,638
    98d4:	0000a1c8 	cmpgei	zero,zero,647
    98d8:	0000a1c8 	cmpgei	zero,zero,647
    98dc:	0000a1c8 	cmpgei	zero,zero,647
    98e0:	0000a1c8 	cmpgei	zero,zero,647
    98e4:	0000a1c8 	cmpgei	zero,zero,647
    98e8:	00009ff0 	cmpltui	zero,zero,639
    98ec:	0000a1c8 	cmpgei	zero,zero,647
    98f0:	0000a1c8 	cmpgei	zero,zero,647
    98f4:	0000a060 	cmpeqi	zero,zero,641
    98f8:	0000a1c8 	cmpgei	zero,zero,647
    98fc:	0000a1c8 	cmpgei	zero,zero,647
    9900:	0000a1c8 	cmpgei	zero,zero,647
    9904:	0000a1c8 	cmpgei	zero,zero,647
    9908:	0000a1c8 	cmpgei	zero,zero,647
    990c:	0000a1c8 	cmpgei	zero,zero,647
    9910:	0000a1c8 	cmpgei	zero,zero,647
    9914:	0000a1c8 	cmpgei	zero,zero,647
    9918:	0000a1c8 	cmpgei	zero,zero,647
    991c:	0000a1c8 	cmpgei	zero,zero,647
    9920:	00009e0c 	andi	zero,zero,632
    9924:	00009e38 	rdprs	zero,zero,632
    9928:	0000a1c8 	cmpgei	zero,zero,647
    992c:	0000a1c8 	cmpgei	zero,zero,647
    9930:	0000a1c8 	cmpgei	zero,zero,647
    9934:	0000a170 	cmpltui	zero,zero,645
    9938:	00009e38 	rdprs	zero,zero,632
    993c:	0000a1c8 	cmpgei	zero,zero,647
    9940:	0000a1c8 	cmpgei	zero,zero,647
    9944:	00009ccc 	andi	zero,zero,627
    9948:	0000a1c8 	cmpgei	zero,zero,647
    994c:	00009cdc 	xori	zero,zero,627
    9950:	00009d18 	cmpnei	zero,zero,628
    9954:	00009a14 	movui	zero,616
    9958:	00009cc0 	call	9cc <i2c_short_write+0x14>
    995c:	0000a1c8 	cmpgei	zero,zero,647
    9960:	0000a09c 	xori	zero,zero,642
    9964:	0000a1c8 	cmpgei	zero,zero,647
    9968:	0000a0f4 	movhi	zero,643
    996c:	0000a1c8 	cmpgei	zero,zero,647
    9970:	0000a1c8 	cmpgei	zero,zero,647
    9974:	00009db8 	rdprs	zero,zero,630
    9978:	42000204 	addi	r8,r8,8
    997c:	da802317 	ldw	r10,140(sp)
    9980:	5455883a 	add	r10,r10,r17
    9984:	da802315 	stw	r10,140(sp)
    9988:	003f8b06 	br	97b8 <__alt_data_end+0xff0097b8>
    998c:	d9002017 	ldw	r4,128(sp)
    9990:	a00b883a 	mov	r5,r20
    9994:	0004cd80 	call	4cd8 <__swsetup_r>
    9998:	1003b11e 	bne	r2,zero,a860 <___vfiprintf_internal_r+0x11ec>
    999c:	a080030b 	ldhu	r2,12(r20)
    99a0:	00c00284 	movi	r3,10
    99a4:	1080068c 	andi	r2,r2,26
    99a8:	10ff541e 	bne	r2,r3,96fc <__alt_data_end+0xff0096fc>
    99ac:	a080038f 	ldh	r2,14(r20)
    99b0:	103f5216 	blt	r2,zero,96fc <__alt_data_end+0xff0096fc>
    99b4:	d9c02217 	ldw	r7,136(sp)
    99b8:	d9002017 	ldw	r4,128(sp)
    99bc:	e00d883a 	mov	r6,fp
    99c0:	a00b883a 	mov	r5,r20
    99c4:	000aaec0 	call	aaec <__sbprintf>
    99c8:	dfc03617 	ldw	ra,216(sp)
    99cc:	df003517 	ldw	fp,212(sp)
    99d0:	ddc03417 	ldw	r23,208(sp)
    99d4:	dd803317 	ldw	r22,204(sp)
    99d8:	dd403217 	ldw	r21,200(sp)
    99dc:	dd003117 	ldw	r20,196(sp)
    99e0:	dcc03017 	ldw	r19,192(sp)
    99e4:	dc802f17 	ldw	r18,188(sp)
    99e8:	dc402e17 	ldw	r17,184(sp)
    99ec:	dc002d17 	ldw	r16,180(sp)
    99f0:	dec03704 	addi	sp,sp,220
    99f4:	f800283a 	ret
    99f8:	0006cac0 	call	6cac <__sinit>
    99fc:	003f2f06 	br	96bc <__alt_data_end+0xff0096bc>
    9a00:	0463c83a 	sub	r17,zero,r17
    9a04:	d8802215 	stw	r2,136(sp)
    9a08:	a5000114 	ori	r20,r20,4
    9a0c:	80c00007 	ldb	r3,0(r16)
    9a10:	003f7706 	br	97f0 <__alt_data_end+0xff0097f0>
    9a14:	00800c04 	movi	r2,48
    9a18:	da802217 	ldw	r10,136(sp)
    9a1c:	d8801d05 	stb	r2,116(sp)
    9a20:	00801e04 	movi	r2,120
    9a24:	d8801d45 	stb	r2,117(sp)
    9a28:	d8001d85 	stb	zero,118(sp)
    9a2c:	50c00104 	addi	r3,r10,4
    9a30:	54800017 	ldw	r18,0(r10)
    9a34:	0027883a 	mov	r19,zero
    9a38:	a0800094 	ori	r2,r20,2
    9a3c:	48030b16 	blt	r9,zero,a66c <___vfiprintf_internal_r+0xff8>
    9a40:	00bfdfc4 	movi	r2,-129
    9a44:	a096703a 	and	r11,r20,r2
    9a48:	d8c02215 	stw	r3,136(sp)
    9a4c:	5d000094 	ori	r20,r11,2
    9a50:	90032b1e 	bne	r18,zero,a700 <___vfiprintf_internal_r+0x108c>
    9a54:	00800074 	movhi	r2,1
    9a58:	10854b04 	addi	r2,r2,5420
    9a5c:	d8802615 	stw	r2,152(sp)
    9a60:	0039883a 	mov	fp,zero
    9a64:	48017b1e 	bne	r9,zero,a054 <___vfiprintf_internal_r+0x9e0>
    9a68:	0013883a 	mov	r9,zero
    9a6c:	0027883a 	mov	r19,zero
    9a70:	dd401a04 	addi	r21,sp,104
    9a74:	4825883a 	mov	r18,r9
    9a78:	4cc0010e 	bge	r9,r19,9a80 <___vfiprintf_internal_r+0x40c>
    9a7c:	9825883a 	mov	r18,r19
    9a80:	e7003fcc 	andi	fp,fp,255
    9a84:	e700201c 	xori	fp,fp,128
    9a88:	e73fe004 	addi	fp,fp,-128
    9a8c:	e0000126 	beq	fp,zero,9a94 <___vfiprintf_internal_r+0x420>
    9a90:	94800044 	addi	r18,r18,1
    9a94:	a380008c 	andi	r14,r20,2
    9a98:	70000126 	beq	r14,zero,9aa0 <___vfiprintf_internal_r+0x42c>
    9a9c:	94800084 	addi	r18,r18,2
    9aa0:	a700210c 	andi	fp,r20,132
    9aa4:	e001df1e 	bne	fp,zero,a224 <___vfiprintf_internal_r+0xbb0>
    9aa8:	8c87c83a 	sub	r3,r17,r18
    9aac:	00c1dd0e 	bge	zero,r3,a224 <___vfiprintf_internal_r+0xbb0>
    9ab0:	01c00404 	movi	r7,16
    9ab4:	d8801c17 	ldw	r2,112(sp)
    9ab8:	38c3ad0e 	bge	r7,r3,a970 <___vfiprintf_internal_r+0x12fc>
    9abc:	02800074 	movhi	r10,1
    9ac0:	5285b004 	addi	r10,r10,5824
    9ac4:	dc002915 	stw	r16,164(sp)
    9ac8:	d9801b17 	ldw	r6,108(sp)
    9acc:	da802415 	stw	r10,144(sp)
    9ad0:	03c001c4 	movi	r15,7
    9ad4:	da402515 	stw	r9,148(sp)
    9ad8:	db802815 	stw	r14,160(sp)
    9adc:	1821883a 	mov	r16,r3
    9ae0:	00000506 	br	9af8 <___vfiprintf_internal_r+0x484>
    9ae4:	31400084 	addi	r5,r6,2
    9ae8:	42000204 	addi	r8,r8,8
    9aec:	200d883a 	mov	r6,r4
    9af0:	843ffc04 	addi	r16,r16,-16
    9af4:	3c000d0e 	bge	r7,r16,9b2c <___vfiprintf_internal_r+0x4b8>
    9af8:	10800404 	addi	r2,r2,16
    9afc:	31000044 	addi	r4,r6,1
    9b00:	45800015 	stw	r22,0(r8)
    9b04:	41c00115 	stw	r7,4(r8)
    9b08:	d8801c15 	stw	r2,112(sp)
    9b0c:	d9001b15 	stw	r4,108(sp)
    9b10:	793ff40e 	bge	r15,r4,9ae4 <__alt_data_end+0xff009ae4>
    9b14:	1001b51e 	bne	r2,zero,a1ec <___vfiprintf_internal_r+0xb78>
    9b18:	843ffc04 	addi	r16,r16,-16
    9b1c:	000d883a 	mov	r6,zero
    9b20:	01400044 	movi	r5,1
    9b24:	d811883a 	mov	r8,sp
    9b28:	3c3ff316 	blt	r7,r16,9af8 <__alt_data_end+0xff009af8>
    9b2c:	8007883a 	mov	r3,r16
    9b30:	da402517 	ldw	r9,148(sp)
    9b34:	db802817 	ldw	r14,160(sp)
    9b38:	dc002917 	ldw	r16,164(sp)
    9b3c:	da802417 	ldw	r10,144(sp)
    9b40:	1885883a 	add	r2,r3,r2
    9b44:	40c00115 	stw	r3,4(r8)
    9b48:	42800015 	stw	r10,0(r8)
    9b4c:	d8801c15 	stw	r2,112(sp)
    9b50:	d9401b15 	stw	r5,108(sp)
    9b54:	00c001c4 	movi	r3,7
    9b58:	19426016 	blt	r3,r5,a4dc <___vfiprintf_internal_r+0xe68>
    9b5c:	d8c01d87 	ldb	r3,118(sp)
    9b60:	42000204 	addi	r8,r8,8
    9b64:	29000044 	addi	r4,r5,1
    9b68:	1801b31e 	bne	r3,zero,a238 <___vfiprintf_internal_r+0xbc4>
    9b6c:	7001c026 	beq	r14,zero,a270 <___vfiprintf_internal_r+0xbfc>
    9b70:	d8c01d04 	addi	r3,sp,116
    9b74:	10800084 	addi	r2,r2,2
    9b78:	40c00015 	stw	r3,0(r8)
    9b7c:	00c00084 	movi	r3,2
    9b80:	40c00115 	stw	r3,4(r8)
    9b84:	d8801c15 	stw	r2,112(sp)
    9b88:	d9001b15 	stw	r4,108(sp)
    9b8c:	00c001c4 	movi	r3,7
    9b90:	1902650e 	bge	r3,r4,a528 <___vfiprintf_internal_r+0xeb4>
    9b94:	10029a1e 	bne	r2,zero,a600 <___vfiprintf_internal_r+0xf8c>
    9b98:	00c02004 	movi	r3,128
    9b9c:	01000044 	movi	r4,1
    9ba0:	000b883a 	mov	r5,zero
    9ba4:	d811883a 	mov	r8,sp
    9ba8:	e0c1b31e 	bne	fp,r3,a278 <___vfiprintf_internal_r+0xc04>
    9bac:	8cb9c83a 	sub	fp,r17,r18
    9bb0:	0701b10e 	bge	zero,fp,a278 <___vfiprintf_internal_r+0xc04>
    9bb4:	01c00404 	movi	r7,16
    9bb8:	3f03890e 	bge	r7,fp,a9e0 <___vfiprintf_internal_r+0x136c>
    9bbc:	00c00074 	movhi	r3,1
    9bc0:	18c5ac04 	addi	r3,r3,5808
    9bc4:	d8c02415 	stw	r3,144(sp)
    9bc8:	8007883a 	mov	r3,r16
    9bcc:	034001c4 	movi	r13,7
    9bd0:	e021883a 	mov	r16,fp
    9bd4:	da402515 	stw	r9,148(sp)
    9bd8:	1839883a 	mov	fp,r3
    9bdc:	00000506 	br	9bf4 <___vfiprintf_internal_r+0x580>
    9be0:	29800084 	addi	r6,r5,2
    9be4:	42000204 	addi	r8,r8,8
    9be8:	180b883a 	mov	r5,r3
    9bec:	843ffc04 	addi	r16,r16,-16
    9bf0:	3c000d0e 	bge	r7,r16,9c28 <___vfiprintf_internal_r+0x5b4>
    9bf4:	10800404 	addi	r2,r2,16
    9bf8:	28c00044 	addi	r3,r5,1
    9bfc:	45c00015 	stw	r23,0(r8)
    9c00:	41c00115 	stw	r7,4(r8)
    9c04:	d8801c15 	stw	r2,112(sp)
    9c08:	d8c01b15 	stw	r3,108(sp)
    9c0c:	68fff40e 	bge	r13,r3,9be0 <__alt_data_end+0xff009be0>
    9c10:	1002241e 	bne	r2,zero,a4a4 <___vfiprintf_internal_r+0xe30>
    9c14:	843ffc04 	addi	r16,r16,-16
    9c18:	01800044 	movi	r6,1
    9c1c:	000b883a 	mov	r5,zero
    9c20:	d811883a 	mov	r8,sp
    9c24:	3c3ff316 	blt	r7,r16,9bf4 <__alt_data_end+0xff009bf4>
    9c28:	da402517 	ldw	r9,148(sp)
    9c2c:	e007883a 	mov	r3,fp
    9c30:	8039883a 	mov	fp,r16
    9c34:	1821883a 	mov	r16,r3
    9c38:	d8c02417 	ldw	r3,144(sp)
    9c3c:	1705883a 	add	r2,r2,fp
    9c40:	47000115 	stw	fp,4(r8)
    9c44:	40c00015 	stw	r3,0(r8)
    9c48:	d8801c15 	stw	r2,112(sp)
    9c4c:	d9801b15 	stw	r6,108(sp)
    9c50:	00c001c4 	movi	r3,7
    9c54:	19827616 	blt	r3,r6,a630 <___vfiprintf_internal_r+0xfbc>
    9c58:	4cf9c83a 	sub	fp,r9,r19
    9c5c:	42000204 	addi	r8,r8,8
    9c60:	31000044 	addi	r4,r6,1
    9c64:	300b883a 	mov	r5,r6
    9c68:	07018516 	blt	zero,fp,a280 <___vfiprintf_internal_r+0xc0c>
    9c6c:	9885883a 	add	r2,r19,r2
    9c70:	45400015 	stw	r21,0(r8)
    9c74:	44c00115 	stw	r19,4(r8)
    9c78:	d8801c15 	stw	r2,112(sp)
    9c7c:	d9001b15 	stw	r4,108(sp)
    9c80:	00c001c4 	movi	r3,7
    9c84:	1901dd0e 	bge	r3,r4,a3fc <___vfiprintf_internal_r+0xd88>
    9c88:	1002401e 	bne	r2,zero,a58c <___vfiprintf_internal_r+0xf18>
    9c8c:	d8001b15 	stw	zero,108(sp)
    9c90:	a2c0010c 	andi	r11,r20,4
    9c94:	58000226 	beq	r11,zero,9ca0 <___vfiprintf_internal_r+0x62c>
    9c98:	8ca7c83a 	sub	r19,r17,r18
    9c9c:	04c2f216 	blt	zero,r19,a868 <___vfiprintf_internal_r+0x11f4>
    9ca0:	8c80010e 	bge	r17,r18,9ca8 <___vfiprintf_internal_r+0x634>
    9ca4:	9023883a 	mov	r17,r18
    9ca8:	da802317 	ldw	r10,140(sp)
    9cac:	5455883a 	add	r10,r10,r17
    9cb0:	da802315 	stw	r10,140(sp)
    9cb4:	d8001b15 	stw	zero,108(sp)
    9cb8:	d811883a 	mov	r8,sp
    9cbc:	003ea206 	br	9748 <__alt_data_end+0xff009748>
    9cc0:	a5000814 	ori	r20,r20,32
    9cc4:	80c00007 	ldb	r3,0(r16)
    9cc8:	003ec906 	br	97f0 <__alt_data_end+0xff0097f0>
    9ccc:	80c00007 	ldb	r3,0(r16)
    9cd0:	1b030926 	beq	r3,r12,a8f8 <___vfiprintf_internal_r+0x1284>
    9cd4:	a5000414 	ori	r20,r20,16
    9cd8:	003ec506 	br	97f0 <__alt_data_end+0xff0097f0>
    9cdc:	21003fcc 	andi	r4,r4,255
    9ce0:	20035e1e 	bne	r4,zero,aa5c <___vfiprintf_internal_r+0x13e8>
    9ce4:	a080080c 	andi	r2,r20,32
    9ce8:	1002a526 	beq	r2,zero,a780 <___vfiprintf_internal_r+0x110c>
    9cec:	da802217 	ldw	r10,136(sp)
    9cf0:	50800017 	ldw	r2,0(r10)
    9cf4:	da802317 	ldw	r10,140(sp)
    9cf8:	5007d7fa 	srai	r3,r10,31
    9cfc:	da802217 	ldw	r10,136(sp)
    9d00:	10c00115 	stw	r3,4(r2)
    9d04:	52800104 	addi	r10,r10,4
    9d08:	da802215 	stw	r10,136(sp)
    9d0c:	da802317 	ldw	r10,140(sp)
    9d10:	12800015 	stw	r10,0(r2)
    9d14:	003e8c06 	br	9748 <__alt_data_end+0xff009748>
    9d18:	21003fcc 	andi	r4,r4,255
    9d1c:	2003511e 	bne	r4,zero,aa64 <___vfiprintf_internal_r+0x13f0>
    9d20:	a080080c 	andi	r2,r20,32
    9d24:	1000a126 	beq	r2,zero,9fac <___vfiprintf_internal_r+0x938>
    9d28:	da802217 	ldw	r10,136(sp)
    9d2c:	d8001d85 	stb	zero,118(sp)
    9d30:	50800204 	addi	r2,r10,8
    9d34:	54800017 	ldw	r18,0(r10)
    9d38:	54c00117 	ldw	r19,4(r10)
    9d3c:	4802b416 	blt	r9,zero,a810 <___vfiprintf_internal_r+0x119c>
    9d40:	013fdfc4 	movi	r4,-129
    9d44:	94c6b03a 	or	r3,r18,r19
    9d48:	d8802215 	stw	r2,136(sp)
    9d4c:	a128703a 	and	r20,r20,r4
    9d50:	1800a226 	beq	r3,zero,9fdc <___vfiprintf_internal_r+0x968>
    9d54:	0039883a 	mov	fp,zero
    9d58:	dd401a04 	addi	r21,sp,104
    9d5c:	9006d0fa 	srli	r3,r18,3
    9d60:	9808977a 	slli	r4,r19,29
    9d64:	9826d0fa 	srli	r19,r19,3
    9d68:	948001cc 	andi	r18,r18,7
    9d6c:	90800c04 	addi	r2,r18,48
    9d70:	ad7fffc4 	addi	r21,r21,-1
    9d74:	20e4b03a 	or	r18,r4,r3
    9d78:	a8800005 	stb	r2,0(r21)
    9d7c:	94c6b03a 	or	r3,r18,r19
    9d80:	183ff61e 	bne	r3,zero,9d5c <__alt_data_end+0xff009d5c>
    9d84:	a0c0004c 	andi	r3,r20,1
    9d88:	18005926 	beq	r3,zero,9ef0 <___vfiprintf_internal_r+0x87c>
    9d8c:	10803fcc 	andi	r2,r2,255
    9d90:	1080201c 	xori	r2,r2,128
    9d94:	10bfe004 	addi	r2,r2,-128
    9d98:	00c00c04 	movi	r3,48
    9d9c:	10c05426 	beq	r2,r3,9ef0 <___vfiprintf_internal_r+0x87c>
    9da0:	da801e17 	ldw	r10,120(sp)
    9da4:	a8bfffc4 	addi	r2,r21,-1
    9da8:	a8ffffc5 	stb	r3,-1(r21)
    9dac:	50a7c83a 	sub	r19,r10,r2
    9db0:	102b883a 	mov	r21,r2
    9db4:	003f2f06 	br	9a74 <__alt_data_end+0xff009a74>
    9db8:	21003fcc 	andi	r4,r4,255
    9dbc:	2003421e 	bne	r4,zero,aac8 <___vfiprintf_internal_r+0x1454>
    9dc0:	00800074 	movhi	r2,1
    9dc4:	10854b04 	addi	r2,r2,5420
    9dc8:	d8802615 	stw	r2,152(sp)
    9dcc:	a080080c 	andi	r2,r20,32
    9dd0:	1000aa26 	beq	r2,zero,a07c <___vfiprintf_internal_r+0xa08>
    9dd4:	da802217 	ldw	r10,136(sp)
    9dd8:	54800017 	ldw	r18,0(r10)
    9ddc:	54c00117 	ldw	r19,4(r10)
    9de0:	52800204 	addi	r10,r10,8
    9de4:	da802215 	stw	r10,136(sp)
    9de8:	a080004c 	andi	r2,r20,1
    9dec:	1001d226 	beq	r2,zero,a538 <___vfiprintf_internal_r+0xec4>
    9df0:	94c4b03a 	or	r2,r18,r19
    9df4:	1002351e 	bne	r2,zero,a6cc <___vfiprintf_internal_r+0x1058>
    9df8:	d8001d85 	stb	zero,118(sp)
    9dfc:	48022216 	blt	r9,zero,a688 <___vfiprintf_internal_r+0x1014>
    9e00:	00bfdfc4 	movi	r2,-129
    9e04:	a0a8703a 	and	r20,r20,r2
    9e08:	003f1506 	br	9a60 <__alt_data_end+0xff009a60>
    9e0c:	da802217 	ldw	r10,136(sp)
    9e10:	04800044 	movi	r18,1
    9e14:	d8001d85 	stb	zero,118(sp)
    9e18:	50800017 	ldw	r2,0(r10)
    9e1c:	52800104 	addi	r10,r10,4
    9e20:	da802215 	stw	r10,136(sp)
    9e24:	d8801005 	stb	r2,64(sp)
    9e28:	9027883a 	mov	r19,r18
    9e2c:	dd401004 	addi	r21,sp,64
    9e30:	0013883a 	mov	r9,zero
    9e34:	003f1706 	br	9a94 <__alt_data_end+0xff009a94>
    9e38:	21003fcc 	andi	r4,r4,255
    9e3c:	2003201e 	bne	r4,zero,aac0 <___vfiprintf_internal_r+0x144c>
    9e40:	a080080c 	andi	r2,r20,32
    9e44:	10004b26 	beq	r2,zero,9f74 <___vfiprintf_internal_r+0x900>
    9e48:	da802217 	ldw	r10,136(sp)
    9e4c:	50800117 	ldw	r2,4(r10)
    9e50:	54800017 	ldw	r18,0(r10)
    9e54:	52800204 	addi	r10,r10,8
    9e58:	da802215 	stw	r10,136(sp)
    9e5c:	1027883a 	mov	r19,r2
    9e60:	10022c16 	blt	r2,zero,a714 <___vfiprintf_internal_r+0x10a0>
    9e64:	df001d83 	ldbu	fp,118(sp)
    9e68:	48007216 	blt	r9,zero,a034 <___vfiprintf_internal_r+0x9c0>
    9e6c:	00ffdfc4 	movi	r3,-129
    9e70:	94c4b03a 	or	r2,r18,r19
    9e74:	a0e8703a 	and	r20,r20,r3
    9e78:	1000cc26 	beq	r2,zero,a1ac <___vfiprintf_internal_r+0xb38>
    9e7c:	98021026 	beq	r19,zero,a6c0 <___vfiprintf_internal_r+0x104c>
    9e80:	dc402415 	stw	r17,144(sp)
    9e84:	dc002515 	stw	r16,148(sp)
    9e88:	9823883a 	mov	r17,r19
    9e8c:	9021883a 	mov	r16,r18
    9e90:	dd401a04 	addi	r21,sp,104
    9e94:	4825883a 	mov	r18,r9
    9e98:	4027883a 	mov	r19,r8
    9e9c:	8009883a 	mov	r4,r16
    9ea0:	880b883a 	mov	r5,r17
    9ea4:	01800284 	movi	r6,10
    9ea8:	000f883a 	mov	r7,zero
    9eac:	000ba540 	call	ba54 <__umoddi3>
    9eb0:	10800c04 	addi	r2,r2,48
    9eb4:	ad7fffc4 	addi	r21,r21,-1
    9eb8:	8009883a 	mov	r4,r16
    9ebc:	880b883a 	mov	r5,r17
    9ec0:	a8800005 	stb	r2,0(r21)
    9ec4:	01800284 	movi	r6,10
    9ec8:	000f883a 	mov	r7,zero
    9ecc:	000b4dc0 	call	b4dc <__udivdi3>
    9ed0:	1021883a 	mov	r16,r2
    9ed4:	10c4b03a 	or	r2,r2,r3
    9ed8:	1823883a 	mov	r17,r3
    9edc:	103fef1e 	bne	r2,zero,9e9c <__alt_data_end+0xff009e9c>
    9ee0:	dc402417 	ldw	r17,144(sp)
    9ee4:	dc002517 	ldw	r16,148(sp)
    9ee8:	9013883a 	mov	r9,r18
    9eec:	9811883a 	mov	r8,r19
    9ef0:	da801e17 	ldw	r10,120(sp)
    9ef4:	5567c83a 	sub	r19,r10,r21
    9ef8:	003ede06 	br	9a74 <__alt_data_end+0xff009a74>
    9efc:	38803fcc 	andi	r2,r7,255
    9f00:	1080201c 	xori	r2,r2,128
    9f04:	10bfe004 	addi	r2,r2,-128
    9f08:	1002371e 	bne	r2,zero,a7e8 <___vfiprintf_internal_r+0x1174>
    9f0c:	01000044 	movi	r4,1
    9f10:	01c00804 	movi	r7,32
    9f14:	80c00007 	ldb	r3,0(r16)
    9f18:	003e3506 	br	97f0 <__alt_data_end+0xff0097f0>
    9f1c:	a5000054 	ori	r20,r20,1
    9f20:	80c00007 	ldb	r3,0(r16)
    9f24:	003e3206 	br	97f0 <__alt_data_end+0xff0097f0>
    9f28:	a5002014 	ori	r20,r20,128
    9f2c:	80c00007 	ldb	r3,0(r16)
    9f30:	003e2f06 	br	97f0 <__alt_data_end+0xff0097f0>
    9f34:	8015883a 	mov	r10,r16
    9f38:	0023883a 	mov	r17,zero
    9f3c:	18bff404 	addi	r2,r3,-48
    9f40:	50c00007 	ldb	r3,0(r10)
    9f44:	8c4002a4 	muli	r17,r17,10
    9f48:	84000044 	addi	r16,r16,1
    9f4c:	8015883a 	mov	r10,r16
    9f50:	1463883a 	add	r17,r2,r17
    9f54:	18bff404 	addi	r2,r3,-48
    9f58:	30bff92e 	bgeu	r6,r2,9f40 <__alt_data_end+0xff009f40>
    9f5c:	003e2506 	br	97f4 <__alt_data_end+0xff0097f4>
    9f60:	21003fcc 	andi	r4,r4,255
    9f64:	2002d41e 	bne	r4,zero,aab8 <___vfiprintf_internal_r+0x1444>
    9f68:	a5000414 	ori	r20,r20,16
    9f6c:	a080080c 	andi	r2,r20,32
    9f70:	103fb51e 	bne	r2,zero,9e48 <__alt_data_end+0xff009e48>
    9f74:	a080040c 	andi	r2,r20,16
    9f78:	1001f826 	beq	r2,zero,a75c <___vfiprintf_internal_r+0x10e8>
    9f7c:	da802217 	ldw	r10,136(sp)
    9f80:	54800017 	ldw	r18,0(r10)
    9f84:	52800104 	addi	r10,r10,4
    9f88:	da802215 	stw	r10,136(sp)
    9f8c:	9027d7fa 	srai	r19,r18,31
    9f90:	9805883a 	mov	r2,r19
    9f94:	003fb206 	br	9e60 <__alt_data_end+0xff009e60>
    9f98:	21003fcc 	andi	r4,r4,255
    9f9c:	2002c41e 	bne	r4,zero,aab0 <___vfiprintf_internal_r+0x143c>
    9fa0:	a5000414 	ori	r20,r20,16
    9fa4:	a080080c 	andi	r2,r20,32
    9fa8:	103f5f1e 	bne	r2,zero,9d28 <__alt_data_end+0xff009d28>
    9fac:	a080040c 	andi	r2,r20,16
    9fb0:	10020f26 	beq	r2,zero,a7f0 <___vfiprintf_internal_r+0x117c>
    9fb4:	da802217 	ldw	r10,136(sp)
    9fb8:	d8001d85 	stb	zero,118(sp)
    9fbc:	0027883a 	mov	r19,zero
    9fc0:	50800104 	addi	r2,r10,4
    9fc4:	54800017 	ldw	r18,0(r10)
    9fc8:	48021116 	blt	r9,zero,a810 <___vfiprintf_internal_r+0x119c>
    9fcc:	00ffdfc4 	movi	r3,-129
    9fd0:	d8802215 	stw	r2,136(sp)
    9fd4:	a0e8703a 	and	r20,r20,r3
    9fd8:	903f5e1e 	bne	r18,zero,9d54 <__alt_data_end+0xff009d54>
    9fdc:	0039883a 	mov	fp,zero
    9fe0:	4802a626 	beq	r9,zero,aa7c <___vfiprintf_internal_r+0x1408>
    9fe4:	0025883a 	mov	r18,zero
    9fe8:	0027883a 	mov	r19,zero
    9fec:	003f5a06 	br	9d58 <__alt_data_end+0xff009d58>
    9ff0:	21003fcc 	andi	r4,r4,255
    9ff4:	20029f1e 	bne	r4,zero,aa74 <___vfiprintf_internal_r+0x1400>
    9ff8:	a5000414 	ori	r20,r20,16
    9ffc:	a080080c 	andi	r2,r20,32
    a000:	10005e1e 	bne	r2,zero,a17c <___vfiprintf_internal_r+0xb08>
    a004:	a080040c 	andi	r2,r20,16
    a008:	1001a21e 	bne	r2,zero,a694 <___vfiprintf_internal_r+0x1020>
    a00c:	a080100c 	andi	r2,r20,64
    a010:	d8001d85 	stb	zero,118(sp)
    a014:	da802217 	ldw	r10,136(sp)
    a018:	1002231e 	bne	r2,zero,a8a8 <___vfiprintf_internal_r+0x1234>
    a01c:	50800104 	addi	r2,r10,4
    a020:	54800017 	ldw	r18,0(r10)
    a024:	0027883a 	mov	r19,zero
    a028:	4801a00e 	bge	r9,zero,a6ac <___vfiprintf_internal_r+0x1038>
    a02c:	d8802215 	stw	r2,136(sp)
    a030:	0039883a 	mov	fp,zero
    a034:	94c4b03a 	or	r2,r18,r19
    a038:	103f901e 	bne	r2,zero,9e7c <__alt_data_end+0xff009e7c>
    a03c:	00800044 	movi	r2,1
    a040:	10803fcc 	andi	r2,r2,255
    a044:	00c00044 	movi	r3,1
    a048:	10c05926 	beq	r2,r3,a1b0 <___vfiprintf_internal_r+0xb3c>
    a04c:	00c00084 	movi	r3,2
    a050:	10ffe41e 	bne	r2,r3,9fe4 <__alt_data_end+0xff009fe4>
    a054:	0025883a 	mov	r18,zero
    a058:	0027883a 	mov	r19,zero
    a05c:	00013d06 	br	a554 <___vfiprintf_internal_r+0xee0>
    a060:	21003fcc 	andi	r4,r4,255
    a064:	2002811e 	bne	r4,zero,aa6c <___vfiprintf_internal_r+0x13f8>
    a068:	00800074 	movhi	r2,1
    a06c:	10854604 	addi	r2,r2,5400
    a070:	d8802615 	stw	r2,152(sp)
    a074:	a080080c 	andi	r2,r20,32
    a078:	103f561e 	bne	r2,zero,9dd4 <__alt_data_end+0xff009dd4>
    a07c:	a080040c 	andi	r2,r20,16
    a080:	1001d126 	beq	r2,zero,a7c8 <___vfiprintf_internal_r+0x1154>
    a084:	da802217 	ldw	r10,136(sp)
    a088:	0027883a 	mov	r19,zero
    a08c:	54800017 	ldw	r18,0(r10)
    a090:	52800104 	addi	r10,r10,4
    a094:	da802215 	stw	r10,136(sp)
    a098:	003f5306 	br	9de8 <__alt_data_end+0xff009de8>
    a09c:	da802217 	ldw	r10,136(sp)
    a0a0:	d8001d85 	stb	zero,118(sp)
    a0a4:	55400017 	ldw	r21,0(r10)
    a0a8:	50c00104 	addi	r3,r10,4
    a0ac:	a8024226 	beq	r21,zero,a9b8 <___vfiprintf_internal_r+0x1344>
    a0b0:	48021816 	blt	r9,zero,a914 <___vfiprintf_internal_r+0x12a0>
    a0b4:	480d883a 	mov	r6,r9
    a0b8:	000b883a 	mov	r5,zero
    a0bc:	a809883a 	mov	r4,r21
    a0c0:	d8c02a15 	stw	r3,168(sp)
    a0c4:	da002b15 	stw	r8,172(sp)
    a0c8:	da402c15 	stw	r9,176(sp)
    a0cc:	0007a0c0 	call	7a0c <memchr>
    a0d0:	d8c02a17 	ldw	r3,168(sp)
    a0d4:	da002b17 	ldw	r8,172(sp)
    a0d8:	da402c17 	ldw	r9,176(sp)
    a0dc:	10024826 	beq	r2,zero,aa00 <___vfiprintf_internal_r+0x138c>
    a0e0:	1567c83a 	sub	r19,r2,r21
    a0e4:	df001d83 	ldbu	fp,118(sp)
    a0e8:	d8c02215 	stw	r3,136(sp)
    a0ec:	0013883a 	mov	r9,zero
    a0f0:	003e6006 	br	9a74 <__alt_data_end+0xff009a74>
    a0f4:	21003fcc 	andi	r4,r4,255
    a0f8:	203fc026 	beq	r4,zero,9ffc <__alt_data_end+0xff009ffc>
    a0fc:	d9c01d85 	stb	r7,118(sp)
    a100:	003fbe06 	br	9ffc <__alt_data_end+0xff009ffc>
    a104:	da802217 	ldw	r10,136(sp)
    a108:	54400017 	ldw	r17,0(r10)
    a10c:	50800104 	addi	r2,r10,4
    a110:	883e3b16 	blt	r17,zero,9a00 <__alt_data_end+0xff009a00>
    a114:	d8802215 	stw	r2,136(sp)
    a118:	80c00007 	ldb	r3,0(r16)
    a11c:	003db406 	br	97f0 <__alt_data_end+0xff0097f0>
    a120:	01000044 	movi	r4,1
    a124:	01c00ac4 	movi	r7,43
    a128:	80c00007 	ldb	r3,0(r16)
    a12c:	003db006 	br	97f0 <__alt_data_end+0xff0097f0>
    a130:	80c00007 	ldb	r3,0(r16)
    a134:	82800044 	addi	r10,r16,1
    a138:	1b423c26 	beq	r3,r13,aa2c <___vfiprintf_internal_r+0x13b8>
    a13c:	18bff404 	addi	r2,r3,-48
    a140:	0013883a 	mov	r9,zero
    a144:	30822b36 	bltu	r6,r2,a9f4 <___vfiprintf_internal_r+0x1380>
    a148:	50c00007 	ldb	r3,0(r10)
    a14c:	4a4002a4 	muli	r9,r9,10
    a150:	54000044 	addi	r16,r10,1
    a154:	8015883a 	mov	r10,r16
    a158:	4893883a 	add	r9,r9,r2
    a15c:	18bff404 	addi	r2,r3,-48
    a160:	30bff92e 	bgeu	r6,r2,a148 <__alt_data_end+0xff00a148>
    a164:	483da30e 	bge	r9,zero,97f4 <__alt_data_end+0xff0097f4>
    a168:	027fffc4 	movi	r9,-1
    a16c:	003da106 	br	97f4 <__alt_data_end+0xff0097f4>
    a170:	a5001014 	ori	r20,r20,64
    a174:	80c00007 	ldb	r3,0(r16)
    a178:	003d9d06 	br	97f0 <__alt_data_end+0xff0097f0>
    a17c:	da802217 	ldw	r10,136(sp)
    a180:	d8001d85 	stb	zero,118(sp)
    a184:	50c00204 	addi	r3,r10,8
    a188:	54800017 	ldw	r18,0(r10)
    a18c:	54c00117 	ldw	r19,4(r10)
    a190:	4801ca16 	blt	r9,zero,a8bc <___vfiprintf_internal_r+0x1248>
    a194:	013fdfc4 	movi	r4,-129
    a198:	94c4b03a 	or	r2,r18,r19
    a19c:	d8c02215 	stw	r3,136(sp)
    a1a0:	a128703a 	and	r20,r20,r4
    a1a4:	0039883a 	mov	fp,zero
    a1a8:	103f341e 	bne	r2,zero,9e7c <__alt_data_end+0xff009e7c>
    a1ac:	483e2e26 	beq	r9,zero,9a68 <__alt_data_end+0xff009a68>
    a1b0:	0025883a 	mov	r18,zero
    a1b4:	94800c04 	addi	r18,r18,48
    a1b8:	dc8019c5 	stb	r18,103(sp)
    a1bc:	dcc02717 	ldw	r19,156(sp)
    a1c0:	dd4019c4 	addi	r21,sp,103
    a1c4:	003e2b06 	br	9a74 <__alt_data_end+0xff009a74>
    a1c8:	21003fcc 	andi	r4,r4,255
    a1cc:	2002361e 	bne	r4,zero,aaa8 <___vfiprintf_internal_r+0x1434>
    a1d0:	1801c126 	beq	r3,zero,a8d8 <___vfiprintf_internal_r+0x1264>
    a1d4:	04800044 	movi	r18,1
    a1d8:	d8c01005 	stb	r3,64(sp)
    a1dc:	d8001d85 	stb	zero,118(sp)
    a1e0:	9027883a 	mov	r19,r18
    a1e4:	dd401004 	addi	r21,sp,64
    a1e8:	003f1106 	br	9e30 <__alt_data_end+0xff009e30>
    a1ec:	d9402117 	ldw	r5,132(sp)
    a1f0:	d9002017 	ldw	r4,128(sp)
    a1f4:	d9801a04 	addi	r6,sp,104
    a1f8:	d9c02b15 	stw	r7,172(sp)
    a1fc:	dbc02a15 	stw	r15,168(sp)
    a200:	00095600 	call	9560 <__sprint_r.part.0>
    a204:	d9c02b17 	ldw	r7,172(sp)
    a208:	dbc02a17 	ldw	r15,168(sp)
    a20c:	10006d1e 	bne	r2,zero,a3c4 <___vfiprintf_internal_r+0xd50>
    a210:	d9801b17 	ldw	r6,108(sp)
    a214:	d8801c17 	ldw	r2,112(sp)
    a218:	d811883a 	mov	r8,sp
    a21c:	31400044 	addi	r5,r6,1
    a220:	003e3306 	br	9af0 <__alt_data_end+0xff009af0>
    a224:	d9401b17 	ldw	r5,108(sp)
    a228:	d8801c17 	ldw	r2,112(sp)
    a22c:	29000044 	addi	r4,r5,1
    a230:	d8c01d87 	ldb	r3,118(sp)
    a234:	183e4d26 	beq	r3,zero,9b6c <__alt_data_end+0xff009b6c>
    a238:	00c00044 	movi	r3,1
    a23c:	d9401d84 	addi	r5,sp,118
    a240:	10c5883a 	add	r2,r2,r3
    a244:	41400015 	stw	r5,0(r8)
    a248:	40c00115 	stw	r3,4(r8)
    a24c:	d8801c15 	stw	r2,112(sp)
    a250:	d9001b15 	stw	r4,108(sp)
    a254:	014001c4 	movi	r5,7
    a258:	2900a90e 	bge	r5,r4,a500 <___vfiprintf_internal_r+0xe8c>
    a25c:	1000da1e 	bne	r2,zero,a5c8 <___vfiprintf_internal_r+0xf54>
    a260:	7000ab1e 	bne	r14,zero,a510 <___vfiprintf_internal_r+0xe9c>
    a264:	000b883a 	mov	r5,zero
    a268:	1809883a 	mov	r4,r3
    a26c:	d811883a 	mov	r8,sp
    a270:	00c02004 	movi	r3,128
    a274:	e0fe4d26 	beq	fp,r3,9bac <__alt_data_end+0xff009bac>
    a278:	4cf9c83a 	sub	fp,r9,r19
    a27c:	073e7b0e 	bge	zero,fp,9c6c <__alt_data_end+0xff009c6c>
    a280:	01c00404 	movi	r7,16
    a284:	3f01900e 	bge	r7,fp,a8c8 <___vfiprintf_internal_r+0x1254>
    a288:	00c00074 	movhi	r3,1
    a28c:	18c5ac04 	addi	r3,r3,5808
    a290:	d8c02415 	stw	r3,144(sp)
    a294:	034001c4 	movi	r13,7
    a298:	00000506 	br	a2b0 <___vfiprintf_internal_r+0xc3c>
    a29c:	29000084 	addi	r4,r5,2
    a2a0:	42000204 	addi	r8,r8,8
    a2a4:	180b883a 	mov	r5,r3
    a2a8:	e73ffc04 	addi	fp,fp,-16
    a2ac:	3f000d0e 	bge	r7,fp,a2e4 <___vfiprintf_internal_r+0xc70>
    a2b0:	10800404 	addi	r2,r2,16
    a2b4:	28c00044 	addi	r3,r5,1
    a2b8:	45c00015 	stw	r23,0(r8)
    a2bc:	41c00115 	stw	r7,4(r8)
    a2c0:	d8801c15 	stw	r2,112(sp)
    a2c4:	d8c01b15 	stw	r3,108(sp)
    a2c8:	68fff40e 	bge	r13,r3,a29c <__alt_data_end+0xff00a29c>
    a2cc:	1000101e 	bne	r2,zero,a310 <___vfiprintf_internal_r+0xc9c>
    a2d0:	e73ffc04 	addi	fp,fp,-16
    a2d4:	01000044 	movi	r4,1
    a2d8:	000b883a 	mov	r5,zero
    a2dc:	d811883a 	mov	r8,sp
    a2e0:	3f3ff316 	blt	r7,fp,a2b0 <__alt_data_end+0xff00a2b0>
    a2e4:	da802417 	ldw	r10,144(sp)
    a2e8:	1705883a 	add	r2,r2,fp
    a2ec:	47000115 	stw	fp,4(r8)
    a2f0:	42800015 	stw	r10,0(r8)
    a2f4:	d8801c15 	stw	r2,112(sp)
    a2f8:	d9001b15 	stw	r4,108(sp)
    a2fc:	00c001c4 	movi	r3,7
    a300:	19003616 	blt	r3,r4,a3dc <___vfiprintf_internal_r+0xd68>
    a304:	42000204 	addi	r8,r8,8
    a308:	21000044 	addi	r4,r4,1
    a30c:	003e5706 	br	9c6c <__alt_data_end+0xff009c6c>
    a310:	d9402117 	ldw	r5,132(sp)
    a314:	d9002017 	ldw	r4,128(sp)
    a318:	d9801a04 	addi	r6,sp,104
    a31c:	d9c02b15 	stw	r7,172(sp)
    a320:	db402a15 	stw	r13,168(sp)
    a324:	00095600 	call	9560 <__sprint_r.part.0>
    a328:	d9c02b17 	ldw	r7,172(sp)
    a32c:	db402a17 	ldw	r13,168(sp)
    a330:	1000241e 	bne	r2,zero,a3c4 <___vfiprintf_internal_r+0xd50>
    a334:	d9401b17 	ldw	r5,108(sp)
    a338:	d8801c17 	ldw	r2,112(sp)
    a33c:	d811883a 	mov	r8,sp
    a340:	29000044 	addi	r4,r5,1
    a344:	003fd806 	br	a2a8 <__alt_data_end+0xff00a2a8>
    a348:	d9401b17 	ldw	r5,108(sp)
    a34c:	00c00074 	movhi	r3,1
    a350:	18c5b004 	addi	r3,r3,5824
    a354:	d8c02415 	stw	r3,144(sp)
    a358:	29400044 	addi	r5,r5,1
    a35c:	d8c02417 	ldw	r3,144(sp)
    a360:	14c5883a 	add	r2,r2,r19
    a364:	44c00115 	stw	r19,4(r8)
    a368:	40c00015 	stw	r3,0(r8)
    a36c:	d8801c15 	stw	r2,112(sp)
    a370:	d9401b15 	stw	r5,108(sp)
    a374:	00c001c4 	movi	r3,7
    a378:	1940070e 	bge	r3,r5,a398 <___vfiprintf_internal_r+0xd24>
    a37c:	103e4826 	beq	r2,zero,9ca0 <__alt_data_end+0xff009ca0>
    a380:	d9402117 	ldw	r5,132(sp)
    a384:	d9002017 	ldw	r4,128(sp)
    a388:	d9801a04 	addi	r6,sp,104
    a38c:	00095600 	call	9560 <__sprint_r.part.0>
    a390:	10000c1e 	bne	r2,zero,a3c4 <___vfiprintf_internal_r+0xd50>
    a394:	d8801c17 	ldw	r2,112(sp)
    a398:	8c80010e 	bge	r17,r18,a3a0 <___vfiprintf_internal_r+0xd2c>
    a39c:	9023883a 	mov	r17,r18
    a3a0:	da802317 	ldw	r10,140(sp)
    a3a4:	5455883a 	add	r10,r10,r17
    a3a8:	da802315 	stw	r10,140(sp)
    a3ac:	103e4126 	beq	r2,zero,9cb4 <__alt_data_end+0xff009cb4>
    a3b0:	d9402117 	ldw	r5,132(sp)
    a3b4:	d9002017 	ldw	r4,128(sp)
    a3b8:	d9801a04 	addi	r6,sp,104
    a3bc:	00095600 	call	9560 <__sprint_r.part.0>
    a3c0:	103e3c26 	beq	r2,zero,9cb4 <__alt_data_end+0xff009cb4>
    a3c4:	dd002117 	ldw	r20,132(sp)
    a3c8:	a080030b 	ldhu	r2,12(r20)
    a3cc:	1080100c 	andi	r2,r2,64
    a3d0:	1001231e 	bne	r2,zero,a860 <___vfiprintf_internal_r+0x11ec>
    a3d4:	d8802317 	ldw	r2,140(sp)
    a3d8:	003d7b06 	br	99c8 <__alt_data_end+0xff0099c8>
    a3dc:	1000991e 	bne	r2,zero,a644 <___vfiprintf_internal_r+0xfd0>
    a3e0:	00c00044 	movi	r3,1
    a3e4:	9805883a 	mov	r2,r19
    a3e8:	dd400015 	stw	r21,0(sp)
    a3ec:	dcc00115 	stw	r19,4(sp)
    a3f0:	dcc01c15 	stw	r19,112(sp)
    a3f4:	d8c01b15 	stw	r3,108(sp)
    a3f8:	d811883a 	mov	r8,sp
    a3fc:	42000204 	addi	r8,r8,8
    a400:	a2c0010c 	andi	r11,r20,4
    a404:	583fe426 	beq	r11,zero,a398 <__alt_data_end+0xff00a398>
    a408:	8ca7c83a 	sub	r19,r17,r18
    a40c:	04ffe20e 	bge	zero,r19,a398 <__alt_data_end+0xff00a398>
    a410:	01c00404 	movi	r7,16
    a414:	3cffcc0e 	bge	r7,r19,a348 <__alt_data_end+0xff00a348>
    a418:	02800074 	movhi	r10,1
    a41c:	5285b004 	addi	r10,r10,5824
    a420:	d9001b17 	ldw	r4,108(sp)
    a424:	da802415 	stw	r10,144(sp)
    a428:	382b883a 	mov	r21,r7
    a42c:	050001c4 	movi	r20,7
    a430:	df002017 	ldw	fp,128(sp)
    a434:	00000506 	br	a44c <___vfiprintf_internal_r+0xdd8>
    a438:	21400084 	addi	r5,r4,2
    a43c:	42000204 	addi	r8,r8,8
    a440:	1809883a 	mov	r4,r3
    a444:	9cfffc04 	addi	r19,r19,-16
    a448:	acffc40e 	bge	r21,r19,a35c <__alt_data_end+0xff00a35c>
    a44c:	10800404 	addi	r2,r2,16
    a450:	20c00044 	addi	r3,r4,1
    a454:	45800015 	stw	r22,0(r8)
    a458:	45400115 	stw	r21,4(r8)
    a45c:	d8801c15 	stw	r2,112(sp)
    a460:	d8c01b15 	stw	r3,108(sp)
    a464:	a0fff40e 	bge	r20,r3,a438 <__alt_data_end+0xff00a438>
    a468:	1000041e 	bne	r2,zero,a47c <___vfiprintf_internal_r+0xe08>
    a46c:	01400044 	movi	r5,1
    a470:	0009883a 	mov	r4,zero
    a474:	d811883a 	mov	r8,sp
    a478:	003ff206 	br	a444 <__alt_data_end+0xff00a444>
    a47c:	d9402117 	ldw	r5,132(sp)
    a480:	d9801a04 	addi	r6,sp,104
    a484:	e009883a 	mov	r4,fp
    a488:	00095600 	call	9560 <__sprint_r.part.0>
    a48c:	103fcd1e 	bne	r2,zero,a3c4 <__alt_data_end+0xff00a3c4>
    a490:	d9001b17 	ldw	r4,108(sp)
    a494:	d8801c17 	ldw	r2,112(sp)
    a498:	d811883a 	mov	r8,sp
    a49c:	21400044 	addi	r5,r4,1
    a4a0:	003fe806 	br	a444 <__alt_data_end+0xff00a444>
    a4a4:	d9402117 	ldw	r5,132(sp)
    a4a8:	d9002017 	ldw	r4,128(sp)
    a4ac:	d9801a04 	addi	r6,sp,104
    a4b0:	d9c02b15 	stw	r7,172(sp)
    a4b4:	db402a15 	stw	r13,168(sp)
    a4b8:	00095600 	call	9560 <__sprint_r.part.0>
    a4bc:	d9c02b17 	ldw	r7,172(sp)
    a4c0:	db402a17 	ldw	r13,168(sp)
    a4c4:	103fbf1e 	bne	r2,zero,a3c4 <__alt_data_end+0xff00a3c4>
    a4c8:	d9401b17 	ldw	r5,108(sp)
    a4cc:	d8801c17 	ldw	r2,112(sp)
    a4d0:	d811883a 	mov	r8,sp
    a4d4:	29800044 	addi	r6,r5,1
    a4d8:	003dc406 	br	9bec <__alt_data_end+0xff009bec>
    a4dc:	1000d21e 	bne	r2,zero,a828 <___vfiprintf_internal_r+0x11b4>
    a4e0:	d8c01d87 	ldb	r3,118(sp)
    a4e4:	18009526 	beq	r3,zero,a73c <___vfiprintf_internal_r+0x10c8>
    a4e8:	00800044 	movi	r2,1
    a4ec:	d8c01d84 	addi	r3,sp,118
    a4f0:	1009883a 	mov	r4,r2
    a4f4:	d8c00015 	stw	r3,0(sp)
    a4f8:	d8800115 	stw	r2,4(sp)
    a4fc:	d811883a 	mov	r8,sp
    a500:	200b883a 	mov	r5,r4
    a504:	42000204 	addi	r8,r8,8
    a508:	21000044 	addi	r4,r4,1
    a50c:	003d9706 	br	9b6c <__alt_data_end+0xff009b6c>
    a510:	d9001d04 	addi	r4,sp,116
    a514:	00800084 	movi	r2,2
    a518:	d9000015 	stw	r4,0(sp)
    a51c:	d8800115 	stw	r2,4(sp)
    a520:	1809883a 	mov	r4,r3
    a524:	d811883a 	mov	r8,sp
    a528:	200b883a 	mov	r5,r4
    a52c:	42000204 	addi	r8,r8,8
    a530:	21000044 	addi	r4,r4,1
    a534:	003f4e06 	br	a270 <__alt_data_end+0xff00a270>
    a538:	d8001d85 	stb	zero,118(sp)
    a53c:	48005016 	blt	r9,zero,a680 <___vfiprintf_internal_r+0x100c>
    a540:	00ffdfc4 	movi	r3,-129
    a544:	94c4b03a 	or	r2,r18,r19
    a548:	a0e8703a 	and	r20,r20,r3
    a54c:	103d4426 	beq	r2,zero,9a60 <__alt_data_end+0xff009a60>
    a550:	0039883a 	mov	fp,zero
    a554:	d9002617 	ldw	r4,152(sp)
    a558:	dd401a04 	addi	r21,sp,104
    a55c:	908003cc 	andi	r2,r18,15
    a560:	9806973a 	slli	r3,r19,28
    a564:	2085883a 	add	r2,r4,r2
    a568:	9024d13a 	srli	r18,r18,4
    a56c:	10800003 	ldbu	r2,0(r2)
    a570:	9826d13a 	srli	r19,r19,4
    a574:	ad7fffc4 	addi	r21,r21,-1
    a578:	1ca4b03a 	or	r18,r3,r18
    a57c:	a8800005 	stb	r2,0(r21)
    a580:	94c4b03a 	or	r2,r18,r19
    a584:	103ff51e 	bne	r2,zero,a55c <__alt_data_end+0xff00a55c>
    a588:	003e5906 	br	9ef0 <__alt_data_end+0xff009ef0>
    a58c:	d9402117 	ldw	r5,132(sp)
    a590:	d9002017 	ldw	r4,128(sp)
    a594:	d9801a04 	addi	r6,sp,104
    a598:	00095600 	call	9560 <__sprint_r.part.0>
    a59c:	103f891e 	bne	r2,zero,a3c4 <__alt_data_end+0xff00a3c4>
    a5a0:	d8801c17 	ldw	r2,112(sp)
    a5a4:	d811883a 	mov	r8,sp
    a5a8:	003f9506 	br	a400 <__alt_data_end+0xff00a400>
    a5ac:	d9402117 	ldw	r5,132(sp)
    a5b0:	d9002017 	ldw	r4,128(sp)
    a5b4:	d9801a04 	addi	r6,sp,104
    a5b8:	00095600 	call	9560 <__sprint_r.part.0>
    a5bc:	103f811e 	bne	r2,zero,a3c4 <__alt_data_end+0xff00a3c4>
    a5c0:	d811883a 	mov	r8,sp
    a5c4:	003ced06 	br	997c <__alt_data_end+0xff00997c>
    a5c8:	d9402117 	ldw	r5,132(sp)
    a5cc:	d9002017 	ldw	r4,128(sp)
    a5d0:	d9801a04 	addi	r6,sp,104
    a5d4:	da402c15 	stw	r9,176(sp)
    a5d8:	db802a15 	stw	r14,168(sp)
    a5dc:	00095600 	call	9560 <__sprint_r.part.0>
    a5e0:	da402c17 	ldw	r9,176(sp)
    a5e4:	db802a17 	ldw	r14,168(sp)
    a5e8:	103f761e 	bne	r2,zero,a3c4 <__alt_data_end+0xff00a3c4>
    a5ec:	d9401b17 	ldw	r5,108(sp)
    a5f0:	d8801c17 	ldw	r2,112(sp)
    a5f4:	d811883a 	mov	r8,sp
    a5f8:	29000044 	addi	r4,r5,1
    a5fc:	003d5b06 	br	9b6c <__alt_data_end+0xff009b6c>
    a600:	d9402117 	ldw	r5,132(sp)
    a604:	d9002017 	ldw	r4,128(sp)
    a608:	d9801a04 	addi	r6,sp,104
    a60c:	da402c15 	stw	r9,176(sp)
    a610:	00095600 	call	9560 <__sprint_r.part.0>
    a614:	da402c17 	ldw	r9,176(sp)
    a618:	103f6a1e 	bne	r2,zero,a3c4 <__alt_data_end+0xff00a3c4>
    a61c:	d9401b17 	ldw	r5,108(sp)
    a620:	d8801c17 	ldw	r2,112(sp)
    a624:	d811883a 	mov	r8,sp
    a628:	29000044 	addi	r4,r5,1
    a62c:	003f1006 	br	a270 <__alt_data_end+0xff00a270>
    a630:	1000c31e 	bne	r2,zero,a940 <___vfiprintf_internal_r+0x12cc>
    a634:	01000044 	movi	r4,1
    a638:	000b883a 	mov	r5,zero
    a63c:	d811883a 	mov	r8,sp
    a640:	003f0d06 	br	a278 <__alt_data_end+0xff00a278>
    a644:	d9402117 	ldw	r5,132(sp)
    a648:	d9002017 	ldw	r4,128(sp)
    a64c:	d9801a04 	addi	r6,sp,104
    a650:	00095600 	call	9560 <__sprint_r.part.0>
    a654:	103f5b1e 	bne	r2,zero,a3c4 <__alt_data_end+0xff00a3c4>
    a658:	d9001b17 	ldw	r4,108(sp)
    a65c:	d8801c17 	ldw	r2,112(sp)
    a660:	d811883a 	mov	r8,sp
    a664:	21000044 	addi	r4,r4,1
    a668:	003d8006 	br	9c6c <__alt_data_end+0xff009c6c>
    a66c:	01000074 	movhi	r4,1
    a670:	21054b04 	addi	r4,r4,5420
    a674:	d9002615 	stw	r4,152(sp)
    a678:	d8c02215 	stw	r3,136(sp)
    a67c:	1029883a 	mov	r20,r2
    a680:	94c4b03a 	or	r2,r18,r19
    a684:	103fb21e 	bne	r2,zero,a550 <__alt_data_end+0xff00a550>
    a688:	0039883a 	mov	fp,zero
    a68c:	00800084 	movi	r2,2
    a690:	003e6b06 	br	a040 <__alt_data_end+0xff00a040>
    a694:	da802217 	ldw	r10,136(sp)
    a698:	d8001d85 	stb	zero,118(sp)
    a69c:	0027883a 	mov	r19,zero
    a6a0:	50800104 	addi	r2,r10,4
    a6a4:	54800017 	ldw	r18,0(r10)
    a6a8:	483e6016 	blt	r9,zero,a02c <__alt_data_end+0xff00a02c>
    a6ac:	00ffdfc4 	movi	r3,-129
    a6b0:	d8802215 	stw	r2,136(sp)
    a6b4:	a0e8703a 	and	r20,r20,r3
    a6b8:	0039883a 	mov	fp,zero
    a6bc:	903ebb26 	beq	r18,zero,a1ac <__alt_data_end+0xff00a1ac>
    a6c0:	00800244 	movi	r2,9
    a6c4:	14bdee36 	bltu	r2,r18,9e80 <__alt_data_end+0xff009e80>
    a6c8:	003eba06 	br	a1b4 <__alt_data_end+0xff00a1b4>
    a6cc:	00800c04 	movi	r2,48
    a6d0:	d8c01d45 	stb	r3,117(sp)
    a6d4:	d8801d05 	stb	r2,116(sp)
    a6d8:	d8001d85 	stb	zero,118(sp)
    a6dc:	a0c00094 	ori	r3,r20,2
    a6e0:	4800a916 	blt	r9,zero,a988 <___vfiprintf_internal_r+0x1314>
    a6e4:	00bfdfc4 	movi	r2,-129
    a6e8:	a096703a 	and	r11,r20,r2
    a6ec:	5d000094 	ori	r20,r11,2
    a6f0:	0039883a 	mov	fp,zero
    a6f4:	003f9706 	br	a554 <__alt_data_end+0xff00a554>
    a6f8:	8025883a 	mov	r18,r16
    a6fc:	003c2e06 	br	97b8 <__alt_data_end+0xff0097b8>
    a700:	00800074 	movhi	r2,1
    a704:	10854b04 	addi	r2,r2,5420
    a708:	0039883a 	mov	fp,zero
    a70c:	d8802615 	stw	r2,152(sp)
    a710:	003f9006 	br	a554 <__alt_data_end+0xff00a554>
    a714:	04a5c83a 	sub	r18,zero,r18
    a718:	07000b44 	movi	fp,45
    a71c:	9004c03a 	cmpne	r2,r18,zero
    a720:	04e7c83a 	sub	r19,zero,r19
    a724:	df001d85 	stb	fp,118(sp)
    a728:	98a7c83a 	sub	r19,r19,r2
    a72c:	48009f16 	blt	r9,zero,a9ac <___vfiprintf_internal_r+0x1338>
    a730:	00bfdfc4 	movi	r2,-129
    a734:	a0a8703a 	and	r20,r20,r2
    a738:	003dd006 	br	9e7c <__alt_data_end+0xff009e7c>
    a73c:	70004c26 	beq	r14,zero,a870 <___vfiprintf_internal_r+0x11fc>
    a740:	00800084 	movi	r2,2
    a744:	d8c01d04 	addi	r3,sp,116
    a748:	d8c00015 	stw	r3,0(sp)
    a74c:	d8800115 	stw	r2,4(sp)
    a750:	01000044 	movi	r4,1
    a754:	d811883a 	mov	r8,sp
    a758:	003f7306 	br	a528 <__alt_data_end+0xff00a528>
    a75c:	a080100c 	andi	r2,r20,64
    a760:	da802217 	ldw	r10,136(sp)
    a764:	103e0626 	beq	r2,zero,9f80 <__alt_data_end+0xff009f80>
    a768:	5480000f 	ldh	r18,0(r10)
    a76c:	52800104 	addi	r10,r10,4
    a770:	da802215 	stw	r10,136(sp)
    a774:	9027d7fa 	srai	r19,r18,31
    a778:	9805883a 	mov	r2,r19
    a77c:	003db806 	br	9e60 <__alt_data_end+0xff009e60>
    a780:	a080040c 	andi	r2,r20,16
    a784:	1000091e 	bne	r2,zero,a7ac <___vfiprintf_internal_r+0x1138>
    a788:	a2c0100c 	andi	r11,r20,64
    a78c:	58000726 	beq	r11,zero,a7ac <___vfiprintf_internal_r+0x1138>
    a790:	da802217 	ldw	r10,136(sp)
    a794:	50800017 	ldw	r2,0(r10)
    a798:	52800104 	addi	r10,r10,4
    a79c:	da802215 	stw	r10,136(sp)
    a7a0:	da802317 	ldw	r10,140(sp)
    a7a4:	1280000d 	sth	r10,0(r2)
    a7a8:	003be706 	br	9748 <__alt_data_end+0xff009748>
    a7ac:	da802217 	ldw	r10,136(sp)
    a7b0:	50800017 	ldw	r2,0(r10)
    a7b4:	52800104 	addi	r10,r10,4
    a7b8:	da802215 	stw	r10,136(sp)
    a7bc:	da802317 	ldw	r10,140(sp)
    a7c0:	12800015 	stw	r10,0(r2)
    a7c4:	003be006 	br	9748 <__alt_data_end+0xff009748>
    a7c8:	a080100c 	andi	r2,r20,64
    a7cc:	da802217 	ldw	r10,136(sp)
    a7d0:	10003026 	beq	r2,zero,a894 <___vfiprintf_internal_r+0x1220>
    a7d4:	5480000b 	ldhu	r18,0(r10)
    a7d8:	52800104 	addi	r10,r10,4
    a7dc:	0027883a 	mov	r19,zero
    a7e0:	da802215 	stw	r10,136(sp)
    a7e4:	003d8006 	br	9de8 <__alt_data_end+0xff009de8>
    a7e8:	80c00007 	ldb	r3,0(r16)
    a7ec:	003c0006 	br	97f0 <__alt_data_end+0xff0097f0>
    a7f0:	a080100c 	andi	r2,r20,64
    a7f4:	d8001d85 	stb	zero,118(sp)
    a7f8:	da802217 	ldw	r10,136(sp)
    a7fc:	1000201e 	bne	r2,zero,a880 <___vfiprintf_internal_r+0x120c>
    a800:	50800104 	addi	r2,r10,4
    a804:	54800017 	ldw	r18,0(r10)
    a808:	0027883a 	mov	r19,zero
    a80c:	483def0e 	bge	r9,zero,9fcc <__alt_data_end+0xff009fcc>
    a810:	94c6b03a 	or	r3,r18,r19
    a814:	d8802215 	stw	r2,136(sp)
    a818:	183d4e1e 	bne	r3,zero,9d54 <__alt_data_end+0xff009d54>
    a81c:	0039883a 	mov	fp,zero
    a820:	0005883a 	mov	r2,zero
    a824:	003e0606 	br	a040 <__alt_data_end+0xff00a040>
    a828:	d9402117 	ldw	r5,132(sp)
    a82c:	d9002017 	ldw	r4,128(sp)
    a830:	d9801a04 	addi	r6,sp,104
    a834:	da402c15 	stw	r9,176(sp)
    a838:	db802a15 	stw	r14,168(sp)
    a83c:	00095600 	call	9560 <__sprint_r.part.0>
    a840:	da402c17 	ldw	r9,176(sp)
    a844:	db802a17 	ldw	r14,168(sp)
    a848:	103ede1e 	bne	r2,zero,a3c4 <__alt_data_end+0xff00a3c4>
    a84c:	d9401b17 	ldw	r5,108(sp)
    a850:	d8801c17 	ldw	r2,112(sp)
    a854:	d811883a 	mov	r8,sp
    a858:	29000044 	addi	r4,r5,1
    a85c:	003e7406 	br	a230 <__alt_data_end+0xff00a230>
    a860:	00bfffc4 	movi	r2,-1
    a864:	003c5806 	br	99c8 <__alt_data_end+0xff0099c8>
    a868:	d811883a 	mov	r8,sp
    a86c:	003ee806 	br	a410 <__alt_data_end+0xff00a410>
    a870:	000b883a 	mov	r5,zero
    a874:	01000044 	movi	r4,1
    a878:	d811883a 	mov	r8,sp
    a87c:	003e7c06 	br	a270 <__alt_data_end+0xff00a270>
    a880:	50800104 	addi	r2,r10,4
    a884:	5480000b 	ldhu	r18,0(r10)
    a888:	0027883a 	mov	r19,zero
    a88c:	483dcf0e 	bge	r9,zero,9fcc <__alt_data_end+0xff009fcc>
    a890:	003fdf06 	br	a810 <__alt_data_end+0xff00a810>
    a894:	54800017 	ldw	r18,0(r10)
    a898:	52800104 	addi	r10,r10,4
    a89c:	0027883a 	mov	r19,zero
    a8a0:	da802215 	stw	r10,136(sp)
    a8a4:	003d5006 	br	9de8 <__alt_data_end+0xff009de8>
    a8a8:	50800104 	addi	r2,r10,4
    a8ac:	5480000b 	ldhu	r18,0(r10)
    a8b0:	0027883a 	mov	r19,zero
    a8b4:	483f7d0e 	bge	r9,zero,a6ac <__alt_data_end+0xff00a6ac>
    a8b8:	003ddc06 	br	a02c <__alt_data_end+0xff00a02c>
    a8bc:	d8c02215 	stw	r3,136(sp)
    a8c0:	0039883a 	mov	fp,zero
    a8c4:	003ddb06 	br	a034 <__alt_data_end+0xff00a034>
    a8c8:	02800074 	movhi	r10,1
    a8cc:	5285ac04 	addi	r10,r10,5808
    a8d0:	da802415 	stw	r10,144(sp)
    a8d4:	003e8306 	br	a2e4 <__alt_data_end+0xff00a2e4>
    a8d8:	d8801c17 	ldw	r2,112(sp)
    a8dc:	dd002117 	ldw	r20,132(sp)
    a8e0:	103eb926 	beq	r2,zero,a3c8 <__alt_data_end+0xff00a3c8>
    a8e4:	d9002017 	ldw	r4,128(sp)
    a8e8:	d9801a04 	addi	r6,sp,104
    a8ec:	a00b883a 	mov	r5,r20
    a8f0:	00095600 	call	9560 <__sprint_r.part.0>
    a8f4:	003eb406 	br	a3c8 <__alt_data_end+0xff00a3c8>
    a8f8:	80c00043 	ldbu	r3,1(r16)
    a8fc:	a5000814 	ori	r20,r20,32
    a900:	84000044 	addi	r16,r16,1
    a904:	18c03fcc 	andi	r3,r3,255
    a908:	18c0201c 	xori	r3,r3,128
    a90c:	18ffe004 	addi	r3,r3,-128
    a910:	003bb706 	br	97f0 <__alt_data_end+0xff0097f0>
    a914:	a809883a 	mov	r4,r21
    a918:	d8c02a15 	stw	r3,168(sp)
    a91c:	da002b15 	stw	r8,172(sp)
    a920:	00029700 	call	2970 <strlen>
    a924:	d8c02a17 	ldw	r3,168(sp)
    a928:	1027883a 	mov	r19,r2
    a92c:	df001d83 	ldbu	fp,118(sp)
    a930:	d8c02215 	stw	r3,136(sp)
    a934:	0013883a 	mov	r9,zero
    a938:	da002b17 	ldw	r8,172(sp)
    a93c:	003c4d06 	br	9a74 <__alt_data_end+0xff009a74>
    a940:	d9402117 	ldw	r5,132(sp)
    a944:	d9002017 	ldw	r4,128(sp)
    a948:	d9801a04 	addi	r6,sp,104
    a94c:	da402c15 	stw	r9,176(sp)
    a950:	00095600 	call	9560 <__sprint_r.part.0>
    a954:	da402c17 	ldw	r9,176(sp)
    a958:	103e9a1e 	bne	r2,zero,a3c4 <__alt_data_end+0xff00a3c4>
    a95c:	d9401b17 	ldw	r5,108(sp)
    a960:	d8801c17 	ldw	r2,112(sp)
    a964:	d811883a 	mov	r8,sp
    a968:	29000044 	addi	r4,r5,1
    a96c:	003e4206 	br	a278 <__alt_data_end+0xff00a278>
    a970:	d9401b17 	ldw	r5,108(sp)
    a974:	01000074 	movhi	r4,1
    a978:	2105b004 	addi	r4,r4,5824
    a97c:	d9002415 	stw	r4,144(sp)
    a980:	29400044 	addi	r5,r5,1
    a984:	003c6d06 	br	9b3c <__alt_data_end+0xff009b3c>
    a988:	0039883a 	mov	fp,zero
    a98c:	00800084 	movi	r2,2
    a990:	10803fcc 	andi	r2,r2,255
    a994:	01000044 	movi	r4,1
    a998:	11001e26 	beq	r2,r4,aa14 <___vfiprintf_internal_r+0x13a0>
    a99c:	01000084 	movi	r4,2
    a9a0:	11001e1e 	bne	r2,r4,aa1c <___vfiprintf_internal_r+0x13a8>
    a9a4:	1829883a 	mov	r20,r3
    a9a8:	003eea06 	br	a554 <__alt_data_end+0xff00a554>
    a9ac:	a007883a 	mov	r3,r20
    a9b0:	00800044 	movi	r2,1
    a9b4:	003ff606 	br	a990 <__alt_data_end+0xff00a990>
    a9b8:	00800184 	movi	r2,6
    a9bc:	1240012e 	bgeu	r2,r9,a9c4 <___vfiprintf_internal_r+0x1350>
    a9c0:	1013883a 	mov	r9,r2
    a9c4:	4827883a 	mov	r19,r9
    a9c8:	4825883a 	mov	r18,r9
    a9cc:	48001516 	blt	r9,zero,aa24 <___vfiprintf_internal_r+0x13b0>
    a9d0:	05400074 	movhi	r21,1
    a9d4:	d8c02215 	stw	r3,136(sp)
    a9d8:	ad455004 	addi	r21,r21,5440
    a9dc:	003d1406 	br	9e30 <__alt_data_end+0xff009e30>
    a9e0:	02800074 	movhi	r10,1
    a9e4:	5285ac04 	addi	r10,r10,5808
    a9e8:	da802415 	stw	r10,144(sp)
    a9ec:	200d883a 	mov	r6,r4
    a9f0:	003c9106 	br	9c38 <__alt_data_end+0xff009c38>
    a9f4:	5021883a 	mov	r16,r10
    a9f8:	0013883a 	mov	r9,zero
    a9fc:	003b7d06 	br	97f4 <__alt_data_end+0xff0097f4>
    aa00:	4827883a 	mov	r19,r9
    aa04:	df001d83 	ldbu	fp,118(sp)
    aa08:	d8c02215 	stw	r3,136(sp)
    aa0c:	0013883a 	mov	r9,zero
    aa10:	003c1806 	br	9a74 <__alt_data_end+0xff009a74>
    aa14:	1829883a 	mov	r20,r3
    aa18:	003d1806 	br	9e7c <__alt_data_end+0xff009e7c>
    aa1c:	1829883a 	mov	r20,r3
    aa20:	003ccd06 	br	9d58 <__alt_data_end+0xff009d58>
    aa24:	0025883a 	mov	r18,zero
    aa28:	003fe906 	br	a9d0 <__alt_data_end+0xff00a9d0>
    aa2c:	d8802217 	ldw	r2,136(sp)
    aa30:	80c00043 	ldbu	r3,1(r16)
    aa34:	5021883a 	mov	r16,r10
    aa38:	12400017 	ldw	r9,0(r2)
    aa3c:	10800104 	addi	r2,r2,4
    aa40:	d8802215 	stw	r2,136(sp)
    aa44:	483faf0e 	bge	r9,zero,a904 <__alt_data_end+0xff00a904>
    aa48:	18c03fcc 	andi	r3,r3,255
    aa4c:	18c0201c 	xori	r3,r3,128
    aa50:	027fffc4 	movi	r9,-1
    aa54:	18ffe004 	addi	r3,r3,-128
    aa58:	003b6506 	br	97f0 <__alt_data_end+0xff0097f0>
    aa5c:	d9c01d85 	stb	r7,118(sp)
    aa60:	003ca006 	br	9ce4 <__alt_data_end+0xff009ce4>
    aa64:	d9c01d85 	stb	r7,118(sp)
    aa68:	003cad06 	br	9d20 <__alt_data_end+0xff009d20>
    aa6c:	d9c01d85 	stb	r7,118(sp)
    aa70:	003d7d06 	br	a068 <__alt_data_end+0xff00a068>
    aa74:	d9c01d85 	stb	r7,118(sp)
    aa78:	003d5f06 	br	9ff8 <__alt_data_end+0xff009ff8>
    aa7c:	a080004c 	andi	r2,r20,1
    aa80:	0039883a 	mov	fp,zero
    aa84:	10000526 	beq	r2,zero,aa9c <___vfiprintf_internal_r+0x1428>
    aa88:	00800c04 	movi	r2,48
    aa8c:	d88019c5 	stb	r2,103(sp)
    aa90:	dcc02717 	ldw	r19,156(sp)
    aa94:	dd4019c4 	addi	r21,sp,103
    aa98:	003bf606 	br	9a74 <__alt_data_end+0xff009a74>
    aa9c:	0027883a 	mov	r19,zero
    aaa0:	dd401a04 	addi	r21,sp,104
    aaa4:	003bf306 	br	9a74 <__alt_data_end+0xff009a74>
    aaa8:	d9c01d85 	stb	r7,118(sp)
    aaac:	003dc806 	br	a1d0 <__alt_data_end+0xff00a1d0>
    aab0:	d9c01d85 	stb	r7,118(sp)
    aab4:	003d3a06 	br	9fa0 <__alt_data_end+0xff009fa0>
    aab8:	d9c01d85 	stb	r7,118(sp)
    aabc:	003d2a06 	br	9f68 <__alt_data_end+0xff009f68>
    aac0:	d9c01d85 	stb	r7,118(sp)
    aac4:	003cde06 	br	9e40 <__alt_data_end+0xff009e40>
    aac8:	d9c01d85 	stb	r7,118(sp)
    aacc:	003cbc06 	br	9dc0 <__alt_data_end+0xff009dc0>

0000aad0 <__vfiprintf_internal>:
    aad0:	00800074 	movhi	r2,1
    aad4:	108cad04 	addi	r2,r2,12980
    aad8:	300f883a 	mov	r7,r6
    aadc:	280d883a 	mov	r6,r5
    aae0:	200b883a 	mov	r5,r4
    aae4:	11000017 	ldw	r4,0(r2)
    aae8:	00096741 	jmpi	9674 <___vfiprintf_internal_r>

0000aaec <__sbprintf>:
    aaec:	2880030b 	ldhu	r2,12(r5)
    aaf0:	2ac01917 	ldw	r11,100(r5)
    aaf4:	2a80038b 	ldhu	r10,14(r5)
    aaf8:	2a400717 	ldw	r9,28(r5)
    aafc:	2a000917 	ldw	r8,36(r5)
    ab00:	defee204 	addi	sp,sp,-1144
    ab04:	00c10004 	movi	r3,1024
    ab08:	dc011a15 	stw	r16,1128(sp)
    ab0c:	10bfff4c 	andi	r2,r2,65533
    ab10:	2821883a 	mov	r16,r5
    ab14:	d8cb883a 	add	r5,sp,r3
    ab18:	dc811c15 	stw	r18,1136(sp)
    ab1c:	dc411b15 	stw	r17,1132(sp)
    ab20:	dfc11d15 	stw	ra,1140(sp)
    ab24:	2025883a 	mov	r18,r4
    ab28:	d881030d 	sth	r2,1036(sp)
    ab2c:	dac11915 	stw	r11,1124(sp)
    ab30:	da81038d 	sth	r10,1038(sp)
    ab34:	da410715 	stw	r9,1052(sp)
    ab38:	da010915 	stw	r8,1060(sp)
    ab3c:	dec10015 	stw	sp,1024(sp)
    ab40:	dec10415 	stw	sp,1040(sp)
    ab44:	d8c10215 	stw	r3,1032(sp)
    ab48:	d8c10515 	stw	r3,1044(sp)
    ab4c:	d8010615 	stw	zero,1048(sp)
    ab50:	00096740 	call	9674 <___vfiprintf_internal_r>
    ab54:	1023883a 	mov	r17,r2
    ab58:	10000416 	blt	r2,zero,ab6c <__sbprintf+0x80>
    ab5c:	d9410004 	addi	r5,sp,1024
    ab60:	9009883a 	mov	r4,r18
    ab64:	00068d00 	call	68d0 <_fflush_r>
    ab68:	10000d1e 	bne	r2,zero,aba0 <__sbprintf+0xb4>
    ab6c:	d881030b 	ldhu	r2,1036(sp)
    ab70:	1080100c 	andi	r2,r2,64
    ab74:	10000326 	beq	r2,zero,ab84 <__sbprintf+0x98>
    ab78:	8080030b 	ldhu	r2,12(r16)
    ab7c:	10801014 	ori	r2,r2,64
    ab80:	8080030d 	sth	r2,12(r16)
    ab84:	8805883a 	mov	r2,r17
    ab88:	dfc11d17 	ldw	ra,1140(sp)
    ab8c:	dc811c17 	ldw	r18,1136(sp)
    ab90:	dc411b17 	ldw	r17,1132(sp)
    ab94:	dc011a17 	ldw	r16,1128(sp)
    ab98:	dec11e04 	addi	sp,sp,1144
    ab9c:	f800283a 	ret
    aba0:	047fffc4 	movi	r17,-1
    aba4:	003ff106 	br	ab6c <__alt_data_end+0xff00ab6c>

0000aba8 <_write_r>:
    aba8:	defffd04 	addi	sp,sp,-12
    abac:	2805883a 	mov	r2,r5
    abb0:	dc000015 	stw	r16,0(sp)
    abb4:	04000074 	movhi	r16,1
    abb8:	dc400115 	stw	r17,4(sp)
    abbc:	300b883a 	mov	r5,r6
    abc0:	84138204 	addi	r16,r16,19976
    abc4:	2023883a 	mov	r17,r4
    abc8:	380d883a 	mov	r6,r7
    abcc:	1009883a 	mov	r4,r2
    abd0:	dfc00215 	stw	ra,8(sp)
    abd4:	80000015 	stw	zero,0(r16)
    abd8:	000ee700 	call	ee70 <write>
    abdc:	00ffffc4 	movi	r3,-1
    abe0:	10c00526 	beq	r2,r3,abf8 <_write_r+0x50>
    abe4:	dfc00217 	ldw	ra,8(sp)
    abe8:	dc400117 	ldw	r17,4(sp)
    abec:	dc000017 	ldw	r16,0(sp)
    abf0:	dec00304 	addi	sp,sp,12
    abf4:	f800283a 	ret
    abf8:	80c00017 	ldw	r3,0(r16)
    abfc:	183ff926 	beq	r3,zero,abe4 <__alt_data_end+0xff00abe4>
    ac00:	88c00015 	stw	r3,0(r17)
    ac04:	003ff706 	br	abe4 <__alt_data_end+0xff00abe4>

0000ac08 <_close_r>:
    ac08:	defffd04 	addi	sp,sp,-12
    ac0c:	dc000015 	stw	r16,0(sp)
    ac10:	04000074 	movhi	r16,1
    ac14:	dc400115 	stw	r17,4(sp)
    ac18:	84138204 	addi	r16,r16,19976
    ac1c:	2023883a 	mov	r17,r4
    ac20:	2809883a 	mov	r4,r5
    ac24:	dfc00215 	stw	ra,8(sp)
    ac28:	80000015 	stw	zero,0(r16)
    ac2c:	000e6300 	call	e630 <close>
    ac30:	00ffffc4 	movi	r3,-1
    ac34:	10c00526 	beq	r2,r3,ac4c <_close_r+0x44>
    ac38:	dfc00217 	ldw	ra,8(sp)
    ac3c:	dc400117 	ldw	r17,4(sp)
    ac40:	dc000017 	ldw	r16,0(sp)
    ac44:	dec00304 	addi	sp,sp,12
    ac48:	f800283a 	ret
    ac4c:	80c00017 	ldw	r3,0(r16)
    ac50:	183ff926 	beq	r3,zero,ac38 <__alt_data_end+0xff00ac38>
    ac54:	88c00015 	stw	r3,0(r17)
    ac58:	003ff706 	br	ac38 <__alt_data_end+0xff00ac38>

0000ac5c <_calloc_r>:
    ac5c:	298b383a 	mul	r5,r5,r6
    ac60:	defffe04 	addi	sp,sp,-8
    ac64:	dfc00115 	stw	ra,4(sp)
    ac68:	dc000015 	stw	r16,0(sp)
    ac6c:	0001e880 	call	1e88 <_malloc_r>
    ac70:	10002926 	beq	r2,zero,ad18 <_calloc_r+0xbc>
    ac74:	11bfff17 	ldw	r6,-4(r2)
    ac78:	1021883a 	mov	r16,r2
    ac7c:	00bfff04 	movi	r2,-4
    ac80:	308c703a 	and	r6,r6,r2
    ac84:	00c00904 	movi	r3,36
    ac88:	308d883a 	add	r6,r6,r2
    ac8c:	19801636 	bltu	r3,r6,ace8 <_calloc_r+0x8c>
    ac90:	008004c4 	movi	r2,19
    ac94:	11800b2e 	bgeu	r2,r6,acc4 <_calloc_r+0x68>
    ac98:	80000015 	stw	zero,0(r16)
    ac9c:	80000115 	stw	zero,4(r16)
    aca0:	008006c4 	movi	r2,27
    aca4:	11801a2e 	bgeu	r2,r6,ad10 <_calloc_r+0xb4>
    aca8:	80000215 	stw	zero,8(r16)
    acac:	80000315 	stw	zero,12(r16)
    acb0:	30c0151e 	bne	r6,r3,ad08 <_calloc_r+0xac>
    acb4:	80000415 	stw	zero,16(r16)
    acb8:	80800604 	addi	r2,r16,24
    acbc:	80000515 	stw	zero,20(r16)
    acc0:	00000106 	br	acc8 <_calloc_r+0x6c>
    acc4:	8005883a 	mov	r2,r16
    acc8:	10000015 	stw	zero,0(r2)
    accc:	10000115 	stw	zero,4(r2)
    acd0:	10000215 	stw	zero,8(r2)
    acd4:	8005883a 	mov	r2,r16
    acd8:	dfc00117 	ldw	ra,4(sp)
    acdc:	dc000017 	ldw	r16,0(sp)
    ace0:	dec00204 	addi	sp,sp,8
    ace4:	f800283a 	ret
    ace8:	000b883a 	mov	r5,zero
    acec:	8009883a 	mov	r4,r16
    acf0:	0007c4c0 	call	7c4c <memset>
    acf4:	8005883a 	mov	r2,r16
    acf8:	dfc00117 	ldw	ra,4(sp)
    acfc:	dc000017 	ldw	r16,0(sp)
    ad00:	dec00204 	addi	sp,sp,8
    ad04:	f800283a 	ret
    ad08:	80800404 	addi	r2,r16,16
    ad0c:	003fee06 	br	acc8 <__alt_data_end+0xff00acc8>
    ad10:	80800204 	addi	r2,r16,8
    ad14:	003fec06 	br	acc8 <__alt_data_end+0xff00acc8>
    ad18:	0005883a 	mov	r2,zero
    ad1c:	003fee06 	br	acd8 <__alt_data_end+0xff00acd8>

0000ad20 <_fclose_r>:
    ad20:	28003926 	beq	r5,zero,ae08 <_fclose_r+0xe8>
    ad24:	defffc04 	addi	sp,sp,-16
    ad28:	dc400115 	stw	r17,4(sp)
    ad2c:	dc000015 	stw	r16,0(sp)
    ad30:	dfc00315 	stw	ra,12(sp)
    ad34:	dc800215 	stw	r18,8(sp)
    ad38:	2023883a 	mov	r17,r4
    ad3c:	2821883a 	mov	r16,r5
    ad40:	20000226 	beq	r4,zero,ad4c <_fclose_r+0x2c>
    ad44:	20800e17 	ldw	r2,56(r4)
    ad48:	10002726 	beq	r2,zero,ade8 <_fclose_r+0xc8>
    ad4c:	8080030f 	ldh	r2,12(r16)
    ad50:	1000071e 	bne	r2,zero,ad70 <_fclose_r+0x50>
    ad54:	0005883a 	mov	r2,zero
    ad58:	dfc00317 	ldw	ra,12(sp)
    ad5c:	dc800217 	ldw	r18,8(sp)
    ad60:	dc400117 	ldw	r17,4(sp)
    ad64:	dc000017 	ldw	r16,0(sp)
    ad68:	dec00404 	addi	sp,sp,16
    ad6c:	f800283a 	ret
    ad70:	800b883a 	mov	r5,r16
    ad74:	8809883a 	mov	r4,r17
    ad78:	00066b40 	call	66b4 <__sflush_r>
    ad7c:	1025883a 	mov	r18,r2
    ad80:	80800b17 	ldw	r2,44(r16)
    ad84:	10000426 	beq	r2,zero,ad98 <_fclose_r+0x78>
    ad88:	81400717 	ldw	r5,28(r16)
    ad8c:	8809883a 	mov	r4,r17
    ad90:	103ee83a 	callr	r2
    ad94:	10001616 	blt	r2,zero,adf0 <_fclose_r+0xd0>
    ad98:	8080030b 	ldhu	r2,12(r16)
    ad9c:	1080200c 	andi	r2,r2,128
    ada0:	1000151e 	bne	r2,zero,adf8 <_fclose_r+0xd8>
    ada4:	81400c17 	ldw	r5,48(r16)
    ada8:	28000526 	beq	r5,zero,adc0 <_fclose_r+0xa0>
    adac:	80801004 	addi	r2,r16,64
    adb0:	28800226 	beq	r5,r2,adbc <_fclose_r+0x9c>
    adb4:	8809883a 	mov	r4,r17
    adb8:	0006e200 	call	6e20 <_free_r>
    adbc:	80000c15 	stw	zero,48(r16)
    adc0:	81401117 	ldw	r5,68(r16)
    adc4:	28000326 	beq	r5,zero,add4 <_fclose_r+0xb4>
    adc8:	8809883a 	mov	r4,r17
    adcc:	0006e200 	call	6e20 <_free_r>
    add0:	80001115 	stw	zero,68(r16)
    add4:	0006cbc0 	call	6cbc <__sfp_lock_acquire>
    add8:	8000030d 	sth	zero,12(r16)
    addc:	0006cc00 	call	6cc0 <__sfp_lock_release>
    ade0:	9005883a 	mov	r2,r18
    ade4:	003fdc06 	br	ad58 <__alt_data_end+0xff00ad58>
    ade8:	0006cac0 	call	6cac <__sinit>
    adec:	003fd706 	br	ad4c <__alt_data_end+0xff00ad4c>
    adf0:	04bfffc4 	movi	r18,-1
    adf4:	003fe806 	br	ad98 <__alt_data_end+0xff00ad98>
    adf8:	81400417 	ldw	r5,16(r16)
    adfc:	8809883a 	mov	r4,r17
    ae00:	0006e200 	call	6e20 <_free_r>
    ae04:	003fe706 	br	ada4 <__alt_data_end+0xff00ada4>
    ae08:	0005883a 	mov	r2,zero
    ae0c:	f800283a 	ret

0000ae10 <fclose>:
    ae10:	00800074 	movhi	r2,1
    ae14:	108cad04 	addi	r2,r2,12980
    ae18:	200b883a 	mov	r5,r4
    ae1c:	11000017 	ldw	r4,0(r2)
    ae20:	000ad201 	jmpi	ad20 <_fclose_r>

0000ae24 <__fputwc>:
    ae24:	defff804 	addi	sp,sp,-32
    ae28:	dcc00415 	stw	r19,16(sp)
    ae2c:	dc800315 	stw	r18,12(sp)
    ae30:	dc000115 	stw	r16,4(sp)
    ae34:	dfc00715 	stw	ra,28(sp)
    ae38:	dd400615 	stw	r21,24(sp)
    ae3c:	dd000515 	stw	r20,20(sp)
    ae40:	dc400215 	stw	r17,8(sp)
    ae44:	2027883a 	mov	r19,r4
    ae48:	2825883a 	mov	r18,r5
    ae4c:	3021883a 	mov	r16,r6
    ae50:	00077fc0 	call	77fc <__locale_mb_cur_max>
    ae54:	00c00044 	movi	r3,1
    ae58:	10c03e26 	beq	r2,r3,af54 <__fputwc+0x130>
    ae5c:	81c01704 	addi	r7,r16,92
    ae60:	900d883a 	mov	r6,r18
    ae64:	d80b883a 	mov	r5,sp
    ae68:	9809883a 	mov	r4,r19
    ae6c:	000b2f40 	call	b2f4 <_wcrtomb_r>
    ae70:	1029883a 	mov	r20,r2
    ae74:	00bfffc4 	movi	r2,-1
    ae78:	a0802026 	beq	r20,r2,aefc <__fputwc+0xd8>
    ae7c:	d9400003 	ldbu	r5,0(sp)
    ae80:	a0001c26 	beq	r20,zero,aef4 <__fputwc+0xd0>
    ae84:	0023883a 	mov	r17,zero
    ae88:	05400284 	movi	r21,10
    ae8c:	00000906 	br	aeb4 <__fputwc+0x90>
    ae90:	80800017 	ldw	r2,0(r16)
    ae94:	11400005 	stb	r5,0(r2)
    ae98:	80c00017 	ldw	r3,0(r16)
    ae9c:	18c00044 	addi	r3,r3,1
    aea0:	80c00015 	stw	r3,0(r16)
    aea4:	8c400044 	addi	r17,r17,1
    aea8:	dc45883a 	add	r2,sp,r17
    aeac:	8d00112e 	bgeu	r17,r20,aef4 <__fputwc+0xd0>
    aeb0:	11400003 	ldbu	r5,0(r2)
    aeb4:	80c00217 	ldw	r3,8(r16)
    aeb8:	18ffffc4 	addi	r3,r3,-1
    aebc:	80c00215 	stw	r3,8(r16)
    aec0:	183ff30e 	bge	r3,zero,ae90 <__alt_data_end+0xff00ae90>
    aec4:	80800617 	ldw	r2,24(r16)
    aec8:	18801916 	blt	r3,r2,af30 <__fputwc+0x10c>
    aecc:	80800017 	ldw	r2,0(r16)
    aed0:	11400005 	stb	r5,0(r2)
    aed4:	80800017 	ldw	r2,0(r16)
    aed8:	10c00003 	ldbu	r3,0(r2)
    aedc:	10800044 	addi	r2,r2,1
    aee0:	1d402326 	beq	r3,r21,af70 <__fputwc+0x14c>
    aee4:	80800015 	stw	r2,0(r16)
    aee8:	8c400044 	addi	r17,r17,1
    aeec:	dc45883a 	add	r2,sp,r17
    aef0:	8d3fef36 	bltu	r17,r20,aeb0 <__alt_data_end+0xff00aeb0>
    aef4:	9005883a 	mov	r2,r18
    aef8:	00000406 	br	af0c <__fputwc+0xe8>
    aefc:	80c0030b 	ldhu	r3,12(r16)
    af00:	a005883a 	mov	r2,r20
    af04:	18c01014 	ori	r3,r3,64
    af08:	80c0030d 	sth	r3,12(r16)
    af0c:	dfc00717 	ldw	ra,28(sp)
    af10:	dd400617 	ldw	r21,24(sp)
    af14:	dd000517 	ldw	r20,20(sp)
    af18:	dcc00417 	ldw	r19,16(sp)
    af1c:	dc800317 	ldw	r18,12(sp)
    af20:	dc400217 	ldw	r17,8(sp)
    af24:	dc000117 	ldw	r16,4(sp)
    af28:	dec00804 	addi	sp,sp,32
    af2c:	f800283a 	ret
    af30:	800d883a 	mov	r6,r16
    af34:	29403fcc 	andi	r5,r5,255
    af38:	9809883a 	mov	r4,r19
    af3c:	000b19c0 	call	b19c <__swbuf_r>
    af40:	10bfffe0 	cmpeqi	r2,r2,-1
    af44:	10803fcc 	andi	r2,r2,255
    af48:	103fd626 	beq	r2,zero,aea4 <__alt_data_end+0xff00aea4>
    af4c:	00bfffc4 	movi	r2,-1
    af50:	003fee06 	br	af0c <__alt_data_end+0xff00af0c>
    af54:	90ffffc4 	addi	r3,r18,-1
    af58:	01003f84 	movi	r4,254
    af5c:	20ffbf36 	bltu	r4,r3,ae5c <__alt_data_end+0xff00ae5c>
    af60:	900b883a 	mov	r5,r18
    af64:	dc800005 	stb	r18,0(sp)
    af68:	1029883a 	mov	r20,r2
    af6c:	003fc506 	br	ae84 <__alt_data_end+0xff00ae84>
    af70:	800d883a 	mov	r6,r16
    af74:	a80b883a 	mov	r5,r21
    af78:	9809883a 	mov	r4,r19
    af7c:	000b19c0 	call	b19c <__swbuf_r>
    af80:	10bfffe0 	cmpeqi	r2,r2,-1
    af84:	003fef06 	br	af44 <__alt_data_end+0xff00af44>

0000af88 <_fputwc_r>:
    af88:	3080030b 	ldhu	r2,12(r6)
    af8c:	10c8000c 	andi	r3,r2,8192
    af90:	1800051e 	bne	r3,zero,afa8 <_fputwc_r+0x20>
    af94:	30c01917 	ldw	r3,100(r6)
    af98:	10880014 	ori	r2,r2,8192
    af9c:	3080030d 	sth	r2,12(r6)
    afa0:	18880014 	ori	r2,r3,8192
    afa4:	30801915 	stw	r2,100(r6)
    afa8:	000ae241 	jmpi	ae24 <__fputwc>

0000afac <fputwc>:
    afac:	00800074 	movhi	r2,1
    afb0:	defffc04 	addi	sp,sp,-16
    afb4:	108cad04 	addi	r2,r2,12980
    afb8:	dc000115 	stw	r16,4(sp)
    afbc:	14000017 	ldw	r16,0(r2)
    afc0:	dc400215 	stw	r17,8(sp)
    afc4:	dfc00315 	stw	ra,12(sp)
    afc8:	2023883a 	mov	r17,r4
    afcc:	80000226 	beq	r16,zero,afd8 <fputwc+0x2c>
    afd0:	80800e17 	ldw	r2,56(r16)
    afd4:	10001026 	beq	r2,zero,b018 <fputwc+0x6c>
    afd8:	2880030b 	ldhu	r2,12(r5)
    afdc:	10c8000c 	andi	r3,r2,8192
    afe0:	1800051e 	bne	r3,zero,aff8 <fputwc+0x4c>
    afe4:	28c01917 	ldw	r3,100(r5)
    afe8:	10880014 	ori	r2,r2,8192
    afec:	2880030d 	sth	r2,12(r5)
    aff0:	18880014 	ori	r2,r3,8192
    aff4:	28801915 	stw	r2,100(r5)
    aff8:	280d883a 	mov	r6,r5
    affc:	8009883a 	mov	r4,r16
    b000:	880b883a 	mov	r5,r17
    b004:	dfc00317 	ldw	ra,12(sp)
    b008:	dc400217 	ldw	r17,8(sp)
    b00c:	dc000117 	ldw	r16,4(sp)
    b010:	dec00404 	addi	sp,sp,16
    b014:	000ae241 	jmpi	ae24 <__fputwc>
    b018:	8009883a 	mov	r4,r16
    b01c:	d9400015 	stw	r5,0(sp)
    b020:	0006cac0 	call	6cac <__sinit>
    b024:	d9400017 	ldw	r5,0(sp)
    b028:	003feb06 	br	afd8 <__alt_data_end+0xff00afd8>

0000b02c <_fstat_r>:
    b02c:	defffd04 	addi	sp,sp,-12
    b030:	2805883a 	mov	r2,r5
    b034:	dc000015 	stw	r16,0(sp)
    b038:	04000074 	movhi	r16,1
    b03c:	dc400115 	stw	r17,4(sp)
    b040:	84138204 	addi	r16,r16,19976
    b044:	2023883a 	mov	r17,r4
    b048:	300b883a 	mov	r5,r6
    b04c:	1009883a 	mov	r4,r2
    b050:	dfc00215 	stw	ra,8(sp)
    b054:	80000015 	stw	zero,0(r16)
    b058:	000e7680 	call	e768 <fstat>
    b05c:	00ffffc4 	movi	r3,-1
    b060:	10c00526 	beq	r2,r3,b078 <_fstat_r+0x4c>
    b064:	dfc00217 	ldw	ra,8(sp)
    b068:	dc400117 	ldw	r17,4(sp)
    b06c:	dc000017 	ldw	r16,0(sp)
    b070:	dec00304 	addi	sp,sp,12
    b074:	f800283a 	ret
    b078:	80c00017 	ldw	r3,0(r16)
    b07c:	183ff926 	beq	r3,zero,b064 <__alt_data_end+0xff00b064>
    b080:	88c00015 	stw	r3,0(r17)
    b084:	003ff706 	br	b064 <__alt_data_end+0xff00b064>

0000b088 <_isatty_r>:
    b088:	defffd04 	addi	sp,sp,-12
    b08c:	dc000015 	stw	r16,0(sp)
    b090:	04000074 	movhi	r16,1
    b094:	dc400115 	stw	r17,4(sp)
    b098:	84138204 	addi	r16,r16,19976
    b09c:	2023883a 	mov	r17,r4
    b0a0:	2809883a 	mov	r4,r5
    b0a4:	dfc00215 	stw	ra,8(sp)
    b0a8:	80000015 	stw	zero,0(r16)
    b0ac:	000e8540 	call	e854 <isatty>
    b0b0:	00ffffc4 	movi	r3,-1
    b0b4:	10c00526 	beq	r2,r3,b0cc <_isatty_r+0x44>
    b0b8:	dfc00217 	ldw	ra,8(sp)
    b0bc:	dc400117 	ldw	r17,4(sp)
    b0c0:	dc000017 	ldw	r16,0(sp)
    b0c4:	dec00304 	addi	sp,sp,12
    b0c8:	f800283a 	ret
    b0cc:	80c00017 	ldw	r3,0(r16)
    b0d0:	183ff926 	beq	r3,zero,b0b8 <__alt_data_end+0xff00b0b8>
    b0d4:	88c00015 	stw	r3,0(r17)
    b0d8:	003ff706 	br	b0b8 <__alt_data_end+0xff00b0b8>

0000b0dc <_lseek_r>:
    b0dc:	defffd04 	addi	sp,sp,-12
    b0e0:	2805883a 	mov	r2,r5
    b0e4:	dc000015 	stw	r16,0(sp)
    b0e8:	04000074 	movhi	r16,1
    b0ec:	dc400115 	stw	r17,4(sp)
    b0f0:	300b883a 	mov	r5,r6
    b0f4:	84138204 	addi	r16,r16,19976
    b0f8:	2023883a 	mov	r17,r4
    b0fc:	380d883a 	mov	r6,r7
    b100:	1009883a 	mov	r4,r2
    b104:	dfc00215 	stw	ra,8(sp)
    b108:	80000015 	stw	zero,0(r16)
    b10c:	000ea200 	call	ea20 <lseek>
    b110:	00ffffc4 	movi	r3,-1
    b114:	10c00526 	beq	r2,r3,b12c <_lseek_r+0x50>
    b118:	dfc00217 	ldw	ra,8(sp)
    b11c:	dc400117 	ldw	r17,4(sp)
    b120:	dc000017 	ldw	r16,0(sp)
    b124:	dec00304 	addi	sp,sp,12
    b128:	f800283a 	ret
    b12c:	80c00017 	ldw	r3,0(r16)
    b130:	183ff926 	beq	r3,zero,b118 <__alt_data_end+0xff00b118>
    b134:	88c00015 	stw	r3,0(r17)
    b138:	003ff706 	br	b118 <__alt_data_end+0xff00b118>

0000b13c <_read_r>:
    b13c:	defffd04 	addi	sp,sp,-12
    b140:	2805883a 	mov	r2,r5
    b144:	dc000015 	stw	r16,0(sp)
    b148:	04000074 	movhi	r16,1
    b14c:	dc400115 	stw	r17,4(sp)
    b150:	300b883a 	mov	r5,r6
    b154:	84138204 	addi	r16,r16,19976
    b158:	2023883a 	mov	r17,r4
    b15c:	380d883a 	mov	r6,r7
    b160:	1009883a 	mov	r4,r2
    b164:	dfc00215 	stw	ra,8(sp)
    b168:	80000015 	stw	zero,0(r16)
    b16c:	000ebf40 	call	ebf4 <read>
    b170:	00ffffc4 	movi	r3,-1
    b174:	10c00526 	beq	r2,r3,b18c <_read_r+0x50>
    b178:	dfc00217 	ldw	ra,8(sp)
    b17c:	dc400117 	ldw	r17,4(sp)
    b180:	dc000017 	ldw	r16,0(sp)
    b184:	dec00304 	addi	sp,sp,12
    b188:	f800283a 	ret
    b18c:	80c00017 	ldw	r3,0(r16)
    b190:	183ff926 	beq	r3,zero,b178 <__alt_data_end+0xff00b178>
    b194:	88c00015 	stw	r3,0(r17)
    b198:	003ff706 	br	b178 <__alt_data_end+0xff00b178>

0000b19c <__swbuf_r>:
    b19c:	defffb04 	addi	sp,sp,-20
    b1a0:	dcc00315 	stw	r19,12(sp)
    b1a4:	dc800215 	stw	r18,8(sp)
    b1a8:	dc000015 	stw	r16,0(sp)
    b1ac:	dfc00415 	stw	ra,16(sp)
    b1b0:	dc400115 	stw	r17,4(sp)
    b1b4:	2025883a 	mov	r18,r4
    b1b8:	2827883a 	mov	r19,r5
    b1bc:	3021883a 	mov	r16,r6
    b1c0:	20000226 	beq	r4,zero,b1cc <__swbuf_r+0x30>
    b1c4:	20800e17 	ldw	r2,56(r4)
    b1c8:	10004226 	beq	r2,zero,b2d4 <__swbuf_r+0x138>
    b1cc:	80800617 	ldw	r2,24(r16)
    b1d0:	8100030b 	ldhu	r4,12(r16)
    b1d4:	80800215 	stw	r2,8(r16)
    b1d8:	2080020c 	andi	r2,r4,8
    b1dc:	10003626 	beq	r2,zero,b2b8 <__swbuf_r+0x11c>
    b1e0:	80c00417 	ldw	r3,16(r16)
    b1e4:	18003426 	beq	r3,zero,b2b8 <__swbuf_r+0x11c>
    b1e8:	2088000c 	andi	r2,r4,8192
    b1ec:	9c403fcc 	andi	r17,r19,255
    b1f0:	10001a26 	beq	r2,zero,b25c <__swbuf_r+0xc0>
    b1f4:	80800017 	ldw	r2,0(r16)
    b1f8:	81000517 	ldw	r4,20(r16)
    b1fc:	10c7c83a 	sub	r3,r2,r3
    b200:	1900200e 	bge	r3,r4,b284 <__swbuf_r+0xe8>
    b204:	18c00044 	addi	r3,r3,1
    b208:	81000217 	ldw	r4,8(r16)
    b20c:	11400044 	addi	r5,r2,1
    b210:	81400015 	stw	r5,0(r16)
    b214:	213fffc4 	addi	r4,r4,-1
    b218:	81000215 	stw	r4,8(r16)
    b21c:	14c00005 	stb	r19,0(r2)
    b220:	80800517 	ldw	r2,20(r16)
    b224:	10c01e26 	beq	r2,r3,b2a0 <__swbuf_r+0x104>
    b228:	8080030b 	ldhu	r2,12(r16)
    b22c:	1080004c 	andi	r2,r2,1
    b230:	10000226 	beq	r2,zero,b23c <__swbuf_r+0xa0>
    b234:	00800284 	movi	r2,10
    b238:	88801926 	beq	r17,r2,b2a0 <__swbuf_r+0x104>
    b23c:	8805883a 	mov	r2,r17
    b240:	dfc00417 	ldw	ra,16(sp)
    b244:	dcc00317 	ldw	r19,12(sp)
    b248:	dc800217 	ldw	r18,8(sp)
    b24c:	dc400117 	ldw	r17,4(sp)
    b250:	dc000017 	ldw	r16,0(sp)
    b254:	dec00504 	addi	sp,sp,20
    b258:	f800283a 	ret
    b25c:	81401917 	ldw	r5,100(r16)
    b260:	00b7ffc4 	movi	r2,-8193
    b264:	21080014 	ori	r4,r4,8192
    b268:	2884703a 	and	r2,r5,r2
    b26c:	80801915 	stw	r2,100(r16)
    b270:	80800017 	ldw	r2,0(r16)
    b274:	8100030d 	sth	r4,12(r16)
    b278:	81000517 	ldw	r4,20(r16)
    b27c:	10c7c83a 	sub	r3,r2,r3
    b280:	193fe016 	blt	r3,r4,b204 <__alt_data_end+0xff00b204>
    b284:	800b883a 	mov	r5,r16
    b288:	9009883a 	mov	r4,r18
    b28c:	00068d00 	call	68d0 <_fflush_r>
    b290:	1000071e 	bne	r2,zero,b2b0 <__swbuf_r+0x114>
    b294:	80800017 	ldw	r2,0(r16)
    b298:	00c00044 	movi	r3,1
    b29c:	003fda06 	br	b208 <__alt_data_end+0xff00b208>
    b2a0:	800b883a 	mov	r5,r16
    b2a4:	9009883a 	mov	r4,r18
    b2a8:	00068d00 	call	68d0 <_fflush_r>
    b2ac:	103fe326 	beq	r2,zero,b23c <__alt_data_end+0xff00b23c>
    b2b0:	00bfffc4 	movi	r2,-1
    b2b4:	003fe206 	br	b240 <__alt_data_end+0xff00b240>
    b2b8:	800b883a 	mov	r5,r16
    b2bc:	9009883a 	mov	r4,r18
    b2c0:	0004cd80 	call	4cd8 <__swsetup_r>
    b2c4:	103ffa1e 	bne	r2,zero,b2b0 <__alt_data_end+0xff00b2b0>
    b2c8:	8100030b 	ldhu	r4,12(r16)
    b2cc:	80c00417 	ldw	r3,16(r16)
    b2d0:	003fc506 	br	b1e8 <__alt_data_end+0xff00b1e8>
    b2d4:	0006cac0 	call	6cac <__sinit>
    b2d8:	003fbc06 	br	b1cc <__alt_data_end+0xff00b1cc>

0000b2dc <__swbuf>:
    b2dc:	00800074 	movhi	r2,1
    b2e0:	108cad04 	addi	r2,r2,12980
    b2e4:	280d883a 	mov	r6,r5
    b2e8:	200b883a 	mov	r5,r4
    b2ec:	11000017 	ldw	r4,0(r2)
    b2f0:	000b19c1 	jmpi	b19c <__swbuf_r>

0000b2f4 <_wcrtomb_r>:
    b2f4:	defff604 	addi	sp,sp,-40
    b2f8:	00800074 	movhi	r2,1
    b2fc:	dc800815 	stw	r18,32(sp)
    b300:	dc400715 	stw	r17,28(sp)
    b304:	dc000615 	stw	r16,24(sp)
    b308:	108caf04 	addi	r2,r2,12988
    b30c:	dfc00915 	stw	ra,36(sp)
    b310:	2021883a 	mov	r16,r4
    b314:	3823883a 	mov	r17,r7
    b318:	14800017 	ldw	r18,0(r2)
    b31c:	28001426 	beq	r5,zero,b370 <_wcrtomb_r+0x7c>
    b320:	d9400415 	stw	r5,16(sp)
    b324:	d9800515 	stw	r6,20(sp)
    b328:	00077f00 	call	77f0 <__locale_charset>
    b32c:	d9800517 	ldw	r6,20(sp)
    b330:	d9400417 	ldw	r5,16(sp)
    b334:	100f883a 	mov	r7,r2
    b338:	dc400015 	stw	r17,0(sp)
    b33c:	8009883a 	mov	r4,r16
    b340:	903ee83a 	callr	r18
    b344:	00ffffc4 	movi	r3,-1
    b348:	10c0031e 	bne	r2,r3,b358 <_wcrtomb_r+0x64>
    b34c:	88000015 	stw	zero,0(r17)
    b350:	00c02284 	movi	r3,138
    b354:	80c00015 	stw	r3,0(r16)
    b358:	dfc00917 	ldw	ra,36(sp)
    b35c:	dc800817 	ldw	r18,32(sp)
    b360:	dc400717 	ldw	r17,28(sp)
    b364:	dc000617 	ldw	r16,24(sp)
    b368:	dec00a04 	addi	sp,sp,40
    b36c:	f800283a 	ret
    b370:	00077f00 	call	77f0 <__locale_charset>
    b374:	100f883a 	mov	r7,r2
    b378:	dc400015 	stw	r17,0(sp)
    b37c:	000d883a 	mov	r6,zero
    b380:	d9400104 	addi	r5,sp,4
    b384:	8009883a 	mov	r4,r16
    b388:	903ee83a 	callr	r18
    b38c:	003fed06 	br	b344 <__alt_data_end+0xff00b344>

0000b390 <wcrtomb>:
    b390:	defff604 	addi	sp,sp,-40
    b394:	00800074 	movhi	r2,1
    b398:	dc800615 	stw	r18,24(sp)
    b39c:	dc400515 	stw	r17,20(sp)
    b3a0:	108cad04 	addi	r2,r2,12980
    b3a4:	dfc00915 	stw	ra,36(sp)
    b3a8:	dd000815 	stw	r20,32(sp)
    b3ac:	dcc00715 	stw	r19,28(sp)
    b3b0:	dc000415 	stw	r16,16(sp)
    b3b4:	3025883a 	mov	r18,r6
    b3b8:	14400017 	ldw	r17,0(r2)
    b3bc:	20001926 	beq	r4,zero,b424 <wcrtomb+0x94>
    b3c0:	00800074 	movhi	r2,1
    b3c4:	108caf04 	addi	r2,r2,12988
    b3c8:	15000017 	ldw	r20,0(r2)
    b3cc:	2021883a 	mov	r16,r4
    b3d0:	2827883a 	mov	r19,r5
    b3d4:	00077f00 	call	77f0 <__locale_charset>
    b3d8:	100f883a 	mov	r7,r2
    b3dc:	dc800015 	stw	r18,0(sp)
    b3e0:	980d883a 	mov	r6,r19
    b3e4:	800b883a 	mov	r5,r16
    b3e8:	8809883a 	mov	r4,r17
    b3ec:	a03ee83a 	callr	r20
    b3f0:	00ffffc4 	movi	r3,-1
    b3f4:	10c0031e 	bne	r2,r3,b404 <wcrtomb+0x74>
    b3f8:	90000015 	stw	zero,0(r18)
    b3fc:	00c02284 	movi	r3,138
    b400:	88c00015 	stw	r3,0(r17)
    b404:	dfc00917 	ldw	ra,36(sp)
    b408:	dd000817 	ldw	r20,32(sp)
    b40c:	dcc00717 	ldw	r19,28(sp)
    b410:	dc800617 	ldw	r18,24(sp)
    b414:	dc400517 	ldw	r17,20(sp)
    b418:	dc000417 	ldw	r16,16(sp)
    b41c:	dec00a04 	addi	sp,sp,40
    b420:	f800283a 	ret
    b424:	00800074 	movhi	r2,1
    b428:	108caf04 	addi	r2,r2,12988
    b42c:	14000017 	ldw	r16,0(r2)
    b430:	00077f00 	call	77f0 <__locale_charset>
    b434:	100f883a 	mov	r7,r2
    b438:	dc800015 	stw	r18,0(sp)
    b43c:	000d883a 	mov	r6,zero
    b440:	d9400104 	addi	r5,sp,4
    b444:	8809883a 	mov	r4,r17
    b448:	803ee83a 	callr	r16
    b44c:	003fe806 	br	b3f0 <__alt_data_end+0xff00b3f0>

0000b450 <__ascii_wctomb>:
    b450:	28000526 	beq	r5,zero,b468 <__ascii_wctomb+0x18>
    b454:	00803fc4 	movi	r2,255
    b458:	11800536 	bltu	r2,r6,b470 <__ascii_wctomb+0x20>
    b45c:	29800005 	stb	r6,0(r5)
    b460:	00800044 	movi	r2,1
    b464:	f800283a 	ret
    b468:	0005883a 	mov	r2,zero
    b46c:	f800283a 	ret
    b470:	00802284 	movi	r2,138
    b474:	20800015 	stw	r2,0(r4)
    b478:	00bfffc4 	movi	r2,-1
    b47c:	f800283a 	ret

0000b480 <_wctomb_r>:
    b480:	00800074 	movhi	r2,1
    b484:	defff904 	addi	sp,sp,-28
    b488:	108caf04 	addi	r2,r2,12988
    b48c:	dfc00615 	stw	ra,24(sp)
    b490:	dc400515 	stw	r17,20(sp)
    b494:	dc000415 	stw	r16,16(sp)
    b498:	3823883a 	mov	r17,r7
    b49c:	14000017 	ldw	r16,0(r2)
    b4a0:	d9000115 	stw	r4,4(sp)
    b4a4:	d9400215 	stw	r5,8(sp)
    b4a8:	d9800315 	stw	r6,12(sp)
    b4ac:	00077f00 	call	77f0 <__locale_charset>
    b4b0:	d9800317 	ldw	r6,12(sp)
    b4b4:	d9400217 	ldw	r5,8(sp)
    b4b8:	d9000117 	ldw	r4,4(sp)
    b4bc:	100f883a 	mov	r7,r2
    b4c0:	dc400015 	stw	r17,0(sp)
    b4c4:	803ee83a 	callr	r16
    b4c8:	dfc00617 	ldw	ra,24(sp)
    b4cc:	dc400517 	ldw	r17,20(sp)
    b4d0:	dc000417 	ldw	r16,16(sp)
    b4d4:	dec00704 	addi	sp,sp,28
    b4d8:	f800283a 	ret

0000b4dc <__udivdi3>:
    b4dc:	defff504 	addi	sp,sp,-44
    b4e0:	dcc00415 	stw	r19,16(sp)
    b4e4:	dc000115 	stw	r16,4(sp)
    b4e8:	dfc00a15 	stw	ra,40(sp)
    b4ec:	df000915 	stw	fp,36(sp)
    b4f0:	ddc00815 	stw	r23,32(sp)
    b4f4:	dd800715 	stw	r22,28(sp)
    b4f8:	dd400615 	stw	r21,24(sp)
    b4fc:	dd000515 	stw	r20,20(sp)
    b500:	dc800315 	stw	r18,12(sp)
    b504:	dc400215 	stw	r17,8(sp)
    b508:	2027883a 	mov	r19,r4
    b50c:	2821883a 	mov	r16,r5
    b510:	3800411e 	bne	r7,zero,b618 <__udivdi3+0x13c>
    b514:	3023883a 	mov	r17,r6
    b518:	2025883a 	mov	r18,r4
    b51c:	2980522e 	bgeu	r5,r6,b668 <__udivdi3+0x18c>
    b520:	00bfffd4 	movui	r2,65535
    b524:	282d883a 	mov	r22,r5
    b528:	1180a836 	bltu	r2,r6,b7cc <__udivdi3+0x2f0>
    b52c:	00803fc4 	movi	r2,255
    b530:	1185803a 	cmpltu	r2,r2,r6
    b534:	100490fa 	slli	r2,r2,3
    b538:	3086d83a 	srl	r3,r6,r2
    b53c:	01000074 	movhi	r4,1
    b540:	2105b404 	addi	r4,r4,5840
    b544:	20c7883a 	add	r3,r4,r3
    b548:	18c00003 	ldbu	r3,0(r3)
    b54c:	1885883a 	add	r2,r3,r2
    b550:	00c00804 	movi	r3,32
    b554:	1887c83a 	sub	r3,r3,r2
    b558:	18000526 	beq	r3,zero,b570 <__udivdi3+0x94>
    b55c:	80e0983a 	sll	r16,r16,r3
    b560:	9884d83a 	srl	r2,r19,r2
    b564:	30e2983a 	sll	r17,r6,r3
    b568:	98e4983a 	sll	r18,r19,r3
    b56c:	142cb03a 	or	r22,r2,r16
    b570:	882ad43a 	srli	r21,r17,16
    b574:	b009883a 	mov	r4,r22
    b578:	8d3fffcc 	andi	r20,r17,65535
    b57c:	a80b883a 	mov	r5,r21
    b580:	0001e080 	call	1e08 <__umodsi3>
    b584:	b009883a 	mov	r4,r22
    b588:	a80b883a 	mov	r5,r21
    b58c:	1027883a 	mov	r19,r2
    b590:	0001da40 	call	1da4 <__udivsi3>
    b594:	102d883a 	mov	r22,r2
    b598:	9826943a 	slli	r19,r19,16
    b59c:	9004d43a 	srli	r2,r18,16
    b5a0:	a5a1383a 	mul	r16,r20,r22
    b5a4:	14c4b03a 	or	r2,r2,r19
    b5a8:	1400052e 	bgeu	r2,r16,b5c0 <__udivdi3+0xe4>
    b5ac:	1445883a 	add	r2,r2,r17
    b5b0:	b0ffffc4 	addi	r3,r22,-1
    b5b4:	14400136 	bltu	r2,r17,b5bc <__udivdi3+0xe0>
    b5b8:	14012336 	bltu	r2,r16,ba48 <__udivdi3+0x56c>
    b5bc:	182d883a 	mov	r22,r3
    b5c0:	1421c83a 	sub	r16,r2,r16
    b5c4:	a80b883a 	mov	r5,r21
    b5c8:	8009883a 	mov	r4,r16
    b5cc:	0001e080 	call	1e08 <__umodsi3>
    b5d0:	1027883a 	mov	r19,r2
    b5d4:	a80b883a 	mov	r5,r21
    b5d8:	8009883a 	mov	r4,r16
    b5dc:	0001da40 	call	1da4 <__udivsi3>
    b5e0:	9826943a 	slli	r19,r19,16
    b5e4:	a0a9383a 	mul	r20,r20,r2
    b5e8:	94bfffcc 	andi	r18,r18,65535
    b5ec:	94e4b03a 	or	r18,r18,r19
    b5f0:	9500052e 	bgeu	r18,r20,b608 <__udivdi3+0x12c>
    b5f4:	8ca5883a 	add	r18,r17,r18
    b5f8:	10ffffc4 	addi	r3,r2,-1
    b5fc:	9440f136 	bltu	r18,r17,b9c4 <__udivdi3+0x4e8>
    b600:	9500f02e 	bgeu	r18,r20,b9c4 <__udivdi3+0x4e8>
    b604:	10bfff84 	addi	r2,r2,-2
    b608:	b00c943a 	slli	r6,r22,16
    b60c:	0007883a 	mov	r3,zero
    b610:	3084b03a 	or	r2,r6,r2
    b614:	00005906 	br	b77c <__udivdi3+0x2a0>
    b618:	29c05636 	bltu	r5,r7,b774 <__udivdi3+0x298>
    b61c:	00bfffd4 	movui	r2,65535
    b620:	11c0622e 	bgeu	r2,r7,b7ac <__udivdi3+0x2d0>
    b624:	00804034 	movhi	r2,256
    b628:	10bfffc4 	addi	r2,r2,-1
    b62c:	11c0ee36 	bltu	r2,r7,b9e8 <__udivdi3+0x50c>
    b630:	00800404 	movi	r2,16
    b634:	3886d83a 	srl	r3,r7,r2
    b638:	01000074 	movhi	r4,1
    b63c:	2105b404 	addi	r4,r4,5840
    b640:	20c7883a 	add	r3,r4,r3
    b644:	18c00003 	ldbu	r3,0(r3)
    b648:	05400804 	movi	r21,32
    b64c:	1885883a 	add	r2,r3,r2
    b650:	a8abc83a 	sub	r21,r21,r2
    b654:	a800621e 	bne	r21,zero,b7e0 <__udivdi3+0x304>
    b658:	3c00e936 	bltu	r7,r16,ba00 <__udivdi3+0x524>
    b65c:	9985403a 	cmpgeu	r2,r19,r6
    b660:	0007883a 	mov	r3,zero
    b664:	00004506 	br	b77c <__udivdi3+0x2a0>
    b668:	3000041e 	bne	r6,zero,b67c <__udivdi3+0x1a0>
    b66c:	000b883a 	mov	r5,zero
    b670:	01000044 	movi	r4,1
    b674:	0001da40 	call	1da4 <__udivsi3>
    b678:	1023883a 	mov	r17,r2
    b67c:	00bfffd4 	movui	r2,65535
    b680:	14404e2e 	bgeu	r2,r17,b7bc <__udivdi3+0x2e0>
    b684:	00804034 	movhi	r2,256
    b688:	10bfffc4 	addi	r2,r2,-1
    b68c:	1440d836 	bltu	r2,r17,b9f0 <__udivdi3+0x514>
    b690:	00800404 	movi	r2,16
    b694:	8886d83a 	srl	r3,r17,r2
    b698:	01000074 	movhi	r4,1
    b69c:	2105b404 	addi	r4,r4,5840
    b6a0:	20c7883a 	add	r3,r4,r3
    b6a4:	18c00003 	ldbu	r3,0(r3)
    b6a8:	1885883a 	add	r2,r3,r2
    b6ac:	00c00804 	movi	r3,32
    b6b0:	1887c83a 	sub	r3,r3,r2
    b6b4:	18008f1e 	bne	r3,zero,b8f4 <__udivdi3+0x418>
    b6b8:	882ad43a 	srli	r21,r17,16
    b6bc:	8461c83a 	sub	r16,r16,r17
    b6c0:	8d3fffcc 	andi	r20,r17,65535
    b6c4:	00c00044 	movi	r3,1
    b6c8:	8009883a 	mov	r4,r16
    b6cc:	a80b883a 	mov	r5,r21
    b6d0:	d8c00015 	stw	r3,0(sp)
    b6d4:	0001e080 	call	1e08 <__umodsi3>
    b6d8:	8009883a 	mov	r4,r16
    b6dc:	a80b883a 	mov	r5,r21
    b6e0:	1027883a 	mov	r19,r2
    b6e4:	0001da40 	call	1da4 <__udivsi3>
    b6e8:	9826943a 	slli	r19,r19,16
    b6ec:	9008d43a 	srli	r4,r18,16
    b6f0:	1521383a 	mul	r16,r2,r20
    b6f4:	102d883a 	mov	r22,r2
    b6f8:	24c8b03a 	or	r4,r4,r19
    b6fc:	d8c00017 	ldw	r3,0(sp)
    b700:	2400052e 	bgeu	r4,r16,b718 <__udivdi3+0x23c>
    b704:	2449883a 	add	r4,r4,r17
    b708:	b0bfffc4 	addi	r2,r22,-1
    b70c:	24400136 	bltu	r4,r17,b714 <__udivdi3+0x238>
    b710:	2400ca36 	bltu	r4,r16,ba3c <__udivdi3+0x560>
    b714:	102d883a 	mov	r22,r2
    b718:	2421c83a 	sub	r16,r4,r16
    b71c:	a80b883a 	mov	r5,r21
    b720:	8009883a 	mov	r4,r16
    b724:	d8c00015 	stw	r3,0(sp)
    b728:	0001e080 	call	1e08 <__umodsi3>
    b72c:	1027883a 	mov	r19,r2
    b730:	a80b883a 	mov	r5,r21
    b734:	8009883a 	mov	r4,r16
    b738:	0001da40 	call	1da4 <__udivsi3>
    b73c:	9826943a 	slli	r19,r19,16
    b740:	1529383a 	mul	r20,r2,r20
    b744:	94bfffcc 	andi	r18,r18,65535
    b748:	94e4b03a 	or	r18,r18,r19
    b74c:	d8c00017 	ldw	r3,0(sp)
    b750:	9500052e 	bgeu	r18,r20,b768 <__udivdi3+0x28c>
    b754:	8ca5883a 	add	r18,r17,r18
    b758:	113fffc4 	addi	r4,r2,-1
    b75c:	94409736 	bltu	r18,r17,b9bc <__udivdi3+0x4e0>
    b760:	9500962e 	bgeu	r18,r20,b9bc <__udivdi3+0x4e0>
    b764:	10bfff84 	addi	r2,r2,-2
    b768:	b00c943a 	slli	r6,r22,16
    b76c:	3084b03a 	or	r2,r6,r2
    b770:	00000206 	br	b77c <__udivdi3+0x2a0>
    b774:	0007883a 	mov	r3,zero
    b778:	0005883a 	mov	r2,zero
    b77c:	dfc00a17 	ldw	ra,40(sp)
    b780:	df000917 	ldw	fp,36(sp)
    b784:	ddc00817 	ldw	r23,32(sp)
    b788:	dd800717 	ldw	r22,28(sp)
    b78c:	dd400617 	ldw	r21,24(sp)
    b790:	dd000517 	ldw	r20,20(sp)
    b794:	dcc00417 	ldw	r19,16(sp)
    b798:	dc800317 	ldw	r18,12(sp)
    b79c:	dc400217 	ldw	r17,8(sp)
    b7a0:	dc000117 	ldw	r16,4(sp)
    b7a4:	dec00b04 	addi	sp,sp,44
    b7a8:	f800283a 	ret
    b7ac:	00803fc4 	movi	r2,255
    b7b0:	11c5803a 	cmpltu	r2,r2,r7
    b7b4:	100490fa 	slli	r2,r2,3
    b7b8:	003f9e06 	br	b634 <__alt_data_end+0xff00b634>
    b7bc:	00803fc4 	movi	r2,255
    b7c0:	1445803a 	cmpltu	r2,r2,r17
    b7c4:	100490fa 	slli	r2,r2,3
    b7c8:	003fb206 	br	b694 <__alt_data_end+0xff00b694>
    b7cc:	00804034 	movhi	r2,256
    b7d0:	10bfffc4 	addi	r2,r2,-1
    b7d4:	11808836 	bltu	r2,r6,b9f8 <__udivdi3+0x51c>
    b7d8:	00800404 	movi	r2,16
    b7dc:	003f5606 	br	b538 <__alt_data_end+0xff00b538>
    b7e0:	30aed83a 	srl	r23,r6,r2
    b7e4:	3d4e983a 	sll	r7,r7,r21
    b7e8:	80acd83a 	srl	r22,r16,r2
    b7ec:	9884d83a 	srl	r2,r19,r2
    b7f0:	3deeb03a 	or	r23,r7,r23
    b7f4:	b824d43a 	srli	r18,r23,16
    b7f8:	8560983a 	sll	r16,r16,r21
    b7fc:	b009883a 	mov	r4,r22
    b800:	900b883a 	mov	r5,r18
    b804:	3568983a 	sll	r20,r6,r21
    b808:	1420b03a 	or	r16,r2,r16
    b80c:	0001e080 	call	1e08 <__umodsi3>
    b810:	b009883a 	mov	r4,r22
    b814:	900b883a 	mov	r5,r18
    b818:	1023883a 	mov	r17,r2
    b81c:	0001da40 	call	1da4 <__udivsi3>
    b820:	8808943a 	slli	r4,r17,16
    b824:	bf3fffcc 	andi	fp,r23,65535
    b828:	8006d43a 	srli	r3,r16,16
    b82c:	e0a3383a 	mul	r17,fp,r2
    b830:	100d883a 	mov	r6,r2
    b834:	1906b03a 	or	r3,r3,r4
    b838:	1c40042e 	bgeu	r3,r17,b84c <__udivdi3+0x370>
    b83c:	1dc7883a 	add	r3,r3,r23
    b840:	10bfffc4 	addi	r2,r2,-1
    b844:	1dc0752e 	bgeu	r3,r23,ba1c <__udivdi3+0x540>
    b848:	100d883a 	mov	r6,r2
    b84c:	1c63c83a 	sub	r17,r3,r17
    b850:	900b883a 	mov	r5,r18
    b854:	8809883a 	mov	r4,r17
    b858:	d9800015 	stw	r6,0(sp)
    b85c:	0001e080 	call	1e08 <__umodsi3>
    b860:	102d883a 	mov	r22,r2
    b864:	8809883a 	mov	r4,r17
    b868:	900b883a 	mov	r5,r18
    b86c:	0001da40 	call	1da4 <__udivsi3>
    b870:	b02c943a 	slli	r22,r22,16
    b874:	e089383a 	mul	r4,fp,r2
    b878:	843fffcc 	andi	r16,r16,65535
    b87c:	85a0b03a 	or	r16,r16,r22
    b880:	d9800017 	ldw	r6,0(sp)
    b884:	8100042e 	bgeu	r16,r4,b898 <__udivdi3+0x3bc>
    b888:	85e1883a 	add	r16,r16,r23
    b88c:	10ffffc4 	addi	r3,r2,-1
    b890:	85c05e2e 	bgeu	r16,r23,ba0c <__udivdi3+0x530>
    b894:	1805883a 	mov	r2,r3
    b898:	300c943a 	slli	r6,r6,16
    b89c:	a17fffcc 	andi	r5,r20,65535
    b8a0:	a028d43a 	srli	r20,r20,16
    b8a4:	3084b03a 	or	r2,r6,r2
    b8a8:	10ffffcc 	andi	r3,r2,65535
    b8ac:	100cd43a 	srli	r6,r2,16
    b8b0:	194f383a 	mul	r7,r3,r5
    b8b4:	1d07383a 	mul	r3,r3,r20
    b8b8:	314b383a 	mul	r5,r6,r5
    b8bc:	3810d43a 	srli	r8,r7,16
    b8c0:	8121c83a 	sub	r16,r16,r4
    b8c4:	1947883a 	add	r3,r3,r5
    b8c8:	40c7883a 	add	r3,r8,r3
    b8cc:	350d383a 	mul	r6,r6,r20
    b8d0:	1940022e 	bgeu	r3,r5,b8dc <__udivdi3+0x400>
    b8d4:	01000074 	movhi	r4,1
    b8d8:	310d883a 	add	r6,r6,r4
    b8dc:	1828d43a 	srli	r20,r3,16
    b8e0:	a18d883a 	add	r6,r20,r6
    b8e4:	81803e36 	bltu	r16,r6,b9e0 <__udivdi3+0x504>
    b8e8:	81803826 	beq	r16,r6,b9cc <__udivdi3+0x4f0>
    b8ec:	0007883a 	mov	r3,zero
    b8f0:	003fa206 	br	b77c <__alt_data_end+0xff00b77c>
    b8f4:	88e2983a 	sll	r17,r17,r3
    b8f8:	80a8d83a 	srl	r20,r16,r2
    b8fc:	80e0983a 	sll	r16,r16,r3
    b900:	882ad43a 	srli	r21,r17,16
    b904:	9884d83a 	srl	r2,r19,r2
    b908:	a009883a 	mov	r4,r20
    b90c:	a80b883a 	mov	r5,r21
    b910:	142eb03a 	or	r23,r2,r16
    b914:	98e4983a 	sll	r18,r19,r3
    b918:	0001e080 	call	1e08 <__umodsi3>
    b91c:	a009883a 	mov	r4,r20
    b920:	a80b883a 	mov	r5,r21
    b924:	1021883a 	mov	r16,r2
    b928:	0001da40 	call	1da4 <__udivsi3>
    b92c:	1039883a 	mov	fp,r2
    b930:	8d3fffcc 	andi	r20,r17,65535
    b934:	8020943a 	slli	r16,r16,16
    b938:	b804d43a 	srli	r2,r23,16
    b93c:	a72d383a 	mul	r22,r20,fp
    b940:	1404b03a 	or	r2,r2,r16
    b944:	1580062e 	bgeu	r2,r22,b960 <__udivdi3+0x484>
    b948:	1445883a 	add	r2,r2,r17
    b94c:	e0ffffc4 	addi	r3,fp,-1
    b950:	14403836 	bltu	r2,r17,ba34 <__udivdi3+0x558>
    b954:	1580372e 	bgeu	r2,r22,ba34 <__udivdi3+0x558>
    b958:	e73fff84 	addi	fp,fp,-2
    b95c:	1445883a 	add	r2,r2,r17
    b960:	15adc83a 	sub	r22,r2,r22
    b964:	a80b883a 	mov	r5,r21
    b968:	b009883a 	mov	r4,r22
    b96c:	0001e080 	call	1e08 <__umodsi3>
    b970:	1027883a 	mov	r19,r2
    b974:	b009883a 	mov	r4,r22
    b978:	a80b883a 	mov	r5,r21
    b97c:	0001da40 	call	1da4 <__udivsi3>
    b980:	9826943a 	slli	r19,r19,16
    b984:	a0a1383a 	mul	r16,r20,r2
    b988:	b93fffcc 	andi	r4,r23,65535
    b98c:	24c8b03a 	or	r4,r4,r19
    b990:	2400062e 	bgeu	r4,r16,b9ac <__udivdi3+0x4d0>
    b994:	2449883a 	add	r4,r4,r17
    b998:	10ffffc4 	addi	r3,r2,-1
    b99c:	24402336 	bltu	r4,r17,ba2c <__udivdi3+0x550>
    b9a0:	2400222e 	bgeu	r4,r16,ba2c <__udivdi3+0x550>
    b9a4:	10bfff84 	addi	r2,r2,-2
    b9a8:	2449883a 	add	r4,r4,r17
    b9ac:	e038943a 	slli	fp,fp,16
    b9b0:	2421c83a 	sub	r16,r4,r16
    b9b4:	e086b03a 	or	r3,fp,r2
    b9b8:	003f4306 	br	b6c8 <__alt_data_end+0xff00b6c8>
    b9bc:	2005883a 	mov	r2,r4
    b9c0:	003f6906 	br	b768 <__alt_data_end+0xff00b768>
    b9c4:	1805883a 	mov	r2,r3
    b9c8:	003f0f06 	br	b608 <__alt_data_end+0xff00b608>
    b9cc:	1806943a 	slli	r3,r3,16
    b9d0:	9d66983a 	sll	r19,r19,r21
    b9d4:	39ffffcc 	andi	r7,r7,65535
    b9d8:	19c7883a 	add	r3,r3,r7
    b9dc:	98ffc32e 	bgeu	r19,r3,b8ec <__alt_data_end+0xff00b8ec>
    b9e0:	10bfffc4 	addi	r2,r2,-1
    b9e4:	003fc106 	br	b8ec <__alt_data_end+0xff00b8ec>
    b9e8:	00800604 	movi	r2,24
    b9ec:	003f1106 	br	b634 <__alt_data_end+0xff00b634>
    b9f0:	00800604 	movi	r2,24
    b9f4:	003f2706 	br	b694 <__alt_data_end+0xff00b694>
    b9f8:	00800604 	movi	r2,24
    b9fc:	003ece06 	br	b538 <__alt_data_end+0xff00b538>
    ba00:	0007883a 	mov	r3,zero
    ba04:	00800044 	movi	r2,1
    ba08:	003f5c06 	br	b77c <__alt_data_end+0xff00b77c>
    ba0c:	813fa12e 	bgeu	r16,r4,b894 <__alt_data_end+0xff00b894>
    ba10:	10bfff84 	addi	r2,r2,-2
    ba14:	85e1883a 	add	r16,r16,r23
    ba18:	003f9f06 	br	b898 <__alt_data_end+0xff00b898>
    ba1c:	1c7f8a2e 	bgeu	r3,r17,b848 <__alt_data_end+0xff00b848>
    ba20:	31bfff84 	addi	r6,r6,-2
    ba24:	1dc7883a 	add	r3,r3,r23
    ba28:	003f8806 	br	b84c <__alt_data_end+0xff00b84c>
    ba2c:	1805883a 	mov	r2,r3
    ba30:	003fde06 	br	b9ac <__alt_data_end+0xff00b9ac>
    ba34:	1839883a 	mov	fp,r3
    ba38:	003fc906 	br	b960 <__alt_data_end+0xff00b960>
    ba3c:	b5bfff84 	addi	r22,r22,-2
    ba40:	2449883a 	add	r4,r4,r17
    ba44:	003f3406 	br	b718 <__alt_data_end+0xff00b718>
    ba48:	b5bfff84 	addi	r22,r22,-2
    ba4c:	1445883a 	add	r2,r2,r17
    ba50:	003edb06 	br	b5c0 <__alt_data_end+0xff00b5c0>

0000ba54 <__umoddi3>:
    ba54:	defff404 	addi	sp,sp,-48
    ba58:	df000a15 	stw	fp,40(sp)
    ba5c:	dc400315 	stw	r17,12(sp)
    ba60:	dc000215 	stw	r16,8(sp)
    ba64:	dfc00b15 	stw	ra,44(sp)
    ba68:	ddc00915 	stw	r23,36(sp)
    ba6c:	dd800815 	stw	r22,32(sp)
    ba70:	dd400715 	stw	r21,28(sp)
    ba74:	dd000615 	stw	r20,24(sp)
    ba78:	dcc00515 	stw	r19,20(sp)
    ba7c:	dc800415 	stw	r18,16(sp)
    ba80:	2021883a 	mov	r16,r4
    ba84:	2823883a 	mov	r17,r5
    ba88:	2839883a 	mov	fp,r5
    ba8c:	38003c1e 	bne	r7,zero,bb80 <__umoddi3+0x12c>
    ba90:	3027883a 	mov	r19,r6
    ba94:	2029883a 	mov	r20,r4
    ba98:	2980512e 	bgeu	r5,r6,bbe0 <__umoddi3+0x18c>
    ba9c:	00bfffd4 	movui	r2,65535
    baa0:	11809a36 	bltu	r2,r6,bd0c <__umoddi3+0x2b8>
    baa4:	01003fc4 	movi	r4,255
    baa8:	2189803a 	cmpltu	r4,r4,r6
    baac:	200890fa 	slli	r4,r4,3
    bab0:	3104d83a 	srl	r2,r6,r4
    bab4:	00c00074 	movhi	r3,1
    bab8:	18c5b404 	addi	r3,r3,5840
    babc:	1885883a 	add	r2,r3,r2
    bac0:	10c00003 	ldbu	r3,0(r2)
    bac4:	00800804 	movi	r2,32
    bac8:	1909883a 	add	r4,r3,r4
    bacc:	1125c83a 	sub	r18,r2,r4
    bad0:	90000526 	beq	r18,zero,bae8 <__umoddi3+0x94>
    bad4:	8ca2983a 	sll	r17,r17,r18
    bad8:	8108d83a 	srl	r4,r16,r4
    badc:	34a6983a 	sll	r19,r6,r18
    bae0:	84a8983a 	sll	r20,r16,r18
    bae4:	2478b03a 	or	fp,r4,r17
    bae8:	982ed43a 	srli	r23,r19,16
    baec:	e009883a 	mov	r4,fp
    baf0:	9dbfffcc 	andi	r22,r19,65535
    baf4:	b80b883a 	mov	r5,r23
    baf8:	0001e080 	call	1e08 <__umodsi3>
    bafc:	e009883a 	mov	r4,fp
    bb00:	b80b883a 	mov	r5,r23
    bb04:	102b883a 	mov	r21,r2
    bb08:	0001da40 	call	1da4 <__udivsi3>
    bb0c:	a806943a 	slli	r3,r21,16
    bb10:	a008d43a 	srli	r4,r20,16
    bb14:	b085383a 	mul	r2,r22,r2
    bb18:	20c8b03a 	or	r4,r4,r3
    bb1c:	2080032e 	bgeu	r4,r2,bb2c <__umoddi3+0xd8>
    bb20:	24c9883a 	add	r4,r4,r19
    bb24:	24c00136 	bltu	r4,r19,bb2c <__umoddi3+0xd8>
    bb28:	20811036 	bltu	r4,r2,bf6c <__umoddi3+0x518>
    bb2c:	20abc83a 	sub	r21,r4,r2
    bb30:	b80b883a 	mov	r5,r23
    bb34:	a809883a 	mov	r4,r21
    bb38:	0001e080 	call	1e08 <__umodsi3>
    bb3c:	1023883a 	mov	r17,r2
    bb40:	b80b883a 	mov	r5,r23
    bb44:	a809883a 	mov	r4,r21
    bb48:	0001da40 	call	1da4 <__udivsi3>
    bb4c:	8822943a 	slli	r17,r17,16
    bb50:	b085383a 	mul	r2,r22,r2
    bb54:	a0ffffcc 	andi	r3,r20,65535
    bb58:	1c46b03a 	or	r3,r3,r17
    bb5c:	1880042e 	bgeu	r3,r2,bb70 <__umoddi3+0x11c>
    bb60:	1cc7883a 	add	r3,r3,r19
    bb64:	1cc00236 	bltu	r3,r19,bb70 <__umoddi3+0x11c>
    bb68:	1880012e 	bgeu	r3,r2,bb70 <__umoddi3+0x11c>
    bb6c:	1cc7883a 	add	r3,r3,r19
    bb70:	1885c83a 	sub	r2,r3,r2
    bb74:	1484d83a 	srl	r2,r2,r18
    bb78:	0007883a 	mov	r3,zero
    bb7c:	00004f06 	br	bcbc <__umoddi3+0x268>
    bb80:	29c04c36 	bltu	r5,r7,bcb4 <__umoddi3+0x260>
    bb84:	00bfffd4 	movui	r2,65535
    bb88:	11c0582e 	bgeu	r2,r7,bcec <__umoddi3+0x298>
    bb8c:	00804034 	movhi	r2,256
    bb90:	10bfffc4 	addi	r2,r2,-1
    bb94:	11c0e736 	bltu	r2,r7,bf34 <__umoddi3+0x4e0>
    bb98:	01000404 	movi	r4,16
    bb9c:	3904d83a 	srl	r2,r7,r4
    bba0:	00c00074 	movhi	r3,1
    bba4:	18c5b404 	addi	r3,r3,5840
    bba8:	1885883a 	add	r2,r3,r2
    bbac:	14c00003 	ldbu	r19,0(r2)
    bbb0:	00c00804 	movi	r3,32
    bbb4:	9927883a 	add	r19,r19,r4
    bbb8:	1ce9c83a 	sub	r20,r3,r19
    bbbc:	a000581e 	bne	r20,zero,bd20 <__umoddi3+0x2cc>
    bbc0:	3c400136 	bltu	r7,r17,bbc8 <__umoddi3+0x174>
    bbc4:	8180eb36 	bltu	r16,r6,bf74 <__umoddi3+0x520>
    bbc8:	8185c83a 	sub	r2,r16,r6
    bbcc:	89e3c83a 	sub	r17,r17,r7
    bbd0:	8089803a 	cmpltu	r4,r16,r2
    bbd4:	8939c83a 	sub	fp,r17,r4
    bbd8:	e007883a 	mov	r3,fp
    bbdc:	00003706 	br	bcbc <__umoddi3+0x268>
    bbe0:	3000041e 	bne	r6,zero,bbf4 <__umoddi3+0x1a0>
    bbe4:	000b883a 	mov	r5,zero
    bbe8:	01000044 	movi	r4,1
    bbec:	0001da40 	call	1da4 <__udivsi3>
    bbf0:	1027883a 	mov	r19,r2
    bbf4:	00bfffd4 	movui	r2,65535
    bbf8:	14c0402e 	bgeu	r2,r19,bcfc <__umoddi3+0x2a8>
    bbfc:	00804034 	movhi	r2,256
    bc00:	10bfffc4 	addi	r2,r2,-1
    bc04:	14c0cd36 	bltu	r2,r19,bf3c <__umoddi3+0x4e8>
    bc08:	00800404 	movi	r2,16
    bc0c:	9886d83a 	srl	r3,r19,r2
    bc10:	01000074 	movhi	r4,1
    bc14:	2105b404 	addi	r4,r4,5840
    bc18:	20c7883a 	add	r3,r4,r3
    bc1c:	18c00003 	ldbu	r3,0(r3)
    bc20:	1887883a 	add	r3,r3,r2
    bc24:	00800804 	movi	r2,32
    bc28:	10e5c83a 	sub	r18,r2,r3
    bc2c:	9000901e 	bne	r18,zero,be70 <__umoddi3+0x41c>
    bc30:	982cd43a 	srli	r22,r19,16
    bc34:	8ce3c83a 	sub	r17,r17,r19
    bc38:	9d7fffcc 	andi	r21,r19,65535
    bc3c:	b00b883a 	mov	r5,r22
    bc40:	8809883a 	mov	r4,r17
    bc44:	0001e080 	call	1e08 <__umodsi3>
    bc48:	8809883a 	mov	r4,r17
    bc4c:	b00b883a 	mov	r5,r22
    bc50:	1021883a 	mov	r16,r2
    bc54:	0001da40 	call	1da4 <__udivsi3>
    bc58:	8006943a 	slli	r3,r16,16
    bc5c:	a008d43a 	srli	r4,r20,16
    bc60:	1545383a 	mul	r2,r2,r21
    bc64:	20c8b03a 	or	r4,r4,r3
    bc68:	2080042e 	bgeu	r4,r2,bc7c <__umoddi3+0x228>
    bc6c:	24c9883a 	add	r4,r4,r19
    bc70:	24c00236 	bltu	r4,r19,bc7c <__umoddi3+0x228>
    bc74:	2080012e 	bgeu	r4,r2,bc7c <__umoddi3+0x228>
    bc78:	24c9883a 	add	r4,r4,r19
    bc7c:	20a1c83a 	sub	r16,r4,r2
    bc80:	b00b883a 	mov	r5,r22
    bc84:	8009883a 	mov	r4,r16
    bc88:	0001e080 	call	1e08 <__umodsi3>
    bc8c:	1023883a 	mov	r17,r2
    bc90:	b00b883a 	mov	r5,r22
    bc94:	8009883a 	mov	r4,r16
    bc98:	0001da40 	call	1da4 <__udivsi3>
    bc9c:	8822943a 	slli	r17,r17,16
    bca0:	1545383a 	mul	r2,r2,r21
    bca4:	a53fffcc 	andi	r20,r20,65535
    bca8:	a446b03a 	or	r3,r20,r17
    bcac:	18bfb02e 	bgeu	r3,r2,bb70 <__alt_data_end+0xff00bb70>
    bcb0:	003fab06 	br	bb60 <__alt_data_end+0xff00bb60>
    bcb4:	2005883a 	mov	r2,r4
    bcb8:	2807883a 	mov	r3,r5
    bcbc:	dfc00b17 	ldw	ra,44(sp)
    bcc0:	df000a17 	ldw	fp,40(sp)
    bcc4:	ddc00917 	ldw	r23,36(sp)
    bcc8:	dd800817 	ldw	r22,32(sp)
    bccc:	dd400717 	ldw	r21,28(sp)
    bcd0:	dd000617 	ldw	r20,24(sp)
    bcd4:	dcc00517 	ldw	r19,20(sp)
    bcd8:	dc800417 	ldw	r18,16(sp)
    bcdc:	dc400317 	ldw	r17,12(sp)
    bce0:	dc000217 	ldw	r16,8(sp)
    bce4:	dec00c04 	addi	sp,sp,48
    bce8:	f800283a 	ret
    bcec:	04c03fc4 	movi	r19,255
    bcf0:	99c9803a 	cmpltu	r4,r19,r7
    bcf4:	200890fa 	slli	r4,r4,3
    bcf8:	003fa806 	br	bb9c <__alt_data_end+0xff00bb9c>
    bcfc:	00803fc4 	movi	r2,255
    bd00:	14c5803a 	cmpltu	r2,r2,r19
    bd04:	100490fa 	slli	r2,r2,3
    bd08:	003fc006 	br	bc0c <__alt_data_end+0xff00bc0c>
    bd0c:	00804034 	movhi	r2,256
    bd10:	10bfffc4 	addi	r2,r2,-1
    bd14:	11808b36 	bltu	r2,r6,bf44 <__umoddi3+0x4f0>
    bd18:	01000404 	movi	r4,16
    bd1c:	003f6406 	br	bab0 <__alt_data_end+0xff00bab0>
    bd20:	34c4d83a 	srl	r2,r6,r19
    bd24:	3d0e983a 	sll	r7,r7,r20
    bd28:	8cf8d83a 	srl	fp,r17,r19
    bd2c:	8d10983a 	sll	r8,r17,r20
    bd30:	38aab03a 	or	r21,r7,r2
    bd34:	a82cd43a 	srli	r22,r21,16
    bd38:	84e2d83a 	srl	r17,r16,r19
    bd3c:	e009883a 	mov	r4,fp
    bd40:	b00b883a 	mov	r5,r22
    bd44:	8a22b03a 	or	r17,r17,r8
    bd48:	3524983a 	sll	r18,r6,r20
    bd4c:	0001e080 	call	1e08 <__umodsi3>
    bd50:	e009883a 	mov	r4,fp
    bd54:	b00b883a 	mov	r5,r22
    bd58:	102f883a 	mov	r23,r2
    bd5c:	0001da40 	call	1da4 <__udivsi3>
    bd60:	100d883a 	mov	r6,r2
    bd64:	b808943a 	slli	r4,r23,16
    bd68:	aa3fffcc 	andi	r8,r21,65535
    bd6c:	8804d43a 	srli	r2,r17,16
    bd70:	41af383a 	mul	r23,r8,r6
    bd74:	8520983a 	sll	r16,r16,r20
    bd78:	1104b03a 	or	r2,r2,r4
    bd7c:	15c0042e 	bgeu	r2,r23,bd90 <__umoddi3+0x33c>
    bd80:	1545883a 	add	r2,r2,r21
    bd84:	30ffffc4 	addi	r3,r6,-1
    bd88:	1540742e 	bgeu	r2,r21,bf5c <__umoddi3+0x508>
    bd8c:	180d883a 	mov	r6,r3
    bd90:	15efc83a 	sub	r23,r2,r23
    bd94:	b00b883a 	mov	r5,r22
    bd98:	b809883a 	mov	r4,r23
    bd9c:	d9800115 	stw	r6,4(sp)
    bda0:	da000015 	stw	r8,0(sp)
    bda4:	0001e080 	call	1e08 <__umodsi3>
    bda8:	b00b883a 	mov	r5,r22
    bdac:	b809883a 	mov	r4,r23
    bdb0:	1039883a 	mov	fp,r2
    bdb4:	0001da40 	call	1da4 <__udivsi3>
    bdb8:	da000017 	ldw	r8,0(sp)
    bdbc:	e038943a 	slli	fp,fp,16
    bdc0:	100b883a 	mov	r5,r2
    bdc4:	4089383a 	mul	r4,r8,r2
    bdc8:	8a3fffcc 	andi	r8,r17,65535
    bdcc:	4710b03a 	or	r8,r8,fp
    bdd0:	d9800117 	ldw	r6,4(sp)
    bdd4:	4100042e 	bgeu	r8,r4,bde8 <__umoddi3+0x394>
    bdd8:	4551883a 	add	r8,r8,r21
    bddc:	10bfffc4 	addi	r2,r2,-1
    bde0:	45405a2e 	bgeu	r8,r21,bf4c <__umoddi3+0x4f8>
    bde4:	100b883a 	mov	r5,r2
    bde8:	300c943a 	slli	r6,r6,16
    bdec:	91ffffcc 	andi	r7,r18,65535
    bdf0:	9004d43a 	srli	r2,r18,16
    bdf4:	314cb03a 	or	r6,r6,r5
    bdf8:	317fffcc 	andi	r5,r6,65535
    bdfc:	300cd43a 	srli	r6,r6,16
    be00:	29d3383a 	mul	r9,r5,r7
    be04:	288b383a 	mul	r5,r5,r2
    be08:	31cf383a 	mul	r7,r6,r7
    be0c:	4806d43a 	srli	r3,r9,16
    be10:	4111c83a 	sub	r8,r8,r4
    be14:	29cb883a 	add	r5,r5,r7
    be18:	194b883a 	add	r5,r3,r5
    be1c:	3085383a 	mul	r2,r6,r2
    be20:	29c0022e 	bgeu	r5,r7,be2c <__umoddi3+0x3d8>
    be24:	00c00074 	movhi	r3,1
    be28:	10c5883a 	add	r2,r2,r3
    be2c:	2808d43a 	srli	r4,r5,16
    be30:	280a943a 	slli	r5,r5,16
    be34:	4a7fffcc 	andi	r9,r9,65535
    be38:	2085883a 	add	r2,r4,r2
    be3c:	2a4b883a 	add	r5,r5,r9
    be40:	40803636 	bltu	r8,r2,bf1c <__umoddi3+0x4c8>
    be44:	40804d26 	beq	r8,r2,bf7c <__umoddi3+0x528>
    be48:	4089c83a 	sub	r4,r8,r2
    be4c:	280f883a 	mov	r7,r5
    be50:	81cfc83a 	sub	r7,r16,r7
    be54:	81c7803a 	cmpltu	r3,r16,r7
    be58:	20c7c83a 	sub	r3,r4,r3
    be5c:	1cc4983a 	sll	r2,r3,r19
    be60:	3d0ed83a 	srl	r7,r7,r20
    be64:	1d06d83a 	srl	r3,r3,r20
    be68:	11c4b03a 	or	r2,r2,r7
    be6c:	003f9306 	br	bcbc <__alt_data_end+0xff00bcbc>
    be70:	9ca6983a 	sll	r19,r19,r18
    be74:	88e8d83a 	srl	r20,r17,r3
    be78:	80c4d83a 	srl	r2,r16,r3
    be7c:	982cd43a 	srli	r22,r19,16
    be80:	8ca2983a 	sll	r17,r17,r18
    be84:	a009883a 	mov	r4,r20
    be88:	b00b883a 	mov	r5,r22
    be8c:	1478b03a 	or	fp,r2,r17
    be90:	0001e080 	call	1e08 <__umodsi3>
    be94:	a009883a 	mov	r4,r20
    be98:	b00b883a 	mov	r5,r22
    be9c:	1023883a 	mov	r17,r2
    bea0:	0001da40 	call	1da4 <__udivsi3>
    bea4:	9d7fffcc 	andi	r21,r19,65535
    bea8:	880a943a 	slli	r5,r17,16
    beac:	e008d43a 	srli	r4,fp,16
    beb0:	a885383a 	mul	r2,r21,r2
    beb4:	84a8983a 	sll	r20,r16,r18
    beb8:	2148b03a 	or	r4,r4,r5
    bebc:	2080042e 	bgeu	r4,r2,bed0 <__umoddi3+0x47c>
    bec0:	24c9883a 	add	r4,r4,r19
    bec4:	24c00236 	bltu	r4,r19,bed0 <__umoddi3+0x47c>
    bec8:	2080012e 	bgeu	r4,r2,bed0 <__umoddi3+0x47c>
    becc:	24c9883a 	add	r4,r4,r19
    bed0:	20a3c83a 	sub	r17,r4,r2
    bed4:	b00b883a 	mov	r5,r22
    bed8:	8809883a 	mov	r4,r17
    bedc:	0001e080 	call	1e08 <__umodsi3>
    bee0:	102f883a 	mov	r23,r2
    bee4:	8809883a 	mov	r4,r17
    bee8:	b00b883a 	mov	r5,r22
    beec:	0001da40 	call	1da4 <__udivsi3>
    bef0:	b82e943a 	slli	r23,r23,16
    bef4:	a885383a 	mul	r2,r21,r2
    bef8:	e13fffcc 	andi	r4,fp,65535
    befc:	25c8b03a 	or	r4,r4,r23
    bf00:	2080042e 	bgeu	r4,r2,bf14 <__umoddi3+0x4c0>
    bf04:	24c9883a 	add	r4,r4,r19
    bf08:	24c00236 	bltu	r4,r19,bf14 <__umoddi3+0x4c0>
    bf0c:	2080012e 	bgeu	r4,r2,bf14 <__umoddi3+0x4c0>
    bf10:	24c9883a 	add	r4,r4,r19
    bf14:	20a3c83a 	sub	r17,r4,r2
    bf18:	003f4806 	br	bc3c <__alt_data_end+0xff00bc3c>
    bf1c:	2c8fc83a 	sub	r7,r5,r18
    bf20:	1545c83a 	sub	r2,r2,r21
    bf24:	29cb803a 	cmpltu	r5,r5,r7
    bf28:	1145c83a 	sub	r2,r2,r5
    bf2c:	4089c83a 	sub	r4,r8,r2
    bf30:	003fc706 	br	be50 <__alt_data_end+0xff00be50>
    bf34:	01000604 	movi	r4,24
    bf38:	003f1806 	br	bb9c <__alt_data_end+0xff00bb9c>
    bf3c:	00800604 	movi	r2,24
    bf40:	003f3206 	br	bc0c <__alt_data_end+0xff00bc0c>
    bf44:	01000604 	movi	r4,24
    bf48:	003ed906 	br	bab0 <__alt_data_end+0xff00bab0>
    bf4c:	413fa52e 	bgeu	r8,r4,bde4 <__alt_data_end+0xff00bde4>
    bf50:	297fff84 	addi	r5,r5,-2
    bf54:	4551883a 	add	r8,r8,r21
    bf58:	003fa306 	br	bde8 <__alt_data_end+0xff00bde8>
    bf5c:	15ff8b2e 	bgeu	r2,r23,bd8c <__alt_data_end+0xff00bd8c>
    bf60:	31bfff84 	addi	r6,r6,-2
    bf64:	1545883a 	add	r2,r2,r21
    bf68:	003f8906 	br	bd90 <__alt_data_end+0xff00bd90>
    bf6c:	24c9883a 	add	r4,r4,r19
    bf70:	003eee06 	br	bb2c <__alt_data_end+0xff00bb2c>
    bf74:	8005883a 	mov	r2,r16
    bf78:	003f1706 	br	bbd8 <__alt_data_end+0xff00bbd8>
    bf7c:	817fe736 	bltu	r16,r5,bf1c <__alt_data_end+0xff00bf1c>
    bf80:	280f883a 	mov	r7,r5
    bf84:	0009883a 	mov	r4,zero
    bf88:	003fb106 	br	be50 <__alt_data_end+0xff00be50>

0000bf8c <__adddf3>:
    bf8c:	02c00434 	movhi	r11,16
    bf90:	5affffc4 	addi	r11,r11,-1
    bf94:	2806d7fa 	srli	r3,r5,31
    bf98:	2ad4703a 	and	r10,r5,r11
    bf9c:	3ad2703a 	and	r9,r7,r11
    bfa0:	3804d53a 	srli	r2,r7,20
    bfa4:	3018d77a 	srli	r12,r6,29
    bfa8:	280ad53a 	srli	r5,r5,20
    bfac:	501490fa 	slli	r10,r10,3
    bfb0:	2010d77a 	srli	r8,r4,29
    bfb4:	481290fa 	slli	r9,r9,3
    bfb8:	380ed7fa 	srli	r7,r7,31
    bfbc:	defffb04 	addi	sp,sp,-20
    bfc0:	dc800215 	stw	r18,8(sp)
    bfc4:	dc400115 	stw	r17,4(sp)
    bfc8:	dc000015 	stw	r16,0(sp)
    bfcc:	dfc00415 	stw	ra,16(sp)
    bfd0:	dcc00315 	stw	r19,12(sp)
    bfd4:	1c803fcc 	andi	r18,r3,255
    bfd8:	2c01ffcc 	andi	r16,r5,2047
    bfdc:	5210b03a 	or	r8,r10,r8
    bfe0:	202290fa 	slli	r17,r4,3
    bfe4:	1081ffcc 	andi	r2,r2,2047
    bfe8:	4b12b03a 	or	r9,r9,r12
    bfec:	300c90fa 	slli	r6,r6,3
    bff0:	91c07526 	beq	r18,r7,c1c8 <__adddf3+0x23c>
    bff4:	8087c83a 	sub	r3,r16,r2
    bff8:	00c0ab0e 	bge	zero,r3,c2a8 <__adddf3+0x31c>
    bffc:	10002a1e 	bne	r2,zero,c0a8 <__adddf3+0x11c>
    c000:	4984b03a 	or	r2,r9,r6
    c004:	1000961e 	bne	r2,zero,c260 <__adddf3+0x2d4>
    c008:	888001cc 	andi	r2,r17,7
    c00c:	10000726 	beq	r2,zero,c02c <__adddf3+0xa0>
    c010:	888003cc 	andi	r2,r17,15
    c014:	00c00104 	movi	r3,4
    c018:	10c00426 	beq	r2,r3,c02c <__adddf3+0xa0>
    c01c:	88c7883a 	add	r3,r17,r3
    c020:	1c63803a 	cmpltu	r17,r3,r17
    c024:	4451883a 	add	r8,r8,r17
    c028:	1823883a 	mov	r17,r3
    c02c:	4080202c 	andhi	r2,r8,128
    c030:	10005926 	beq	r2,zero,c198 <__adddf3+0x20c>
    c034:	84000044 	addi	r16,r16,1
    c038:	0081ffc4 	movi	r2,2047
    c03c:	8080ba26 	beq	r16,r2,c328 <__adddf3+0x39c>
    c040:	00bfe034 	movhi	r2,65408
    c044:	10bfffc4 	addi	r2,r2,-1
    c048:	4090703a 	and	r8,r8,r2
    c04c:	4004977a 	slli	r2,r8,29
    c050:	4010927a 	slli	r8,r8,9
    c054:	8822d0fa 	srli	r17,r17,3
    c058:	8401ffcc 	andi	r16,r16,2047
    c05c:	4010d33a 	srli	r8,r8,12
    c060:	9007883a 	mov	r3,r18
    c064:	1444b03a 	or	r2,r2,r17
    c068:	8401ffcc 	andi	r16,r16,2047
    c06c:	8020953a 	slli	r16,r16,20
    c070:	18c03fcc 	andi	r3,r3,255
    c074:	01000434 	movhi	r4,16
    c078:	213fffc4 	addi	r4,r4,-1
    c07c:	180697fa 	slli	r3,r3,31
    c080:	4110703a 	and	r8,r8,r4
    c084:	4410b03a 	or	r8,r8,r16
    c088:	40c6b03a 	or	r3,r8,r3
    c08c:	dfc00417 	ldw	ra,16(sp)
    c090:	dcc00317 	ldw	r19,12(sp)
    c094:	dc800217 	ldw	r18,8(sp)
    c098:	dc400117 	ldw	r17,4(sp)
    c09c:	dc000017 	ldw	r16,0(sp)
    c0a0:	dec00504 	addi	sp,sp,20
    c0a4:	f800283a 	ret
    c0a8:	0081ffc4 	movi	r2,2047
    c0ac:	80bfd626 	beq	r16,r2,c008 <__alt_data_end+0xff00c008>
    c0b0:	4a402034 	orhi	r9,r9,128
    c0b4:	00800e04 	movi	r2,56
    c0b8:	10c09f16 	blt	r2,r3,c338 <__adddf3+0x3ac>
    c0bc:	008007c4 	movi	r2,31
    c0c0:	10c0c216 	blt	r2,r3,c3cc <__adddf3+0x440>
    c0c4:	00800804 	movi	r2,32
    c0c8:	10c5c83a 	sub	r2,r2,r3
    c0cc:	488a983a 	sll	r5,r9,r2
    c0d0:	30c8d83a 	srl	r4,r6,r3
    c0d4:	3084983a 	sll	r2,r6,r2
    c0d8:	48c6d83a 	srl	r3,r9,r3
    c0dc:	290cb03a 	or	r6,r5,r4
    c0e0:	1004c03a 	cmpne	r2,r2,zero
    c0e4:	308cb03a 	or	r6,r6,r2
    c0e8:	898dc83a 	sub	r6,r17,r6
    c0ec:	89a3803a 	cmpltu	r17,r17,r6
    c0f0:	40d1c83a 	sub	r8,r8,r3
    c0f4:	4451c83a 	sub	r8,r8,r17
    c0f8:	3023883a 	mov	r17,r6
    c0fc:	4080202c 	andhi	r2,r8,128
    c100:	10002326 	beq	r2,zero,c190 <__adddf3+0x204>
    c104:	04c02034 	movhi	r19,128
    c108:	9cffffc4 	addi	r19,r19,-1
    c10c:	44e6703a 	and	r19,r8,r19
    c110:	98007626 	beq	r19,zero,c2ec <__adddf3+0x360>
    c114:	9809883a 	mov	r4,r19
    c118:	000e5900 	call	e590 <__clzsi2>
    c11c:	10fffe04 	addi	r3,r2,-8
    c120:	010007c4 	movi	r4,31
    c124:	20c07716 	blt	r4,r3,c304 <__adddf3+0x378>
    c128:	00800804 	movi	r2,32
    c12c:	10c5c83a 	sub	r2,r2,r3
    c130:	8884d83a 	srl	r2,r17,r2
    c134:	98d0983a 	sll	r8,r19,r3
    c138:	88e2983a 	sll	r17,r17,r3
    c13c:	1204b03a 	or	r2,r2,r8
    c140:	1c007416 	blt	r3,r16,c314 <__adddf3+0x388>
    c144:	1c21c83a 	sub	r16,r3,r16
    c148:	82000044 	addi	r8,r16,1
    c14c:	00c007c4 	movi	r3,31
    c150:	1a009116 	blt	r3,r8,c398 <__adddf3+0x40c>
    c154:	00c00804 	movi	r3,32
    c158:	1a07c83a 	sub	r3,r3,r8
    c15c:	8a08d83a 	srl	r4,r17,r8
    c160:	88e2983a 	sll	r17,r17,r3
    c164:	10c6983a 	sll	r3,r2,r3
    c168:	1210d83a 	srl	r8,r2,r8
    c16c:	8804c03a 	cmpne	r2,r17,zero
    c170:	1906b03a 	or	r3,r3,r4
    c174:	18a2b03a 	or	r17,r3,r2
    c178:	0021883a 	mov	r16,zero
    c17c:	003fa206 	br	c008 <__alt_data_end+0xff00c008>
    c180:	1890b03a 	or	r8,r3,r2
    c184:	40017d26 	beq	r8,zero,c77c <__adddf3+0x7f0>
    c188:	1011883a 	mov	r8,r2
    c18c:	1823883a 	mov	r17,r3
    c190:	888001cc 	andi	r2,r17,7
    c194:	103f9e1e 	bne	r2,zero,c010 <__alt_data_end+0xff00c010>
    c198:	4004977a 	slli	r2,r8,29
    c19c:	8822d0fa 	srli	r17,r17,3
    c1a0:	4010d0fa 	srli	r8,r8,3
    c1a4:	9007883a 	mov	r3,r18
    c1a8:	1444b03a 	or	r2,r2,r17
    c1ac:	0101ffc4 	movi	r4,2047
    c1b0:	81002426 	beq	r16,r4,c244 <__adddf3+0x2b8>
    c1b4:	8120703a 	and	r16,r16,r4
    c1b8:	01000434 	movhi	r4,16
    c1bc:	213fffc4 	addi	r4,r4,-1
    c1c0:	4110703a 	and	r8,r8,r4
    c1c4:	003fa806 	br	c068 <__alt_data_end+0xff00c068>
    c1c8:	8089c83a 	sub	r4,r16,r2
    c1cc:	01005e0e 	bge	zero,r4,c348 <__adddf3+0x3bc>
    c1d0:	10002b26 	beq	r2,zero,c280 <__adddf3+0x2f4>
    c1d4:	0081ffc4 	movi	r2,2047
    c1d8:	80bf8b26 	beq	r16,r2,c008 <__alt_data_end+0xff00c008>
    c1dc:	4a402034 	orhi	r9,r9,128
    c1e0:	00800e04 	movi	r2,56
    c1e4:	1100a40e 	bge	r2,r4,c478 <__adddf3+0x4ec>
    c1e8:	498cb03a 	or	r6,r9,r6
    c1ec:	300ac03a 	cmpne	r5,r6,zero
    c1f0:	0013883a 	mov	r9,zero
    c1f4:	2c4b883a 	add	r5,r5,r17
    c1f8:	2c63803a 	cmpltu	r17,r5,r17
    c1fc:	4a11883a 	add	r8,r9,r8
    c200:	8a11883a 	add	r8,r17,r8
    c204:	2823883a 	mov	r17,r5
    c208:	4080202c 	andhi	r2,r8,128
    c20c:	103fe026 	beq	r2,zero,c190 <__alt_data_end+0xff00c190>
    c210:	84000044 	addi	r16,r16,1
    c214:	0081ffc4 	movi	r2,2047
    c218:	8080d226 	beq	r16,r2,c564 <__adddf3+0x5d8>
    c21c:	00bfe034 	movhi	r2,65408
    c220:	10bfffc4 	addi	r2,r2,-1
    c224:	4090703a 	and	r8,r8,r2
    c228:	880ad07a 	srli	r5,r17,1
    c22c:	400897fa 	slli	r4,r8,31
    c230:	88c0004c 	andi	r3,r17,1
    c234:	28e2b03a 	or	r17,r5,r3
    c238:	4010d07a 	srli	r8,r8,1
    c23c:	2462b03a 	or	r17,r4,r17
    c240:	003f7106 	br	c008 <__alt_data_end+0xff00c008>
    c244:	4088b03a 	or	r4,r8,r2
    c248:	20014526 	beq	r4,zero,c760 <__adddf3+0x7d4>
    c24c:	01000434 	movhi	r4,16
    c250:	42000234 	orhi	r8,r8,8
    c254:	213fffc4 	addi	r4,r4,-1
    c258:	4110703a 	and	r8,r8,r4
    c25c:	003f8206 	br	c068 <__alt_data_end+0xff00c068>
    c260:	18ffffc4 	addi	r3,r3,-1
    c264:	1800491e 	bne	r3,zero,c38c <__adddf3+0x400>
    c268:	898bc83a 	sub	r5,r17,r6
    c26c:	8963803a 	cmpltu	r17,r17,r5
    c270:	4251c83a 	sub	r8,r8,r9
    c274:	4451c83a 	sub	r8,r8,r17
    c278:	2823883a 	mov	r17,r5
    c27c:	003f9f06 	br	c0fc <__alt_data_end+0xff00c0fc>
    c280:	4984b03a 	or	r2,r9,r6
    c284:	103f6026 	beq	r2,zero,c008 <__alt_data_end+0xff00c008>
    c288:	213fffc4 	addi	r4,r4,-1
    c28c:	2000931e 	bne	r4,zero,c4dc <__adddf3+0x550>
    c290:	898d883a 	add	r6,r17,r6
    c294:	3463803a 	cmpltu	r17,r6,r17
    c298:	4251883a 	add	r8,r8,r9
    c29c:	8a11883a 	add	r8,r17,r8
    c2a0:	3023883a 	mov	r17,r6
    c2a4:	003fd806 	br	c208 <__alt_data_end+0xff00c208>
    c2a8:	1800541e 	bne	r3,zero,c3fc <__adddf3+0x470>
    c2ac:	80800044 	addi	r2,r16,1
    c2b0:	1081ffcc 	andi	r2,r2,2047
    c2b4:	00c00044 	movi	r3,1
    c2b8:	1880a00e 	bge	r3,r2,c53c <__adddf3+0x5b0>
    c2bc:	8989c83a 	sub	r4,r17,r6
    c2c0:	8905803a 	cmpltu	r2,r17,r4
    c2c4:	4267c83a 	sub	r19,r8,r9
    c2c8:	98a7c83a 	sub	r19,r19,r2
    c2cc:	9880202c 	andhi	r2,r19,128
    c2d0:	10006326 	beq	r2,zero,c460 <__adddf3+0x4d4>
    c2d4:	3463c83a 	sub	r17,r6,r17
    c2d8:	4a07c83a 	sub	r3,r9,r8
    c2dc:	344d803a 	cmpltu	r6,r6,r17
    c2e0:	19a7c83a 	sub	r19,r3,r6
    c2e4:	3825883a 	mov	r18,r7
    c2e8:	983f8a1e 	bne	r19,zero,c114 <__alt_data_end+0xff00c114>
    c2ec:	8809883a 	mov	r4,r17
    c2f0:	000e5900 	call	e590 <__clzsi2>
    c2f4:	10800804 	addi	r2,r2,32
    c2f8:	10fffe04 	addi	r3,r2,-8
    c2fc:	010007c4 	movi	r4,31
    c300:	20ff890e 	bge	r4,r3,c128 <__alt_data_end+0xff00c128>
    c304:	10bff604 	addi	r2,r2,-40
    c308:	8884983a 	sll	r2,r17,r2
    c30c:	0023883a 	mov	r17,zero
    c310:	1c3f8c0e 	bge	r3,r16,c144 <__alt_data_end+0xff00c144>
    c314:	023fe034 	movhi	r8,65408
    c318:	423fffc4 	addi	r8,r8,-1
    c31c:	80e1c83a 	sub	r16,r16,r3
    c320:	1210703a 	and	r8,r2,r8
    c324:	003f3806 	br	c008 <__alt_data_end+0xff00c008>
    c328:	9007883a 	mov	r3,r18
    c32c:	0011883a 	mov	r8,zero
    c330:	0005883a 	mov	r2,zero
    c334:	003f4c06 	br	c068 <__alt_data_end+0xff00c068>
    c338:	498cb03a 	or	r6,r9,r6
    c33c:	300cc03a 	cmpne	r6,r6,zero
    c340:	0007883a 	mov	r3,zero
    c344:	003f6806 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c348:	20009c1e 	bne	r4,zero,c5bc <__adddf3+0x630>
    c34c:	80800044 	addi	r2,r16,1
    c350:	1141ffcc 	andi	r5,r2,2047
    c354:	01000044 	movi	r4,1
    c358:	2140670e 	bge	r4,r5,c4f8 <__adddf3+0x56c>
    c35c:	0101ffc4 	movi	r4,2047
    c360:	11007f26 	beq	r2,r4,c560 <__adddf3+0x5d4>
    c364:	898d883a 	add	r6,r17,r6
    c368:	4247883a 	add	r3,r8,r9
    c36c:	3451803a 	cmpltu	r8,r6,r17
    c370:	40d1883a 	add	r8,r8,r3
    c374:	402297fa 	slli	r17,r8,31
    c378:	300cd07a 	srli	r6,r6,1
    c37c:	4010d07a 	srli	r8,r8,1
    c380:	1021883a 	mov	r16,r2
    c384:	89a2b03a 	or	r17,r17,r6
    c388:	003f1f06 	br	c008 <__alt_data_end+0xff00c008>
    c38c:	0081ffc4 	movi	r2,2047
    c390:	80bf481e 	bne	r16,r2,c0b4 <__alt_data_end+0xff00c0b4>
    c394:	003f1c06 	br	c008 <__alt_data_end+0xff00c008>
    c398:	843ff844 	addi	r16,r16,-31
    c39c:	01000804 	movi	r4,32
    c3a0:	1406d83a 	srl	r3,r2,r16
    c3a4:	41005026 	beq	r8,r4,c4e8 <__adddf3+0x55c>
    c3a8:	01001004 	movi	r4,64
    c3ac:	2211c83a 	sub	r8,r4,r8
    c3b0:	1204983a 	sll	r2,r2,r8
    c3b4:	88a2b03a 	or	r17,r17,r2
    c3b8:	8822c03a 	cmpne	r17,r17,zero
    c3bc:	1c62b03a 	or	r17,r3,r17
    c3c0:	0011883a 	mov	r8,zero
    c3c4:	0021883a 	mov	r16,zero
    c3c8:	003f7106 	br	c190 <__alt_data_end+0xff00c190>
    c3cc:	193ff804 	addi	r4,r3,-32
    c3d0:	00800804 	movi	r2,32
    c3d4:	4908d83a 	srl	r4,r9,r4
    c3d8:	18804526 	beq	r3,r2,c4f0 <__adddf3+0x564>
    c3dc:	00801004 	movi	r2,64
    c3e0:	10c5c83a 	sub	r2,r2,r3
    c3e4:	4886983a 	sll	r3,r9,r2
    c3e8:	198cb03a 	or	r6,r3,r6
    c3ec:	300cc03a 	cmpne	r6,r6,zero
    c3f0:	218cb03a 	or	r6,r4,r6
    c3f4:	0007883a 	mov	r3,zero
    c3f8:	003f3b06 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c3fc:	80002a26 	beq	r16,zero,c4a8 <__adddf3+0x51c>
    c400:	0101ffc4 	movi	r4,2047
    c404:	11006826 	beq	r2,r4,c5a8 <__adddf3+0x61c>
    c408:	00c7c83a 	sub	r3,zero,r3
    c40c:	42002034 	orhi	r8,r8,128
    c410:	01000e04 	movi	r4,56
    c414:	20c07c16 	blt	r4,r3,c608 <__adddf3+0x67c>
    c418:	010007c4 	movi	r4,31
    c41c:	20c0da16 	blt	r4,r3,c788 <__adddf3+0x7fc>
    c420:	01000804 	movi	r4,32
    c424:	20c9c83a 	sub	r4,r4,r3
    c428:	4114983a 	sll	r10,r8,r4
    c42c:	88cad83a 	srl	r5,r17,r3
    c430:	8908983a 	sll	r4,r17,r4
    c434:	40c6d83a 	srl	r3,r8,r3
    c438:	5162b03a 	or	r17,r10,r5
    c43c:	2008c03a 	cmpne	r4,r4,zero
    c440:	8922b03a 	or	r17,r17,r4
    c444:	3463c83a 	sub	r17,r6,r17
    c448:	48c7c83a 	sub	r3,r9,r3
    c44c:	344d803a 	cmpltu	r6,r6,r17
    c450:	1991c83a 	sub	r8,r3,r6
    c454:	1021883a 	mov	r16,r2
    c458:	3825883a 	mov	r18,r7
    c45c:	003f2706 	br	c0fc <__alt_data_end+0xff00c0fc>
    c460:	24d0b03a 	or	r8,r4,r19
    c464:	40001b1e 	bne	r8,zero,c4d4 <__adddf3+0x548>
    c468:	0005883a 	mov	r2,zero
    c46c:	0007883a 	mov	r3,zero
    c470:	0021883a 	mov	r16,zero
    c474:	003f4d06 	br	c1ac <__alt_data_end+0xff00c1ac>
    c478:	008007c4 	movi	r2,31
    c47c:	11003c16 	blt	r2,r4,c570 <__adddf3+0x5e4>
    c480:	00800804 	movi	r2,32
    c484:	1105c83a 	sub	r2,r2,r4
    c488:	488e983a 	sll	r7,r9,r2
    c48c:	310ad83a 	srl	r5,r6,r4
    c490:	3084983a 	sll	r2,r6,r2
    c494:	4912d83a 	srl	r9,r9,r4
    c498:	394ab03a 	or	r5,r7,r5
    c49c:	1004c03a 	cmpne	r2,r2,zero
    c4a0:	288ab03a 	or	r5,r5,r2
    c4a4:	003f5306 	br	c1f4 <__alt_data_end+0xff00c1f4>
    c4a8:	4448b03a 	or	r4,r8,r17
    c4ac:	20003e26 	beq	r4,zero,c5a8 <__adddf3+0x61c>
    c4b0:	00c6303a 	nor	r3,zero,r3
    c4b4:	18003a1e 	bne	r3,zero,c5a0 <__adddf3+0x614>
    c4b8:	3463c83a 	sub	r17,r6,r17
    c4bc:	4a07c83a 	sub	r3,r9,r8
    c4c0:	344d803a 	cmpltu	r6,r6,r17
    c4c4:	1991c83a 	sub	r8,r3,r6
    c4c8:	1021883a 	mov	r16,r2
    c4cc:	3825883a 	mov	r18,r7
    c4d0:	003f0a06 	br	c0fc <__alt_data_end+0xff00c0fc>
    c4d4:	2023883a 	mov	r17,r4
    c4d8:	003f0d06 	br	c110 <__alt_data_end+0xff00c110>
    c4dc:	0081ffc4 	movi	r2,2047
    c4e0:	80bf3f1e 	bne	r16,r2,c1e0 <__alt_data_end+0xff00c1e0>
    c4e4:	003ec806 	br	c008 <__alt_data_end+0xff00c008>
    c4e8:	0005883a 	mov	r2,zero
    c4ec:	003fb106 	br	c3b4 <__alt_data_end+0xff00c3b4>
    c4f0:	0007883a 	mov	r3,zero
    c4f4:	003fbc06 	br	c3e8 <__alt_data_end+0xff00c3e8>
    c4f8:	4444b03a 	or	r2,r8,r17
    c4fc:	8000871e 	bne	r16,zero,c71c <__adddf3+0x790>
    c500:	1000ba26 	beq	r2,zero,c7ec <__adddf3+0x860>
    c504:	4984b03a 	or	r2,r9,r6
    c508:	103ebf26 	beq	r2,zero,c008 <__alt_data_end+0xff00c008>
    c50c:	8985883a 	add	r2,r17,r6
    c510:	4247883a 	add	r3,r8,r9
    c514:	1451803a 	cmpltu	r8,r2,r17
    c518:	40d1883a 	add	r8,r8,r3
    c51c:	40c0202c 	andhi	r3,r8,128
    c520:	1023883a 	mov	r17,r2
    c524:	183f1a26 	beq	r3,zero,c190 <__alt_data_end+0xff00c190>
    c528:	00bfe034 	movhi	r2,65408
    c52c:	10bfffc4 	addi	r2,r2,-1
    c530:	2021883a 	mov	r16,r4
    c534:	4090703a 	and	r8,r8,r2
    c538:	003eb306 	br	c008 <__alt_data_end+0xff00c008>
    c53c:	4444b03a 	or	r2,r8,r17
    c540:	8000291e 	bne	r16,zero,c5e8 <__adddf3+0x65c>
    c544:	10004b1e 	bne	r2,zero,c674 <__adddf3+0x6e8>
    c548:	4990b03a 	or	r8,r9,r6
    c54c:	40008b26 	beq	r8,zero,c77c <__adddf3+0x7f0>
    c550:	4811883a 	mov	r8,r9
    c554:	3023883a 	mov	r17,r6
    c558:	3825883a 	mov	r18,r7
    c55c:	003eaa06 	br	c008 <__alt_data_end+0xff00c008>
    c560:	1021883a 	mov	r16,r2
    c564:	0011883a 	mov	r8,zero
    c568:	0005883a 	mov	r2,zero
    c56c:	003f0f06 	br	c1ac <__alt_data_end+0xff00c1ac>
    c570:	217ff804 	addi	r5,r4,-32
    c574:	00800804 	movi	r2,32
    c578:	494ad83a 	srl	r5,r9,r5
    c57c:	20807d26 	beq	r4,r2,c774 <__adddf3+0x7e8>
    c580:	00801004 	movi	r2,64
    c584:	1109c83a 	sub	r4,r2,r4
    c588:	4912983a 	sll	r9,r9,r4
    c58c:	498cb03a 	or	r6,r9,r6
    c590:	300cc03a 	cmpne	r6,r6,zero
    c594:	298ab03a 	or	r5,r5,r6
    c598:	0013883a 	mov	r9,zero
    c59c:	003f1506 	br	c1f4 <__alt_data_end+0xff00c1f4>
    c5a0:	0101ffc4 	movi	r4,2047
    c5a4:	113f9a1e 	bne	r2,r4,c410 <__alt_data_end+0xff00c410>
    c5a8:	4811883a 	mov	r8,r9
    c5ac:	3023883a 	mov	r17,r6
    c5b0:	1021883a 	mov	r16,r2
    c5b4:	3825883a 	mov	r18,r7
    c5b8:	003e9306 	br	c008 <__alt_data_end+0xff00c008>
    c5bc:	8000161e 	bne	r16,zero,c618 <__adddf3+0x68c>
    c5c0:	444ab03a 	or	r5,r8,r17
    c5c4:	28005126 	beq	r5,zero,c70c <__adddf3+0x780>
    c5c8:	0108303a 	nor	r4,zero,r4
    c5cc:	20004d1e 	bne	r4,zero,c704 <__adddf3+0x778>
    c5d0:	89a3883a 	add	r17,r17,r6
    c5d4:	4253883a 	add	r9,r8,r9
    c5d8:	898d803a 	cmpltu	r6,r17,r6
    c5dc:	3251883a 	add	r8,r6,r9
    c5e0:	1021883a 	mov	r16,r2
    c5e4:	003f0806 	br	c208 <__alt_data_end+0xff00c208>
    c5e8:	1000301e 	bne	r2,zero,c6ac <__adddf3+0x720>
    c5ec:	4984b03a 	or	r2,r9,r6
    c5f0:	10007126 	beq	r2,zero,c7b8 <__adddf3+0x82c>
    c5f4:	4811883a 	mov	r8,r9
    c5f8:	3023883a 	mov	r17,r6
    c5fc:	3825883a 	mov	r18,r7
    c600:	0401ffc4 	movi	r16,2047
    c604:	003e8006 	br	c008 <__alt_data_end+0xff00c008>
    c608:	4462b03a 	or	r17,r8,r17
    c60c:	8822c03a 	cmpne	r17,r17,zero
    c610:	0007883a 	mov	r3,zero
    c614:	003f8b06 	br	c444 <__alt_data_end+0xff00c444>
    c618:	0141ffc4 	movi	r5,2047
    c61c:	11403b26 	beq	r2,r5,c70c <__adddf3+0x780>
    c620:	0109c83a 	sub	r4,zero,r4
    c624:	42002034 	orhi	r8,r8,128
    c628:	01400e04 	movi	r5,56
    c62c:	29006716 	blt	r5,r4,c7cc <__adddf3+0x840>
    c630:	014007c4 	movi	r5,31
    c634:	29007016 	blt	r5,r4,c7f8 <__adddf3+0x86c>
    c638:	01400804 	movi	r5,32
    c63c:	290bc83a 	sub	r5,r5,r4
    c640:	4154983a 	sll	r10,r8,r5
    c644:	890ed83a 	srl	r7,r17,r4
    c648:	894a983a 	sll	r5,r17,r5
    c64c:	4108d83a 	srl	r4,r8,r4
    c650:	51e2b03a 	or	r17,r10,r7
    c654:	280ac03a 	cmpne	r5,r5,zero
    c658:	8962b03a 	or	r17,r17,r5
    c65c:	89a3883a 	add	r17,r17,r6
    c660:	2253883a 	add	r9,r4,r9
    c664:	898d803a 	cmpltu	r6,r17,r6
    c668:	3251883a 	add	r8,r6,r9
    c66c:	1021883a 	mov	r16,r2
    c670:	003ee506 	br	c208 <__alt_data_end+0xff00c208>
    c674:	4984b03a 	or	r2,r9,r6
    c678:	103e6326 	beq	r2,zero,c008 <__alt_data_end+0xff00c008>
    c67c:	8987c83a 	sub	r3,r17,r6
    c680:	88c9803a 	cmpltu	r4,r17,r3
    c684:	4245c83a 	sub	r2,r8,r9
    c688:	1105c83a 	sub	r2,r2,r4
    c68c:	1100202c 	andhi	r4,r2,128
    c690:	203ebb26 	beq	r4,zero,c180 <__alt_data_end+0xff00c180>
    c694:	3463c83a 	sub	r17,r6,r17
    c698:	4a07c83a 	sub	r3,r9,r8
    c69c:	344d803a 	cmpltu	r6,r6,r17
    c6a0:	1991c83a 	sub	r8,r3,r6
    c6a4:	3825883a 	mov	r18,r7
    c6a8:	003e5706 	br	c008 <__alt_data_end+0xff00c008>
    c6ac:	4984b03a 	or	r2,r9,r6
    c6b0:	10002e26 	beq	r2,zero,c76c <__adddf3+0x7e0>
    c6b4:	4004d0fa 	srli	r2,r8,3
    c6b8:	8822d0fa 	srli	r17,r17,3
    c6bc:	4010977a 	slli	r8,r8,29
    c6c0:	10c0022c 	andhi	r3,r2,8
    c6c4:	4462b03a 	or	r17,r8,r17
    c6c8:	18000826 	beq	r3,zero,c6ec <__adddf3+0x760>
    c6cc:	4808d0fa 	srli	r4,r9,3
    c6d0:	20c0022c 	andhi	r3,r4,8
    c6d4:	1800051e 	bne	r3,zero,c6ec <__adddf3+0x760>
    c6d8:	300cd0fa 	srli	r6,r6,3
    c6dc:	4806977a 	slli	r3,r9,29
    c6e0:	2005883a 	mov	r2,r4
    c6e4:	3825883a 	mov	r18,r7
    c6e8:	19a2b03a 	or	r17,r3,r6
    c6ec:	8810d77a 	srli	r8,r17,29
    c6f0:	100490fa 	slli	r2,r2,3
    c6f4:	882290fa 	slli	r17,r17,3
    c6f8:	0401ffc4 	movi	r16,2047
    c6fc:	4090b03a 	or	r8,r8,r2
    c700:	003e4106 	br	c008 <__alt_data_end+0xff00c008>
    c704:	0141ffc4 	movi	r5,2047
    c708:	117fc71e 	bne	r2,r5,c628 <__alt_data_end+0xff00c628>
    c70c:	4811883a 	mov	r8,r9
    c710:	3023883a 	mov	r17,r6
    c714:	1021883a 	mov	r16,r2
    c718:	003e3b06 	br	c008 <__alt_data_end+0xff00c008>
    c71c:	10002f26 	beq	r2,zero,c7dc <__adddf3+0x850>
    c720:	4984b03a 	or	r2,r9,r6
    c724:	10001126 	beq	r2,zero,c76c <__adddf3+0x7e0>
    c728:	4004d0fa 	srli	r2,r8,3
    c72c:	8822d0fa 	srli	r17,r17,3
    c730:	4010977a 	slli	r8,r8,29
    c734:	10c0022c 	andhi	r3,r2,8
    c738:	4462b03a 	or	r17,r8,r17
    c73c:	183feb26 	beq	r3,zero,c6ec <__alt_data_end+0xff00c6ec>
    c740:	4808d0fa 	srli	r4,r9,3
    c744:	20c0022c 	andhi	r3,r4,8
    c748:	183fe81e 	bne	r3,zero,c6ec <__alt_data_end+0xff00c6ec>
    c74c:	300cd0fa 	srli	r6,r6,3
    c750:	4806977a 	slli	r3,r9,29
    c754:	2005883a 	mov	r2,r4
    c758:	19a2b03a 	or	r17,r3,r6
    c75c:	003fe306 	br	c6ec <__alt_data_end+0xff00c6ec>
    c760:	0011883a 	mov	r8,zero
    c764:	0005883a 	mov	r2,zero
    c768:	003e3f06 	br	c068 <__alt_data_end+0xff00c068>
    c76c:	0401ffc4 	movi	r16,2047
    c770:	003e2506 	br	c008 <__alt_data_end+0xff00c008>
    c774:	0013883a 	mov	r9,zero
    c778:	003f8406 	br	c58c <__alt_data_end+0xff00c58c>
    c77c:	0005883a 	mov	r2,zero
    c780:	0007883a 	mov	r3,zero
    c784:	003e8906 	br	c1ac <__alt_data_end+0xff00c1ac>
    c788:	197ff804 	addi	r5,r3,-32
    c78c:	01000804 	movi	r4,32
    c790:	414ad83a 	srl	r5,r8,r5
    c794:	19002426 	beq	r3,r4,c828 <__adddf3+0x89c>
    c798:	01001004 	movi	r4,64
    c79c:	20c7c83a 	sub	r3,r4,r3
    c7a0:	40c6983a 	sll	r3,r8,r3
    c7a4:	1c46b03a 	or	r3,r3,r17
    c7a8:	1806c03a 	cmpne	r3,r3,zero
    c7ac:	28e2b03a 	or	r17,r5,r3
    c7b0:	0007883a 	mov	r3,zero
    c7b4:	003f2306 	br	c444 <__alt_data_end+0xff00c444>
    c7b8:	0007883a 	mov	r3,zero
    c7bc:	5811883a 	mov	r8,r11
    c7c0:	00bfffc4 	movi	r2,-1
    c7c4:	0401ffc4 	movi	r16,2047
    c7c8:	003e7806 	br	c1ac <__alt_data_end+0xff00c1ac>
    c7cc:	4462b03a 	or	r17,r8,r17
    c7d0:	8822c03a 	cmpne	r17,r17,zero
    c7d4:	0009883a 	mov	r4,zero
    c7d8:	003fa006 	br	c65c <__alt_data_end+0xff00c65c>
    c7dc:	4811883a 	mov	r8,r9
    c7e0:	3023883a 	mov	r17,r6
    c7e4:	0401ffc4 	movi	r16,2047
    c7e8:	003e0706 	br	c008 <__alt_data_end+0xff00c008>
    c7ec:	4811883a 	mov	r8,r9
    c7f0:	3023883a 	mov	r17,r6
    c7f4:	003e0406 	br	c008 <__alt_data_end+0xff00c008>
    c7f8:	21fff804 	addi	r7,r4,-32
    c7fc:	01400804 	movi	r5,32
    c800:	41ced83a 	srl	r7,r8,r7
    c804:	21400a26 	beq	r4,r5,c830 <__adddf3+0x8a4>
    c808:	01401004 	movi	r5,64
    c80c:	2909c83a 	sub	r4,r5,r4
    c810:	4108983a 	sll	r4,r8,r4
    c814:	2448b03a 	or	r4,r4,r17
    c818:	2008c03a 	cmpne	r4,r4,zero
    c81c:	3922b03a 	or	r17,r7,r4
    c820:	0009883a 	mov	r4,zero
    c824:	003f8d06 	br	c65c <__alt_data_end+0xff00c65c>
    c828:	0007883a 	mov	r3,zero
    c82c:	003fdd06 	br	c7a4 <__alt_data_end+0xff00c7a4>
    c830:	0009883a 	mov	r4,zero
    c834:	003ff706 	br	c814 <__alt_data_end+0xff00c814>

0000c838 <__divdf3>:
    c838:	defff204 	addi	sp,sp,-56
    c83c:	dd400915 	stw	r21,36(sp)
    c840:	282ad53a 	srli	r21,r5,20
    c844:	dd000815 	stw	r20,32(sp)
    c848:	2828d7fa 	srli	r20,r5,31
    c84c:	dc000415 	stw	r16,16(sp)
    c850:	04000434 	movhi	r16,16
    c854:	df000c15 	stw	fp,48(sp)
    c858:	843fffc4 	addi	r16,r16,-1
    c85c:	dfc00d15 	stw	ra,52(sp)
    c860:	ddc00b15 	stw	r23,44(sp)
    c864:	dd800a15 	stw	r22,40(sp)
    c868:	dcc00715 	stw	r19,28(sp)
    c86c:	dc800615 	stw	r18,24(sp)
    c870:	dc400515 	stw	r17,20(sp)
    c874:	ad41ffcc 	andi	r21,r21,2047
    c878:	2c20703a 	and	r16,r5,r16
    c87c:	a7003fcc 	andi	fp,r20,255
    c880:	a8006126 	beq	r21,zero,ca08 <__divdf3+0x1d0>
    c884:	0081ffc4 	movi	r2,2047
    c888:	2025883a 	mov	r18,r4
    c88c:	a8803726 	beq	r21,r2,c96c <__divdf3+0x134>
    c890:	80800434 	orhi	r2,r16,16
    c894:	100490fa 	slli	r2,r2,3
    c898:	2020d77a 	srli	r16,r4,29
    c89c:	202490fa 	slli	r18,r4,3
    c8a0:	ad7f0044 	addi	r21,r21,-1023
    c8a4:	80a0b03a 	or	r16,r16,r2
    c8a8:	0027883a 	mov	r19,zero
    c8ac:	0013883a 	mov	r9,zero
    c8b0:	3804d53a 	srli	r2,r7,20
    c8b4:	382cd7fa 	srli	r22,r7,31
    c8b8:	04400434 	movhi	r17,16
    c8bc:	8c7fffc4 	addi	r17,r17,-1
    c8c0:	1081ffcc 	andi	r2,r2,2047
    c8c4:	3011883a 	mov	r8,r6
    c8c8:	3c62703a 	and	r17,r7,r17
    c8cc:	b5c03fcc 	andi	r23,r22,255
    c8d0:	10006c26 	beq	r2,zero,ca84 <__divdf3+0x24c>
    c8d4:	00c1ffc4 	movi	r3,2047
    c8d8:	10c06426 	beq	r2,r3,ca6c <__divdf3+0x234>
    c8dc:	88c00434 	orhi	r3,r17,16
    c8e0:	180690fa 	slli	r3,r3,3
    c8e4:	3022d77a 	srli	r17,r6,29
    c8e8:	301090fa 	slli	r8,r6,3
    c8ec:	10bf0044 	addi	r2,r2,-1023
    c8f0:	88e2b03a 	or	r17,r17,r3
    c8f4:	000f883a 	mov	r7,zero
    c8f8:	a58cf03a 	xor	r6,r20,r22
    c8fc:	3cc8b03a 	or	r4,r7,r19
    c900:	a8abc83a 	sub	r21,r21,r2
    c904:	008003c4 	movi	r2,15
    c908:	3007883a 	mov	r3,r6
    c90c:	34c03fcc 	andi	r19,r6,255
    c910:	11009036 	bltu	r2,r4,cb54 <__divdf3+0x31c>
    c914:	200890ba 	slli	r4,r4,2
    c918:	00800074 	movhi	r2,1
    c91c:	10b24b04 	addi	r2,r2,-14036
    c920:	2089883a 	add	r4,r4,r2
    c924:	20800017 	ldw	r2,0(r4)
    c928:	1000683a 	jmp	r2
    c92c:	0000cb54 	movui	zero,813
    c930:	0000c9a4 	muli	zero,zero,806
    c934:	0000cb44 	movi	zero,813
    c938:	0000c998 	cmpnei	zero,zero,806
    c93c:	0000cb44 	movi	zero,813
    c940:	0000cb18 	cmpnei	zero,zero,812
    c944:	0000cb44 	movi	zero,813
    c948:	0000c998 	cmpnei	zero,zero,806
    c94c:	0000c9a4 	muli	zero,zero,806
    c950:	0000c9a4 	muli	zero,zero,806
    c954:	0000cb18 	cmpnei	zero,zero,812
    c958:	0000c998 	cmpnei	zero,zero,806
    c95c:	0000c988 	cmpgei	zero,zero,806
    c960:	0000c988 	cmpgei	zero,zero,806
    c964:	0000c988 	cmpgei	zero,zero,806
    c968:	0000ce38 	rdprs	zero,zero,824
    c96c:	2404b03a 	or	r2,r4,r16
    c970:	1000661e 	bne	r2,zero,cb0c <__divdf3+0x2d4>
    c974:	04c00204 	movi	r19,8
    c978:	0021883a 	mov	r16,zero
    c97c:	0025883a 	mov	r18,zero
    c980:	02400084 	movi	r9,2
    c984:	003fca06 	br	c8b0 <__alt_data_end+0xff00c8b0>
    c988:	8023883a 	mov	r17,r16
    c98c:	9011883a 	mov	r8,r18
    c990:	e02f883a 	mov	r23,fp
    c994:	480f883a 	mov	r7,r9
    c998:	00800084 	movi	r2,2
    c99c:	3881311e 	bne	r7,r2,ce64 <__divdf3+0x62c>
    c9a0:	b827883a 	mov	r19,r23
    c9a4:	98c0004c 	andi	r3,r19,1
    c9a8:	0081ffc4 	movi	r2,2047
    c9ac:	000b883a 	mov	r5,zero
    c9b0:	0025883a 	mov	r18,zero
    c9b4:	1004953a 	slli	r2,r2,20
    c9b8:	18c03fcc 	andi	r3,r3,255
    c9bc:	04400434 	movhi	r17,16
    c9c0:	8c7fffc4 	addi	r17,r17,-1
    c9c4:	180697fa 	slli	r3,r3,31
    c9c8:	2c4a703a 	and	r5,r5,r17
    c9cc:	288ab03a 	or	r5,r5,r2
    c9d0:	28c6b03a 	or	r3,r5,r3
    c9d4:	9005883a 	mov	r2,r18
    c9d8:	dfc00d17 	ldw	ra,52(sp)
    c9dc:	df000c17 	ldw	fp,48(sp)
    c9e0:	ddc00b17 	ldw	r23,44(sp)
    c9e4:	dd800a17 	ldw	r22,40(sp)
    c9e8:	dd400917 	ldw	r21,36(sp)
    c9ec:	dd000817 	ldw	r20,32(sp)
    c9f0:	dcc00717 	ldw	r19,28(sp)
    c9f4:	dc800617 	ldw	r18,24(sp)
    c9f8:	dc400517 	ldw	r17,20(sp)
    c9fc:	dc000417 	ldw	r16,16(sp)
    ca00:	dec00e04 	addi	sp,sp,56
    ca04:	f800283a 	ret
    ca08:	2404b03a 	or	r2,r4,r16
    ca0c:	2027883a 	mov	r19,r4
    ca10:	10003926 	beq	r2,zero,caf8 <__divdf3+0x2c0>
    ca14:	80012e26 	beq	r16,zero,ced0 <__divdf3+0x698>
    ca18:	8009883a 	mov	r4,r16
    ca1c:	d9800315 	stw	r6,12(sp)
    ca20:	d9c00215 	stw	r7,8(sp)
    ca24:	000e5900 	call	e590 <__clzsi2>
    ca28:	d9800317 	ldw	r6,12(sp)
    ca2c:	d9c00217 	ldw	r7,8(sp)
    ca30:	113ffd44 	addi	r4,r2,-11
    ca34:	00c00704 	movi	r3,28
    ca38:	19012116 	blt	r3,r4,cec0 <__divdf3+0x688>
    ca3c:	00c00744 	movi	r3,29
    ca40:	147ffe04 	addi	r17,r2,-8
    ca44:	1907c83a 	sub	r3,r3,r4
    ca48:	8460983a 	sll	r16,r16,r17
    ca4c:	98c6d83a 	srl	r3,r19,r3
    ca50:	9c64983a 	sll	r18,r19,r17
    ca54:	1c20b03a 	or	r16,r3,r16
    ca58:	1080fcc4 	addi	r2,r2,1011
    ca5c:	00abc83a 	sub	r21,zero,r2
    ca60:	0027883a 	mov	r19,zero
    ca64:	0013883a 	mov	r9,zero
    ca68:	003f9106 	br	c8b0 <__alt_data_end+0xff00c8b0>
    ca6c:	3446b03a 	or	r3,r6,r17
    ca70:	18001f1e 	bne	r3,zero,caf0 <__divdf3+0x2b8>
    ca74:	0023883a 	mov	r17,zero
    ca78:	0011883a 	mov	r8,zero
    ca7c:	01c00084 	movi	r7,2
    ca80:	003f9d06 	br	c8f8 <__alt_data_end+0xff00c8f8>
    ca84:	3446b03a 	or	r3,r6,r17
    ca88:	18001526 	beq	r3,zero,cae0 <__divdf3+0x2a8>
    ca8c:	88011b26 	beq	r17,zero,cefc <__divdf3+0x6c4>
    ca90:	8809883a 	mov	r4,r17
    ca94:	d9800315 	stw	r6,12(sp)
    ca98:	da400115 	stw	r9,4(sp)
    ca9c:	000e5900 	call	e590 <__clzsi2>
    caa0:	d9800317 	ldw	r6,12(sp)
    caa4:	da400117 	ldw	r9,4(sp)
    caa8:	113ffd44 	addi	r4,r2,-11
    caac:	00c00704 	movi	r3,28
    cab0:	19010e16 	blt	r3,r4,ceec <__divdf3+0x6b4>
    cab4:	00c00744 	movi	r3,29
    cab8:	123ffe04 	addi	r8,r2,-8
    cabc:	1907c83a 	sub	r3,r3,r4
    cac0:	8a22983a 	sll	r17,r17,r8
    cac4:	30c6d83a 	srl	r3,r6,r3
    cac8:	3210983a 	sll	r8,r6,r8
    cacc:	1c62b03a 	or	r17,r3,r17
    cad0:	1080fcc4 	addi	r2,r2,1011
    cad4:	0085c83a 	sub	r2,zero,r2
    cad8:	000f883a 	mov	r7,zero
    cadc:	003f8606 	br	c8f8 <__alt_data_end+0xff00c8f8>
    cae0:	0023883a 	mov	r17,zero
    cae4:	0011883a 	mov	r8,zero
    cae8:	01c00044 	movi	r7,1
    caec:	003f8206 	br	c8f8 <__alt_data_end+0xff00c8f8>
    caf0:	01c000c4 	movi	r7,3
    caf4:	003f8006 	br	c8f8 <__alt_data_end+0xff00c8f8>
    caf8:	04c00104 	movi	r19,4
    cafc:	0021883a 	mov	r16,zero
    cb00:	0025883a 	mov	r18,zero
    cb04:	02400044 	movi	r9,1
    cb08:	003f6906 	br	c8b0 <__alt_data_end+0xff00c8b0>
    cb0c:	04c00304 	movi	r19,12
    cb10:	024000c4 	movi	r9,3
    cb14:	003f6606 	br	c8b0 <__alt_data_end+0xff00c8b0>
    cb18:	01400434 	movhi	r5,16
    cb1c:	0007883a 	mov	r3,zero
    cb20:	297fffc4 	addi	r5,r5,-1
    cb24:	04bfffc4 	movi	r18,-1
    cb28:	0081ffc4 	movi	r2,2047
    cb2c:	003fa106 	br	c9b4 <__alt_data_end+0xff00c9b4>
    cb30:	00c00044 	movi	r3,1
    cb34:	1887c83a 	sub	r3,r3,r2
    cb38:	01000e04 	movi	r4,56
    cb3c:	20c1210e 	bge	r4,r3,cfc4 <__divdf3+0x78c>
    cb40:	98c0004c 	andi	r3,r19,1
    cb44:	0005883a 	mov	r2,zero
    cb48:	000b883a 	mov	r5,zero
    cb4c:	0025883a 	mov	r18,zero
    cb50:	003f9806 	br	c9b4 <__alt_data_end+0xff00c9b4>
    cb54:	8c00fd36 	bltu	r17,r16,cf4c <__divdf3+0x714>
    cb58:	8440fb26 	beq	r16,r17,cf48 <__divdf3+0x710>
    cb5c:	8007883a 	mov	r3,r16
    cb60:	ad7fffc4 	addi	r21,r21,-1
    cb64:	0021883a 	mov	r16,zero
    cb68:	4004d63a 	srli	r2,r8,24
    cb6c:	8822923a 	slli	r17,r17,8
    cb70:	1809883a 	mov	r4,r3
    cb74:	402c923a 	slli	r22,r8,8
    cb78:	88b8b03a 	or	fp,r17,r2
    cb7c:	e028d43a 	srli	r20,fp,16
    cb80:	d8c00015 	stw	r3,0(sp)
    cb84:	e5ffffcc 	andi	r23,fp,65535
    cb88:	a00b883a 	mov	r5,r20
    cb8c:	0001da40 	call	1da4 <__udivsi3>
    cb90:	d8c00017 	ldw	r3,0(sp)
    cb94:	a00b883a 	mov	r5,r20
    cb98:	d8800315 	stw	r2,12(sp)
    cb9c:	1809883a 	mov	r4,r3
    cba0:	0001e080 	call	1e08 <__umodsi3>
    cba4:	d9800317 	ldw	r6,12(sp)
    cba8:	1006943a 	slli	r3,r2,16
    cbac:	9004d43a 	srli	r2,r18,16
    cbb0:	b9a3383a 	mul	r17,r23,r6
    cbb4:	10c4b03a 	or	r2,r2,r3
    cbb8:	1440062e 	bgeu	r2,r17,cbd4 <__divdf3+0x39c>
    cbbc:	1705883a 	add	r2,r2,fp
    cbc0:	30ffffc4 	addi	r3,r6,-1
    cbc4:	1700ee36 	bltu	r2,fp,cf80 <__divdf3+0x748>
    cbc8:	1440ed2e 	bgeu	r2,r17,cf80 <__divdf3+0x748>
    cbcc:	31bfff84 	addi	r6,r6,-2
    cbd0:	1705883a 	add	r2,r2,fp
    cbd4:	1463c83a 	sub	r17,r2,r17
    cbd8:	a00b883a 	mov	r5,r20
    cbdc:	8809883a 	mov	r4,r17
    cbe0:	d9800315 	stw	r6,12(sp)
    cbe4:	0001da40 	call	1da4 <__udivsi3>
    cbe8:	a00b883a 	mov	r5,r20
    cbec:	8809883a 	mov	r4,r17
    cbf0:	d8800215 	stw	r2,8(sp)
    cbf4:	0001e080 	call	1e08 <__umodsi3>
    cbf8:	d9c00217 	ldw	r7,8(sp)
    cbfc:	1004943a 	slli	r2,r2,16
    cc00:	94bfffcc 	andi	r18,r18,65535
    cc04:	b9d1383a 	mul	r8,r23,r7
    cc08:	90a4b03a 	or	r18,r18,r2
    cc0c:	d9800317 	ldw	r6,12(sp)
    cc10:	9200062e 	bgeu	r18,r8,cc2c <__divdf3+0x3f4>
    cc14:	9725883a 	add	r18,r18,fp
    cc18:	38bfffc4 	addi	r2,r7,-1
    cc1c:	9700d636 	bltu	r18,fp,cf78 <__divdf3+0x740>
    cc20:	9200d52e 	bgeu	r18,r8,cf78 <__divdf3+0x740>
    cc24:	39ffff84 	addi	r7,r7,-2
    cc28:	9725883a 	add	r18,r18,fp
    cc2c:	3004943a 	slli	r2,r6,16
    cc30:	b012d43a 	srli	r9,r22,16
    cc34:	b1bfffcc 	andi	r6,r22,65535
    cc38:	11e2b03a 	or	r17,r2,r7
    cc3c:	8806d43a 	srli	r3,r17,16
    cc40:	893fffcc 	andi	r4,r17,65535
    cc44:	218b383a 	mul	r5,r4,r6
    cc48:	30c5383a 	mul	r2,r6,r3
    cc4c:	2249383a 	mul	r4,r4,r9
    cc50:	280ed43a 	srli	r7,r5,16
    cc54:	9225c83a 	sub	r18,r18,r8
    cc58:	2089883a 	add	r4,r4,r2
    cc5c:	3909883a 	add	r4,r7,r4
    cc60:	1a47383a 	mul	r3,r3,r9
    cc64:	2080022e 	bgeu	r4,r2,cc70 <__divdf3+0x438>
    cc68:	00800074 	movhi	r2,1
    cc6c:	1887883a 	add	r3,r3,r2
    cc70:	2004d43a 	srli	r2,r4,16
    cc74:	2008943a 	slli	r4,r4,16
    cc78:	297fffcc 	andi	r5,r5,65535
    cc7c:	10c7883a 	add	r3,r2,r3
    cc80:	2149883a 	add	r4,r4,r5
    cc84:	90c0a536 	bltu	r18,r3,cf1c <__divdf3+0x6e4>
    cc88:	90c0bf26 	beq	r18,r3,cf88 <__divdf3+0x750>
    cc8c:	90c7c83a 	sub	r3,r18,r3
    cc90:	810fc83a 	sub	r7,r16,r4
    cc94:	81e5803a 	cmpltu	r18,r16,r7
    cc98:	1ca5c83a 	sub	r18,r3,r18
    cc9c:	e480c126 	beq	fp,r18,cfa4 <__divdf3+0x76c>
    cca0:	a00b883a 	mov	r5,r20
    cca4:	9009883a 	mov	r4,r18
    cca8:	d9800315 	stw	r6,12(sp)
    ccac:	d9c00215 	stw	r7,8(sp)
    ccb0:	da400115 	stw	r9,4(sp)
    ccb4:	0001da40 	call	1da4 <__udivsi3>
    ccb8:	a00b883a 	mov	r5,r20
    ccbc:	9009883a 	mov	r4,r18
    ccc0:	d8800015 	stw	r2,0(sp)
    ccc4:	0001e080 	call	1e08 <__umodsi3>
    ccc8:	d9c00217 	ldw	r7,8(sp)
    cccc:	da000017 	ldw	r8,0(sp)
    ccd0:	1006943a 	slli	r3,r2,16
    ccd4:	3804d43a 	srli	r2,r7,16
    ccd8:	ba21383a 	mul	r16,r23,r8
    ccdc:	d9800317 	ldw	r6,12(sp)
    cce0:	10c4b03a 	or	r2,r2,r3
    cce4:	da400117 	ldw	r9,4(sp)
    cce8:	1400062e 	bgeu	r2,r16,cd04 <__divdf3+0x4cc>
    ccec:	1705883a 	add	r2,r2,fp
    ccf0:	40ffffc4 	addi	r3,r8,-1
    ccf4:	1700ad36 	bltu	r2,fp,cfac <__divdf3+0x774>
    ccf8:	1400ac2e 	bgeu	r2,r16,cfac <__divdf3+0x774>
    ccfc:	423fff84 	addi	r8,r8,-2
    cd00:	1705883a 	add	r2,r2,fp
    cd04:	1421c83a 	sub	r16,r2,r16
    cd08:	a00b883a 	mov	r5,r20
    cd0c:	8009883a 	mov	r4,r16
    cd10:	d9800315 	stw	r6,12(sp)
    cd14:	d9c00215 	stw	r7,8(sp)
    cd18:	da000015 	stw	r8,0(sp)
    cd1c:	da400115 	stw	r9,4(sp)
    cd20:	0001da40 	call	1da4 <__udivsi3>
    cd24:	8009883a 	mov	r4,r16
    cd28:	a00b883a 	mov	r5,r20
    cd2c:	1025883a 	mov	r18,r2
    cd30:	0001e080 	call	1e08 <__umodsi3>
    cd34:	d9c00217 	ldw	r7,8(sp)
    cd38:	1004943a 	slli	r2,r2,16
    cd3c:	bcaf383a 	mul	r23,r23,r18
    cd40:	393fffcc 	andi	r4,r7,65535
    cd44:	2088b03a 	or	r4,r4,r2
    cd48:	d9800317 	ldw	r6,12(sp)
    cd4c:	da000017 	ldw	r8,0(sp)
    cd50:	da400117 	ldw	r9,4(sp)
    cd54:	25c0062e 	bgeu	r4,r23,cd70 <__divdf3+0x538>
    cd58:	2709883a 	add	r4,r4,fp
    cd5c:	90bfffc4 	addi	r2,r18,-1
    cd60:	27009436 	bltu	r4,fp,cfb4 <__divdf3+0x77c>
    cd64:	25c0932e 	bgeu	r4,r23,cfb4 <__divdf3+0x77c>
    cd68:	94bfff84 	addi	r18,r18,-2
    cd6c:	2709883a 	add	r4,r4,fp
    cd70:	4004943a 	slli	r2,r8,16
    cd74:	25efc83a 	sub	r23,r4,r23
    cd78:	1490b03a 	or	r8,r2,r18
    cd7c:	4008d43a 	srli	r4,r8,16
    cd80:	40ffffcc 	andi	r3,r8,65535
    cd84:	30c5383a 	mul	r2,r6,r3
    cd88:	1a47383a 	mul	r3,r3,r9
    cd8c:	310d383a 	mul	r6,r6,r4
    cd90:	100ad43a 	srli	r5,r2,16
    cd94:	4913383a 	mul	r9,r9,r4
    cd98:	1987883a 	add	r3,r3,r6
    cd9c:	28c7883a 	add	r3,r5,r3
    cda0:	1980022e 	bgeu	r3,r6,cdac <__divdf3+0x574>
    cda4:	01000074 	movhi	r4,1
    cda8:	4913883a 	add	r9,r9,r4
    cdac:	1808d43a 	srli	r4,r3,16
    cdb0:	1806943a 	slli	r3,r3,16
    cdb4:	10bfffcc 	andi	r2,r2,65535
    cdb8:	2253883a 	add	r9,r4,r9
    cdbc:	1887883a 	add	r3,r3,r2
    cdc0:	ba403836 	bltu	r23,r9,cea4 <__divdf3+0x66c>
    cdc4:	ba403626 	beq	r23,r9,cea0 <__divdf3+0x668>
    cdc8:	42000054 	ori	r8,r8,1
    cdcc:	a880ffc4 	addi	r2,r21,1023
    cdd0:	00bf570e 	bge	zero,r2,cb30 <__alt_data_end+0xff00cb30>
    cdd4:	40c001cc 	andi	r3,r8,7
    cdd8:	18000726 	beq	r3,zero,cdf8 <__divdf3+0x5c0>
    cddc:	40c003cc 	andi	r3,r8,15
    cde0:	01000104 	movi	r4,4
    cde4:	19000426 	beq	r3,r4,cdf8 <__divdf3+0x5c0>
    cde8:	4107883a 	add	r3,r8,r4
    cdec:	1a11803a 	cmpltu	r8,r3,r8
    cdf0:	8a23883a 	add	r17,r17,r8
    cdf4:	1811883a 	mov	r8,r3
    cdf8:	88c0402c 	andhi	r3,r17,256
    cdfc:	18000426 	beq	r3,zero,ce10 <__divdf3+0x5d8>
    ce00:	00ffc034 	movhi	r3,65280
    ce04:	18ffffc4 	addi	r3,r3,-1
    ce08:	a8810004 	addi	r2,r21,1024
    ce0c:	88e2703a 	and	r17,r17,r3
    ce10:	00c1ff84 	movi	r3,2046
    ce14:	18bee316 	blt	r3,r2,c9a4 <__alt_data_end+0xff00c9a4>
    ce18:	8824977a 	slli	r18,r17,29
    ce1c:	4010d0fa 	srli	r8,r8,3
    ce20:	8822927a 	slli	r17,r17,9
    ce24:	1081ffcc 	andi	r2,r2,2047
    ce28:	9224b03a 	or	r18,r18,r8
    ce2c:	880ad33a 	srli	r5,r17,12
    ce30:	98c0004c 	andi	r3,r19,1
    ce34:	003edf06 	br	c9b4 <__alt_data_end+0xff00c9b4>
    ce38:	8080022c 	andhi	r2,r16,8
    ce3c:	10001226 	beq	r2,zero,ce88 <__divdf3+0x650>
    ce40:	8880022c 	andhi	r2,r17,8
    ce44:	1000101e 	bne	r2,zero,ce88 <__divdf3+0x650>
    ce48:	00800434 	movhi	r2,16
    ce4c:	89400234 	orhi	r5,r17,8
    ce50:	10bfffc4 	addi	r2,r2,-1
    ce54:	b007883a 	mov	r3,r22
    ce58:	288a703a 	and	r5,r5,r2
    ce5c:	4025883a 	mov	r18,r8
    ce60:	003f3106 	br	cb28 <__alt_data_end+0xff00cb28>
    ce64:	008000c4 	movi	r2,3
    ce68:	3880a626 	beq	r7,r2,d104 <__divdf3+0x8cc>
    ce6c:	00800044 	movi	r2,1
    ce70:	3880521e 	bne	r7,r2,cfbc <__divdf3+0x784>
    ce74:	b807883a 	mov	r3,r23
    ce78:	0005883a 	mov	r2,zero
    ce7c:	000b883a 	mov	r5,zero
    ce80:	0025883a 	mov	r18,zero
    ce84:	003ecb06 	br	c9b4 <__alt_data_end+0xff00c9b4>
    ce88:	00800434 	movhi	r2,16
    ce8c:	81400234 	orhi	r5,r16,8
    ce90:	10bfffc4 	addi	r2,r2,-1
    ce94:	a007883a 	mov	r3,r20
    ce98:	288a703a 	and	r5,r5,r2
    ce9c:	003f2206 	br	cb28 <__alt_data_end+0xff00cb28>
    cea0:	183fca26 	beq	r3,zero,cdcc <__alt_data_end+0xff00cdcc>
    cea4:	e5ef883a 	add	r23,fp,r23
    cea8:	40bfffc4 	addi	r2,r8,-1
    ceac:	bf00392e 	bgeu	r23,fp,cf94 <__divdf3+0x75c>
    ceb0:	1011883a 	mov	r8,r2
    ceb4:	ba7fc41e 	bne	r23,r9,cdc8 <__alt_data_end+0xff00cdc8>
    ceb8:	b0ffc31e 	bne	r22,r3,cdc8 <__alt_data_end+0xff00cdc8>
    cebc:	003fc306 	br	cdcc <__alt_data_end+0xff00cdcc>
    cec0:	143ff604 	addi	r16,r2,-40
    cec4:	9c20983a 	sll	r16,r19,r16
    cec8:	0025883a 	mov	r18,zero
    cecc:	003ee206 	br	ca58 <__alt_data_end+0xff00ca58>
    ced0:	d9800315 	stw	r6,12(sp)
    ced4:	d9c00215 	stw	r7,8(sp)
    ced8:	000e5900 	call	e590 <__clzsi2>
    cedc:	10800804 	addi	r2,r2,32
    cee0:	d9c00217 	ldw	r7,8(sp)
    cee4:	d9800317 	ldw	r6,12(sp)
    cee8:	003ed106 	br	ca30 <__alt_data_end+0xff00ca30>
    ceec:	147ff604 	addi	r17,r2,-40
    cef0:	3462983a 	sll	r17,r6,r17
    cef4:	0011883a 	mov	r8,zero
    cef8:	003ef506 	br	cad0 <__alt_data_end+0xff00cad0>
    cefc:	3009883a 	mov	r4,r6
    cf00:	d9800315 	stw	r6,12(sp)
    cf04:	da400115 	stw	r9,4(sp)
    cf08:	000e5900 	call	e590 <__clzsi2>
    cf0c:	10800804 	addi	r2,r2,32
    cf10:	da400117 	ldw	r9,4(sp)
    cf14:	d9800317 	ldw	r6,12(sp)
    cf18:	003ee306 	br	caa8 <__alt_data_end+0xff00caa8>
    cf1c:	85a1883a 	add	r16,r16,r22
    cf20:	8585803a 	cmpltu	r2,r16,r22
    cf24:	1705883a 	add	r2,r2,fp
    cf28:	14a5883a 	add	r18,r2,r18
    cf2c:	88bfffc4 	addi	r2,r17,-1
    cf30:	e4800c2e 	bgeu	fp,r18,cf64 <__divdf3+0x72c>
    cf34:	90c03e36 	bltu	r18,r3,d030 <__divdf3+0x7f8>
    cf38:	1c806926 	beq	r3,r18,d0e0 <__divdf3+0x8a8>
    cf3c:	90c7c83a 	sub	r3,r18,r3
    cf40:	1023883a 	mov	r17,r2
    cf44:	003f5206 	br	cc90 <__alt_data_end+0xff00cc90>
    cf48:	923f0436 	bltu	r18,r8,cb5c <__alt_data_end+0xff00cb5c>
    cf4c:	800897fa 	slli	r4,r16,31
    cf50:	9004d07a 	srli	r2,r18,1
    cf54:	8006d07a 	srli	r3,r16,1
    cf58:	902097fa 	slli	r16,r18,31
    cf5c:	20a4b03a 	or	r18,r4,r2
    cf60:	003f0106 	br	cb68 <__alt_data_end+0xff00cb68>
    cf64:	e4bff51e 	bne	fp,r18,cf3c <__alt_data_end+0xff00cf3c>
    cf68:	85bff22e 	bgeu	r16,r22,cf34 <__alt_data_end+0xff00cf34>
    cf6c:	e0c7c83a 	sub	r3,fp,r3
    cf70:	1023883a 	mov	r17,r2
    cf74:	003f4606 	br	cc90 <__alt_data_end+0xff00cc90>
    cf78:	100f883a 	mov	r7,r2
    cf7c:	003f2b06 	br	cc2c <__alt_data_end+0xff00cc2c>
    cf80:	180d883a 	mov	r6,r3
    cf84:	003f1306 	br	cbd4 <__alt_data_end+0xff00cbd4>
    cf88:	813fe436 	bltu	r16,r4,cf1c <__alt_data_end+0xff00cf1c>
    cf8c:	0007883a 	mov	r3,zero
    cf90:	003f3f06 	br	cc90 <__alt_data_end+0xff00cc90>
    cf94:	ba402c36 	bltu	r23,r9,d048 <__divdf3+0x810>
    cf98:	4dc05426 	beq	r9,r23,d0ec <__divdf3+0x8b4>
    cf9c:	1011883a 	mov	r8,r2
    cfa0:	003f8906 	br	cdc8 <__alt_data_end+0xff00cdc8>
    cfa4:	023fffc4 	movi	r8,-1
    cfa8:	003f8806 	br	cdcc <__alt_data_end+0xff00cdcc>
    cfac:	1811883a 	mov	r8,r3
    cfb0:	003f5406 	br	cd04 <__alt_data_end+0xff00cd04>
    cfb4:	1025883a 	mov	r18,r2
    cfb8:	003f6d06 	br	cd70 <__alt_data_end+0xff00cd70>
    cfbc:	b827883a 	mov	r19,r23
    cfc0:	003f8206 	br	cdcc <__alt_data_end+0xff00cdcc>
    cfc4:	010007c4 	movi	r4,31
    cfc8:	20c02616 	blt	r4,r3,d064 <__divdf3+0x82c>
    cfcc:	00800804 	movi	r2,32
    cfd0:	10c5c83a 	sub	r2,r2,r3
    cfd4:	888a983a 	sll	r5,r17,r2
    cfd8:	40c8d83a 	srl	r4,r8,r3
    cfdc:	4084983a 	sll	r2,r8,r2
    cfe0:	88e2d83a 	srl	r17,r17,r3
    cfe4:	2906b03a 	or	r3,r5,r4
    cfe8:	1004c03a 	cmpne	r2,r2,zero
    cfec:	1886b03a 	or	r3,r3,r2
    cff0:	188001cc 	andi	r2,r3,7
    cff4:	10000726 	beq	r2,zero,d014 <__divdf3+0x7dc>
    cff8:	188003cc 	andi	r2,r3,15
    cffc:	01000104 	movi	r4,4
    d000:	11000426 	beq	r2,r4,d014 <__divdf3+0x7dc>
    d004:	1805883a 	mov	r2,r3
    d008:	10c00104 	addi	r3,r2,4
    d00c:	1885803a 	cmpltu	r2,r3,r2
    d010:	88a3883a 	add	r17,r17,r2
    d014:	8880202c 	andhi	r2,r17,128
    d018:	10002726 	beq	r2,zero,d0b8 <__divdf3+0x880>
    d01c:	98c0004c 	andi	r3,r19,1
    d020:	00800044 	movi	r2,1
    d024:	000b883a 	mov	r5,zero
    d028:	0025883a 	mov	r18,zero
    d02c:	003e6106 	br	c9b4 <__alt_data_end+0xff00c9b4>
    d030:	85a1883a 	add	r16,r16,r22
    d034:	8585803a 	cmpltu	r2,r16,r22
    d038:	1705883a 	add	r2,r2,fp
    d03c:	14a5883a 	add	r18,r2,r18
    d040:	8c7fff84 	addi	r17,r17,-2
    d044:	003f1106 	br	cc8c <__alt_data_end+0xff00cc8c>
    d048:	b589883a 	add	r4,r22,r22
    d04c:	25ad803a 	cmpltu	r22,r4,r22
    d050:	b739883a 	add	fp,r22,fp
    d054:	40bfff84 	addi	r2,r8,-2
    d058:	bf2f883a 	add	r23,r23,fp
    d05c:	202d883a 	mov	r22,r4
    d060:	003f9306 	br	ceb0 <__alt_data_end+0xff00ceb0>
    d064:	013ff844 	movi	r4,-31
    d068:	2085c83a 	sub	r2,r4,r2
    d06c:	8888d83a 	srl	r4,r17,r2
    d070:	00800804 	movi	r2,32
    d074:	18802126 	beq	r3,r2,d0fc <__divdf3+0x8c4>
    d078:	00801004 	movi	r2,64
    d07c:	10c5c83a 	sub	r2,r2,r3
    d080:	8884983a 	sll	r2,r17,r2
    d084:	1204b03a 	or	r2,r2,r8
    d088:	1004c03a 	cmpne	r2,r2,zero
    d08c:	2084b03a 	or	r2,r4,r2
    d090:	144001cc 	andi	r17,r2,7
    d094:	88000d1e 	bne	r17,zero,d0cc <__divdf3+0x894>
    d098:	000b883a 	mov	r5,zero
    d09c:	1024d0fa 	srli	r18,r2,3
    d0a0:	98c0004c 	andi	r3,r19,1
    d0a4:	0005883a 	mov	r2,zero
    d0a8:	9464b03a 	or	r18,r18,r17
    d0ac:	003e4106 	br	c9b4 <__alt_data_end+0xff00c9b4>
    d0b0:	1007883a 	mov	r3,r2
    d0b4:	0023883a 	mov	r17,zero
    d0b8:	880a927a 	slli	r5,r17,9
    d0bc:	1805883a 	mov	r2,r3
    d0c0:	8822977a 	slli	r17,r17,29
    d0c4:	280ad33a 	srli	r5,r5,12
    d0c8:	003ff406 	br	d09c <__alt_data_end+0xff00d09c>
    d0cc:	10c003cc 	andi	r3,r2,15
    d0d0:	01000104 	movi	r4,4
    d0d4:	193ff626 	beq	r3,r4,d0b0 <__alt_data_end+0xff00d0b0>
    d0d8:	0023883a 	mov	r17,zero
    d0dc:	003fca06 	br	d008 <__alt_data_end+0xff00d008>
    d0e0:	813fd336 	bltu	r16,r4,d030 <__alt_data_end+0xff00d030>
    d0e4:	1023883a 	mov	r17,r2
    d0e8:	003fa806 	br	cf8c <__alt_data_end+0xff00cf8c>
    d0ec:	b0ffd636 	bltu	r22,r3,d048 <__alt_data_end+0xff00d048>
    d0f0:	1011883a 	mov	r8,r2
    d0f4:	b0ff341e 	bne	r22,r3,cdc8 <__alt_data_end+0xff00cdc8>
    d0f8:	003f3406 	br	cdcc <__alt_data_end+0xff00cdcc>
    d0fc:	0005883a 	mov	r2,zero
    d100:	003fe006 	br	d084 <__alt_data_end+0xff00d084>
    d104:	00800434 	movhi	r2,16
    d108:	89400234 	orhi	r5,r17,8
    d10c:	10bfffc4 	addi	r2,r2,-1
    d110:	b807883a 	mov	r3,r23
    d114:	288a703a 	and	r5,r5,r2
    d118:	4025883a 	mov	r18,r8
    d11c:	003e8206 	br	cb28 <__alt_data_end+0xff00cb28>

0000d120 <__eqdf2>:
    d120:	2804d53a 	srli	r2,r5,20
    d124:	3806d53a 	srli	r3,r7,20
    d128:	02000434 	movhi	r8,16
    d12c:	423fffc4 	addi	r8,r8,-1
    d130:	1081ffcc 	andi	r2,r2,2047
    d134:	0281ffc4 	movi	r10,2047
    d138:	2a12703a 	and	r9,r5,r8
    d13c:	18c1ffcc 	andi	r3,r3,2047
    d140:	3a10703a 	and	r8,r7,r8
    d144:	280ad7fa 	srli	r5,r5,31
    d148:	380ed7fa 	srli	r7,r7,31
    d14c:	12801026 	beq	r2,r10,d190 <__eqdf2+0x70>
    d150:	0281ffc4 	movi	r10,2047
    d154:	1a800a26 	beq	r3,r10,d180 <__eqdf2+0x60>
    d158:	10c00226 	beq	r2,r3,d164 <__eqdf2+0x44>
    d15c:	00800044 	movi	r2,1
    d160:	f800283a 	ret
    d164:	4a3ffd1e 	bne	r9,r8,d15c <__alt_data_end+0xff00d15c>
    d168:	21bffc1e 	bne	r4,r6,d15c <__alt_data_end+0xff00d15c>
    d16c:	29c00c26 	beq	r5,r7,d1a0 <__eqdf2+0x80>
    d170:	103ffa1e 	bne	r2,zero,d15c <__alt_data_end+0xff00d15c>
    d174:	2244b03a 	or	r2,r4,r9
    d178:	1004c03a 	cmpne	r2,r2,zero
    d17c:	f800283a 	ret
    d180:	3214b03a 	or	r10,r6,r8
    d184:	503ff426 	beq	r10,zero,d158 <__alt_data_end+0xff00d158>
    d188:	00800044 	movi	r2,1
    d18c:	f800283a 	ret
    d190:	2254b03a 	or	r10,r4,r9
    d194:	503fee26 	beq	r10,zero,d150 <__alt_data_end+0xff00d150>
    d198:	00800044 	movi	r2,1
    d19c:	f800283a 	ret
    d1a0:	0005883a 	mov	r2,zero
    d1a4:	f800283a 	ret

0000d1a8 <__gedf2>:
    d1a8:	2804d53a 	srli	r2,r5,20
    d1ac:	3806d53a 	srli	r3,r7,20
    d1b0:	02000434 	movhi	r8,16
    d1b4:	423fffc4 	addi	r8,r8,-1
    d1b8:	1081ffcc 	andi	r2,r2,2047
    d1bc:	0241ffc4 	movi	r9,2047
    d1c0:	2a14703a 	and	r10,r5,r8
    d1c4:	18c1ffcc 	andi	r3,r3,2047
    d1c8:	3a10703a 	and	r8,r7,r8
    d1cc:	280ad7fa 	srli	r5,r5,31
    d1d0:	380ed7fa 	srli	r7,r7,31
    d1d4:	12401d26 	beq	r2,r9,d24c <__gedf2+0xa4>
    d1d8:	0241ffc4 	movi	r9,2047
    d1dc:	1a401226 	beq	r3,r9,d228 <__gedf2+0x80>
    d1e0:	1000081e 	bne	r2,zero,d204 <__gedf2+0x5c>
    d1e4:	2296b03a 	or	r11,r4,r10
    d1e8:	5813003a 	cmpeq	r9,r11,zero
    d1ec:	1800091e 	bne	r3,zero,d214 <__gedf2+0x6c>
    d1f0:	3218b03a 	or	r12,r6,r8
    d1f4:	6000071e 	bne	r12,zero,d214 <__gedf2+0x6c>
    d1f8:	0005883a 	mov	r2,zero
    d1fc:	5800101e 	bne	r11,zero,d240 <__gedf2+0x98>
    d200:	f800283a 	ret
    d204:	18000c1e 	bne	r3,zero,d238 <__gedf2+0x90>
    d208:	3212b03a 	or	r9,r6,r8
    d20c:	48000c26 	beq	r9,zero,d240 <__gedf2+0x98>
    d210:	0013883a 	mov	r9,zero
    d214:	39c03fcc 	andi	r7,r7,255
    d218:	48000826 	beq	r9,zero,d23c <__gedf2+0x94>
    d21c:	38000926 	beq	r7,zero,d244 <__gedf2+0x9c>
    d220:	00800044 	movi	r2,1
    d224:	f800283a 	ret
    d228:	3212b03a 	or	r9,r6,r8
    d22c:	483fec26 	beq	r9,zero,d1e0 <__alt_data_end+0xff00d1e0>
    d230:	00bfff84 	movi	r2,-2
    d234:	f800283a 	ret
    d238:	39c03fcc 	andi	r7,r7,255
    d23c:	29c00626 	beq	r5,r7,d258 <__gedf2+0xb0>
    d240:	283ff726 	beq	r5,zero,d220 <__alt_data_end+0xff00d220>
    d244:	00bfffc4 	movi	r2,-1
    d248:	f800283a 	ret
    d24c:	2292b03a 	or	r9,r4,r10
    d250:	483fe126 	beq	r9,zero,d1d8 <__alt_data_end+0xff00d1d8>
    d254:	003ff606 	br	d230 <__alt_data_end+0xff00d230>
    d258:	18bff916 	blt	r3,r2,d240 <__alt_data_end+0xff00d240>
    d25c:	10c00316 	blt	r2,r3,d26c <__gedf2+0xc4>
    d260:	42bff736 	bltu	r8,r10,d240 <__alt_data_end+0xff00d240>
    d264:	52000326 	beq	r10,r8,d274 <__gedf2+0xcc>
    d268:	5200042e 	bgeu	r10,r8,d27c <__gedf2+0xd4>
    d26c:	283fec1e 	bne	r5,zero,d220 <__alt_data_end+0xff00d220>
    d270:	003ff406 	br	d244 <__alt_data_end+0xff00d244>
    d274:	313ff236 	bltu	r6,r4,d240 <__alt_data_end+0xff00d240>
    d278:	21bffc36 	bltu	r4,r6,d26c <__alt_data_end+0xff00d26c>
    d27c:	0005883a 	mov	r2,zero
    d280:	f800283a 	ret

0000d284 <__ledf2>:
    d284:	2804d53a 	srli	r2,r5,20
    d288:	3810d53a 	srli	r8,r7,20
    d28c:	00c00434 	movhi	r3,16
    d290:	18ffffc4 	addi	r3,r3,-1
    d294:	1081ffcc 	andi	r2,r2,2047
    d298:	0241ffc4 	movi	r9,2047
    d29c:	28d4703a 	and	r10,r5,r3
    d2a0:	4201ffcc 	andi	r8,r8,2047
    d2a4:	38c6703a 	and	r3,r7,r3
    d2a8:	280ad7fa 	srli	r5,r5,31
    d2ac:	380ed7fa 	srli	r7,r7,31
    d2b0:	12401f26 	beq	r2,r9,d330 <__ledf2+0xac>
    d2b4:	0241ffc4 	movi	r9,2047
    d2b8:	42401426 	beq	r8,r9,d30c <__ledf2+0x88>
    d2bc:	1000091e 	bne	r2,zero,d2e4 <__ledf2+0x60>
    d2c0:	2296b03a 	or	r11,r4,r10
    d2c4:	5813003a 	cmpeq	r9,r11,zero
    d2c8:	29403fcc 	andi	r5,r5,255
    d2cc:	40000a1e 	bne	r8,zero,d2f8 <__ledf2+0x74>
    d2d0:	30d8b03a 	or	r12,r6,r3
    d2d4:	6000081e 	bne	r12,zero,d2f8 <__ledf2+0x74>
    d2d8:	0005883a 	mov	r2,zero
    d2dc:	5800111e 	bne	r11,zero,d324 <__ledf2+0xa0>
    d2e0:	f800283a 	ret
    d2e4:	29403fcc 	andi	r5,r5,255
    d2e8:	40000c1e 	bne	r8,zero,d31c <__ledf2+0x98>
    d2ec:	30d2b03a 	or	r9,r6,r3
    d2f0:	48000c26 	beq	r9,zero,d324 <__ledf2+0xa0>
    d2f4:	0013883a 	mov	r9,zero
    d2f8:	39c03fcc 	andi	r7,r7,255
    d2fc:	48000826 	beq	r9,zero,d320 <__ledf2+0x9c>
    d300:	38001126 	beq	r7,zero,d348 <__ledf2+0xc4>
    d304:	00800044 	movi	r2,1
    d308:	f800283a 	ret
    d30c:	30d2b03a 	or	r9,r6,r3
    d310:	483fea26 	beq	r9,zero,d2bc <__alt_data_end+0xff00d2bc>
    d314:	00800084 	movi	r2,2
    d318:	f800283a 	ret
    d31c:	39c03fcc 	andi	r7,r7,255
    d320:	39400726 	beq	r7,r5,d340 <__ledf2+0xbc>
    d324:	2800081e 	bne	r5,zero,d348 <__ledf2+0xc4>
    d328:	00800044 	movi	r2,1
    d32c:	f800283a 	ret
    d330:	2292b03a 	or	r9,r4,r10
    d334:	483fdf26 	beq	r9,zero,d2b4 <__alt_data_end+0xff00d2b4>
    d338:	00800084 	movi	r2,2
    d33c:	f800283a 	ret
    d340:	4080030e 	bge	r8,r2,d350 <__ledf2+0xcc>
    d344:	383fef26 	beq	r7,zero,d304 <__alt_data_end+0xff00d304>
    d348:	00bfffc4 	movi	r2,-1
    d34c:	f800283a 	ret
    d350:	123feb16 	blt	r2,r8,d300 <__alt_data_end+0xff00d300>
    d354:	1abff336 	bltu	r3,r10,d324 <__alt_data_end+0xff00d324>
    d358:	50c00326 	beq	r10,r3,d368 <__ledf2+0xe4>
    d35c:	50c0042e 	bgeu	r10,r3,d370 <__ledf2+0xec>
    d360:	283fe81e 	bne	r5,zero,d304 <__alt_data_end+0xff00d304>
    d364:	003ff806 	br	d348 <__alt_data_end+0xff00d348>
    d368:	313fee36 	bltu	r6,r4,d324 <__alt_data_end+0xff00d324>
    d36c:	21bffc36 	bltu	r4,r6,d360 <__alt_data_end+0xff00d360>
    d370:	0005883a 	mov	r2,zero
    d374:	f800283a 	ret

0000d378 <__muldf3>:
    d378:	defff304 	addi	sp,sp,-52
    d37c:	2804d53a 	srli	r2,r5,20
    d380:	dd800915 	stw	r22,36(sp)
    d384:	282cd7fa 	srli	r22,r5,31
    d388:	dc000315 	stw	r16,12(sp)
    d38c:	04000434 	movhi	r16,16
    d390:	dd400815 	stw	r21,32(sp)
    d394:	dc800515 	stw	r18,20(sp)
    d398:	843fffc4 	addi	r16,r16,-1
    d39c:	dfc00c15 	stw	ra,48(sp)
    d3a0:	df000b15 	stw	fp,44(sp)
    d3a4:	ddc00a15 	stw	r23,40(sp)
    d3a8:	dd000715 	stw	r20,28(sp)
    d3ac:	dcc00615 	stw	r19,24(sp)
    d3b0:	dc400415 	stw	r17,16(sp)
    d3b4:	1481ffcc 	andi	r18,r2,2047
    d3b8:	2c20703a 	and	r16,r5,r16
    d3bc:	b02b883a 	mov	r21,r22
    d3c0:	b2403fcc 	andi	r9,r22,255
    d3c4:	90006026 	beq	r18,zero,d548 <__muldf3+0x1d0>
    d3c8:	0081ffc4 	movi	r2,2047
    d3cc:	2029883a 	mov	r20,r4
    d3d0:	90803626 	beq	r18,r2,d4ac <__muldf3+0x134>
    d3d4:	80800434 	orhi	r2,r16,16
    d3d8:	100490fa 	slli	r2,r2,3
    d3dc:	2020d77a 	srli	r16,r4,29
    d3e0:	202890fa 	slli	r20,r4,3
    d3e4:	94bf0044 	addi	r18,r18,-1023
    d3e8:	80a0b03a 	or	r16,r16,r2
    d3ec:	0027883a 	mov	r19,zero
    d3f0:	0039883a 	mov	fp,zero
    d3f4:	3804d53a 	srli	r2,r7,20
    d3f8:	382ed7fa 	srli	r23,r7,31
    d3fc:	04400434 	movhi	r17,16
    d400:	8c7fffc4 	addi	r17,r17,-1
    d404:	1081ffcc 	andi	r2,r2,2047
    d408:	3011883a 	mov	r8,r6
    d40c:	3c62703a 	and	r17,r7,r17
    d410:	ba803fcc 	andi	r10,r23,255
    d414:	10006d26 	beq	r2,zero,d5cc <__muldf3+0x254>
    d418:	00c1ffc4 	movi	r3,2047
    d41c:	10c06526 	beq	r2,r3,d5b4 <__muldf3+0x23c>
    d420:	88c00434 	orhi	r3,r17,16
    d424:	180690fa 	slli	r3,r3,3
    d428:	3022d77a 	srli	r17,r6,29
    d42c:	301090fa 	slli	r8,r6,3
    d430:	10bf0044 	addi	r2,r2,-1023
    d434:	88e2b03a 	or	r17,r17,r3
    d438:	000b883a 	mov	r5,zero
    d43c:	9085883a 	add	r2,r18,r2
    d440:	2cc8b03a 	or	r4,r5,r19
    d444:	00c003c4 	movi	r3,15
    d448:	bdacf03a 	xor	r22,r23,r22
    d44c:	12c00044 	addi	r11,r2,1
    d450:	19009936 	bltu	r3,r4,d6b8 <__muldf3+0x340>
    d454:	200890ba 	slli	r4,r4,2
    d458:	00c00074 	movhi	r3,1
    d45c:	18f51b04 	addi	r3,r3,-11156
    d460:	20c9883a 	add	r4,r4,r3
    d464:	20c00017 	ldw	r3,0(r4)
    d468:	1800683a 	jmp	r3
    d46c:	0000d6b8 	rdprs	zero,zero,858
    d470:	0000d4cc 	andi	zero,zero,851
    d474:	0000d4cc 	andi	zero,zero,851
    d478:	0000d4c8 	cmpgei	zero,zero,851
    d47c:	0000d694 	movui	zero,858
    d480:	0000d694 	movui	zero,858
    d484:	0000d67c 	xorhi	zero,zero,857
    d488:	0000d4c8 	cmpgei	zero,zero,851
    d48c:	0000d694 	movui	zero,858
    d490:	0000d67c 	xorhi	zero,zero,857
    d494:	0000d694 	movui	zero,858
    d498:	0000d4c8 	cmpgei	zero,zero,851
    d49c:	0000d6a4 	muli	zero,zero,858
    d4a0:	0000d6a4 	muli	zero,zero,858
    d4a4:	0000d6a4 	muli	zero,zero,858
    d4a8:	0000d8c0 	call	d8c <init_LCD+0x354>
    d4ac:	2404b03a 	or	r2,r4,r16
    d4b0:	10006f1e 	bne	r2,zero,d670 <__muldf3+0x2f8>
    d4b4:	04c00204 	movi	r19,8
    d4b8:	0021883a 	mov	r16,zero
    d4bc:	0029883a 	mov	r20,zero
    d4c0:	07000084 	movi	fp,2
    d4c4:	003fcb06 	br	d3f4 <__alt_data_end+0xff00d3f4>
    d4c8:	502d883a 	mov	r22,r10
    d4cc:	00800084 	movi	r2,2
    d4d0:	28805726 	beq	r5,r2,d630 <__muldf3+0x2b8>
    d4d4:	008000c4 	movi	r2,3
    d4d8:	28816626 	beq	r5,r2,da74 <__muldf3+0x6fc>
    d4dc:	00800044 	movi	r2,1
    d4e0:	2881411e 	bne	r5,r2,d9e8 <__muldf3+0x670>
    d4e4:	b02b883a 	mov	r21,r22
    d4e8:	0005883a 	mov	r2,zero
    d4ec:	000b883a 	mov	r5,zero
    d4f0:	0029883a 	mov	r20,zero
    d4f4:	1004953a 	slli	r2,r2,20
    d4f8:	a8c03fcc 	andi	r3,r21,255
    d4fc:	04400434 	movhi	r17,16
    d500:	8c7fffc4 	addi	r17,r17,-1
    d504:	180697fa 	slli	r3,r3,31
    d508:	2c4a703a 	and	r5,r5,r17
    d50c:	288ab03a 	or	r5,r5,r2
    d510:	28c6b03a 	or	r3,r5,r3
    d514:	a005883a 	mov	r2,r20
    d518:	dfc00c17 	ldw	ra,48(sp)
    d51c:	df000b17 	ldw	fp,44(sp)
    d520:	ddc00a17 	ldw	r23,40(sp)
    d524:	dd800917 	ldw	r22,36(sp)
    d528:	dd400817 	ldw	r21,32(sp)
    d52c:	dd000717 	ldw	r20,28(sp)
    d530:	dcc00617 	ldw	r19,24(sp)
    d534:	dc800517 	ldw	r18,20(sp)
    d538:	dc400417 	ldw	r17,16(sp)
    d53c:	dc000317 	ldw	r16,12(sp)
    d540:	dec00d04 	addi	sp,sp,52
    d544:	f800283a 	ret
    d548:	2404b03a 	or	r2,r4,r16
    d54c:	2027883a 	mov	r19,r4
    d550:	10004226 	beq	r2,zero,d65c <__muldf3+0x2e4>
    d554:	8000fc26 	beq	r16,zero,d948 <__muldf3+0x5d0>
    d558:	8009883a 	mov	r4,r16
    d55c:	d9800215 	stw	r6,8(sp)
    d560:	d9c00015 	stw	r7,0(sp)
    d564:	da400115 	stw	r9,4(sp)
    d568:	000e5900 	call	e590 <__clzsi2>
    d56c:	d9800217 	ldw	r6,8(sp)
    d570:	d9c00017 	ldw	r7,0(sp)
    d574:	da400117 	ldw	r9,4(sp)
    d578:	113ffd44 	addi	r4,r2,-11
    d57c:	00c00704 	movi	r3,28
    d580:	1900ed16 	blt	r3,r4,d938 <__muldf3+0x5c0>
    d584:	00c00744 	movi	r3,29
    d588:	147ffe04 	addi	r17,r2,-8
    d58c:	1907c83a 	sub	r3,r3,r4
    d590:	8460983a 	sll	r16,r16,r17
    d594:	98c6d83a 	srl	r3,r19,r3
    d598:	9c68983a 	sll	r20,r19,r17
    d59c:	1c20b03a 	or	r16,r3,r16
    d5a0:	1080fcc4 	addi	r2,r2,1011
    d5a4:	00a5c83a 	sub	r18,zero,r2
    d5a8:	0027883a 	mov	r19,zero
    d5ac:	0039883a 	mov	fp,zero
    d5b0:	003f9006 	br	d3f4 <__alt_data_end+0xff00d3f4>
    d5b4:	3446b03a 	or	r3,r6,r17
    d5b8:	1800261e 	bne	r3,zero,d654 <__muldf3+0x2dc>
    d5bc:	0023883a 	mov	r17,zero
    d5c0:	0011883a 	mov	r8,zero
    d5c4:	01400084 	movi	r5,2
    d5c8:	003f9c06 	br	d43c <__alt_data_end+0xff00d43c>
    d5cc:	3446b03a 	or	r3,r6,r17
    d5d0:	18001c26 	beq	r3,zero,d644 <__muldf3+0x2cc>
    d5d4:	8800ce26 	beq	r17,zero,d910 <__muldf3+0x598>
    d5d8:	8809883a 	mov	r4,r17
    d5dc:	d9800215 	stw	r6,8(sp)
    d5e0:	da400115 	stw	r9,4(sp)
    d5e4:	da800015 	stw	r10,0(sp)
    d5e8:	000e5900 	call	e590 <__clzsi2>
    d5ec:	d9800217 	ldw	r6,8(sp)
    d5f0:	da400117 	ldw	r9,4(sp)
    d5f4:	da800017 	ldw	r10,0(sp)
    d5f8:	113ffd44 	addi	r4,r2,-11
    d5fc:	00c00704 	movi	r3,28
    d600:	1900bf16 	blt	r3,r4,d900 <__muldf3+0x588>
    d604:	00c00744 	movi	r3,29
    d608:	123ffe04 	addi	r8,r2,-8
    d60c:	1907c83a 	sub	r3,r3,r4
    d610:	8a22983a 	sll	r17,r17,r8
    d614:	30c6d83a 	srl	r3,r6,r3
    d618:	3210983a 	sll	r8,r6,r8
    d61c:	1c62b03a 	or	r17,r3,r17
    d620:	1080fcc4 	addi	r2,r2,1011
    d624:	0085c83a 	sub	r2,zero,r2
    d628:	000b883a 	mov	r5,zero
    d62c:	003f8306 	br	d43c <__alt_data_end+0xff00d43c>
    d630:	b02b883a 	mov	r21,r22
    d634:	0081ffc4 	movi	r2,2047
    d638:	000b883a 	mov	r5,zero
    d63c:	0029883a 	mov	r20,zero
    d640:	003fac06 	br	d4f4 <__alt_data_end+0xff00d4f4>
    d644:	0023883a 	mov	r17,zero
    d648:	0011883a 	mov	r8,zero
    d64c:	01400044 	movi	r5,1
    d650:	003f7a06 	br	d43c <__alt_data_end+0xff00d43c>
    d654:	014000c4 	movi	r5,3
    d658:	003f7806 	br	d43c <__alt_data_end+0xff00d43c>
    d65c:	04c00104 	movi	r19,4
    d660:	0021883a 	mov	r16,zero
    d664:	0029883a 	mov	r20,zero
    d668:	07000044 	movi	fp,1
    d66c:	003f6106 	br	d3f4 <__alt_data_end+0xff00d3f4>
    d670:	04c00304 	movi	r19,12
    d674:	070000c4 	movi	fp,3
    d678:	003f5e06 	br	d3f4 <__alt_data_end+0xff00d3f4>
    d67c:	01400434 	movhi	r5,16
    d680:	002b883a 	mov	r21,zero
    d684:	297fffc4 	addi	r5,r5,-1
    d688:	053fffc4 	movi	r20,-1
    d68c:	0081ffc4 	movi	r2,2047
    d690:	003f9806 	br	d4f4 <__alt_data_end+0xff00d4f4>
    d694:	8023883a 	mov	r17,r16
    d698:	a011883a 	mov	r8,r20
    d69c:	e00b883a 	mov	r5,fp
    d6a0:	003f8a06 	br	d4cc <__alt_data_end+0xff00d4cc>
    d6a4:	8023883a 	mov	r17,r16
    d6a8:	a011883a 	mov	r8,r20
    d6ac:	482d883a 	mov	r22,r9
    d6b0:	e00b883a 	mov	r5,fp
    d6b4:	003f8506 	br	d4cc <__alt_data_end+0xff00d4cc>
    d6b8:	a00ad43a 	srli	r5,r20,16
    d6bc:	401ad43a 	srli	r13,r8,16
    d6c0:	a53fffcc 	andi	r20,r20,65535
    d6c4:	423fffcc 	andi	r8,r8,65535
    d6c8:	4519383a 	mul	r12,r8,r20
    d6cc:	4147383a 	mul	r3,r8,r5
    d6d0:	6d09383a 	mul	r4,r13,r20
    d6d4:	600cd43a 	srli	r6,r12,16
    d6d8:	2b5d383a 	mul	r14,r5,r13
    d6dc:	20c9883a 	add	r4,r4,r3
    d6e0:	310d883a 	add	r6,r6,r4
    d6e4:	30c0022e 	bgeu	r6,r3,d6f0 <__muldf3+0x378>
    d6e8:	00c00074 	movhi	r3,1
    d6ec:	70dd883a 	add	r14,r14,r3
    d6f0:	8826d43a 	srli	r19,r17,16
    d6f4:	8bffffcc 	andi	r15,r17,65535
    d6f8:	7d23383a 	mul	r17,r15,r20
    d6fc:	7949383a 	mul	r4,r15,r5
    d700:	9d29383a 	mul	r20,r19,r20
    d704:	8814d43a 	srli	r10,r17,16
    d708:	3012943a 	slli	r9,r6,16
    d70c:	a129883a 	add	r20,r20,r4
    d710:	633fffcc 	andi	r12,r12,65535
    d714:	5515883a 	add	r10,r10,r20
    d718:	3006d43a 	srli	r3,r6,16
    d71c:	4b13883a 	add	r9,r9,r12
    d720:	2ccb383a 	mul	r5,r5,r19
    d724:	5100022e 	bgeu	r10,r4,d730 <__muldf3+0x3b8>
    d728:	01000074 	movhi	r4,1
    d72c:	290b883a 	add	r5,r5,r4
    d730:	802ad43a 	srli	r21,r16,16
    d734:	843fffcc 	andi	r16,r16,65535
    d738:	440d383a 	mul	r6,r8,r16
    d73c:	4565383a 	mul	r18,r8,r21
    d740:	8349383a 	mul	r4,r16,r13
    d744:	500e943a 	slli	r7,r10,16
    d748:	3010d43a 	srli	r8,r6,16
    d74c:	5028d43a 	srli	r20,r10,16
    d750:	2489883a 	add	r4,r4,r18
    d754:	8abfffcc 	andi	r10,r17,65535
    d758:	3a95883a 	add	r10,r7,r10
    d75c:	4119883a 	add	r12,r8,r4
    d760:	a169883a 	add	r20,r20,r5
    d764:	1a87883a 	add	r3,r3,r10
    d768:	6d5b383a 	mul	r13,r13,r21
    d76c:	6480022e 	bgeu	r12,r18,d778 <__muldf3+0x400>
    d770:	01000074 	movhi	r4,1
    d774:	691b883a 	add	r13,r13,r4
    d778:	7c25383a 	mul	r18,r15,r16
    d77c:	7d4b383a 	mul	r5,r15,r21
    d780:	84cf383a 	mul	r7,r16,r19
    d784:	901ed43a 	srli	r15,r18,16
    d788:	6008d43a 	srli	r4,r12,16
    d78c:	6010943a 	slli	r8,r12,16
    d790:	394f883a 	add	r7,r7,r5
    d794:	333fffcc 	andi	r12,r6,65535
    d798:	79df883a 	add	r15,r15,r7
    d79c:	235b883a 	add	r13,r4,r13
    d7a0:	9d63383a 	mul	r17,r19,r21
    d7a4:	4309883a 	add	r4,r8,r12
    d7a8:	7940022e 	bgeu	r15,r5,d7b4 <__muldf3+0x43c>
    d7ac:	01400074 	movhi	r5,1
    d7b0:	8963883a 	add	r17,r17,r5
    d7b4:	780a943a 	slli	r5,r15,16
    d7b8:	91bfffcc 	andi	r6,r18,65535
    d7bc:	70c7883a 	add	r3,r14,r3
    d7c0:	298d883a 	add	r6,r5,r6
    d7c4:	1a8f803a 	cmpltu	r7,r3,r10
    d7c8:	350b883a 	add	r5,r6,r20
    d7cc:	20c7883a 	add	r3,r4,r3
    d7d0:	3955883a 	add	r10,r7,r5
    d7d4:	1909803a 	cmpltu	r4,r3,r4
    d7d8:	6a91883a 	add	r8,r13,r10
    d7dc:	780cd43a 	srli	r6,r15,16
    d7e0:	2219883a 	add	r12,r4,r8
    d7e4:	2d0b803a 	cmpltu	r5,r5,r20
    d7e8:	51cf803a 	cmpltu	r7,r10,r7
    d7ec:	29ceb03a 	or	r7,r5,r7
    d7f0:	4351803a 	cmpltu	r8,r8,r13
    d7f4:	610b803a 	cmpltu	r5,r12,r4
    d7f8:	4148b03a 	or	r4,r8,r5
    d7fc:	398f883a 	add	r7,r7,r6
    d800:	3909883a 	add	r4,r7,r4
    d804:	1810927a 	slli	r8,r3,9
    d808:	2449883a 	add	r4,r4,r17
    d80c:	2008927a 	slli	r4,r4,9
    d810:	6022d5fa 	srli	r17,r12,23
    d814:	1806d5fa 	srli	r3,r3,23
    d818:	4252b03a 	or	r9,r8,r9
    d81c:	600a927a 	slli	r5,r12,9
    d820:	4810c03a 	cmpne	r8,r9,zero
    d824:	2462b03a 	or	r17,r4,r17
    d828:	40c6b03a 	or	r3,r8,r3
    d82c:	8900402c 	andhi	r4,r17,256
    d830:	1950b03a 	or	r8,r3,r5
    d834:	20000726 	beq	r4,zero,d854 <__muldf3+0x4dc>
    d838:	4006d07a 	srli	r3,r8,1
    d83c:	880497fa 	slli	r2,r17,31
    d840:	4200004c 	andi	r8,r8,1
    d844:	8822d07a 	srli	r17,r17,1
    d848:	1a10b03a 	or	r8,r3,r8
    d84c:	1210b03a 	or	r8,r2,r8
    d850:	5805883a 	mov	r2,r11
    d854:	1140ffc4 	addi	r5,r2,1023
    d858:	0140440e 	bge	zero,r5,d96c <__muldf3+0x5f4>
    d85c:	40c001cc 	andi	r3,r8,7
    d860:	18000726 	beq	r3,zero,d880 <__muldf3+0x508>
    d864:	40c003cc 	andi	r3,r8,15
    d868:	01000104 	movi	r4,4
    d86c:	19000426 	beq	r3,r4,d880 <__muldf3+0x508>
    d870:	4107883a 	add	r3,r8,r4
    d874:	1a11803a 	cmpltu	r8,r3,r8
    d878:	8a23883a 	add	r17,r17,r8
    d87c:	1811883a 	mov	r8,r3
    d880:	88c0402c 	andhi	r3,r17,256
    d884:	18000426 	beq	r3,zero,d898 <__muldf3+0x520>
    d888:	11410004 	addi	r5,r2,1024
    d88c:	00bfc034 	movhi	r2,65280
    d890:	10bfffc4 	addi	r2,r2,-1
    d894:	88a2703a 	and	r17,r17,r2
    d898:	0081ff84 	movi	r2,2046
    d89c:	117f6416 	blt	r2,r5,d630 <__alt_data_end+0xff00d630>
    d8a0:	8828977a 	slli	r20,r17,29
    d8a4:	4010d0fa 	srli	r8,r8,3
    d8a8:	8822927a 	slli	r17,r17,9
    d8ac:	2881ffcc 	andi	r2,r5,2047
    d8b0:	a228b03a 	or	r20,r20,r8
    d8b4:	880ad33a 	srli	r5,r17,12
    d8b8:	b02b883a 	mov	r21,r22
    d8bc:	003f0d06 	br	d4f4 <__alt_data_end+0xff00d4f4>
    d8c0:	8080022c 	andhi	r2,r16,8
    d8c4:	10000926 	beq	r2,zero,d8ec <__muldf3+0x574>
    d8c8:	8880022c 	andhi	r2,r17,8
    d8cc:	1000071e 	bne	r2,zero,d8ec <__muldf3+0x574>
    d8d0:	00800434 	movhi	r2,16
    d8d4:	89400234 	orhi	r5,r17,8
    d8d8:	10bfffc4 	addi	r2,r2,-1
    d8dc:	b82b883a 	mov	r21,r23
    d8e0:	288a703a 	and	r5,r5,r2
    d8e4:	4029883a 	mov	r20,r8
    d8e8:	003f6806 	br	d68c <__alt_data_end+0xff00d68c>
    d8ec:	00800434 	movhi	r2,16
    d8f0:	81400234 	orhi	r5,r16,8
    d8f4:	10bfffc4 	addi	r2,r2,-1
    d8f8:	288a703a 	and	r5,r5,r2
    d8fc:	003f6306 	br	d68c <__alt_data_end+0xff00d68c>
    d900:	147ff604 	addi	r17,r2,-40
    d904:	3462983a 	sll	r17,r6,r17
    d908:	0011883a 	mov	r8,zero
    d90c:	003f4406 	br	d620 <__alt_data_end+0xff00d620>
    d910:	3009883a 	mov	r4,r6
    d914:	d9800215 	stw	r6,8(sp)
    d918:	da400115 	stw	r9,4(sp)
    d91c:	da800015 	stw	r10,0(sp)
    d920:	000e5900 	call	e590 <__clzsi2>
    d924:	10800804 	addi	r2,r2,32
    d928:	da800017 	ldw	r10,0(sp)
    d92c:	da400117 	ldw	r9,4(sp)
    d930:	d9800217 	ldw	r6,8(sp)
    d934:	003f3006 	br	d5f8 <__alt_data_end+0xff00d5f8>
    d938:	143ff604 	addi	r16,r2,-40
    d93c:	9c20983a 	sll	r16,r19,r16
    d940:	0029883a 	mov	r20,zero
    d944:	003f1606 	br	d5a0 <__alt_data_end+0xff00d5a0>
    d948:	d9800215 	stw	r6,8(sp)
    d94c:	d9c00015 	stw	r7,0(sp)
    d950:	da400115 	stw	r9,4(sp)
    d954:	000e5900 	call	e590 <__clzsi2>
    d958:	10800804 	addi	r2,r2,32
    d95c:	da400117 	ldw	r9,4(sp)
    d960:	d9c00017 	ldw	r7,0(sp)
    d964:	d9800217 	ldw	r6,8(sp)
    d968:	003f0306 	br	d578 <__alt_data_end+0xff00d578>
    d96c:	00c00044 	movi	r3,1
    d970:	1947c83a 	sub	r3,r3,r5
    d974:	00800e04 	movi	r2,56
    d978:	10feda16 	blt	r2,r3,d4e4 <__alt_data_end+0xff00d4e4>
    d97c:	008007c4 	movi	r2,31
    d980:	10c01b16 	blt	r2,r3,d9f0 <__muldf3+0x678>
    d984:	00800804 	movi	r2,32
    d988:	10c5c83a 	sub	r2,r2,r3
    d98c:	888a983a 	sll	r5,r17,r2
    d990:	40c8d83a 	srl	r4,r8,r3
    d994:	4084983a 	sll	r2,r8,r2
    d998:	88e2d83a 	srl	r17,r17,r3
    d99c:	2906b03a 	or	r3,r5,r4
    d9a0:	1004c03a 	cmpne	r2,r2,zero
    d9a4:	1886b03a 	or	r3,r3,r2
    d9a8:	188001cc 	andi	r2,r3,7
    d9ac:	10000726 	beq	r2,zero,d9cc <__muldf3+0x654>
    d9b0:	188003cc 	andi	r2,r3,15
    d9b4:	01000104 	movi	r4,4
    d9b8:	11000426 	beq	r2,r4,d9cc <__muldf3+0x654>
    d9bc:	1805883a 	mov	r2,r3
    d9c0:	10c00104 	addi	r3,r2,4
    d9c4:	1885803a 	cmpltu	r2,r3,r2
    d9c8:	88a3883a 	add	r17,r17,r2
    d9cc:	8880202c 	andhi	r2,r17,128
    d9d0:	10001c26 	beq	r2,zero,da44 <__muldf3+0x6cc>
    d9d4:	b02b883a 	mov	r21,r22
    d9d8:	00800044 	movi	r2,1
    d9dc:	000b883a 	mov	r5,zero
    d9e0:	0029883a 	mov	r20,zero
    d9e4:	003ec306 	br	d4f4 <__alt_data_end+0xff00d4f4>
    d9e8:	5805883a 	mov	r2,r11
    d9ec:	003f9906 	br	d854 <__alt_data_end+0xff00d854>
    d9f0:	00bff844 	movi	r2,-31
    d9f4:	1145c83a 	sub	r2,r2,r5
    d9f8:	8888d83a 	srl	r4,r17,r2
    d9fc:	00800804 	movi	r2,32
    da00:	18801a26 	beq	r3,r2,da6c <__muldf3+0x6f4>
    da04:	00801004 	movi	r2,64
    da08:	10c5c83a 	sub	r2,r2,r3
    da0c:	8884983a 	sll	r2,r17,r2
    da10:	1204b03a 	or	r2,r2,r8
    da14:	1004c03a 	cmpne	r2,r2,zero
    da18:	2084b03a 	or	r2,r4,r2
    da1c:	144001cc 	andi	r17,r2,7
    da20:	88000d1e 	bne	r17,zero,da58 <__muldf3+0x6e0>
    da24:	000b883a 	mov	r5,zero
    da28:	1028d0fa 	srli	r20,r2,3
    da2c:	b02b883a 	mov	r21,r22
    da30:	0005883a 	mov	r2,zero
    da34:	a468b03a 	or	r20,r20,r17
    da38:	003eae06 	br	d4f4 <__alt_data_end+0xff00d4f4>
    da3c:	1007883a 	mov	r3,r2
    da40:	0023883a 	mov	r17,zero
    da44:	880a927a 	slli	r5,r17,9
    da48:	1805883a 	mov	r2,r3
    da4c:	8822977a 	slli	r17,r17,29
    da50:	280ad33a 	srli	r5,r5,12
    da54:	003ff406 	br	da28 <__alt_data_end+0xff00da28>
    da58:	10c003cc 	andi	r3,r2,15
    da5c:	01000104 	movi	r4,4
    da60:	193ff626 	beq	r3,r4,da3c <__alt_data_end+0xff00da3c>
    da64:	0023883a 	mov	r17,zero
    da68:	003fd506 	br	d9c0 <__alt_data_end+0xff00d9c0>
    da6c:	0005883a 	mov	r2,zero
    da70:	003fe706 	br	da10 <__alt_data_end+0xff00da10>
    da74:	00800434 	movhi	r2,16
    da78:	89400234 	orhi	r5,r17,8
    da7c:	10bfffc4 	addi	r2,r2,-1
    da80:	b02b883a 	mov	r21,r22
    da84:	288a703a 	and	r5,r5,r2
    da88:	4029883a 	mov	r20,r8
    da8c:	003eff06 	br	d68c <__alt_data_end+0xff00d68c>

0000da90 <__subdf3>:
    da90:	02000434 	movhi	r8,16
    da94:	423fffc4 	addi	r8,r8,-1
    da98:	defffb04 	addi	sp,sp,-20
    da9c:	2a14703a 	and	r10,r5,r8
    daa0:	3812d53a 	srli	r9,r7,20
    daa4:	3a10703a 	and	r8,r7,r8
    daa8:	2006d77a 	srli	r3,r4,29
    daac:	3004d77a 	srli	r2,r6,29
    dab0:	dc000015 	stw	r16,0(sp)
    dab4:	501490fa 	slli	r10,r10,3
    dab8:	2820d53a 	srli	r16,r5,20
    dabc:	401090fa 	slli	r8,r8,3
    dac0:	dc800215 	stw	r18,8(sp)
    dac4:	dc400115 	stw	r17,4(sp)
    dac8:	dfc00415 	stw	ra,16(sp)
    dacc:	202290fa 	slli	r17,r4,3
    dad0:	dcc00315 	stw	r19,12(sp)
    dad4:	4a41ffcc 	andi	r9,r9,2047
    dad8:	0101ffc4 	movi	r4,2047
    dadc:	2824d7fa 	srli	r18,r5,31
    dae0:	8401ffcc 	andi	r16,r16,2047
    dae4:	50c6b03a 	or	r3,r10,r3
    dae8:	380ed7fa 	srli	r7,r7,31
    daec:	408ab03a 	or	r5,r8,r2
    daf0:	300c90fa 	slli	r6,r6,3
    daf4:	49009626 	beq	r9,r4,dd50 <__subdf3+0x2c0>
    daf8:	39c0005c 	xori	r7,r7,1
    dafc:	8245c83a 	sub	r2,r16,r9
    db00:	3c807426 	beq	r7,r18,dcd4 <__subdf3+0x244>
    db04:	0080af0e 	bge	zero,r2,ddc4 <__subdf3+0x334>
    db08:	48002a1e 	bne	r9,zero,dbb4 <__subdf3+0x124>
    db0c:	2988b03a 	or	r4,r5,r6
    db10:	20009a1e 	bne	r4,zero,dd7c <__subdf3+0x2ec>
    db14:	888001cc 	andi	r2,r17,7
    db18:	10000726 	beq	r2,zero,db38 <__subdf3+0xa8>
    db1c:	888003cc 	andi	r2,r17,15
    db20:	01000104 	movi	r4,4
    db24:	11000426 	beq	r2,r4,db38 <__subdf3+0xa8>
    db28:	890b883a 	add	r5,r17,r4
    db2c:	2c63803a 	cmpltu	r17,r5,r17
    db30:	1c47883a 	add	r3,r3,r17
    db34:	2823883a 	mov	r17,r5
    db38:	1880202c 	andhi	r2,r3,128
    db3c:	10005926 	beq	r2,zero,dca4 <__subdf3+0x214>
    db40:	84000044 	addi	r16,r16,1
    db44:	0081ffc4 	movi	r2,2047
    db48:	8080be26 	beq	r16,r2,de44 <__subdf3+0x3b4>
    db4c:	017fe034 	movhi	r5,65408
    db50:	297fffc4 	addi	r5,r5,-1
    db54:	1946703a 	and	r3,r3,r5
    db58:	1804977a 	slli	r2,r3,29
    db5c:	1806927a 	slli	r3,r3,9
    db60:	8822d0fa 	srli	r17,r17,3
    db64:	8401ffcc 	andi	r16,r16,2047
    db68:	180ad33a 	srli	r5,r3,12
    db6c:	9100004c 	andi	r4,r18,1
    db70:	1444b03a 	or	r2,r2,r17
    db74:	80c1ffcc 	andi	r3,r16,2047
    db78:	1820953a 	slli	r16,r3,20
    db7c:	20c03fcc 	andi	r3,r4,255
    db80:	180897fa 	slli	r4,r3,31
    db84:	00c00434 	movhi	r3,16
    db88:	18ffffc4 	addi	r3,r3,-1
    db8c:	28c6703a 	and	r3,r5,r3
    db90:	1c06b03a 	or	r3,r3,r16
    db94:	1906b03a 	or	r3,r3,r4
    db98:	dfc00417 	ldw	ra,16(sp)
    db9c:	dcc00317 	ldw	r19,12(sp)
    dba0:	dc800217 	ldw	r18,8(sp)
    dba4:	dc400117 	ldw	r17,4(sp)
    dba8:	dc000017 	ldw	r16,0(sp)
    dbac:	dec00504 	addi	sp,sp,20
    dbb0:	f800283a 	ret
    dbb4:	0101ffc4 	movi	r4,2047
    dbb8:	813fd626 	beq	r16,r4,db14 <__alt_data_end+0xff00db14>
    dbbc:	29402034 	orhi	r5,r5,128
    dbc0:	01000e04 	movi	r4,56
    dbc4:	2080a316 	blt	r4,r2,de54 <__subdf3+0x3c4>
    dbc8:	010007c4 	movi	r4,31
    dbcc:	2080c616 	blt	r4,r2,dee8 <__subdf3+0x458>
    dbd0:	01000804 	movi	r4,32
    dbd4:	2089c83a 	sub	r4,r4,r2
    dbd8:	2910983a 	sll	r8,r5,r4
    dbdc:	308ed83a 	srl	r7,r6,r2
    dbe0:	3108983a 	sll	r4,r6,r4
    dbe4:	2884d83a 	srl	r2,r5,r2
    dbe8:	41ccb03a 	or	r6,r8,r7
    dbec:	2008c03a 	cmpne	r4,r4,zero
    dbf0:	310cb03a 	or	r6,r6,r4
    dbf4:	898dc83a 	sub	r6,r17,r6
    dbf8:	89a3803a 	cmpltu	r17,r17,r6
    dbfc:	1887c83a 	sub	r3,r3,r2
    dc00:	1c47c83a 	sub	r3,r3,r17
    dc04:	3023883a 	mov	r17,r6
    dc08:	1880202c 	andhi	r2,r3,128
    dc0c:	10002326 	beq	r2,zero,dc9c <__subdf3+0x20c>
    dc10:	04c02034 	movhi	r19,128
    dc14:	9cffffc4 	addi	r19,r19,-1
    dc18:	1ce6703a 	and	r19,r3,r19
    dc1c:	98007a26 	beq	r19,zero,de08 <__subdf3+0x378>
    dc20:	9809883a 	mov	r4,r19
    dc24:	000e5900 	call	e590 <__clzsi2>
    dc28:	113ffe04 	addi	r4,r2,-8
    dc2c:	00c007c4 	movi	r3,31
    dc30:	19007b16 	blt	r3,r4,de20 <__subdf3+0x390>
    dc34:	00800804 	movi	r2,32
    dc38:	1105c83a 	sub	r2,r2,r4
    dc3c:	8884d83a 	srl	r2,r17,r2
    dc40:	9906983a 	sll	r3,r19,r4
    dc44:	8922983a 	sll	r17,r17,r4
    dc48:	10c4b03a 	or	r2,r2,r3
    dc4c:	24007816 	blt	r4,r16,de30 <__subdf3+0x3a0>
    dc50:	2421c83a 	sub	r16,r4,r16
    dc54:	80c00044 	addi	r3,r16,1
    dc58:	010007c4 	movi	r4,31
    dc5c:	20c09516 	blt	r4,r3,deb4 <__subdf3+0x424>
    dc60:	01400804 	movi	r5,32
    dc64:	28cbc83a 	sub	r5,r5,r3
    dc68:	88c8d83a 	srl	r4,r17,r3
    dc6c:	8962983a 	sll	r17,r17,r5
    dc70:	114a983a 	sll	r5,r2,r5
    dc74:	10c6d83a 	srl	r3,r2,r3
    dc78:	8804c03a 	cmpne	r2,r17,zero
    dc7c:	290ab03a 	or	r5,r5,r4
    dc80:	28a2b03a 	or	r17,r5,r2
    dc84:	0021883a 	mov	r16,zero
    dc88:	003fa206 	br	db14 <__alt_data_end+0xff00db14>
    dc8c:	2090b03a 	or	r8,r4,r2
    dc90:	40018e26 	beq	r8,zero,e2cc <__subdf3+0x83c>
    dc94:	1007883a 	mov	r3,r2
    dc98:	2023883a 	mov	r17,r4
    dc9c:	888001cc 	andi	r2,r17,7
    dca0:	103f9e1e 	bne	r2,zero,db1c <__alt_data_end+0xff00db1c>
    dca4:	1804977a 	slli	r2,r3,29
    dca8:	8822d0fa 	srli	r17,r17,3
    dcac:	1810d0fa 	srli	r8,r3,3
    dcb0:	9100004c 	andi	r4,r18,1
    dcb4:	1444b03a 	or	r2,r2,r17
    dcb8:	00c1ffc4 	movi	r3,2047
    dcbc:	80c02826 	beq	r16,r3,dd60 <__subdf3+0x2d0>
    dcc0:	01400434 	movhi	r5,16
    dcc4:	297fffc4 	addi	r5,r5,-1
    dcc8:	80e0703a 	and	r16,r16,r3
    dccc:	414a703a 	and	r5,r8,r5
    dcd0:	003fa806 	br	db74 <__alt_data_end+0xff00db74>
    dcd4:	0080630e 	bge	zero,r2,de64 <__subdf3+0x3d4>
    dcd8:	48003026 	beq	r9,zero,dd9c <__subdf3+0x30c>
    dcdc:	0101ffc4 	movi	r4,2047
    dce0:	813f8c26 	beq	r16,r4,db14 <__alt_data_end+0xff00db14>
    dce4:	29402034 	orhi	r5,r5,128
    dce8:	01000e04 	movi	r4,56
    dcec:	2080a90e 	bge	r4,r2,df94 <__subdf3+0x504>
    dcf0:	298cb03a 	or	r6,r5,r6
    dcf4:	3012c03a 	cmpne	r9,r6,zero
    dcf8:	0005883a 	mov	r2,zero
    dcfc:	4c53883a 	add	r9,r9,r17
    dd00:	4c63803a 	cmpltu	r17,r9,r17
    dd04:	10c7883a 	add	r3,r2,r3
    dd08:	88c7883a 	add	r3,r17,r3
    dd0c:	4823883a 	mov	r17,r9
    dd10:	1880202c 	andhi	r2,r3,128
    dd14:	1000d026 	beq	r2,zero,e058 <__subdf3+0x5c8>
    dd18:	84000044 	addi	r16,r16,1
    dd1c:	0081ffc4 	movi	r2,2047
    dd20:	8080fe26 	beq	r16,r2,e11c <__subdf3+0x68c>
    dd24:	00bfe034 	movhi	r2,65408
    dd28:	10bfffc4 	addi	r2,r2,-1
    dd2c:	1886703a 	and	r3,r3,r2
    dd30:	880ad07a 	srli	r5,r17,1
    dd34:	180497fa 	slli	r2,r3,31
    dd38:	8900004c 	andi	r4,r17,1
    dd3c:	2922b03a 	or	r17,r5,r4
    dd40:	1806d07a 	srli	r3,r3,1
    dd44:	1462b03a 	or	r17,r2,r17
    dd48:	3825883a 	mov	r18,r7
    dd4c:	003f7106 	br	db14 <__alt_data_end+0xff00db14>
    dd50:	2984b03a 	or	r2,r5,r6
    dd54:	103f6826 	beq	r2,zero,daf8 <__alt_data_end+0xff00daf8>
    dd58:	39c03fcc 	andi	r7,r7,255
    dd5c:	003f6706 	br	dafc <__alt_data_end+0xff00dafc>
    dd60:	4086b03a 	or	r3,r8,r2
    dd64:	18015226 	beq	r3,zero,e2b0 <__subdf3+0x820>
    dd68:	00c00434 	movhi	r3,16
    dd6c:	41400234 	orhi	r5,r8,8
    dd70:	18ffffc4 	addi	r3,r3,-1
    dd74:	28ca703a 	and	r5,r5,r3
    dd78:	003f7e06 	br	db74 <__alt_data_end+0xff00db74>
    dd7c:	10bfffc4 	addi	r2,r2,-1
    dd80:	1000491e 	bne	r2,zero,dea8 <__subdf3+0x418>
    dd84:	898fc83a 	sub	r7,r17,r6
    dd88:	89e3803a 	cmpltu	r17,r17,r7
    dd8c:	1947c83a 	sub	r3,r3,r5
    dd90:	1c47c83a 	sub	r3,r3,r17
    dd94:	3823883a 	mov	r17,r7
    dd98:	003f9b06 	br	dc08 <__alt_data_end+0xff00dc08>
    dd9c:	2988b03a 	or	r4,r5,r6
    dda0:	203f5c26 	beq	r4,zero,db14 <__alt_data_end+0xff00db14>
    dda4:	10bfffc4 	addi	r2,r2,-1
    dda8:	1000931e 	bne	r2,zero,dff8 <__subdf3+0x568>
    ddac:	898d883a 	add	r6,r17,r6
    ddb0:	3463803a 	cmpltu	r17,r6,r17
    ddb4:	1947883a 	add	r3,r3,r5
    ddb8:	88c7883a 	add	r3,r17,r3
    ddbc:	3023883a 	mov	r17,r6
    ddc0:	003fd306 	br	dd10 <__alt_data_end+0xff00dd10>
    ddc4:	1000541e 	bne	r2,zero,df18 <__subdf3+0x488>
    ddc8:	80800044 	addi	r2,r16,1
    ddcc:	1081ffcc 	andi	r2,r2,2047
    ddd0:	01000044 	movi	r4,1
    ddd4:	2080a20e 	bge	r4,r2,e060 <__subdf3+0x5d0>
    ddd8:	8989c83a 	sub	r4,r17,r6
    dddc:	8905803a 	cmpltu	r2,r17,r4
    dde0:	1967c83a 	sub	r19,r3,r5
    dde4:	98a7c83a 	sub	r19,r19,r2
    dde8:	9880202c 	andhi	r2,r19,128
    ddec:	10006326 	beq	r2,zero,df7c <__subdf3+0x4ec>
    ddf0:	3463c83a 	sub	r17,r6,r17
    ddf4:	28c7c83a 	sub	r3,r5,r3
    ddf8:	344d803a 	cmpltu	r6,r6,r17
    ddfc:	19a7c83a 	sub	r19,r3,r6
    de00:	3825883a 	mov	r18,r7
    de04:	983f861e 	bne	r19,zero,dc20 <__alt_data_end+0xff00dc20>
    de08:	8809883a 	mov	r4,r17
    de0c:	000e5900 	call	e590 <__clzsi2>
    de10:	10800804 	addi	r2,r2,32
    de14:	113ffe04 	addi	r4,r2,-8
    de18:	00c007c4 	movi	r3,31
    de1c:	193f850e 	bge	r3,r4,dc34 <__alt_data_end+0xff00dc34>
    de20:	10bff604 	addi	r2,r2,-40
    de24:	8884983a 	sll	r2,r17,r2
    de28:	0023883a 	mov	r17,zero
    de2c:	243f880e 	bge	r4,r16,dc50 <__alt_data_end+0xff00dc50>
    de30:	00ffe034 	movhi	r3,65408
    de34:	18ffffc4 	addi	r3,r3,-1
    de38:	8121c83a 	sub	r16,r16,r4
    de3c:	10c6703a 	and	r3,r2,r3
    de40:	003f3406 	br	db14 <__alt_data_end+0xff00db14>
    de44:	9100004c 	andi	r4,r18,1
    de48:	000b883a 	mov	r5,zero
    de4c:	0005883a 	mov	r2,zero
    de50:	003f4806 	br	db74 <__alt_data_end+0xff00db74>
    de54:	298cb03a 	or	r6,r5,r6
    de58:	300cc03a 	cmpne	r6,r6,zero
    de5c:	0005883a 	mov	r2,zero
    de60:	003f6406 	br	dbf4 <__alt_data_end+0xff00dbf4>
    de64:	10009a1e 	bne	r2,zero,e0d0 <__subdf3+0x640>
    de68:	82400044 	addi	r9,r16,1
    de6c:	4881ffcc 	andi	r2,r9,2047
    de70:	02800044 	movi	r10,1
    de74:	5080670e 	bge	r10,r2,e014 <__subdf3+0x584>
    de78:	0081ffc4 	movi	r2,2047
    de7c:	4880af26 	beq	r9,r2,e13c <__subdf3+0x6ac>
    de80:	898d883a 	add	r6,r17,r6
    de84:	1945883a 	add	r2,r3,r5
    de88:	3447803a 	cmpltu	r3,r6,r17
    de8c:	1887883a 	add	r3,r3,r2
    de90:	182297fa 	slli	r17,r3,31
    de94:	300cd07a 	srli	r6,r6,1
    de98:	1806d07a 	srli	r3,r3,1
    de9c:	4821883a 	mov	r16,r9
    dea0:	89a2b03a 	or	r17,r17,r6
    dea4:	003f1b06 	br	db14 <__alt_data_end+0xff00db14>
    dea8:	0101ffc4 	movi	r4,2047
    deac:	813f441e 	bne	r16,r4,dbc0 <__alt_data_end+0xff00dbc0>
    deb0:	003f1806 	br	db14 <__alt_data_end+0xff00db14>
    deb4:	843ff844 	addi	r16,r16,-31
    deb8:	01400804 	movi	r5,32
    debc:	1408d83a 	srl	r4,r2,r16
    dec0:	19405026 	beq	r3,r5,e004 <__subdf3+0x574>
    dec4:	01401004 	movi	r5,64
    dec8:	28c7c83a 	sub	r3,r5,r3
    decc:	10c4983a 	sll	r2,r2,r3
    ded0:	88a2b03a 	or	r17,r17,r2
    ded4:	8822c03a 	cmpne	r17,r17,zero
    ded8:	2462b03a 	or	r17,r4,r17
    dedc:	0007883a 	mov	r3,zero
    dee0:	0021883a 	mov	r16,zero
    dee4:	003f6d06 	br	dc9c <__alt_data_end+0xff00dc9c>
    dee8:	11fff804 	addi	r7,r2,-32
    deec:	01000804 	movi	r4,32
    def0:	29ced83a 	srl	r7,r5,r7
    def4:	11004526 	beq	r2,r4,e00c <__subdf3+0x57c>
    def8:	01001004 	movi	r4,64
    defc:	2089c83a 	sub	r4,r4,r2
    df00:	2904983a 	sll	r2,r5,r4
    df04:	118cb03a 	or	r6,r2,r6
    df08:	300cc03a 	cmpne	r6,r6,zero
    df0c:	398cb03a 	or	r6,r7,r6
    df10:	0005883a 	mov	r2,zero
    df14:	003f3706 	br	dbf4 <__alt_data_end+0xff00dbf4>
    df18:	80002a26 	beq	r16,zero,dfc4 <__subdf3+0x534>
    df1c:	0101ffc4 	movi	r4,2047
    df20:	49006626 	beq	r9,r4,e0bc <__subdf3+0x62c>
    df24:	0085c83a 	sub	r2,zero,r2
    df28:	18c02034 	orhi	r3,r3,128
    df2c:	01000e04 	movi	r4,56
    df30:	20807e16 	blt	r4,r2,e12c <__subdf3+0x69c>
    df34:	010007c4 	movi	r4,31
    df38:	2080e716 	blt	r4,r2,e2d8 <__subdf3+0x848>
    df3c:	01000804 	movi	r4,32
    df40:	2089c83a 	sub	r4,r4,r2
    df44:	1914983a 	sll	r10,r3,r4
    df48:	8890d83a 	srl	r8,r17,r2
    df4c:	8908983a 	sll	r4,r17,r4
    df50:	1884d83a 	srl	r2,r3,r2
    df54:	5222b03a 	or	r17,r10,r8
    df58:	2006c03a 	cmpne	r3,r4,zero
    df5c:	88e2b03a 	or	r17,r17,r3
    df60:	3463c83a 	sub	r17,r6,r17
    df64:	2885c83a 	sub	r2,r5,r2
    df68:	344d803a 	cmpltu	r6,r6,r17
    df6c:	1187c83a 	sub	r3,r2,r6
    df70:	4821883a 	mov	r16,r9
    df74:	3825883a 	mov	r18,r7
    df78:	003f2306 	br	dc08 <__alt_data_end+0xff00dc08>
    df7c:	24d0b03a 	or	r8,r4,r19
    df80:	40001b1e 	bne	r8,zero,dff0 <__subdf3+0x560>
    df84:	0005883a 	mov	r2,zero
    df88:	0009883a 	mov	r4,zero
    df8c:	0021883a 	mov	r16,zero
    df90:	003f4906 	br	dcb8 <__alt_data_end+0xff00dcb8>
    df94:	010007c4 	movi	r4,31
    df98:	20803a16 	blt	r4,r2,e084 <__subdf3+0x5f4>
    df9c:	01000804 	movi	r4,32
    dfa0:	2089c83a 	sub	r4,r4,r2
    dfa4:	2912983a 	sll	r9,r5,r4
    dfa8:	3090d83a 	srl	r8,r6,r2
    dfac:	3108983a 	sll	r4,r6,r4
    dfb0:	2884d83a 	srl	r2,r5,r2
    dfb4:	4a12b03a 	or	r9,r9,r8
    dfb8:	2008c03a 	cmpne	r4,r4,zero
    dfbc:	4912b03a 	or	r9,r9,r4
    dfc0:	003f4e06 	br	dcfc <__alt_data_end+0xff00dcfc>
    dfc4:	1c48b03a 	or	r4,r3,r17
    dfc8:	20003c26 	beq	r4,zero,e0bc <__subdf3+0x62c>
    dfcc:	0084303a 	nor	r2,zero,r2
    dfd0:	1000381e 	bne	r2,zero,e0b4 <__subdf3+0x624>
    dfd4:	3463c83a 	sub	r17,r6,r17
    dfd8:	28c5c83a 	sub	r2,r5,r3
    dfdc:	344d803a 	cmpltu	r6,r6,r17
    dfe0:	1187c83a 	sub	r3,r2,r6
    dfe4:	4821883a 	mov	r16,r9
    dfe8:	3825883a 	mov	r18,r7
    dfec:	003f0606 	br	dc08 <__alt_data_end+0xff00dc08>
    dff0:	2023883a 	mov	r17,r4
    dff4:	003f0906 	br	dc1c <__alt_data_end+0xff00dc1c>
    dff8:	0101ffc4 	movi	r4,2047
    dffc:	813f3a1e 	bne	r16,r4,dce8 <__alt_data_end+0xff00dce8>
    e000:	003ec406 	br	db14 <__alt_data_end+0xff00db14>
    e004:	0005883a 	mov	r2,zero
    e008:	003fb106 	br	ded0 <__alt_data_end+0xff00ded0>
    e00c:	0005883a 	mov	r2,zero
    e010:	003fbc06 	br	df04 <__alt_data_end+0xff00df04>
    e014:	1c44b03a 	or	r2,r3,r17
    e018:	80008e1e 	bne	r16,zero,e254 <__subdf3+0x7c4>
    e01c:	1000c826 	beq	r2,zero,e340 <__subdf3+0x8b0>
    e020:	2984b03a 	or	r2,r5,r6
    e024:	103ebb26 	beq	r2,zero,db14 <__alt_data_end+0xff00db14>
    e028:	8989883a 	add	r4,r17,r6
    e02c:	1945883a 	add	r2,r3,r5
    e030:	2447803a 	cmpltu	r3,r4,r17
    e034:	1887883a 	add	r3,r3,r2
    e038:	1880202c 	andhi	r2,r3,128
    e03c:	2023883a 	mov	r17,r4
    e040:	103f1626 	beq	r2,zero,dc9c <__alt_data_end+0xff00dc9c>
    e044:	00bfe034 	movhi	r2,65408
    e048:	10bfffc4 	addi	r2,r2,-1
    e04c:	5021883a 	mov	r16,r10
    e050:	1886703a 	and	r3,r3,r2
    e054:	003eaf06 	br	db14 <__alt_data_end+0xff00db14>
    e058:	3825883a 	mov	r18,r7
    e05c:	003f0f06 	br	dc9c <__alt_data_end+0xff00dc9c>
    e060:	1c44b03a 	or	r2,r3,r17
    e064:	8000251e 	bne	r16,zero,e0fc <__subdf3+0x66c>
    e068:	1000661e 	bne	r2,zero,e204 <__subdf3+0x774>
    e06c:	2990b03a 	or	r8,r5,r6
    e070:	40009626 	beq	r8,zero,e2cc <__subdf3+0x83c>
    e074:	2807883a 	mov	r3,r5
    e078:	3023883a 	mov	r17,r6
    e07c:	3825883a 	mov	r18,r7
    e080:	003ea406 	br	db14 <__alt_data_end+0xff00db14>
    e084:	127ff804 	addi	r9,r2,-32
    e088:	01000804 	movi	r4,32
    e08c:	2a52d83a 	srl	r9,r5,r9
    e090:	11008c26 	beq	r2,r4,e2c4 <__subdf3+0x834>
    e094:	01001004 	movi	r4,64
    e098:	2085c83a 	sub	r2,r4,r2
    e09c:	2884983a 	sll	r2,r5,r2
    e0a0:	118cb03a 	or	r6,r2,r6
    e0a4:	300cc03a 	cmpne	r6,r6,zero
    e0a8:	4992b03a 	or	r9,r9,r6
    e0ac:	0005883a 	mov	r2,zero
    e0b0:	003f1206 	br	dcfc <__alt_data_end+0xff00dcfc>
    e0b4:	0101ffc4 	movi	r4,2047
    e0b8:	493f9c1e 	bne	r9,r4,df2c <__alt_data_end+0xff00df2c>
    e0bc:	2807883a 	mov	r3,r5
    e0c0:	3023883a 	mov	r17,r6
    e0c4:	4821883a 	mov	r16,r9
    e0c8:	3825883a 	mov	r18,r7
    e0cc:	003e9106 	br	db14 <__alt_data_end+0xff00db14>
    e0d0:	80001f1e 	bne	r16,zero,e150 <__subdf3+0x6c0>
    e0d4:	1c48b03a 	or	r4,r3,r17
    e0d8:	20005a26 	beq	r4,zero,e244 <__subdf3+0x7b4>
    e0dc:	0084303a 	nor	r2,zero,r2
    e0e0:	1000561e 	bne	r2,zero,e23c <__subdf3+0x7ac>
    e0e4:	89a3883a 	add	r17,r17,r6
    e0e8:	1945883a 	add	r2,r3,r5
    e0ec:	898d803a 	cmpltu	r6,r17,r6
    e0f0:	3087883a 	add	r3,r6,r2
    e0f4:	4821883a 	mov	r16,r9
    e0f8:	003f0506 	br	dd10 <__alt_data_end+0xff00dd10>
    e0fc:	10002b1e 	bne	r2,zero,e1ac <__subdf3+0x71c>
    e100:	2984b03a 	or	r2,r5,r6
    e104:	10008026 	beq	r2,zero,e308 <__subdf3+0x878>
    e108:	2807883a 	mov	r3,r5
    e10c:	3023883a 	mov	r17,r6
    e110:	3825883a 	mov	r18,r7
    e114:	0401ffc4 	movi	r16,2047
    e118:	003e7e06 	br	db14 <__alt_data_end+0xff00db14>
    e11c:	3809883a 	mov	r4,r7
    e120:	0011883a 	mov	r8,zero
    e124:	0005883a 	mov	r2,zero
    e128:	003ee306 	br	dcb8 <__alt_data_end+0xff00dcb8>
    e12c:	1c62b03a 	or	r17,r3,r17
    e130:	8822c03a 	cmpne	r17,r17,zero
    e134:	0005883a 	mov	r2,zero
    e138:	003f8906 	br	df60 <__alt_data_end+0xff00df60>
    e13c:	3809883a 	mov	r4,r7
    e140:	4821883a 	mov	r16,r9
    e144:	0011883a 	mov	r8,zero
    e148:	0005883a 	mov	r2,zero
    e14c:	003eda06 	br	dcb8 <__alt_data_end+0xff00dcb8>
    e150:	0101ffc4 	movi	r4,2047
    e154:	49003b26 	beq	r9,r4,e244 <__subdf3+0x7b4>
    e158:	0085c83a 	sub	r2,zero,r2
    e15c:	18c02034 	orhi	r3,r3,128
    e160:	01000e04 	movi	r4,56
    e164:	20806e16 	blt	r4,r2,e320 <__subdf3+0x890>
    e168:	010007c4 	movi	r4,31
    e16c:	20807716 	blt	r4,r2,e34c <__subdf3+0x8bc>
    e170:	01000804 	movi	r4,32
    e174:	2089c83a 	sub	r4,r4,r2
    e178:	1914983a 	sll	r10,r3,r4
    e17c:	8890d83a 	srl	r8,r17,r2
    e180:	8908983a 	sll	r4,r17,r4
    e184:	1884d83a 	srl	r2,r3,r2
    e188:	5222b03a 	or	r17,r10,r8
    e18c:	2006c03a 	cmpne	r3,r4,zero
    e190:	88e2b03a 	or	r17,r17,r3
    e194:	89a3883a 	add	r17,r17,r6
    e198:	1145883a 	add	r2,r2,r5
    e19c:	898d803a 	cmpltu	r6,r17,r6
    e1a0:	3087883a 	add	r3,r6,r2
    e1a4:	4821883a 	mov	r16,r9
    e1a8:	003ed906 	br	dd10 <__alt_data_end+0xff00dd10>
    e1ac:	2984b03a 	or	r2,r5,r6
    e1b0:	10004226 	beq	r2,zero,e2bc <__subdf3+0x82c>
    e1b4:	1808d0fa 	srli	r4,r3,3
    e1b8:	8822d0fa 	srli	r17,r17,3
    e1bc:	1806977a 	slli	r3,r3,29
    e1c0:	2080022c 	andhi	r2,r4,8
    e1c4:	1c62b03a 	or	r17,r3,r17
    e1c8:	10000826 	beq	r2,zero,e1ec <__subdf3+0x75c>
    e1cc:	2812d0fa 	srli	r9,r5,3
    e1d0:	4880022c 	andhi	r2,r9,8
    e1d4:	1000051e 	bne	r2,zero,e1ec <__subdf3+0x75c>
    e1d8:	300cd0fa 	srli	r6,r6,3
    e1dc:	2804977a 	slli	r2,r5,29
    e1e0:	4809883a 	mov	r4,r9
    e1e4:	3825883a 	mov	r18,r7
    e1e8:	11a2b03a 	or	r17,r2,r6
    e1ec:	8806d77a 	srli	r3,r17,29
    e1f0:	200890fa 	slli	r4,r4,3
    e1f4:	882290fa 	slli	r17,r17,3
    e1f8:	0401ffc4 	movi	r16,2047
    e1fc:	1906b03a 	or	r3,r3,r4
    e200:	003e4406 	br	db14 <__alt_data_end+0xff00db14>
    e204:	2984b03a 	or	r2,r5,r6
    e208:	103e4226 	beq	r2,zero,db14 <__alt_data_end+0xff00db14>
    e20c:	8989c83a 	sub	r4,r17,r6
    e210:	8911803a 	cmpltu	r8,r17,r4
    e214:	1945c83a 	sub	r2,r3,r5
    e218:	1205c83a 	sub	r2,r2,r8
    e21c:	1200202c 	andhi	r8,r2,128
    e220:	403e9a26 	beq	r8,zero,dc8c <__alt_data_end+0xff00dc8c>
    e224:	3463c83a 	sub	r17,r6,r17
    e228:	28c5c83a 	sub	r2,r5,r3
    e22c:	344d803a 	cmpltu	r6,r6,r17
    e230:	1187c83a 	sub	r3,r2,r6
    e234:	3825883a 	mov	r18,r7
    e238:	003e3606 	br	db14 <__alt_data_end+0xff00db14>
    e23c:	0101ffc4 	movi	r4,2047
    e240:	493fc71e 	bne	r9,r4,e160 <__alt_data_end+0xff00e160>
    e244:	2807883a 	mov	r3,r5
    e248:	3023883a 	mov	r17,r6
    e24c:	4821883a 	mov	r16,r9
    e250:	003e3006 	br	db14 <__alt_data_end+0xff00db14>
    e254:	10003626 	beq	r2,zero,e330 <__subdf3+0x8a0>
    e258:	2984b03a 	or	r2,r5,r6
    e25c:	10001726 	beq	r2,zero,e2bc <__subdf3+0x82c>
    e260:	1808d0fa 	srli	r4,r3,3
    e264:	8822d0fa 	srli	r17,r17,3
    e268:	1806977a 	slli	r3,r3,29
    e26c:	2080022c 	andhi	r2,r4,8
    e270:	1c62b03a 	or	r17,r3,r17
    e274:	10000726 	beq	r2,zero,e294 <__subdf3+0x804>
    e278:	2812d0fa 	srli	r9,r5,3
    e27c:	4880022c 	andhi	r2,r9,8
    e280:	1000041e 	bne	r2,zero,e294 <__subdf3+0x804>
    e284:	300cd0fa 	srli	r6,r6,3
    e288:	2804977a 	slli	r2,r5,29
    e28c:	4809883a 	mov	r4,r9
    e290:	11a2b03a 	or	r17,r2,r6
    e294:	8806d77a 	srli	r3,r17,29
    e298:	200890fa 	slli	r4,r4,3
    e29c:	882290fa 	slli	r17,r17,3
    e2a0:	3825883a 	mov	r18,r7
    e2a4:	1906b03a 	or	r3,r3,r4
    e2a8:	0401ffc4 	movi	r16,2047
    e2ac:	003e1906 	br	db14 <__alt_data_end+0xff00db14>
    e2b0:	000b883a 	mov	r5,zero
    e2b4:	0005883a 	mov	r2,zero
    e2b8:	003e2e06 	br	db74 <__alt_data_end+0xff00db74>
    e2bc:	0401ffc4 	movi	r16,2047
    e2c0:	003e1406 	br	db14 <__alt_data_end+0xff00db14>
    e2c4:	0005883a 	mov	r2,zero
    e2c8:	003f7506 	br	e0a0 <__alt_data_end+0xff00e0a0>
    e2cc:	0005883a 	mov	r2,zero
    e2d0:	0009883a 	mov	r4,zero
    e2d4:	003e7806 	br	dcb8 <__alt_data_end+0xff00dcb8>
    e2d8:	123ff804 	addi	r8,r2,-32
    e2dc:	01000804 	movi	r4,32
    e2e0:	1a10d83a 	srl	r8,r3,r8
    e2e4:	11002526 	beq	r2,r4,e37c <__subdf3+0x8ec>
    e2e8:	01001004 	movi	r4,64
    e2ec:	2085c83a 	sub	r2,r4,r2
    e2f0:	1884983a 	sll	r2,r3,r2
    e2f4:	1444b03a 	or	r2,r2,r17
    e2f8:	1004c03a 	cmpne	r2,r2,zero
    e2fc:	40a2b03a 	or	r17,r8,r2
    e300:	0005883a 	mov	r2,zero
    e304:	003f1606 	br	df60 <__alt_data_end+0xff00df60>
    e308:	02000434 	movhi	r8,16
    e30c:	0009883a 	mov	r4,zero
    e310:	423fffc4 	addi	r8,r8,-1
    e314:	00bfffc4 	movi	r2,-1
    e318:	0401ffc4 	movi	r16,2047
    e31c:	003e6606 	br	dcb8 <__alt_data_end+0xff00dcb8>
    e320:	1c62b03a 	or	r17,r3,r17
    e324:	8822c03a 	cmpne	r17,r17,zero
    e328:	0005883a 	mov	r2,zero
    e32c:	003f9906 	br	e194 <__alt_data_end+0xff00e194>
    e330:	2807883a 	mov	r3,r5
    e334:	3023883a 	mov	r17,r6
    e338:	0401ffc4 	movi	r16,2047
    e33c:	003df506 	br	db14 <__alt_data_end+0xff00db14>
    e340:	2807883a 	mov	r3,r5
    e344:	3023883a 	mov	r17,r6
    e348:	003df206 	br	db14 <__alt_data_end+0xff00db14>
    e34c:	123ff804 	addi	r8,r2,-32
    e350:	01000804 	movi	r4,32
    e354:	1a10d83a 	srl	r8,r3,r8
    e358:	11000a26 	beq	r2,r4,e384 <__subdf3+0x8f4>
    e35c:	01001004 	movi	r4,64
    e360:	2085c83a 	sub	r2,r4,r2
    e364:	1884983a 	sll	r2,r3,r2
    e368:	1444b03a 	or	r2,r2,r17
    e36c:	1004c03a 	cmpne	r2,r2,zero
    e370:	40a2b03a 	or	r17,r8,r2
    e374:	0005883a 	mov	r2,zero
    e378:	003f8606 	br	e194 <__alt_data_end+0xff00e194>
    e37c:	0005883a 	mov	r2,zero
    e380:	003fdc06 	br	e2f4 <__alt_data_end+0xff00e2f4>
    e384:	0005883a 	mov	r2,zero
    e388:	003ff706 	br	e368 <__alt_data_end+0xff00e368>

0000e38c <__fixdfsi>:
    e38c:	280cd53a 	srli	r6,r5,20
    e390:	00c00434 	movhi	r3,16
    e394:	18ffffc4 	addi	r3,r3,-1
    e398:	3181ffcc 	andi	r6,r6,2047
    e39c:	01c0ff84 	movi	r7,1022
    e3a0:	28c6703a 	and	r3,r5,r3
    e3a4:	280ad7fa 	srli	r5,r5,31
    e3a8:	3980120e 	bge	r7,r6,e3f4 <__fixdfsi+0x68>
    e3ac:	00810744 	movi	r2,1053
    e3b0:	11800c16 	blt	r2,r6,e3e4 <__fixdfsi+0x58>
    e3b4:	00810cc4 	movi	r2,1075
    e3b8:	1185c83a 	sub	r2,r2,r6
    e3bc:	01c007c4 	movi	r7,31
    e3c0:	18c00434 	orhi	r3,r3,16
    e3c4:	38800d16 	blt	r7,r2,e3fc <__fixdfsi+0x70>
    e3c8:	31befb44 	addi	r6,r6,-1043
    e3cc:	2084d83a 	srl	r2,r4,r2
    e3d0:	1986983a 	sll	r3,r3,r6
    e3d4:	1884b03a 	or	r2,r3,r2
    e3d8:	28000726 	beq	r5,zero,e3f8 <__fixdfsi+0x6c>
    e3dc:	0085c83a 	sub	r2,zero,r2
    e3e0:	f800283a 	ret
    e3e4:	00a00034 	movhi	r2,32768
    e3e8:	10bfffc4 	addi	r2,r2,-1
    e3ec:	2885883a 	add	r2,r5,r2
    e3f0:	f800283a 	ret
    e3f4:	0005883a 	mov	r2,zero
    e3f8:	f800283a 	ret
    e3fc:	008104c4 	movi	r2,1043
    e400:	1185c83a 	sub	r2,r2,r6
    e404:	1884d83a 	srl	r2,r3,r2
    e408:	003ff306 	br	e3d8 <__alt_data_end+0xff00e3d8>

0000e40c <__floatsidf>:
    e40c:	defffd04 	addi	sp,sp,-12
    e410:	dfc00215 	stw	ra,8(sp)
    e414:	dc400115 	stw	r17,4(sp)
    e418:	dc000015 	stw	r16,0(sp)
    e41c:	20002b26 	beq	r4,zero,e4cc <__floatsidf+0xc0>
    e420:	2023883a 	mov	r17,r4
    e424:	2020d7fa 	srli	r16,r4,31
    e428:	20002d16 	blt	r4,zero,e4e0 <__floatsidf+0xd4>
    e42c:	8809883a 	mov	r4,r17
    e430:	000e5900 	call	e590 <__clzsi2>
    e434:	01410784 	movi	r5,1054
    e438:	288bc83a 	sub	r5,r5,r2
    e43c:	01010cc4 	movi	r4,1075
    e440:	2149c83a 	sub	r4,r4,r5
    e444:	00c007c4 	movi	r3,31
    e448:	1900160e 	bge	r3,r4,e4a4 <__floatsidf+0x98>
    e44c:	00c104c4 	movi	r3,1043
    e450:	1947c83a 	sub	r3,r3,r5
    e454:	88c6983a 	sll	r3,r17,r3
    e458:	00800434 	movhi	r2,16
    e45c:	10bfffc4 	addi	r2,r2,-1
    e460:	1886703a 	and	r3,r3,r2
    e464:	2941ffcc 	andi	r5,r5,2047
    e468:	800d883a 	mov	r6,r16
    e46c:	0005883a 	mov	r2,zero
    e470:	280a953a 	slli	r5,r5,20
    e474:	31803fcc 	andi	r6,r6,255
    e478:	01000434 	movhi	r4,16
    e47c:	300c97fa 	slli	r6,r6,31
    e480:	213fffc4 	addi	r4,r4,-1
    e484:	1906703a 	and	r3,r3,r4
    e488:	1946b03a 	or	r3,r3,r5
    e48c:	1986b03a 	or	r3,r3,r6
    e490:	dfc00217 	ldw	ra,8(sp)
    e494:	dc400117 	ldw	r17,4(sp)
    e498:	dc000017 	ldw	r16,0(sp)
    e49c:	dec00304 	addi	sp,sp,12
    e4a0:	f800283a 	ret
    e4a4:	00c002c4 	movi	r3,11
    e4a8:	1887c83a 	sub	r3,r3,r2
    e4ac:	88c6d83a 	srl	r3,r17,r3
    e4b0:	8904983a 	sll	r2,r17,r4
    e4b4:	01000434 	movhi	r4,16
    e4b8:	213fffc4 	addi	r4,r4,-1
    e4bc:	2941ffcc 	andi	r5,r5,2047
    e4c0:	1906703a 	and	r3,r3,r4
    e4c4:	800d883a 	mov	r6,r16
    e4c8:	003fe906 	br	e470 <__alt_data_end+0xff00e470>
    e4cc:	000d883a 	mov	r6,zero
    e4d0:	000b883a 	mov	r5,zero
    e4d4:	0007883a 	mov	r3,zero
    e4d8:	0005883a 	mov	r2,zero
    e4dc:	003fe406 	br	e470 <__alt_data_end+0xff00e470>
    e4e0:	0123c83a 	sub	r17,zero,r4
    e4e4:	003fd106 	br	e42c <__alt_data_end+0xff00e42c>

0000e4e8 <__floatunsidf>:
    e4e8:	defffe04 	addi	sp,sp,-8
    e4ec:	dc000015 	stw	r16,0(sp)
    e4f0:	dfc00115 	stw	ra,4(sp)
    e4f4:	2021883a 	mov	r16,r4
    e4f8:	20002226 	beq	r4,zero,e584 <__floatunsidf+0x9c>
    e4fc:	000e5900 	call	e590 <__clzsi2>
    e500:	01010784 	movi	r4,1054
    e504:	2089c83a 	sub	r4,r4,r2
    e508:	01810cc4 	movi	r6,1075
    e50c:	310dc83a 	sub	r6,r6,r4
    e510:	00c007c4 	movi	r3,31
    e514:	1980120e 	bge	r3,r6,e560 <__floatunsidf+0x78>
    e518:	00c104c4 	movi	r3,1043
    e51c:	1907c83a 	sub	r3,r3,r4
    e520:	80ca983a 	sll	r5,r16,r3
    e524:	00800434 	movhi	r2,16
    e528:	10bfffc4 	addi	r2,r2,-1
    e52c:	2101ffcc 	andi	r4,r4,2047
    e530:	0021883a 	mov	r16,zero
    e534:	288a703a 	and	r5,r5,r2
    e538:	2008953a 	slli	r4,r4,20
    e53c:	00c00434 	movhi	r3,16
    e540:	18ffffc4 	addi	r3,r3,-1
    e544:	28c6703a 	and	r3,r5,r3
    e548:	8005883a 	mov	r2,r16
    e54c:	1906b03a 	or	r3,r3,r4
    e550:	dfc00117 	ldw	ra,4(sp)
    e554:	dc000017 	ldw	r16,0(sp)
    e558:	dec00204 	addi	sp,sp,8
    e55c:	f800283a 	ret
    e560:	00c002c4 	movi	r3,11
    e564:	188bc83a 	sub	r5,r3,r2
    e568:	814ad83a 	srl	r5,r16,r5
    e56c:	00c00434 	movhi	r3,16
    e570:	18ffffc4 	addi	r3,r3,-1
    e574:	81a0983a 	sll	r16,r16,r6
    e578:	2101ffcc 	andi	r4,r4,2047
    e57c:	28ca703a 	and	r5,r5,r3
    e580:	003fed06 	br	e538 <__alt_data_end+0xff00e538>
    e584:	0009883a 	mov	r4,zero
    e588:	000b883a 	mov	r5,zero
    e58c:	003fea06 	br	e538 <__alt_data_end+0xff00e538>

0000e590 <__clzsi2>:
    e590:	00bfffd4 	movui	r2,65535
    e594:	11000536 	bltu	r2,r4,e5ac <__clzsi2+0x1c>
    e598:	00803fc4 	movi	r2,255
    e59c:	11000f36 	bltu	r2,r4,e5dc <__clzsi2+0x4c>
    e5a0:	00800804 	movi	r2,32
    e5a4:	0007883a 	mov	r3,zero
    e5a8:	00000506 	br	e5c0 <__clzsi2+0x30>
    e5ac:	00804034 	movhi	r2,256
    e5b0:	10bfffc4 	addi	r2,r2,-1
    e5b4:	11000c2e 	bgeu	r2,r4,e5e8 <__clzsi2+0x58>
    e5b8:	00800204 	movi	r2,8
    e5bc:	00c00604 	movi	r3,24
    e5c0:	20c8d83a 	srl	r4,r4,r3
    e5c4:	00c00074 	movhi	r3,1
    e5c8:	18c5b404 	addi	r3,r3,5840
    e5cc:	1909883a 	add	r4,r3,r4
    e5d0:	20c00003 	ldbu	r3,0(r4)
    e5d4:	10c5c83a 	sub	r2,r2,r3
    e5d8:	f800283a 	ret
    e5dc:	00800604 	movi	r2,24
    e5e0:	00c00204 	movi	r3,8
    e5e4:	003ff606 	br	e5c0 <__alt_data_end+0xff00e5c0>
    e5e8:	00800404 	movi	r2,16
    e5ec:	1007883a 	mov	r3,r2
    e5f0:	003ff306 	br	e5c0 <__alt_data_end+0xff00e5c0>

0000e5f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e5f4:	defffe04 	addi	sp,sp,-8
    e5f8:	dfc00115 	stw	ra,4(sp)
    e5fc:	df000015 	stw	fp,0(sp)
    e600:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e604:	d0a00b17 	ldw	r2,-32724(gp)
    e608:	10000326 	beq	r2,zero,e618 <alt_get_errno+0x24>
    e60c:	d0a00b17 	ldw	r2,-32724(gp)
    e610:	103ee83a 	callr	r2
    e614:	00000106 	br	e61c <alt_get_errno+0x28>
    e618:	d0a6d804 	addi	r2,gp,-25760
}
    e61c:	e037883a 	mov	sp,fp
    e620:	dfc00117 	ldw	ra,4(sp)
    e624:	df000017 	ldw	fp,0(sp)
    e628:	dec00204 	addi	sp,sp,8
    e62c:	f800283a 	ret

0000e630 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e630:	defffb04 	addi	sp,sp,-20
    e634:	dfc00415 	stw	ra,16(sp)
    e638:	df000315 	stw	fp,12(sp)
    e63c:	df000304 	addi	fp,sp,12
    e640:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e644:	e0bfff17 	ldw	r2,-4(fp)
    e648:	10000616 	blt	r2,zero,e664 <close+0x34>
    e64c:	e0bfff17 	ldw	r2,-4(fp)
    e650:	10c00324 	muli	r3,r2,12
    e654:	00800074 	movhi	r2,1
    e658:	10883204 	addi	r2,r2,8392
    e65c:	1885883a 	add	r2,r3,r2
    e660:	00000106 	br	e668 <close+0x38>
    e664:	0005883a 	mov	r2,zero
    e668:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e66c:	e0bffd17 	ldw	r2,-12(fp)
    e670:	10001926 	beq	r2,zero,e6d8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e674:	e0bffd17 	ldw	r2,-12(fp)
    e678:	10800017 	ldw	r2,0(r2)
    e67c:	10800417 	ldw	r2,16(r2)
    e680:	10000626 	beq	r2,zero,e69c <close+0x6c>
    e684:	e0bffd17 	ldw	r2,-12(fp)
    e688:	10800017 	ldw	r2,0(r2)
    e68c:	10800417 	ldw	r2,16(r2)
    e690:	e13ffd17 	ldw	r4,-12(fp)
    e694:	103ee83a 	callr	r2
    e698:	00000106 	br	e6a0 <close+0x70>
    e69c:	0005883a 	mov	r2,zero
    e6a0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e6a4:	e13fff17 	ldw	r4,-4(fp)
    e6a8:	000ecf00 	call	ecf0 <alt_release_fd>
    if (rval < 0)
    e6ac:	e0bffe17 	ldw	r2,-8(fp)
    e6b0:	1000070e 	bge	r2,zero,e6d0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e6b4:	000e5f40 	call	e5f4 <alt_get_errno>
    e6b8:	1007883a 	mov	r3,r2
    e6bc:	e0bffe17 	ldw	r2,-8(fp)
    e6c0:	0085c83a 	sub	r2,zero,r2
    e6c4:	18800015 	stw	r2,0(r3)
      return -1;
    e6c8:	00bfffc4 	movi	r2,-1
    e6cc:	00000706 	br	e6ec <close+0xbc>
    }
    return 0;
    e6d0:	0005883a 	mov	r2,zero
    e6d4:	00000506 	br	e6ec <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e6d8:	000e5f40 	call	e5f4 <alt_get_errno>
    e6dc:	1007883a 	mov	r3,r2
    e6e0:	00801444 	movi	r2,81
    e6e4:	18800015 	stw	r2,0(r3)
    return -1;
    e6e8:	00bfffc4 	movi	r2,-1
  }
}
    e6ec:	e037883a 	mov	sp,fp
    e6f0:	dfc00117 	ldw	ra,4(sp)
    e6f4:	df000017 	ldw	fp,0(sp)
    e6f8:	dec00204 	addi	sp,sp,8
    e6fc:	f800283a 	ret

0000e700 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e700:	defffc04 	addi	sp,sp,-16
    e704:	df000315 	stw	fp,12(sp)
    e708:	df000304 	addi	fp,sp,12
    e70c:	e13ffd15 	stw	r4,-12(fp)
    e710:	e17ffe15 	stw	r5,-8(fp)
    e714:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e718:	e0bfff17 	ldw	r2,-4(fp)
}
    e71c:	e037883a 	mov	sp,fp
    e720:	df000017 	ldw	fp,0(sp)
    e724:	dec00104 	addi	sp,sp,4
    e728:	f800283a 	ret

0000e72c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e72c:	defffe04 	addi	sp,sp,-8
    e730:	dfc00115 	stw	ra,4(sp)
    e734:	df000015 	stw	fp,0(sp)
    e738:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e73c:	d0a00b17 	ldw	r2,-32724(gp)
    e740:	10000326 	beq	r2,zero,e750 <alt_get_errno+0x24>
    e744:	d0a00b17 	ldw	r2,-32724(gp)
    e748:	103ee83a 	callr	r2
    e74c:	00000106 	br	e754 <alt_get_errno+0x28>
    e750:	d0a6d804 	addi	r2,gp,-25760
}
    e754:	e037883a 	mov	sp,fp
    e758:	dfc00117 	ldw	ra,4(sp)
    e75c:	df000017 	ldw	fp,0(sp)
    e760:	dec00204 	addi	sp,sp,8
    e764:	f800283a 	ret

0000e768 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e768:	defffb04 	addi	sp,sp,-20
    e76c:	dfc00415 	stw	ra,16(sp)
    e770:	df000315 	stw	fp,12(sp)
    e774:	df000304 	addi	fp,sp,12
    e778:	e13ffe15 	stw	r4,-8(fp)
    e77c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e780:	e0bffe17 	ldw	r2,-8(fp)
    e784:	10000616 	blt	r2,zero,e7a0 <fstat+0x38>
    e788:	e0bffe17 	ldw	r2,-8(fp)
    e78c:	10c00324 	muli	r3,r2,12
    e790:	00800074 	movhi	r2,1
    e794:	10883204 	addi	r2,r2,8392
    e798:	1885883a 	add	r2,r3,r2
    e79c:	00000106 	br	e7a4 <fstat+0x3c>
    e7a0:	0005883a 	mov	r2,zero
    e7a4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e7a8:	e0bffd17 	ldw	r2,-12(fp)
    e7ac:	10001026 	beq	r2,zero,e7f0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e7b0:	e0bffd17 	ldw	r2,-12(fp)
    e7b4:	10800017 	ldw	r2,0(r2)
    e7b8:	10800817 	ldw	r2,32(r2)
    e7bc:	10000726 	beq	r2,zero,e7dc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e7c0:	e0bffd17 	ldw	r2,-12(fp)
    e7c4:	10800017 	ldw	r2,0(r2)
    e7c8:	10800817 	ldw	r2,32(r2)
    e7cc:	e17fff17 	ldw	r5,-4(fp)
    e7d0:	e13ffd17 	ldw	r4,-12(fp)
    e7d4:	103ee83a 	callr	r2
    e7d8:	00000a06 	br	e804 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e7dc:	e0bfff17 	ldw	r2,-4(fp)
    e7e0:	00c80004 	movi	r3,8192
    e7e4:	10c00115 	stw	r3,4(r2)
      return 0;
    e7e8:	0005883a 	mov	r2,zero
    e7ec:	00000506 	br	e804 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e7f0:	000e72c0 	call	e72c <alt_get_errno>
    e7f4:	1007883a 	mov	r3,r2
    e7f8:	00801444 	movi	r2,81
    e7fc:	18800015 	stw	r2,0(r3)
    return -1;
    e800:	00bfffc4 	movi	r2,-1
  }
}
    e804:	e037883a 	mov	sp,fp
    e808:	dfc00117 	ldw	ra,4(sp)
    e80c:	df000017 	ldw	fp,0(sp)
    e810:	dec00204 	addi	sp,sp,8
    e814:	f800283a 	ret

0000e818 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e818:	defffe04 	addi	sp,sp,-8
    e81c:	dfc00115 	stw	ra,4(sp)
    e820:	df000015 	stw	fp,0(sp)
    e824:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e828:	d0a00b17 	ldw	r2,-32724(gp)
    e82c:	10000326 	beq	r2,zero,e83c <alt_get_errno+0x24>
    e830:	d0a00b17 	ldw	r2,-32724(gp)
    e834:	103ee83a 	callr	r2
    e838:	00000106 	br	e840 <alt_get_errno+0x28>
    e83c:	d0a6d804 	addi	r2,gp,-25760
}
    e840:	e037883a 	mov	sp,fp
    e844:	dfc00117 	ldw	ra,4(sp)
    e848:	df000017 	ldw	fp,0(sp)
    e84c:	dec00204 	addi	sp,sp,8
    e850:	f800283a 	ret

0000e854 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e854:	deffed04 	addi	sp,sp,-76
    e858:	dfc01215 	stw	ra,72(sp)
    e85c:	df001115 	stw	fp,68(sp)
    e860:	df001104 	addi	fp,sp,68
    e864:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e868:	e0bfff17 	ldw	r2,-4(fp)
    e86c:	10000616 	blt	r2,zero,e888 <isatty+0x34>
    e870:	e0bfff17 	ldw	r2,-4(fp)
    e874:	10c00324 	muli	r3,r2,12
    e878:	00800074 	movhi	r2,1
    e87c:	10883204 	addi	r2,r2,8392
    e880:	1885883a 	add	r2,r3,r2
    e884:	00000106 	br	e88c <isatty+0x38>
    e888:	0005883a 	mov	r2,zero
    e88c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e890:	e0bfef17 	ldw	r2,-68(fp)
    e894:	10000e26 	beq	r2,zero,e8d0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e898:	e0bfef17 	ldw	r2,-68(fp)
    e89c:	10800017 	ldw	r2,0(r2)
    e8a0:	10800817 	ldw	r2,32(r2)
    e8a4:	1000021e 	bne	r2,zero,e8b0 <isatty+0x5c>
    {
      return 1;
    e8a8:	00800044 	movi	r2,1
    e8ac:	00000d06 	br	e8e4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e8b0:	e0bff004 	addi	r2,fp,-64
    e8b4:	100b883a 	mov	r5,r2
    e8b8:	e13fff17 	ldw	r4,-4(fp)
    e8bc:	000e7680 	call	e768 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e8c0:	e0bff117 	ldw	r2,-60(fp)
    e8c4:	10880020 	cmpeqi	r2,r2,8192
    e8c8:	10803fcc 	andi	r2,r2,255
    e8cc:	00000506 	br	e8e4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e8d0:	000e8180 	call	e818 <alt_get_errno>
    e8d4:	1007883a 	mov	r3,r2
    e8d8:	00801444 	movi	r2,81
    e8dc:	18800015 	stw	r2,0(r3)
    return 0;
    e8e0:	0005883a 	mov	r2,zero
  }
}
    e8e4:	e037883a 	mov	sp,fp
    e8e8:	dfc00117 	ldw	ra,4(sp)
    e8ec:	df000017 	ldw	fp,0(sp)
    e8f0:	dec00204 	addi	sp,sp,8
    e8f4:	f800283a 	ret

0000e8f8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    e8f8:	defffc04 	addi	sp,sp,-16
    e8fc:	df000315 	stw	fp,12(sp)
    e900:	df000304 	addi	fp,sp,12
    e904:	e13ffd15 	stw	r4,-12(fp)
    e908:	e17ffe15 	stw	r5,-8(fp)
    e90c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    e910:	e0fffe17 	ldw	r3,-8(fp)
    e914:	e0bffd17 	ldw	r2,-12(fp)
    e918:	18800c26 	beq	r3,r2,e94c <alt_load_section+0x54>
  {
    while( to != end )
    e91c:	00000806 	br	e940 <alt_load_section+0x48>
    {
      *to++ = *from++;
    e920:	e0bffe17 	ldw	r2,-8(fp)
    e924:	10c00104 	addi	r3,r2,4
    e928:	e0fffe15 	stw	r3,-8(fp)
    e92c:	e0fffd17 	ldw	r3,-12(fp)
    e930:	19000104 	addi	r4,r3,4
    e934:	e13ffd15 	stw	r4,-12(fp)
    e938:	18c00017 	ldw	r3,0(r3)
    e93c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    e940:	e0fffe17 	ldw	r3,-8(fp)
    e944:	e0bfff17 	ldw	r2,-4(fp)
    e948:	18bff51e 	bne	r3,r2,e920 <__alt_data_end+0xff00e920>
    {
      *to++ = *from++;
    }
  }
}
    e94c:	0001883a 	nop
    e950:	e037883a 	mov	sp,fp
    e954:	df000017 	ldw	fp,0(sp)
    e958:	dec00104 	addi	sp,sp,4
    e95c:	f800283a 	ret

0000e960 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e960:	defffe04 	addi	sp,sp,-8
    e964:	dfc00115 	stw	ra,4(sp)
    e968:	df000015 	stw	fp,0(sp)
    e96c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    e970:	01800074 	movhi	r6,1
    e974:	318cba04 	addi	r6,r6,13032
    e978:	01400074 	movhi	r5,1
    e97c:	2945ff04 	addi	r5,r5,6140
    e980:	01000074 	movhi	r4,1
    e984:	210cba04 	addi	r4,r4,13032
    e988:	000e8f80 	call	e8f8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    e98c:	01800034 	movhi	r6,0
    e990:	31809104 	addi	r6,r6,580
    e994:	01400034 	movhi	r5,0
    e998:	29400804 	addi	r5,r5,32
    e99c:	01000034 	movhi	r4,0
    e9a0:	21000804 	addi	r4,r4,32
    e9a4:	000e8f80 	call	e8f8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    e9a8:	01800074 	movhi	r6,1
    e9ac:	3185ff04 	addi	r6,r6,6140
    e9b0:	01400074 	movhi	r5,1
    e9b4:	29441704 	addi	r5,r5,4188
    e9b8:	01000074 	movhi	r4,1
    e9bc:	21041704 	addi	r4,r4,4188
    e9c0:	000e8f80 	call	e8f8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e9c4:	000ff480 	call	ff48 <alt_dcache_flush_all>
  alt_icache_flush_all();
    e9c8:	00101300 	call	10130 <alt_icache_flush_all>
}
    e9cc:	0001883a 	nop
    e9d0:	e037883a 	mov	sp,fp
    e9d4:	dfc00117 	ldw	ra,4(sp)
    e9d8:	df000017 	ldw	fp,0(sp)
    e9dc:	dec00204 	addi	sp,sp,8
    e9e0:	f800283a 	ret

0000e9e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e9e4:	defffe04 	addi	sp,sp,-8
    e9e8:	dfc00115 	stw	ra,4(sp)
    e9ec:	df000015 	stw	fp,0(sp)
    e9f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e9f4:	d0a00b17 	ldw	r2,-32724(gp)
    e9f8:	10000326 	beq	r2,zero,ea08 <alt_get_errno+0x24>
    e9fc:	d0a00b17 	ldw	r2,-32724(gp)
    ea00:	103ee83a 	callr	r2
    ea04:	00000106 	br	ea0c <alt_get_errno+0x28>
    ea08:	d0a6d804 	addi	r2,gp,-25760
}
    ea0c:	e037883a 	mov	sp,fp
    ea10:	dfc00117 	ldw	ra,4(sp)
    ea14:	df000017 	ldw	fp,0(sp)
    ea18:	dec00204 	addi	sp,sp,8
    ea1c:	f800283a 	ret

0000ea20 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    ea20:	defff904 	addi	sp,sp,-28
    ea24:	dfc00615 	stw	ra,24(sp)
    ea28:	df000515 	stw	fp,20(sp)
    ea2c:	df000504 	addi	fp,sp,20
    ea30:	e13ffd15 	stw	r4,-12(fp)
    ea34:	e17ffe15 	stw	r5,-8(fp)
    ea38:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    ea3c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ea40:	e0bffd17 	ldw	r2,-12(fp)
    ea44:	10000616 	blt	r2,zero,ea60 <lseek+0x40>
    ea48:	e0bffd17 	ldw	r2,-12(fp)
    ea4c:	10c00324 	muli	r3,r2,12
    ea50:	00800074 	movhi	r2,1
    ea54:	10883204 	addi	r2,r2,8392
    ea58:	1885883a 	add	r2,r3,r2
    ea5c:	00000106 	br	ea64 <lseek+0x44>
    ea60:	0005883a 	mov	r2,zero
    ea64:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    ea68:	e0bffc17 	ldw	r2,-16(fp)
    ea6c:	10001026 	beq	r2,zero,eab0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    ea70:	e0bffc17 	ldw	r2,-16(fp)
    ea74:	10800017 	ldw	r2,0(r2)
    ea78:	10800717 	ldw	r2,28(r2)
    ea7c:	10000926 	beq	r2,zero,eaa4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    ea80:	e0bffc17 	ldw	r2,-16(fp)
    ea84:	10800017 	ldw	r2,0(r2)
    ea88:	10800717 	ldw	r2,28(r2)
    ea8c:	e1bfff17 	ldw	r6,-4(fp)
    ea90:	e17ffe17 	ldw	r5,-8(fp)
    ea94:	e13ffc17 	ldw	r4,-16(fp)
    ea98:	103ee83a 	callr	r2
    ea9c:	e0bffb15 	stw	r2,-20(fp)
    eaa0:	00000506 	br	eab8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    eaa4:	00bfde84 	movi	r2,-134
    eaa8:	e0bffb15 	stw	r2,-20(fp)
    eaac:	00000206 	br	eab8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    eab0:	00bfebc4 	movi	r2,-81
    eab4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    eab8:	e0bffb17 	ldw	r2,-20(fp)
    eabc:	1000070e 	bge	r2,zero,eadc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    eac0:	000e9e40 	call	e9e4 <alt_get_errno>
    eac4:	1007883a 	mov	r3,r2
    eac8:	e0bffb17 	ldw	r2,-20(fp)
    eacc:	0085c83a 	sub	r2,zero,r2
    ead0:	18800015 	stw	r2,0(r3)
    rc = -1;
    ead4:	00bfffc4 	movi	r2,-1
    ead8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    eadc:	e0bffb17 	ldw	r2,-20(fp)
}
    eae0:	e037883a 	mov	sp,fp
    eae4:	dfc00117 	ldw	ra,4(sp)
    eae8:	df000017 	ldw	fp,0(sp)
    eaec:	dec00204 	addi	sp,sp,8
    eaf0:	f800283a 	ret

0000eaf4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    eaf4:	defffd04 	addi	sp,sp,-12
    eaf8:	dfc00215 	stw	ra,8(sp)
    eafc:	df000115 	stw	fp,4(sp)
    eb00:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    eb04:	0009883a 	mov	r4,zero
    eb08:	000ef9c0 	call	ef9c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    eb0c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    eb10:	000efd40 	call	efd4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    eb14:	01800074 	movhi	r6,1
    eb18:	3185f704 	addi	r6,r6,6108
    eb1c:	01400074 	movhi	r5,1
    eb20:	2945f704 	addi	r5,r5,6108
    eb24:	01000074 	movhi	r4,1
    eb28:	2105f704 	addi	r4,r4,6108
    eb2c:	00104c80 	call	104c8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    eb30:	00100700 	call	10070 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    eb34:	01000074 	movhi	r4,1
    eb38:	21003404 	addi	r4,r4,208
    eb3c:	0010cc80 	call	10cc8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    eb40:	d0a6dc17 	ldw	r2,-25744(gp)
    eb44:	d0e6dd17 	ldw	r3,-25740(gp)
    eb48:	d126de17 	ldw	r4,-25736(gp)
    eb4c:	200d883a 	mov	r6,r4
    eb50:	180b883a 	mov	r5,r3
    eb54:	1009883a 	mov	r4,r2
    eb58:	0000f500 	call	f50 <main>
    eb5c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    eb60:	01000044 	movi	r4,1
    eb64:	000e6300 	call	e630 <close>
  exit (result);
    eb68:	e13fff17 	ldw	r4,-4(fp)
    eb6c:	0010cdc0 	call	10cdc <exit>

0000eb70 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    eb70:	defffe04 	addi	sp,sp,-8
    eb74:	df000115 	stw	fp,4(sp)
    eb78:	df000104 	addi	fp,sp,4
    eb7c:	e13fff15 	stw	r4,-4(fp)
}
    eb80:	0001883a 	nop
    eb84:	e037883a 	mov	sp,fp
    eb88:	df000017 	ldw	fp,0(sp)
    eb8c:	dec00104 	addi	sp,sp,4
    eb90:	f800283a 	ret

0000eb94 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    eb94:	defffe04 	addi	sp,sp,-8
    eb98:	df000115 	stw	fp,4(sp)
    eb9c:	df000104 	addi	fp,sp,4
    eba0:	e13fff15 	stw	r4,-4(fp)
}
    eba4:	0001883a 	nop
    eba8:	e037883a 	mov	sp,fp
    ebac:	df000017 	ldw	fp,0(sp)
    ebb0:	dec00104 	addi	sp,sp,4
    ebb4:	f800283a 	ret

0000ebb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ebb8:	defffe04 	addi	sp,sp,-8
    ebbc:	dfc00115 	stw	ra,4(sp)
    ebc0:	df000015 	stw	fp,0(sp)
    ebc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ebc8:	d0a00b17 	ldw	r2,-32724(gp)
    ebcc:	10000326 	beq	r2,zero,ebdc <alt_get_errno+0x24>
    ebd0:	d0a00b17 	ldw	r2,-32724(gp)
    ebd4:	103ee83a 	callr	r2
    ebd8:	00000106 	br	ebe0 <alt_get_errno+0x28>
    ebdc:	d0a6d804 	addi	r2,gp,-25760
}
    ebe0:	e037883a 	mov	sp,fp
    ebe4:	dfc00117 	ldw	ra,4(sp)
    ebe8:	df000017 	ldw	fp,0(sp)
    ebec:	dec00204 	addi	sp,sp,8
    ebf0:	f800283a 	ret

0000ebf4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    ebf4:	defff904 	addi	sp,sp,-28
    ebf8:	dfc00615 	stw	ra,24(sp)
    ebfc:	df000515 	stw	fp,20(sp)
    ec00:	df000504 	addi	fp,sp,20
    ec04:	e13ffd15 	stw	r4,-12(fp)
    ec08:	e17ffe15 	stw	r5,-8(fp)
    ec0c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ec10:	e0bffd17 	ldw	r2,-12(fp)
    ec14:	10000616 	blt	r2,zero,ec30 <read+0x3c>
    ec18:	e0bffd17 	ldw	r2,-12(fp)
    ec1c:	10c00324 	muli	r3,r2,12
    ec20:	00800074 	movhi	r2,1
    ec24:	10883204 	addi	r2,r2,8392
    ec28:	1885883a 	add	r2,r3,r2
    ec2c:	00000106 	br	ec34 <read+0x40>
    ec30:	0005883a 	mov	r2,zero
    ec34:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ec38:	e0bffb17 	ldw	r2,-20(fp)
    ec3c:	10002226 	beq	r2,zero,ecc8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ec40:	e0bffb17 	ldw	r2,-20(fp)
    ec44:	10800217 	ldw	r2,8(r2)
    ec48:	108000cc 	andi	r2,r2,3
    ec4c:	10800060 	cmpeqi	r2,r2,1
    ec50:	1000181e 	bne	r2,zero,ecb4 <read+0xc0>
        (fd->dev->read))
    ec54:	e0bffb17 	ldw	r2,-20(fp)
    ec58:	10800017 	ldw	r2,0(r2)
    ec5c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ec60:	10001426 	beq	r2,zero,ecb4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ec64:	e0bffb17 	ldw	r2,-20(fp)
    ec68:	10800017 	ldw	r2,0(r2)
    ec6c:	10800517 	ldw	r2,20(r2)
    ec70:	e0ffff17 	ldw	r3,-4(fp)
    ec74:	180d883a 	mov	r6,r3
    ec78:	e17ffe17 	ldw	r5,-8(fp)
    ec7c:	e13ffb17 	ldw	r4,-20(fp)
    ec80:	103ee83a 	callr	r2
    ec84:	e0bffc15 	stw	r2,-16(fp)
    ec88:	e0bffc17 	ldw	r2,-16(fp)
    ec8c:	1000070e 	bge	r2,zero,ecac <read+0xb8>
        {
          ALT_ERRNO = -rval;
    ec90:	000ebb80 	call	ebb8 <alt_get_errno>
    ec94:	1007883a 	mov	r3,r2
    ec98:	e0bffc17 	ldw	r2,-16(fp)
    ec9c:	0085c83a 	sub	r2,zero,r2
    eca0:	18800015 	stw	r2,0(r3)
          return -1;
    eca4:	00bfffc4 	movi	r2,-1
    eca8:	00000c06 	br	ecdc <read+0xe8>
        }
        return rval;
    ecac:	e0bffc17 	ldw	r2,-16(fp)
    ecb0:	00000a06 	br	ecdc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ecb4:	000ebb80 	call	ebb8 <alt_get_errno>
    ecb8:	1007883a 	mov	r3,r2
    ecbc:	00800344 	movi	r2,13
    ecc0:	18800015 	stw	r2,0(r3)
    ecc4:	00000406 	br	ecd8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ecc8:	000ebb80 	call	ebb8 <alt_get_errno>
    eccc:	1007883a 	mov	r3,r2
    ecd0:	00801444 	movi	r2,81
    ecd4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ecd8:	00bfffc4 	movi	r2,-1
}
    ecdc:	e037883a 	mov	sp,fp
    ece0:	dfc00117 	ldw	ra,4(sp)
    ece4:	df000017 	ldw	fp,0(sp)
    ece8:	dec00204 	addi	sp,sp,8
    ecec:	f800283a 	ret

0000ecf0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ecf0:	defffe04 	addi	sp,sp,-8
    ecf4:	df000115 	stw	fp,4(sp)
    ecf8:	df000104 	addi	fp,sp,4
    ecfc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ed00:	e0bfff17 	ldw	r2,-4(fp)
    ed04:	108000d0 	cmplti	r2,r2,3
    ed08:	10000d1e 	bne	r2,zero,ed40 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    ed0c:	00800074 	movhi	r2,1
    ed10:	10883204 	addi	r2,r2,8392
    ed14:	e0ffff17 	ldw	r3,-4(fp)
    ed18:	18c00324 	muli	r3,r3,12
    ed1c:	10c5883a 	add	r2,r2,r3
    ed20:	10800204 	addi	r2,r2,8
    ed24:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ed28:	00800074 	movhi	r2,1
    ed2c:	10883204 	addi	r2,r2,8392
    ed30:	e0ffff17 	ldw	r3,-4(fp)
    ed34:	18c00324 	muli	r3,r3,12
    ed38:	10c5883a 	add	r2,r2,r3
    ed3c:	10000015 	stw	zero,0(r2)
  }
}
    ed40:	0001883a 	nop
    ed44:	e037883a 	mov	sp,fp
    ed48:	df000017 	ldw	fp,0(sp)
    ed4c:	dec00104 	addi	sp,sp,4
    ed50:	f800283a 	ret

0000ed54 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ed54:	defff904 	addi	sp,sp,-28
    ed58:	df000615 	stw	fp,24(sp)
    ed5c:	df000604 	addi	fp,sp,24
    ed60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ed64:	0005303a 	rdctl	r2,status
    ed68:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed6c:	e0fffe17 	ldw	r3,-8(fp)
    ed70:	00bfff84 	movi	r2,-2
    ed74:	1884703a 	and	r2,r3,r2
    ed78:	1001703a 	wrctl	status,r2
  
  return context;
    ed7c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    ed80:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ed84:	d0a00c17 	ldw	r2,-32720(gp)
    ed88:	10c000c4 	addi	r3,r2,3
    ed8c:	00bfff04 	movi	r2,-4
    ed90:	1884703a 	and	r2,r3,r2
    ed94:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ed98:	d0e00c17 	ldw	r3,-32720(gp)
    ed9c:	e0bfff17 	ldw	r2,-4(fp)
    eda0:	1887883a 	add	r3,r3,r2
    eda4:	00804034 	movhi	r2,256
    eda8:	10800004 	addi	r2,r2,0
    edac:	10c0062e 	bgeu	r2,r3,edc8 <sbrk+0x74>
    edb0:	e0bffb17 	ldw	r2,-20(fp)
    edb4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    edb8:	e0bffa17 	ldw	r2,-24(fp)
    edbc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    edc0:	00bfffc4 	movi	r2,-1
    edc4:	00000b06 	br	edf4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    edc8:	d0a00c17 	ldw	r2,-32720(gp)
    edcc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    edd0:	d0e00c17 	ldw	r3,-32720(gp)
    edd4:	e0bfff17 	ldw	r2,-4(fp)
    edd8:	1885883a 	add	r2,r3,r2
    eddc:	d0a00c15 	stw	r2,-32720(gp)
    ede0:	e0bffb17 	ldw	r2,-20(fp)
    ede4:	e0bffc15 	stw	r2,-16(fp)
    ede8:	e0bffc17 	ldw	r2,-16(fp)
    edec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    edf0:	e0bffd17 	ldw	r2,-12(fp)
} 
    edf4:	e037883a 	mov	sp,fp
    edf8:	df000017 	ldw	fp,0(sp)
    edfc:	dec00104 	addi	sp,sp,4
    ee00:	f800283a 	ret

0000ee04 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    ee04:	defffd04 	addi	sp,sp,-12
    ee08:	dfc00215 	stw	ra,8(sp)
    ee0c:	df000115 	stw	fp,4(sp)
    ee10:	df000104 	addi	fp,sp,4
    ee14:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    ee18:	e13fff17 	ldw	r4,-4(fp)
    ee1c:	000fdf00 	call	fdf0 <alt_busy_sleep>
}
    ee20:	e037883a 	mov	sp,fp
    ee24:	dfc00117 	ldw	ra,4(sp)
    ee28:	df000017 	ldw	fp,0(sp)
    ee2c:	dec00204 	addi	sp,sp,8
    ee30:	f800283a 	ret

0000ee34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ee34:	defffe04 	addi	sp,sp,-8
    ee38:	dfc00115 	stw	ra,4(sp)
    ee3c:	df000015 	stw	fp,0(sp)
    ee40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ee44:	d0a00b17 	ldw	r2,-32724(gp)
    ee48:	10000326 	beq	r2,zero,ee58 <alt_get_errno+0x24>
    ee4c:	d0a00b17 	ldw	r2,-32724(gp)
    ee50:	103ee83a 	callr	r2
    ee54:	00000106 	br	ee5c <alt_get_errno+0x28>
    ee58:	d0a6d804 	addi	r2,gp,-25760
}
    ee5c:	e037883a 	mov	sp,fp
    ee60:	dfc00117 	ldw	ra,4(sp)
    ee64:	df000017 	ldw	fp,0(sp)
    ee68:	dec00204 	addi	sp,sp,8
    ee6c:	f800283a 	ret

0000ee70 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    ee70:	defff904 	addi	sp,sp,-28
    ee74:	dfc00615 	stw	ra,24(sp)
    ee78:	df000515 	stw	fp,20(sp)
    ee7c:	df000504 	addi	fp,sp,20
    ee80:	e13ffd15 	stw	r4,-12(fp)
    ee84:	e17ffe15 	stw	r5,-8(fp)
    ee88:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ee8c:	e0bffd17 	ldw	r2,-12(fp)
    ee90:	10000616 	blt	r2,zero,eeac <write+0x3c>
    ee94:	e0bffd17 	ldw	r2,-12(fp)
    ee98:	10c00324 	muli	r3,r2,12
    ee9c:	00800074 	movhi	r2,1
    eea0:	10883204 	addi	r2,r2,8392
    eea4:	1885883a 	add	r2,r3,r2
    eea8:	00000106 	br	eeb0 <write+0x40>
    eeac:	0005883a 	mov	r2,zero
    eeb0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    eeb4:	e0bffb17 	ldw	r2,-20(fp)
    eeb8:	10002126 	beq	r2,zero,ef40 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    eebc:	e0bffb17 	ldw	r2,-20(fp)
    eec0:	10800217 	ldw	r2,8(r2)
    eec4:	108000cc 	andi	r2,r2,3
    eec8:	10001826 	beq	r2,zero,ef2c <write+0xbc>
    eecc:	e0bffb17 	ldw	r2,-20(fp)
    eed0:	10800017 	ldw	r2,0(r2)
    eed4:	10800617 	ldw	r2,24(r2)
    eed8:	10001426 	beq	r2,zero,ef2c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    eedc:	e0bffb17 	ldw	r2,-20(fp)
    eee0:	10800017 	ldw	r2,0(r2)
    eee4:	10800617 	ldw	r2,24(r2)
    eee8:	e0ffff17 	ldw	r3,-4(fp)
    eeec:	180d883a 	mov	r6,r3
    eef0:	e17ffe17 	ldw	r5,-8(fp)
    eef4:	e13ffb17 	ldw	r4,-20(fp)
    eef8:	103ee83a 	callr	r2
    eefc:	e0bffc15 	stw	r2,-16(fp)
    ef00:	e0bffc17 	ldw	r2,-16(fp)
    ef04:	1000070e 	bge	r2,zero,ef24 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    ef08:	000ee340 	call	ee34 <alt_get_errno>
    ef0c:	1007883a 	mov	r3,r2
    ef10:	e0bffc17 	ldw	r2,-16(fp)
    ef14:	0085c83a 	sub	r2,zero,r2
    ef18:	18800015 	stw	r2,0(r3)
        return -1;
    ef1c:	00bfffc4 	movi	r2,-1
    ef20:	00000c06 	br	ef54 <write+0xe4>
      }
      return rval;
    ef24:	e0bffc17 	ldw	r2,-16(fp)
    ef28:	00000a06 	br	ef54 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    ef2c:	000ee340 	call	ee34 <alt_get_errno>
    ef30:	1007883a 	mov	r3,r2
    ef34:	00800344 	movi	r2,13
    ef38:	18800015 	stw	r2,0(r3)
    ef3c:	00000406 	br	ef50 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    ef40:	000ee340 	call	ee34 <alt_get_errno>
    ef44:	1007883a 	mov	r3,r2
    ef48:	00801444 	movi	r2,81
    ef4c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ef50:	00bfffc4 	movi	r2,-1
}
    ef54:	e037883a 	mov	sp,fp
    ef58:	dfc00117 	ldw	ra,4(sp)
    ef5c:	df000017 	ldw	fp,0(sp)
    ef60:	dec00204 	addi	sp,sp,8
    ef64:	f800283a 	ret

0000ef68 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    ef68:	defffd04 	addi	sp,sp,-12
    ef6c:	dfc00215 	stw	ra,8(sp)
    ef70:	df000115 	stw	fp,4(sp)
    ef74:	df000104 	addi	fp,sp,4
    ef78:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    ef7c:	d1600804 	addi	r5,gp,-32736
    ef80:	e13fff17 	ldw	r4,-4(fp)
    ef84:	000ffcc0 	call	ffcc <alt_dev_llist_insert>
}
    ef88:	e037883a 	mov	sp,fp
    ef8c:	dfc00117 	ldw	ra,4(sp)
    ef90:	df000017 	ldw	fp,0(sp)
    ef94:	dec00204 	addi	sp,sp,8
    ef98:	f800283a 	ret

0000ef9c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ef9c:	defffd04 	addi	sp,sp,-12
    efa0:	dfc00215 	stw	ra,8(sp)
    efa4:	df000115 	stw	fp,4(sp)
    efa8:	df000104 	addi	fp,sp,4
    efac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    efb0:	001093c0 	call	1093c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    efb4:	00800044 	movi	r2,1
    efb8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    efbc:	0001883a 	nop
    efc0:	e037883a 	mov	sp,fp
    efc4:	dfc00117 	ldw	ra,4(sp)
    efc8:	df000017 	ldw	fp,0(sp)
    efcc:	dec00204 	addi	sp,sp,8
    efd0:	f800283a 	ret

0000efd4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    efd4:	defffe04 	addi	sp,sp,-8
    efd8:	dfc00115 	stw	ra,4(sp)
    efdc:	df000015 	stw	fp,0(sp)
    efe0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    efe4:	00804034 	movhi	r2,256
    efe8:	10840004 	addi	r2,r2,4096
    efec:	d0a6df15 	stw	r2,-25732(gp)
    eff0:	0080bef4 	movhi	r2,763
    eff4:	10bc2004 	addi	r2,r2,-3968
    eff8:	d0a6e015 	stw	r2,-25728(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    effc:	01c0fa04 	movi	r7,1000
    f000:	01800104 	movi	r6,4
    f004:	000b883a 	mov	r5,zero
    f008:	01004034 	movhi	r4,256
    f00c:	21040804 	addi	r4,r4,4128
    f010:	000fb300 	call	fb30 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    f014:	000d883a 	mov	r6,zero
    f018:	000b883a 	mov	r5,zero
    f01c:	01000074 	movhi	r4,1
    f020:	21089c04 	addi	r4,r4,8816
    f024:	000f1b40 	call	f1b4 <altera_avalon_jtag_uart_init>
    f028:	01000074 	movhi	r4,1
    f02c:	21089204 	addi	r4,r4,8776
    f030:	000ef680 	call	ef68 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    f034:	0001883a 	nop
}
    f038:	0001883a 	nop
    f03c:	e037883a 	mov	sp,fp
    f040:	dfc00117 	ldw	ra,4(sp)
    f044:	df000017 	ldw	fp,0(sp)
    f048:	dec00204 	addi	sp,sp,8
    f04c:	f800283a 	ret

0000f050 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f050:	defffa04 	addi	sp,sp,-24
    f054:	dfc00515 	stw	ra,20(sp)
    f058:	df000415 	stw	fp,16(sp)
    f05c:	df000404 	addi	fp,sp,16
    f060:	e13ffd15 	stw	r4,-12(fp)
    f064:	e17ffe15 	stw	r5,-8(fp)
    f068:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f06c:	e0bffd17 	ldw	r2,-12(fp)
    f070:	10800017 	ldw	r2,0(r2)
    f074:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f078:	e0bffc17 	ldw	r2,-16(fp)
    f07c:	10c00a04 	addi	r3,r2,40
    f080:	e0bffd17 	ldw	r2,-12(fp)
    f084:	10800217 	ldw	r2,8(r2)
    f088:	100f883a 	mov	r7,r2
    f08c:	e1bfff17 	ldw	r6,-4(fp)
    f090:	e17ffe17 	ldw	r5,-8(fp)
    f094:	1809883a 	mov	r4,r3
    f098:	000f6780 	call	f678 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f09c:	e037883a 	mov	sp,fp
    f0a0:	dfc00117 	ldw	ra,4(sp)
    f0a4:	df000017 	ldw	fp,0(sp)
    f0a8:	dec00204 	addi	sp,sp,8
    f0ac:	f800283a 	ret

0000f0b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f0b0:	defffa04 	addi	sp,sp,-24
    f0b4:	dfc00515 	stw	ra,20(sp)
    f0b8:	df000415 	stw	fp,16(sp)
    f0bc:	df000404 	addi	fp,sp,16
    f0c0:	e13ffd15 	stw	r4,-12(fp)
    f0c4:	e17ffe15 	stw	r5,-8(fp)
    f0c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f0cc:	e0bffd17 	ldw	r2,-12(fp)
    f0d0:	10800017 	ldw	r2,0(r2)
    f0d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f0d8:	e0bffc17 	ldw	r2,-16(fp)
    f0dc:	10c00a04 	addi	r3,r2,40
    f0e0:	e0bffd17 	ldw	r2,-12(fp)
    f0e4:	10800217 	ldw	r2,8(r2)
    f0e8:	100f883a 	mov	r7,r2
    f0ec:	e1bfff17 	ldw	r6,-4(fp)
    f0f0:	e17ffe17 	ldw	r5,-8(fp)
    f0f4:	1809883a 	mov	r4,r3
    f0f8:	000f8940 	call	f894 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f0fc:	e037883a 	mov	sp,fp
    f100:	dfc00117 	ldw	ra,4(sp)
    f104:	df000017 	ldw	fp,0(sp)
    f108:	dec00204 	addi	sp,sp,8
    f10c:	f800283a 	ret

0000f110 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f110:	defffc04 	addi	sp,sp,-16
    f114:	dfc00315 	stw	ra,12(sp)
    f118:	df000215 	stw	fp,8(sp)
    f11c:	df000204 	addi	fp,sp,8
    f120:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f124:	e0bfff17 	ldw	r2,-4(fp)
    f128:	10800017 	ldw	r2,0(r2)
    f12c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f130:	e0bffe17 	ldw	r2,-8(fp)
    f134:	10c00a04 	addi	r3,r2,40
    f138:	e0bfff17 	ldw	r2,-4(fp)
    f13c:	10800217 	ldw	r2,8(r2)
    f140:	100b883a 	mov	r5,r2
    f144:	1809883a 	mov	r4,r3
    f148:	000f5200 	call	f520 <altera_avalon_jtag_uart_close>
}
    f14c:	e037883a 	mov	sp,fp
    f150:	dfc00117 	ldw	ra,4(sp)
    f154:	df000017 	ldw	fp,0(sp)
    f158:	dec00204 	addi	sp,sp,8
    f15c:	f800283a 	ret

0000f160 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f160:	defffa04 	addi	sp,sp,-24
    f164:	dfc00515 	stw	ra,20(sp)
    f168:	df000415 	stw	fp,16(sp)
    f16c:	df000404 	addi	fp,sp,16
    f170:	e13ffd15 	stw	r4,-12(fp)
    f174:	e17ffe15 	stw	r5,-8(fp)
    f178:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f17c:	e0bffd17 	ldw	r2,-12(fp)
    f180:	10800017 	ldw	r2,0(r2)
    f184:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f188:	e0bffc17 	ldw	r2,-16(fp)
    f18c:	10800a04 	addi	r2,r2,40
    f190:	e1bfff17 	ldw	r6,-4(fp)
    f194:	e17ffe17 	ldw	r5,-8(fp)
    f198:	1009883a 	mov	r4,r2
    f19c:	000f5880 	call	f588 <altera_avalon_jtag_uart_ioctl>
}
    f1a0:	e037883a 	mov	sp,fp
    f1a4:	dfc00117 	ldw	ra,4(sp)
    f1a8:	df000017 	ldw	fp,0(sp)
    f1ac:	dec00204 	addi	sp,sp,8
    f1b0:	f800283a 	ret

0000f1b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f1b4:	defffa04 	addi	sp,sp,-24
    f1b8:	dfc00515 	stw	ra,20(sp)
    f1bc:	df000415 	stw	fp,16(sp)
    f1c0:	df000404 	addi	fp,sp,16
    f1c4:	e13ffd15 	stw	r4,-12(fp)
    f1c8:	e17ffe15 	stw	r5,-8(fp)
    f1cc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f1d0:	e0bffd17 	ldw	r2,-12(fp)
    f1d4:	00c00044 	movi	r3,1
    f1d8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f1dc:	e0bffd17 	ldw	r2,-12(fp)
    f1e0:	10800017 	ldw	r2,0(r2)
    f1e4:	10800104 	addi	r2,r2,4
    f1e8:	1007883a 	mov	r3,r2
    f1ec:	e0bffd17 	ldw	r2,-12(fp)
    f1f0:	10800817 	ldw	r2,32(r2)
    f1f4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f1f8:	e0bffe17 	ldw	r2,-8(fp)
    f1fc:	e0ffff17 	ldw	r3,-4(fp)
    f200:	d8000015 	stw	zero,0(sp)
    f204:	e1fffd17 	ldw	r7,-12(fp)
    f208:	01800074 	movhi	r6,1
    f20c:	31bc9d04 	addi	r6,r6,-3468
    f210:	180b883a 	mov	r5,r3
    f214:	1009883a 	mov	r4,r2
    f218:	00101640 	call	10164 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f21c:	e0bffd17 	ldw	r2,-12(fp)
    f220:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f224:	e0bffd17 	ldw	r2,-12(fp)
    f228:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f22c:	d0e6e217 	ldw	r3,-25720(gp)
    f230:	e1fffd17 	ldw	r7,-12(fp)
    f234:	01800074 	movhi	r6,1
    f238:	31bd2004 	addi	r6,r6,-2944
    f23c:	180b883a 	mov	r5,r3
    f240:	1009883a 	mov	r4,r2
    f244:	000fcc40 	call	fcc4 <alt_alarm_start>
    f248:	1000040e 	bge	r2,zero,f25c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f24c:	e0fffd17 	ldw	r3,-12(fp)
    f250:	00a00034 	movhi	r2,32768
    f254:	10bfffc4 	addi	r2,r2,-1
    f258:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f25c:	0001883a 	nop
    f260:	e037883a 	mov	sp,fp
    f264:	dfc00117 	ldw	ra,4(sp)
    f268:	df000017 	ldw	fp,0(sp)
    f26c:	dec00204 	addi	sp,sp,8
    f270:	f800283a 	ret

0000f274 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f274:	defff804 	addi	sp,sp,-32
    f278:	df000715 	stw	fp,28(sp)
    f27c:	df000704 	addi	fp,sp,28
    f280:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f284:	e0bfff17 	ldw	r2,-4(fp)
    f288:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f28c:	e0bffb17 	ldw	r2,-20(fp)
    f290:	10800017 	ldw	r2,0(r2)
    f294:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f298:	e0bffc17 	ldw	r2,-16(fp)
    f29c:	10800104 	addi	r2,r2,4
    f2a0:	10800037 	ldwio	r2,0(r2)
    f2a4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f2a8:	e0bffd17 	ldw	r2,-12(fp)
    f2ac:	1080c00c 	andi	r2,r2,768
    f2b0:	10006d26 	beq	r2,zero,f468 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f2b4:	e0bffd17 	ldw	r2,-12(fp)
    f2b8:	1080400c 	andi	r2,r2,256
    f2bc:	10003526 	beq	r2,zero,f394 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f2c0:	00800074 	movhi	r2,1
    f2c4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f2c8:	e0bffb17 	ldw	r2,-20(fp)
    f2cc:	10800a17 	ldw	r2,40(r2)
    f2d0:	10800044 	addi	r2,r2,1
    f2d4:	1081ffcc 	andi	r2,r2,2047
    f2d8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f2dc:	e0bffb17 	ldw	r2,-20(fp)
    f2e0:	10c00b17 	ldw	r3,44(r2)
    f2e4:	e0bffe17 	ldw	r2,-8(fp)
    f2e8:	18801526 	beq	r3,r2,f340 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f2ec:	e0bffc17 	ldw	r2,-16(fp)
    f2f0:	10800037 	ldwio	r2,0(r2)
    f2f4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f2f8:	e0bff917 	ldw	r2,-28(fp)
    f2fc:	10a0000c 	andi	r2,r2,32768
    f300:	10001126 	beq	r2,zero,f348 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f304:	e0bffb17 	ldw	r2,-20(fp)
    f308:	10800a17 	ldw	r2,40(r2)
    f30c:	e0fff917 	ldw	r3,-28(fp)
    f310:	1809883a 	mov	r4,r3
    f314:	e0fffb17 	ldw	r3,-20(fp)
    f318:	1885883a 	add	r2,r3,r2
    f31c:	10800e04 	addi	r2,r2,56
    f320:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f324:	e0bffb17 	ldw	r2,-20(fp)
    f328:	10800a17 	ldw	r2,40(r2)
    f32c:	10800044 	addi	r2,r2,1
    f330:	10c1ffcc 	andi	r3,r2,2047
    f334:	e0bffb17 	ldw	r2,-20(fp)
    f338:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f33c:	003fe206 	br	f2c8 <__alt_data_end+0xff00f2c8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f340:	0001883a 	nop
    f344:	00000106 	br	f34c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f348:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f34c:	e0bff917 	ldw	r2,-28(fp)
    f350:	10bfffec 	andhi	r2,r2,65535
    f354:	10000f26 	beq	r2,zero,f394 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f358:	e0bffb17 	ldw	r2,-20(fp)
    f35c:	10c00817 	ldw	r3,32(r2)
    f360:	00bfff84 	movi	r2,-2
    f364:	1886703a 	and	r3,r3,r2
    f368:	e0bffb17 	ldw	r2,-20(fp)
    f36c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f370:	e0bffc17 	ldw	r2,-16(fp)
    f374:	10800104 	addi	r2,r2,4
    f378:	1007883a 	mov	r3,r2
    f37c:	e0bffb17 	ldw	r2,-20(fp)
    f380:	10800817 	ldw	r2,32(r2)
    f384:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f388:	e0bffc17 	ldw	r2,-16(fp)
    f38c:	10800104 	addi	r2,r2,4
    f390:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f394:	e0bffd17 	ldw	r2,-12(fp)
    f398:	1080800c 	andi	r2,r2,512
    f39c:	103fbe26 	beq	r2,zero,f298 <__alt_data_end+0xff00f298>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f3a0:	e0bffd17 	ldw	r2,-12(fp)
    f3a4:	1004d43a 	srli	r2,r2,16
    f3a8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f3ac:	00001406 	br	f400 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f3b0:	e0bffc17 	ldw	r2,-16(fp)
    f3b4:	e0fffb17 	ldw	r3,-20(fp)
    f3b8:	18c00d17 	ldw	r3,52(r3)
    f3bc:	e13ffb17 	ldw	r4,-20(fp)
    f3c0:	20c7883a 	add	r3,r4,r3
    f3c4:	18c20e04 	addi	r3,r3,2104
    f3c8:	18c00003 	ldbu	r3,0(r3)
    f3cc:	18c03fcc 	andi	r3,r3,255
    f3d0:	18c0201c 	xori	r3,r3,128
    f3d4:	18ffe004 	addi	r3,r3,-128
    f3d8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f3dc:	e0bffb17 	ldw	r2,-20(fp)
    f3e0:	10800d17 	ldw	r2,52(r2)
    f3e4:	10800044 	addi	r2,r2,1
    f3e8:	10c1ffcc 	andi	r3,r2,2047
    f3ec:	e0bffb17 	ldw	r2,-20(fp)
    f3f0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f3f4:	e0bffa17 	ldw	r2,-24(fp)
    f3f8:	10bfffc4 	addi	r2,r2,-1
    f3fc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f400:	e0bffa17 	ldw	r2,-24(fp)
    f404:	10000526 	beq	r2,zero,f41c <altera_avalon_jtag_uart_irq+0x1a8>
    f408:	e0bffb17 	ldw	r2,-20(fp)
    f40c:	10c00d17 	ldw	r3,52(r2)
    f410:	e0bffb17 	ldw	r2,-20(fp)
    f414:	10800c17 	ldw	r2,48(r2)
    f418:	18bfe51e 	bne	r3,r2,f3b0 <__alt_data_end+0xff00f3b0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f41c:	e0bffa17 	ldw	r2,-24(fp)
    f420:	103f9d26 	beq	r2,zero,f298 <__alt_data_end+0xff00f298>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f424:	e0bffb17 	ldw	r2,-20(fp)
    f428:	10c00817 	ldw	r3,32(r2)
    f42c:	00bfff44 	movi	r2,-3
    f430:	1886703a 	and	r3,r3,r2
    f434:	e0bffb17 	ldw	r2,-20(fp)
    f438:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f43c:	e0bffb17 	ldw	r2,-20(fp)
    f440:	10800017 	ldw	r2,0(r2)
    f444:	10800104 	addi	r2,r2,4
    f448:	1007883a 	mov	r3,r2
    f44c:	e0bffb17 	ldw	r2,-20(fp)
    f450:	10800817 	ldw	r2,32(r2)
    f454:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f458:	e0bffc17 	ldw	r2,-16(fp)
    f45c:	10800104 	addi	r2,r2,4
    f460:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f464:	003f8c06 	br	f298 <__alt_data_end+0xff00f298>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    f468:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    f46c:	0001883a 	nop
    f470:	e037883a 	mov	sp,fp
    f474:	df000017 	ldw	fp,0(sp)
    f478:	dec00104 	addi	sp,sp,4
    f47c:	f800283a 	ret

0000f480 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f480:	defff804 	addi	sp,sp,-32
    f484:	df000715 	stw	fp,28(sp)
    f488:	df000704 	addi	fp,sp,28
    f48c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f490:	e0bffb17 	ldw	r2,-20(fp)
    f494:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f498:	e0bff917 	ldw	r2,-28(fp)
    f49c:	10800017 	ldw	r2,0(r2)
    f4a0:	10800104 	addi	r2,r2,4
    f4a4:	10800037 	ldwio	r2,0(r2)
    f4a8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f4ac:	e0bffa17 	ldw	r2,-24(fp)
    f4b0:	1081000c 	andi	r2,r2,1024
    f4b4:	10000b26 	beq	r2,zero,f4e4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f4b8:	e0bff917 	ldw	r2,-28(fp)
    f4bc:	10800017 	ldw	r2,0(r2)
    f4c0:	10800104 	addi	r2,r2,4
    f4c4:	1007883a 	mov	r3,r2
    f4c8:	e0bff917 	ldw	r2,-28(fp)
    f4cc:	10800817 	ldw	r2,32(r2)
    f4d0:	10810014 	ori	r2,r2,1024
    f4d4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f4d8:	e0bff917 	ldw	r2,-28(fp)
    f4dc:	10000915 	stw	zero,36(r2)
    f4e0:	00000a06 	br	f50c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f4e4:	e0bff917 	ldw	r2,-28(fp)
    f4e8:	10c00917 	ldw	r3,36(r2)
    f4ec:	00a00034 	movhi	r2,32768
    f4f0:	10bfff04 	addi	r2,r2,-4
    f4f4:	10c00536 	bltu	r2,r3,f50c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f4f8:	e0bff917 	ldw	r2,-28(fp)
    f4fc:	10800917 	ldw	r2,36(r2)
    f500:	10c00044 	addi	r3,r2,1
    f504:	e0bff917 	ldw	r2,-28(fp)
    f508:	10c00915 	stw	r3,36(r2)
    f50c:	d0a6e217 	ldw	r2,-25720(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f510:	e037883a 	mov	sp,fp
    f514:	df000017 	ldw	fp,0(sp)
    f518:	dec00104 	addi	sp,sp,4
    f51c:	f800283a 	ret

0000f520 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f520:	defffd04 	addi	sp,sp,-12
    f524:	df000215 	stw	fp,8(sp)
    f528:	df000204 	addi	fp,sp,8
    f52c:	e13ffe15 	stw	r4,-8(fp)
    f530:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f534:	00000506 	br	f54c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f538:	e0bfff17 	ldw	r2,-4(fp)
    f53c:	1090000c 	andi	r2,r2,16384
    f540:	10000226 	beq	r2,zero,f54c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f544:	00bffd44 	movi	r2,-11
    f548:	00000b06 	br	f578 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f54c:	e0bffe17 	ldw	r2,-8(fp)
    f550:	10c00d17 	ldw	r3,52(r2)
    f554:	e0bffe17 	ldw	r2,-8(fp)
    f558:	10800c17 	ldw	r2,48(r2)
    f55c:	18800526 	beq	r3,r2,f574 <altera_avalon_jtag_uart_close+0x54>
    f560:	e0bffe17 	ldw	r2,-8(fp)
    f564:	10c00917 	ldw	r3,36(r2)
    f568:	e0bffe17 	ldw	r2,-8(fp)
    f56c:	10800117 	ldw	r2,4(r2)
    f570:	18bff136 	bltu	r3,r2,f538 <__alt_data_end+0xff00f538>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f574:	0005883a 	mov	r2,zero
}
    f578:	e037883a 	mov	sp,fp
    f57c:	df000017 	ldw	fp,0(sp)
    f580:	dec00104 	addi	sp,sp,4
    f584:	f800283a 	ret

0000f588 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f588:	defffa04 	addi	sp,sp,-24
    f58c:	df000515 	stw	fp,20(sp)
    f590:	df000504 	addi	fp,sp,20
    f594:	e13ffd15 	stw	r4,-12(fp)
    f598:	e17ffe15 	stw	r5,-8(fp)
    f59c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f5a0:	00bff9c4 	movi	r2,-25
    f5a4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f5a8:	e0bffe17 	ldw	r2,-8(fp)
    f5ac:	10da8060 	cmpeqi	r3,r2,27137
    f5b0:	1800031e 	bne	r3,zero,f5c0 <altera_avalon_jtag_uart_ioctl+0x38>
    f5b4:	109a80a0 	cmpeqi	r2,r2,27138
    f5b8:	1000181e 	bne	r2,zero,f61c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    f5bc:	00002906 	br	f664 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f5c0:	e0bffd17 	ldw	r2,-12(fp)
    f5c4:	10c00117 	ldw	r3,4(r2)
    f5c8:	00a00034 	movhi	r2,32768
    f5cc:	10bfffc4 	addi	r2,r2,-1
    f5d0:	18802126 	beq	r3,r2,f658 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    f5d4:	e0bfff17 	ldw	r2,-4(fp)
    f5d8:	10800017 	ldw	r2,0(r2)
    f5dc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f5e0:	e0bffc17 	ldw	r2,-16(fp)
    f5e4:	10800090 	cmplti	r2,r2,2
    f5e8:	1000061e 	bne	r2,zero,f604 <altera_avalon_jtag_uart_ioctl+0x7c>
    f5ec:	e0fffc17 	ldw	r3,-16(fp)
    f5f0:	00a00034 	movhi	r2,32768
    f5f4:	10bfffc4 	addi	r2,r2,-1
    f5f8:	18800226 	beq	r3,r2,f604 <altera_avalon_jtag_uart_ioctl+0x7c>
    f5fc:	e0bffc17 	ldw	r2,-16(fp)
    f600:	00000206 	br	f60c <altera_avalon_jtag_uart_ioctl+0x84>
    f604:	00a00034 	movhi	r2,32768
    f608:	10bfff84 	addi	r2,r2,-2
    f60c:	e0fffd17 	ldw	r3,-12(fp)
    f610:	18800115 	stw	r2,4(r3)
      rc = 0;
    f614:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f618:	00000f06 	br	f658 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f61c:	e0bffd17 	ldw	r2,-12(fp)
    f620:	10c00117 	ldw	r3,4(r2)
    f624:	00a00034 	movhi	r2,32768
    f628:	10bfffc4 	addi	r2,r2,-1
    f62c:	18800c26 	beq	r3,r2,f660 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f630:	e0bffd17 	ldw	r2,-12(fp)
    f634:	10c00917 	ldw	r3,36(r2)
    f638:	e0bffd17 	ldw	r2,-12(fp)
    f63c:	10800117 	ldw	r2,4(r2)
    f640:	1885803a 	cmpltu	r2,r3,r2
    f644:	10c03fcc 	andi	r3,r2,255
    f648:	e0bfff17 	ldw	r2,-4(fp)
    f64c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f650:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f654:	00000206 	br	f660 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    f658:	0001883a 	nop
    f65c:	00000106 	br	f664 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    f660:	0001883a 	nop

  default:
    break;
  }

  return rc;
    f664:	e0bffb17 	ldw	r2,-20(fp)
}
    f668:	e037883a 	mov	sp,fp
    f66c:	df000017 	ldw	fp,0(sp)
    f670:	dec00104 	addi	sp,sp,4
    f674:	f800283a 	ret

0000f678 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f678:	defff304 	addi	sp,sp,-52
    f67c:	dfc00c15 	stw	ra,48(sp)
    f680:	df000b15 	stw	fp,44(sp)
    f684:	df000b04 	addi	fp,sp,44
    f688:	e13ffc15 	stw	r4,-16(fp)
    f68c:	e17ffd15 	stw	r5,-12(fp)
    f690:	e1bffe15 	stw	r6,-8(fp)
    f694:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    f698:	e0bffd17 	ldw	r2,-12(fp)
    f69c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f6a0:	00004706 	br	f7c0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f6a4:	e0bffc17 	ldw	r2,-16(fp)
    f6a8:	10800a17 	ldw	r2,40(r2)
    f6ac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    f6b0:	e0bffc17 	ldw	r2,-16(fp)
    f6b4:	10800b17 	ldw	r2,44(r2)
    f6b8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    f6bc:	e0fff717 	ldw	r3,-36(fp)
    f6c0:	e0bff817 	ldw	r2,-32(fp)
    f6c4:	18800536 	bltu	r3,r2,f6dc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    f6c8:	e0fff717 	ldw	r3,-36(fp)
    f6cc:	e0bff817 	ldw	r2,-32(fp)
    f6d0:	1885c83a 	sub	r2,r3,r2
    f6d4:	e0bff615 	stw	r2,-40(fp)
    f6d8:	00000406 	br	f6ec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f6dc:	00c20004 	movi	r3,2048
    f6e0:	e0bff817 	ldw	r2,-32(fp)
    f6e4:	1885c83a 	sub	r2,r3,r2
    f6e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f6ec:	e0bff617 	ldw	r2,-40(fp)
    f6f0:	10001e26 	beq	r2,zero,f76c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    f6f4:	e0fffe17 	ldw	r3,-8(fp)
    f6f8:	e0bff617 	ldw	r2,-40(fp)
    f6fc:	1880022e 	bgeu	r3,r2,f708 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    f700:	e0bffe17 	ldw	r2,-8(fp)
    f704:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    f708:	e0bffc17 	ldw	r2,-16(fp)
    f70c:	10c00e04 	addi	r3,r2,56
    f710:	e0bff817 	ldw	r2,-32(fp)
    f714:	1885883a 	add	r2,r3,r2
    f718:	e1bff617 	ldw	r6,-40(fp)
    f71c:	100b883a 	mov	r5,r2
    f720:	e13ff517 	ldw	r4,-44(fp)
    f724:	00026940 	call	2694 <memcpy>
      ptr   += n;
    f728:	e0fff517 	ldw	r3,-44(fp)
    f72c:	e0bff617 	ldw	r2,-40(fp)
    f730:	1885883a 	add	r2,r3,r2
    f734:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    f738:	e0fffe17 	ldw	r3,-8(fp)
    f73c:	e0bff617 	ldw	r2,-40(fp)
    f740:	1885c83a 	sub	r2,r3,r2
    f744:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f748:	e0fff817 	ldw	r3,-32(fp)
    f74c:	e0bff617 	ldw	r2,-40(fp)
    f750:	1885883a 	add	r2,r3,r2
    f754:	10c1ffcc 	andi	r3,r2,2047
    f758:	e0bffc17 	ldw	r2,-16(fp)
    f75c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    f760:	e0bffe17 	ldw	r2,-8(fp)
    f764:	00bfcf16 	blt	zero,r2,f6a4 <__alt_data_end+0xff00f6a4>
    f768:	00000106 	br	f770 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    f76c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    f770:	e0fff517 	ldw	r3,-44(fp)
    f774:	e0bffd17 	ldw	r2,-12(fp)
    f778:	1880141e 	bne	r3,r2,f7cc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f77c:	e0bfff17 	ldw	r2,-4(fp)
    f780:	1090000c 	andi	r2,r2,16384
    f784:	1000131e 	bne	r2,zero,f7d4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f788:	0001883a 	nop
    f78c:	e0bffc17 	ldw	r2,-16(fp)
    f790:	10c00a17 	ldw	r3,40(r2)
    f794:	e0bff717 	ldw	r2,-36(fp)
    f798:	1880051e 	bne	r3,r2,f7b0 <altera_avalon_jtag_uart_read+0x138>
    f79c:	e0bffc17 	ldw	r2,-16(fp)
    f7a0:	10c00917 	ldw	r3,36(r2)
    f7a4:	e0bffc17 	ldw	r2,-16(fp)
    f7a8:	10800117 	ldw	r2,4(r2)
    f7ac:	18bff736 	bltu	r3,r2,f78c <__alt_data_end+0xff00f78c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f7b0:	e0bffc17 	ldw	r2,-16(fp)
    f7b4:	10c00a17 	ldw	r3,40(r2)
    f7b8:	e0bff717 	ldw	r2,-36(fp)
    f7bc:	18800726 	beq	r3,r2,f7dc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f7c0:	e0bffe17 	ldw	r2,-8(fp)
    f7c4:	00bfb716 	blt	zero,r2,f6a4 <__alt_data_end+0xff00f6a4>
    f7c8:	00000506 	br	f7e0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    f7cc:	0001883a 	nop
    f7d0:	00000306 	br	f7e0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    f7d4:	0001883a 	nop
    f7d8:	00000106 	br	f7e0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    f7dc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    f7e0:	e0fff517 	ldw	r3,-44(fp)
    f7e4:	e0bffd17 	ldw	r2,-12(fp)
    f7e8:	18801826 	beq	r3,r2,f84c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f7ec:	0005303a 	rdctl	r2,status
    f7f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f7f4:	e0fffb17 	ldw	r3,-20(fp)
    f7f8:	00bfff84 	movi	r2,-2
    f7fc:	1884703a 	and	r2,r3,r2
    f800:	1001703a 	wrctl	status,r2
  
  return context;
    f804:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    f808:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f80c:	e0bffc17 	ldw	r2,-16(fp)
    f810:	10800817 	ldw	r2,32(r2)
    f814:	10c00054 	ori	r3,r2,1
    f818:	e0bffc17 	ldw	r2,-16(fp)
    f81c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f820:	e0bffc17 	ldw	r2,-16(fp)
    f824:	10800017 	ldw	r2,0(r2)
    f828:	10800104 	addi	r2,r2,4
    f82c:	1007883a 	mov	r3,r2
    f830:	e0bffc17 	ldw	r2,-16(fp)
    f834:	10800817 	ldw	r2,32(r2)
    f838:	18800035 	stwio	r2,0(r3)
    f83c:	e0bffa17 	ldw	r2,-24(fp)
    f840:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f844:	e0bff917 	ldw	r2,-28(fp)
    f848:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    f84c:	e0fff517 	ldw	r3,-44(fp)
    f850:	e0bffd17 	ldw	r2,-12(fp)
    f854:	18800426 	beq	r3,r2,f868 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    f858:	e0fff517 	ldw	r3,-44(fp)
    f85c:	e0bffd17 	ldw	r2,-12(fp)
    f860:	1885c83a 	sub	r2,r3,r2
    f864:	00000606 	br	f880 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    f868:	e0bfff17 	ldw	r2,-4(fp)
    f86c:	1090000c 	andi	r2,r2,16384
    f870:	10000226 	beq	r2,zero,f87c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    f874:	00bffd44 	movi	r2,-11
    f878:	00000106 	br	f880 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    f87c:	00bffec4 	movi	r2,-5
}
    f880:	e037883a 	mov	sp,fp
    f884:	dfc00117 	ldw	ra,4(sp)
    f888:	df000017 	ldw	fp,0(sp)
    f88c:	dec00204 	addi	sp,sp,8
    f890:	f800283a 	ret

0000f894 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f894:	defff304 	addi	sp,sp,-52
    f898:	dfc00c15 	stw	ra,48(sp)
    f89c:	df000b15 	stw	fp,44(sp)
    f8a0:	df000b04 	addi	fp,sp,44
    f8a4:	e13ffc15 	stw	r4,-16(fp)
    f8a8:	e17ffd15 	stw	r5,-12(fp)
    f8ac:	e1bffe15 	stw	r6,-8(fp)
    f8b0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    f8b4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    f8b8:	e0bffd17 	ldw	r2,-12(fp)
    f8bc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f8c0:	00003706 	br	f9a0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f8c4:	e0bffc17 	ldw	r2,-16(fp)
    f8c8:	10800c17 	ldw	r2,48(r2)
    f8cc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    f8d0:	e0bffc17 	ldw	r2,-16(fp)
    f8d4:	10800d17 	ldw	r2,52(r2)
    f8d8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    f8dc:	e0fff917 	ldw	r3,-28(fp)
    f8e0:	e0bff517 	ldw	r2,-44(fp)
    f8e4:	1880062e 	bgeu	r3,r2,f900 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    f8e8:	e0fff517 	ldw	r3,-44(fp)
    f8ec:	e0bff917 	ldw	r2,-28(fp)
    f8f0:	1885c83a 	sub	r2,r3,r2
    f8f4:	10bfffc4 	addi	r2,r2,-1
    f8f8:	e0bff615 	stw	r2,-40(fp)
    f8fc:	00000b06 	br	f92c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    f900:	e0bff517 	ldw	r2,-44(fp)
    f904:	10000526 	beq	r2,zero,f91c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f908:	00c20004 	movi	r3,2048
    f90c:	e0bff917 	ldw	r2,-28(fp)
    f910:	1885c83a 	sub	r2,r3,r2
    f914:	e0bff615 	stw	r2,-40(fp)
    f918:	00000406 	br	f92c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f91c:	00c1ffc4 	movi	r3,2047
    f920:	e0bff917 	ldw	r2,-28(fp)
    f924:	1885c83a 	sub	r2,r3,r2
    f928:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f92c:	e0bff617 	ldw	r2,-40(fp)
    f930:	10001e26 	beq	r2,zero,f9ac <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    f934:	e0fffe17 	ldw	r3,-8(fp)
    f938:	e0bff617 	ldw	r2,-40(fp)
    f93c:	1880022e 	bgeu	r3,r2,f948 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    f940:	e0bffe17 	ldw	r2,-8(fp)
    f944:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    f948:	e0bffc17 	ldw	r2,-16(fp)
    f94c:	10c20e04 	addi	r3,r2,2104
    f950:	e0bff917 	ldw	r2,-28(fp)
    f954:	1885883a 	add	r2,r3,r2
    f958:	e1bff617 	ldw	r6,-40(fp)
    f95c:	e17ffd17 	ldw	r5,-12(fp)
    f960:	1009883a 	mov	r4,r2
    f964:	00026940 	call	2694 <memcpy>
      ptr   += n;
    f968:	e0fffd17 	ldw	r3,-12(fp)
    f96c:	e0bff617 	ldw	r2,-40(fp)
    f970:	1885883a 	add	r2,r3,r2
    f974:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    f978:	e0fffe17 	ldw	r3,-8(fp)
    f97c:	e0bff617 	ldw	r2,-40(fp)
    f980:	1885c83a 	sub	r2,r3,r2
    f984:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f988:	e0fff917 	ldw	r3,-28(fp)
    f98c:	e0bff617 	ldw	r2,-40(fp)
    f990:	1885883a 	add	r2,r3,r2
    f994:	10c1ffcc 	andi	r3,r2,2047
    f998:	e0bffc17 	ldw	r2,-16(fp)
    f99c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f9a0:	e0bffe17 	ldw	r2,-8(fp)
    f9a4:	00bfc716 	blt	zero,r2,f8c4 <__alt_data_end+0xff00f8c4>
    f9a8:	00000106 	br	f9b0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    f9ac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f9b0:	0005303a 	rdctl	r2,status
    f9b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f9b8:	e0fffb17 	ldw	r3,-20(fp)
    f9bc:	00bfff84 	movi	r2,-2
    f9c0:	1884703a 	and	r2,r3,r2
    f9c4:	1001703a 	wrctl	status,r2
  
  return context;
    f9c8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    f9cc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f9d0:	e0bffc17 	ldw	r2,-16(fp)
    f9d4:	10800817 	ldw	r2,32(r2)
    f9d8:	10c00094 	ori	r3,r2,2
    f9dc:	e0bffc17 	ldw	r2,-16(fp)
    f9e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f9e4:	e0bffc17 	ldw	r2,-16(fp)
    f9e8:	10800017 	ldw	r2,0(r2)
    f9ec:	10800104 	addi	r2,r2,4
    f9f0:	1007883a 	mov	r3,r2
    f9f4:	e0bffc17 	ldw	r2,-16(fp)
    f9f8:	10800817 	ldw	r2,32(r2)
    f9fc:	18800035 	stwio	r2,0(r3)
    fa00:	e0bffa17 	ldw	r2,-24(fp)
    fa04:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa08:	e0bff817 	ldw	r2,-32(fp)
    fa0c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    fa10:	e0bffe17 	ldw	r2,-8(fp)
    fa14:	0080100e 	bge	zero,r2,fa58 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    fa18:	e0bfff17 	ldw	r2,-4(fp)
    fa1c:	1090000c 	andi	r2,r2,16384
    fa20:	1000101e 	bne	r2,zero,fa64 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    fa24:	0001883a 	nop
    fa28:	e0bffc17 	ldw	r2,-16(fp)
    fa2c:	10c00d17 	ldw	r3,52(r2)
    fa30:	e0bff517 	ldw	r2,-44(fp)
    fa34:	1880051e 	bne	r3,r2,fa4c <altera_avalon_jtag_uart_write+0x1b8>
    fa38:	e0bffc17 	ldw	r2,-16(fp)
    fa3c:	10c00917 	ldw	r3,36(r2)
    fa40:	e0bffc17 	ldw	r2,-16(fp)
    fa44:	10800117 	ldw	r2,4(r2)
    fa48:	18bff736 	bltu	r3,r2,fa28 <__alt_data_end+0xff00fa28>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    fa4c:	e0bffc17 	ldw	r2,-16(fp)
    fa50:	10800917 	ldw	r2,36(r2)
    fa54:	1000051e 	bne	r2,zero,fa6c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    fa58:	e0bffe17 	ldw	r2,-8(fp)
    fa5c:	00bfd016 	blt	zero,r2,f9a0 <__alt_data_end+0xff00f9a0>
    fa60:	00000306 	br	fa70 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    fa64:	0001883a 	nop
    fa68:	00000106 	br	fa70 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    fa6c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    fa70:	e0fffd17 	ldw	r3,-12(fp)
    fa74:	e0bff717 	ldw	r2,-36(fp)
    fa78:	18800426 	beq	r3,r2,fa8c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    fa7c:	e0fffd17 	ldw	r3,-12(fp)
    fa80:	e0bff717 	ldw	r2,-36(fp)
    fa84:	1885c83a 	sub	r2,r3,r2
    fa88:	00000606 	br	faa4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    fa8c:	e0bfff17 	ldw	r2,-4(fp)
    fa90:	1090000c 	andi	r2,r2,16384
    fa94:	10000226 	beq	r2,zero,faa0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    fa98:	00bffd44 	movi	r2,-11
    fa9c:	00000106 	br	faa4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    faa0:	00bffec4 	movi	r2,-5
}
    faa4:	e037883a 	mov	sp,fp
    faa8:	dfc00117 	ldw	ra,4(sp)
    faac:	df000017 	ldw	fp,0(sp)
    fab0:	dec00204 	addi	sp,sp,8
    fab4:	f800283a 	ret

0000fab8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    fab8:	defffa04 	addi	sp,sp,-24
    fabc:	dfc00515 	stw	ra,20(sp)
    fac0:	df000415 	stw	fp,16(sp)
    fac4:	df000404 	addi	fp,sp,16
    fac8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    facc:	0007883a 	mov	r3,zero
    fad0:	e0bfff17 	ldw	r2,-4(fp)
    fad4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    fad8:	e0bfff17 	ldw	r2,-4(fp)
    fadc:	10800104 	addi	r2,r2,4
    fae0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fae4:	0005303a 	rdctl	r2,status
    fae8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    faec:	e0fffd17 	ldw	r3,-12(fp)
    faf0:	00bfff84 	movi	r2,-2
    faf4:	1884703a 	and	r2,r3,r2
    faf8:	1001703a 	wrctl	status,r2
  
  return context;
    fafc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    fb00:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    fb04:	00108340 	call	10834 <alt_tick>
    fb08:	e0bffc17 	ldw	r2,-16(fp)
    fb0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb10:	e0bffe17 	ldw	r2,-8(fp)
    fb14:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    fb18:	0001883a 	nop
    fb1c:	e037883a 	mov	sp,fp
    fb20:	dfc00117 	ldw	ra,4(sp)
    fb24:	df000017 	ldw	fp,0(sp)
    fb28:	dec00204 	addi	sp,sp,8
    fb2c:	f800283a 	ret

0000fb30 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    fb30:	defff804 	addi	sp,sp,-32
    fb34:	dfc00715 	stw	ra,28(sp)
    fb38:	df000615 	stw	fp,24(sp)
    fb3c:	df000604 	addi	fp,sp,24
    fb40:	e13ffc15 	stw	r4,-16(fp)
    fb44:	e17ffd15 	stw	r5,-12(fp)
    fb48:	e1bffe15 	stw	r6,-8(fp)
    fb4c:	e1ffff15 	stw	r7,-4(fp)
    fb50:	e0bfff17 	ldw	r2,-4(fp)
    fb54:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    fb58:	d0a6e217 	ldw	r2,-25720(gp)
    fb5c:	1000021e 	bne	r2,zero,fb68 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    fb60:	e0bffb17 	ldw	r2,-20(fp)
    fb64:	d0a6e215 	stw	r2,-25720(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    fb68:	e0bffc17 	ldw	r2,-16(fp)
    fb6c:	10800104 	addi	r2,r2,4
    fb70:	00c001c4 	movi	r3,7
    fb74:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    fb78:	d8000015 	stw	zero,0(sp)
    fb7c:	e1fffc17 	ldw	r7,-16(fp)
    fb80:	01800074 	movhi	r6,1
    fb84:	31beae04 	addi	r6,r6,-1352
    fb88:	e17ffe17 	ldw	r5,-8(fp)
    fb8c:	e13ffd17 	ldw	r4,-12(fp)
    fb90:	00101640 	call	10164 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    fb94:	0001883a 	nop
    fb98:	e037883a 	mov	sp,fp
    fb9c:	dfc00117 	ldw	ra,4(sp)
    fba0:	df000017 	ldw	fp,0(sp)
    fba4:	dec00204 	addi	sp,sp,8
    fba8:	f800283a 	ret

0000fbac <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    fbac:	defffe04 	addi	sp,sp,-8
    fbb0:	df000115 	stw	fp,4(sp)
    fbb4:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
    fbb8:	d0a6df17 	ldw	r2,-25732(gp)
    fbbc:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
    fbc0:	d0a6e017 	ldw	r2,-25728(gp)
    fbc4:	1000021e 	bne	r2,zero,fbd0 <alt_timestamp_start+0x24>
  {
    return -1;
    fbc8:	00bfffc4 	movi	r2,-1
    fbcc:	00001106 	br	fc14 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    fbd0:	e0bfff17 	ldw	r2,-4(fp)
    fbd4:	10800104 	addi	r2,r2,4
    fbd8:	00c00204 	movi	r3,8
    fbdc:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    fbe0:	e0bfff17 	ldw	r2,-4(fp)
    fbe4:	10800204 	addi	r2,r2,8
    fbe8:	00ffffd4 	movui	r3,65535
    fbec:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    fbf0:	e0bfff17 	ldw	r2,-4(fp)
    fbf4:	10800304 	addi	r2,r2,12
    fbf8:	00ffffd4 	movui	r3,65535
    fbfc:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    fc00:	e0bfff17 	ldw	r2,-4(fp)
    fc04:	10800104 	addi	r2,r2,4
    fc08:	00c00104 	movi	r3,4
    fc0c:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
    fc10:	0005883a 	mov	r2,zero
}
    fc14:	e037883a 	mov	sp,fp
    fc18:	df000017 	ldw	fp,0(sp)
    fc1c:	dec00104 	addi	sp,sp,4
    fc20:	f800283a 	ret

0000fc24 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    fc24:	defffc04 	addi	sp,sp,-16
    fc28:	df000315 	stw	fp,12(sp)
    fc2c:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
    fc30:	d0a6df17 	ldw	r2,-25732(gp)
    fc34:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
    fc38:	d0a6e017 	ldw	r2,-25728(gp)
    fc3c:	1000021e 	bne	r2,zero,fc48 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    fc40:	00bfffc4 	movi	r2,-1
    fc44:	00001306 	br	fc94 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    fc48:	e0bffd17 	ldw	r2,-12(fp)
    fc4c:	10800404 	addi	r2,r2,16
    fc50:	0007883a 	mov	r3,zero
    fc54:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    fc58:	e0bffd17 	ldw	r2,-12(fp)
    fc5c:	10800404 	addi	r2,r2,16
    fc60:	10800037 	ldwio	r2,0(r2)
    fc64:	10bfffcc 	andi	r2,r2,65535
    fc68:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    fc6c:	e0bffd17 	ldw	r2,-12(fp)
    fc70:	10800504 	addi	r2,r2,20
    fc74:	10800037 	ldwio	r2,0(r2)
    fc78:	10bfffcc 	andi	r2,r2,65535
    fc7c:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    fc80:	e0bfff17 	ldw	r2,-4(fp)
    fc84:	1006943a 	slli	r3,r2,16
    fc88:	e0bffe17 	ldw	r2,-8(fp)
    fc8c:	1884b03a 	or	r2,r3,r2
    fc90:	0084303a 	nor	r2,zero,r2
#endif
  }
}
    fc94:	e037883a 	mov	sp,fp
    fc98:	df000017 	ldw	fp,0(sp)
    fc9c:	dec00104 	addi	sp,sp,4
    fca0:	f800283a 	ret

0000fca4 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    fca4:	deffff04 	addi	sp,sp,-4
    fca8:	df000015 	stw	fp,0(sp)
    fcac:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    fcb0:	d0a6e017 	ldw	r2,-25728(gp)
}
    fcb4:	e037883a 	mov	sp,fp
    fcb8:	df000017 	ldw	fp,0(sp)
    fcbc:	dec00104 	addi	sp,sp,4
    fcc0:	f800283a 	ret

0000fcc4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    fcc4:	defff504 	addi	sp,sp,-44
    fcc8:	df000a15 	stw	fp,40(sp)
    fccc:	df000a04 	addi	fp,sp,40
    fcd0:	e13ffc15 	stw	r4,-16(fp)
    fcd4:	e17ffd15 	stw	r5,-12(fp)
    fcd8:	e1bffe15 	stw	r6,-8(fp)
    fcdc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    fce0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    fce4:	d0a6e217 	ldw	r2,-25720(gp)
  
  if (alt_ticks_per_second ())
    fce8:	10003c26 	beq	r2,zero,fddc <alt_alarm_start+0x118>
  {
    if (alarm)
    fcec:	e0bffc17 	ldw	r2,-16(fp)
    fcf0:	10003826 	beq	r2,zero,fdd4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    fcf4:	e0bffc17 	ldw	r2,-16(fp)
    fcf8:	e0fffe17 	ldw	r3,-8(fp)
    fcfc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    fd00:	e0bffc17 	ldw	r2,-16(fp)
    fd04:	e0ffff17 	ldw	r3,-4(fp)
    fd08:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd0c:	0005303a 	rdctl	r2,status
    fd10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd14:	e0fff917 	ldw	r3,-28(fp)
    fd18:	00bfff84 	movi	r2,-2
    fd1c:	1884703a 	and	r2,r3,r2
    fd20:	1001703a 	wrctl	status,r2
  
  return context;
    fd24:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    fd28:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    fd2c:	d0a6e317 	ldw	r2,-25716(gp)
      
      current_nticks = alt_nticks();
    fd30:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    fd34:	e0fffd17 	ldw	r3,-12(fp)
    fd38:	e0bff617 	ldw	r2,-40(fp)
    fd3c:	1885883a 	add	r2,r3,r2
    fd40:	10c00044 	addi	r3,r2,1
    fd44:	e0bffc17 	ldw	r2,-16(fp)
    fd48:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    fd4c:	e0bffc17 	ldw	r2,-16(fp)
    fd50:	10c00217 	ldw	r3,8(r2)
    fd54:	e0bff617 	ldw	r2,-40(fp)
    fd58:	1880042e 	bgeu	r3,r2,fd6c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    fd5c:	e0bffc17 	ldw	r2,-16(fp)
    fd60:	00c00044 	movi	r3,1
    fd64:	10c00405 	stb	r3,16(r2)
    fd68:	00000206 	br	fd74 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    fd6c:	e0bffc17 	ldw	r2,-16(fp)
    fd70:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    fd74:	e0bffc17 	ldw	r2,-16(fp)
    fd78:	d0e00e04 	addi	r3,gp,-32712
    fd7c:	e0fffa15 	stw	r3,-24(fp)
    fd80:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fd84:	e0bffb17 	ldw	r2,-20(fp)
    fd88:	e0fffa17 	ldw	r3,-24(fp)
    fd8c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fd90:	e0bffa17 	ldw	r2,-24(fp)
    fd94:	10c00017 	ldw	r3,0(r2)
    fd98:	e0bffb17 	ldw	r2,-20(fp)
    fd9c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fda0:	e0bffa17 	ldw	r2,-24(fp)
    fda4:	10800017 	ldw	r2,0(r2)
    fda8:	e0fffb17 	ldw	r3,-20(fp)
    fdac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fdb0:	e0bffa17 	ldw	r2,-24(fp)
    fdb4:	e0fffb17 	ldw	r3,-20(fp)
    fdb8:	10c00015 	stw	r3,0(r2)
    fdbc:	e0bff817 	ldw	r2,-32(fp)
    fdc0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fdc4:	e0bff717 	ldw	r2,-36(fp)
    fdc8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    fdcc:	0005883a 	mov	r2,zero
    fdd0:	00000306 	br	fde0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    fdd4:	00bffa84 	movi	r2,-22
    fdd8:	00000106 	br	fde0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    fddc:	00bfde84 	movi	r2,-134
  }
}
    fde0:	e037883a 	mov	sp,fp
    fde4:	df000017 	ldw	fp,0(sp)
    fde8:	dec00104 	addi	sp,sp,4
    fdec:	f800283a 	ret

0000fdf0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    fdf0:	defffa04 	addi	sp,sp,-24
    fdf4:	dfc00515 	stw	ra,20(sp)
    fdf8:	df000415 	stw	fp,16(sp)
    fdfc:	df000404 	addi	fp,sp,16
    fe00:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    fe04:	008000c4 	movi	r2,3
    fe08:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    fe0c:	e0fffd17 	ldw	r3,-12(fp)
    fe10:	008003f4 	movhi	r2,15
    fe14:	10909004 	addi	r2,r2,16960
    fe18:	1885383a 	mul	r2,r3,r2
    fe1c:	100b883a 	mov	r5,r2
    fe20:	0100bef4 	movhi	r4,763
    fe24:	213c2004 	addi	r4,r4,-3968
    fe28:	0001da40 	call	1da4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    fe2c:	100b883a 	mov	r5,r2
    fe30:	01200034 	movhi	r4,32768
    fe34:	213fffc4 	addi	r4,r4,-1
    fe38:	0001da40 	call	1da4 <__udivsi3>
    fe3c:	100b883a 	mov	r5,r2
    fe40:	e13fff17 	ldw	r4,-4(fp)
    fe44:	0001da40 	call	1da4 <__udivsi3>
    fe48:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    fe4c:	e0bffe17 	ldw	r2,-8(fp)
    fe50:	10002a26 	beq	r2,zero,fefc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    fe54:	e03ffc15 	stw	zero,-16(fp)
    fe58:	00001706 	br	feb8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    fe5c:	00a00034 	movhi	r2,32768
    fe60:	10bfffc4 	addi	r2,r2,-1
    fe64:	10bfffc4 	addi	r2,r2,-1
    fe68:	103ffe1e 	bne	r2,zero,fe64 <__alt_data_end+0xff00fe64>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    fe6c:	e0fffd17 	ldw	r3,-12(fp)
    fe70:	008003f4 	movhi	r2,15
    fe74:	10909004 	addi	r2,r2,16960
    fe78:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    fe7c:	100b883a 	mov	r5,r2
    fe80:	0100bef4 	movhi	r4,763
    fe84:	213c2004 	addi	r4,r4,-3968
    fe88:	0001da40 	call	1da4 <__udivsi3>
    fe8c:	100b883a 	mov	r5,r2
    fe90:	01200034 	movhi	r4,32768
    fe94:	213fffc4 	addi	r4,r4,-1
    fe98:	0001da40 	call	1da4 <__udivsi3>
    fe9c:	1007883a 	mov	r3,r2
    fea0:	e0bfff17 	ldw	r2,-4(fp)
    fea4:	10c5c83a 	sub	r2,r2,r3
    fea8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    feac:	e0bffc17 	ldw	r2,-16(fp)
    feb0:	10800044 	addi	r2,r2,1
    feb4:	e0bffc15 	stw	r2,-16(fp)
    feb8:	e0fffc17 	ldw	r3,-16(fp)
    febc:	e0bffe17 	ldw	r2,-8(fp)
    fec0:	18bfe616 	blt	r3,r2,fe5c <__alt_data_end+0xff00fe5c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fec4:	e0fffd17 	ldw	r3,-12(fp)
    fec8:	008003f4 	movhi	r2,15
    fecc:	10909004 	addi	r2,r2,16960
    fed0:	1885383a 	mul	r2,r3,r2
    fed4:	100b883a 	mov	r5,r2
    fed8:	0100bef4 	movhi	r4,763
    fedc:	213c2004 	addi	r4,r4,-3968
    fee0:	0001da40 	call	1da4 <__udivsi3>
    fee4:	1007883a 	mov	r3,r2
    fee8:	e0bfff17 	ldw	r2,-4(fp)
    feec:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    fef0:	10bfffc4 	addi	r2,r2,-1
    fef4:	103ffe1e 	bne	r2,zero,fef0 <__alt_data_end+0xff00fef0>
    fef8:	00000d06 	br	ff30 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fefc:	e0fffd17 	ldw	r3,-12(fp)
    ff00:	008003f4 	movhi	r2,15
    ff04:	10909004 	addi	r2,r2,16960
    ff08:	1885383a 	mul	r2,r3,r2
    ff0c:	100b883a 	mov	r5,r2
    ff10:	0100bef4 	movhi	r4,763
    ff14:	213c2004 	addi	r4,r4,-3968
    ff18:	0001da40 	call	1da4 <__udivsi3>
    ff1c:	1007883a 	mov	r3,r2
    ff20:	e0bfff17 	ldw	r2,-4(fp)
    ff24:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    ff28:	10bfffc4 	addi	r2,r2,-1
    ff2c:	00bffe16 	blt	zero,r2,ff28 <__alt_data_end+0xff00ff28>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    ff30:	0005883a 	mov	r2,zero
}
    ff34:	e037883a 	mov	sp,fp
    ff38:	dfc00117 	ldw	ra,4(sp)
    ff3c:	df000017 	ldw	fp,0(sp)
    ff40:	dec00204 	addi	sp,sp,8
    ff44:	f800283a 	ret

0000ff48 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    ff48:	defffe04 	addi	sp,sp,-8
    ff4c:	df000115 	stw	fp,4(sp)
    ff50:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    ff54:	e03fff15 	stw	zero,-4(fp)
    ff58:	00000506 	br	ff70 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    ff5c:	e0bfff17 	ldw	r2,-4(fp)
    ff60:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    ff64:	e0bfff17 	ldw	r2,-4(fp)
    ff68:	10800804 	addi	r2,r2,32
    ff6c:	e0bfff15 	stw	r2,-4(fp)
    ff70:	e0bfff17 	ldw	r2,-4(fp)
    ff74:	10900030 	cmpltui	r2,r2,16384
    ff78:	103ff81e 	bne	r2,zero,ff5c <__alt_data_end+0xff00ff5c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    ff7c:	0001883a 	nop
    ff80:	e037883a 	mov	sp,fp
    ff84:	df000017 	ldw	fp,0(sp)
    ff88:	dec00104 	addi	sp,sp,4
    ff8c:	f800283a 	ret

0000ff90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ff90:	defffe04 	addi	sp,sp,-8
    ff94:	dfc00115 	stw	ra,4(sp)
    ff98:	df000015 	stw	fp,0(sp)
    ff9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ffa0:	d0a00b17 	ldw	r2,-32724(gp)
    ffa4:	10000326 	beq	r2,zero,ffb4 <alt_get_errno+0x24>
    ffa8:	d0a00b17 	ldw	r2,-32724(gp)
    ffac:	103ee83a 	callr	r2
    ffb0:	00000106 	br	ffb8 <alt_get_errno+0x28>
    ffb4:	d0a6d804 	addi	r2,gp,-25760
}
    ffb8:	e037883a 	mov	sp,fp
    ffbc:	dfc00117 	ldw	ra,4(sp)
    ffc0:	df000017 	ldw	fp,0(sp)
    ffc4:	dec00204 	addi	sp,sp,8
    ffc8:	f800283a 	ret

0000ffcc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    ffcc:	defffa04 	addi	sp,sp,-24
    ffd0:	dfc00515 	stw	ra,20(sp)
    ffd4:	df000415 	stw	fp,16(sp)
    ffd8:	df000404 	addi	fp,sp,16
    ffdc:	e13ffe15 	stw	r4,-8(fp)
    ffe0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    ffe4:	e0bffe17 	ldw	r2,-8(fp)
    ffe8:	10000326 	beq	r2,zero,fff8 <alt_dev_llist_insert+0x2c>
    ffec:	e0bffe17 	ldw	r2,-8(fp)
    fff0:	10800217 	ldw	r2,8(r2)
    fff4:	1000061e 	bne	r2,zero,10010 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    fff8:	000ff900 	call	ff90 <alt_get_errno>
    fffc:	1007883a 	mov	r3,r2
   10000:	00800584 	movi	r2,22
   10004:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10008:	00bffa84 	movi	r2,-22
   1000c:	00001306 	br	1005c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10010:	e0bffe17 	ldw	r2,-8(fp)
   10014:	e0ffff17 	ldw	r3,-4(fp)
   10018:	e0fffc15 	stw	r3,-16(fp)
   1001c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10020:	e0bffd17 	ldw	r2,-12(fp)
   10024:	e0fffc17 	ldw	r3,-16(fp)
   10028:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1002c:	e0bffc17 	ldw	r2,-16(fp)
   10030:	10c00017 	ldw	r3,0(r2)
   10034:	e0bffd17 	ldw	r2,-12(fp)
   10038:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1003c:	e0bffc17 	ldw	r2,-16(fp)
   10040:	10800017 	ldw	r2,0(r2)
   10044:	e0fffd17 	ldw	r3,-12(fp)
   10048:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1004c:	e0bffc17 	ldw	r2,-16(fp)
   10050:	e0fffd17 	ldw	r3,-12(fp)
   10054:	10c00015 	stw	r3,0(r2)

  return 0;  
   10058:	0005883a 	mov	r2,zero
}
   1005c:	e037883a 	mov	sp,fp
   10060:	dfc00117 	ldw	ra,4(sp)
   10064:	df000017 	ldw	fp,0(sp)
   10068:	dec00204 	addi	sp,sp,8
   1006c:	f800283a 	ret

00010070 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10070:	defffd04 	addi	sp,sp,-12
   10074:	dfc00215 	stw	ra,8(sp)
   10078:	df000115 	stw	fp,4(sp)
   1007c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10080:	00800074 	movhi	r2,1
   10084:	10841604 	addi	r2,r2,4184
   10088:	e0bfff15 	stw	r2,-4(fp)
   1008c:	00000606 	br	100a8 <_do_ctors+0x38>
        (*ctor) (); 
   10090:	e0bfff17 	ldw	r2,-4(fp)
   10094:	10800017 	ldw	r2,0(r2)
   10098:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1009c:	e0bfff17 	ldw	r2,-4(fp)
   100a0:	10bfff04 	addi	r2,r2,-4
   100a4:	e0bfff15 	stw	r2,-4(fp)
   100a8:	e0ffff17 	ldw	r3,-4(fp)
   100ac:	00800074 	movhi	r2,1
   100b0:	10841704 	addi	r2,r2,4188
   100b4:	18bff62e 	bgeu	r3,r2,10090 <__alt_data_end+0xff010090>
        (*ctor) (); 
}
   100b8:	0001883a 	nop
   100bc:	e037883a 	mov	sp,fp
   100c0:	dfc00117 	ldw	ra,4(sp)
   100c4:	df000017 	ldw	fp,0(sp)
   100c8:	dec00204 	addi	sp,sp,8
   100cc:	f800283a 	ret

000100d0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   100d0:	defffd04 	addi	sp,sp,-12
   100d4:	dfc00215 	stw	ra,8(sp)
   100d8:	df000115 	stw	fp,4(sp)
   100dc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   100e0:	00800074 	movhi	r2,1
   100e4:	10841604 	addi	r2,r2,4184
   100e8:	e0bfff15 	stw	r2,-4(fp)
   100ec:	00000606 	br	10108 <_do_dtors+0x38>
        (*dtor) (); 
   100f0:	e0bfff17 	ldw	r2,-4(fp)
   100f4:	10800017 	ldw	r2,0(r2)
   100f8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   100fc:	e0bfff17 	ldw	r2,-4(fp)
   10100:	10bfff04 	addi	r2,r2,-4
   10104:	e0bfff15 	stw	r2,-4(fp)
   10108:	e0ffff17 	ldw	r3,-4(fp)
   1010c:	00800074 	movhi	r2,1
   10110:	10841704 	addi	r2,r2,4188
   10114:	18bff62e 	bgeu	r3,r2,100f0 <__alt_data_end+0xff0100f0>
        (*dtor) (); 
}
   10118:	0001883a 	nop
   1011c:	e037883a 	mov	sp,fp
   10120:	dfc00117 	ldw	ra,4(sp)
   10124:	df000017 	ldw	fp,0(sp)
   10128:	dec00204 	addi	sp,sp,8
   1012c:	f800283a 	ret

00010130 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10130:	defffe04 	addi	sp,sp,-8
   10134:	dfc00115 	stw	ra,4(sp)
   10138:	df000015 	stw	fp,0(sp)
   1013c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10140:	01500004 	movi	r5,16384
   10144:	0009883a 	mov	r4,zero
   10148:	0010b9c0 	call	10b9c <alt_icache_flush>
#endif
}
   1014c:	0001883a 	nop
   10150:	e037883a 	mov	sp,fp
   10154:	dfc00117 	ldw	ra,4(sp)
   10158:	df000017 	ldw	fp,0(sp)
   1015c:	dec00204 	addi	sp,sp,8
   10160:	f800283a 	ret

00010164 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10164:	defff904 	addi	sp,sp,-28
   10168:	dfc00615 	stw	ra,24(sp)
   1016c:	df000515 	stw	fp,20(sp)
   10170:	df000504 	addi	fp,sp,20
   10174:	e13ffc15 	stw	r4,-16(fp)
   10178:	e17ffd15 	stw	r5,-12(fp)
   1017c:	e1bffe15 	stw	r6,-8(fp)
   10180:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10184:	e0800217 	ldw	r2,8(fp)
   10188:	d8800015 	stw	r2,0(sp)
   1018c:	e1ffff17 	ldw	r7,-4(fp)
   10190:	e1bffe17 	ldw	r6,-8(fp)
   10194:	e17ffd17 	ldw	r5,-12(fp)
   10198:	e13ffc17 	ldw	r4,-16(fp)
   1019c:	00103140 	call	10314 <alt_iic_isr_register>
}  
   101a0:	e037883a 	mov	sp,fp
   101a4:	dfc00117 	ldw	ra,4(sp)
   101a8:	df000017 	ldw	fp,0(sp)
   101ac:	dec00204 	addi	sp,sp,8
   101b0:	f800283a 	ret

000101b4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   101b4:	defff904 	addi	sp,sp,-28
   101b8:	df000615 	stw	fp,24(sp)
   101bc:	df000604 	addi	fp,sp,24
   101c0:	e13ffe15 	stw	r4,-8(fp)
   101c4:	e17fff15 	stw	r5,-4(fp)
   101c8:	e0bfff17 	ldw	r2,-4(fp)
   101cc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   101d0:	0005303a 	rdctl	r2,status
   101d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   101d8:	e0fffb17 	ldw	r3,-20(fp)
   101dc:	00bfff84 	movi	r2,-2
   101e0:	1884703a 	and	r2,r3,r2
   101e4:	1001703a 	wrctl	status,r2
  
  return context;
   101e8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   101ec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   101f0:	00c00044 	movi	r3,1
   101f4:	e0bffa17 	ldw	r2,-24(fp)
   101f8:	1884983a 	sll	r2,r3,r2
   101fc:	1007883a 	mov	r3,r2
   10200:	d0a6e117 	ldw	r2,-25724(gp)
   10204:	1884b03a 	or	r2,r3,r2
   10208:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1020c:	d0a6e117 	ldw	r2,-25724(gp)
   10210:	100170fa 	wrctl	ienable,r2
   10214:	e0bffc17 	ldw	r2,-16(fp)
   10218:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1021c:	e0bffd17 	ldw	r2,-12(fp)
   10220:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10224:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10228:	0001883a 	nop
}
   1022c:	e037883a 	mov	sp,fp
   10230:	df000017 	ldw	fp,0(sp)
   10234:	dec00104 	addi	sp,sp,4
   10238:	f800283a 	ret

0001023c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1023c:	defff904 	addi	sp,sp,-28
   10240:	df000615 	stw	fp,24(sp)
   10244:	df000604 	addi	fp,sp,24
   10248:	e13ffe15 	stw	r4,-8(fp)
   1024c:	e17fff15 	stw	r5,-4(fp)
   10250:	e0bfff17 	ldw	r2,-4(fp)
   10254:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10258:	0005303a 	rdctl	r2,status
   1025c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10260:	e0fffb17 	ldw	r3,-20(fp)
   10264:	00bfff84 	movi	r2,-2
   10268:	1884703a 	and	r2,r3,r2
   1026c:	1001703a 	wrctl	status,r2
  
  return context;
   10270:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10274:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10278:	00c00044 	movi	r3,1
   1027c:	e0bffa17 	ldw	r2,-24(fp)
   10280:	1884983a 	sll	r2,r3,r2
   10284:	0084303a 	nor	r2,zero,r2
   10288:	1007883a 	mov	r3,r2
   1028c:	d0a6e117 	ldw	r2,-25724(gp)
   10290:	1884703a 	and	r2,r3,r2
   10294:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10298:	d0a6e117 	ldw	r2,-25724(gp)
   1029c:	100170fa 	wrctl	ienable,r2
   102a0:	e0bffc17 	ldw	r2,-16(fp)
   102a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   102a8:	e0bffd17 	ldw	r2,-12(fp)
   102ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   102b0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   102b4:	0001883a 	nop
}
   102b8:	e037883a 	mov	sp,fp
   102bc:	df000017 	ldw	fp,0(sp)
   102c0:	dec00104 	addi	sp,sp,4
   102c4:	f800283a 	ret

000102c8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   102c8:	defffc04 	addi	sp,sp,-16
   102cc:	df000315 	stw	fp,12(sp)
   102d0:	df000304 	addi	fp,sp,12
   102d4:	e13ffe15 	stw	r4,-8(fp)
   102d8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   102dc:	000530fa 	rdctl	r2,ienable
   102e0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   102e4:	00c00044 	movi	r3,1
   102e8:	e0bfff17 	ldw	r2,-4(fp)
   102ec:	1884983a 	sll	r2,r3,r2
   102f0:	1007883a 	mov	r3,r2
   102f4:	e0bffd17 	ldw	r2,-12(fp)
   102f8:	1884703a 	and	r2,r3,r2
   102fc:	1004c03a 	cmpne	r2,r2,zero
   10300:	10803fcc 	andi	r2,r2,255
}
   10304:	e037883a 	mov	sp,fp
   10308:	df000017 	ldw	fp,0(sp)
   1030c:	dec00104 	addi	sp,sp,4
   10310:	f800283a 	ret

00010314 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10314:	defff504 	addi	sp,sp,-44
   10318:	dfc00a15 	stw	ra,40(sp)
   1031c:	df000915 	stw	fp,36(sp)
   10320:	df000904 	addi	fp,sp,36
   10324:	e13ffc15 	stw	r4,-16(fp)
   10328:	e17ffd15 	stw	r5,-12(fp)
   1032c:	e1bffe15 	stw	r6,-8(fp)
   10330:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10334:	00bffa84 	movi	r2,-22
   10338:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1033c:	e0bffd17 	ldw	r2,-12(fp)
   10340:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10344:	e0bff817 	ldw	r2,-32(fp)
   10348:	10800808 	cmpgei	r2,r2,32
   1034c:	1000271e 	bne	r2,zero,103ec <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10350:	0005303a 	rdctl	r2,status
   10354:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10358:	e0fffb17 	ldw	r3,-20(fp)
   1035c:	00bfff84 	movi	r2,-2
   10360:	1884703a 	and	r2,r3,r2
   10364:	1001703a 	wrctl	status,r2
  
  return context;
   10368:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1036c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10370:	00800074 	movhi	r2,1
   10374:	10939904 	addi	r2,r2,20068
   10378:	e0fff817 	ldw	r3,-32(fp)
   1037c:	180690fa 	slli	r3,r3,3
   10380:	10c5883a 	add	r2,r2,r3
   10384:	e0fffe17 	ldw	r3,-8(fp)
   10388:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1038c:	00800074 	movhi	r2,1
   10390:	10939904 	addi	r2,r2,20068
   10394:	e0fff817 	ldw	r3,-32(fp)
   10398:	180690fa 	slli	r3,r3,3
   1039c:	10c5883a 	add	r2,r2,r3
   103a0:	10800104 	addi	r2,r2,4
   103a4:	e0ffff17 	ldw	r3,-4(fp)
   103a8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   103ac:	e0bffe17 	ldw	r2,-8(fp)
   103b0:	10000526 	beq	r2,zero,103c8 <alt_iic_isr_register+0xb4>
   103b4:	e0bff817 	ldw	r2,-32(fp)
   103b8:	100b883a 	mov	r5,r2
   103bc:	e13ffc17 	ldw	r4,-16(fp)
   103c0:	00101b40 	call	101b4 <alt_ic_irq_enable>
   103c4:	00000406 	br	103d8 <alt_iic_isr_register+0xc4>
   103c8:	e0bff817 	ldw	r2,-32(fp)
   103cc:	100b883a 	mov	r5,r2
   103d0:	e13ffc17 	ldw	r4,-16(fp)
   103d4:	001023c0 	call	1023c <alt_ic_irq_disable>
   103d8:	e0bff715 	stw	r2,-36(fp)
   103dc:	e0bffa17 	ldw	r2,-24(fp)
   103e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   103e4:	e0bff917 	ldw	r2,-28(fp)
   103e8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   103ec:	e0bff717 	ldw	r2,-36(fp)
}
   103f0:	e037883a 	mov	sp,fp
   103f4:	dfc00117 	ldw	ra,4(sp)
   103f8:	df000017 	ldw	fp,0(sp)
   103fc:	dec00204 	addi	sp,sp,8
   10400:	f800283a 	ret

00010404 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10404:	defff904 	addi	sp,sp,-28
   10408:	dfc00615 	stw	ra,24(sp)
   1040c:	df000515 	stw	fp,20(sp)
   10410:	df000504 	addi	fp,sp,20
   10414:	e13ffc15 	stw	r4,-16(fp)
   10418:	e17ffd15 	stw	r5,-12(fp)
   1041c:	e1bffe15 	stw	r6,-8(fp)
   10420:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   10424:	e1bfff17 	ldw	r6,-4(fp)
   10428:	e17ffe17 	ldw	r5,-8(fp)
   1042c:	e13ffd17 	ldw	r4,-12(fp)
   10430:	00106440 	call	10644 <open>
   10434:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   10438:	e0bffb17 	ldw	r2,-20(fp)
   1043c:	10001c16 	blt	r2,zero,104b0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   10440:	00800074 	movhi	r2,1
   10444:	10883204 	addi	r2,r2,8392
   10448:	e0fffb17 	ldw	r3,-20(fp)
   1044c:	18c00324 	muli	r3,r3,12
   10450:	10c5883a 	add	r2,r2,r3
   10454:	10c00017 	ldw	r3,0(r2)
   10458:	e0bffc17 	ldw	r2,-16(fp)
   1045c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10460:	00800074 	movhi	r2,1
   10464:	10883204 	addi	r2,r2,8392
   10468:	e0fffb17 	ldw	r3,-20(fp)
   1046c:	18c00324 	muli	r3,r3,12
   10470:	10c5883a 	add	r2,r2,r3
   10474:	10800104 	addi	r2,r2,4
   10478:	10c00017 	ldw	r3,0(r2)
   1047c:	e0bffc17 	ldw	r2,-16(fp)
   10480:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10484:	00800074 	movhi	r2,1
   10488:	10883204 	addi	r2,r2,8392
   1048c:	e0fffb17 	ldw	r3,-20(fp)
   10490:	18c00324 	muli	r3,r3,12
   10494:	10c5883a 	add	r2,r2,r3
   10498:	10800204 	addi	r2,r2,8
   1049c:	10c00017 	ldw	r3,0(r2)
   104a0:	e0bffc17 	ldw	r2,-16(fp)
   104a4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   104a8:	e13ffb17 	ldw	r4,-20(fp)
   104ac:	000ecf00 	call	ecf0 <alt_release_fd>
  }
} 
   104b0:	0001883a 	nop
   104b4:	e037883a 	mov	sp,fp
   104b8:	dfc00117 	ldw	ra,4(sp)
   104bc:	df000017 	ldw	fp,0(sp)
   104c0:	dec00204 	addi	sp,sp,8
   104c4:	f800283a 	ret

000104c8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   104c8:	defffb04 	addi	sp,sp,-20
   104cc:	dfc00415 	stw	ra,16(sp)
   104d0:	df000315 	stw	fp,12(sp)
   104d4:	df000304 	addi	fp,sp,12
   104d8:	e13ffd15 	stw	r4,-12(fp)
   104dc:	e17ffe15 	stw	r5,-8(fp)
   104e0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   104e4:	01c07fc4 	movi	r7,511
   104e8:	01800044 	movi	r6,1
   104ec:	e17ffd17 	ldw	r5,-12(fp)
   104f0:	01000074 	movhi	r4,1
   104f4:	21083504 	addi	r4,r4,8404
   104f8:	00104040 	call	10404 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   104fc:	01c07fc4 	movi	r7,511
   10500:	000d883a 	mov	r6,zero
   10504:	e17ffe17 	ldw	r5,-8(fp)
   10508:	01000074 	movhi	r4,1
   1050c:	21083204 	addi	r4,r4,8392
   10510:	00104040 	call	10404 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10514:	01c07fc4 	movi	r7,511
   10518:	01800044 	movi	r6,1
   1051c:	e17fff17 	ldw	r5,-4(fp)
   10520:	01000074 	movhi	r4,1
   10524:	21083804 	addi	r4,r4,8416
   10528:	00104040 	call	10404 <alt_open_fd>
}  
   1052c:	0001883a 	nop
   10530:	e037883a 	mov	sp,fp
   10534:	dfc00117 	ldw	ra,4(sp)
   10538:	df000017 	ldw	fp,0(sp)
   1053c:	dec00204 	addi	sp,sp,8
   10540:	f800283a 	ret

00010544 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10544:	defffe04 	addi	sp,sp,-8
   10548:	dfc00115 	stw	ra,4(sp)
   1054c:	df000015 	stw	fp,0(sp)
   10550:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10554:	d0a00b17 	ldw	r2,-32724(gp)
   10558:	10000326 	beq	r2,zero,10568 <alt_get_errno+0x24>
   1055c:	d0a00b17 	ldw	r2,-32724(gp)
   10560:	103ee83a 	callr	r2
   10564:	00000106 	br	1056c <alt_get_errno+0x28>
   10568:	d0a6d804 	addi	r2,gp,-25760
}
   1056c:	e037883a 	mov	sp,fp
   10570:	dfc00117 	ldw	ra,4(sp)
   10574:	df000017 	ldw	fp,0(sp)
   10578:	dec00204 	addi	sp,sp,8
   1057c:	f800283a 	ret

00010580 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10580:	defffd04 	addi	sp,sp,-12
   10584:	df000215 	stw	fp,8(sp)
   10588:	df000204 	addi	fp,sp,8
   1058c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10590:	e0bfff17 	ldw	r2,-4(fp)
   10594:	10800217 	ldw	r2,8(r2)
   10598:	10d00034 	orhi	r3,r2,16384
   1059c:	e0bfff17 	ldw	r2,-4(fp)
   105a0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   105a4:	e03ffe15 	stw	zero,-8(fp)
   105a8:	00001d06 	br	10620 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   105ac:	00800074 	movhi	r2,1
   105b0:	10883204 	addi	r2,r2,8392
   105b4:	e0fffe17 	ldw	r3,-8(fp)
   105b8:	18c00324 	muli	r3,r3,12
   105bc:	10c5883a 	add	r2,r2,r3
   105c0:	10c00017 	ldw	r3,0(r2)
   105c4:	e0bfff17 	ldw	r2,-4(fp)
   105c8:	10800017 	ldw	r2,0(r2)
   105cc:	1880111e 	bne	r3,r2,10614 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   105d0:	00800074 	movhi	r2,1
   105d4:	10883204 	addi	r2,r2,8392
   105d8:	e0fffe17 	ldw	r3,-8(fp)
   105dc:	18c00324 	muli	r3,r3,12
   105e0:	10c5883a 	add	r2,r2,r3
   105e4:	10800204 	addi	r2,r2,8
   105e8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   105ec:	1000090e 	bge	r2,zero,10614 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   105f0:	e0bffe17 	ldw	r2,-8(fp)
   105f4:	10c00324 	muli	r3,r2,12
   105f8:	00800074 	movhi	r2,1
   105fc:	10883204 	addi	r2,r2,8392
   10600:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10604:	e0bfff17 	ldw	r2,-4(fp)
   10608:	18800226 	beq	r3,r2,10614 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1060c:	00bffcc4 	movi	r2,-13
   10610:	00000806 	br	10634 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10614:	e0bffe17 	ldw	r2,-8(fp)
   10618:	10800044 	addi	r2,r2,1
   1061c:	e0bffe15 	stw	r2,-8(fp)
   10620:	d0a00a17 	ldw	r2,-32728(gp)
   10624:	1007883a 	mov	r3,r2
   10628:	e0bffe17 	ldw	r2,-8(fp)
   1062c:	18bfdf2e 	bgeu	r3,r2,105ac <__alt_data_end+0xff0105ac>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10630:	0005883a 	mov	r2,zero
}
   10634:	e037883a 	mov	sp,fp
   10638:	df000017 	ldw	fp,0(sp)
   1063c:	dec00104 	addi	sp,sp,4
   10640:	f800283a 	ret

00010644 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10644:	defff604 	addi	sp,sp,-40
   10648:	dfc00915 	stw	ra,36(sp)
   1064c:	df000815 	stw	fp,32(sp)
   10650:	df000804 	addi	fp,sp,32
   10654:	e13ffd15 	stw	r4,-12(fp)
   10658:	e17ffe15 	stw	r5,-8(fp)
   1065c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10660:	00bfffc4 	movi	r2,-1
   10664:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10668:	00bffb44 	movi	r2,-19
   1066c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10670:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10674:	d1600804 	addi	r5,gp,-32736
   10678:	e13ffd17 	ldw	r4,-12(fp)
   1067c:	00109600 	call	10960 <alt_find_dev>
   10680:	e0bff815 	stw	r2,-32(fp)
   10684:	e0bff817 	ldw	r2,-32(fp)
   10688:	1000051e 	bne	r2,zero,106a0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1068c:	e13ffd17 	ldw	r4,-12(fp)
   10690:	00109f00 	call	109f0 <alt_find_file>
   10694:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10698:	00800044 	movi	r2,1
   1069c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   106a0:	e0bff817 	ldw	r2,-32(fp)
   106a4:	10002926 	beq	r2,zero,1074c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   106a8:	e13ff817 	ldw	r4,-32(fp)
   106ac:	0010af80 	call	10af8 <alt_get_fd>
   106b0:	e0bff915 	stw	r2,-28(fp)
   106b4:	e0bff917 	ldw	r2,-28(fp)
   106b8:	1000030e 	bge	r2,zero,106c8 <open+0x84>
    {
      status = index;
   106bc:	e0bff917 	ldw	r2,-28(fp)
   106c0:	e0bffa15 	stw	r2,-24(fp)
   106c4:	00002306 	br	10754 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   106c8:	e0bff917 	ldw	r2,-28(fp)
   106cc:	10c00324 	muli	r3,r2,12
   106d0:	00800074 	movhi	r2,1
   106d4:	10883204 	addi	r2,r2,8392
   106d8:	1885883a 	add	r2,r3,r2
   106dc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   106e0:	e0fffe17 	ldw	r3,-8(fp)
   106e4:	00900034 	movhi	r2,16384
   106e8:	10bfffc4 	addi	r2,r2,-1
   106ec:	1886703a 	and	r3,r3,r2
   106f0:	e0bffc17 	ldw	r2,-16(fp)
   106f4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   106f8:	e0bffb17 	ldw	r2,-20(fp)
   106fc:	1000051e 	bne	r2,zero,10714 <open+0xd0>
   10700:	e13ffc17 	ldw	r4,-16(fp)
   10704:	00105800 	call	10580 <alt_file_locked>
   10708:	e0bffa15 	stw	r2,-24(fp)
   1070c:	e0bffa17 	ldw	r2,-24(fp)
   10710:	10001016 	blt	r2,zero,10754 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10714:	e0bff817 	ldw	r2,-32(fp)
   10718:	10800317 	ldw	r2,12(r2)
   1071c:	10000826 	beq	r2,zero,10740 <open+0xfc>
   10720:	e0bff817 	ldw	r2,-32(fp)
   10724:	10800317 	ldw	r2,12(r2)
   10728:	e1ffff17 	ldw	r7,-4(fp)
   1072c:	e1bffe17 	ldw	r6,-8(fp)
   10730:	e17ffd17 	ldw	r5,-12(fp)
   10734:	e13ffc17 	ldw	r4,-16(fp)
   10738:	103ee83a 	callr	r2
   1073c:	00000106 	br	10744 <open+0x100>
   10740:	0005883a 	mov	r2,zero
   10744:	e0bffa15 	stw	r2,-24(fp)
   10748:	00000206 	br	10754 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1074c:	00bffb44 	movi	r2,-19
   10750:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10754:	e0bffa17 	ldw	r2,-24(fp)
   10758:	1000090e 	bge	r2,zero,10780 <open+0x13c>
  {
    alt_release_fd (index);  
   1075c:	e13ff917 	ldw	r4,-28(fp)
   10760:	000ecf00 	call	ecf0 <alt_release_fd>
    ALT_ERRNO = -status;
   10764:	00105440 	call	10544 <alt_get_errno>
   10768:	1007883a 	mov	r3,r2
   1076c:	e0bffa17 	ldw	r2,-24(fp)
   10770:	0085c83a 	sub	r2,zero,r2
   10774:	18800015 	stw	r2,0(r3)
    return -1;
   10778:	00bfffc4 	movi	r2,-1
   1077c:	00000106 	br	10784 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   10780:	e0bff917 	ldw	r2,-28(fp)
}
   10784:	e037883a 	mov	sp,fp
   10788:	dfc00117 	ldw	ra,4(sp)
   1078c:	df000017 	ldw	fp,0(sp)
   10790:	dec00204 	addi	sp,sp,8
   10794:	f800283a 	ret

00010798 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10798:	defffa04 	addi	sp,sp,-24
   1079c:	df000515 	stw	fp,20(sp)
   107a0:	df000504 	addi	fp,sp,20
   107a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107a8:	0005303a 	rdctl	r2,status
   107ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   107b0:	e0fffc17 	ldw	r3,-16(fp)
   107b4:	00bfff84 	movi	r2,-2
   107b8:	1884703a 	and	r2,r3,r2
   107bc:	1001703a 	wrctl	status,r2
  
  return context;
   107c0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   107c4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   107c8:	e0bfff17 	ldw	r2,-4(fp)
   107cc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   107d0:	e0bffd17 	ldw	r2,-12(fp)
   107d4:	10800017 	ldw	r2,0(r2)
   107d8:	e0fffd17 	ldw	r3,-12(fp)
   107dc:	18c00117 	ldw	r3,4(r3)
   107e0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   107e4:	e0bffd17 	ldw	r2,-12(fp)
   107e8:	10800117 	ldw	r2,4(r2)
   107ec:	e0fffd17 	ldw	r3,-12(fp)
   107f0:	18c00017 	ldw	r3,0(r3)
   107f4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   107f8:	e0bffd17 	ldw	r2,-12(fp)
   107fc:	e0fffd17 	ldw	r3,-12(fp)
   10800:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   10804:	e0bffd17 	ldw	r2,-12(fp)
   10808:	e0fffd17 	ldw	r3,-12(fp)
   1080c:	10c00015 	stw	r3,0(r2)
   10810:	e0bffb17 	ldw	r2,-20(fp)
   10814:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10818:	e0bffe17 	ldw	r2,-8(fp)
   1081c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10820:	0001883a 	nop
   10824:	e037883a 	mov	sp,fp
   10828:	df000017 	ldw	fp,0(sp)
   1082c:	dec00104 	addi	sp,sp,4
   10830:	f800283a 	ret

00010834 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10834:	defffb04 	addi	sp,sp,-20
   10838:	dfc00415 	stw	ra,16(sp)
   1083c:	df000315 	stw	fp,12(sp)
   10840:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10844:	d0a00e17 	ldw	r2,-32712(gp)
   10848:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1084c:	d0a6e317 	ldw	r2,-25716(gp)
   10850:	10800044 	addi	r2,r2,1
   10854:	d0a6e315 	stw	r2,-25716(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10858:	00002e06 	br	10914 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1085c:	e0bffd17 	ldw	r2,-12(fp)
   10860:	10800017 	ldw	r2,0(r2)
   10864:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10868:	e0bffd17 	ldw	r2,-12(fp)
   1086c:	10800403 	ldbu	r2,16(r2)
   10870:	10803fcc 	andi	r2,r2,255
   10874:	10000426 	beq	r2,zero,10888 <alt_tick+0x54>
   10878:	d0a6e317 	ldw	r2,-25716(gp)
   1087c:	1000021e 	bne	r2,zero,10888 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10880:	e0bffd17 	ldw	r2,-12(fp)
   10884:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10888:	e0bffd17 	ldw	r2,-12(fp)
   1088c:	10800217 	ldw	r2,8(r2)
   10890:	d0e6e317 	ldw	r3,-25716(gp)
   10894:	18801d36 	bltu	r3,r2,1090c <alt_tick+0xd8>
   10898:	e0bffd17 	ldw	r2,-12(fp)
   1089c:	10800403 	ldbu	r2,16(r2)
   108a0:	10803fcc 	andi	r2,r2,255
   108a4:	1000191e 	bne	r2,zero,1090c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   108a8:	e0bffd17 	ldw	r2,-12(fp)
   108ac:	10800317 	ldw	r2,12(r2)
   108b0:	e0fffd17 	ldw	r3,-12(fp)
   108b4:	18c00517 	ldw	r3,20(r3)
   108b8:	1809883a 	mov	r4,r3
   108bc:	103ee83a 	callr	r2
   108c0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   108c4:	e0bfff17 	ldw	r2,-4(fp)
   108c8:	1000031e 	bne	r2,zero,108d8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   108cc:	e13ffd17 	ldw	r4,-12(fp)
   108d0:	00107980 	call	10798 <alt_alarm_stop>
   108d4:	00000d06 	br	1090c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   108d8:	e0bffd17 	ldw	r2,-12(fp)
   108dc:	10c00217 	ldw	r3,8(r2)
   108e0:	e0bfff17 	ldw	r2,-4(fp)
   108e4:	1887883a 	add	r3,r3,r2
   108e8:	e0bffd17 	ldw	r2,-12(fp)
   108ec:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   108f0:	e0bffd17 	ldw	r2,-12(fp)
   108f4:	10c00217 	ldw	r3,8(r2)
   108f8:	d0a6e317 	ldw	r2,-25716(gp)
   108fc:	1880032e 	bgeu	r3,r2,1090c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   10900:	e0bffd17 	ldw	r2,-12(fp)
   10904:	00c00044 	movi	r3,1
   10908:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1090c:	e0bffe17 	ldw	r2,-8(fp)
   10910:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10914:	e0fffd17 	ldw	r3,-12(fp)
   10918:	d0a00e04 	addi	r2,gp,-32712
   1091c:	18bfcf1e 	bne	r3,r2,1085c <__alt_data_end+0xff01085c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10920:	0001883a 	nop
}
   10924:	0001883a 	nop
   10928:	e037883a 	mov	sp,fp
   1092c:	dfc00117 	ldw	ra,4(sp)
   10930:	df000017 	ldw	fp,0(sp)
   10934:	dec00204 	addi	sp,sp,8
   10938:	f800283a 	ret

0001093c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1093c:	deffff04 	addi	sp,sp,-4
   10940:	df000015 	stw	fp,0(sp)
   10944:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10948:	000170fa 	wrctl	ienable,zero
}
   1094c:	0001883a 	nop
   10950:	e037883a 	mov	sp,fp
   10954:	df000017 	ldw	fp,0(sp)
   10958:	dec00104 	addi	sp,sp,4
   1095c:	f800283a 	ret

00010960 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10960:	defffa04 	addi	sp,sp,-24
   10964:	dfc00515 	stw	ra,20(sp)
   10968:	df000415 	stw	fp,16(sp)
   1096c:	df000404 	addi	fp,sp,16
   10970:	e13ffe15 	stw	r4,-8(fp)
   10974:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10978:	e0bfff17 	ldw	r2,-4(fp)
   1097c:	10800017 	ldw	r2,0(r2)
   10980:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10984:	e13ffe17 	ldw	r4,-8(fp)
   10988:	00029700 	call	2970 <strlen>
   1098c:	10800044 	addi	r2,r2,1
   10990:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10994:	00000d06 	br	109cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10998:	e0bffc17 	ldw	r2,-16(fp)
   1099c:	10800217 	ldw	r2,8(r2)
   109a0:	e0fffd17 	ldw	r3,-12(fp)
   109a4:	180d883a 	mov	r6,r3
   109a8:	e17ffe17 	ldw	r5,-8(fp)
   109ac:	1009883a 	mov	r4,r2
   109b0:	0010d140 	call	10d14 <memcmp>
   109b4:	1000021e 	bne	r2,zero,109c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   109b8:	e0bffc17 	ldw	r2,-16(fp)
   109bc:	00000706 	br	109dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   109c0:	e0bffc17 	ldw	r2,-16(fp)
   109c4:	10800017 	ldw	r2,0(r2)
   109c8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   109cc:	e0fffc17 	ldw	r3,-16(fp)
   109d0:	e0bfff17 	ldw	r2,-4(fp)
   109d4:	18bff01e 	bne	r3,r2,10998 <__alt_data_end+0xff010998>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   109d8:	0005883a 	mov	r2,zero
}
   109dc:	e037883a 	mov	sp,fp
   109e0:	dfc00117 	ldw	ra,4(sp)
   109e4:	df000017 	ldw	fp,0(sp)
   109e8:	dec00204 	addi	sp,sp,8
   109ec:	f800283a 	ret

000109f0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   109f0:	defffb04 	addi	sp,sp,-20
   109f4:	dfc00415 	stw	ra,16(sp)
   109f8:	df000315 	stw	fp,12(sp)
   109fc:	df000304 	addi	fp,sp,12
   10a00:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10a04:	d0a00617 	ldw	r2,-32744(gp)
   10a08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10a0c:	00003106 	br	10ad4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   10a10:	e0bffd17 	ldw	r2,-12(fp)
   10a14:	10800217 	ldw	r2,8(r2)
   10a18:	1009883a 	mov	r4,r2
   10a1c:	00029700 	call	2970 <strlen>
   10a20:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10a24:	e0bffd17 	ldw	r2,-12(fp)
   10a28:	10c00217 	ldw	r3,8(r2)
   10a2c:	e0bffe17 	ldw	r2,-8(fp)
   10a30:	10bfffc4 	addi	r2,r2,-1
   10a34:	1885883a 	add	r2,r3,r2
   10a38:	10800003 	ldbu	r2,0(r2)
   10a3c:	10803fcc 	andi	r2,r2,255
   10a40:	1080201c 	xori	r2,r2,128
   10a44:	10bfe004 	addi	r2,r2,-128
   10a48:	10800bd8 	cmpnei	r2,r2,47
   10a4c:	1000031e 	bne	r2,zero,10a5c <alt_find_file+0x6c>
    {
      len -= 1;
   10a50:	e0bffe17 	ldw	r2,-8(fp)
   10a54:	10bfffc4 	addi	r2,r2,-1
   10a58:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10a5c:	e0bffe17 	ldw	r2,-8(fp)
   10a60:	e0ffff17 	ldw	r3,-4(fp)
   10a64:	1885883a 	add	r2,r3,r2
   10a68:	10800003 	ldbu	r2,0(r2)
   10a6c:	10803fcc 	andi	r2,r2,255
   10a70:	1080201c 	xori	r2,r2,128
   10a74:	10bfe004 	addi	r2,r2,-128
   10a78:	10800be0 	cmpeqi	r2,r2,47
   10a7c:	1000081e 	bne	r2,zero,10aa0 <alt_find_file+0xb0>
   10a80:	e0bffe17 	ldw	r2,-8(fp)
   10a84:	e0ffff17 	ldw	r3,-4(fp)
   10a88:	1885883a 	add	r2,r3,r2
   10a8c:	10800003 	ldbu	r2,0(r2)
   10a90:	10803fcc 	andi	r2,r2,255
   10a94:	1080201c 	xori	r2,r2,128
   10a98:	10bfe004 	addi	r2,r2,-128
   10a9c:	10000a1e 	bne	r2,zero,10ac8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   10aa0:	e0bffd17 	ldw	r2,-12(fp)
   10aa4:	10800217 	ldw	r2,8(r2)
   10aa8:	e0fffe17 	ldw	r3,-8(fp)
   10aac:	180d883a 	mov	r6,r3
   10ab0:	e17fff17 	ldw	r5,-4(fp)
   10ab4:	1009883a 	mov	r4,r2
   10ab8:	0010d140 	call	10d14 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10abc:	1000021e 	bne	r2,zero,10ac8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10ac0:	e0bffd17 	ldw	r2,-12(fp)
   10ac4:	00000706 	br	10ae4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   10ac8:	e0bffd17 	ldw	r2,-12(fp)
   10acc:	10800017 	ldw	r2,0(r2)
   10ad0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10ad4:	e0fffd17 	ldw	r3,-12(fp)
   10ad8:	d0a00604 	addi	r2,gp,-32744
   10adc:	18bfcc1e 	bne	r3,r2,10a10 <__alt_data_end+0xff010a10>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10ae0:	0005883a 	mov	r2,zero
}
   10ae4:	e037883a 	mov	sp,fp
   10ae8:	dfc00117 	ldw	ra,4(sp)
   10aec:	df000017 	ldw	fp,0(sp)
   10af0:	dec00204 	addi	sp,sp,8
   10af4:	f800283a 	ret

00010af8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10af8:	defffc04 	addi	sp,sp,-16
   10afc:	df000315 	stw	fp,12(sp)
   10b00:	df000304 	addi	fp,sp,12
   10b04:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10b08:	00bffa04 	movi	r2,-24
   10b0c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10b10:	e03ffd15 	stw	zero,-12(fp)
   10b14:	00001906 	br	10b7c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   10b18:	00800074 	movhi	r2,1
   10b1c:	10883204 	addi	r2,r2,8392
   10b20:	e0fffd17 	ldw	r3,-12(fp)
   10b24:	18c00324 	muli	r3,r3,12
   10b28:	10c5883a 	add	r2,r2,r3
   10b2c:	10800017 	ldw	r2,0(r2)
   10b30:	10000f1e 	bne	r2,zero,10b70 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   10b34:	00800074 	movhi	r2,1
   10b38:	10883204 	addi	r2,r2,8392
   10b3c:	e0fffd17 	ldw	r3,-12(fp)
   10b40:	18c00324 	muli	r3,r3,12
   10b44:	10c5883a 	add	r2,r2,r3
   10b48:	e0ffff17 	ldw	r3,-4(fp)
   10b4c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10b50:	d0e00a17 	ldw	r3,-32728(gp)
   10b54:	e0bffd17 	ldw	r2,-12(fp)
   10b58:	1880020e 	bge	r3,r2,10b64 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   10b5c:	e0bffd17 	ldw	r2,-12(fp)
   10b60:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   10b64:	e0bffd17 	ldw	r2,-12(fp)
   10b68:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   10b6c:	00000606 	br	10b88 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10b70:	e0bffd17 	ldw	r2,-12(fp)
   10b74:	10800044 	addi	r2,r2,1
   10b78:	e0bffd15 	stw	r2,-12(fp)
   10b7c:	e0bffd17 	ldw	r2,-12(fp)
   10b80:	10800810 	cmplti	r2,r2,32
   10b84:	103fe41e 	bne	r2,zero,10b18 <__alt_data_end+0xff010b18>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10b88:	e0bffe17 	ldw	r2,-8(fp)
}
   10b8c:	e037883a 	mov	sp,fp
   10b90:	df000017 	ldw	fp,0(sp)
   10b94:	dec00104 	addi	sp,sp,4
   10b98:	f800283a 	ret

00010b9c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   10b9c:	defffb04 	addi	sp,sp,-20
   10ba0:	df000415 	stw	fp,16(sp)
   10ba4:	df000404 	addi	fp,sp,16
   10ba8:	e13ffe15 	stw	r4,-8(fp)
   10bac:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   10bb0:	e0bfff17 	ldw	r2,-4(fp)
   10bb4:	10900070 	cmpltui	r2,r2,16385
   10bb8:	1000021e 	bne	r2,zero,10bc4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   10bbc:	00900004 	movi	r2,16384
   10bc0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   10bc4:	e0fffe17 	ldw	r3,-8(fp)
   10bc8:	e0bfff17 	ldw	r2,-4(fp)
   10bcc:	1885883a 	add	r2,r3,r2
   10bd0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10bd4:	e0bffe17 	ldw	r2,-8(fp)
   10bd8:	e0bffc15 	stw	r2,-16(fp)
   10bdc:	00000506 	br	10bf4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10be0:	e0bffc17 	ldw	r2,-16(fp)
   10be4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10be8:	e0bffc17 	ldw	r2,-16(fp)
   10bec:	10800804 	addi	r2,r2,32
   10bf0:	e0bffc15 	stw	r2,-16(fp)
   10bf4:	e0fffc17 	ldw	r3,-16(fp)
   10bf8:	e0bffd17 	ldw	r2,-12(fp)
   10bfc:	18bff836 	bltu	r3,r2,10be0 <__alt_data_end+0xff010be0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10c00:	e0bffe17 	ldw	r2,-8(fp)
   10c04:	108007cc 	andi	r2,r2,31
   10c08:	10000226 	beq	r2,zero,10c14 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10c0c:	e0bffc17 	ldw	r2,-16(fp)
   10c10:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10c14:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10c18:	0001883a 	nop
   10c1c:	e037883a 	mov	sp,fp
   10c20:	df000017 	ldw	fp,0(sp)
   10c24:	dec00104 	addi	sp,sp,4
   10c28:	f800283a 	ret

00010c2c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10c2c:	defffe04 	addi	sp,sp,-8
   10c30:	df000115 	stw	fp,4(sp)
   10c34:	df000104 	addi	fp,sp,4
   10c38:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10c3c:	e0bfff17 	ldw	r2,-4(fp)
   10c40:	10bffe84 	addi	r2,r2,-6
   10c44:	10c00428 	cmpgeui	r3,r2,16
   10c48:	18001a1e 	bne	r3,zero,10cb4 <alt_exception_cause_generated_bad_addr+0x88>
   10c4c:	100690ba 	slli	r3,r2,2
   10c50:	00800074 	movhi	r2,1
   10c54:	10831904 	addi	r2,r2,3172
   10c58:	1885883a 	add	r2,r3,r2
   10c5c:	10800017 	ldw	r2,0(r2)
   10c60:	1000683a 	jmp	r2
   10c64:	00010ca4 	muli	zero,zero,1074
   10c68:	00010ca4 	muli	zero,zero,1074
   10c6c:	00010cb4 	movhi	zero,1074
   10c70:	00010cb4 	movhi	zero,1074
   10c74:	00010cb4 	movhi	zero,1074
   10c78:	00010ca4 	muli	zero,zero,1074
   10c7c:	00010cac 	andhi	zero,zero,1074
   10c80:	00010cb4 	movhi	zero,1074
   10c84:	00010ca4 	muli	zero,zero,1074
   10c88:	00010ca4 	muli	zero,zero,1074
   10c8c:	00010cb4 	movhi	zero,1074
   10c90:	00010ca4 	muli	zero,zero,1074
   10c94:	00010cac 	andhi	zero,zero,1074
   10c98:	00010cb4 	movhi	zero,1074
   10c9c:	00010cb4 	movhi	zero,1074
   10ca0:	00010ca4 	muli	zero,zero,1074
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10ca4:	00800044 	movi	r2,1
   10ca8:	00000306 	br	10cb8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10cac:	0005883a 	mov	r2,zero
   10cb0:	00000106 	br	10cb8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10cb4:	0005883a 	mov	r2,zero
  }
}
   10cb8:	e037883a 	mov	sp,fp
   10cbc:	df000017 	ldw	fp,0(sp)
   10cc0:	dec00104 	addi	sp,sp,4
   10cc4:	f800283a 	ret

00010cc8 <atexit>:
   10cc8:	200b883a 	mov	r5,r4
   10ccc:	000f883a 	mov	r7,zero
   10cd0:	000d883a 	mov	r6,zero
   10cd4:	0009883a 	mov	r4,zero
   10cd8:	0010d901 	jmpi	10d90 <__register_exitproc>

00010cdc <exit>:
   10cdc:	defffe04 	addi	sp,sp,-8
   10ce0:	000b883a 	mov	r5,zero
   10ce4:	dc000015 	stw	r16,0(sp)
   10ce8:	dfc00115 	stw	ra,4(sp)
   10cec:	2021883a 	mov	r16,r4
   10cf0:	0010ea80 	call	10ea8 <__call_exitprocs>
   10cf4:	00800074 	movhi	r2,1
   10cf8:	108cac04 	addi	r2,r2,12976
   10cfc:	11000017 	ldw	r4,0(r2)
   10d00:	20800f17 	ldw	r2,60(r4)
   10d04:	10000126 	beq	r2,zero,10d0c <exit+0x30>
   10d08:	103ee83a 	callr	r2
   10d0c:	8009883a 	mov	r4,r16
   10d10:	00110280 	call	11028 <_exit>

00010d14 <memcmp>:
   10d14:	01c000c4 	movi	r7,3
   10d18:	3980192e 	bgeu	r7,r6,10d80 <memcmp+0x6c>
   10d1c:	2144b03a 	or	r2,r4,r5
   10d20:	11c4703a 	and	r2,r2,r7
   10d24:	10000f26 	beq	r2,zero,10d64 <memcmp+0x50>
   10d28:	20800003 	ldbu	r2,0(r4)
   10d2c:	28c00003 	ldbu	r3,0(r5)
   10d30:	10c0151e 	bne	r2,r3,10d88 <memcmp+0x74>
   10d34:	31bfff84 	addi	r6,r6,-2
   10d38:	01ffffc4 	movi	r7,-1
   10d3c:	00000406 	br	10d50 <memcmp+0x3c>
   10d40:	20800003 	ldbu	r2,0(r4)
   10d44:	28c00003 	ldbu	r3,0(r5)
   10d48:	31bfffc4 	addi	r6,r6,-1
   10d4c:	10c00e1e 	bne	r2,r3,10d88 <memcmp+0x74>
   10d50:	21000044 	addi	r4,r4,1
   10d54:	29400044 	addi	r5,r5,1
   10d58:	31fff91e 	bne	r6,r7,10d40 <__alt_data_end+0xff010d40>
   10d5c:	0005883a 	mov	r2,zero
   10d60:	f800283a 	ret
   10d64:	20c00017 	ldw	r3,0(r4)
   10d68:	28800017 	ldw	r2,0(r5)
   10d6c:	18bfee1e 	bne	r3,r2,10d28 <__alt_data_end+0xff010d28>
   10d70:	31bfff04 	addi	r6,r6,-4
   10d74:	21000104 	addi	r4,r4,4
   10d78:	29400104 	addi	r5,r5,4
   10d7c:	39bff936 	bltu	r7,r6,10d64 <__alt_data_end+0xff010d64>
   10d80:	303fe91e 	bne	r6,zero,10d28 <__alt_data_end+0xff010d28>
   10d84:	003ff506 	br	10d5c <__alt_data_end+0xff010d5c>
   10d88:	10c5c83a 	sub	r2,r2,r3
   10d8c:	f800283a 	ret

00010d90 <__register_exitproc>:
   10d90:	defffa04 	addi	sp,sp,-24
   10d94:	dc000315 	stw	r16,12(sp)
   10d98:	04000074 	movhi	r16,1
   10d9c:	840cac04 	addi	r16,r16,12976
   10da0:	80c00017 	ldw	r3,0(r16)
   10da4:	dc400415 	stw	r17,16(sp)
   10da8:	dfc00515 	stw	ra,20(sp)
   10dac:	18805217 	ldw	r2,328(r3)
   10db0:	2023883a 	mov	r17,r4
   10db4:	10003726 	beq	r2,zero,10e94 <__register_exitproc+0x104>
   10db8:	10c00117 	ldw	r3,4(r2)
   10dbc:	010007c4 	movi	r4,31
   10dc0:	20c00e16 	blt	r4,r3,10dfc <__register_exitproc+0x6c>
   10dc4:	1a000044 	addi	r8,r3,1
   10dc8:	8800221e 	bne	r17,zero,10e54 <__register_exitproc+0xc4>
   10dcc:	18c00084 	addi	r3,r3,2
   10dd0:	18c7883a 	add	r3,r3,r3
   10dd4:	18c7883a 	add	r3,r3,r3
   10dd8:	12000115 	stw	r8,4(r2)
   10ddc:	10c7883a 	add	r3,r2,r3
   10de0:	19400015 	stw	r5,0(r3)
   10de4:	0005883a 	mov	r2,zero
   10de8:	dfc00517 	ldw	ra,20(sp)
   10dec:	dc400417 	ldw	r17,16(sp)
   10df0:	dc000317 	ldw	r16,12(sp)
   10df4:	dec00604 	addi	sp,sp,24
   10df8:	f800283a 	ret
   10dfc:	00800034 	movhi	r2,0
   10e00:	10879804 	addi	r2,r2,7776
   10e04:	10002626 	beq	r2,zero,10ea0 <__register_exitproc+0x110>
   10e08:	01006404 	movi	r4,400
   10e0c:	d9400015 	stw	r5,0(sp)
   10e10:	d9800115 	stw	r6,4(sp)
   10e14:	d9c00215 	stw	r7,8(sp)
   10e18:	0001e600 	call	1e60 <malloc>
   10e1c:	d9400017 	ldw	r5,0(sp)
   10e20:	d9800117 	ldw	r6,4(sp)
   10e24:	d9c00217 	ldw	r7,8(sp)
   10e28:	10001d26 	beq	r2,zero,10ea0 <__register_exitproc+0x110>
   10e2c:	81000017 	ldw	r4,0(r16)
   10e30:	10000115 	stw	zero,4(r2)
   10e34:	02000044 	movi	r8,1
   10e38:	22405217 	ldw	r9,328(r4)
   10e3c:	0007883a 	mov	r3,zero
   10e40:	12400015 	stw	r9,0(r2)
   10e44:	20805215 	stw	r2,328(r4)
   10e48:	10006215 	stw	zero,392(r2)
   10e4c:	10006315 	stw	zero,396(r2)
   10e50:	883fde26 	beq	r17,zero,10dcc <__alt_data_end+0xff010dcc>
   10e54:	18c9883a 	add	r4,r3,r3
   10e58:	2109883a 	add	r4,r4,r4
   10e5c:	1109883a 	add	r4,r2,r4
   10e60:	21802215 	stw	r6,136(r4)
   10e64:	01800044 	movi	r6,1
   10e68:	12406217 	ldw	r9,392(r2)
   10e6c:	30cc983a 	sll	r6,r6,r3
   10e70:	4992b03a 	or	r9,r9,r6
   10e74:	12406215 	stw	r9,392(r2)
   10e78:	21c04215 	stw	r7,264(r4)
   10e7c:	01000084 	movi	r4,2
   10e80:	893fd21e 	bne	r17,r4,10dcc <__alt_data_end+0xff010dcc>
   10e84:	11006317 	ldw	r4,396(r2)
   10e88:	218cb03a 	or	r6,r4,r6
   10e8c:	11806315 	stw	r6,396(r2)
   10e90:	003fce06 	br	10dcc <__alt_data_end+0xff010dcc>
   10e94:	18805304 	addi	r2,r3,332
   10e98:	18805215 	stw	r2,328(r3)
   10e9c:	003fc606 	br	10db8 <__alt_data_end+0xff010db8>
   10ea0:	00bfffc4 	movi	r2,-1
   10ea4:	003fd006 	br	10de8 <__alt_data_end+0xff010de8>

00010ea8 <__call_exitprocs>:
   10ea8:	defff504 	addi	sp,sp,-44
   10eac:	df000915 	stw	fp,36(sp)
   10eb0:	dd400615 	stw	r21,24(sp)
   10eb4:	dc800315 	stw	r18,12(sp)
   10eb8:	dfc00a15 	stw	ra,40(sp)
   10ebc:	ddc00815 	stw	r23,32(sp)
   10ec0:	dd800715 	stw	r22,28(sp)
   10ec4:	dd000515 	stw	r20,20(sp)
   10ec8:	dcc00415 	stw	r19,16(sp)
   10ecc:	dc400215 	stw	r17,8(sp)
   10ed0:	dc000115 	stw	r16,4(sp)
   10ed4:	d9000015 	stw	r4,0(sp)
   10ed8:	2839883a 	mov	fp,r5
   10edc:	04800044 	movi	r18,1
   10ee0:	057fffc4 	movi	r21,-1
   10ee4:	00800074 	movhi	r2,1
   10ee8:	108cac04 	addi	r2,r2,12976
   10eec:	12000017 	ldw	r8,0(r2)
   10ef0:	45005217 	ldw	r20,328(r8)
   10ef4:	44c05204 	addi	r19,r8,328
   10ef8:	a0001c26 	beq	r20,zero,10f6c <__call_exitprocs+0xc4>
   10efc:	a0800117 	ldw	r2,4(r20)
   10f00:	15ffffc4 	addi	r23,r2,-1
   10f04:	b8000d16 	blt	r23,zero,10f3c <__call_exitprocs+0x94>
   10f08:	14000044 	addi	r16,r2,1
   10f0c:	8421883a 	add	r16,r16,r16
   10f10:	8421883a 	add	r16,r16,r16
   10f14:	84402004 	addi	r17,r16,128
   10f18:	a463883a 	add	r17,r20,r17
   10f1c:	a421883a 	add	r16,r20,r16
   10f20:	e0001e26 	beq	fp,zero,10f9c <__call_exitprocs+0xf4>
   10f24:	80804017 	ldw	r2,256(r16)
   10f28:	e0801c26 	beq	fp,r2,10f9c <__call_exitprocs+0xf4>
   10f2c:	bdffffc4 	addi	r23,r23,-1
   10f30:	843fff04 	addi	r16,r16,-4
   10f34:	8c7fff04 	addi	r17,r17,-4
   10f38:	bd7ff91e 	bne	r23,r21,10f20 <__alt_data_end+0xff010f20>
   10f3c:	00800034 	movhi	r2,0
   10f40:	10879d04 	addi	r2,r2,7796
   10f44:	10000926 	beq	r2,zero,10f6c <__call_exitprocs+0xc4>
   10f48:	a0800117 	ldw	r2,4(r20)
   10f4c:	1000301e 	bne	r2,zero,11010 <__call_exitprocs+0x168>
   10f50:	a0800017 	ldw	r2,0(r20)
   10f54:	10003226 	beq	r2,zero,11020 <__call_exitprocs+0x178>
   10f58:	a009883a 	mov	r4,r20
   10f5c:	98800015 	stw	r2,0(r19)
   10f60:	0001e740 	call	1e74 <free>
   10f64:	9d000017 	ldw	r20,0(r19)
   10f68:	a03fe41e 	bne	r20,zero,10efc <__alt_data_end+0xff010efc>
   10f6c:	dfc00a17 	ldw	ra,40(sp)
   10f70:	df000917 	ldw	fp,36(sp)
   10f74:	ddc00817 	ldw	r23,32(sp)
   10f78:	dd800717 	ldw	r22,28(sp)
   10f7c:	dd400617 	ldw	r21,24(sp)
   10f80:	dd000517 	ldw	r20,20(sp)
   10f84:	dcc00417 	ldw	r19,16(sp)
   10f88:	dc800317 	ldw	r18,12(sp)
   10f8c:	dc400217 	ldw	r17,8(sp)
   10f90:	dc000117 	ldw	r16,4(sp)
   10f94:	dec00b04 	addi	sp,sp,44
   10f98:	f800283a 	ret
   10f9c:	a0800117 	ldw	r2,4(r20)
   10fa0:	80c00017 	ldw	r3,0(r16)
   10fa4:	10bfffc4 	addi	r2,r2,-1
   10fa8:	15c01426 	beq	r2,r23,10ffc <__call_exitprocs+0x154>
   10fac:	80000015 	stw	zero,0(r16)
   10fb0:	183fde26 	beq	r3,zero,10f2c <__alt_data_end+0xff010f2c>
   10fb4:	95c8983a 	sll	r4,r18,r23
   10fb8:	a0806217 	ldw	r2,392(r20)
   10fbc:	a5800117 	ldw	r22,4(r20)
   10fc0:	2084703a 	and	r2,r4,r2
   10fc4:	10000b26 	beq	r2,zero,10ff4 <__call_exitprocs+0x14c>
   10fc8:	a0806317 	ldw	r2,396(r20)
   10fcc:	2088703a 	and	r4,r4,r2
   10fd0:	20000c1e 	bne	r4,zero,11004 <__call_exitprocs+0x15c>
   10fd4:	89400017 	ldw	r5,0(r17)
   10fd8:	d9000017 	ldw	r4,0(sp)
   10fdc:	183ee83a 	callr	r3
   10fe0:	a0800117 	ldw	r2,4(r20)
   10fe4:	15bfbf1e 	bne	r2,r22,10ee4 <__alt_data_end+0xff010ee4>
   10fe8:	98800017 	ldw	r2,0(r19)
   10fec:	153fcf26 	beq	r2,r20,10f2c <__alt_data_end+0xff010f2c>
   10ff0:	003fbc06 	br	10ee4 <__alt_data_end+0xff010ee4>
   10ff4:	183ee83a 	callr	r3
   10ff8:	003ff906 	br	10fe0 <__alt_data_end+0xff010fe0>
   10ffc:	a5c00115 	stw	r23,4(r20)
   11000:	003feb06 	br	10fb0 <__alt_data_end+0xff010fb0>
   11004:	89000017 	ldw	r4,0(r17)
   11008:	183ee83a 	callr	r3
   1100c:	003ff406 	br	10fe0 <__alt_data_end+0xff010fe0>
   11010:	a0800017 	ldw	r2,0(r20)
   11014:	a027883a 	mov	r19,r20
   11018:	1029883a 	mov	r20,r2
   1101c:	003fb606 	br	10ef8 <__alt_data_end+0xff010ef8>
   11020:	0005883a 	mov	r2,zero
   11024:	003ffb06 	br	11014 <__alt_data_end+0xff011014>

00011028 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11028:	defffd04 	addi	sp,sp,-12
   1102c:	df000215 	stw	fp,8(sp)
   11030:	df000204 	addi	fp,sp,8
   11034:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11038:	0001883a 	nop
   1103c:	e0bfff17 	ldw	r2,-4(fp)
   11040:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11044:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11048:	10000226 	beq	r2,zero,11054 <_exit+0x2c>
    ALT_SIM_FAIL();
   1104c:	002af070 	cmpltui	zero,zero,43969
   11050:	00000106 	br	11058 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11054:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11058:	003fff06 	br	11058 <__alt_data_end+0xff011058>


sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000116fc memsz 0x000116fc flags r-x
    LOAD off    0x0001271c vaddr 0x0001171c paddr 0x00013208 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00014cf4 vaddr 0x00014cf4 paddr 0x00014cf4 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010d38  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007a0  00010f7c  00010f7c  00011f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0001171c  00013208  0001271c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00014cf4  00014cf4  00014cf4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00014e84  00014e84  00014208  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00014208  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f38  00000000  00000000  00014230  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000240c4  00000000  00000000  00015168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009359  00000000  00000000  0003922c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b7bc  00000000  00000000  00042585  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002158  00000000  00000000  0004dd44  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000038a0  00000000  00000000  0004fe9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000178c0  00000000  00000000  0005373c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0006affc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d8  00000000  00000000  0006b050  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007032e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00070331  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007033d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007033e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007033f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00070343  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00070347  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007034b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00070354  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007035d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00070366  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000057  00000000  00000000  00070371  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  000703c8  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000723e4  00000000  00000000  00075ea0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00010f7c l    d  .rodata	00000000 .rodata
0001171c l    d  .rwdata	00000000 .rwdata
00014cf4 l    d  .bss	00000000 .bss
00014e84 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/adrie/OneDrive/Documents/HES/Master/TSM_EmbHardw/Labo/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001146a l     O .rodata	00000010 zeroes.4404
00004a1c l     F .text	000000bc __sbprintf
0001147a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004c2c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000675c l     F .text	00000008 __fp_unlock
00006770 l     F .text	0000019c __sinit.part.1
0000690c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00011b24 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00011f68 l     O .rwdata	00000020 lc_ctype_charset
00011f48 l     O .rwdata	00000020 lc_message_charset
00011f88 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000114ac l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000094a8 l     F .text	000000fc __sprint_r.part.0
000115e0 l     O .rodata	00000010 blanks.4348
000115d0 l     O .rodata	00000010 zeroes.4349
0000aa34 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e53c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e648 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e674 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e760 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000e840 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e92c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000eb00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000131f8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000ed7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000eeb0 l     F .text	00000034 alt_dev_reg
00012168 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f1bc l     F .text	0000020c altera_avalon_jtag_uart_irq
0000f3c8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000fa00 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000feb0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010324 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00010464 l     F .text	0000003c alt_get_errno
000104a0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00014d58 g     O .bss	00000004 alt_instruction_exception_handler
00008b40 g     F .text	00000074 _mprec_log10
00001a54 g     F .text	00000170 sobel
00008c2c g     F .text	0000008c __any_on
0000afd0 g     F .text	00000054 _isatty_r
000114b8 g     O .rodata	00000028 __mprec_tinytens
0000ea3c g     F .text	0000007c alt_main
00002648 g     F .text	000000c0 _puts_r
00014d84 g     O .bss	00000100 alt_irq
0000b024 g     F .text	00000060 _lseek_r
00011416 g     O .rodata	00000009 gy_array
00013208 g       *ABS*	00000000 __flash_rwdata_start
0000d068 g     F .text	00000088 .hidden __eqdf2
00014e84 g       *ABS*	00000000 __alt_heap_start
0000260c g     F .text	0000003c printf
0000b23c g     F .text	0000009c _wcrtomb_r
00009368 g     F .text	0000005c __sseek
00006aac g     F .text	00000010 __sinit
0000b0e4 g     F .text	00000140 __swbuf_r
00007574 g     F .text	0000007c _setlocale_r
00006914 g     F .text	00000068 __sfmoreglue
0000eadc g     F .text	00000024 __malloc_unlock
00000a00 g     F .text	00000014 LCD_Write_Command
00014d04 g     O .bss	00000004 sobel_width
00014d48 g     O .bss	00000004 altera_avalon_timer_ts_freq
00007a38 g     F .text	0000015c memmove
00000a14 g     F .text	00000014 LCD_Write_Data
00006a94 g     F .text	00000018 _cleanup
00007cbc g     F .text	000000a8 _Balloc
0000d0f0 g     F .text	000000dc .hidden __gtdf2
0001085c g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000598 g     F .text	00000024 cam_get_xsize
0000af74 g     F .text	0000005c _fstat_r
00014d28 g     O .bss	00000004 errno
000092e4 g     F .text	00000008 __seofread
00014d3c g     O .bss	00000004 alt_argv
0001b1c8 g       *ABS*	00000000 _gp
0000ed4c g     F .text	00000030 usleep
00000658 g     F .text	00000074 cam_set_image_pointer
00011fe8 g     O .rwdata	00000180 alt_fd_list
00001bd4 g     F .text	00000010 vga_set_pointer
00010880 g     F .text	00000090 alt_find_dev
000078f0 g     F .text	00000148 memcpy
00006764 g     F .text	0000000c _cleanup_r
0000e354 g     F .text	000000dc .hidden __floatsidf
000103e8 g     F .text	0000007c alt_io_redirect
0000d1cc g     F .text	000000f4 .hidden __ltdf2
00010f7c g       *ABS*	00000000 __DTOR_END__
00002708 g     F .text	00000014 puts
00010b4c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000921c g     F .text	00000074 __fpclassifyd
00008a9c g     F .text	000000a4 __ratio
0000aa18 g     F .text	0000001c __vfiprintf_internal
0000f5c0 g     F .text	0000021c altera_avalon_jtag_uart_read
00001da8 g     F .text	00000014 malloc
000025dc g     F .text	00000030 _printf_r
00000854 g     F .text	00000008 get_grayscale_picture
00001cec g     F .text	00000064 .hidden __udivsi3
00010fdc g     O .rodata	00000128 lens_roll_off_tbl
00000280 g     F .text	00000318 init_camera
0000e79c g     F .text	000000a4 isatty
00011508 g     O .rodata	000000c8 __mprec_tens
000075f0 g     F .text	0000000c __locale_charset
00010abc g     F .text	00000090 alt_icache_flush
00014d24 g     O .bss	00000004 __malloc_top_pad
000131d8 g     O .rwdata	00000004 __mb_cur_max
00007620 g     F .text	0000000c _localeconv_r
000014c0 g     F .text	00000100 sobel_x
000080c8 g     F .text	0000003c __i2b
00006f30 g     F .text	000004bc __sfvwrite_r
00000a28 g     F .text	00000414 init_LCD
0000271c g     F .text	00000054 _sbrk_r
000005e0 g     F .text	00000078 cam_get_profiling
0000b084 g     F .text	00000060 _read_r
00014d08 g     O .bss	00000004 sobel_result
000131f0 g     O .rwdata	00000004 alt_max_fd
0000ac68 g     F .text	000000f0 _fclose_r
0000672c g     F .text	00000030 fflush
00014d20 g     O .bss	00000004 __malloc_max_sbrked_mem
00014cfc g     O .bss	00000004 grayscale_array
0000bed4 g     F .text	000008ac .hidden __adddf3
000005bc g     F .text	00000024 cam_get_ysize
00008844 g     F .text	0000010c __b2d
0000b99c g     F .text	00000538 .hidden __umoddi3
0000e968 g     F .text	000000d4 lseek
0000091c g     F .text	0000008c i2c_short_read
000131d0 g     O .rwdata	00000004 _global_impure_ptr
00008cb8 g     F .text	00000564 _realloc_r
00014e84 g       *ABS*	00000000 __bss_end
00010234 g     F .text	000000f0 alt_iic_isr_register
00010754 g     F .text	00000108 alt_tick
0000b424 g     F .text	00000578 .hidden __udivdi3
0000aed0 g     F .text	00000024 _fputwc_r
000114e0 g     O .rodata	00000028 __mprec_bigtens
00007eac g     F .text	00000104 __s2b
0000e430 g     F .text	000000a8 .hidden __floatunsidf
00008584 g     F .text	00000060 __mcmp
00006acc g     F .text	00000018 __fp_lock_all
000101e8 g     F .text	0000004c alt_ic_irq_enabled
00014cf4 g     O .bss	00000004 grayscape_height
000106b8 g     F .text	0000009c alt_alarm_stop
00014d4c g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00011fc0 g     O .rwdata	00000028 alt_dev_null
00000ec8 g     F .text	00000078 transfer_LCD_with_dma
0000fe90 g     F .text	00000020 alt_dcache_flush_all
00007fb0 g     F .text	00000068 __hi0bits
0000e2d4 g     F .text	00000080 .hidden __fixdfsi
00013208 g       *ABS*	00000000 __ram_rwdata_end
000131e8 g     O .rwdata	00000008 alt_dev_list
0000edb8 g     F .text	000000f8 write
0000fbec g     F .text	00000020 alt_timestamp_freq
0001171c g       *ABS*	00000000 __ram_rodata_end
0000e6b0 g     F .text	000000b0 fstat
0000d1cc g     F .text	000000f4 .hidden __ledf2
000082fc g     F .text	00000140 __pow5mult
000095bc g     F .text	0000145c ___vfiprintf_internal_r
00014d34 g     O .bss	00000004 __nlocale_changed
00001d50 g     F .text	00000058 .hidden __umodsi3
00001bc4 g     F .text	00000008 GetSobel_rgb
00014e84 g       *ABS*	00000000 end
00001bcc g     F .text	00000008 GetSobelResult
000006f0 g     F .text	00000020 take_picture_blocking
00000750 g     F .text	00000014 DIPSW_get_value
00001838 g     F .text	00000168 sobel_y_with_rgb
0000f0fc g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006e0 g     F .text	00000010 current_image_pointer
00010f7c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000fa78 g     F .text	0000007c alt_avalon_timer_sc_init
0000e4d8 g     F .text	00000064 .hidden __clzsi2
0000f7dc g     F .text	00000224 altera_avalon_jtag_uart_write
00006abc g     F .text	00000004 __sfp_lock_acquire
0000780c g     F .text	000000e4 memchr
00002808 g     F .text	000021f8 ___vfprintf_internal_r
00006c20 g     F .text	00000310 _free_r
000075fc g     F .text	00000010 __locale_mb_cur_max
0000173c g     F .text	000000fc sobel_y
00011104 g     O .rodata	00000140 noise_reduction_reg_settings_array
00010dc8 g     F .text	00000180 __call_exitprocs
00014d30 g     O .bss	00000004 __mlocale_changed
000131c8 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00014d50 g     O .bss	00000004 _alt_tick_rate
0000843c g     F .text	00000148 __lshift
00014d54 g     O .bss	00000004 _alt_nticks
0000eb3c g     F .text	000000fc read
0000ef1c g     F .text	0000007c alt_sys_init
000015c0 g     F .text	0000017c sobel_x_with_rgb
00010cb0 g     F .text	00000118 __register_exitproc
00008104 g     F .text	000001f8 __multiply
0000f468 g     F .text	00000068 altera_avalon_jtag_uart_close
0001171c g       *ABS*	00000000 __ram_rwdata_start
00010f7c g       *ABS*	00000000 __ram_rodata_start
00014d5c g     O .bss	00000028 __malloc_current_mallinfo
00008950 g     F .text	0000014c __d2b
00014d0c g     O .bss	00000004 sobel_height
00000710 g     F .text	00000014 enable_continues_mode
0000ef98 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001320 g     F .text	000000e4 init_sobel_arrays
00010a18 g     F .text	000000a4 alt_get_fd
0000fd38 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000ab50 g     F .text	00000054 _close_r
00010c34 g     F .text	0000007c memcmp
0000f058 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00014e84 g       *ABS*	00000000 __alt_stack_base
0000f0a8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00004ad8 g     F .text	00000154 __swsetup_r
0000c780 g     F .text	000008e8 .hidden __divdf3
0000697c g     F .text	00000118 __sfp
00008bb4 g     F .text	00000078 __copybits
0001171c g     O .rwdata	00000408 __malloc_av_
00006ac8 g     F .text	00000004 __sinit_lock_release
0000d2c0 g     F .text	00000718 .hidden __muldf3
00009290 g     F .text	00000054 __sread
00010910 g     F .text	00000108 alt_find_file
0000feec g     F .text	000000a4 alt_dev_llist_insert
0000eab8 g     F .text	00000024 __malloc_lock
0000ec9c g     F .text	000000b0 sbrk
000066d0 g     F .text	0000005c _fflush_r
0000aba4 g     F .text	000000c4 _calloc_r
00014cf4 g       *ABS*	00000000 __bss_start
00007b94 g     F .text	00000128 memset
00000f40 g     F .text	000003e0 main
00014d40 g     O .bss	00000004 alt_envp
00014d1c g     O .bss	00000004 __malloc_max_total_mem
00000844 g     F .text	00000008 get_grayscale_width
0000eff8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000b224 g     F .text	00000018 __swbuf
00014d10 g     O .bss	00000004 sobel_x_result
000093c4 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000ad58 g     F .text	00000014 fclose
0000faf4 g     F .text	00000078 alt_timestamp_start
00004e2c g     F .text	00001688 _dtoa_r
00001dd0 g     F .text	0000080c _malloc_r
0000b398 g     F .text	00000030 __ascii_wctomb
000131f4 g     O .rwdata	00000004 alt_errno
000073ec g     F .text	000000c4 _fwalk
00001bf4 g     F .text	00000084 .hidden __divsi3
00006afc g     F .text	00000124 _malloc_trim_r
00010f7c g       *ABS*	00000000 __CTOR_END__
00014cf8 g     O .bss	00000004 grayscale_width
000093cc g     F .text	000000dc strcmp
00000e3c g     F .text	0000008c transfer_LCD_no_dma
00010f7c g       *ABS*	00000000 __flash_rodata_start
00010f7c g       *ABS*	00000000 __DTOR_LIST__
0000d068 g     F .text	00000088 .hidden __nedf2
00011244 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000eee4 g     F .text	00000038 alt_irq_init
0000ec38 g     F .text	00000064 alt_release_fd
00000874 g     F .text	000000a8 i2c_auto_detect
000115f0 g     O .rodata	00000100 .hidden __clz_tab
000006cc g     F .text	00000014 current_image_valid
00014d2c g     O .bss	00000004 _PathLocale
0000085c g     F .text	00000018 i2c_busy_wait
00010be8 g     F .text	00000014 atexit
0000aaf0 g     F .text	00000060 _write_r
0000762c g     F .text	00000018 setlocale
000131d4 g     O .rwdata	00000004 _impure_ptr
00014d38 g     O .bss	00000004 alt_argc
000064b4 g     F .text	0000021c __sflush_r
00014d44 g     O .bss	00000004 altera_avalon_timer_ts_base
0000fff0 g     F .text	00000060 _do_dtors
00007618 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
000087e0 g     F .text	00000064 __ulp
00006ae4 g     F .text	00000018 __fp_unlock_all
000131e0 g     O .rwdata	00000008 alt_fs_list
00014d14 g     O .bss	00000004 sobel_y_result
000009a8 g     F .text	00000058 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00014d00 g     O .bss	00000002 LCD_height
00007644 g     F .text	0000000c localeconv
0000fb6c g     F .text	00000080 alt_timestamp
00001be4 g     F .text	00000010 vga_set_swap
00010084 g     F .text	00000050 alt_ic_isr_register
000019a0 g     F .text	000000b4 sobel_threshold
00013208 g       *ABS*	00000000 _edata
00014e84 g       *ABS*	00000000 _end
0000ad6c g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000f4d0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001141f g     O .rodata	00000009 gx_array
0001015c g     F .text	0000008c alt_ic_irq_disable
000092ec g     F .text	0000007c __swrite
000131cc g     O .rwdata	00000004 __malloc_trim_threshold
00014d02 g     O .bss	00000002 LCD_width
00000764 g     F .text	000000e0 conv_grayscale
0000760c g     F .text	0000000c __locale_msgcharset
00010bfc g     F .text	00000038 exit
000074b0 g     F .text	000000c4 _fwalk_reent
000085e4 g     F .text	000001fc __mdiff
00001c78 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006ac0 g     F .text	00000004 __sfp_lock_release
0000084c g     F .text	00000008 get_grayscale_height
00010f48 g     F .text	00000034 _exit
00001404 g     F .text	000000bc sobel_mac
0000fc0c g     F .text	0000012c alt_alarm_start
00007650 g     F .text	000001bc __smakebuf_r
00014d18 g     O .bss	00000004 sobel_rgb565
00002770 g     F .text	00000098 strlen
00010564 g     F .text	00000154 open
0000d0f0 g     F .text	000000dc .hidden __gedf2
000131dc g     O .rwdata	00000004 __wctomb
000095a4 g     F .text	00000018 __sprint_r
00010050 g     F .text	00000034 alt_icache_flush_all
000131fc g     O .rwdata	00000004 alt_priority_mask
000100d4 g     F .text	00000088 alt_ic_irq_enable
00004a00 g     F .text	0000001c __vfprintf_internal
0000b3c8 g     F .text	0000005c _wctomb_r
0000d9d8 g     F .text	000008fc .hidden __subdf3
00008018 g     F .text	000000b0 __lo0bits
00013200 g     O .rwdata	00000008 alt_alarm_list
0000ff90 g     F .text	00000060 _do_ctors
0000b2d8 g     F .text	000000c0 wcrtomb
0000e578 g     F .text	000000d0 close
0000e8a8 g     F .text	00000084 alt_load
0000aef4 g     F .text	00000080 fputwc
00001dbc g     F .text	00000014 free
00006ac4 g     F .text	00000004 __sinit_lock_acquire
00007d8c g     F .text	00000120 __multadd
00007d64 g     F .text	00000028 _Bfree
00000724 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10936104 	addi	r2,r2,19844
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10936104 	addi	r2,r2,19844
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6e417 	ldw	r2,-25712(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6e417 	ldw	r2,-25712(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     250:	d6ac7214 	ori	gp,gp,45512
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	10933d14 	ori	r2,r2,19700

    movhi r3, %hi(__bss_end)
     25c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     260:	18d3a114 	ori	r3,r3,20100

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_data_end+0xff000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000e8a80 	call	e8a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000ea3c0 	call	ea3c <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_data_end+0xff00027c>

00000280 <init_camera>:
     280:	00804034 	movhi	r2,256
     284:	10842744 	addi	r2,r2,4253
     288:	00c00084 	movi	r3,2
     28c:	10c00025 	stbio	r3,0(r2)
     290:	00804034 	movhi	r2,256
     294:	10841304 	addi	r2,r2,4172
     298:	00c00044 	movi	r3,1
     29c:	10c00025 	stbio	r3,0(r2)
     2a0:	008003f4 	movhi	r2,15
     2a4:	10909004 	addi	r2,r2,16960
     2a8:	0001883a 	nop
     2ac:	10bfffc4 	addi	r2,r2,-1
     2b0:	103ffd1e 	bne	r2,zero,2a8 <__alt_data_end+0xff0002a8>
     2b4:	00804034 	movhi	r2,256
     2b8:	10841304 	addi	r2,r2,4172
     2bc:	10000025 	stbio	zero,0(r2)
     2c0:	008003f4 	movhi	r2,15
     2c4:	10909004 	addi	r2,r2,16960
     2c8:	0001883a 	nop
     2cc:	10bfffc4 	addi	r2,r2,-1
     2d0:	103ffd1e 	bne	r2,zero,2c8 <__alt_data_end+0xff0002c8>
     2d4:	defffc04 	addi	sp,sp,-16
     2d8:	01800044 	movi	r6,1
     2dc:	014ce184 	movi	r5,13190
     2e0:	01001e04 	movi	r4,120
     2e4:	dfc00315 	stw	ra,12(sp)
     2e8:	dc800215 	stw	r18,8(sp)
     2ec:	dc400115 	stw	r17,4(sp)
     2f0:	dc000015 	stw	r16,0(sp)
     2f4:	00009a80 	call	9a8 <i2c_short_write>
     2f8:	000d883a 	mov	r6,zero
     2fc:	014ce184 	movi	r5,13190
     300:	01001e04 	movi	r4,120
     304:	00009a80 	call	9a8 <i2c_short_write>
     308:	008003f4 	movhi	r2,15
     30c:	10909004 	addi	r2,r2,16960
     310:	0001883a 	nop
     314:	10bfffc4 	addi	r2,r2,-1
     318:	103ffd1e 	bne	r2,zero,310 <__alt_data_end+0xff000310>
     31c:	01803104 	movi	r6,196
     320:	014c0684 	movi	r5,12314
     324:	01001e04 	movi	r4,120
     328:	00009a80 	call	9a8 <i2c_short_write>
     32c:	01800204 	movi	r6,8
     330:	014c8084 	movi	r5,12802
     334:	01001e04 	movi	r4,120
     338:	00009a80 	call	9a8 <i2c_short_write>
     33c:	0180c744 	movi	r6,797
     340:	014cfd04 	movi	r5,13300
     344:	01001e04 	movi	r4,120
     348:	00009a80 	call	9a8 <i2c_short_write>
     34c:	008000b4 	movhi	r2,2
     350:	10a1a804 	addi	r2,r2,-31072
     354:	0001883a 	nop
     358:	10bfffc4 	addi	r2,r2,-1
     35c:	103ffd1e 	bne	r2,zero,354 <__alt_data_end+0xff000354>
     360:	01a3c254 	movui	r6,36617
     364:	014d0784 	movi	r5,13342
     368:	01001e04 	movi	r4,120
     36c:	00009a80 	call	9a8 <i2c_short_write>
     370:	01805404 	movi	r6,336
     374:	014d0704 	movi	r5,13340
     378:	01001e04 	movi	r4,120
     37c:	00009a80 	call	9a8 <i2c_short_write>
     380:	01a3c254 	movui	r6,36617
     384:	014d0784 	movi	r5,13342
     388:	01001e04 	movi	r4,120
     38c:	00009a80 	call	9a8 <i2c_short_write>
     390:	008000b4 	movhi	r2,2
     394:	10a1a804 	addi	r2,r2,-31072
     398:	0001883a 	nop
     39c:	10bfffc4 	addi	r2,r2,-1
     3a0:	103ffd1e 	bne	r2,zero,398 <__alt_data_end+0xff000398>
     3a4:	04000074 	movhi	r16,1
     3a8:	84049104 	addi	r16,r16,4676
     3ac:	01a3c214 	movui	r6,36616
     3b0:	014d0784 	movi	r5,13342
     3b4:	01001e04 	movi	r4,120
     3b8:	00009a80 	call	9a8 <i2c_short_write>
     3bc:	84400084 	addi	r17,r16,2
     3c0:	84804604 	addi	r18,r16,280
     3c4:	8980000b 	ldhu	r6,0(r17)
     3c8:	8140000b 	ldhu	r5,0(r16)
     3cc:	01001e04 	movi	r4,120
     3d0:	84000104 	addi	r16,r16,4
     3d4:	00009a80 	call	9a8 <i2c_short_write>
     3d8:	8c400104 	addi	r17,r17,4
     3dc:	84bff91e 	bne	r16,r18,3c4 <__alt_data_end+0xff0003c4>
     3e0:	04000074 	movhi	r16,1
     3e4:	84044104 	addi	r16,r16,4356
     3e8:	84400084 	addi	r17,r16,2
     3ec:	84805004 	addi	r18,r16,320
     3f0:	8980000b 	ldhu	r6,0(r17)
     3f4:	8140000b 	ldhu	r5,0(r16)
     3f8:	01001e04 	movi	r4,120
     3fc:	84000104 	addi	r16,r16,4
     400:	00009a80 	call	9a8 <i2c_short_write>
     404:	8c400104 	addi	r17,r17,4
     408:	943ff91e 	bne	r18,r16,3f0 <__alt_data_end+0xff0003f0>
     40c:	018164c4 	movi	r6,1427
     410:	014d6904 	movi	r5,13732
     414:	01001e04 	movi	r4,120
     418:	00009a80 	call	9a8 <i2c_short_write>
     41c:	0189e644 	movi	r6,10137
     420:	014ce304 	movi	r5,13196
     424:	01001e04 	movi	r4,120
     428:	00009a80 	call	9a8 <i2c_short_write>
     42c:	01991004 	movi	r6,25664
     430:	014ce404 	movi	r5,13200
     434:	01001e04 	movi	r4,120
     438:	00009a80 	call	9a8 <i2c_short_write>
     43c:	008000b4 	movhi	r2,2
     440:	10a1a804 	addi	r2,r2,-31072
     444:	0001883a 	nop
     448:	10bfffc4 	addi	r2,r2,-1
     44c:	103ffd1e 	bne	r2,zero,444 <__alt_data_end+0xff000444>
     450:	0189e6c4 	movi	r6,10139
     454:	014ce304 	movi	r5,13196
     458:	01001e04 	movi	r4,120
     45c:	00009a80 	call	9a8 <i2c_short_write>
     460:	01991004 	movi	r6,25664
     464:	014ce404 	movi	r5,13200
     468:	01001e04 	movi	r4,120
     46c:	00009a80 	call	9a8 <i2c_short_write>
     470:	008000b4 	movhi	r2,2
     474:	10a1a804 	addi	r2,r2,-31072
     478:	0001883a 	nop
     47c:	10bfffc4 	addi	r2,r2,-1
     480:	103ffd1e 	bne	r2,zero,478 <__alt_data_end+0xff000478>
     484:	01a840d4 	movui	r6,41219
     488:	014ce304 	movi	r5,13196
     48c:	01001e04 	movi	r4,120
     490:	00009a80 	call	9a8 <i2c_short_write>
     494:	01800144 	movi	r6,5
     498:	014ce404 	movi	r5,13200
     49c:	01001e04 	movi	r4,120
     4a0:	00009a80 	call	9a8 <i2c_short_write>
     4a4:	008000b4 	movhi	r2,2
     4a8:	10a1a804 	addi	r2,r2,-31072
     4ac:	0001883a 	nop
     4b0:	10bfffc4 	addi	r2,r2,-1
     4b4:	103ffd1e 	bne	r2,zero,4ac <__alt_data_end+0xff0004ac>
     4b8:	01a840d4 	movui	r6,41219
     4bc:	014ce304 	movi	r5,13196
     4c0:	01001e04 	movi	r4,120
     4c4:	00009a80 	call	9a8 <i2c_short_write>
     4c8:	01800184 	movi	r6,6
     4cc:	014ce404 	movi	r5,13200
     4d0:	01001e04 	movi	r4,120
     4d4:	00009a80 	call	9a8 <i2c_short_write>
     4d8:	008000b4 	movhi	r2,2
     4dc:	10a1a804 	addi	r2,r2,-31072
     4e0:	0001883a 	nop
     4e4:	10bfffc4 	addi	r2,r2,-1
     4e8:	103ffd1e 	bne	r2,zero,4e0 <__alt_data_end+0xff0004e0>
     4ec:	04000074 	movhi	r16,1
     4f0:	8403f704 	addi	r16,r16,4060
     4f4:	84400084 	addi	r17,r16,2
     4f8:	84804a04 	addi	r18,r16,296
     4fc:	8980000b 	ldhu	r6,0(r17)
     500:	8140000b 	ldhu	r5,0(r16)
     504:	01001e04 	movi	r4,120
     508:	84000104 	addi	r16,r16,4
     50c:	00009a80 	call	9a8 <i2c_short_write>
     510:	8c400104 	addi	r17,r17,4
     514:	943ff91e 	bne	r18,r16,4fc <__alt_data_end+0xff0004fc>
     518:	008003f4 	movhi	r2,15
     51c:	10909004 	addi	r2,r2,16960
     520:	0001883a 	nop
     524:	10bfffc4 	addi	r2,r2,-1
     528:	103ffd1e 	bne	r2,zero,520 <__alt_data_end+0xff000520>
     52c:	01800804 	movi	r6,32
     530:	014ccb84 	movi	r5,13102
     534:	01001e04 	movi	r4,120
     538:	00009a80 	call	9a8 <i2c_short_write>
     53c:	008003f4 	movhi	r2,15
     540:	10909004 	addi	r2,r2,16960
     544:	0001883a 	nop
     548:	10bfffc4 	addi	r2,r2,-1
     54c:	103ffd1e 	bne	r2,zero,544 <__alt_data_end+0xff000544>
     550:	01800884 	movi	r6,34
     554:	014d0104 	movi	r5,13316
     558:	01001e04 	movi	r4,120
     55c:	00009a80 	call	9a8 <i2c_short_write>
     560:	008003f4 	movhi	r2,15
     564:	10909004 	addi	r2,r2,16960
     568:	0001883a 	nop
     56c:	10bfffc4 	addi	r2,r2,-1
     570:	103ffd1e 	bne	r2,zero,568 <__alt_data_end+0xff000568>
     574:	018009c4 	movi	r6,39
     578:	014c1004 	movi	r5,12352
     57c:	01001e04 	movi	r4,120
     580:	dfc00317 	ldw	ra,12(sp)
     584:	dc800217 	ldw	r18,8(sp)
     588:	dc400117 	ldw	r17,4(sp)
     58c:	dc000017 	ldw	r16,0(sp)
     590:	dec00404 	addi	sp,sp,16
     594:	00009a81 	jmpi	9a8 <i2c_short_write>

00000598 <cam_get_xsize>:
     598:	00c04034 	movhi	r3,256
     59c:	18c41304 	addi	r3,r3,4172
     5a0:	18800023 	ldbuio	r2,0(r3)
     5a4:	1080010c 	andi	r2,r2,4
     5a8:	103ffd26 	beq	r2,zero,5a0 <__alt_data_end+0xff0005a0>
     5ac:	00804034 	movhi	r2,256
     5b0:	10841004 	addi	r2,r2,4160
     5b4:	1080002b 	ldhuio	r2,0(r2)
     5b8:	f800283a 	ret

000005bc <cam_get_ysize>:
     5bc:	00c04034 	movhi	r3,256
     5c0:	18c41304 	addi	r3,r3,4172
     5c4:	18800023 	ldbuio	r2,0(r3)
     5c8:	1080010c 	andi	r2,r2,4
     5cc:	103ffd26 	beq	r2,zero,5c4 <__alt_data_end+0xff0005c4>
     5d0:	00804034 	movhi	r2,256
     5d4:	10841104 	addi	r2,r2,4164
     5d8:	1080002b 	ldhuio	r2,0(r2)
     5dc:	f800283a 	ret

000005e0 <cam_get_profiling>:
     5e0:	00c04034 	movhi	r3,256
     5e4:	18c41304 	addi	r3,r3,4172
     5e8:	18800023 	ldbuio	r2,0(r3)
     5ec:	1080010c 	andi	r2,r2,4
     5f0:	103ffd26 	beq	r2,zero,5e8 <__alt_data_end+0xff0005e8>
     5f4:	00804034 	movhi	r2,256
     5f8:	deffff04 	addi	sp,sp,-4
     5fc:	10841004 	addi	r2,r2,4160
     600:	dfc00015 	stw	ra,0(sp)
     604:	1140002b 	ldhuio	r5,0(r2)
     608:	01000074 	movhi	r4,1
     60c:	2103df04 	addi	r4,r4,3964
     610:	297fffcc 	andi	r5,r5,65535
     614:	000260c0 	call	260c <printf>
     618:	00804034 	movhi	r2,256
     61c:	10841104 	addi	r2,r2,4164
     620:	1140002b 	ldhuio	r5,0(r2)
     624:	01000074 	movhi	r4,1
     628:	2103e704 	addi	r4,r4,3996
     62c:	297fffcc 	andi	r5,r5,65535
     630:	000260c0 	call	260c <printf>
     634:	00804034 	movhi	r2,256
     638:	10841204 	addi	r2,r2,4168
     63c:	1140002b 	ldhuio	r5,0(r2)
     640:	01000074 	movhi	r4,1
     644:	2103ef04 	addi	r4,r4,4028
     648:	297fffcc 	andi	r5,r5,65535
     64c:	dfc00017 	ldw	ra,0(sp)
     650:	dec00104 	addi	sp,sp,4
     654:	000260c1 	jmpi	260c <printf>

00000658 <cam_set_image_pointer>:
     658:	21003fcc 	andi	r4,r4,255
     65c:	2100201c 	xori	r4,r4,128
     660:	213fe004 	addi	r4,r4,-128
     664:	00800044 	movi	r2,1
     668:	20801226 	beq	r4,r2,6b4 <cam_set_image_pointer+0x5c>
     66c:	11000c0e 	bge	r2,r4,6a0 <cam_set_image_pointer+0x48>
     670:	00800084 	movi	r2,2
     674:	20800626 	beq	r4,r2,690 <cam_set_image_pointer+0x38>
     678:	008000c4 	movi	r2,3
     67c:	2080111e 	bne	r4,r2,6c4 <cam_set_image_pointer+0x6c>
     680:	00804034 	movhi	r2,256
     684:	10841704 	addi	r2,r2,4188
     688:	11400035 	stwio	r5,0(r2)
     68c:	f800283a 	ret
     690:	00804034 	movhi	r2,256
     694:	10841604 	addi	r2,r2,4184
     698:	11400035 	stwio	r5,0(r2)
     69c:	f800283a 	ret
     6a0:	2000091e 	bne	r4,zero,6c8 <cam_set_image_pointer+0x70>
     6a4:	00804034 	movhi	r2,256
     6a8:	10841404 	addi	r2,r2,4176
     6ac:	11400035 	stwio	r5,0(r2)
     6b0:	f800283a 	ret
     6b4:	00804034 	movhi	r2,256
     6b8:	10841504 	addi	r2,r2,4180
     6bc:	11400035 	stwio	r5,0(r2)
     6c0:	f800283a 	ret
     6c4:	f800283a 	ret
     6c8:	f800283a 	ret

000006cc <current_image_valid>:
     6cc:	00804034 	movhi	r2,256
     6d0:	10841304 	addi	r2,r2,4172
     6d4:	1080002b 	ldhuio	r2,0(r2)
     6d8:	1080800c 	andi	r2,r2,512
     6dc:	f800283a 	ret

000006e0 <current_image_pointer>:
     6e0:	00804034 	movhi	r2,256
     6e4:	10841404 	addi	r2,r2,4176
     6e8:	10800037 	ldwio	r2,0(r2)
     6ec:	f800283a 	ret

000006f0 <take_picture_blocking>:
     6f0:	00c04034 	movhi	r3,256
     6f4:	18c41304 	addi	r3,r3,4172
     6f8:	00800204 	movi	r2,8
     6fc:	1880002d 	sthio	r2,0(r3)
     700:	1880002b 	ldhuio	r2,0(r3)
     704:	1080020c 	andi	r2,r2,8
     708:	103ffd1e 	bne	r2,zero,700 <__alt_data_end+0xff000700>
     70c:	f800283a 	ret

00000710 <enable_continues_mode>:
     710:	00804034 	movhi	r2,256
     714:	10841304 	addi	r2,r2,4172
     718:	00c00404 	movi	r3,16
     71c:	10c0002d 	sthio	r3,0(r2)
     720:	f800283a 	ret

00000724 <new_image_available>:
     724:	00c04034 	movhi	r3,256
     728:	18c41304 	addi	r3,r3,4172
     72c:	1880002b 	ldhuio	r2,0(r3)
     730:	1080200c 	andi	r2,r2,128
     734:	1000021e 	bne	r2,zero,740 <new_image_available+0x1c>
     738:	0005883a 	mov	r2,zero
     73c:	f800283a 	ret
     740:	00804004 	movi	r2,256
     744:	1880002d 	sthio	r2,0(r3)
     748:	00800044 	movi	r2,1
     74c:	f800283a 	ret

00000750 <DIPSW_get_value>:
     750:	00804034 	movhi	r2,256
     754:	10842804 	addi	r2,r2,4256
     758:	10800023 	ldbuio	r2,0(r2)
     75c:	0084303a 	nor	r2,zero,r2
     760:	f800283a 	ret

00000764 <conv_grayscale>:
     764:	d0a6cd17 	ldw	r2,-25804(gp)
     768:	defffc04 	addi	sp,sp,-16
     76c:	dc800215 	stw	r18,8(sp)
     770:	dc400115 	stw	r17,4(sp)
     774:	dc000015 	stw	r16,0(sp)
     778:	dfc00315 	stw	ra,12(sp)
     77c:	d166cc15 	stw	r5,-25808(gp)
     780:	d1a6cb15 	stw	r6,-25812(gp)
     784:	2821883a 	mov	r16,r5
     788:	3023883a 	mov	r17,r6
     78c:	2025883a 	mov	r18,r4
     790:	10000226 	beq	r2,zero,79c <conv_grayscale+0x38>
     794:	1009883a 	mov	r4,r2
     798:	0001dbc0 	call	1dbc <free>
     79c:	8449383a 	mul	r4,r16,r17
     7a0:	0001da80 	call	1da8 <malloc>
     7a4:	d0a6cd15 	stw	r2,-25804(gp)
     7a8:	0440200e 	bge	zero,r17,82c <conv_grayscale+0xc8>
     7ac:	840d883a 	add	r6,r16,r16
     7b0:	9009883a 	mov	r4,r18
     7b4:	8017883a 	mov	r11,r16
     7b8:	000b883a 	mov	r5,zero
     7bc:	0400170e 	bge	zero,r16,81c <conv_grayscale+0xb8>
     7c0:	5c13c83a 	sub	r9,r11,r16
     7c4:	2015883a 	mov	r10,r4
     7c8:	5080000b 	ldhu	r2,0(r10)
     7cc:	100ed17a 	srli	r7,r2,5
     7d0:	1010d2fa 	srli	r8,r2,11
     7d4:	100690fa 	slli	r3,r2,3
     7d8:	39cf883a 	add	r7,r7,r7
     7dc:	400490fa 	slli	r2,r8,3
     7e0:	39cf883a 	add	r7,r7,r7
     7e4:	39c03fcc 	andi	r7,r7,255
     7e8:	39c01724 	muli	r7,r7,92
     7ec:	108006e4 	muli	r2,r2,27
     7f0:	18c03fcc 	andi	r3,r3,255
     7f4:	18c00264 	muli	r3,r3,9
     7f8:	3885883a 	add	r2,r7,r2
     7fc:	d1e6cd17 	ldw	r7,-25804(gp)
     800:	10c5883a 	add	r2,r2,r3
     804:	1005d1fa 	srai	r2,r2,7
     808:	3a4f883a 	add	r7,r7,r9
     80c:	38800025 	stbio	r2,0(r7)
     810:	4a400044 	addi	r9,r9,1
     814:	52800084 	addi	r10,r10,2
     818:	5a7feb1e 	bne	r11,r9,7c8 <__alt_data_end+0xff0007c8>
     81c:	29400044 	addi	r5,r5,1
     820:	2189883a 	add	r4,r4,r6
     824:	5c17883a 	add	r11,r11,r16
     828:	897fe41e 	bne	r17,r5,7bc <__alt_data_end+0xff0007bc>
     82c:	dfc00317 	ldw	ra,12(sp)
     830:	dc800217 	ldw	r18,8(sp)
     834:	dc400117 	ldw	r17,4(sp)
     838:	dc000017 	ldw	r16,0(sp)
     83c:	dec00404 	addi	sp,sp,16
     840:	f800283a 	ret

00000844 <get_grayscale_width>:
     844:	d0a6cc17 	ldw	r2,-25808(gp)
     848:	f800283a 	ret

0000084c <get_grayscale_height>:
     84c:	d0a6cb17 	ldw	r2,-25812(gp)
     850:	f800283a 	ret

00000854 <get_grayscale_picture>:
     854:	d0a6cd17 	ldw	r2,-25804(gp)
     858:	f800283a 	ret

0000085c <i2c_busy_wait>:
     85c:	00c04034 	movhi	r3,256
     860:	18c42704 	addi	r3,r3,4252
     864:	18800037 	ldwio	r2,0(r3)
     868:	108000cc 	andi	r2,r2,3
     86c:	103ffd1e 	bne	r2,zero,864 <__alt_data_end+0xff000864>
     870:	f800283a 	ret

00000874 <i2c_auto_detect>:
     874:	01004034 	movhi	r4,256
     878:	21042704 	addi	r4,r4,4252
     87c:	00c04034 	movhi	r3,256
     880:	18c42704 	addi	r3,r3,4252
     884:	20800037 	ldwio	r2,0(r4)
     888:	108000cc 	andi	r2,r2,3
     88c:	103ffb1e 	bne	r2,zero,87c <__alt_data_end+0xff00087c>
     890:	00800104 	movi	r2,4
     894:	18800035 	stwio	r2,0(r3)
     898:	18800037 	ldwio	r2,0(r3)
     89c:	108000cc 	andi	r2,r2,3
     8a0:	103ffd1e 	bne	r2,zero,898 <__alt_data_end+0xff000898>
     8a4:	00804034 	movhi	r2,256
     8a8:	defffc04 	addi	sp,sp,-16
     8ac:	10842504 	addi	r2,r2,4244
     8b0:	dfc00315 	stw	ra,12(sp)
     8b4:	dc800215 	stw	r18,8(sp)
     8b8:	dc400115 	stw	r17,4(sp)
     8bc:	dc000015 	stw	r16,0(sp)
     8c0:	14800037 	ldwio	r18,0(r2)
     8c4:	01000074 	movhi	r4,1
     8c8:	2104d704 	addi	r4,r4,4956
     8cc:	900b883a 	mov	r5,r18
     8d0:	0021883a 	mov	r16,zero
     8d4:	000260c0 	call	260c <printf>
     8d8:	04800a0e 	bge	zero,r18,904 <i2c_auto_detect+0x90>
     8dc:	04404034 	movhi	r17,256
     8e0:	8c442404 	addi	r17,r17,4240
     8e4:	8c000035 	stwio	r16,0(r17)
     8e8:	89800037 	ldwio	r6,0(r17)
     8ec:	01000074 	movhi	r4,1
     8f0:	800b883a 	mov	r5,r16
     8f4:	2104e004 	addi	r4,r4,4992
     8f8:	84000044 	addi	r16,r16,1
     8fc:	000260c0 	call	260c <printf>
     900:	943ff81e 	bne	r18,r16,8e4 <__alt_data_end+0xff0008e4>
     904:	dfc00317 	ldw	ra,12(sp)
     908:	dc800217 	ldw	r18,8(sp)
     90c:	dc400117 	ldw	r17,4(sp)
     910:	dc000017 	ldw	r16,0(sp)
     914:	dec00404 	addi	sp,sp,16
     918:	f800283a 	ret

0000091c <i2c_short_read>:
     91c:	01804034 	movhi	r6,256
     920:	31842704 	addi	r6,r6,4252
     924:	00c04034 	movhi	r3,256
     928:	18c42704 	addi	r3,r3,4252
     92c:	30800037 	ldwio	r2,0(r6)
     930:	108000cc 	andi	r2,r2,3
     934:	103ffb1e 	bne	r2,zero,924 <__alt_data_end+0xff000924>
     938:	00804034 	movhi	r2,256
     93c:	21003fcc 	andi	r4,r4,255
     940:	10842404 	addi	r2,r2,4240
     944:	11000025 	stbio	r4,0(r2)
     948:	00804034 	movhi	r2,256
     94c:	10842504 	addi	r2,r2,4244
     950:	1140002d 	sthio	r5,0(r2)
     954:	008010c4 	movi	r2,67
     958:	18800025 	stbio	r2,0(r3)
     95c:	180b883a 	mov	r5,r3
     960:	00c04034 	movhi	r3,256
     964:	18c42704 	addi	r3,r3,4252
     968:	28800037 	ldwio	r2,0(r5)
     96c:	108000cc 	andi	r2,r2,3
     970:	103ffb1e 	bne	r2,zero,960 <__alt_data_end+0xff000960>
     974:	00804034 	movhi	r2,256
     978:	21000044 	addi	r4,r4,1
     97c:	10842404 	addi	r2,r2,4240
     980:	11000025 	stbio	r4,0(r2)
     984:	00800884 	movi	r2,34
     988:	18800025 	stbio	r2,0(r3)
     98c:	18800037 	ldwio	r2,0(r3)
     990:	108000cc 	andi	r2,r2,3
     994:	103ffd1e 	bne	r2,zero,98c <__alt_data_end+0xff00098c>
     998:	00804034 	movhi	r2,256
     99c:	10842604 	addi	r2,r2,4248
     9a0:	10800037 	ldwio	r2,0(r2)
     9a4:	f800283a 	ret

000009a8 <i2c_short_write>:
     9a8:	01c04034 	movhi	r7,256
     9ac:	39c42704 	addi	r7,r7,4252
     9b0:	00c04034 	movhi	r3,256
     9b4:	18c42704 	addi	r3,r3,4252
     9b8:	38800037 	ldwio	r2,0(r7)
     9bc:	108000cc 	andi	r2,r2,3
     9c0:	103ffb1e 	bne	r2,zero,9b0 <__alt_data_end+0xff0009b0>
     9c4:	00804034 	movhi	r2,256
     9c8:	10842404 	addi	r2,r2,4240
     9cc:	11000025 	stbio	r4,0(r2)
     9d0:	00804034 	movhi	r2,256
     9d4:	10842504 	addi	r2,r2,4244
     9d8:	1140002d 	sthio	r5,0(r2)
     9dc:	00804034 	movhi	r2,256
     9e0:	10842604 	addi	r2,r2,4248
     9e4:	1180002d 	sthio	r6,0(r2)
     9e8:	00801084 	movi	r2,66
     9ec:	18800025 	stbio	r2,0(r3)
     9f0:	18800037 	ldwio	r2,0(r3)
     9f4:	108000cc 	andi	r2,r2,3
     9f8:	103ffd1e 	bne	r2,zero,9f0 <__alt_data_end+0xff0009f0>
     9fc:	f800283a 	ret

00000a00 <LCD_Write_Command>:
     a00:	00804034 	movhi	r2,256
     a04:	10841804 	addi	r2,r2,4192
     a08:	1100002d 	sthio	r4,0(r2)
     a0c:	01000284 	movi	r4,10
     a10:	000ed4c1 	jmpi	ed4c <usleep>

00000a14 <LCD_Write_Data>:
     a14:	00804034 	movhi	r2,256
     a18:	10841904 	addi	r2,r2,4196
     a1c:	1100002d 	sthio	r4,0(r2)
     a20:	01000284 	movi	r4,10
     a24:	000ed4c1 	jmpi	ed4c <usleep>

00000a28 <init_LCD>:
     a28:	defff704 	addi	sp,sp,-36
     a2c:	00804034 	movhi	r2,256
     a30:	dd400515 	stw	r21,20(sp)
     a34:	dfc00815 	stw	ra,32(sp)
     a38:	ddc00715 	stw	r23,28(sp)
     a3c:	dd800615 	stw	r22,24(sp)
     a40:	dd000415 	stw	r20,16(sp)
     a44:	dcc00315 	stw	r19,12(sp)
     a48:	dc800215 	stw	r18,8(sp)
     a4c:	dc400115 	stw	r17,4(sp)
     a50:	dc000015 	stw	r16,0(sp)
     a54:	05400084 	movi	r21,2
     a58:	10841a04 	addi	r2,r2,4200
     a5c:	1540002d 	sthio	r21,0(r2)
     a60:	04804034 	movhi	r18,256
     a64:	94841804 	addi	r18,r18,4192
     a68:	00800a04 	movi	r2,40
     a6c:	9080002d 	sthio	r2,0(r18)
     a70:	04000284 	movi	r16,10
     a74:	8009883a 	mov	r4,r16
     a78:	000ed4c0 	call	ed4c <usleep>
     a7c:	05c00444 	movi	r23,17
     a80:	95c0002d 	sthio	r23,0(r18)
     a84:	8009883a 	mov	r4,r16
     a88:	04404034 	movhi	r17,256
     a8c:	8c441904 	addi	r17,r17,4196
     a90:	000ed4c0 	call	ed4c <usleep>
     a94:	0027883a 	mov	r19,zero
     a98:	8cc0002d 	sthio	r19,0(r17)
     a9c:	8009883a 	mov	r4,r16
     aa0:	000ed4c0 	call	ed4c <usleep>
     aa4:	008032c4 	movi	r2,203
     aa8:	9080002d 	sthio	r2,0(r18)
     aac:	8009883a 	mov	r4,r16
     ab0:	000ed4c0 	call	ed4c <usleep>
     ab4:	00800e44 	movi	r2,57
     ab8:	8880002d 	sthio	r2,0(r17)
     abc:	8009883a 	mov	r4,r16
     ac0:	000ed4c0 	call	ed4c <usleep>
     ac4:	00800b04 	movi	r2,44
     ac8:	8880002d 	sthio	r2,0(r17)
     acc:	8009883a 	mov	r4,r16
     ad0:	000ed4c0 	call	ed4c <usleep>
     ad4:	8cc0002d 	sthio	r19,0(r17)
     ad8:	8009883a 	mov	r4,r16
     adc:	000ed4c0 	call	ed4c <usleep>
     ae0:	00800d04 	movi	r2,52
     ae4:	8880002d 	sthio	r2,0(r17)
     ae8:	8009883a 	mov	r4,r16
     aec:	000ed4c0 	call	ed4c <usleep>
     af0:	8d40002d 	sthio	r21,0(r17)
     af4:	8009883a 	mov	r4,r16
     af8:	000ed4c0 	call	ed4c <usleep>
     afc:	008033c4 	movi	r2,207
     b00:	9080002d 	sthio	r2,0(r18)
     b04:	8009883a 	mov	r4,r16
     b08:	000ed4c0 	call	ed4c <usleep>
     b0c:	8cc0002d 	sthio	r19,0(r17)
     b10:	8009883a 	mov	r4,r16
     b14:	000ed4c0 	call	ed4c <usleep>
     b18:	05802044 	movi	r22,129
     b1c:	8d80002d 	sthio	r22,0(r17)
     b20:	8009883a 	mov	r4,r16
     b24:	000ed4c0 	call	ed4c <usleep>
     b28:	00800c04 	movi	r2,48
     b2c:	8880002d 	sthio	r2,0(r17)
     b30:	8009883a 	mov	r4,r16
     b34:	000ed4c0 	call	ed4c <usleep>
     b38:	00803a04 	movi	r2,232
     b3c:	9080002d 	sthio	r2,0(r18)
     b40:	8009883a 	mov	r4,r16
     b44:	000ed4c0 	call	ed4c <usleep>
     b48:	00802144 	movi	r2,133
     b4c:	8880002d 	sthio	r2,0(r17)
     b50:	8009883a 	mov	r4,r16
     b54:	000ed4c0 	call	ed4c <usleep>
     b58:	05000044 	movi	r20,1
     b5c:	8d00002d 	sthio	r20,0(r17)
     b60:	8009883a 	mov	r4,r16
     b64:	000ed4c0 	call	ed4c <usleep>
     b68:	00801e44 	movi	r2,121
     b6c:	8880002d 	sthio	r2,0(r17)
     b70:	8009883a 	mov	r4,r16
     b74:	000ed4c0 	call	ed4c <usleep>
     b78:	00803a84 	movi	r2,234
     b7c:	9080002d 	sthio	r2,0(r18)
     b80:	8009883a 	mov	r4,r16
     b84:	000ed4c0 	call	ed4c <usleep>
     b88:	8cc0002d 	sthio	r19,0(r17)
     b8c:	8009883a 	mov	r4,r16
     b90:	000ed4c0 	call	ed4c <usleep>
     b94:	8cc0002d 	sthio	r19,0(r17)
     b98:	8009883a 	mov	r4,r16
     b9c:	000ed4c0 	call	ed4c <usleep>
     ba0:	00801904 	movi	r2,100
     ba4:	8880002d 	sthio	r2,0(r17)
     ba8:	8009883a 	mov	r4,r16
     bac:	000ed4c0 	call	ed4c <usleep>
     bb0:	008000c4 	movi	r2,3
     bb4:	8880002d 	sthio	r2,0(r17)
     bb8:	8009883a 	mov	r4,r16
     bbc:	000ed4c0 	call	ed4c <usleep>
     bc0:	00800484 	movi	r2,18
     bc4:	8880002d 	sthio	r2,0(r17)
     bc8:	8009883a 	mov	r4,r16
     bcc:	000ed4c0 	call	ed4c <usleep>
     bd0:	8d80002d 	sthio	r22,0(r17)
     bd4:	8009883a 	mov	r4,r16
     bd8:	000ed4c0 	call	ed4c <usleep>
     bdc:	00803dc4 	movi	r2,247
     be0:	9080002d 	sthio	r2,0(r18)
     be4:	8009883a 	mov	r4,r16
     be8:	000ed4c0 	call	ed4c <usleep>
     bec:	00800804 	movi	r2,32
     bf0:	8880002d 	sthio	r2,0(r17)
     bf4:	8009883a 	mov	r4,r16
     bf8:	000ed4c0 	call	ed4c <usleep>
     bfc:	00803004 	movi	r2,192
     c00:	9080002d 	sthio	r2,0(r18)
     c04:	8009883a 	mov	r4,r16
     c08:	000ed4c0 	call	ed4c <usleep>
     c0c:	05800984 	movi	r22,38
     c10:	8d80002d 	sthio	r22,0(r17)
     c14:	8009883a 	mov	r4,r16
     c18:	000ed4c0 	call	ed4c <usleep>
     c1c:	00800104 	movi	r2,4
     c20:	8880002d 	sthio	r2,0(r17)
     c24:	8009883a 	mov	r4,r16
     c28:	000ed4c0 	call	ed4c <usleep>
     c2c:	00803044 	movi	r2,193
     c30:	9080002d 	sthio	r2,0(r18)
     c34:	8009883a 	mov	r4,r16
     c38:	000ed4c0 	call	ed4c <usleep>
     c3c:	8dc0002d 	sthio	r23,0(r17)
     c40:	8009883a 	mov	r4,r16
     c44:	000ed4c0 	call	ed4c <usleep>
     c48:	00803144 	movi	r2,197
     c4c:	9080002d 	sthio	r2,0(r18)
     c50:	8009883a 	mov	r4,r16
     c54:	000ed4c0 	call	ed4c <usleep>
     c58:	00800d44 	movi	r2,53
     c5c:	8880002d 	sthio	r2,0(r17)
     c60:	8009883a 	mov	r4,r16
     c64:	000ed4c0 	call	ed4c <usleep>
     c68:	00800f84 	movi	r2,62
     c6c:	8880002d 	sthio	r2,0(r17)
     c70:	8009883a 	mov	r4,r16
     c74:	000ed4c0 	call	ed4c <usleep>
     c78:	008031c4 	movi	r2,199
     c7c:	9080002d 	sthio	r2,0(r18)
     c80:	8009883a 	mov	r4,r16
     c84:	000ed4c0 	call	ed4c <usleep>
     c88:	00802f84 	movi	r2,190
     c8c:	8880002d 	sthio	r2,0(r17)
     c90:	8009883a 	mov	r4,r16
     c94:	000ed4c0 	call	ed4c <usleep>
     c98:	00802c44 	movi	r2,177
     c9c:	9080002d 	sthio	r2,0(r18)
     ca0:	8009883a 	mov	r4,r16
     ca4:	000ed4c0 	call	ed4c <usleep>
     ca8:	8cc0002d 	sthio	r19,0(r17)
     cac:	8009883a 	mov	r4,r16
     cb0:	000ed4c0 	call	ed4c <usleep>
     cb4:	00800404 	movi	r2,16
     cb8:	8880002d 	sthio	r2,0(r17)
     cbc:	8009883a 	mov	r4,r16
     cc0:	000ed4c0 	call	ed4c <usleep>
     cc4:	00800e84 	movi	r2,58
     cc8:	9080002d 	sthio	r2,0(r18)
     ccc:	8009883a 	mov	r4,r16
     cd0:	000ed4c0 	call	ed4c <usleep>
     cd4:	00801544 	movi	r2,85
     cd8:	8880002d 	sthio	r2,0(r17)
     cdc:	8009883a 	mov	r4,r16
     ce0:	000ed4c0 	call	ed4c <usleep>
     ce4:	00802d84 	movi	r2,182
     ce8:	9080002d 	sthio	r2,0(r18)
     cec:	8009883a 	mov	r4,r16
     cf0:	000ed4c0 	call	ed4c <usleep>
     cf4:	8c00002d 	sthio	r16,0(r17)
     cf8:	8009883a 	mov	r4,r16
     cfc:	000ed4c0 	call	ed4c <usleep>
     d00:	00802884 	movi	r2,162
     d04:	8880002d 	sthio	r2,0(r17)
     d08:	8009883a 	mov	r4,r16
     d0c:	000ed4c0 	call	ed4c <usleep>
     d10:	00803c84 	movi	r2,242
     d14:	9080002d 	sthio	r2,0(r18)
     d18:	8009883a 	mov	r4,r16
     d1c:	000ed4c0 	call	ed4c <usleep>
     d20:	8d40002d 	sthio	r21,0(r17)
     d24:	8009883a 	mov	r4,r16
     d28:	000ed4c0 	call	ed4c <usleep>
     d2c:	9580002d 	sthio	r22,0(r18)
     d30:	8009883a 	mov	r4,r16
     d34:	000ed4c0 	call	ed4c <usleep>
     d38:	8d00002d 	sthio	r20,0(r17)
     d3c:	8009883a 	mov	r4,r16
     d40:	000ed4c0 	call	ed4c <usleep>
     d44:	00800d84 	movi	r2,54
     d48:	9080002d 	sthio	r2,0(r18)
     d4c:	8009883a 	mov	r4,r16
     d50:	000ed4c0 	call	ed4c <usleep>
     d54:	8cc0002d 	sthio	r19,0(r17)
     d58:	8009883a 	mov	r4,r16
     d5c:	000ed4c0 	call	ed4c <usleep>
     d60:	00800a84 	movi	r2,42
     d64:	9080002d 	sthio	r2,0(r18)
     d68:	8009883a 	mov	r4,r16
     d6c:	000ed4c0 	call	ed4c <usleep>
     d70:	8cc0002d 	sthio	r19,0(r17)
     d74:	8009883a 	mov	r4,r16
     d78:	000ed4c0 	call	ed4c <usleep>
     d7c:	8cc0002d 	sthio	r19,0(r17)
     d80:	8009883a 	mov	r4,r16
     d84:	000ed4c0 	call	ed4c <usleep>
     d88:	8cc0002d 	sthio	r19,0(r17)
     d8c:	8009883a 	mov	r4,r16
     d90:	000ed4c0 	call	ed4c <usleep>
     d94:	00803bc4 	movi	r2,239
     d98:	8880002d 	sthio	r2,0(r17)
     d9c:	8009883a 	mov	r4,r16
     da0:	000ed4c0 	call	ed4c <usleep>
     da4:	00800ac4 	movi	r2,43
     da8:	9080002d 	sthio	r2,0(r18)
     dac:	8009883a 	mov	r4,r16
     db0:	000ed4c0 	call	ed4c <usleep>
     db4:	8cc0002d 	sthio	r19,0(r17)
     db8:	8009883a 	mov	r4,r16
     dbc:	000ed4c0 	call	ed4c <usleep>
     dc0:	8cc0002d 	sthio	r19,0(r17)
     dc4:	8009883a 	mov	r4,r16
     dc8:	000ed4c0 	call	ed4c <usleep>
     dcc:	8d00002d 	sthio	r20,0(r17)
     dd0:	8009883a 	mov	r4,r16
     dd4:	000ed4c0 	call	ed4c <usleep>
     dd8:	00800fc4 	movi	r2,63
     ddc:	8880002d 	sthio	r2,0(r17)
     de0:	8009883a 	mov	r4,r16
     de4:	000ed4c0 	call	ed4c <usleep>
     de8:	00c04034 	movhi	r3,256
     dec:	00803c04 	movi	r2,240
     df0:	18c41d04 	addi	r3,r3,4212
     df4:	18800035 	stwio	r2,0(r3)
     df8:	d0a6ce8d 	sth	r2,-25798(gp)
     dfc:	00805004 	movi	r2,320
     e00:	d0a6ce0d 	sth	r2,-25800(gp)
     e04:	00800a44 	movi	r2,41
     e08:	9080002d 	sthio	r2,0(r18)
     e0c:	8009883a 	mov	r4,r16
     e10:	dfc00817 	ldw	ra,32(sp)
     e14:	ddc00717 	ldw	r23,28(sp)
     e18:	dd800617 	ldw	r22,24(sp)
     e1c:	dd400517 	ldw	r21,20(sp)
     e20:	dd000417 	ldw	r20,16(sp)
     e24:	dcc00317 	ldw	r19,12(sp)
     e28:	dc800217 	ldw	r18,8(sp)
     e2c:	dc400117 	ldw	r17,4(sp)
     e30:	dc000017 	ldw	r16,0(sp)
     e34:	dec00904 	addi	sp,sp,36
     e38:	000ed4c1 	jmpi	ed4c <usleep>

00000e3c <transfer_LCD_no_dma>:
     e3c:	defffb04 	addi	sp,sp,-20
     e40:	00804034 	movhi	r2,256
     e44:	dc000015 	stw	r16,0(sp)
     e48:	dfc00415 	stw	ra,16(sp)
     e4c:	dcc00315 	stw	r19,12(sp)
     e50:	dc800215 	stw	r18,8(sp)
     e54:	dc400115 	stw	r17,4(sp)
     e58:	2021883a 	mov	r16,r4
     e5c:	10841e04 	addi	r2,r2,4216
     e60:	11400035 	stwio	r5,0(r2)
     e64:	00804034 	movhi	r2,256
     e68:	10841804 	addi	r2,r2,4192
     e6c:	00c00b04 	movi	r3,44
     e70:	10c0002d 	sthio	r3,0(r2)
     e74:	29a5383a 	mul	r18,r5,r6
     e78:	01000284 	movi	r4,10
     e7c:	000ed4c0 	call	ed4c <usleep>
     e80:	90000a26 	beq	r18,zero,eac <transfer_LCD_no_dma+0x70>
     e84:	04c04034 	movhi	r19,256
     e88:	9cc41904 	addi	r19,r19,4196
     e8c:	0023883a 	mov	r17,zero
     e90:	8080000b 	ldhu	r2,0(r16)
     e94:	9880002d 	sthio	r2,0(r19)
     e98:	01000284 	movi	r4,10
     e9c:	8c400044 	addi	r17,r17,1
     ea0:	000ed4c0 	call	ed4c <usleep>
     ea4:	84000084 	addi	r16,r16,2
     ea8:	8cbff91e 	bne	r17,r18,e90 <__alt_data_end+0xff000e90>
     eac:	dfc00417 	ldw	ra,16(sp)
     eb0:	dcc00317 	ldw	r19,12(sp)
     eb4:	dc800217 	ldw	r18,8(sp)
     eb8:	dc400117 	ldw	r17,4(sp)
     ebc:	dc000017 	ldw	r16,0(sp)
     ec0:	dec00504 	addi	sp,sp,20
     ec4:	f800283a 	ret

00000ec8 <transfer_LCD_with_dma>:
     ec8:	d0a6ce0b 	ldhu	r2,-25800(gp)
     ecc:	3080010e 	bge	r6,r2,ed4 <transfer_LCD_with_dma+0xc>
     ed0:	3005883a 	mov	r2,r6
     ed4:	d0e6ce8b 	ldhu	r3,-25798(gp)
     ed8:	28c0010e 	bge	r5,r3,ee0 <transfer_LCD_with_dma+0x18>
     edc:	2807883a 	mov	r3,r5
     ee0:	01804034 	movhi	r6,256
     ee4:	31841e04 	addi	r6,r6,4216
     ee8:	31400035 	stwio	r5,0(r6)
     eec:	01404034 	movhi	r5,256
     ef0:	29441b04 	addi	r5,r5,4204
     ef4:	29000035 	stwio	r4,0(r5)
     ef8:	18ffffcc 	andi	r3,r3,65535
     efc:	10bfffcc 	andi	r2,r2,65535
     f00:	1885383a 	mul	r2,r3,r2
     f04:	00c04034 	movhi	r3,256
     f08:	18c41c04 	addi	r3,r3,4208
     f0c:	18800035 	stwio	r2,0(r3)
     f10:	39c03fcc 	andi	r7,r7,255
     f14:	39c0201c 	xori	r7,r7,128
     f18:	00804034 	movhi	r2,256
     f1c:	39ffe004 	addi	r7,r7,-128
     f20:	10841a04 	addi	r2,r2,4200
     f24:	38000326 	beq	r7,zero,f34 <transfer_LCD_with_dma+0x6c>
     f28:	00c04404 	movi	r3,272
     f2c:	10c0002d 	sthio	r3,0(r2)
     f30:	f800283a 	ret
     f34:	00c04004 	movi	r3,256
     f38:	10c0002d 	sthio	r3,0(r2)
     f3c:	f800283a 	ret

00000f40 <main>:
     f40:	defff804 	addi	sp,sp,-32
     f44:	dfc00715 	stw	ra,28(sp)
     f48:	dd400515 	stw	r21,20(sp)
     f4c:	dd000415 	stw	r20,16(sp)
     f50:	dcc00315 	stw	r19,12(sp)
     f54:	dc800215 	stw	r18,8(sp)
     f58:	dc400115 	stw	r17,4(sp)
     f5c:	dc000015 	stw	r16,0(sp)
     f60:	dd800615 	stw	r22,24(sp)
     f64:	0000a280 	call	a28 <init_LCD>
     f68:	00002800 	call	280 <init_camera>
     f6c:	01000604 	movi	r4,24
     f70:	0001be40 	call	1be4 <vga_set_swap>
     f74:	000faf40 	call	faf4 <alt_timestamp_start>
     f78:	01000074 	movhi	r4,1
     f7c:	2104e904 	addi	r4,r4,5028
     f80:	00027080 	call	2708 <puts>
     f84:	00005e00 	call	5e0 <cam_get_profiling>
     f88:	00005980 	call	598 <cam_get_xsize>
     f8c:	1021883a 	mov	r16,r2
     f90:	00005bc0 	call	5bc <cam_get_ysize>
     f94:	10bfffcc 	andi	r2,r2,65535
     f98:	813fffcc 	andi	r4,r16,65535
     f9c:	2089383a 	mul	r4,r4,r2
     fa0:	04800044 	movi	r18,1
     fa4:	04e04414 	movui	r19,33040
     fa8:	0001da80 	call	1da8 <malloc>
     fac:	102b883a 	mov	r21,r2
     fb0:	00005980 	call	598 <cam_get_xsize>
     fb4:	1021883a 	mov	r16,r2
     fb8:	00005bc0 	call	5bc <cam_get_ysize>
     fbc:	10bfffcc 	andi	r2,r2,65535
     fc0:	813fffcc 	andi	r4,r16,65535
     fc4:	2089383a 	mul	r4,r4,r2
     fc8:	0001da80 	call	1da8 <malloc>
     fcc:	1029883a 	mov	r20,r2
     fd0:	00005980 	call	598 <cam_get_xsize>
     fd4:	1021883a 	mov	r16,r2
     fd8:	00005bc0 	call	5bc <cam_get_ysize>
     fdc:	10bfffcc 	andi	r2,r2,65535
     fe0:	813fffcc 	andi	r4,r16,65535
     fe4:	2089383a 	mul	r4,r4,r2
     fe8:	0001da80 	call	1da8 <malloc>
     fec:	1023883a 	mov	r17,r2
     ff0:	00005980 	call	598 <cam_get_xsize>
     ff4:	1021883a 	mov	r16,r2
     ff8:	00005bc0 	call	5bc <cam_get_ysize>
     ffc:	10bfffcc 	andi	r2,r2,65535
    1000:	813fffcc 	andi	r4,r16,65535
    1004:	2089383a 	mul	r4,r4,r2
    1008:	0001da80 	call	1da8 <malloc>
    100c:	a80b883a 	mov	r5,r21
    1010:	0009883a 	mov	r4,zero
    1014:	1021883a 	mov	r16,r2
    1018:	00006580 	call	658 <cam_set_image_pointer>
    101c:	a00b883a 	mov	r5,r20
    1020:	9009883a 	mov	r4,r18
    1024:	00006580 	call	658 <cam_set_image_pointer>
    1028:	880b883a 	mov	r5,r17
    102c:	01000084 	movi	r4,2
    1030:	00006580 	call	658 <cam_set_image_pointer>
    1034:	800b883a 	mov	r5,r16
    1038:	010000c4 	movi	r4,3
    103c:	00006580 	call	658 <cam_set_image_pointer>
    1040:	00007100 	call	710 <enable_continues_mode>
    1044:	00005980 	call	598 <cam_get_xsize>
    1048:	1021883a 	mov	r16,r2
    104c:	00005bc0 	call	5bc <cam_get_ysize>
    1050:	813fffcc 	andi	r4,r16,65535
    1054:	2488d83a 	srl	r4,r4,r18
    1058:	117fffcc 	andi	r5,r2,65535
    105c:	00013200 	call	1320 <init_sobel_arrays>
    1060:	00007240 	call	724 <new_image_available>
    1064:	10803fcc 	andi	r2,r2,255
    1068:	1080201c 	xori	r2,r2,128
    106c:	10bfe004 	addi	r2,r2,-128
    1070:	103ffb26 	beq	r2,zero,1060 <__alt_data_end+0xff001060>
    1074:	00006cc0 	call	6cc <current_image_valid>
    1078:	10bfffcc 	andi	r2,r2,65535
    107c:	10a0001c 	xori	r2,r2,32768
    1080:	10a00004 	addi	r2,r2,-32768
    1084:	103ff626 	beq	r2,zero,1060 <__alt_data_end+0xff001060>
    1088:	00007500 	call	750 <DIPSW_get_value>
    108c:	1021883a 	mov	r16,r2
    1090:	00006e00 	call	6e0 <current_image_pointer>
    1094:	1023883a 	mov	r17,r2
    1098:	808001cc 	andi	r2,r16,7
    109c:	14807f26 	beq	r2,r18,129c <main+0x35c>
    10a0:	10006c26 	beq	r2,zero,1254 <main+0x314>
    10a4:	00c00084 	movi	r3,2
    10a8:	10c05e26 	beq	r2,r3,1224 <main+0x2e4>
    10ac:	00c000c4 	movi	r3,3
    10b0:	10c0221e 	bne	r2,r3,113c <main+0x1fc>
    10b4:	00005980 	call	598 <cam_get_xsize>
    10b8:	1029883a 	mov	r20,r2
    10bc:	00005bc0 	call	5bc <cam_get_ysize>
    10c0:	a17fffcc 	andi	r5,r20,65535
    10c4:	280ad07a 	srli	r5,r5,1
    10c8:	8809883a 	mov	r4,r17
    10cc:	11bfffcc 	andi	r6,r2,65535
    10d0:	00007640 	call	764 <conv_grayscale>
    10d4:	00008540 	call	854 <get_grayscale_picture>
    10d8:	1009883a 	mov	r4,r2
    10dc:	1023883a 	mov	r17,r2
    10e0:	00014c00 	call	14c0 <sobel_x>
    10e4:	8809883a 	mov	r4,r17
    10e8:	00018380 	call	1838 <sobel_y_with_rgb>
    10ec:	0001bc40 	call	1bc4 <GetSobel_rgb>
    10f0:	1029883a 	mov	r20,r2
    10f4:	00005980 	call	598 <cam_get_xsize>
    10f8:	1023883a 	mov	r17,r2
    10fc:	00005bc0 	call	5bc <cam_get_ysize>
    1100:	897fffcc 	andi	r5,r17,65535
    1104:	280ad07a 	srli	r5,r5,1
    1108:	84003fcc 	andi	r16,r16,255
    110c:	8400201c 	xori	r16,r16,128
    1110:	000f883a 	mov	r7,zero
    1114:	11bfffcc 	andi	r6,r2,65535
    1118:	a4c9883a 	add	r4,r20,r19
    111c:	843fe004 	addi	r16,r16,-128
    1120:	0000ec80 	call	ec8 <transfer_LCD_with_dma>
    1124:	803fce0e 	bge	r16,zero,1060 <__alt_data_end+0xff001060>
    1128:	01000204 	movi	r4,8
    112c:	0001be40 	call	1be4 <vga_set_swap>
    1130:	a009883a 	mov	r4,r20
    1134:	0001bd40 	call	1bd4 <vga_set_pointer>
    1138:	003fc906 	br	1060 <__alt_data_end+0xff001060>
    113c:	000fb6c0 	call	fb6c <alt_timestamp>
    1140:	1029883a 	mov	r20,r2
    1144:	00005980 	call	598 <cam_get_xsize>
    1148:	102b883a 	mov	r21,r2
    114c:	00005bc0 	call	5bc <cam_get_ysize>
    1150:	a97fffcc 	andi	r5,r21,65535
    1154:	280ad07a 	srli	r5,r5,1
    1158:	11bfffcc 	andi	r6,r2,65535
    115c:	8809883a 	mov	r4,r17
    1160:	00007640 	call	764 <conv_grayscale>
    1164:	00008540 	call	854 <get_grayscale_picture>
    1168:	102b883a 	mov	r21,r2
    116c:	000fb6c0 	call	fb6c <alt_timestamp>
    1170:	1529c83a 	sub	r20,r2,r20
    1174:	a009883a 	mov	r4,r20
    1178:	014000f4 	movhi	r5,3
    117c:	0001cec0 	call	1cec <__udivsi3>
    1180:	01000074 	movhi	r4,1
    1184:	100b883a 	mov	r5,r2
    1188:	2104ee04 	addi	r4,r4,5048
    118c:	000260c0 	call	260c <printf>
    1190:	000fb6c0 	call	fb6c <alt_timestamp>
    1194:	a809883a 	mov	r4,r21
    1198:	01402004 	movi	r5,128
    119c:	1023883a 	mov	r17,r2
    11a0:	0001a540 	call	1a54 <sobel>
    11a4:	000fb6c0 	call	fb6c <alt_timestamp>
    11a8:	1463c83a 	sub	r17,r2,r17
    11ac:	8809883a 	mov	r4,r17
    11b0:	014000f4 	movhi	r5,3
    11b4:	0001cec0 	call	1cec <__udivsi3>
    11b8:	01000074 	movhi	r4,1
    11bc:	100b883a 	mov	r5,r2
    11c0:	2104f604 	addi	r4,r4,5080
    11c4:	000260c0 	call	260c <printf>
    11c8:	0001bcc0 	call	1bcc <GetSobelResult>
    11cc:	102d883a 	mov	r22,r2
    11d0:	00005980 	call	598 <cam_get_xsize>
    11d4:	102b883a 	mov	r21,r2
    11d8:	00005bc0 	call	5bc <cam_get_ysize>
    11dc:	a97fffcc 	andi	r5,r21,65535
    11e0:	280ad07a 	srli	r5,r5,1
    11e4:	84003fcc 	andi	r16,r16,255
    11e8:	8400201c 	xori	r16,r16,128
    11ec:	01c00044 	movi	r7,1
    11f0:	11bfffcc 	andi	r6,r2,65535
    11f4:	b1102204 	addi	r4,r22,16520
    11f8:	843fe004 	addi	r16,r16,-128
    11fc:	0000ec80 	call	ec8 <transfer_LCD_with_dma>
    1200:	80004216 	blt	r16,zero,130c <main+0x3cc>
    1204:	a449883a 	add	r4,r20,r17
    1208:	014000f4 	movhi	r5,3
    120c:	0001cec0 	call	1cec <__udivsi3>
    1210:	01000074 	movhi	r4,1
    1214:	100b883a 	mov	r5,r2
    1218:	2104ff04 	addi	r4,r4,5116
    121c:	000260c0 	call	260c <printf>
    1220:	003f8f06 	br	1060 <__alt_data_end+0xff001060>
    1224:	00005980 	call	598 <cam_get_xsize>
    1228:	1029883a 	mov	r20,r2
    122c:	00005bc0 	call	5bc <cam_get_ysize>
    1230:	a17fffcc 	andi	r5,r20,65535
    1234:	280ad07a 	srli	r5,r5,1
    1238:	8809883a 	mov	r4,r17
    123c:	11bfffcc 	andi	r6,r2,65535
    1240:	00007640 	call	764 <conv_grayscale>
    1244:	00008540 	call	854 <get_grayscale_picture>
    1248:	1009883a 	mov	r4,r2
    124c:	00015c00 	call	15c0 <sobel_x_with_rgb>
    1250:	003fa606 	br	10ec <__alt_data_end+0xff0010ec>
    1254:	00005980 	call	598 <cam_get_xsize>
    1258:	1029883a 	mov	r20,r2
    125c:	00005bc0 	call	5bc <cam_get_ysize>
    1260:	a17fffcc 	andi	r5,r20,65535
    1264:	280ad07a 	srli	r5,r5,1
    1268:	84003fcc 	andi	r16,r16,255
    126c:	8400201c 	xori	r16,r16,128
    1270:	000f883a 	mov	r7,zero
    1274:	11bfffcc 	andi	r6,r2,65535
    1278:	8cc9883a 	add	r4,r17,r19
    127c:	843fe004 	addi	r16,r16,-128
    1280:	0000ec80 	call	ec8 <transfer_LCD_with_dma>
    1284:	803f760e 	bge	r16,zero,1060 <__alt_data_end+0xff001060>
    1288:	01000204 	movi	r4,8
    128c:	0001be40 	call	1be4 <vga_set_swap>
    1290:	8809883a 	mov	r4,r17
    1294:	0001bd40 	call	1bd4 <vga_set_pointer>
    1298:	003f7106 	br	1060 <__alt_data_end+0xff001060>
    129c:	00005980 	call	598 <cam_get_xsize>
    12a0:	1029883a 	mov	r20,r2
    12a4:	00005bc0 	call	5bc <cam_get_ysize>
    12a8:	a17fffcc 	andi	r5,r20,65535
    12ac:	280ad07a 	srli	r5,r5,1
    12b0:	8809883a 	mov	r4,r17
    12b4:	11bfffcc 	andi	r6,r2,65535
    12b8:	00007640 	call	764 <conv_grayscale>
    12bc:	00008540 	call	854 <get_grayscale_picture>
    12c0:	1029883a 	mov	r20,r2
    12c4:	00005980 	call	598 <cam_get_xsize>
    12c8:	1023883a 	mov	r17,r2
    12cc:	00005bc0 	call	5bc <cam_get_ysize>
    12d0:	897fffcc 	andi	r5,r17,65535
    12d4:	280ad07a 	srli	r5,r5,1
    12d8:	84003fcc 	andi	r16,r16,255
    12dc:	8400201c 	xori	r16,r16,128
    12e0:	900f883a 	mov	r7,r18
    12e4:	11bfffcc 	andi	r6,r2,65535
    12e8:	a1102204 	addi	r4,r20,16520
    12ec:	843fe004 	addi	r16,r16,-128
    12f0:	0000ec80 	call	ec8 <transfer_LCD_with_dma>
    12f4:	803f5a0e 	bge	r16,zero,1060 <__alt_data_end+0xff001060>
    12f8:	01000604 	movi	r4,24
    12fc:	0001be40 	call	1be4 <vga_set_swap>
    1300:	a009883a 	mov	r4,r20
    1304:	0001bd40 	call	1bd4 <vga_set_pointer>
    1308:	003f5506 	br	1060 <__alt_data_end+0xff001060>
    130c:	01000604 	movi	r4,24
    1310:	0001be40 	call	1be4 <vga_set_swap>
    1314:	b009883a 	mov	r4,r22
    1318:	0001bd40 	call	1bd4 <vga_set_pointer>
    131c:	003fb906 	br	1204 <__alt_data_end+0xff001204>

00001320 <init_sobel_arrays>:
    1320:	d0a6d217 	ldw	r2,-25784(gp)
    1324:	defffd04 	addi	sp,sp,-12
    1328:	dc400115 	stw	r17,4(sp)
    132c:	dc000015 	stw	r16,0(sp)
    1330:	dfc00215 	stw	ra,8(sp)
    1334:	d126cf15 	stw	r4,-25796(gp)
    1338:	d166d115 	stw	r5,-25788(gp)
    133c:	2023883a 	mov	r17,r4
    1340:	2821883a 	mov	r16,r5
    1344:	10000226 	beq	r2,zero,1350 <init_sobel_arrays+0x30>
    1348:	1009883a 	mov	r4,r2
    134c:	0001dbc0 	call	1dbc <free>
    1350:	8c21383a 	mul	r16,r17,r16
    1354:	8423883a 	add	r17,r16,r16
    1358:	8809883a 	mov	r4,r17
    135c:	0001da80 	call	1da8 <malloc>
    1360:	d126d317 	ldw	r4,-25780(gp)
    1364:	d0a6d215 	stw	r2,-25784(gp)
    1368:	20000126 	beq	r4,zero,1370 <init_sobel_arrays+0x50>
    136c:	0001dbc0 	call	1dbc <free>
    1370:	8809883a 	mov	r4,r17
    1374:	0001da80 	call	1da8 <malloc>
    1378:	d126d017 	ldw	r4,-25792(gp)
    137c:	d0a6d315 	stw	r2,-25780(gp)
    1380:	20000126 	beq	r4,zero,1388 <init_sobel_arrays+0x68>
    1384:	0001dbc0 	call	1dbc <free>
    1388:	8009883a 	mov	r4,r16
    138c:	0001da80 	call	1da8 <malloc>
    1390:	d126d417 	ldw	r4,-25776(gp)
    1394:	d0a6d015 	stw	r2,-25792(gp)
    1398:	20000126 	beq	r4,zero,13a0 <init_sobel_arrays+0x80>
    139c:	0001dbc0 	call	1dbc <free>
    13a0:	8809883a 	mov	r4,r17
    13a4:	0001da80 	call	1da8 <malloc>
    13a8:	d0a6d415 	stw	r2,-25776(gp)
    13ac:	0005883a 	mov	r2,zero
    13b0:	04000f0e 	bge	zero,r16,13f0 <init_sobel_arrays+0xd0>
    13b4:	d226d217 	ldw	r8,-25784(gp)
    13b8:	d1e6d317 	ldw	r7,-25780(gp)
    13bc:	d1a6d017 	ldw	r6,-25792(gp)
    13c0:	1087883a 	add	r3,r2,r2
    13c4:	40d1883a 	add	r8,r8,r3
    13c8:	4000000d 	sth	zero,0(r8)
    13cc:	38cf883a 	add	r7,r7,r3
    13d0:	308d883a 	add	r6,r6,r2
    13d4:	3800000d 	sth	zero,0(r7)
    13d8:	30000005 	stb	zero,0(r6)
    13dc:	d1a6d417 	ldw	r6,-25776(gp)
    13e0:	10800044 	addi	r2,r2,1
    13e4:	30c7883a 	add	r3,r6,r3
    13e8:	1800000d 	sth	zero,0(r3)
    13ec:	80bff11e 	bne	r16,r2,13b4 <__alt_data_end+0xff0013b4>
    13f0:	dfc00217 	ldw	ra,8(sp)
    13f4:	dc400117 	ldw	r17,4(sp)
    13f8:	dc000017 	ldw	r16,0(sp)
    13fc:	dec00304 	addi	sp,sp,12
    1400:	f800283a 	ret

00001404 <sobel_mac>:
    1404:	da800017 	ldw	r10,0(sp)
    1408:	31bfffc4 	addi	r6,r6,-1
    140c:	38c00047 	ldb	r3,1(r7)
    1410:	328d383a 	mul	r6,r6,r10
    1414:	3b8000c7 	ldb	r14,3(r7)
    1418:	3a000107 	ldb	r8,4(r7)
    141c:	5185883a 	add	r2,r10,r6
    1420:	2893883a 	add	r9,r5,r2
    1424:	314d883a 	add	r6,r6,r5
    1428:	218d883a 	add	r6,r4,r6
    142c:	2253883a 	add	r9,r4,r9
    1430:	33000003 	ldbu	r12,0(r6)
    1434:	5095883a 	add	r10,r10,r2
    1438:	48bfffc3 	ldbu	r2,-1(r9)
    143c:	5155883a 	add	r10,r10,r5
    1440:	4ac00003 	ldbu	r11,0(r9)
    1444:	229b883a 	add	r13,r4,r10
    1448:	49000043 	ldbu	r4,1(r9)
    144c:	3a800147 	ldb	r10,5(r7)
    1450:	139d383a 	mul	r14,r2,r14
    1454:	60d9383a 	mul	r12,r12,r3
    1458:	68800003 	ldbu	r2,0(r13)
    145c:	38c001c7 	ldb	r3,7(r7)
    1460:	5a17383a 	mul	r11,r11,r8
    1464:	33ffffc3 	ldbu	r15,-1(r6)
    1468:	3a000007 	ldb	r8,0(r7)
    146c:	2295383a 	mul	r10,r4,r10
    1470:	31000043 	ldbu	r4,1(r6)
    1474:	39800087 	ldb	r6,2(r7)
    1478:	730b883a 	add	r5,r14,r12
    147c:	10d3383a 	mul	r9,r2,r3
    1480:	6b3fffc3 	ldbu	r12,-1(r13)
    1484:	38c00187 	ldb	r3,6(r7)
    1488:	2acb883a 	add	r5,r5,r11
    148c:	7a11383a 	mul	r8,r15,r8
    1490:	6ac00043 	ldbu	r11,1(r13)
    1494:	39c00207 	ldb	r7,8(r7)
    1498:	2a8b883a 	add	r5,r5,r10
    149c:	2189383a 	mul	r4,r4,r6
    14a0:	2a45883a 	add	r2,r5,r9
    14a4:	60c7383a 	mul	r3,r12,r3
    14a8:	1205883a 	add	r2,r2,r8
    14ac:	59cb383a 	mul	r5,r11,r7
    14b0:	1105883a 	add	r2,r2,r4
    14b4:	10c5883a 	add	r2,r2,r3
    14b8:	1145883a 	add	r2,r2,r5
    14bc:	f800283a 	ret

000014c0 <sobel_x>:
    14c0:	defff904 	addi	sp,sp,-28
    14c4:	dc400115 	stw	r17,4(sp)
    14c8:	d466d117 	ldw	r17,-25788(gp)
    14cc:	dc000015 	stw	r16,0(sp)
    14d0:	dfc00615 	stw	ra,24(sp)
    14d4:	dd400515 	stw	r21,20(sp)
    14d8:	dd000415 	stw	r20,16(sp)
    14dc:	dcc00315 	stw	r19,12(sp)
    14e0:	dc800215 	stw	r18,8(sp)
    14e4:	04000084 	movi	r16,2
    14e8:	84402c0e 	bge	r16,r17,159c <sobel_x+0xdc>
    14ec:	d366cf17 	ldw	r13,-25796(gp)
    14f0:	d3a6d217 	ldw	r14,-25784(gp)
    14f4:	8c7fffc4 	addi	r17,r17,-1
    14f8:	6b65883a 	add	r18,r13,r13
    14fc:	9405883a 	add	r2,r18,r16
    1500:	2499883a 	add	r12,r4,r18
    1504:	709d883a 	add	r14,r14,r2
    1508:	03c00044 	movi	r15,1
    150c:	6c27883a 	add	r19,r13,r16
    1510:	693f883a 	add	ra,r13,r4
    1514:	83401c0e 	bge	r16,r13,1588 <sobel_x+0xc8>
    1518:	f817883a 	mov	r11,ra
    151c:	22800084 	addi	r10,r4,2
    1520:	990d883a 	add	r6,r19,r4
    1524:	62400084 	addi	r9,r12,2
    1528:	7011883a 	mov	r8,r14
    152c:	600f883a 	mov	r7,r12
    1530:	4d000003 	ldbu	r20,0(r9)
    1534:	50c00003 	ldbu	r3,0(r10)
    1538:	59400003 	ldbu	r5,0(r11)
    153c:	30800003 	ldbu	r2,0(r6)
    1540:	1d07883a 	add	r3,r3,r20
    1544:	25400003 	ldbu	r21,0(r4)
    1548:	1947c83a 	sub	r3,r3,r5
    154c:	3d000003 	ldbu	r20,0(r7)
    1550:	194bc83a 	sub	r5,r3,r5
    1554:	1087883a 	add	r3,r2,r2
    1558:	28c7883a 	add	r3,r5,r3
    155c:	1d45c83a 	sub	r2,r3,r21
    1560:	1505c83a 	sub	r2,r2,r20
    1564:	4080000d 	sth	r2,0(r8)
    1568:	31800044 	addi	r6,r6,1
    156c:	21000044 	addi	r4,r4,1
    1570:	5ac00044 	addi	r11,r11,1
    1574:	52800044 	addi	r10,r10,1
    1578:	39c00044 	addi	r7,r7,1
    157c:	4a400044 	addi	r9,r9,1
    1580:	42000084 	addi	r8,r8,2
    1584:	61bfea1e 	bne	r12,r6,1530 <__alt_data_end+0xff001530>
    1588:	7bc00044 	addi	r15,r15,1
    158c:	f809883a 	mov	r4,ra
    1590:	6359883a 	add	r12,r12,r13
    1594:	749d883a 	add	r14,r14,r18
    1598:	7c7fdd1e 	bne	r15,r17,1510 <__alt_data_end+0xff001510>
    159c:	dfc00617 	ldw	ra,24(sp)
    15a0:	dd400517 	ldw	r21,20(sp)
    15a4:	dd000417 	ldw	r20,16(sp)
    15a8:	dcc00317 	ldw	r19,12(sp)
    15ac:	dc800217 	ldw	r18,8(sp)
    15b0:	dc400117 	ldw	r17,4(sp)
    15b4:	dc000017 	ldw	r16,0(sp)
    15b8:	dec00704 	addi	sp,sp,28
    15bc:	f800283a 	ret

000015c0 <sobel_x_with_rgb>:
    15c0:	defff504 	addi	sp,sp,-44
    15c4:	dd800715 	stw	r22,28(sp)
    15c8:	d5a6d117 	ldw	r22,-25788(gp)
    15cc:	dfc00a15 	stw	ra,40(sp)
    15d0:	df000915 	stw	fp,36(sp)
    15d4:	ddc00815 	stw	r23,32(sp)
    15d8:	dd400615 	stw	r21,24(sp)
    15dc:	dd000515 	stw	r20,20(sp)
    15e0:	dcc00415 	stw	r19,16(sp)
    15e4:	dc800315 	stw	r18,12(sp)
    15e8:	dc400215 	stw	r17,8(sp)
    15ec:	dc000115 	stw	r16,4(sp)
    15f0:	b5bfffc4 	addi	r22,r22,-1
    15f4:	00800044 	movi	r2,1
    15f8:	1580440e 	bge	r2,r22,170c <sobel_x_with_rgb+0x14c>
    15fc:	d7e6cf17 	ldw	ra,-25796(gp)
    1600:	d4a6d217 	ldw	r18,-25784(gp)
    1604:	d466d417 	ldw	r17,-25776(gp)
    1608:	ffe9883a 	add	r20,ra,ra
    160c:	a0800084 	addi	r2,r20,2
    1610:	04000084 	movi	r16,2
    1614:	90a5883a 	add	r18,r18,r2
    1618:	88a3883a 	add	r17,r17,r2
    161c:	fc05883a 	add	r2,ra,r16
    1620:	27df883a 	add	r15,r4,ra
    1624:	802f883a 	mov	r23,r16
    1628:	87f9c83a 	sub	fp,r16,ra
    162c:	d8800015 	stw	r2,0(sp)
    1630:	bfc02f0e 	bge	r23,ra,16f0 <sobel_x_with_rgb+0x130>
    1634:	d8800017 	ldw	r2,0(sp)
    1638:	7fe7883a 	add	r19,r15,ra
    163c:	802b883a 	mov	r21,r16
    1640:	7fdbc83a 	sub	r13,r15,ra
    1644:	e3cf883a 	add	r7,fp,r15
    1648:	7b000084 	addi	r12,r15,2
    164c:	9817883a 	mov	r11,r19
    1650:	13d5883a 	add	r10,r2,r15
    1654:	881d883a 	mov	r14,r17
    1658:	9013883a 	mov	r9,r18
    165c:	7811883a 	mov	r8,r15
    1660:	00000b06 	br	1690 <sobel_x_with_rgb+0xd0>
    1664:	180692fa 	slli	r3,r3,11
    1668:	70c0000d 	sth	r3,0(r14)
    166c:	39c00044 	addi	r7,r7,1
    1670:	6b400044 	addi	r13,r13,1
    1674:	42000044 	addi	r8,r8,1
    1678:	63000044 	addi	r12,r12,1
    167c:	5ac00044 	addi	r11,r11,1
    1680:	52800044 	addi	r10,r10,1
    1684:	4a400084 	addi	r9,r9,2
    1688:	73800084 	addi	r14,r14,2
    168c:	79c01a26 	beq	r15,r7,16f8 <sobel_x_with_rgb+0x138>
    1690:	50800003 	ldbu	r2,0(r10)
    1694:	39400003 	ldbu	r5,0(r7)
    1698:	41800003 	ldbu	r6,0(r8)
    169c:	60c00003 	ldbu	r3,0(r12)
    16a0:	288b883a 	add	r5,r5,r2
    16a4:	298bc83a 	sub	r5,r5,r6
    16a8:	68800003 	ldbu	r2,0(r13)
    16ac:	59000003 	ldbu	r4,0(r11)
    16b0:	298bc83a 	sub	r5,r5,r6
    16b4:	18c7883a 	add	r3,r3,r3
    16b8:	28c7883a 	add	r3,r5,r3
    16bc:	1887c83a 	sub	r3,r3,r2
    16c0:	1905c83a 	sub	r2,r3,r4
    16c4:	4880000d 	sth	r2,0(r9)
    16c8:	10bfffcc 	andi	r2,r2,65535
    16cc:	10a0001c 	xori	r2,r2,32768
    16d0:	10a00004 	addi	r2,r2,-32768
    16d4:	1007d0fa 	srai	r3,r2,3
    16d8:	103fe20e 	bge	r2,zero,1664 <__alt_data_end+0xff001664>
    16dc:	0085c83a 	sub	r2,zero,r2
    16e0:	1005d0ba 	srai	r2,r2,2
    16e4:	1004917a 	slli	r2,r2,5
    16e8:	7080000d 	sth	r2,0(r14)
    16ec:	003fdf06 	br	166c <__alt_data_end+0xff00166c>
    16f0:	802b883a 	mov	r21,r16
    16f4:	7fe7883a 	add	r19,r15,ra
    16f8:	84000044 	addi	r16,r16,1
    16fc:	981f883a 	mov	r15,r19
    1700:	9525883a 	add	r18,r18,r20
    1704:	8d23883a 	add	r17,r17,r20
    1708:	adbfc916 	blt	r21,r22,1630 <__alt_data_end+0xff001630>
    170c:	dfc00a17 	ldw	ra,40(sp)
    1710:	df000917 	ldw	fp,36(sp)
    1714:	ddc00817 	ldw	r23,32(sp)
    1718:	dd800717 	ldw	r22,28(sp)
    171c:	dd400617 	ldw	r21,24(sp)
    1720:	dd000517 	ldw	r20,20(sp)
    1724:	dcc00417 	ldw	r19,16(sp)
    1728:	dc800317 	ldw	r18,12(sp)
    172c:	dc400217 	ldw	r17,8(sp)
    1730:	dc000117 	ldw	r16,4(sp)
    1734:	dec00b04 	addi	sp,sp,44
    1738:	f800283a 	ret

0000173c <sobel_y>:
    173c:	defff904 	addi	sp,sp,-28
    1740:	dc800215 	stw	r18,8(sp)
    1744:	d4a6d117 	ldw	r18,-25788(gp)
    1748:	dc400115 	stw	r17,4(sp)
    174c:	dfc00615 	stw	ra,24(sp)
    1750:	dd400515 	stw	r21,20(sp)
    1754:	dd000415 	stw	r20,16(sp)
    1758:	dcc00315 	stw	r19,12(sp)
    175c:	dc000015 	stw	r16,0(sp)
    1760:	04400084 	movi	r17,2
    1764:	8c802b0e 	bge	r17,r18,1814 <sobel_y+0xd8>
    1768:	d3e6cf17 	ldw	r15,-25796(gp)
    176c:	d3a6d317 	ldw	r14,-25780(gp)
    1770:	07c00044 	movi	ra,1
    1774:	7be1883a 	add	r16,r15,r15
    1778:	8467883a 	add	r19,r16,r17
    177c:	74dd883a 	add	r14,r14,r19
    1780:	94bfffc4 	addi	r18,r18,-1
    1784:	87e9883a 	add	r20,r16,ra
    1788:	8bc01e0e 	bge	r17,r15,1804 <sobel_y+0xc8>
    178c:	810f883a 	add	r7,r16,r4
    1790:	23000044 	addi	r12,r4,1
    1794:	21800084 	addi	r6,r4,2
    1798:	a117883a 	add	r11,r20,r4
    179c:	9915883a 	add	r10,r19,r4
    17a0:	3bdbc83a 	sub	r13,r7,r15
    17a4:	7013883a 	mov	r9,r14
    17a8:	2011883a 	mov	r8,r4
    17ac:	31400003 	ldbu	r5,0(r6)
    17b0:	60800003 	ldbu	r2,0(r12)
    17b4:	40c00003 	ldbu	r3,0(r8)
    17b8:	5d400003 	ldbu	r21,0(r11)
    17bc:	31800044 	addi	r6,r6,1
    17c0:	1947883a 	add	r3,r3,r5
    17c4:	108b883a 	add	r5,r2,r2
    17c8:	1947883a 	add	r3,r3,r5
    17cc:	38800003 	ldbu	r2,0(r7)
    17d0:	51400003 	ldbu	r5,0(r10)
    17d4:	1d47c83a 	sub	r3,r3,r21
    17d8:	1d47c83a 	sub	r3,r3,r21
    17dc:	1885c83a 	sub	r2,r3,r2
    17e0:	1145c83a 	sub	r2,r2,r5
    17e4:	4880000d 	sth	r2,0(r9)
    17e8:	42000044 	addi	r8,r8,1
    17ec:	63000044 	addi	r12,r12,1
    17f0:	5ac00044 	addi	r11,r11,1
    17f4:	39c00044 	addi	r7,r7,1
    17f8:	52800044 	addi	r10,r10,1
    17fc:	4a400084 	addi	r9,r9,2
    1800:	69bfea1e 	bne	r13,r6,17ac <__alt_data_end+0xff0017ac>
    1804:	ffc00044 	addi	ra,ra,1
    1808:	23c9883a 	add	r4,r4,r15
    180c:	741d883a 	add	r14,r14,r16
    1810:	97ffdd1e 	bne	r18,ra,1788 <__alt_data_end+0xff001788>
    1814:	dfc00617 	ldw	ra,24(sp)
    1818:	dd400517 	ldw	r21,20(sp)
    181c:	dd000417 	ldw	r20,16(sp)
    1820:	dcc00317 	ldw	r19,12(sp)
    1824:	dc800217 	ldw	r18,8(sp)
    1828:	dc400117 	ldw	r17,4(sp)
    182c:	dc000017 	ldw	r16,0(sp)
    1830:	dec00704 	addi	sp,sp,28
    1834:	f800283a 	ret

00001838 <sobel_y_with_rgb>:
    1838:	defff604 	addi	sp,sp,-40
    183c:	dcc00315 	stw	r19,12(sp)
    1840:	d4e6d117 	ldw	r19,-25788(gp)
    1844:	dfc00915 	stw	ra,36(sp)
    1848:	df000815 	stw	fp,32(sp)
    184c:	ddc00715 	stw	r23,28(sp)
    1850:	dd800615 	stw	r22,24(sp)
    1854:	dd400515 	stw	r21,20(sp)
    1858:	dd000415 	stw	r20,16(sp)
    185c:	dc800215 	stw	r18,8(sp)
    1860:	dc400115 	stw	r17,4(sp)
    1864:	dc000015 	stw	r16,0(sp)
    1868:	9cffffc4 	addi	r19,r19,-1
    186c:	00800044 	movi	r2,1
    1870:	14c03f0e 	bge	r2,r19,1970 <sobel_y_with_rgb+0x138>
    1874:	d466cf17 	ldw	r17,-25796(gp)
    1878:	d426d317 	ldw	r16,-25780(gp)
    187c:	d7e6d417 	ldw	ra,-25776(gp)
    1880:	8c5d883a 	add	r14,r17,r17
    1884:	75000084 	addi	r20,r14,2
    1888:	03c00084 	movi	r15,2
    188c:	8521883a 	add	r16,r16,r20
    1890:	fd3f883a 	add	ra,ra,r20
    1894:	782b883a 	mov	r21,r15
    1898:	70ad883a 	add	r22,r14,r2
    189c:	7825883a 	mov	r18,r15
    18a0:	ac402e0e 	bge	r21,r17,195c <sobel_y_with_rgb+0x124>
    18a4:	238d883a 	add	r6,r4,r14
    18a8:	7825883a 	mov	r18,r15
    18ac:	22c00044 	addi	r11,r4,1
    18b0:	22800084 	addi	r10,r4,2
    18b4:	b113883a 	add	r9,r22,r4
    18b8:	a10b883a 	add	r5,r20,r4
    18bc:	899b883a 	add	r13,r17,r6
    18c0:	f819883a 	mov	r12,ra
    18c4:	8011883a 	mov	r8,r16
    18c8:	200f883a 	mov	r7,r4
    18cc:	00000b06 	br	18fc <sobel_y_with_rgb+0xc4>
    18d0:	180692fa 	slli	r3,r3,11
    18d4:	60c0000d 	sth	r3,0(r12)
    18d8:	29400044 	addi	r5,r5,1
    18dc:	39c00044 	addi	r7,r7,1
    18e0:	5ac00044 	addi	r11,r11,1
    18e4:	52800044 	addi	r10,r10,1
    18e8:	31800044 	addi	r6,r6,1
    18ec:	4a400044 	addi	r9,r9,1
    18f0:	42000084 	addi	r8,r8,2
    18f4:	63000084 	addi	r12,r12,2
    18f8:	69401826 	beq	r13,r5,195c <sobel_y_with_rgb+0x124>
    18fc:	50800003 	ldbu	r2,0(r10)
    1900:	3f000003 	ldbu	fp,0(r7)
    1904:	58c00003 	ldbu	r3,0(r11)
    1908:	4dc00003 	ldbu	r23,0(r9)
    190c:	e0b9883a 	add	fp,fp,r2
    1910:	18c7883a 	add	r3,r3,r3
    1914:	30800003 	ldbu	r2,0(r6)
    1918:	e0c7883a 	add	r3,fp,r3
    191c:	1dc7c83a 	sub	r3,r3,r23
    1920:	2f000003 	ldbu	fp,0(r5)
    1924:	1dc7c83a 	sub	r3,r3,r23
    1928:	1885c83a 	sub	r2,r3,r2
    192c:	1705c83a 	sub	r2,r2,fp
    1930:	4080000d 	sth	r2,0(r8)
    1934:	10bfffcc 	andi	r2,r2,65535
    1938:	10a0001c 	xori	r2,r2,32768
    193c:	10a00004 	addi	r2,r2,-32768
    1940:	1007d0fa 	srai	r3,r2,3
    1944:	103fe20e 	bge	r2,zero,18d0 <__alt_data_end+0xff0018d0>
    1948:	0085c83a 	sub	r2,zero,r2
    194c:	1005d0ba 	srai	r2,r2,2
    1950:	1004917a 	slli	r2,r2,5
    1954:	6080000d 	sth	r2,0(r12)
    1958:	003fdf06 	br	18d8 <__alt_data_end+0xff0018d8>
    195c:	7bc00044 	addi	r15,r15,1
    1960:	2449883a 	add	r4,r4,r17
    1964:	83a1883a 	add	r16,r16,r14
    1968:	fbbf883a 	add	ra,ra,r14
    196c:	94ffcb16 	blt	r18,r19,189c <__alt_data_end+0xff00189c>
    1970:	dfc00917 	ldw	ra,36(sp)
    1974:	df000817 	ldw	fp,32(sp)
    1978:	ddc00717 	ldw	r23,28(sp)
    197c:	dd800617 	ldw	r22,24(sp)
    1980:	dd400517 	ldw	r21,20(sp)
    1984:	dd000417 	ldw	r20,16(sp)
    1988:	dcc00317 	ldw	r19,12(sp)
    198c:	dc800217 	ldw	r18,8(sp)
    1990:	dc400117 	ldw	r17,4(sp)
    1994:	dc000017 	ldw	r16,0(sp)
    1998:	dec00a04 	addi	sp,sp,40
    199c:	f800283a 	ret

000019a0 <sobel_threshold>:
    19a0:	d0a6d117 	ldw	r2,-25788(gp)
    19a4:	02400084 	movi	r9,2
    19a8:	4880290e 	bge	r9,r2,1a50 <sobel_threshold+0xb0>
    19ac:	223fffcc 	andi	r8,r4,65535
    19b0:	d0e6cf17 	ldw	r3,-25796(gp)
    19b4:	4220001c 	xori	r8,r8,32768
    19b8:	01c00044 	movi	r7,1
    19bc:	42200004 	addi	r8,r8,-32768
    19c0:	48c0200e 	bge	r9,r3,1a44 <sobel_threshold+0xa4>
    19c4:	01400044 	movi	r5,1
    19c8:	00000c06 	br	19fc <sobel_threshold+0x5c>
    19cc:	2080000f 	ldh	r2,0(r4)
    19d0:	10001916 	blt	r2,zero,1a38 <sobel_threshold+0x98>
    19d4:	3085883a 	add	r2,r6,r2
    19d8:	10bfffcc 	andi	r2,r2,65535
    19dc:	10a0001c 	xori	r2,r2,32768
    19e0:	10a00004 	addi	r2,r2,-32768
    19e4:	4084803a 	cmplt	r2,r8,r2
    19e8:	0085c83a 	sub	r2,zero,r2
    19ec:	18800005 	stb	r2,0(r3)
    19f0:	d0e6cf17 	ldw	r3,-25796(gp)
    19f4:	18bfffc4 	addi	r2,r3,-1
    19f8:	2880110e 	bge	r5,r2,1a40 <sobel_threshold+0xa0>
    19fc:	38c7383a 	mul	r3,r7,r3
    1a00:	d1a6d317 	ldw	r6,-25780(gp)
    1a04:	d126d217 	ldw	r4,-25784(gp)
    1a08:	1947883a 	add	r3,r3,r5
    1a0c:	18c5883a 	add	r2,r3,r3
    1a10:	308d883a 	add	r6,r6,r2
    1a14:	2089883a 	add	r4,r4,r2
    1a18:	3180000f 	ldh	r6,0(r6)
    1a1c:	d0a6d017 	ldw	r2,-25792(gp)
    1a20:	29400044 	addi	r5,r5,1
    1a24:	10c7883a 	add	r3,r2,r3
    1a28:	303fe80e 	bge	r6,zero,19cc <__alt_data_end+0xff0019cc>
    1a2c:	2080000f 	ldh	r2,0(r4)
    1a30:	018dc83a 	sub	r6,zero,r6
    1a34:	103fe70e 	bge	r2,zero,19d4 <__alt_data_end+0xff0019d4>
    1a38:	0085c83a 	sub	r2,zero,r2
    1a3c:	003fe506 	br	19d4 <__alt_data_end+0xff0019d4>
    1a40:	d0a6d117 	ldw	r2,-25788(gp)
    1a44:	39c00044 	addi	r7,r7,1
    1a48:	113fffc4 	addi	r4,r2,-1
    1a4c:	393fdc16 	blt	r7,r4,19c0 <__alt_data_end+0xff0019c0>
    1a50:	f800283a 	ret

00001a54 <sobel>:
    1a54:	d0e6d117 	ldw	r3,-25788(gp)
    1a58:	03000084 	movi	r12,2
    1a5c:	60c0580e 	bge	r12,r3,1bc0 <sobel+0x16c>
    1a60:	2affffcc 	andi	r11,r5,65535
    1a64:	d0a6cf17 	ldw	r2,-25796(gp)
    1a68:	defffc04 	addi	sp,sp,-16
    1a6c:	5ae0001c 	xori	r11,r11,32768
    1a70:	dfc00315 	stw	ra,12(sp)
    1a74:	dc800215 	stw	r18,8(sp)
    1a78:	dc400115 	stw	r17,4(sp)
    1a7c:	dc000015 	stw	r16,0(sp)
    1a80:	02800044 	movi	r10,1
    1a84:	5ae00004 	addi	r11,r11,-32768
    1a88:	6080450e 	bge	r12,r2,1ba0 <sobel+0x14c>
    1a8c:	0011883a 	mov	r8,zero
    1a90:	04000044 	movi	r16,1
    1a94:	00001906 	br	1afc <sobel+0xa8>
    1a98:	91c00003 	ldbu	r7,0(r18)
    1a9c:	f8c00003 	ldbu	r3,0(ra)
    1aa0:	42000044 	addi	r8,r8,1
    1aa4:	01cfc83a 	sub	r7,zero,r7
    1aa8:	39cf883a 	add	r7,r7,r7
    1aac:	394f883a 	add	r7,r7,r5
    1ab0:	18cb883a 	add	r5,r3,r3
    1ab4:	394b883a 	add	r5,r7,r5
    1ab8:	2bc7c83a 	sub	r3,r5,r15
    1abc:	1887c83a 	sub	r3,r3,r2
    1ac0:	18bfffcc 	andi	r2,r3,65535
    1ac4:	10a0001c 	xori	r2,r2,32768
    1ac8:	10a00004 	addi	r2,r2,-32768
    1acc:	10003116 	blt	r2,zero,1b94 <sobel+0x140>
    1ad0:	3085883a 	add	r2,r6,r2
    1ad4:	10bfffcc 	andi	r2,r2,65535
    1ad8:	10a0001c 	xori	r2,r2,32768
    1adc:	10a00004 	addi	r2,r2,-32768
    1ae0:	5884803a 	cmplt	r2,r11,r2
    1ae4:	0085c83a 	sub	r2,zero,r2
    1ae8:	80800005 	stb	r2,0(r16)
    1aec:	d0a6cf17 	ldw	r2,-25796(gp)
    1af0:	4821883a 	mov	r16,r9
    1af4:	10ffffc4 	addi	r3,r2,-1
    1af8:	48c0280e 	bge	r9,r3,1b9c <sobel+0x148>
    1afc:	50a3383a 	mul	r17,r10,r2
    1b00:	82400044 	addi	r9,r16,1
    1b04:	808dc83a 	sub	r6,r16,r2
    1b08:	245d883a 	add	r14,r4,r17
    1b0c:	408bc83a 	sub	r5,r8,r2
    1b10:	4887c83a 	sub	r3,r9,r2
    1b14:	714b883a 	add	r5,r14,r5
    1b18:	70c7883a 	add	r3,r14,r3
    1b1c:	718d883a 	add	r6,r14,r6
    1b20:	708f883a 	add	r7,r14,r2
    1b24:	2bc00003 	ldbu	r15,0(r5)
    1b28:	33400003 	ldbu	r13,0(r6)
    1b2c:	19400003 	ldbu	r5,0(r3)
    1b30:	3c05883a 	add	r2,r7,r16
    1b34:	11800003 	ldbu	r6,0(r2)
    1b38:	7225883a 	add	r18,r14,r8
    1b3c:	3a05883a 	add	r2,r7,r8
    1b40:	727f883a 	add	ra,r14,r9
    1b44:	6b5b883a 	add	r13,r13,r13
    1b48:	795d883a 	add	r14,r15,r5
    1b4c:	3a4f883a 	add	r7,r7,r9
    1b50:	6b9b883a 	add	r13,r13,r14
    1b54:	10800003 	ldbu	r2,0(r2)
    1b58:	3b800003 	ldbu	r14,0(r7)
    1b5c:	698fc83a 	sub	r7,r13,r6
    1b60:	398dc83a 	sub	r6,r7,r6
    1b64:	308dc83a 	sub	r6,r6,r2
    1b68:	338dc83a 	sub	r6,r6,r14
    1b6c:	d0e6d017 	ldw	r3,-25792(gp)
    1b70:	31bfffcc 	andi	r6,r6,65535
    1b74:	31a0001c 	xori	r6,r6,32768
    1b78:	1c63883a 	add	r17,r3,r17
    1b7c:	31a00004 	addi	r6,r6,-32768
    1b80:	2b8b883a 	add	r5,r5,r14
    1b84:	8c21883a 	add	r16,r17,r16
    1b88:	303fc30e 	bge	r6,zero,1a98 <__alt_data_end+0xff001a98>
    1b8c:	018dc83a 	sub	r6,zero,r6
    1b90:	003fc106 	br	1a98 <__alt_data_end+0xff001a98>
    1b94:	0085c83a 	sub	r2,zero,r2
    1b98:	003fcd06 	br	1ad0 <__alt_data_end+0xff001ad0>
    1b9c:	d0e6d117 	ldw	r3,-25788(gp)
    1ba0:	52800044 	addi	r10,r10,1
    1ba4:	197fffc4 	addi	r5,r3,-1
    1ba8:	517fb716 	blt	r10,r5,1a88 <__alt_data_end+0xff001a88>
    1bac:	dfc00317 	ldw	ra,12(sp)
    1bb0:	dc800217 	ldw	r18,8(sp)
    1bb4:	dc400117 	ldw	r17,4(sp)
    1bb8:	dc000017 	ldw	r16,0(sp)
    1bbc:	dec00404 	addi	sp,sp,16
    1bc0:	f800283a 	ret

00001bc4 <GetSobel_rgb>:
    1bc4:	d0a6d417 	ldw	r2,-25776(gp)
    1bc8:	f800283a 	ret

00001bcc <GetSobelResult>:
    1bcc:	d0a6d017 	ldw	r2,-25792(gp)
    1bd0:	f800283a 	ret

00001bd4 <vga_set_pointer>:
    1bd4:	00804034 	movhi	r2,256
    1bd8:	10843404 	addi	r2,r2,4304
    1bdc:	11000035 	stwio	r4,0(r2)
    1be0:	f800283a 	ret

00001be4 <vga_set_swap>:
    1be4:	00804034 	movhi	r2,256
    1be8:	10843504 	addi	r2,r2,4308
    1bec:	11000025 	stbio	r4,0(r2)
    1bf0:	f800283a 	ret

00001bf4 <__divsi3>:
    1bf4:	20001b16 	blt	r4,zero,1c64 <__divsi3+0x70>
    1bf8:	000f883a 	mov	r7,zero
    1bfc:	28001616 	blt	r5,zero,1c58 <__divsi3+0x64>
    1c00:	200d883a 	mov	r6,r4
    1c04:	29001a2e 	bgeu	r5,r4,1c70 <__divsi3+0x7c>
    1c08:	00800804 	movi	r2,32
    1c0c:	00c00044 	movi	r3,1
    1c10:	00000106 	br	1c18 <__divsi3+0x24>
    1c14:	10000d26 	beq	r2,zero,1c4c <__divsi3+0x58>
    1c18:	294b883a 	add	r5,r5,r5
    1c1c:	10bfffc4 	addi	r2,r2,-1
    1c20:	18c7883a 	add	r3,r3,r3
    1c24:	293ffb36 	bltu	r5,r4,1c14 <__alt_data_end+0xff001c14>
    1c28:	0005883a 	mov	r2,zero
    1c2c:	18000726 	beq	r3,zero,1c4c <__divsi3+0x58>
    1c30:	0005883a 	mov	r2,zero
    1c34:	31400236 	bltu	r6,r5,1c40 <__divsi3+0x4c>
    1c38:	314dc83a 	sub	r6,r6,r5
    1c3c:	10c4b03a 	or	r2,r2,r3
    1c40:	1806d07a 	srli	r3,r3,1
    1c44:	280ad07a 	srli	r5,r5,1
    1c48:	183ffa1e 	bne	r3,zero,1c34 <__alt_data_end+0xff001c34>
    1c4c:	38000126 	beq	r7,zero,1c54 <__divsi3+0x60>
    1c50:	0085c83a 	sub	r2,zero,r2
    1c54:	f800283a 	ret
    1c58:	014bc83a 	sub	r5,zero,r5
    1c5c:	39c0005c 	xori	r7,r7,1
    1c60:	003fe706 	br	1c00 <__alt_data_end+0xff001c00>
    1c64:	0109c83a 	sub	r4,zero,r4
    1c68:	01c00044 	movi	r7,1
    1c6c:	003fe306 	br	1bfc <__alt_data_end+0xff001bfc>
    1c70:	00c00044 	movi	r3,1
    1c74:	003fee06 	br	1c30 <__alt_data_end+0xff001c30>

00001c78 <__modsi3>:
    1c78:	20001716 	blt	r4,zero,1cd8 <__modsi3+0x60>
    1c7c:	000f883a 	mov	r7,zero
    1c80:	2005883a 	mov	r2,r4
    1c84:	28001216 	blt	r5,zero,1cd0 <__modsi3+0x58>
    1c88:	2900162e 	bgeu	r5,r4,1ce4 <__modsi3+0x6c>
    1c8c:	01800804 	movi	r6,32
    1c90:	00c00044 	movi	r3,1
    1c94:	00000106 	br	1c9c <__modsi3+0x24>
    1c98:	30000a26 	beq	r6,zero,1cc4 <__modsi3+0x4c>
    1c9c:	294b883a 	add	r5,r5,r5
    1ca0:	31bfffc4 	addi	r6,r6,-1
    1ca4:	18c7883a 	add	r3,r3,r3
    1ca8:	293ffb36 	bltu	r5,r4,1c98 <__alt_data_end+0xff001c98>
    1cac:	18000526 	beq	r3,zero,1cc4 <__modsi3+0x4c>
    1cb0:	1806d07a 	srli	r3,r3,1
    1cb4:	11400136 	bltu	r2,r5,1cbc <__modsi3+0x44>
    1cb8:	1145c83a 	sub	r2,r2,r5
    1cbc:	280ad07a 	srli	r5,r5,1
    1cc0:	183ffb1e 	bne	r3,zero,1cb0 <__alt_data_end+0xff001cb0>
    1cc4:	38000126 	beq	r7,zero,1ccc <__modsi3+0x54>
    1cc8:	0085c83a 	sub	r2,zero,r2
    1ccc:	f800283a 	ret
    1cd0:	014bc83a 	sub	r5,zero,r5
    1cd4:	003fec06 	br	1c88 <__alt_data_end+0xff001c88>
    1cd8:	0109c83a 	sub	r4,zero,r4
    1cdc:	01c00044 	movi	r7,1
    1ce0:	003fe706 	br	1c80 <__alt_data_end+0xff001c80>
    1ce4:	00c00044 	movi	r3,1
    1ce8:	003ff106 	br	1cb0 <__alt_data_end+0xff001cb0>

00001cec <__udivsi3>:
    1cec:	200d883a 	mov	r6,r4
    1cf0:	2900152e 	bgeu	r5,r4,1d48 <__udivsi3+0x5c>
    1cf4:	28001416 	blt	r5,zero,1d48 <__udivsi3+0x5c>
    1cf8:	00800804 	movi	r2,32
    1cfc:	00c00044 	movi	r3,1
    1d00:	00000206 	br	1d0c <__udivsi3+0x20>
    1d04:	10000e26 	beq	r2,zero,1d40 <__udivsi3+0x54>
    1d08:	28000516 	blt	r5,zero,1d20 <__udivsi3+0x34>
    1d0c:	294b883a 	add	r5,r5,r5
    1d10:	10bfffc4 	addi	r2,r2,-1
    1d14:	18c7883a 	add	r3,r3,r3
    1d18:	293ffa36 	bltu	r5,r4,1d04 <__alt_data_end+0xff001d04>
    1d1c:	18000826 	beq	r3,zero,1d40 <__udivsi3+0x54>
    1d20:	0005883a 	mov	r2,zero
    1d24:	31400236 	bltu	r6,r5,1d30 <__udivsi3+0x44>
    1d28:	314dc83a 	sub	r6,r6,r5
    1d2c:	10c4b03a 	or	r2,r2,r3
    1d30:	1806d07a 	srli	r3,r3,1
    1d34:	280ad07a 	srli	r5,r5,1
    1d38:	183ffa1e 	bne	r3,zero,1d24 <__alt_data_end+0xff001d24>
    1d3c:	f800283a 	ret
    1d40:	0005883a 	mov	r2,zero
    1d44:	f800283a 	ret
    1d48:	00c00044 	movi	r3,1
    1d4c:	003ff406 	br	1d20 <__alt_data_end+0xff001d20>

00001d50 <__umodsi3>:
    1d50:	2005883a 	mov	r2,r4
    1d54:	2900122e 	bgeu	r5,r4,1da0 <__umodsi3+0x50>
    1d58:	28001116 	blt	r5,zero,1da0 <__umodsi3+0x50>
    1d5c:	01800804 	movi	r6,32
    1d60:	00c00044 	movi	r3,1
    1d64:	00000206 	br	1d70 <__umodsi3+0x20>
    1d68:	30000c26 	beq	r6,zero,1d9c <__umodsi3+0x4c>
    1d6c:	28000516 	blt	r5,zero,1d84 <__umodsi3+0x34>
    1d70:	294b883a 	add	r5,r5,r5
    1d74:	31bfffc4 	addi	r6,r6,-1
    1d78:	18c7883a 	add	r3,r3,r3
    1d7c:	293ffa36 	bltu	r5,r4,1d68 <__alt_data_end+0xff001d68>
    1d80:	18000626 	beq	r3,zero,1d9c <__umodsi3+0x4c>
    1d84:	1806d07a 	srli	r3,r3,1
    1d88:	11400136 	bltu	r2,r5,1d90 <__umodsi3+0x40>
    1d8c:	1145c83a 	sub	r2,r2,r5
    1d90:	280ad07a 	srli	r5,r5,1
    1d94:	183ffb1e 	bne	r3,zero,1d84 <__alt_data_end+0xff001d84>
    1d98:	f800283a 	ret
    1d9c:	f800283a 	ret
    1da0:	00c00044 	movi	r3,1
    1da4:	003ff706 	br	1d84 <__alt_data_end+0xff001d84>

00001da8 <malloc>:
    1da8:	00800074 	movhi	r2,1
    1dac:	108c7504 	addi	r2,r2,12756
    1db0:	200b883a 	mov	r5,r4
    1db4:	11000017 	ldw	r4,0(r2)
    1db8:	0001dd01 	jmpi	1dd0 <_malloc_r>

00001dbc <free>:
    1dbc:	00800074 	movhi	r2,1
    1dc0:	108c7504 	addi	r2,r2,12756
    1dc4:	200b883a 	mov	r5,r4
    1dc8:	11000017 	ldw	r4,0(r2)
    1dcc:	0006c201 	jmpi	6c20 <_free_r>

00001dd0 <_malloc_r>:
    1dd0:	defff504 	addi	sp,sp,-44
    1dd4:	dc800315 	stw	r18,12(sp)
    1dd8:	dfc00a15 	stw	ra,40(sp)
    1ddc:	df000915 	stw	fp,36(sp)
    1de0:	ddc00815 	stw	r23,32(sp)
    1de4:	dd800715 	stw	r22,28(sp)
    1de8:	dd400615 	stw	r21,24(sp)
    1dec:	dd000515 	stw	r20,20(sp)
    1df0:	dcc00415 	stw	r19,16(sp)
    1df4:	dc400215 	stw	r17,8(sp)
    1df8:	dc000115 	stw	r16,4(sp)
    1dfc:	288002c4 	addi	r2,r5,11
    1e00:	00c00584 	movi	r3,22
    1e04:	2025883a 	mov	r18,r4
    1e08:	18807f2e 	bgeu	r3,r2,2008 <_malloc_r+0x238>
    1e0c:	047ffe04 	movi	r17,-8
    1e10:	1462703a 	and	r17,r2,r17
    1e14:	8800a316 	blt	r17,zero,20a4 <_malloc_r+0x2d4>
    1e18:	8940a236 	bltu	r17,r5,20a4 <_malloc_r+0x2d4>
    1e1c:	000eab80 	call	eab8 <__malloc_lock>
    1e20:	00807dc4 	movi	r2,503
    1e24:	1441e92e 	bgeu	r2,r17,25cc <_malloc_r+0x7fc>
    1e28:	8804d27a 	srli	r2,r17,9
    1e2c:	1000a126 	beq	r2,zero,20b4 <_malloc_r+0x2e4>
    1e30:	00c00104 	movi	r3,4
    1e34:	18811e36 	bltu	r3,r2,22b0 <_malloc_r+0x4e0>
    1e38:	8804d1ba 	srli	r2,r17,6
    1e3c:	12000e44 	addi	r8,r2,57
    1e40:	11c00e04 	addi	r7,r2,56
    1e44:	4209883a 	add	r4,r8,r8
    1e48:	04c00074 	movhi	r19,1
    1e4c:	2109883a 	add	r4,r4,r4
    1e50:	9cc5c704 	addi	r19,r19,5916
    1e54:	2109883a 	add	r4,r4,r4
    1e58:	9909883a 	add	r4,r19,r4
    1e5c:	24000117 	ldw	r16,4(r4)
    1e60:	213ffe04 	addi	r4,r4,-8
    1e64:	24009726 	beq	r4,r16,20c4 <_malloc_r+0x2f4>
    1e68:	80800117 	ldw	r2,4(r16)
    1e6c:	01bfff04 	movi	r6,-4
    1e70:	014003c4 	movi	r5,15
    1e74:	1184703a 	and	r2,r2,r6
    1e78:	1447c83a 	sub	r3,r2,r17
    1e7c:	28c00716 	blt	r5,r3,1e9c <_malloc_r+0xcc>
    1e80:	1800920e 	bge	r3,zero,20cc <_malloc_r+0x2fc>
    1e84:	84000317 	ldw	r16,12(r16)
    1e88:	24008e26 	beq	r4,r16,20c4 <_malloc_r+0x2f4>
    1e8c:	80800117 	ldw	r2,4(r16)
    1e90:	1184703a 	and	r2,r2,r6
    1e94:	1447c83a 	sub	r3,r2,r17
    1e98:	28fff90e 	bge	r5,r3,1e80 <__alt_data_end+0xff001e80>
    1e9c:	3809883a 	mov	r4,r7
    1ea0:	01800074 	movhi	r6,1
    1ea4:	9c000417 	ldw	r16,16(r19)
    1ea8:	3185c704 	addi	r6,r6,5916
    1eac:	32000204 	addi	r8,r6,8
    1eb0:	82013426 	beq	r16,r8,2384 <_malloc_r+0x5b4>
    1eb4:	80c00117 	ldw	r3,4(r16)
    1eb8:	00bfff04 	movi	r2,-4
    1ebc:	188e703a 	and	r7,r3,r2
    1ec0:	3c45c83a 	sub	r2,r7,r17
    1ec4:	00c003c4 	movi	r3,15
    1ec8:	18811f16 	blt	r3,r2,2348 <_malloc_r+0x578>
    1ecc:	32000515 	stw	r8,20(r6)
    1ed0:	32000415 	stw	r8,16(r6)
    1ed4:	10007f0e 	bge	r2,zero,20d4 <_malloc_r+0x304>
    1ed8:	00807fc4 	movi	r2,511
    1edc:	11c0fd36 	bltu	r2,r7,22d4 <_malloc_r+0x504>
    1ee0:	3806d0fa 	srli	r3,r7,3
    1ee4:	01c00044 	movi	r7,1
    1ee8:	30800117 	ldw	r2,4(r6)
    1eec:	19400044 	addi	r5,r3,1
    1ef0:	294b883a 	add	r5,r5,r5
    1ef4:	1807d0ba 	srai	r3,r3,2
    1ef8:	294b883a 	add	r5,r5,r5
    1efc:	294b883a 	add	r5,r5,r5
    1f00:	298b883a 	add	r5,r5,r6
    1f04:	38c6983a 	sll	r3,r7,r3
    1f08:	29c00017 	ldw	r7,0(r5)
    1f0c:	2a7ffe04 	addi	r9,r5,-8
    1f10:	1886b03a 	or	r3,r3,r2
    1f14:	82400315 	stw	r9,12(r16)
    1f18:	81c00215 	stw	r7,8(r16)
    1f1c:	30c00115 	stw	r3,4(r6)
    1f20:	2c000015 	stw	r16,0(r5)
    1f24:	3c000315 	stw	r16,12(r7)
    1f28:	2005d0ba 	srai	r2,r4,2
    1f2c:	01400044 	movi	r5,1
    1f30:	288a983a 	sll	r5,r5,r2
    1f34:	19406f36 	bltu	r3,r5,20f4 <_malloc_r+0x324>
    1f38:	28c4703a 	and	r2,r5,r3
    1f3c:	10000a1e 	bne	r2,zero,1f68 <_malloc_r+0x198>
    1f40:	00bfff04 	movi	r2,-4
    1f44:	294b883a 	add	r5,r5,r5
    1f48:	2088703a 	and	r4,r4,r2
    1f4c:	28c4703a 	and	r2,r5,r3
    1f50:	21000104 	addi	r4,r4,4
    1f54:	1000041e 	bne	r2,zero,1f68 <_malloc_r+0x198>
    1f58:	294b883a 	add	r5,r5,r5
    1f5c:	28c4703a 	and	r2,r5,r3
    1f60:	21000104 	addi	r4,r4,4
    1f64:	103ffc26 	beq	r2,zero,1f58 <__alt_data_end+0xff001f58>
    1f68:	02bfff04 	movi	r10,-4
    1f6c:	024003c4 	movi	r9,15
    1f70:	21800044 	addi	r6,r4,1
    1f74:	318d883a 	add	r6,r6,r6
    1f78:	318d883a 	add	r6,r6,r6
    1f7c:	318d883a 	add	r6,r6,r6
    1f80:	998d883a 	add	r6,r19,r6
    1f84:	333ffe04 	addi	r12,r6,-8
    1f88:	2017883a 	mov	r11,r4
    1f8c:	31800104 	addi	r6,r6,4
    1f90:	34000017 	ldw	r16,0(r6)
    1f94:	31fffd04 	addi	r7,r6,-12
    1f98:	81c0041e 	bne	r16,r7,1fac <_malloc_r+0x1dc>
    1f9c:	0000fb06 	br	238c <_malloc_r+0x5bc>
    1fa0:	1801030e 	bge	r3,zero,23b0 <_malloc_r+0x5e0>
    1fa4:	84000317 	ldw	r16,12(r16)
    1fa8:	81c0f826 	beq	r16,r7,238c <_malloc_r+0x5bc>
    1fac:	80800117 	ldw	r2,4(r16)
    1fb0:	1284703a 	and	r2,r2,r10
    1fb4:	1447c83a 	sub	r3,r2,r17
    1fb8:	48fff90e 	bge	r9,r3,1fa0 <__alt_data_end+0xff001fa0>
    1fbc:	80800317 	ldw	r2,12(r16)
    1fc0:	81000217 	ldw	r4,8(r16)
    1fc4:	89400054 	ori	r5,r17,1
    1fc8:	81400115 	stw	r5,4(r16)
    1fcc:	20800315 	stw	r2,12(r4)
    1fd0:	11000215 	stw	r4,8(r2)
    1fd4:	8463883a 	add	r17,r16,r17
    1fd8:	9c400515 	stw	r17,20(r19)
    1fdc:	9c400415 	stw	r17,16(r19)
    1fe0:	18800054 	ori	r2,r3,1
    1fe4:	88800115 	stw	r2,4(r17)
    1fe8:	8a000315 	stw	r8,12(r17)
    1fec:	8a000215 	stw	r8,8(r17)
    1ff0:	88e3883a 	add	r17,r17,r3
    1ff4:	88c00015 	stw	r3,0(r17)
    1ff8:	9009883a 	mov	r4,r18
    1ffc:	000eadc0 	call	eadc <__malloc_unlock>
    2000:	80800204 	addi	r2,r16,8
    2004:	00001b06 	br	2074 <_malloc_r+0x2a4>
    2008:	04400404 	movi	r17,16
    200c:	89402536 	bltu	r17,r5,20a4 <_malloc_r+0x2d4>
    2010:	000eab80 	call	eab8 <__malloc_lock>
    2014:	00800184 	movi	r2,6
    2018:	01000084 	movi	r4,2
    201c:	04c00074 	movhi	r19,1
    2020:	1085883a 	add	r2,r2,r2
    2024:	9cc5c704 	addi	r19,r19,5916
    2028:	1085883a 	add	r2,r2,r2
    202c:	9885883a 	add	r2,r19,r2
    2030:	14000117 	ldw	r16,4(r2)
    2034:	10fffe04 	addi	r3,r2,-8
    2038:	80c0d926 	beq	r16,r3,23a0 <_malloc_r+0x5d0>
    203c:	80c00117 	ldw	r3,4(r16)
    2040:	81000317 	ldw	r4,12(r16)
    2044:	00bfff04 	movi	r2,-4
    2048:	1884703a 	and	r2,r3,r2
    204c:	81400217 	ldw	r5,8(r16)
    2050:	8085883a 	add	r2,r16,r2
    2054:	10c00117 	ldw	r3,4(r2)
    2058:	29000315 	stw	r4,12(r5)
    205c:	21400215 	stw	r5,8(r4)
    2060:	18c00054 	ori	r3,r3,1
    2064:	10c00115 	stw	r3,4(r2)
    2068:	9009883a 	mov	r4,r18
    206c:	000eadc0 	call	eadc <__malloc_unlock>
    2070:	80800204 	addi	r2,r16,8
    2074:	dfc00a17 	ldw	ra,40(sp)
    2078:	df000917 	ldw	fp,36(sp)
    207c:	ddc00817 	ldw	r23,32(sp)
    2080:	dd800717 	ldw	r22,28(sp)
    2084:	dd400617 	ldw	r21,24(sp)
    2088:	dd000517 	ldw	r20,20(sp)
    208c:	dcc00417 	ldw	r19,16(sp)
    2090:	dc800317 	ldw	r18,12(sp)
    2094:	dc400217 	ldw	r17,8(sp)
    2098:	dc000117 	ldw	r16,4(sp)
    209c:	dec00b04 	addi	sp,sp,44
    20a0:	f800283a 	ret
    20a4:	00800304 	movi	r2,12
    20a8:	90800015 	stw	r2,0(r18)
    20ac:	0005883a 	mov	r2,zero
    20b0:	003ff006 	br	2074 <__alt_data_end+0xff002074>
    20b4:	01002004 	movi	r4,128
    20b8:	02001004 	movi	r8,64
    20bc:	01c00fc4 	movi	r7,63
    20c0:	003f6106 	br	1e48 <__alt_data_end+0xff001e48>
    20c4:	4009883a 	mov	r4,r8
    20c8:	003f7506 	br	1ea0 <__alt_data_end+0xff001ea0>
    20cc:	81000317 	ldw	r4,12(r16)
    20d0:	003fde06 	br	204c <__alt_data_end+0xff00204c>
    20d4:	81c5883a 	add	r2,r16,r7
    20d8:	11400117 	ldw	r5,4(r2)
    20dc:	9009883a 	mov	r4,r18
    20e0:	29400054 	ori	r5,r5,1
    20e4:	11400115 	stw	r5,4(r2)
    20e8:	000eadc0 	call	eadc <__malloc_unlock>
    20ec:	80800204 	addi	r2,r16,8
    20f0:	003fe006 	br	2074 <__alt_data_end+0xff002074>
    20f4:	9c000217 	ldw	r16,8(r19)
    20f8:	00bfff04 	movi	r2,-4
    20fc:	85800117 	ldw	r22,4(r16)
    2100:	b0ac703a 	and	r22,r22,r2
    2104:	b4400336 	bltu	r22,r17,2114 <_malloc_r+0x344>
    2108:	b445c83a 	sub	r2,r22,r17
    210c:	00c003c4 	movi	r3,15
    2110:	18805d16 	blt	r3,r2,2288 <_malloc_r+0x4b8>
    2114:	05c00074 	movhi	r23,1
    2118:	00800074 	movhi	r2,1
    211c:	10934904 	addi	r2,r2,19748
    2120:	bdcc7204 	addi	r23,r23,12744
    2124:	15400017 	ldw	r21,0(r2)
    2128:	b8c00017 	ldw	r3,0(r23)
    212c:	00bfffc4 	movi	r2,-1
    2130:	858d883a 	add	r6,r16,r22
    2134:	8d6b883a 	add	r21,r17,r21
    2138:	1880ea26 	beq	r3,r2,24e4 <_malloc_r+0x714>
    213c:	ad4403c4 	addi	r21,r21,4111
    2140:	00bc0004 	movi	r2,-4096
    2144:	a8aa703a 	and	r21,r21,r2
    2148:	a80b883a 	mov	r5,r21
    214c:	9009883a 	mov	r4,r18
    2150:	d9800015 	stw	r6,0(sp)
    2154:	000271c0 	call	271c <_sbrk_r>
    2158:	1029883a 	mov	r20,r2
    215c:	00bfffc4 	movi	r2,-1
    2160:	d9800017 	ldw	r6,0(sp)
    2164:	a080e826 	beq	r20,r2,2508 <_malloc_r+0x738>
    2168:	a180a636 	bltu	r20,r6,2404 <_malloc_r+0x634>
    216c:	07000074 	movhi	fp,1
    2170:	e7135704 	addi	fp,fp,19804
    2174:	e0800017 	ldw	r2,0(fp)
    2178:	a887883a 	add	r3,r21,r2
    217c:	e0c00015 	stw	r3,0(fp)
    2180:	3500e626 	beq	r6,r20,251c <_malloc_r+0x74c>
    2184:	b9000017 	ldw	r4,0(r23)
    2188:	00bfffc4 	movi	r2,-1
    218c:	2080ee26 	beq	r4,r2,2548 <_malloc_r+0x778>
    2190:	a185c83a 	sub	r2,r20,r6
    2194:	10c5883a 	add	r2,r2,r3
    2198:	e0800015 	stw	r2,0(fp)
    219c:	a0c001cc 	andi	r3,r20,7
    21a0:	1800bc26 	beq	r3,zero,2494 <_malloc_r+0x6c4>
    21a4:	a0e9c83a 	sub	r20,r20,r3
    21a8:	00840204 	movi	r2,4104
    21ac:	a5000204 	addi	r20,r20,8
    21b0:	10c7c83a 	sub	r3,r2,r3
    21b4:	a545883a 	add	r2,r20,r21
    21b8:	1083ffcc 	andi	r2,r2,4095
    21bc:	18abc83a 	sub	r21,r3,r2
    21c0:	a80b883a 	mov	r5,r21
    21c4:	9009883a 	mov	r4,r18
    21c8:	000271c0 	call	271c <_sbrk_r>
    21cc:	00ffffc4 	movi	r3,-1
    21d0:	10c0e126 	beq	r2,r3,2558 <_malloc_r+0x788>
    21d4:	1505c83a 	sub	r2,r2,r20
    21d8:	1545883a 	add	r2,r2,r21
    21dc:	10800054 	ori	r2,r2,1
    21e0:	e0c00017 	ldw	r3,0(fp)
    21e4:	9d000215 	stw	r20,8(r19)
    21e8:	a0800115 	stw	r2,4(r20)
    21ec:	a8c7883a 	add	r3,r21,r3
    21f0:	e0c00015 	stw	r3,0(fp)
    21f4:	84c00e26 	beq	r16,r19,2230 <_malloc_r+0x460>
    21f8:	018003c4 	movi	r6,15
    21fc:	3580a72e 	bgeu	r6,r22,249c <_malloc_r+0x6cc>
    2200:	81400117 	ldw	r5,4(r16)
    2204:	013ffe04 	movi	r4,-8
    2208:	b0bffd04 	addi	r2,r22,-12
    220c:	1104703a 	and	r2,r2,r4
    2210:	2900004c 	andi	r4,r5,1
    2214:	2088b03a 	or	r4,r4,r2
    2218:	81000115 	stw	r4,4(r16)
    221c:	01400144 	movi	r5,5
    2220:	8089883a 	add	r4,r16,r2
    2224:	21400115 	stw	r5,4(r4)
    2228:	21400215 	stw	r5,8(r4)
    222c:	3080cd36 	bltu	r6,r2,2564 <_malloc_r+0x794>
    2230:	00800074 	movhi	r2,1
    2234:	10934804 	addi	r2,r2,19744
    2238:	11000017 	ldw	r4,0(r2)
    223c:	20c0012e 	bgeu	r4,r3,2244 <_malloc_r+0x474>
    2240:	10c00015 	stw	r3,0(r2)
    2244:	00800074 	movhi	r2,1
    2248:	10934704 	addi	r2,r2,19740
    224c:	11000017 	ldw	r4,0(r2)
    2250:	9c000217 	ldw	r16,8(r19)
    2254:	20c0012e 	bgeu	r4,r3,225c <_malloc_r+0x48c>
    2258:	10c00015 	stw	r3,0(r2)
    225c:	80c00117 	ldw	r3,4(r16)
    2260:	00bfff04 	movi	r2,-4
    2264:	1886703a 	and	r3,r3,r2
    2268:	1c45c83a 	sub	r2,r3,r17
    226c:	1c400236 	bltu	r3,r17,2278 <_malloc_r+0x4a8>
    2270:	00c003c4 	movi	r3,15
    2274:	18800416 	blt	r3,r2,2288 <_malloc_r+0x4b8>
    2278:	9009883a 	mov	r4,r18
    227c:	000eadc0 	call	eadc <__malloc_unlock>
    2280:	0005883a 	mov	r2,zero
    2284:	003f7b06 	br	2074 <__alt_data_end+0xff002074>
    2288:	88c00054 	ori	r3,r17,1
    228c:	80c00115 	stw	r3,4(r16)
    2290:	8463883a 	add	r17,r16,r17
    2294:	10800054 	ori	r2,r2,1
    2298:	9c400215 	stw	r17,8(r19)
    229c:	88800115 	stw	r2,4(r17)
    22a0:	9009883a 	mov	r4,r18
    22a4:	000eadc0 	call	eadc <__malloc_unlock>
    22a8:	80800204 	addi	r2,r16,8
    22ac:	003f7106 	br	2074 <__alt_data_end+0xff002074>
    22b0:	00c00504 	movi	r3,20
    22b4:	18804a2e 	bgeu	r3,r2,23e0 <_malloc_r+0x610>
    22b8:	00c01504 	movi	r3,84
    22bc:	18806e36 	bltu	r3,r2,2478 <_malloc_r+0x6a8>
    22c0:	8804d33a 	srli	r2,r17,12
    22c4:	12001bc4 	addi	r8,r2,111
    22c8:	11c01b84 	addi	r7,r2,110
    22cc:	4209883a 	add	r4,r8,r8
    22d0:	003edd06 	br	1e48 <__alt_data_end+0xff001e48>
    22d4:	3804d27a 	srli	r2,r7,9
    22d8:	00c00104 	movi	r3,4
    22dc:	1880442e 	bgeu	r3,r2,23f0 <_malloc_r+0x620>
    22e0:	00c00504 	movi	r3,20
    22e4:	18808136 	bltu	r3,r2,24ec <_malloc_r+0x71c>
    22e8:	11401704 	addi	r5,r2,92
    22ec:	10c016c4 	addi	r3,r2,91
    22f0:	294b883a 	add	r5,r5,r5
    22f4:	294b883a 	add	r5,r5,r5
    22f8:	294b883a 	add	r5,r5,r5
    22fc:	994b883a 	add	r5,r19,r5
    2300:	28800017 	ldw	r2,0(r5)
    2304:	01800074 	movhi	r6,1
    2308:	297ffe04 	addi	r5,r5,-8
    230c:	3185c704 	addi	r6,r6,5916
    2310:	28806526 	beq	r5,r2,24a8 <_malloc_r+0x6d8>
    2314:	01bfff04 	movi	r6,-4
    2318:	10c00117 	ldw	r3,4(r2)
    231c:	1986703a 	and	r3,r3,r6
    2320:	38c0022e 	bgeu	r7,r3,232c <_malloc_r+0x55c>
    2324:	10800217 	ldw	r2,8(r2)
    2328:	28bffb1e 	bne	r5,r2,2318 <__alt_data_end+0xff002318>
    232c:	11400317 	ldw	r5,12(r2)
    2330:	98c00117 	ldw	r3,4(r19)
    2334:	81400315 	stw	r5,12(r16)
    2338:	80800215 	stw	r2,8(r16)
    233c:	2c000215 	stw	r16,8(r5)
    2340:	14000315 	stw	r16,12(r2)
    2344:	003ef806 	br	1f28 <__alt_data_end+0xff001f28>
    2348:	88c00054 	ori	r3,r17,1
    234c:	80c00115 	stw	r3,4(r16)
    2350:	8463883a 	add	r17,r16,r17
    2354:	34400515 	stw	r17,20(r6)
    2358:	34400415 	stw	r17,16(r6)
    235c:	10c00054 	ori	r3,r2,1
    2360:	8a000315 	stw	r8,12(r17)
    2364:	8a000215 	stw	r8,8(r17)
    2368:	88c00115 	stw	r3,4(r17)
    236c:	88a3883a 	add	r17,r17,r2
    2370:	88800015 	stw	r2,0(r17)
    2374:	9009883a 	mov	r4,r18
    2378:	000eadc0 	call	eadc <__malloc_unlock>
    237c:	80800204 	addi	r2,r16,8
    2380:	003f3c06 	br	2074 <__alt_data_end+0xff002074>
    2384:	30c00117 	ldw	r3,4(r6)
    2388:	003ee706 	br	1f28 <__alt_data_end+0xff001f28>
    238c:	5ac00044 	addi	r11,r11,1
    2390:	588000cc 	andi	r2,r11,3
    2394:	31800204 	addi	r6,r6,8
    2398:	103efd1e 	bne	r2,zero,1f90 <__alt_data_end+0xff001f90>
    239c:	00002406 	br	2430 <_malloc_r+0x660>
    23a0:	14000317 	ldw	r16,12(r2)
    23a4:	143f251e 	bne	r2,r16,203c <__alt_data_end+0xff00203c>
    23a8:	21000084 	addi	r4,r4,2
    23ac:	003ebc06 	br	1ea0 <__alt_data_end+0xff001ea0>
    23b0:	8085883a 	add	r2,r16,r2
    23b4:	10c00117 	ldw	r3,4(r2)
    23b8:	81000317 	ldw	r4,12(r16)
    23bc:	81400217 	ldw	r5,8(r16)
    23c0:	18c00054 	ori	r3,r3,1
    23c4:	10c00115 	stw	r3,4(r2)
    23c8:	29000315 	stw	r4,12(r5)
    23cc:	21400215 	stw	r5,8(r4)
    23d0:	9009883a 	mov	r4,r18
    23d4:	000eadc0 	call	eadc <__malloc_unlock>
    23d8:	80800204 	addi	r2,r16,8
    23dc:	003f2506 	br	2074 <__alt_data_end+0xff002074>
    23e0:	12001704 	addi	r8,r2,92
    23e4:	11c016c4 	addi	r7,r2,91
    23e8:	4209883a 	add	r4,r8,r8
    23ec:	003e9606 	br	1e48 <__alt_data_end+0xff001e48>
    23f0:	3804d1ba 	srli	r2,r7,6
    23f4:	11400e44 	addi	r5,r2,57
    23f8:	10c00e04 	addi	r3,r2,56
    23fc:	294b883a 	add	r5,r5,r5
    2400:	003fbc06 	br	22f4 <__alt_data_end+0xff0022f4>
    2404:	84ff5926 	beq	r16,r19,216c <__alt_data_end+0xff00216c>
    2408:	00800074 	movhi	r2,1
    240c:	1085c704 	addi	r2,r2,5916
    2410:	14000217 	ldw	r16,8(r2)
    2414:	00bfff04 	movi	r2,-4
    2418:	80c00117 	ldw	r3,4(r16)
    241c:	1886703a 	and	r3,r3,r2
    2420:	003f9106 	br	2268 <__alt_data_end+0xff002268>
    2424:	60800217 	ldw	r2,8(r12)
    2428:	213fffc4 	addi	r4,r4,-1
    242c:	1300651e 	bne	r2,r12,25c4 <_malloc_r+0x7f4>
    2430:	208000cc 	andi	r2,r4,3
    2434:	633ffe04 	addi	r12,r12,-8
    2438:	103ffa1e 	bne	r2,zero,2424 <__alt_data_end+0xff002424>
    243c:	98800117 	ldw	r2,4(r19)
    2440:	0146303a 	nor	r3,zero,r5
    2444:	1884703a 	and	r2,r3,r2
    2448:	98800115 	stw	r2,4(r19)
    244c:	294b883a 	add	r5,r5,r5
    2450:	117f2836 	bltu	r2,r5,20f4 <__alt_data_end+0xff0020f4>
    2454:	283f2726 	beq	r5,zero,20f4 <__alt_data_end+0xff0020f4>
    2458:	2886703a 	and	r3,r5,r2
    245c:	5809883a 	mov	r4,r11
    2460:	183ec31e 	bne	r3,zero,1f70 <__alt_data_end+0xff001f70>
    2464:	294b883a 	add	r5,r5,r5
    2468:	2886703a 	and	r3,r5,r2
    246c:	21000104 	addi	r4,r4,4
    2470:	183ffc26 	beq	r3,zero,2464 <__alt_data_end+0xff002464>
    2474:	003ebe06 	br	1f70 <__alt_data_end+0xff001f70>
    2478:	00c05504 	movi	r3,340
    247c:	18801236 	bltu	r3,r2,24c8 <_malloc_r+0x6f8>
    2480:	8804d3fa 	srli	r2,r17,15
    2484:	12001e04 	addi	r8,r2,120
    2488:	11c01dc4 	addi	r7,r2,119
    248c:	4209883a 	add	r4,r8,r8
    2490:	003e6d06 	br	1e48 <__alt_data_end+0xff001e48>
    2494:	00c40004 	movi	r3,4096
    2498:	003f4606 	br	21b4 <__alt_data_end+0xff0021b4>
    249c:	00800044 	movi	r2,1
    24a0:	a0800115 	stw	r2,4(r20)
    24a4:	003f7406 	br	2278 <__alt_data_end+0xff002278>
    24a8:	1805d0ba 	srai	r2,r3,2
    24ac:	01c00044 	movi	r7,1
    24b0:	30c00117 	ldw	r3,4(r6)
    24b4:	388e983a 	sll	r7,r7,r2
    24b8:	2805883a 	mov	r2,r5
    24bc:	38c6b03a 	or	r3,r7,r3
    24c0:	30c00115 	stw	r3,4(r6)
    24c4:	003f9b06 	br	2334 <__alt_data_end+0xff002334>
    24c8:	00c15504 	movi	r3,1364
    24cc:	18801a36 	bltu	r3,r2,2538 <_malloc_r+0x768>
    24d0:	8804d4ba 	srli	r2,r17,18
    24d4:	12001f44 	addi	r8,r2,125
    24d8:	11c01f04 	addi	r7,r2,124
    24dc:	4209883a 	add	r4,r8,r8
    24e0:	003e5906 	br	1e48 <__alt_data_end+0xff001e48>
    24e4:	ad400404 	addi	r21,r21,16
    24e8:	003f1706 	br	2148 <__alt_data_end+0xff002148>
    24ec:	00c01504 	movi	r3,84
    24f0:	18802336 	bltu	r3,r2,2580 <_malloc_r+0x7b0>
    24f4:	3804d33a 	srli	r2,r7,12
    24f8:	11401bc4 	addi	r5,r2,111
    24fc:	10c01b84 	addi	r3,r2,110
    2500:	294b883a 	add	r5,r5,r5
    2504:	003f7b06 	br	22f4 <__alt_data_end+0xff0022f4>
    2508:	9c000217 	ldw	r16,8(r19)
    250c:	00bfff04 	movi	r2,-4
    2510:	80c00117 	ldw	r3,4(r16)
    2514:	1886703a 	and	r3,r3,r2
    2518:	003f5306 	br	2268 <__alt_data_end+0xff002268>
    251c:	3083ffcc 	andi	r2,r6,4095
    2520:	103f181e 	bne	r2,zero,2184 <__alt_data_end+0xff002184>
    2524:	99000217 	ldw	r4,8(r19)
    2528:	b545883a 	add	r2,r22,r21
    252c:	10800054 	ori	r2,r2,1
    2530:	20800115 	stw	r2,4(r4)
    2534:	003f3e06 	br	2230 <__alt_data_end+0xff002230>
    2538:	01003f84 	movi	r4,254
    253c:	02001fc4 	movi	r8,127
    2540:	01c01f84 	movi	r7,126
    2544:	003e4006 	br	1e48 <__alt_data_end+0xff001e48>
    2548:	00800074 	movhi	r2,1
    254c:	108c7204 	addi	r2,r2,12744
    2550:	15000015 	stw	r20,0(r2)
    2554:	003f1106 	br	219c <__alt_data_end+0xff00219c>
    2558:	00800044 	movi	r2,1
    255c:	002b883a 	mov	r21,zero
    2560:	003f1f06 	br	21e0 <__alt_data_end+0xff0021e0>
    2564:	81400204 	addi	r5,r16,8
    2568:	9009883a 	mov	r4,r18
    256c:	0006c200 	call	6c20 <_free_r>
    2570:	00800074 	movhi	r2,1
    2574:	10935704 	addi	r2,r2,19804
    2578:	10c00017 	ldw	r3,0(r2)
    257c:	003f2c06 	br	2230 <__alt_data_end+0xff002230>
    2580:	00c05504 	movi	r3,340
    2584:	18800536 	bltu	r3,r2,259c <_malloc_r+0x7cc>
    2588:	3804d3fa 	srli	r2,r7,15
    258c:	11401e04 	addi	r5,r2,120
    2590:	10c01dc4 	addi	r3,r2,119
    2594:	294b883a 	add	r5,r5,r5
    2598:	003f5606 	br	22f4 <__alt_data_end+0xff0022f4>
    259c:	00c15504 	movi	r3,1364
    25a0:	18800536 	bltu	r3,r2,25b8 <_malloc_r+0x7e8>
    25a4:	3804d4ba 	srli	r2,r7,18
    25a8:	11401f44 	addi	r5,r2,125
    25ac:	10c01f04 	addi	r3,r2,124
    25b0:	294b883a 	add	r5,r5,r5
    25b4:	003f4f06 	br	22f4 <__alt_data_end+0xff0022f4>
    25b8:	01403f84 	movi	r5,254
    25bc:	00c01f84 	movi	r3,126
    25c0:	003f4c06 	br	22f4 <__alt_data_end+0xff0022f4>
    25c4:	98800117 	ldw	r2,4(r19)
    25c8:	003fa006 	br	244c <__alt_data_end+0xff00244c>
    25cc:	8808d0fa 	srli	r4,r17,3
    25d0:	20800044 	addi	r2,r4,1
    25d4:	1085883a 	add	r2,r2,r2
    25d8:	003e9006 	br	201c <__alt_data_end+0xff00201c>

000025dc <_printf_r>:
    25dc:	defffd04 	addi	sp,sp,-12
    25e0:	2805883a 	mov	r2,r5
    25e4:	dfc00015 	stw	ra,0(sp)
    25e8:	d9800115 	stw	r6,4(sp)
    25ec:	d9c00215 	stw	r7,8(sp)
    25f0:	21400217 	ldw	r5,8(r4)
    25f4:	d9c00104 	addi	r7,sp,4
    25f8:	100d883a 	mov	r6,r2
    25fc:	00028080 	call	2808 <___vfprintf_internal_r>
    2600:	dfc00017 	ldw	ra,0(sp)
    2604:	dec00304 	addi	sp,sp,12
    2608:	f800283a 	ret

0000260c <printf>:
    260c:	defffc04 	addi	sp,sp,-16
    2610:	dfc00015 	stw	ra,0(sp)
    2614:	d9400115 	stw	r5,4(sp)
    2618:	d9800215 	stw	r6,8(sp)
    261c:	d9c00315 	stw	r7,12(sp)
    2620:	00800074 	movhi	r2,1
    2624:	108c7504 	addi	r2,r2,12756
    2628:	10800017 	ldw	r2,0(r2)
    262c:	200b883a 	mov	r5,r4
    2630:	d9800104 	addi	r6,sp,4
    2634:	11000217 	ldw	r4,8(r2)
    2638:	0004a000 	call	4a00 <__vfprintf_internal>
    263c:	dfc00017 	ldw	ra,0(sp)
    2640:	dec00404 	addi	sp,sp,16
    2644:	f800283a 	ret

00002648 <_puts_r>:
    2648:	defff604 	addi	sp,sp,-40
    264c:	dc000715 	stw	r16,28(sp)
    2650:	2021883a 	mov	r16,r4
    2654:	2809883a 	mov	r4,r5
    2658:	dc400815 	stw	r17,32(sp)
    265c:	dfc00915 	stw	ra,36(sp)
    2660:	2823883a 	mov	r17,r5
    2664:	00027700 	call	2770 <strlen>
    2668:	10c00044 	addi	r3,r2,1
    266c:	d8800115 	stw	r2,4(sp)
    2670:	00800074 	movhi	r2,1
    2674:	10850504 	addi	r2,r2,5140
    2678:	d8800215 	stw	r2,8(sp)
    267c:	00800044 	movi	r2,1
    2680:	d8800315 	stw	r2,12(sp)
    2684:	00800084 	movi	r2,2
    2688:	dc400015 	stw	r17,0(sp)
    268c:	d8c00615 	stw	r3,24(sp)
    2690:	dec00415 	stw	sp,16(sp)
    2694:	d8800515 	stw	r2,20(sp)
    2698:	80000226 	beq	r16,zero,26a4 <_puts_r+0x5c>
    269c:	80800e17 	ldw	r2,56(r16)
    26a0:	10001426 	beq	r2,zero,26f4 <_puts_r+0xac>
    26a4:	81400217 	ldw	r5,8(r16)
    26a8:	2880030b 	ldhu	r2,12(r5)
    26ac:	10c8000c 	andi	r3,r2,8192
    26b0:	1800061e 	bne	r3,zero,26cc <_puts_r+0x84>
    26b4:	29001917 	ldw	r4,100(r5)
    26b8:	00f7ffc4 	movi	r3,-8193
    26bc:	10880014 	ori	r2,r2,8192
    26c0:	20c6703a 	and	r3,r4,r3
    26c4:	2880030d 	sth	r2,12(r5)
    26c8:	28c01915 	stw	r3,100(r5)
    26cc:	d9800404 	addi	r6,sp,16
    26d0:	8009883a 	mov	r4,r16
    26d4:	0006f300 	call	6f30 <__sfvwrite_r>
    26d8:	1000091e 	bne	r2,zero,2700 <_puts_r+0xb8>
    26dc:	00800284 	movi	r2,10
    26e0:	dfc00917 	ldw	ra,36(sp)
    26e4:	dc400817 	ldw	r17,32(sp)
    26e8:	dc000717 	ldw	r16,28(sp)
    26ec:	dec00a04 	addi	sp,sp,40
    26f0:	f800283a 	ret
    26f4:	8009883a 	mov	r4,r16
    26f8:	0006aac0 	call	6aac <__sinit>
    26fc:	003fe906 	br	26a4 <__alt_data_end+0xff0026a4>
    2700:	00bfffc4 	movi	r2,-1
    2704:	003ff606 	br	26e0 <__alt_data_end+0xff0026e0>

00002708 <puts>:
    2708:	00800074 	movhi	r2,1
    270c:	108c7504 	addi	r2,r2,12756
    2710:	200b883a 	mov	r5,r4
    2714:	11000017 	ldw	r4,0(r2)
    2718:	00026481 	jmpi	2648 <_puts_r>

0000271c <_sbrk_r>:
    271c:	defffd04 	addi	sp,sp,-12
    2720:	dc000015 	stw	r16,0(sp)
    2724:	04000074 	movhi	r16,1
    2728:	dc400115 	stw	r17,4(sp)
    272c:	84134a04 	addi	r16,r16,19752
    2730:	2023883a 	mov	r17,r4
    2734:	2809883a 	mov	r4,r5
    2738:	dfc00215 	stw	ra,8(sp)
    273c:	80000015 	stw	zero,0(r16)
    2740:	000ec9c0 	call	ec9c <sbrk>
    2744:	00ffffc4 	movi	r3,-1
    2748:	10c00526 	beq	r2,r3,2760 <_sbrk_r+0x44>
    274c:	dfc00217 	ldw	ra,8(sp)
    2750:	dc400117 	ldw	r17,4(sp)
    2754:	dc000017 	ldw	r16,0(sp)
    2758:	dec00304 	addi	sp,sp,12
    275c:	f800283a 	ret
    2760:	80c00017 	ldw	r3,0(r16)
    2764:	183ff926 	beq	r3,zero,274c <__alt_data_end+0xff00274c>
    2768:	88c00015 	stw	r3,0(r17)
    276c:	003ff706 	br	274c <__alt_data_end+0xff00274c>

00002770 <strlen>:
    2770:	208000cc 	andi	r2,r4,3
    2774:	10002026 	beq	r2,zero,27f8 <strlen+0x88>
    2778:	20800007 	ldb	r2,0(r4)
    277c:	10002026 	beq	r2,zero,2800 <strlen+0x90>
    2780:	2005883a 	mov	r2,r4
    2784:	00000206 	br	2790 <strlen+0x20>
    2788:	10c00007 	ldb	r3,0(r2)
    278c:	18001826 	beq	r3,zero,27f0 <strlen+0x80>
    2790:	10800044 	addi	r2,r2,1
    2794:	10c000cc 	andi	r3,r2,3
    2798:	183ffb1e 	bne	r3,zero,2788 <__alt_data_end+0xff002788>
    279c:	10c00017 	ldw	r3,0(r2)
    27a0:	01ffbff4 	movhi	r7,65279
    27a4:	39ffbfc4 	addi	r7,r7,-257
    27a8:	00ca303a 	nor	r5,zero,r3
    27ac:	01a02074 	movhi	r6,32897
    27b0:	19c7883a 	add	r3,r3,r7
    27b4:	31a02004 	addi	r6,r6,-32640
    27b8:	1946703a 	and	r3,r3,r5
    27bc:	1986703a 	and	r3,r3,r6
    27c0:	1800091e 	bne	r3,zero,27e8 <strlen+0x78>
    27c4:	10800104 	addi	r2,r2,4
    27c8:	10c00017 	ldw	r3,0(r2)
    27cc:	19cb883a 	add	r5,r3,r7
    27d0:	00c6303a 	nor	r3,zero,r3
    27d4:	28c6703a 	and	r3,r5,r3
    27d8:	1986703a 	and	r3,r3,r6
    27dc:	183ff926 	beq	r3,zero,27c4 <__alt_data_end+0xff0027c4>
    27e0:	00000106 	br	27e8 <strlen+0x78>
    27e4:	10800044 	addi	r2,r2,1
    27e8:	10c00007 	ldb	r3,0(r2)
    27ec:	183ffd1e 	bne	r3,zero,27e4 <__alt_data_end+0xff0027e4>
    27f0:	1105c83a 	sub	r2,r2,r4
    27f4:	f800283a 	ret
    27f8:	2005883a 	mov	r2,r4
    27fc:	003fe706 	br	279c <__alt_data_end+0xff00279c>
    2800:	0005883a 	mov	r2,zero
    2804:	f800283a 	ret

00002808 <___vfprintf_internal_r>:
    2808:	deffb804 	addi	sp,sp,-288
    280c:	dfc04715 	stw	ra,284(sp)
    2810:	ddc04515 	stw	r23,276(sp)
    2814:	dd404315 	stw	r21,268(sp)
    2818:	d9002c15 	stw	r4,176(sp)
    281c:	282f883a 	mov	r23,r5
    2820:	302b883a 	mov	r21,r6
    2824:	d9c02d15 	stw	r7,180(sp)
    2828:	df004615 	stw	fp,280(sp)
    282c:	dd804415 	stw	r22,272(sp)
    2830:	dd004215 	stw	r20,264(sp)
    2834:	dcc04115 	stw	r19,260(sp)
    2838:	dc804015 	stw	r18,256(sp)
    283c:	dc403f15 	stw	r17,252(sp)
    2840:	dc003e15 	stw	r16,248(sp)
    2844:	00076200 	call	7620 <_localeconv_r>
    2848:	10800017 	ldw	r2,0(r2)
    284c:	1009883a 	mov	r4,r2
    2850:	d8803415 	stw	r2,208(sp)
    2854:	00027700 	call	2770 <strlen>
    2858:	d8803715 	stw	r2,220(sp)
    285c:	d8802c17 	ldw	r2,176(sp)
    2860:	10000226 	beq	r2,zero,286c <___vfprintf_internal_r+0x64>
    2864:	10800e17 	ldw	r2,56(r2)
    2868:	1000f926 	beq	r2,zero,2c50 <___vfprintf_internal_r+0x448>
    286c:	b880030b 	ldhu	r2,12(r23)
    2870:	10c8000c 	andi	r3,r2,8192
    2874:	1800061e 	bne	r3,zero,2890 <___vfprintf_internal_r+0x88>
    2878:	b9001917 	ldw	r4,100(r23)
    287c:	00f7ffc4 	movi	r3,-8193
    2880:	10880014 	ori	r2,r2,8192
    2884:	20c6703a 	and	r3,r4,r3
    2888:	b880030d 	sth	r2,12(r23)
    288c:	b8c01915 	stw	r3,100(r23)
    2890:	10c0020c 	andi	r3,r2,8
    2894:	1800c126 	beq	r3,zero,2b9c <___vfprintf_internal_r+0x394>
    2898:	b8c00417 	ldw	r3,16(r23)
    289c:	1800bf26 	beq	r3,zero,2b9c <___vfprintf_internal_r+0x394>
    28a0:	1080068c 	andi	r2,r2,26
    28a4:	00c00284 	movi	r3,10
    28a8:	10c0c426 	beq	r2,r3,2bbc <___vfprintf_internal_r+0x3b4>
    28ac:	d8c00404 	addi	r3,sp,16
    28b0:	05000074 	movhi	r20,1
    28b4:	d9001e04 	addi	r4,sp,120
    28b8:	a5051a84 	addi	r20,r20,5226
    28bc:	d8c01e15 	stw	r3,120(sp)
    28c0:	d8002015 	stw	zero,128(sp)
    28c4:	d8001f15 	stw	zero,124(sp)
    28c8:	d8003315 	stw	zero,204(sp)
    28cc:	d8003615 	stw	zero,216(sp)
    28d0:	d8003815 	stw	zero,224(sp)
    28d4:	1811883a 	mov	r8,r3
    28d8:	d8003915 	stw	zero,228(sp)
    28dc:	d8003a15 	stw	zero,232(sp)
    28e0:	d8002f15 	stw	zero,188(sp)
    28e4:	d9002815 	stw	r4,160(sp)
    28e8:	a8800007 	ldb	r2,0(r21)
    28ec:	10027b26 	beq	r2,zero,32dc <___vfprintf_internal_r+0xad4>
    28f0:	00c00944 	movi	r3,37
    28f4:	a821883a 	mov	r16,r21
    28f8:	10c0021e 	bne	r2,r3,2904 <___vfprintf_internal_r+0xfc>
    28fc:	00001406 	br	2950 <___vfprintf_internal_r+0x148>
    2900:	10c00326 	beq	r2,r3,2910 <___vfprintf_internal_r+0x108>
    2904:	84000044 	addi	r16,r16,1
    2908:	80800007 	ldb	r2,0(r16)
    290c:	103ffc1e 	bne	r2,zero,2900 <__alt_data_end+0xff002900>
    2910:	8563c83a 	sub	r17,r16,r21
    2914:	88000e26 	beq	r17,zero,2950 <___vfprintf_internal_r+0x148>
    2918:	d8c02017 	ldw	r3,128(sp)
    291c:	d8801f17 	ldw	r2,124(sp)
    2920:	45400015 	stw	r21,0(r8)
    2924:	1c47883a 	add	r3,r3,r17
    2928:	10800044 	addi	r2,r2,1
    292c:	d8c02015 	stw	r3,128(sp)
    2930:	44400115 	stw	r17,4(r8)
    2934:	d8801f15 	stw	r2,124(sp)
    2938:	00c001c4 	movi	r3,7
    293c:	1880a716 	blt	r3,r2,2bdc <___vfprintf_internal_r+0x3d4>
    2940:	42000204 	addi	r8,r8,8
    2944:	d9402f17 	ldw	r5,188(sp)
    2948:	2c4b883a 	add	r5,r5,r17
    294c:	d9402f15 	stw	r5,188(sp)
    2950:	80800007 	ldb	r2,0(r16)
    2954:	1000a826 	beq	r2,zero,2bf8 <___vfprintf_internal_r+0x3f0>
    2958:	84400047 	ldb	r17,1(r16)
    295c:	00bfffc4 	movi	r2,-1
    2960:	85400044 	addi	r21,r16,1
    2964:	d8002785 	stb	zero,158(sp)
    2968:	0007883a 	mov	r3,zero
    296c:	000f883a 	mov	r7,zero
    2970:	d8802915 	stw	r2,164(sp)
    2974:	d8003115 	stw	zero,196(sp)
    2978:	0025883a 	mov	r18,zero
    297c:	01401604 	movi	r5,88
    2980:	01800244 	movi	r6,9
    2984:	02800a84 	movi	r10,42
    2988:	02401b04 	movi	r9,108
    298c:	ad400044 	addi	r21,r21,1
    2990:	88bff804 	addi	r2,r17,-32
    2994:	28830436 	bltu	r5,r2,35a8 <___vfprintf_internal_r+0xda0>
    2998:	100490ba 	slli	r2,r2,2
    299c:	01000034 	movhi	r4,0
    29a0:	210a6c04 	addi	r4,r4,10672
    29a4:	1105883a 	add	r2,r2,r4
    29a8:	10800017 	ldw	r2,0(r2)
    29ac:	1000683a 	jmp	r2
    29b0:	000034c8 	cmpgei	zero,zero,211
    29b4:	000035a8 	cmpgeui	zero,zero,214
    29b8:	000035a8 	cmpgeui	zero,zero,214
    29bc:	000034e8 	cmpgeui	zero,zero,211
    29c0:	000035a8 	cmpgeui	zero,zero,214
    29c4:	000035a8 	cmpgeui	zero,zero,214
    29c8:	000035a8 	cmpgeui	zero,zero,214
    29cc:	000035a8 	cmpgeui	zero,zero,214
    29d0:	000035a8 	cmpgeui	zero,zero,214
    29d4:	000035a8 	cmpgeui	zero,zero,214
    29d8:	00002c5c 	xori	zero,zero,177
    29dc:	00003404 	movi	zero,208
    29e0:	000035a8 	cmpgeui	zero,zero,214
    29e4:	00002b24 	muli	zero,zero,172
    29e8:	00002c84 	movi	zero,178
    29ec:	000035a8 	cmpgeui	zero,zero,214
    29f0:	00002cc4 	movi	zero,179
    29f4:	00002cd0 	cmplti	zero,zero,179
    29f8:	00002cd0 	cmplti	zero,zero,179
    29fc:	00002cd0 	cmplti	zero,zero,179
    2a00:	00002cd0 	cmplti	zero,zero,179
    2a04:	00002cd0 	cmplti	zero,zero,179
    2a08:	00002cd0 	cmplti	zero,zero,179
    2a0c:	00002cd0 	cmplti	zero,zero,179
    2a10:	00002cd0 	cmplti	zero,zero,179
    2a14:	00002cd0 	cmplti	zero,zero,179
    2a18:	000035a8 	cmpgeui	zero,zero,214
    2a1c:	000035a8 	cmpgeui	zero,zero,214
    2a20:	000035a8 	cmpgeui	zero,zero,214
    2a24:	000035a8 	cmpgeui	zero,zero,214
    2a28:	000035a8 	cmpgeui	zero,zero,214
    2a2c:	000035a8 	cmpgeui	zero,zero,214
    2a30:	000035a8 	cmpgeui	zero,zero,214
    2a34:	000035a8 	cmpgeui	zero,zero,214
    2a38:	000035a8 	cmpgeui	zero,zero,214
    2a3c:	000035a8 	cmpgeui	zero,zero,214
    2a40:	00002d04 	movi	zero,180
    2a44:	00002dc0 	call	2dc <init_camera+0x5c>
    2a48:	000035a8 	cmpgeui	zero,zero,214
    2a4c:	00002dc0 	call	2dc <init_camera+0x5c>
    2a50:	000035a8 	cmpgeui	zero,zero,214
    2a54:	000035a8 	cmpgeui	zero,zero,214
    2a58:	000035a8 	cmpgeui	zero,zero,214
    2a5c:	000035a8 	cmpgeui	zero,zero,214
    2a60:	00002e60 	cmpeqi	zero,zero,185
    2a64:	000035a8 	cmpgeui	zero,zero,214
    2a68:	000035a8 	cmpgeui	zero,zero,214
    2a6c:	00002e6c 	andhi	zero,zero,185
    2a70:	000035a8 	cmpgeui	zero,zero,214
    2a74:	000035a8 	cmpgeui	zero,zero,214
    2a78:	000035a8 	cmpgeui	zero,zero,214
    2a7c:	000035a8 	cmpgeui	zero,zero,214
    2a80:	000035a8 	cmpgeui	zero,zero,214
    2a84:	000032e4 	muli	zero,zero,203
    2a88:	000035a8 	cmpgeui	zero,zero,214
    2a8c:	000035a8 	cmpgeui	zero,zero,214
    2a90:	00003344 	movi	zero,205
    2a94:	000035a8 	cmpgeui	zero,zero,214
    2a98:	000035a8 	cmpgeui	zero,zero,214
    2a9c:	000035a8 	cmpgeui	zero,zero,214
    2aa0:	000035a8 	cmpgeui	zero,zero,214
    2aa4:	000035a8 	cmpgeui	zero,zero,214
    2aa8:	000035a8 	cmpgeui	zero,zero,214
    2aac:	000035a8 	cmpgeui	zero,zero,214
    2ab0:	000035a8 	cmpgeui	zero,zero,214
    2ab4:	000035a8 	cmpgeui	zero,zero,214
    2ab8:	000035a8 	cmpgeui	zero,zero,214
    2abc:	00003554 	movui	zero,213
    2ac0:	000034f4 	movhi	zero,211
    2ac4:	00002dc0 	call	2dc <init_camera+0x5c>
    2ac8:	00002dc0 	call	2dc <init_camera+0x5c>
    2acc:	00002dc0 	call	2dc <init_camera+0x5c>
    2ad0:	00003504 	movi	zero,212
    2ad4:	000034f4 	movhi	zero,211
    2ad8:	000035a8 	cmpgeui	zero,zero,214
    2adc:	000035a8 	cmpgeui	zero,zero,214
    2ae0:	00003510 	cmplti	zero,zero,212
    2ae4:	000035a8 	cmpgeui	zero,zero,214
    2ae8:	00003520 	cmpeqi	zero,zero,212
    2aec:	000033f4 	movhi	zero,207
    2af0:	00002b30 	cmpltui	zero,zero,172
    2af4:	00003414 	movui	zero,208
    2af8:	000035a8 	cmpgeui	zero,zero,214
    2afc:	00003420 	cmpeqi	zero,zero,208
    2b00:	000035a8 	cmpgeui	zero,zero,214
    2b04:	0000347c 	xorhi	zero,zero,209
    2b08:	000035a8 	cmpgeui	zero,zero,214
    2b0c:	000035a8 	cmpgeui	zero,zero,214
    2b10:	0000348c 	andi	zero,zero,210
    2b14:	d9003117 	ldw	r4,196(sp)
    2b18:	d8802d15 	stw	r2,180(sp)
    2b1c:	0109c83a 	sub	r4,zero,r4
    2b20:	d9003115 	stw	r4,196(sp)
    2b24:	94800114 	ori	r18,r18,4
    2b28:	ac400007 	ldb	r17,0(r21)
    2b2c:	003f9706 	br	298c <__alt_data_end+0xff00298c>
    2b30:	00800c04 	movi	r2,48
    2b34:	d9002d17 	ldw	r4,180(sp)
    2b38:	d9402917 	ldw	r5,164(sp)
    2b3c:	d8802705 	stb	r2,156(sp)
    2b40:	00801e04 	movi	r2,120
    2b44:	d8802745 	stb	r2,157(sp)
    2b48:	d8002785 	stb	zero,158(sp)
    2b4c:	20c00104 	addi	r3,r4,4
    2b50:	24c00017 	ldw	r19,0(r4)
    2b54:	002d883a 	mov	r22,zero
    2b58:	90800094 	ori	r2,r18,2
    2b5c:	28029a16 	blt	r5,zero,35c8 <___vfprintf_internal_r+0xdc0>
    2b60:	00bfdfc4 	movi	r2,-129
    2b64:	90a4703a 	and	r18,r18,r2
    2b68:	d8c02d15 	stw	r3,180(sp)
    2b6c:	94800094 	ori	r18,r18,2
    2b70:	9802871e 	bne	r19,zero,3590 <___vfprintf_internal_r+0xd88>
    2b74:	00800074 	movhi	r2,1
    2b78:	10851304 	addi	r2,r2,5196
    2b7c:	d8803915 	stw	r2,228(sp)
    2b80:	04401e04 	movi	r17,120
    2b84:	d8802917 	ldw	r2,164(sp)
    2b88:	0039883a 	mov	fp,zero
    2b8c:	1001e926 	beq	r2,zero,3334 <___vfprintf_internal_r+0xb2c>
    2b90:	0027883a 	mov	r19,zero
    2b94:	002d883a 	mov	r22,zero
    2b98:	00020506 	br	33b0 <___vfprintf_internal_r+0xba8>
    2b9c:	d9002c17 	ldw	r4,176(sp)
    2ba0:	b80b883a 	mov	r5,r23
    2ba4:	0004ad80 	call	4ad8 <__swsetup_r>
    2ba8:	1005ac1e 	bne	r2,zero,425c <___vfprintf_internal_r+0x1a54>
    2bac:	b880030b 	ldhu	r2,12(r23)
    2bb0:	00c00284 	movi	r3,10
    2bb4:	1080068c 	andi	r2,r2,26
    2bb8:	10ff3c1e 	bne	r2,r3,28ac <__alt_data_end+0xff0028ac>
    2bbc:	b880038f 	ldh	r2,14(r23)
    2bc0:	103f3a16 	blt	r2,zero,28ac <__alt_data_end+0xff0028ac>
    2bc4:	d9c02d17 	ldw	r7,180(sp)
    2bc8:	d9002c17 	ldw	r4,176(sp)
    2bcc:	a80d883a 	mov	r6,r21
    2bd0:	b80b883a 	mov	r5,r23
    2bd4:	0004a1c0 	call	4a1c <__sbprintf>
    2bd8:	00001106 	br	2c20 <___vfprintf_internal_r+0x418>
    2bdc:	d9002c17 	ldw	r4,176(sp)
    2be0:	d9801e04 	addi	r6,sp,120
    2be4:	b80b883a 	mov	r5,r23
    2be8:	00095a40 	call	95a4 <__sprint_r>
    2bec:	1000081e 	bne	r2,zero,2c10 <___vfprintf_internal_r+0x408>
    2bf0:	da000404 	addi	r8,sp,16
    2bf4:	003f5306 	br	2944 <__alt_data_end+0xff002944>
    2bf8:	d8802017 	ldw	r2,128(sp)
    2bfc:	10000426 	beq	r2,zero,2c10 <___vfprintf_internal_r+0x408>
    2c00:	d9002c17 	ldw	r4,176(sp)
    2c04:	d9801e04 	addi	r6,sp,120
    2c08:	b80b883a 	mov	r5,r23
    2c0c:	00095a40 	call	95a4 <__sprint_r>
    2c10:	b880030b 	ldhu	r2,12(r23)
    2c14:	1080100c 	andi	r2,r2,64
    2c18:	1005901e 	bne	r2,zero,425c <___vfprintf_internal_r+0x1a54>
    2c1c:	d8802f17 	ldw	r2,188(sp)
    2c20:	dfc04717 	ldw	ra,284(sp)
    2c24:	df004617 	ldw	fp,280(sp)
    2c28:	ddc04517 	ldw	r23,276(sp)
    2c2c:	dd804417 	ldw	r22,272(sp)
    2c30:	dd404317 	ldw	r21,268(sp)
    2c34:	dd004217 	ldw	r20,264(sp)
    2c38:	dcc04117 	ldw	r19,260(sp)
    2c3c:	dc804017 	ldw	r18,256(sp)
    2c40:	dc403f17 	ldw	r17,252(sp)
    2c44:	dc003e17 	ldw	r16,248(sp)
    2c48:	dec04804 	addi	sp,sp,288
    2c4c:	f800283a 	ret
    2c50:	d9002c17 	ldw	r4,176(sp)
    2c54:	0006aac0 	call	6aac <__sinit>
    2c58:	003f0406 	br	286c <__alt_data_end+0xff00286c>
    2c5c:	d8802d17 	ldw	r2,180(sp)
    2c60:	d9002d17 	ldw	r4,180(sp)
    2c64:	10800017 	ldw	r2,0(r2)
    2c68:	d8803115 	stw	r2,196(sp)
    2c6c:	20800104 	addi	r2,r4,4
    2c70:	d9003117 	ldw	r4,196(sp)
    2c74:	203fa716 	blt	r4,zero,2b14 <__alt_data_end+0xff002b14>
    2c78:	d8802d15 	stw	r2,180(sp)
    2c7c:	ac400007 	ldb	r17,0(r21)
    2c80:	003f4206 	br	298c <__alt_data_end+0xff00298c>
    2c84:	ac400007 	ldb	r17,0(r21)
    2c88:	aac00044 	addi	r11,r21,1
    2c8c:	8a872826 	beq	r17,r10,4930 <___vfprintf_internal_r+0x2128>
    2c90:	88bff404 	addi	r2,r17,-48
    2c94:	0009883a 	mov	r4,zero
    2c98:	30867d36 	bltu	r6,r2,4690 <___vfprintf_internal_r+0x1e88>
    2c9c:	5c400007 	ldb	r17,0(r11)
    2ca0:	210002a4 	muli	r4,r4,10
    2ca4:	5d400044 	addi	r21,r11,1
    2ca8:	a817883a 	mov	r11,r21
    2cac:	2089883a 	add	r4,r4,r2
    2cb0:	88bff404 	addi	r2,r17,-48
    2cb4:	30bff92e 	bgeu	r6,r2,2c9c <__alt_data_end+0xff002c9c>
    2cb8:	2005c916 	blt	r4,zero,43e0 <___vfprintf_internal_r+0x1bd8>
    2cbc:	d9002915 	stw	r4,164(sp)
    2cc0:	003f3306 	br	2990 <__alt_data_end+0xff002990>
    2cc4:	94802014 	ori	r18,r18,128
    2cc8:	ac400007 	ldb	r17,0(r21)
    2ccc:	003f2f06 	br	298c <__alt_data_end+0xff00298c>
    2cd0:	a809883a 	mov	r4,r21
    2cd4:	d8003115 	stw	zero,196(sp)
    2cd8:	88bff404 	addi	r2,r17,-48
    2cdc:	0017883a 	mov	r11,zero
    2ce0:	24400007 	ldb	r17,0(r4)
    2ce4:	5ac002a4 	muli	r11,r11,10
    2ce8:	ad400044 	addi	r21,r21,1
    2cec:	a809883a 	mov	r4,r21
    2cf0:	12d7883a 	add	r11,r2,r11
    2cf4:	88bff404 	addi	r2,r17,-48
    2cf8:	30bff92e 	bgeu	r6,r2,2ce0 <__alt_data_end+0xff002ce0>
    2cfc:	dac03115 	stw	r11,196(sp)
    2d00:	003f2306 	br	2990 <__alt_data_end+0xff002990>
    2d04:	18c03fcc 	andi	r3,r3,255
    2d08:	18072b1e 	bne	r3,zero,49b8 <___vfprintf_internal_r+0x21b0>
    2d0c:	94800414 	ori	r18,r18,16
    2d10:	9080080c 	andi	r2,r18,32
    2d14:	10037b26 	beq	r2,zero,3b04 <___vfprintf_internal_r+0x12fc>
    2d18:	d9402d17 	ldw	r5,180(sp)
    2d1c:	28800117 	ldw	r2,4(r5)
    2d20:	2cc00017 	ldw	r19,0(r5)
    2d24:	29400204 	addi	r5,r5,8
    2d28:	d9402d15 	stw	r5,180(sp)
    2d2c:	102d883a 	mov	r22,r2
    2d30:	10044b16 	blt	r2,zero,3e60 <___vfprintf_internal_r+0x1658>
    2d34:	d9402917 	ldw	r5,164(sp)
    2d38:	df002783 	ldbu	fp,158(sp)
    2d3c:	2803bc16 	blt	r5,zero,3c30 <___vfprintf_internal_r+0x1428>
    2d40:	00ffdfc4 	movi	r3,-129
    2d44:	9d84b03a 	or	r2,r19,r22
    2d48:	90e4703a 	and	r18,r18,r3
    2d4c:	10017726 	beq	r2,zero,332c <___vfprintf_internal_r+0xb24>
    2d50:	b0038326 	beq	r22,zero,3b60 <___vfprintf_internal_r+0x1358>
    2d54:	dc402a15 	stw	r17,168(sp)
    2d58:	dc001e04 	addi	r16,sp,120
    2d5c:	b023883a 	mov	r17,r22
    2d60:	402d883a 	mov	r22,r8
    2d64:	9809883a 	mov	r4,r19
    2d68:	880b883a 	mov	r5,r17
    2d6c:	01800284 	movi	r6,10
    2d70:	000f883a 	mov	r7,zero
    2d74:	000b99c0 	call	b99c <__umoddi3>
    2d78:	10800c04 	addi	r2,r2,48
    2d7c:	843fffc4 	addi	r16,r16,-1
    2d80:	9809883a 	mov	r4,r19
    2d84:	880b883a 	mov	r5,r17
    2d88:	80800005 	stb	r2,0(r16)
    2d8c:	01800284 	movi	r6,10
    2d90:	000f883a 	mov	r7,zero
    2d94:	000b4240 	call	b424 <__udivdi3>
    2d98:	1027883a 	mov	r19,r2
    2d9c:	10c4b03a 	or	r2,r2,r3
    2da0:	1823883a 	mov	r17,r3
    2da4:	103fef1e 	bne	r2,zero,2d64 <__alt_data_end+0xff002d64>
    2da8:	d8c02817 	ldw	r3,160(sp)
    2dac:	dc402a17 	ldw	r17,168(sp)
    2db0:	b011883a 	mov	r8,r22
    2db4:	1c07c83a 	sub	r3,r3,r16
    2db8:	d8c02e15 	stw	r3,184(sp)
    2dbc:	00005906 	br	2f24 <___vfprintf_internal_r+0x71c>
    2dc0:	18c03fcc 	andi	r3,r3,255
    2dc4:	1806fa1e 	bne	r3,zero,49b0 <___vfprintf_internal_r+0x21a8>
    2dc8:	9080020c 	andi	r2,r18,8
    2dcc:	10048a26 	beq	r2,zero,3ff8 <___vfprintf_internal_r+0x17f0>
    2dd0:	d8c02d17 	ldw	r3,180(sp)
    2dd4:	d9002d17 	ldw	r4,180(sp)
    2dd8:	d9402d17 	ldw	r5,180(sp)
    2ddc:	18c00017 	ldw	r3,0(r3)
    2de0:	21000117 	ldw	r4,4(r4)
    2de4:	29400204 	addi	r5,r5,8
    2de8:	d8c03615 	stw	r3,216(sp)
    2dec:	d9003815 	stw	r4,224(sp)
    2df0:	d9402d15 	stw	r5,180(sp)
    2df4:	d9003617 	ldw	r4,216(sp)
    2df8:	d9403817 	ldw	r5,224(sp)
    2dfc:	da003d15 	stw	r8,244(sp)
    2e00:	04000044 	movi	r16,1
    2e04:	000921c0 	call	921c <__fpclassifyd>
    2e08:	da003d17 	ldw	r8,244(sp)
    2e0c:	14041f1e 	bne	r2,r16,3e8c <___vfprintf_internal_r+0x1684>
    2e10:	d9003617 	ldw	r4,216(sp)
    2e14:	d9403817 	ldw	r5,224(sp)
    2e18:	000d883a 	mov	r6,zero
    2e1c:	000f883a 	mov	r7,zero
    2e20:	000d1cc0 	call	d1cc <__ledf2>
    2e24:	da003d17 	ldw	r8,244(sp)
    2e28:	1005be16 	blt	r2,zero,4524 <___vfprintf_internal_r+0x1d1c>
    2e2c:	df002783 	ldbu	fp,158(sp)
    2e30:	008011c4 	movi	r2,71
    2e34:	1445330e 	bge	r2,r17,4304 <___vfprintf_internal_r+0x1afc>
    2e38:	04000074 	movhi	r16,1
    2e3c:	84050b04 	addi	r16,r16,5164
    2e40:	00c000c4 	movi	r3,3
    2e44:	00bfdfc4 	movi	r2,-129
    2e48:	d8c02a15 	stw	r3,168(sp)
    2e4c:	90a4703a 	and	r18,r18,r2
    2e50:	d8c02e15 	stw	r3,184(sp)
    2e54:	d8002915 	stw	zero,164(sp)
    2e58:	d8003215 	stw	zero,200(sp)
    2e5c:	00003706 	br	2f3c <___vfprintf_internal_r+0x734>
    2e60:	94800214 	ori	r18,r18,8
    2e64:	ac400007 	ldb	r17,0(r21)
    2e68:	003ec806 	br	298c <__alt_data_end+0xff00298c>
    2e6c:	18c03fcc 	andi	r3,r3,255
    2e70:	1806db1e 	bne	r3,zero,49e0 <___vfprintf_internal_r+0x21d8>
    2e74:	94800414 	ori	r18,r18,16
    2e78:	9080080c 	andi	r2,r18,32
    2e7c:	1002d826 	beq	r2,zero,39e0 <___vfprintf_internal_r+0x11d8>
    2e80:	d9402d17 	ldw	r5,180(sp)
    2e84:	d8c02917 	ldw	r3,164(sp)
    2e88:	d8002785 	stb	zero,158(sp)
    2e8c:	28800204 	addi	r2,r5,8
    2e90:	2cc00017 	ldw	r19,0(r5)
    2e94:	2d800117 	ldw	r22,4(r5)
    2e98:	18048f16 	blt	r3,zero,40d8 <___vfprintf_internal_r+0x18d0>
    2e9c:	013fdfc4 	movi	r4,-129
    2ea0:	9d86b03a 	or	r3,r19,r22
    2ea4:	d8802d15 	stw	r2,180(sp)
    2ea8:	9124703a 	and	r18,r18,r4
    2eac:	1802d91e 	bne	r3,zero,3a14 <___vfprintf_internal_r+0x120c>
    2eb0:	d8c02917 	ldw	r3,164(sp)
    2eb4:	0039883a 	mov	fp,zero
    2eb8:	1805c326 	beq	r3,zero,45c8 <___vfprintf_internal_r+0x1dc0>
    2ebc:	0027883a 	mov	r19,zero
    2ec0:	002d883a 	mov	r22,zero
    2ec4:	dc001e04 	addi	r16,sp,120
    2ec8:	9806d0fa 	srli	r3,r19,3
    2ecc:	b008977a 	slli	r4,r22,29
    2ed0:	b02cd0fa 	srli	r22,r22,3
    2ed4:	9cc001cc 	andi	r19,r19,7
    2ed8:	98800c04 	addi	r2,r19,48
    2edc:	843fffc4 	addi	r16,r16,-1
    2ee0:	20e6b03a 	or	r19,r4,r3
    2ee4:	80800005 	stb	r2,0(r16)
    2ee8:	9d86b03a 	or	r3,r19,r22
    2eec:	183ff61e 	bne	r3,zero,2ec8 <__alt_data_end+0xff002ec8>
    2ef0:	90c0004c 	andi	r3,r18,1
    2ef4:	18013b26 	beq	r3,zero,33e4 <___vfprintf_internal_r+0xbdc>
    2ef8:	10803fcc 	andi	r2,r2,255
    2efc:	1080201c 	xori	r2,r2,128
    2f00:	10bfe004 	addi	r2,r2,-128
    2f04:	00c00c04 	movi	r3,48
    2f08:	10c13626 	beq	r2,r3,33e4 <___vfprintf_internal_r+0xbdc>
    2f0c:	80ffffc5 	stb	r3,-1(r16)
    2f10:	d8c02817 	ldw	r3,160(sp)
    2f14:	80bfffc4 	addi	r2,r16,-1
    2f18:	1021883a 	mov	r16,r2
    2f1c:	1887c83a 	sub	r3,r3,r2
    2f20:	d8c02e15 	stw	r3,184(sp)
    2f24:	d8802e17 	ldw	r2,184(sp)
    2f28:	d9002917 	ldw	r4,164(sp)
    2f2c:	1100010e 	bge	r2,r4,2f34 <___vfprintf_internal_r+0x72c>
    2f30:	2005883a 	mov	r2,r4
    2f34:	d8802a15 	stw	r2,168(sp)
    2f38:	d8003215 	stw	zero,200(sp)
    2f3c:	e7003fcc 	andi	fp,fp,255
    2f40:	e700201c 	xori	fp,fp,128
    2f44:	e73fe004 	addi	fp,fp,-128
    2f48:	e0000326 	beq	fp,zero,2f58 <___vfprintf_internal_r+0x750>
    2f4c:	d8c02a17 	ldw	r3,168(sp)
    2f50:	18c00044 	addi	r3,r3,1
    2f54:	d8c02a15 	stw	r3,168(sp)
    2f58:	90c0008c 	andi	r3,r18,2
    2f5c:	d8c02b15 	stw	r3,172(sp)
    2f60:	18000326 	beq	r3,zero,2f70 <___vfprintf_internal_r+0x768>
    2f64:	d8c02a17 	ldw	r3,168(sp)
    2f68:	18c00084 	addi	r3,r3,2
    2f6c:	d8c02a15 	stw	r3,168(sp)
    2f70:	90c0210c 	andi	r3,r18,132
    2f74:	d8c03015 	stw	r3,192(sp)
    2f78:	1801a31e 	bne	r3,zero,3608 <___vfprintf_internal_r+0xe00>
    2f7c:	d9003117 	ldw	r4,196(sp)
    2f80:	d8c02a17 	ldw	r3,168(sp)
    2f84:	20e7c83a 	sub	r19,r4,r3
    2f88:	04c19f0e 	bge	zero,r19,3608 <___vfprintf_internal_r+0xe00>
    2f8c:	02400404 	movi	r9,16
    2f90:	d8c02017 	ldw	r3,128(sp)
    2f94:	d8801f17 	ldw	r2,124(sp)
    2f98:	4cc50d0e 	bge	r9,r19,43d0 <___vfprintf_internal_r+0x1bc8>
    2f9c:	01400074 	movhi	r5,1
    2fa0:	29451e84 	addi	r5,r5,5242
    2fa4:	dc403b15 	stw	r17,236(sp)
    2fa8:	d9403515 	stw	r5,212(sp)
    2fac:	9823883a 	mov	r17,r19
    2fb0:	482d883a 	mov	r22,r9
    2fb4:	9027883a 	mov	r19,r18
    2fb8:	070001c4 	movi	fp,7
    2fbc:	8025883a 	mov	r18,r16
    2fc0:	dc002c17 	ldw	r16,176(sp)
    2fc4:	00000306 	br	2fd4 <___vfprintf_internal_r+0x7cc>
    2fc8:	8c7ffc04 	addi	r17,r17,-16
    2fcc:	42000204 	addi	r8,r8,8
    2fd0:	b440130e 	bge	r22,r17,3020 <___vfprintf_internal_r+0x818>
    2fd4:	01000074 	movhi	r4,1
    2fd8:	18c00404 	addi	r3,r3,16
    2fdc:	10800044 	addi	r2,r2,1
    2fe0:	21051e84 	addi	r4,r4,5242
    2fe4:	41000015 	stw	r4,0(r8)
    2fe8:	45800115 	stw	r22,4(r8)
    2fec:	d8c02015 	stw	r3,128(sp)
    2ff0:	d8801f15 	stw	r2,124(sp)
    2ff4:	e0bff40e 	bge	fp,r2,2fc8 <__alt_data_end+0xff002fc8>
    2ff8:	d9801e04 	addi	r6,sp,120
    2ffc:	b80b883a 	mov	r5,r23
    3000:	8009883a 	mov	r4,r16
    3004:	00095a40 	call	95a4 <__sprint_r>
    3008:	103f011e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    300c:	8c7ffc04 	addi	r17,r17,-16
    3010:	d8c02017 	ldw	r3,128(sp)
    3014:	d8801f17 	ldw	r2,124(sp)
    3018:	da000404 	addi	r8,sp,16
    301c:	b47fed16 	blt	r22,r17,2fd4 <__alt_data_end+0xff002fd4>
    3020:	9021883a 	mov	r16,r18
    3024:	9825883a 	mov	r18,r19
    3028:	8827883a 	mov	r19,r17
    302c:	dc403b17 	ldw	r17,236(sp)
    3030:	d9403517 	ldw	r5,212(sp)
    3034:	98c7883a 	add	r3,r19,r3
    3038:	10800044 	addi	r2,r2,1
    303c:	41400015 	stw	r5,0(r8)
    3040:	44c00115 	stw	r19,4(r8)
    3044:	d8c02015 	stw	r3,128(sp)
    3048:	d8801f15 	stw	r2,124(sp)
    304c:	010001c4 	movi	r4,7
    3050:	2082a316 	blt	r4,r2,3ae0 <___vfprintf_internal_r+0x12d8>
    3054:	df002787 	ldb	fp,158(sp)
    3058:	42000204 	addi	r8,r8,8
    305c:	e0000c26 	beq	fp,zero,3090 <___vfprintf_internal_r+0x888>
    3060:	d8801f17 	ldw	r2,124(sp)
    3064:	d9002784 	addi	r4,sp,158
    3068:	18c00044 	addi	r3,r3,1
    306c:	10800044 	addi	r2,r2,1
    3070:	41000015 	stw	r4,0(r8)
    3074:	01000044 	movi	r4,1
    3078:	41000115 	stw	r4,4(r8)
    307c:	d8c02015 	stw	r3,128(sp)
    3080:	d8801f15 	stw	r2,124(sp)
    3084:	010001c4 	movi	r4,7
    3088:	20823c16 	blt	r4,r2,397c <___vfprintf_internal_r+0x1174>
    308c:	42000204 	addi	r8,r8,8
    3090:	d8802b17 	ldw	r2,172(sp)
    3094:	10000c26 	beq	r2,zero,30c8 <___vfprintf_internal_r+0x8c0>
    3098:	d8801f17 	ldw	r2,124(sp)
    309c:	d9002704 	addi	r4,sp,156
    30a0:	18c00084 	addi	r3,r3,2
    30a4:	10800044 	addi	r2,r2,1
    30a8:	41000015 	stw	r4,0(r8)
    30ac:	01000084 	movi	r4,2
    30b0:	41000115 	stw	r4,4(r8)
    30b4:	d8c02015 	stw	r3,128(sp)
    30b8:	d8801f15 	stw	r2,124(sp)
    30bc:	010001c4 	movi	r4,7
    30c0:	20823616 	blt	r4,r2,399c <___vfprintf_internal_r+0x1194>
    30c4:	42000204 	addi	r8,r8,8
    30c8:	d9003017 	ldw	r4,192(sp)
    30cc:	00802004 	movi	r2,128
    30d0:	20819926 	beq	r4,r2,3738 <___vfprintf_internal_r+0xf30>
    30d4:	d9402917 	ldw	r5,164(sp)
    30d8:	d8802e17 	ldw	r2,184(sp)
    30dc:	28adc83a 	sub	r22,r5,r2
    30e0:	0580310e 	bge	zero,r22,31a8 <___vfprintf_internal_r+0x9a0>
    30e4:	07000404 	movi	fp,16
    30e8:	d8801f17 	ldw	r2,124(sp)
    30ec:	e584140e 	bge	fp,r22,4140 <___vfprintf_internal_r+0x1938>
    30f0:	01400074 	movhi	r5,1
    30f4:	29451a84 	addi	r5,r5,5226
    30f8:	dc402915 	stw	r17,164(sp)
    30fc:	d9402b15 	stw	r5,172(sp)
    3100:	b023883a 	mov	r17,r22
    3104:	04c001c4 	movi	r19,7
    3108:	a82d883a 	mov	r22,r21
    310c:	902b883a 	mov	r21,r18
    3110:	8025883a 	mov	r18,r16
    3114:	dc002c17 	ldw	r16,176(sp)
    3118:	00000306 	br	3128 <___vfprintf_internal_r+0x920>
    311c:	8c7ffc04 	addi	r17,r17,-16
    3120:	42000204 	addi	r8,r8,8
    3124:	e440110e 	bge	fp,r17,316c <___vfprintf_internal_r+0x964>
    3128:	18c00404 	addi	r3,r3,16
    312c:	10800044 	addi	r2,r2,1
    3130:	45000015 	stw	r20,0(r8)
    3134:	47000115 	stw	fp,4(r8)
    3138:	d8c02015 	stw	r3,128(sp)
    313c:	d8801f15 	stw	r2,124(sp)
    3140:	98bff60e 	bge	r19,r2,311c <__alt_data_end+0xff00311c>
    3144:	d9801e04 	addi	r6,sp,120
    3148:	b80b883a 	mov	r5,r23
    314c:	8009883a 	mov	r4,r16
    3150:	00095a40 	call	95a4 <__sprint_r>
    3154:	103eae1e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    3158:	8c7ffc04 	addi	r17,r17,-16
    315c:	d8c02017 	ldw	r3,128(sp)
    3160:	d8801f17 	ldw	r2,124(sp)
    3164:	da000404 	addi	r8,sp,16
    3168:	e47fef16 	blt	fp,r17,3128 <__alt_data_end+0xff003128>
    316c:	9021883a 	mov	r16,r18
    3170:	a825883a 	mov	r18,r21
    3174:	b02b883a 	mov	r21,r22
    3178:	882d883a 	mov	r22,r17
    317c:	dc402917 	ldw	r17,164(sp)
    3180:	d9002b17 	ldw	r4,172(sp)
    3184:	1d87883a 	add	r3,r3,r22
    3188:	10800044 	addi	r2,r2,1
    318c:	41000015 	stw	r4,0(r8)
    3190:	45800115 	stw	r22,4(r8)
    3194:	d8c02015 	stw	r3,128(sp)
    3198:	d8801f15 	stw	r2,124(sp)
    319c:	010001c4 	movi	r4,7
    31a0:	2081ee16 	blt	r4,r2,395c <___vfprintf_internal_r+0x1154>
    31a4:	42000204 	addi	r8,r8,8
    31a8:	9080400c 	andi	r2,r18,256
    31ac:	1001181e 	bne	r2,zero,3610 <___vfprintf_internal_r+0xe08>
    31b0:	d9402e17 	ldw	r5,184(sp)
    31b4:	d8801f17 	ldw	r2,124(sp)
    31b8:	44000015 	stw	r16,0(r8)
    31bc:	1947883a 	add	r3,r3,r5
    31c0:	10800044 	addi	r2,r2,1
    31c4:	41400115 	stw	r5,4(r8)
    31c8:	d8c02015 	stw	r3,128(sp)
    31cc:	d8801f15 	stw	r2,124(sp)
    31d0:	010001c4 	movi	r4,7
    31d4:	2081d316 	blt	r4,r2,3924 <___vfprintf_internal_r+0x111c>
    31d8:	42000204 	addi	r8,r8,8
    31dc:	9480010c 	andi	r18,r18,4
    31e0:	90003226 	beq	r18,zero,32ac <___vfprintf_internal_r+0xaa4>
    31e4:	d9403117 	ldw	r5,196(sp)
    31e8:	d8802a17 	ldw	r2,168(sp)
    31ec:	28a1c83a 	sub	r16,r5,r2
    31f0:	04002e0e 	bge	zero,r16,32ac <___vfprintf_internal_r+0xaa4>
    31f4:	04400404 	movi	r17,16
    31f8:	d8801f17 	ldw	r2,124(sp)
    31fc:	8c04a20e 	bge	r17,r16,4488 <___vfprintf_internal_r+0x1c80>
    3200:	01400074 	movhi	r5,1
    3204:	29451e84 	addi	r5,r5,5242
    3208:	d9403515 	stw	r5,212(sp)
    320c:	048001c4 	movi	r18,7
    3210:	dcc02c17 	ldw	r19,176(sp)
    3214:	00000306 	br	3224 <___vfprintf_internal_r+0xa1c>
    3218:	843ffc04 	addi	r16,r16,-16
    321c:	42000204 	addi	r8,r8,8
    3220:	8c00130e 	bge	r17,r16,3270 <___vfprintf_internal_r+0xa68>
    3224:	01000074 	movhi	r4,1
    3228:	18c00404 	addi	r3,r3,16
    322c:	10800044 	addi	r2,r2,1
    3230:	21051e84 	addi	r4,r4,5242
    3234:	41000015 	stw	r4,0(r8)
    3238:	44400115 	stw	r17,4(r8)
    323c:	d8c02015 	stw	r3,128(sp)
    3240:	d8801f15 	stw	r2,124(sp)
    3244:	90bff40e 	bge	r18,r2,3218 <__alt_data_end+0xff003218>
    3248:	d9801e04 	addi	r6,sp,120
    324c:	b80b883a 	mov	r5,r23
    3250:	9809883a 	mov	r4,r19
    3254:	00095a40 	call	95a4 <__sprint_r>
    3258:	103e6d1e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    325c:	843ffc04 	addi	r16,r16,-16
    3260:	d8c02017 	ldw	r3,128(sp)
    3264:	d8801f17 	ldw	r2,124(sp)
    3268:	da000404 	addi	r8,sp,16
    326c:	8c3fed16 	blt	r17,r16,3224 <__alt_data_end+0xff003224>
    3270:	d9403517 	ldw	r5,212(sp)
    3274:	1c07883a 	add	r3,r3,r16
    3278:	10800044 	addi	r2,r2,1
    327c:	41400015 	stw	r5,0(r8)
    3280:	44000115 	stw	r16,4(r8)
    3284:	d8c02015 	stw	r3,128(sp)
    3288:	d8801f15 	stw	r2,124(sp)
    328c:	010001c4 	movi	r4,7
    3290:	2080060e 	bge	r4,r2,32ac <___vfprintf_internal_r+0xaa4>
    3294:	d9002c17 	ldw	r4,176(sp)
    3298:	d9801e04 	addi	r6,sp,120
    329c:	b80b883a 	mov	r5,r23
    32a0:	00095a40 	call	95a4 <__sprint_r>
    32a4:	103e5a1e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    32a8:	d8c02017 	ldw	r3,128(sp)
    32ac:	d8803117 	ldw	r2,196(sp)
    32b0:	d9002a17 	ldw	r4,168(sp)
    32b4:	1100010e 	bge	r2,r4,32bc <___vfprintf_internal_r+0xab4>
    32b8:	2005883a 	mov	r2,r4
    32bc:	d9402f17 	ldw	r5,188(sp)
    32c0:	288b883a 	add	r5,r5,r2
    32c4:	d9402f15 	stw	r5,188(sp)
    32c8:	18019e1e 	bne	r3,zero,3944 <___vfprintf_internal_r+0x113c>
    32cc:	a8800007 	ldb	r2,0(r21)
    32d0:	d8001f15 	stw	zero,124(sp)
    32d4:	da000404 	addi	r8,sp,16
    32d8:	103d851e 	bne	r2,zero,28f0 <__alt_data_end+0xff0028f0>
    32dc:	a821883a 	mov	r16,r21
    32e0:	003d9b06 	br	2950 <__alt_data_end+0xff002950>
    32e4:	18c03fcc 	andi	r3,r3,255
    32e8:	1805c11e 	bne	r3,zero,49f0 <___vfprintf_internal_r+0x21e8>
    32ec:	94800414 	ori	r18,r18,16
    32f0:	9080080c 	andi	r2,r18,32
    32f4:	10020c26 	beq	r2,zero,3b28 <___vfprintf_internal_r+0x1320>
    32f8:	d8802d17 	ldw	r2,180(sp)
    32fc:	d9002917 	ldw	r4,164(sp)
    3300:	d8002785 	stb	zero,158(sp)
    3304:	10c00204 	addi	r3,r2,8
    3308:	14c00017 	ldw	r19,0(r2)
    330c:	15800117 	ldw	r22,4(r2)
    3310:	20040f16 	blt	r4,zero,4350 <___vfprintf_internal_r+0x1b48>
    3314:	013fdfc4 	movi	r4,-129
    3318:	9d84b03a 	or	r2,r19,r22
    331c:	d8c02d15 	stw	r3,180(sp)
    3320:	9124703a 	and	r18,r18,r4
    3324:	0039883a 	mov	fp,zero
    3328:	103e891e 	bne	r2,zero,2d50 <__alt_data_end+0xff002d50>
    332c:	d9002917 	ldw	r4,164(sp)
    3330:	2002c11e 	bne	r4,zero,3e38 <___vfprintf_internal_r+0x1630>
    3334:	d8002915 	stw	zero,164(sp)
    3338:	d8002e15 	stw	zero,184(sp)
    333c:	dc001e04 	addi	r16,sp,120
    3340:	003ef806 	br	2f24 <__alt_data_end+0xff002f24>
    3344:	18c03fcc 	andi	r3,r3,255
    3348:	18059d1e 	bne	r3,zero,49c0 <___vfprintf_internal_r+0x21b8>
    334c:	01400074 	movhi	r5,1
    3350:	29450e04 	addi	r5,r5,5176
    3354:	d9403915 	stw	r5,228(sp)
    3358:	9080080c 	andi	r2,r18,32
    335c:	10005226 	beq	r2,zero,34a8 <___vfprintf_internal_r+0xca0>
    3360:	d8802d17 	ldw	r2,180(sp)
    3364:	14c00017 	ldw	r19,0(r2)
    3368:	15800117 	ldw	r22,4(r2)
    336c:	10800204 	addi	r2,r2,8
    3370:	d8802d15 	stw	r2,180(sp)
    3374:	9080004c 	andi	r2,r18,1
    3378:	10019026 	beq	r2,zero,39bc <___vfprintf_internal_r+0x11b4>
    337c:	9d84b03a 	or	r2,r19,r22
    3380:	10036926 	beq	r2,zero,4128 <___vfprintf_internal_r+0x1920>
    3384:	d8c02917 	ldw	r3,164(sp)
    3388:	00800c04 	movi	r2,48
    338c:	d8802705 	stb	r2,156(sp)
    3390:	dc402745 	stb	r17,157(sp)
    3394:	d8002785 	stb	zero,158(sp)
    3398:	90800094 	ori	r2,r18,2
    339c:	18045d16 	blt	r3,zero,4514 <___vfprintf_internal_r+0x1d0c>
    33a0:	00bfdfc4 	movi	r2,-129
    33a4:	90a4703a 	and	r18,r18,r2
    33a8:	94800094 	ori	r18,r18,2
    33ac:	0039883a 	mov	fp,zero
    33b0:	d9003917 	ldw	r4,228(sp)
    33b4:	dc001e04 	addi	r16,sp,120
    33b8:	988003cc 	andi	r2,r19,15
    33bc:	b006973a 	slli	r3,r22,28
    33c0:	2085883a 	add	r2,r4,r2
    33c4:	9826d13a 	srli	r19,r19,4
    33c8:	10800003 	ldbu	r2,0(r2)
    33cc:	b02cd13a 	srli	r22,r22,4
    33d0:	843fffc4 	addi	r16,r16,-1
    33d4:	1ce6b03a 	or	r19,r3,r19
    33d8:	80800005 	stb	r2,0(r16)
    33dc:	9d84b03a 	or	r2,r19,r22
    33e0:	103ff51e 	bne	r2,zero,33b8 <__alt_data_end+0xff0033b8>
    33e4:	d8c02817 	ldw	r3,160(sp)
    33e8:	1c07c83a 	sub	r3,r3,r16
    33ec:	d8c02e15 	stw	r3,184(sp)
    33f0:	003ecc06 	br	2f24 <__alt_data_end+0xff002f24>
    33f4:	18c03fcc 	andi	r3,r3,255
    33f8:	183e9f26 	beq	r3,zero,2e78 <__alt_data_end+0xff002e78>
    33fc:	d9c02785 	stb	r7,158(sp)
    3400:	003e9d06 	br	2e78 <__alt_data_end+0xff002e78>
    3404:	00c00044 	movi	r3,1
    3408:	01c00ac4 	movi	r7,43
    340c:	ac400007 	ldb	r17,0(r21)
    3410:	003d5e06 	br	298c <__alt_data_end+0xff00298c>
    3414:	94800814 	ori	r18,r18,32
    3418:	ac400007 	ldb	r17,0(r21)
    341c:	003d5b06 	br	298c <__alt_data_end+0xff00298c>
    3420:	d8c02d17 	ldw	r3,180(sp)
    3424:	d8002785 	stb	zero,158(sp)
    3428:	1c000017 	ldw	r16,0(r3)
    342c:	1cc00104 	addi	r19,r3,4
    3430:	80041926 	beq	r16,zero,4498 <___vfprintf_internal_r+0x1c90>
    3434:	d9002917 	ldw	r4,164(sp)
    3438:	2003d016 	blt	r4,zero,437c <___vfprintf_internal_r+0x1b74>
    343c:	200d883a 	mov	r6,r4
    3440:	000b883a 	mov	r5,zero
    3444:	8009883a 	mov	r4,r16
    3448:	da003d15 	stw	r8,244(sp)
    344c:	000780c0 	call	780c <memchr>
    3450:	da003d17 	ldw	r8,244(sp)
    3454:	10045426 	beq	r2,zero,45a8 <___vfprintf_internal_r+0x1da0>
    3458:	1405c83a 	sub	r2,r2,r16
    345c:	d8802e15 	stw	r2,184(sp)
    3460:	1003cc16 	blt	r2,zero,4394 <___vfprintf_internal_r+0x1b8c>
    3464:	df002783 	ldbu	fp,158(sp)
    3468:	d8802a15 	stw	r2,168(sp)
    346c:	dcc02d15 	stw	r19,180(sp)
    3470:	d8002915 	stw	zero,164(sp)
    3474:	d8003215 	stw	zero,200(sp)
    3478:	003eb006 	br	2f3c <__alt_data_end+0xff002f3c>
    347c:	18c03fcc 	andi	r3,r3,255
    3480:	183f9b26 	beq	r3,zero,32f0 <__alt_data_end+0xff0032f0>
    3484:	d9c02785 	stb	r7,158(sp)
    3488:	003f9906 	br	32f0 <__alt_data_end+0xff0032f0>
    348c:	18c03fcc 	andi	r3,r3,255
    3490:	1805551e 	bne	r3,zero,49e8 <___vfprintf_internal_r+0x21e0>
    3494:	01400074 	movhi	r5,1
    3498:	29451304 	addi	r5,r5,5196
    349c:	d9403915 	stw	r5,228(sp)
    34a0:	9080080c 	andi	r2,r18,32
    34a4:	103fae1e 	bne	r2,zero,3360 <__alt_data_end+0xff003360>
    34a8:	9080040c 	andi	r2,r18,16
    34ac:	1002de26 	beq	r2,zero,4028 <___vfprintf_internal_r+0x1820>
    34b0:	d8c02d17 	ldw	r3,180(sp)
    34b4:	002d883a 	mov	r22,zero
    34b8:	1cc00017 	ldw	r19,0(r3)
    34bc:	18c00104 	addi	r3,r3,4
    34c0:	d8c02d15 	stw	r3,180(sp)
    34c4:	003fab06 	br	3374 <__alt_data_end+0xff003374>
    34c8:	38803fcc 	andi	r2,r7,255
    34cc:	1080201c 	xori	r2,r2,128
    34d0:	10bfe004 	addi	r2,r2,-128
    34d4:	1002d21e 	bne	r2,zero,4020 <___vfprintf_internal_r+0x1818>
    34d8:	00c00044 	movi	r3,1
    34dc:	01c00804 	movi	r7,32
    34e0:	ac400007 	ldb	r17,0(r21)
    34e4:	003d2906 	br	298c <__alt_data_end+0xff00298c>
    34e8:	94800054 	ori	r18,r18,1
    34ec:	ac400007 	ldb	r17,0(r21)
    34f0:	003d2606 	br	298c <__alt_data_end+0xff00298c>
    34f4:	18c03fcc 	andi	r3,r3,255
    34f8:	183e0526 	beq	r3,zero,2d10 <__alt_data_end+0xff002d10>
    34fc:	d9c02785 	stb	r7,158(sp)
    3500:	003e0306 	br	2d10 <__alt_data_end+0xff002d10>
    3504:	94801014 	ori	r18,r18,64
    3508:	ac400007 	ldb	r17,0(r21)
    350c:	003d1f06 	br	298c <__alt_data_end+0xff00298c>
    3510:	ac400007 	ldb	r17,0(r21)
    3514:	8a438726 	beq	r17,r9,4334 <___vfprintf_internal_r+0x1b2c>
    3518:	94800414 	ori	r18,r18,16
    351c:	003d1b06 	br	298c <__alt_data_end+0xff00298c>
    3520:	18c03fcc 	andi	r3,r3,255
    3524:	1805341e 	bne	r3,zero,49f8 <___vfprintf_internal_r+0x21f0>
    3528:	9080080c 	andi	r2,r18,32
    352c:	1002cd26 	beq	r2,zero,4064 <___vfprintf_internal_r+0x185c>
    3530:	d9402d17 	ldw	r5,180(sp)
    3534:	d9002f17 	ldw	r4,188(sp)
    3538:	28800017 	ldw	r2,0(r5)
    353c:	2007d7fa 	srai	r3,r4,31
    3540:	29400104 	addi	r5,r5,4
    3544:	d9402d15 	stw	r5,180(sp)
    3548:	11000015 	stw	r4,0(r2)
    354c:	10c00115 	stw	r3,4(r2)
    3550:	003ce506 	br	28e8 <__alt_data_end+0xff0028e8>
    3554:	d8c02d17 	ldw	r3,180(sp)
    3558:	d9002d17 	ldw	r4,180(sp)
    355c:	d8002785 	stb	zero,158(sp)
    3560:	18800017 	ldw	r2,0(r3)
    3564:	21000104 	addi	r4,r4,4
    3568:	00c00044 	movi	r3,1
    356c:	d8c02a15 	stw	r3,168(sp)
    3570:	d8801405 	stb	r2,80(sp)
    3574:	d9002d15 	stw	r4,180(sp)
    3578:	d8c02e15 	stw	r3,184(sp)
    357c:	d8002915 	stw	zero,164(sp)
    3580:	d8003215 	stw	zero,200(sp)
    3584:	dc001404 	addi	r16,sp,80
    3588:	0039883a 	mov	fp,zero
    358c:	003e7206 	br	2f58 <__alt_data_end+0xff002f58>
    3590:	01000074 	movhi	r4,1
    3594:	21051304 	addi	r4,r4,5196
    3598:	0039883a 	mov	fp,zero
    359c:	d9003915 	stw	r4,228(sp)
    35a0:	04401e04 	movi	r17,120
    35a4:	003f8206 	br	33b0 <__alt_data_end+0xff0033b0>
    35a8:	18c03fcc 	andi	r3,r3,255
    35ac:	1805061e 	bne	r3,zero,49c8 <___vfprintf_internal_r+0x21c0>
    35b0:	883d9126 	beq	r17,zero,2bf8 <__alt_data_end+0xff002bf8>
    35b4:	00c00044 	movi	r3,1
    35b8:	d8c02a15 	stw	r3,168(sp)
    35bc:	dc401405 	stb	r17,80(sp)
    35c0:	d8002785 	stb	zero,158(sp)
    35c4:	003fec06 	br	3578 <__alt_data_end+0xff003578>
    35c8:	01400074 	movhi	r5,1
    35cc:	29451304 	addi	r5,r5,5196
    35d0:	d9403915 	stw	r5,228(sp)
    35d4:	d8c02d15 	stw	r3,180(sp)
    35d8:	1025883a 	mov	r18,r2
    35dc:	04401e04 	movi	r17,120
    35e0:	9d84b03a 	or	r2,r19,r22
    35e4:	1000fc1e 	bne	r2,zero,39d8 <___vfprintf_internal_r+0x11d0>
    35e8:	0039883a 	mov	fp,zero
    35ec:	00800084 	movi	r2,2
    35f0:	10803fcc 	andi	r2,r2,255
    35f4:	00c00044 	movi	r3,1
    35f8:	10c20f26 	beq	r2,r3,3e38 <___vfprintf_internal_r+0x1630>
    35fc:	00c00084 	movi	r3,2
    3600:	10fd6326 	beq	r2,r3,2b90 <__alt_data_end+0xff002b90>
    3604:	003e2d06 	br	2ebc <__alt_data_end+0xff002ebc>
    3608:	d8c02017 	ldw	r3,128(sp)
    360c:	003e9306 	br	305c <__alt_data_end+0xff00305c>
    3610:	00801944 	movi	r2,101
    3614:	14407e0e 	bge	r2,r17,3810 <___vfprintf_internal_r+0x1008>
    3618:	d9003617 	ldw	r4,216(sp)
    361c:	d9403817 	ldw	r5,224(sp)
    3620:	000d883a 	mov	r6,zero
    3624:	000f883a 	mov	r7,zero
    3628:	d8c03c15 	stw	r3,240(sp)
    362c:	da003d15 	stw	r8,244(sp)
    3630:	000d0680 	call	d068 <__eqdf2>
    3634:	d8c03c17 	ldw	r3,240(sp)
    3638:	da003d17 	ldw	r8,244(sp)
    363c:	1000f71e 	bne	r2,zero,3a1c <___vfprintf_internal_r+0x1214>
    3640:	d8801f17 	ldw	r2,124(sp)
    3644:	01000074 	movhi	r4,1
    3648:	21051a04 	addi	r4,r4,5224
    364c:	18c00044 	addi	r3,r3,1
    3650:	10800044 	addi	r2,r2,1
    3654:	41000015 	stw	r4,0(r8)
    3658:	01000044 	movi	r4,1
    365c:	41000115 	stw	r4,4(r8)
    3660:	d8c02015 	stw	r3,128(sp)
    3664:	d8801f15 	stw	r2,124(sp)
    3668:	010001c4 	movi	r4,7
    366c:	2082b816 	blt	r4,r2,4150 <___vfprintf_internal_r+0x1948>
    3670:	42000204 	addi	r8,r8,8
    3674:	d8802617 	ldw	r2,152(sp)
    3678:	d9403317 	ldw	r5,204(sp)
    367c:	11400216 	blt	r2,r5,3688 <___vfprintf_internal_r+0xe80>
    3680:	9080004c 	andi	r2,r18,1
    3684:	103ed526 	beq	r2,zero,31dc <__alt_data_end+0xff0031dc>
    3688:	d8803717 	ldw	r2,220(sp)
    368c:	d9003417 	ldw	r4,208(sp)
    3690:	d9403717 	ldw	r5,220(sp)
    3694:	1887883a 	add	r3,r3,r2
    3698:	d8801f17 	ldw	r2,124(sp)
    369c:	41000015 	stw	r4,0(r8)
    36a0:	41400115 	stw	r5,4(r8)
    36a4:	10800044 	addi	r2,r2,1
    36a8:	d8c02015 	stw	r3,128(sp)
    36ac:	d8801f15 	stw	r2,124(sp)
    36b0:	010001c4 	movi	r4,7
    36b4:	20832916 	blt	r4,r2,435c <___vfprintf_internal_r+0x1b54>
    36b8:	42000204 	addi	r8,r8,8
    36bc:	d8803317 	ldw	r2,204(sp)
    36c0:	143fffc4 	addi	r16,r2,-1
    36c4:	043ec50e 	bge	zero,r16,31dc <__alt_data_end+0xff0031dc>
    36c8:	04400404 	movi	r17,16
    36cc:	d8801f17 	ldw	r2,124(sp)
    36d0:	8c00880e 	bge	r17,r16,38f4 <___vfprintf_internal_r+0x10ec>
    36d4:	01400074 	movhi	r5,1
    36d8:	29451a84 	addi	r5,r5,5226
    36dc:	d9402b15 	stw	r5,172(sp)
    36e0:	058001c4 	movi	r22,7
    36e4:	dcc02c17 	ldw	r19,176(sp)
    36e8:	00000306 	br	36f8 <___vfprintf_internal_r+0xef0>
    36ec:	42000204 	addi	r8,r8,8
    36f0:	843ffc04 	addi	r16,r16,-16
    36f4:	8c00820e 	bge	r17,r16,3900 <___vfprintf_internal_r+0x10f8>
    36f8:	18c00404 	addi	r3,r3,16
    36fc:	10800044 	addi	r2,r2,1
    3700:	45000015 	stw	r20,0(r8)
    3704:	44400115 	stw	r17,4(r8)
    3708:	d8c02015 	stw	r3,128(sp)
    370c:	d8801f15 	stw	r2,124(sp)
    3710:	b0bff60e 	bge	r22,r2,36ec <__alt_data_end+0xff0036ec>
    3714:	d9801e04 	addi	r6,sp,120
    3718:	b80b883a 	mov	r5,r23
    371c:	9809883a 	mov	r4,r19
    3720:	00095a40 	call	95a4 <__sprint_r>
    3724:	103d3a1e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    3728:	d8c02017 	ldw	r3,128(sp)
    372c:	d8801f17 	ldw	r2,124(sp)
    3730:	da000404 	addi	r8,sp,16
    3734:	003fee06 	br	36f0 <__alt_data_end+0xff0036f0>
    3738:	d9403117 	ldw	r5,196(sp)
    373c:	d8802a17 	ldw	r2,168(sp)
    3740:	28adc83a 	sub	r22,r5,r2
    3744:	05be630e 	bge	zero,r22,30d4 <__alt_data_end+0xff0030d4>
    3748:	07000404 	movi	fp,16
    374c:	d8801f17 	ldw	r2,124(sp)
    3750:	e5838f0e 	bge	fp,r22,4590 <___vfprintf_internal_r+0x1d88>
    3754:	01400074 	movhi	r5,1
    3758:	29451a84 	addi	r5,r5,5226
    375c:	dc403015 	stw	r17,192(sp)
    3760:	d9402b15 	stw	r5,172(sp)
    3764:	b023883a 	mov	r17,r22
    3768:	04c001c4 	movi	r19,7
    376c:	a82d883a 	mov	r22,r21
    3770:	902b883a 	mov	r21,r18
    3774:	8025883a 	mov	r18,r16
    3778:	dc002c17 	ldw	r16,176(sp)
    377c:	00000306 	br	378c <___vfprintf_internal_r+0xf84>
    3780:	8c7ffc04 	addi	r17,r17,-16
    3784:	42000204 	addi	r8,r8,8
    3788:	e440110e 	bge	fp,r17,37d0 <___vfprintf_internal_r+0xfc8>
    378c:	18c00404 	addi	r3,r3,16
    3790:	10800044 	addi	r2,r2,1
    3794:	45000015 	stw	r20,0(r8)
    3798:	47000115 	stw	fp,4(r8)
    379c:	d8c02015 	stw	r3,128(sp)
    37a0:	d8801f15 	stw	r2,124(sp)
    37a4:	98bff60e 	bge	r19,r2,3780 <__alt_data_end+0xff003780>
    37a8:	d9801e04 	addi	r6,sp,120
    37ac:	b80b883a 	mov	r5,r23
    37b0:	8009883a 	mov	r4,r16
    37b4:	00095a40 	call	95a4 <__sprint_r>
    37b8:	103d151e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    37bc:	8c7ffc04 	addi	r17,r17,-16
    37c0:	d8c02017 	ldw	r3,128(sp)
    37c4:	d8801f17 	ldw	r2,124(sp)
    37c8:	da000404 	addi	r8,sp,16
    37cc:	e47fef16 	blt	fp,r17,378c <__alt_data_end+0xff00378c>
    37d0:	9021883a 	mov	r16,r18
    37d4:	a825883a 	mov	r18,r21
    37d8:	b02b883a 	mov	r21,r22
    37dc:	882d883a 	mov	r22,r17
    37e0:	dc403017 	ldw	r17,192(sp)
    37e4:	d9002b17 	ldw	r4,172(sp)
    37e8:	1d87883a 	add	r3,r3,r22
    37ec:	10800044 	addi	r2,r2,1
    37f0:	41000015 	stw	r4,0(r8)
    37f4:	45800115 	stw	r22,4(r8)
    37f8:	d8c02015 	stw	r3,128(sp)
    37fc:	d8801f15 	stw	r2,124(sp)
    3800:	010001c4 	movi	r4,7
    3804:	20818e16 	blt	r4,r2,3e40 <___vfprintf_internal_r+0x1638>
    3808:	42000204 	addi	r8,r8,8
    380c:	003e3106 	br	30d4 <__alt_data_end+0xff0030d4>
    3810:	d9403317 	ldw	r5,204(sp)
    3814:	00800044 	movi	r2,1
    3818:	18c00044 	addi	r3,r3,1
    381c:	1141530e 	bge	r2,r5,3d6c <___vfprintf_internal_r+0x1564>
    3820:	dc401f17 	ldw	r17,124(sp)
    3824:	00800044 	movi	r2,1
    3828:	40800115 	stw	r2,4(r8)
    382c:	8c400044 	addi	r17,r17,1
    3830:	44000015 	stw	r16,0(r8)
    3834:	d8c02015 	stw	r3,128(sp)
    3838:	dc401f15 	stw	r17,124(sp)
    383c:	008001c4 	movi	r2,7
    3840:	14416b16 	blt	r2,r17,3df0 <___vfprintf_internal_r+0x15e8>
    3844:	42000204 	addi	r8,r8,8
    3848:	d8803717 	ldw	r2,220(sp)
    384c:	d9003417 	ldw	r4,208(sp)
    3850:	8c400044 	addi	r17,r17,1
    3854:	10c7883a 	add	r3,r2,r3
    3858:	40800115 	stw	r2,4(r8)
    385c:	41000015 	stw	r4,0(r8)
    3860:	d8c02015 	stw	r3,128(sp)
    3864:	dc401f15 	stw	r17,124(sp)
    3868:	008001c4 	movi	r2,7
    386c:	14416916 	blt	r2,r17,3e14 <___vfprintf_internal_r+0x160c>
    3870:	45800204 	addi	r22,r8,8
    3874:	d9003617 	ldw	r4,216(sp)
    3878:	d9403817 	ldw	r5,224(sp)
    387c:	000d883a 	mov	r6,zero
    3880:	000f883a 	mov	r7,zero
    3884:	d8c03c15 	stw	r3,240(sp)
    3888:	000d0680 	call	d068 <__eqdf2>
    388c:	d8c03c17 	ldw	r3,240(sp)
    3890:	1000bc26 	beq	r2,zero,3b84 <___vfprintf_internal_r+0x137c>
    3894:	d9403317 	ldw	r5,204(sp)
    3898:	84000044 	addi	r16,r16,1
    389c:	8c400044 	addi	r17,r17,1
    38a0:	28bfffc4 	addi	r2,r5,-1
    38a4:	1887883a 	add	r3,r3,r2
    38a8:	b0800115 	stw	r2,4(r22)
    38ac:	b4000015 	stw	r16,0(r22)
    38b0:	d8c02015 	stw	r3,128(sp)
    38b4:	dc401f15 	stw	r17,124(sp)
    38b8:	008001c4 	movi	r2,7
    38bc:	14414316 	blt	r2,r17,3dcc <___vfprintf_internal_r+0x15c4>
    38c0:	b5800204 	addi	r22,r22,8
    38c4:	d9003a17 	ldw	r4,232(sp)
    38c8:	df0022c4 	addi	fp,sp,139
    38cc:	8c400044 	addi	r17,r17,1
    38d0:	20c7883a 	add	r3,r4,r3
    38d4:	b7000015 	stw	fp,0(r22)
    38d8:	b1000115 	stw	r4,4(r22)
    38dc:	d8c02015 	stw	r3,128(sp)
    38e0:	dc401f15 	stw	r17,124(sp)
    38e4:	008001c4 	movi	r2,7
    38e8:	14400e16 	blt	r2,r17,3924 <___vfprintf_internal_r+0x111c>
    38ec:	b2000204 	addi	r8,r22,8
    38f0:	003e3a06 	br	31dc <__alt_data_end+0xff0031dc>
    38f4:	01000074 	movhi	r4,1
    38f8:	21051a84 	addi	r4,r4,5226
    38fc:	d9002b15 	stw	r4,172(sp)
    3900:	d9002b17 	ldw	r4,172(sp)
    3904:	1c07883a 	add	r3,r3,r16
    3908:	44000115 	stw	r16,4(r8)
    390c:	41000015 	stw	r4,0(r8)
    3910:	10800044 	addi	r2,r2,1
    3914:	d8c02015 	stw	r3,128(sp)
    3918:	d8801f15 	stw	r2,124(sp)
    391c:	010001c4 	movi	r4,7
    3920:	20be2d0e 	bge	r4,r2,31d8 <__alt_data_end+0xff0031d8>
    3924:	d9002c17 	ldw	r4,176(sp)
    3928:	d9801e04 	addi	r6,sp,120
    392c:	b80b883a 	mov	r5,r23
    3930:	00095a40 	call	95a4 <__sprint_r>
    3934:	103cb61e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    3938:	d8c02017 	ldw	r3,128(sp)
    393c:	da000404 	addi	r8,sp,16
    3940:	003e2606 	br	31dc <__alt_data_end+0xff0031dc>
    3944:	d9002c17 	ldw	r4,176(sp)
    3948:	d9801e04 	addi	r6,sp,120
    394c:	b80b883a 	mov	r5,r23
    3950:	00095a40 	call	95a4 <__sprint_r>
    3954:	103e5d26 	beq	r2,zero,32cc <__alt_data_end+0xff0032cc>
    3958:	003cad06 	br	2c10 <__alt_data_end+0xff002c10>
    395c:	d9002c17 	ldw	r4,176(sp)
    3960:	d9801e04 	addi	r6,sp,120
    3964:	b80b883a 	mov	r5,r23
    3968:	00095a40 	call	95a4 <__sprint_r>
    396c:	103ca81e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    3970:	d8c02017 	ldw	r3,128(sp)
    3974:	da000404 	addi	r8,sp,16
    3978:	003e0b06 	br	31a8 <__alt_data_end+0xff0031a8>
    397c:	d9002c17 	ldw	r4,176(sp)
    3980:	d9801e04 	addi	r6,sp,120
    3984:	b80b883a 	mov	r5,r23
    3988:	00095a40 	call	95a4 <__sprint_r>
    398c:	103ca01e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    3990:	d8c02017 	ldw	r3,128(sp)
    3994:	da000404 	addi	r8,sp,16
    3998:	003dbd06 	br	3090 <__alt_data_end+0xff003090>
    399c:	d9002c17 	ldw	r4,176(sp)
    39a0:	d9801e04 	addi	r6,sp,120
    39a4:	b80b883a 	mov	r5,r23
    39a8:	00095a40 	call	95a4 <__sprint_r>
    39ac:	103c981e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    39b0:	d8c02017 	ldw	r3,128(sp)
    39b4:	da000404 	addi	r8,sp,16
    39b8:	003dc306 	br	30c8 <__alt_data_end+0xff0030c8>
    39bc:	d8802917 	ldw	r2,164(sp)
    39c0:	d8002785 	stb	zero,158(sp)
    39c4:	103f0616 	blt	r2,zero,35e0 <__alt_data_end+0xff0035e0>
    39c8:	00ffdfc4 	movi	r3,-129
    39cc:	9d84b03a 	or	r2,r19,r22
    39d0:	90e4703a 	and	r18,r18,r3
    39d4:	103c6b26 	beq	r2,zero,2b84 <__alt_data_end+0xff002b84>
    39d8:	0039883a 	mov	fp,zero
    39dc:	003e7406 	br	33b0 <__alt_data_end+0xff0033b0>
    39e0:	9080040c 	andi	r2,r18,16
    39e4:	1001b326 	beq	r2,zero,40b4 <___vfprintf_internal_r+0x18ac>
    39e8:	d9002d17 	ldw	r4,180(sp)
    39ec:	d9402917 	ldw	r5,164(sp)
    39f0:	d8002785 	stb	zero,158(sp)
    39f4:	20800104 	addi	r2,r4,4
    39f8:	24c00017 	ldw	r19,0(r4)
    39fc:	002d883a 	mov	r22,zero
    3a00:	2801b516 	blt	r5,zero,40d8 <___vfprintf_internal_r+0x18d0>
    3a04:	00ffdfc4 	movi	r3,-129
    3a08:	d8802d15 	stw	r2,180(sp)
    3a0c:	90e4703a 	and	r18,r18,r3
    3a10:	983d2726 	beq	r19,zero,2eb0 <__alt_data_end+0xff002eb0>
    3a14:	0039883a 	mov	fp,zero
    3a18:	003d2a06 	br	2ec4 <__alt_data_end+0xff002ec4>
    3a1c:	dc402617 	ldw	r17,152(sp)
    3a20:	0441d30e 	bge	zero,r17,4170 <___vfprintf_internal_r+0x1968>
    3a24:	dc403217 	ldw	r17,200(sp)
    3a28:	d8803317 	ldw	r2,204(sp)
    3a2c:	1440010e 	bge	r2,r17,3a34 <___vfprintf_internal_r+0x122c>
    3a30:	1023883a 	mov	r17,r2
    3a34:	04400a0e 	bge	zero,r17,3a60 <___vfprintf_internal_r+0x1258>
    3a38:	d8801f17 	ldw	r2,124(sp)
    3a3c:	1c47883a 	add	r3,r3,r17
    3a40:	44000015 	stw	r16,0(r8)
    3a44:	10800044 	addi	r2,r2,1
    3a48:	44400115 	stw	r17,4(r8)
    3a4c:	d8c02015 	stw	r3,128(sp)
    3a50:	d8801f15 	stw	r2,124(sp)
    3a54:	010001c4 	movi	r4,7
    3a58:	20826516 	blt	r4,r2,43f0 <___vfprintf_internal_r+0x1be8>
    3a5c:	42000204 	addi	r8,r8,8
    3a60:	88026116 	blt	r17,zero,43e8 <___vfprintf_internal_r+0x1be0>
    3a64:	d9003217 	ldw	r4,200(sp)
    3a68:	2463c83a 	sub	r17,r4,r17
    3a6c:	04407b0e 	bge	zero,r17,3c5c <___vfprintf_internal_r+0x1454>
    3a70:	05800404 	movi	r22,16
    3a74:	d8801f17 	ldw	r2,124(sp)
    3a78:	b4419d0e 	bge	r22,r17,40f0 <___vfprintf_internal_r+0x18e8>
    3a7c:	01000074 	movhi	r4,1
    3a80:	21051a84 	addi	r4,r4,5226
    3a84:	d9002b15 	stw	r4,172(sp)
    3a88:	070001c4 	movi	fp,7
    3a8c:	dcc02c17 	ldw	r19,176(sp)
    3a90:	00000306 	br	3aa0 <___vfprintf_internal_r+0x1298>
    3a94:	42000204 	addi	r8,r8,8
    3a98:	8c7ffc04 	addi	r17,r17,-16
    3a9c:	b441970e 	bge	r22,r17,40fc <___vfprintf_internal_r+0x18f4>
    3aa0:	18c00404 	addi	r3,r3,16
    3aa4:	10800044 	addi	r2,r2,1
    3aa8:	45000015 	stw	r20,0(r8)
    3aac:	45800115 	stw	r22,4(r8)
    3ab0:	d8c02015 	stw	r3,128(sp)
    3ab4:	d8801f15 	stw	r2,124(sp)
    3ab8:	e0bff60e 	bge	fp,r2,3a94 <__alt_data_end+0xff003a94>
    3abc:	d9801e04 	addi	r6,sp,120
    3ac0:	b80b883a 	mov	r5,r23
    3ac4:	9809883a 	mov	r4,r19
    3ac8:	00095a40 	call	95a4 <__sprint_r>
    3acc:	103c501e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    3ad0:	d8c02017 	ldw	r3,128(sp)
    3ad4:	d8801f17 	ldw	r2,124(sp)
    3ad8:	da000404 	addi	r8,sp,16
    3adc:	003fee06 	br	3a98 <__alt_data_end+0xff003a98>
    3ae0:	d9002c17 	ldw	r4,176(sp)
    3ae4:	d9801e04 	addi	r6,sp,120
    3ae8:	b80b883a 	mov	r5,r23
    3aec:	00095a40 	call	95a4 <__sprint_r>
    3af0:	103c471e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    3af4:	d8c02017 	ldw	r3,128(sp)
    3af8:	df002787 	ldb	fp,158(sp)
    3afc:	da000404 	addi	r8,sp,16
    3b00:	003d5606 	br	305c <__alt_data_end+0xff00305c>
    3b04:	9080040c 	andi	r2,r18,16
    3b08:	10016126 	beq	r2,zero,4090 <___vfprintf_internal_r+0x1888>
    3b0c:	d8802d17 	ldw	r2,180(sp)
    3b10:	14c00017 	ldw	r19,0(r2)
    3b14:	10800104 	addi	r2,r2,4
    3b18:	d8802d15 	stw	r2,180(sp)
    3b1c:	982dd7fa 	srai	r22,r19,31
    3b20:	b005883a 	mov	r2,r22
    3b24:	003c8206 	br	2d30 <__alt_data_end+0xff002d30>
    3b28:	9080040c 	andi	r2,r18,16
    3b2c:	10003526 	beq	r2,zero,3c04 <___vfprintf_internal_r+0x13fc>
    3b30:	d9402d17 	ldw	r5,180(sp)
    3b34:	d8c02917 	ldw	r3,164(sp)
    3b38:	d8002785 	stb	zero,158(sp)
    3b3c:	28800104 	addi	r2,r5,4
    3b40:	2cc00017 	ldw	r19,0(r5)
    3b44:	002d883a 	mov	r22,zero
    3b48:	18003716 	blt	r3,zero,3c28 <___vfprintf_internal_r+0x1420>
    3b4c:	00ffdfc4 	movi	r3,-129
    3b50:	d8802d15 	stw	r2,180(sp)
    3b54:	90e4703a 	and	r18,r18,r3
    3b58:	0039883a 	mov	fp,zero
    3b5c:	983df326 	beq	r19,zero,332c <__alt_data_end+0xff00332c>
    3b60:	00800244 	movi	r2,9
    3b64:	14fc7b36 	bltu	r2,r19,2d54 <__alt_data_end+0xff002d54>
    3b68:	d8c02817 	ldw	r3,160(sp)
    3b6c:	dc001dc4 	addi	r16,sp,119
    3b70:	9cc00c04 	addi	r19,r19,48
    3b74:	1c07c83a 	sub	r3,r3,r16
    3b78:	dcc01dc5 	stb	r19,119(sp)
    3b7c:	d8c02e15 	stw	r3,184(sp)
    3b80:	003ce806 	br	2f24 <__alt_data_end+0xff002f24>
    3b84:	d8803317 	ldw	r2,204(sp)
    3b88:	143fffc4 	addi	r16,r2,-1
    3b8c:	043f4d0e 	bge	zero,r16,38c4 <__alt_data_end+0xff0038c4>
    3b90:	07000404 	movi	fp,16
    3b94:	e400810e 	bge	fp,r16,3d9c <___vfprintf_internal_r+0x1594>
    3b98:	01400074 	movhi	r5,1
    3b9c:	29451a84 	addi	r5,r5,5226
    3ba0:	d9402b15 	stw	r5,172(sp)
    3ba4:	01c001c4 	movi	r7,7
    3ba8:	dcc02c17 	ldw	r19,176(sp)
    3bac:	00000306 	br	3bbc <___vfprintf_internal_r+0x13b4>
    3bb0:	b5800204 	addi	r22,r22,8
    3bb4:	843ffc04 	addi	r16,r16,-16
    3bb8:	e4007b0e 	bge	fp,r16,3da8 <___vfprintf_internal_r+0x15a0>
    3bbc:	18c00404 	addi	r3,r3,16
    3bc0:	8c400044 	addi	r17,r17,1
    3bc4:	b5000015 	stw	r20,0(r22)
    3bc8:	b7000115 	stw	fp,4(r22)
    3bcc:	d8c02015 	stw	r3,128(sp)
    3bd0:	dc401f15 	stw	r17,124(sp)
    3bd4:	3c7ff60e 	bge	r7,r17,3bb0 <__alt_data_end+0xff003bb0>
    3bd8:	d9801e04 	addi	r6,sp,120
    3bdc:	b80b883a 	mov	r5,r23
    3be0:	9809883a 	mov	r4,r19
    3be4:	d9c03c15 	stw	r7,240(sp)
    3be8:	00095a40 	call	95a4 <__sprint_r>
    3bec:	d9c03c17 	ldw	r7,240(sp)
    3bf0:	103c071e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    3bf4:	d8c02017 	ldw	r3,128(sp)
    3bf8:	dc401f17 	ldw	r17,124(sp)
    3bfc:	dd800404 	addi	r22,sp,16
    3c00:	003fec06 	br	3bb4 <__alt_data_end+0xff003bb4>
    3c04:	9080100c 	andi	r2,r18,64
    3c08:	d8002785 	stb	zero,158(sp)
    3c0c:	10010e26 	beq	r2,zero,4048 <___vfprintf_internal_r+0x1840>
    3c10:	d9002d17 	ldw	r4,180(sp)
    3c14:	d9402917 	ldw	r5,164(sp)
    3c18:	002d883a 	mov	r22,zero
    3c1c:	20800104 	addi	r2,r4,4
    3c20:	24c0000b 	ldhu	r19,0(r4)
    3c24:	283fc90e 	bge	r5,zero,3b4c <__alt_data_end+0xff003b4c>
    3c28:	d8802d15 	stw	r2,180(sp)
    3c2c:	0039883a 	mov	fp,zero
    3c30:	9d84b03a 	or	r2,r19,r22
    3c34:	103c461e 	bne	r2,zero,2d50 <__alt_data_end+0xff002d50>
    3c38:	00800044 	movi	r2,1
    3c3c:	003e6c06 	br	35f0 <__alt_data_end+0xff0035f0>
    3c40:	d9002c17 	ldw	r4,176(sp)
    3c44:	d9801e04 	addi	r6,sp,120
    3c48:	b80b883a 	mov	r5,r23
    3c4c:	00095a40 	call	95a4 <__sprint_r>
    3c50:	103bef1e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    3c54:	d8c02017 	ldw	r3,128(sp)
    3c58:	da000404 	addi	r8,sp,16
    3c5c:	d9003217 	ldw	r4,200(sp)
    3c60:	d8802617 	ldw	r2,152(sp)
    3c64:	d9403317 	ldw	r5,204(sp)
    3c68:	8123883a 	add	r17,r16,r4
    3c6c:	11400216 	blt	r2,r5,3c78 <___vfprintf_internal_r+0x1470>
    3c70:	9100004c 	andi	r4,r18,1
    3c74:	20000d26 	beq	r4,zero,3cac <___vfprintf_internal_r+0x14a4>
    3c78:	d9003717 	ldw	r4,220(sp)
    3c7c:	d9403417 	ldw	r5,208(sp)
    3c80:	1907883a 	add	r3,r3,r4
    3c84:	d9001f17 	ldw	r4,124(sp)
    3c88:	41400015 	stw	r5,0(r8)
    3c8c:	d9403717 	ldw	r5,220(sp)
    3c90:	21000044 	addi	r4,r4,1
    3c94:	d8c02015 	stw	r3,128(sp)
    3c98:	41400115 	stw	r5,4(r8)
    3c9c:	d9001f15 	stw	r4,124(sp)
    3ca0:	014001c4 	movi	r5,7
    3ca4:	2901e816 	blt	r5,r4,4448 <___vfprintf_internal_r+0x1c40>
    3ca8:	42000204 	addi	r8,r8,8
    3cac:	d9003317 	ldw	r4,204(sp)
    3cb0:	8121883a 	add	r16,r16,r4
    3cb4:	2085c83a 	sub	r2,r4,r2
    3cb8:	8461c83a 	sub	r16,r16,r17
    3cbc:	1400010e 	bge	r2,r16,3cc4 <___vfprintf_internal_r+0x14bc>
    3cc0:	1021883a 	mov	r16,r2
    3cc4:	04000a0e 	bge	zero,r16,3cf0 <___vfprintf_internal_r+0x14e8>
    3cc8:	d9001f17 	ldw	r4,124(sp)
    3ccc:	1c07883a 	add	r3,r3,r16
    3cd0:	44400015 	stw	r17,0(r8)
    3cd4:	21000044 	addi	r4,r4,1
    3cd8:	44000115 	stw	r16,4(r8)
    3cdc:	d8c02015 	stw	r3,128(sp)
    3ce0:	d9001f15 	stw	r4,124(sp)
    3ce4:	014001c4 	movi	r5,7
    3ce8:	2901fb16 	blt	r5,r4,44d8 <___vfprintf_internal_r+0x1cd0>
    3cec:	42000204 	addi	r8,r8,8
    3cf0:	8001f716 	blt	r16,zero,44d0 <___vfprintf_internal_r+0x1cc8>
    3cf4:	1421c83a 	sub	r16,r2,r16
    3cf8:	043d380e 	bge	zero,r16,31dc <__alt_data_end+0xff0031dc>
    3cfc:	04400404 	movi	r17,16
    3d00:	d8801f17 	ldw	r2,124(sp)
    3d04:	8c3efb0e 	bge	r17,r16,38f4 <__alt_data_end+0xff0038f4>
    3d08:	01400074 	movhi	r5,1
    3d0c:	29451a84 	addi	r5,r5,5226
    3d10:	d9402b15 	stw	r5,172(sp)
    3d14:	058001c4 	movi	r22,7
    3d18:	dcc02c17 	ldw	r19,176(sp)
    3d1c:	00000306 	br	3d2c <___vfprintf_internal_r+0x1524>
    3d20:	42000204 	addi	r8,r8,8
    3d24:	843ffc04 	addi	r16,r16,-16
    3d28:	8c3ef50e 	bge	r17,r16,3900 <__alt_data_end+0xff003900>
    3d2c:	18c00404 	addi	r3,r3,16
    3d30:	10800044 	addi	r2,r2,1
    3d34:	45000015 	stw	r20,0(r8)
    3d38:	44400115 	stw	r17,4(r8)
    3d3c:	d8c02015 	stw	r3,128(sp)
    3d40:	d8801f15 	stw	r2,124(sp)
    3d44:	b0bff60e 	bge	r22,r2,3d20 <__alt_data_end+0xff003d20>
    3d48:	d9801e04 	addi	r6,sp,120
    3d4c:	b80b883a 	mov	r5,r23
    3d50:	9809883a 	mov	r4,r19
    3d54:	00095a40 	call	95a4 <__sprint_r>
    3d58:	103bad1e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    3d5c:	d8c02017 	ldw	r3,128(sp)
    3d60:	d8801f17 	ldw	r2,124(sp)
    3d64:	da000404 	addi	r8,sp,16
    3d68:	003fee06 	br	3d24 <__alt_data_end+0xff003d24>
    3d6c:	9088703a 	and	r4,r18,r2
    3d70:	203eab1e 	bne	r4,zero,3820 <__alt_data_end+0xff003820>
    3d74:	dc401f17 	ldw	r17,124(sp)
    3d78:	40800115 	stw	r2,4(r8)
    3d7c:	44000015 	stw	r16,0(r8)
    3d80:	8c400044 	addi	r17,r17,1
    3d84:	d8c02015 	stw	r3,128(sp)
    3d88:	dc401f15 	stw	r17,124(sp)
    3d8c:	008001c4 	movi	r2,7
    3d90:	14400e16 	blt	r2,r17,3dcc <___vfprintf_internal_r+0x15c4>
    3d94:	45800204 	addi	r22,r8,8
    3d98:	003eca06 	br	38c4 <__alt_data_end+0xff0038c4>
    3d9c:	01000074 	movhi	r4,1
    3da0:	21051a84 	addi	r4,r4,5226
    3da4:	d9002b15 	stw	r4,172(sp)
    3da8:	d8802b17 	ldw	r2,172(sp)
    3dac:	1c07883a 	add	r3,r3,r16
    3db0:	8c400044 	addi	r17,r17,1
    3db4:	b0800015 	stw	r2,0(r22)
    3db8:	b4000115 	stw	r16,4(r22)
    3dbc:	d8c02015 	stw	r3,128(sp)
    3dc0:	dc401f15 	stw	r17,124(sp)
    3dc4:	008001c4 	movi	r2,7
    3dc8:	147ebd0e 	bge	r2,r17,38c0 <__alt_data_end+0xff0038c0>
    3dcc:	d9002c17 	ldw	r4,176(sp)
    3dd0:	d9801e04 	addi	r6,sp,120
    3dd4:	b80b883a 	mov	r5,r23
    3dd8:	00095a40 	call	95a4 <__sprint_r>
    3ddc:	103b8c1e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    3de0:	d8c02017 	ldw	r3,128(sp)
    3de4:	dc401f17 	ldw	r17,124(sp)
    3de8:	dd800404 	addi	r22,sp,16
    3dec:	003eb506 	br	38c4 <__alt_data_end+0xff0038c4>
    3df0:	d9002c17 	ldw	r4,176(sp)
    3df4:	d9801e04 	addi	r6,sp,120
    3df8:	b80b883a 	mov	r5,r23
    3dfc:	00095a40 	call	95a4 <__sprint_r>
    3e00:	103b831e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    3e04:	d8c02017 	ldw	r3,128(sp)
    3e08:	dc401f17 	ldw	r17,124(sp)
    3e0c:	da000404 	addi	r8,sp,16
    3e10:	003e8d06 	br	3848 <__alt_data_end+0xff003848>
    3e14:	d9002c17 	ldw	r4,176(sp)
    3e18:	d9801e04 	addi	r6,sp,120
    3e1c:	b80b883a 	mov	r5,r23
    3e20:	00095a40 	call	95a4 <__sprint_r>
    3e24:	103b7a1e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    3e28:	d8c02017 	ldw	r3,128(sp)
    3e2c:	dc401f17 	ldw	r17,124(sp)
    3e30:	dd800404 	addi	r22,sp,16
    3e34:	003e8f06 	br	3874 <__alt_data_end+0xff003874>
    3e38:	0027883a 	mov	r19,zero
    3e3c:	003f4a06 	br	3b68 <__alt_data_end+0xff003b68>
    3e40:	d9002c17 	ldw	r4,176(sp)
    3e44:	d9801e04 	addi	r6,sp,120
    3e48:	b80b883a 	mov	r5,r23
    3e4c:	00095a40 	call	95a4 <__sprint_r>
    3e50:	103b6f1e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    3e54:	d8c02017 	ldw	r3,128(sp)
    3e58:	da000404 	addi	r8,sp,16
    3e5c:	003c9d06 	br	30d4 <__alt_data_end+0xff0030d4>
    3e60:	04e7c83a 	sub	r19,zero,r19
    3e64:	9804c03a 	cmpne	r2,r19,zero
    3e68:	05adc83a 	sub	r22,zero,r22
    3e6c:	b0adc83a 	sub	r22,r22,r2
    3e70:	d8802917 	ldw	r2,164(sp)
    3e74:	07000b44 	movi	fp,45
    3e78:	df002785 	stb	fp,158(sp)
    3e7c:	10017b16 	blt	r2,zero,446c <___vfprintf_internal_r+0x1c64>
    3e80:	00bfdfc4 	movi	r2,-129
    3e84:	90a4703a 	and	r18,r18,r2
    3e88:	003bb106 	br	2d50 <__alt_data_end+0xff002d50>
    3e8c:	d9003617 	ldw	r4,216(sp)
    3e90:	d9403817 	ldw	r5,224(sp)
    3e94:	da003d15 	stw	r8,244(sp)
    3e98:	000921c0 	call	921c <__fpclassifyd>
    3e9c:	da003d17 	ldw	r8,244(sp)
    3ea0:	1000f026 	beq	r2,zero,4264 <___vfprintf_internal_r+0x1a5c>
    3ea4:	d9002917 	ldw	r4,164(sp)
    3ea8:	05bff7c4 	movi	r22,-33
    3eac:	00bfffc4 	movi	r2,-1
    3eb0:	8dac703a 	and	r22,r17,r22
    3eb4:	20820026 	beq	r4,r2,46b8 <___vfprintf_internal_r+0x1eb0>
    3eb8:	008011c4 	movi	r2,71
    3ebc:	b081f726 	beq	r22,r2,469c <___vfprintf_internal_r+0x1e94>
    3ec0:	d9003817 	ldw	r4,224(sp)
    3ec4:	90c04014 	ori	r3,r18,256
    3ec8:	d8c02b15 	stw	r3,172(sp)
    3ecc:	20021516 	blt	r4,zero,4724 <___vfprintf_internal_r+0x1f1c>
    3ed0:	dcc03817 	ldw	r19,224(sp)
    3ed4:	d8002a05 	stb	zero,168(sp)
    3ed8:	00801984 	movi	r2,102
    3edc:	8881f926 	beq	r17,r2,46c4 <___vfprintf_internal_r+0x1ebc>
    3ee0:	00801184 	movi	r2,70
    3ee4:	88821c26 	beq	r17,r2,4758 <___vfprintf_internal_r+0x1f50>
    3ee8:	00801144 	movi	r2,69
    3eec:	b081ef26 	beq	r22,r2,46ac <___vfprintf_internal_r+0x1ea4>
    3ef0:	d8c02917 	ldw	r3,164(sp)
    3ef4:	d8802104 	addi	r2,sp,132
    3ef8:	d8800315 	stw	r2,12(sp)
    3efc:	d9403617 	ldw	r5,216(sp)
    3f00:	d8802504 	addi	r2,sp,148
    3f04:	d9002c17 	ldw	r4,176(sp)
    3f08:	d8800215 	stw	r2,8(sp)
    3f0c:	d8802604 	addi	r2,sp,152
    3f10:	d8c00015 	stw	r3,0(sp)
    3f14:	d8800115 	stw	r2,4(sp)
    3f18:	01c00084 	movi	r7,2
    3f1c:	980d883a 	mov	r6,r19
    3f20:	d8c03c15 	stw	r3,240(sp)
    3f24:	da003d15 	stw	r8,244(sp)
    3f28:	0004e2c0 	call	4e2c <_dtoa_r>
    3f2c:	1021883a 	mov	r16,r2
    3f30:	008019c4 	movi	r2,103
    3f34:	d8c03c17 	ldw	r3,240(sp)
    3f38:	da003d17 	ldw	r8,244(sp)
    3f3c:	88817126 	beq	r17,r2,4504 <___vfprintf_internal_r+0x1cfc>
    3f40:	008011c4 	movi	r2,71
    3f44:	88829226 	beq	r17,r2,4990 <___vfprintf_internal_r+0x2188>
    3f48:	80f9883a 	add	fp,r16,r3
    3f4c:	d9003617 	ldw	r4,216(sp)
    3f50:	000d883a 	mov	r6,zero
    3f54:	000f883a 	mov	r7,zero
    3f58:	980b883a 	mov	r5,r19
    3f5c:	da003d15 	stw	r8,244(sp)
    3f60:	000d0680 	call	d068 <__eqdf2>
    3f64:	da003d17 	ldw	r8,244(sp)
    3f68:	10018d26 	beq	r2,zero,45a0 <___vfprintf_internal_r+0x1d98>
    3f6c:	d8802117 	ldw	r2,132(sp)
    3f70:	1700062e 	bgeu	r2,fp,3f8c <___vfprintf_internal_r+0x1784>
    3f74:	01000c04 	movi	r4,48
    3f78:	10c00044 	addi	r3,r2,1
    3f7c:	d8c02115 	stw	r3,132(sp)
    3f80:	11000005 	stb	r4,0(r2)
    3f84:	d8802117 	ldw	r2,132(sp)
    3f88:	173ffb36 	bltu	r2,fp,3f78 <__alt_data_end+0xff003f78>
    3f8c:	1405c83a 	sub	r2,r2,r16
    3f90:	d8803315 	stw	r2,204(sp)
    3f94:	008011c4 	movi	r2,71
    3f98:	b0817626 	beq	r22,r2,4574 <___vfprintf_internal_r+0x1d6c>
    3f9c:	00801944 	movi	r2,101
    3fa0:	1442810e 	bge	r2,r17,49a8 <___vfprintf_internal_r+0x21a0>
    3fa4:	d8c02617 	ldw	r3,152(sp)
    3fa8:	00801984 	movi	r2,102
    3fac:	d8c03215 	stw	r3,200(sp)
    3fb0:	8881fe26 	beq	r17,r2,47ac <___vfprintf_internal_r+0x1fa4>
    3fb4:	d8c03217 	ldw	r3,200(sp)
    3fb8:	d9003317 	ldw	r4,204(sp)
    3fbc:	1901dd16 	blt	r3,r4,4734 <___vfprintf_internal_r+0x1f2c>
    3fc0:	9480004c 	andi	r18,r18,1
    3fc4:	90022b1e 	bne	r18,zero,4874 <___vfprintf_internal_r+0x206c>
    3fc8:	1805883a 	mov	r2,r3
    3fcc:	18028016 	blt	r3,zero,49d0 <___vfprintf_internal_r+0x21c8>
    3fd0:	d8c03217 	ldw	r3,200(sp)
    3fd4:	044019c4 	movi	r17,103
    3fd8:	d8c02e15 	stw	r3,184(sp)
    3fdc:	df002a07 	ldb	fp,168(sp)
    3fe0:	e001531e 	bne	fp,zero,4530 <___vfprintf_internal_r+0x1d28>
    3fe4:	df002783 	ldbu	fp,158(sp)
    3fe8:	d8802a15 	stw	r2,168(sp)
    3fec:	dc802b17 	ldw	r18,172(sp)
    3ff0:	d8002915 	stw	zero,164(sp)
    3ff4:	003bd106 	br	2f3c <__alt_data_end+0xff002f3c>
    3ff8:	d8802d17 	ldw	r2,180(sp)
    3ffc:	d8c02d17 	ldw	r3,180(sp)
    4000:	d9002d17 	ldw	r4,180(sp)
    4004:	10800017 	ldw	r2,0(r2)
    4008:	18c00117 	ldw	r3,4(r3)
    400c:	21000204 	addi	r4,r4,8
    4010:	d8803615 	stw	r2,216(sp)
    4014:	d8c03815 	stw	r3,224(sp)
    4018:	d9002d15 	stw	r4,180(sp)
    401c:	003b7506 	br	2df4 <__alt_data_end+0xff002df4>
    4020:	ac400007 	ldb	r17,0(r21)
    4024:	003a5906 	br	298c <__alt_data_end+0xff00298c>
    4028:	9080100c 	andi	r2,r18,64
    402c:	1000a826 	beq	r2,zero,42d0 <___vfprintf_internal_r+0x1ac8>
    4030:	d9002d17 	ldw	r4,180(sp)
    4034:	002d883a 	mov	r22,zero
    4038:	24c0000b 	ldhu	r19,0(r4)
    403c:	21000104 	addi	r4,r4,4
    4040:	d9002d15 	stw	r4,180(sp)
    4044:	003ccb06 	br	3374 <__alt_data_end+0xff003374>
    4048:	d8c02d17 	ldw	r3,180(sp)
    404c:	d9002917 	ldw	r4,164(sp)
    4050:	002d883a 	mov	r22,zero
    4054:	18800104 	addi	r2,r3,4
    4058:	1cc00017 	ldw	r19,0(r3)
    405c:	203ebb0e 	bge	r4,zero,3b4c <__alt_data_end+0xff003b4c>
    4060:	003ef106 	br	3c28 <__alt_data_end+0xff003c28>
    4064:	9080040c 	andi	r2,r18,16
    4068:	1000921e 	bne	r2,zero,42b4 <___vfprintf_internal_r+0x1aac>
    406c:	9480100c 	andi	r18,r18,64
    4070:	90013926 	beq	r18,zero,4558 <___vfprintf_internal_r+0x1d50>
    4074:	d9002d17 	ldw	r4,180(sp)
    4078:	d9402f17 	ldw	r5,188(sp)
    407c:	20800017 	ldw	r2,0(r4)
    4080:	21000104 	addi	r4,r4,4
    4084:	d9002d15 	stw	r4,180(sp)
    4088:	1140000d 	sth	r5,0(r2)
    408c:	003a1606 	br	28e8 <__alt_data_end+0xff0028e8>
    4090:	9080100c 	andi	r2,r18,64
    4094:	10008026 	beq	r2,zero,4298 <___vfprintf_internal_r+0x1a90>
    4098:	d8c02d17 	ldw	r3,180(sp)
    409c:	1cc0000f 	ldh	r19,0(r3)
    40a0:	18c00104 	addi	r3,r3,4
    40a4:	d8c02d15 	stw	r3,180(sp)
    40a8:	982dd7fa 	srai	r22,r19,31
    40ac:	b005883a 	mov	r2,r22
    40b0:	003b1f06 	br	2d30 <__alt_data_end+0xff002d30>
    40b4:	9080100c 	andi	r2,r18,64
    40b8:	d8002785 	stb	zero,158(sp)
    40bc:	10008a1e 	bne	r2,zero,42e8 <___vfprintf_internal_r+0x1ae0>
    40c0:	d9402d17 	ldw	r5,180(sp)
    40c4:	d8c02917 	ldw	r3,164(sp)
    40c8:	002d883a 	mov	r22,zero
    40cc:	28800104 	addi	r2,r5,4
    40d0:	2cc00017 	ldw	r19,0(r5)
    40d4:	183e4b0e 	bge	r3,zero,3a04 <__alt_data_end+0xff003a04>
    40d8:	9d86b03a 	or	r3,r19,r22
    40dc:	d8802d15 	stw	r2,180(sp)
    40e0:	183e4c1e 	bne	r3,zero,3a14 <__alt_data_end+0xff003a14>
    40e4:	0039883a 	mov	fp,zero
    40e8:	0005883a 	mov	r2,zero
    40ec:	003d4006 	br	35f0 <__alt_data_end+0xff0035f0>
    40f0:	01400074 	movhi	r5,1
    40f4:	29451a84 	addi	r5,r5,5226
    40f8:	d9402b15 	stw	r5,172(sp)
    40fc:	d9402b17 	ldw	r5,172(sp)
    4100:	1c47883a 	add	r3,r3,r17
    4104:	10800044 	addi	r2,r2,1
    4108:	41400015 	stw	r5,0(r8)
    410c:	44400115 	stw	r17,4(r8)
    4110:	d8c02015 	stw	r3,128(sp)
    4114:	d8801f15 	stw	r2,124(sp)
    4118:	010001c4 	movi	r4,7
    411c:	20bec816 	blt	r4,r2,3c40 <__alt_data_end+0xff003c40>
    4120:	42000204 	addi	r8,r8,8
    4124:	003ecd06 	br	3c5c <__alt_data_end+0xff003c5c>
    4128:	d9002917 	ldw	r4,164(sp)
    412c:	d8002785 	stb	zero,158(sp)
    4130:	203d2d16 	blt	r4,zero,35e8 <__alt_data_end+0xff0035e8>
    4134:	00bfdfc4 	movi	r2,-129
    4138:	90a4703a 	and	r18,r18,r2
    413c:	003a9106 	br	2b84 <__alt_data_end+0xff002b84>
    4140:	01000074 	movhi	r4,1
    4144:	21051a84 	addi	r4,r4,5226
    4148:	d9002b15 	stw	r4,172(sp)
    414c:	003c0c06 	br	3180 <__alt_data_end+0xff003180>
    4150:	d9002c17 	ldw	r4,176(sp)
    4154:	d9801e04 	addi	r6,sp,120
    4158:	b80b883a 	mov	r5,r23
    415c:	00095a40 	call	95a4 <__sprint_r>
    4160:	103aab1e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    4164:	d8c02017 	ldw	r3,128(sp)
    4168:	da000404 	addi	r8,sp,16
    416c:	003d4106 	br	3674 <__alt_data_end+0xff003674>
    4170:	d8801f17 	ldw	r2,124(sp)
    4174:	01400074 	movhi	r5,1
    4178:	01000044 	movi	r4,1
    417c:	18c00044 	addi	r3,r3,1
    4180:	10800044 	addi	r2,r2,1
    4184:	29451a04 	addi	r5,r5,5224
    4188:	41000115 	stw	r4,4(r8)
    418c:	41400015 	stw	r5,0(r8)
    4190:	d8c02015 	stw	r3,128(sp)
    4194:	d8801f15 	stw	r2,124(sp)
    4198:	010001c4 	movi	r4,7
    419c:	20805c16 	blt	r4,r2,4310 <___vfprintf_internal_r+0x1b08>
    41a0:	42000204 	addi	r8,r8,8
    41a4:	8800041e 	bne	r17,zero,41b8 <___vfprintf_internal_r+0x19b0>
    41a8:	d8803317 	ldw	r2,204(sp)
    41ac:	1000021e 	bne	r2,zero,41b8 <___vfprintf_internal_r+0x19b0>
    41b0:	9080004c 	andi	r2,r18,1
    41b4:	103c0926 	beq	r2,zero,31dc <__alt_data_end+0xff0031dc>
    41b8:	d9003717 	ldw	r4,220(sp)
    41bc:	d8801f17 	ldw	r2,124(sp)
    41c0:	d9403417 	ldw	r5,208(sp)
    41c4:	20c7883a 	add	r3,r4,r3
    41c8:	10800044 	addi	r2,r2,1
    41cc:	41000115 	stw	r4,4(r8)
    41d0:	41400015 	stw	r5,0(r8)
    41d4:	d8c02015 	stw	r3,128(sp)
    41d8:	d8801f15 	stw	r2,124(sp)
    41dc:	010001c4 	movi	r4,7
    41e0:	20812116 	blt	r4,r2,4668 <___vfprintf_internal_r+0x1e60>
    41e4:	42000204 	addi	r8,r8,8
    41e8:	0463c83a 	sub	r17,zero,r17
    41ec:	0440730e 	bge	zero,r17,43bc <___vfprintf_internal_r+0x1bb4>
    41f0:	05800404 	movi	r22,16
    41f4:	b440860e 	bge	r22,r17,4410 <___vfprintf_internal_r+0x1c08>
    41f8:	01400074 	movhi	r5,1
    41fc:	29451a84 	addi	r5,r5,5226
    4200:	d9402b15 	stw	r5,172(sp)
    4204:	070001c4 	movi	fp,7
    4208:	dcc02c17 	ldw	r19,176(sp)
    420c:	00000306 	br	421c <___vfprintf_internal_r+0x1a14>
    4210:	42000204 	addi	r8,r8,8
    4214:	8c7ffc04 	addi	r17,r17,-16
    4218:	b440800e 	bge	r22,r17,441c <___vfprintf_internal_r+0x1c14>
    421c:	18c00404 	addi	r3,r3,16
    4220:	10800044 	addi	r2,r2,1
    4224:	45000015 	stw	r20,0(r8)
    4228:	45800115 	stw	r22,4(r8)
    422c:	d8c02015 	stw	r3,128(sp)
    4230:	d8801f15 	stw	r2,124(sp)
    4234:	e0bff60e 	bge	fp,r2,4210 <__alt_data_end+0xff004210>
    4238:	d9801e04 	addi	r6,sp,120
    423c:	b80b883a 	mov	r5,r23
    4240:	9809883a 	mov	r4,r19
    4244:	00095a40 	call	95a4 <__sprint_r>
    4248:	103a711e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    424c:	d8c02017 	ldw	r3,128(sp)
    4250:	d8801f17 	ldw	r2,124(sp)
    4254:	da000404 	addi	r8,sp,16
    4258:	003fee06 	br	4214 <__alt_data_end+0xff004214>
    425c:	00bfffc4 	movi	r2,-1
    4260:	003a6f06 	br	2c20 <__alt_data_end+0xff002c20>
    4264:	008011c4 	movi	r2,71
    4268:	1440b816 	blt	r2,r17,454c <___vfprintf_internal_r+0x1d44>
    426c:	04000074 	movhi	r16,1
    4270:	84050c04 	addi	r16,r16,5168
    4274:	00c000c4 	movi	r3,3
    4278:	00bfdfc4 	movi	r2,-129
    427c:	d8c02a15 	stw	r3,168(sp)
    4280:	90a4703a 	and	r18,r18,r2
    4284:	df002783 	ldbu	fp,158(sp)
    4288:	d8c02e15 	stw	r3,184(sp)
    428c:	d8002915 	stw	zero,164(sp)
    4290:	d8003215 	stw	zero,200(sp)
    4294:	003b2906 	br	2f3c <__alt_data_end+0xff002f3c>
    4298:	d9002d17 	ldw	r4,180(sp)
    429c:	24c00017 	ldw	r19,0(r4)
    42a0:	21000104 	addi	r4,r4,4
    42a4:	d9002d15 	stw	r4,180(sp)
    42a8:	982dd7fa 	srai	r22,r19,31
    42ac:	b005883a 	mov	r2,r22
    42b0:	003a9f06 	br	2d30 <__alt_data_end+0xff002d30>
    42b4:	d9402d17 	ldw	r5,180(sp)
    42b8:	d8c02f17 	ldw	r3,188(sp)
    42bc:	28800017 	ldw	r2,0(r5)
    42c0:	29400104 	addi	r5,r5,4
    42c4:	d9402d15 	stw	r5,180(sp)
    42c8:	10c00015 	stw	r3,0(r2)
    42cc:	00398606 	br	28e8 <__alt_data_end+0xff0028e8>
    42d0:	d9402d17 	ldw	r5,180(sp)
    42d4:	002d883a 	mov	r22,zero
    42d8:	2cc00017 	ldw	r19,0(r5)
    42dc:	29400104 	addi	r5,r5,4
    42e0:	d9402d15 	stw	r5,180(sp)
    42e4:	003c2306 	br	3374 <__alt_data_end+0xff003374>
    42e8:	d8c02d17 	ldw	r3,180(sp)
    42ec:	d9002917 	ldw	r4,164(sp)
    42f0:	002d883a 	mov	r22,zero
    42f4:	18800104 	addi	r2,r3,4
    42f8:	1cc0000b 	ldhu	r19,0(r3)
    42fc:	203dc10e 	bge	r4,zero,3a04 <__alt_data_end+0xff003a04>
    4300:	003f7506 	br	40d8 <__alt_data_end+0xff0040d8>
    4304:	04000074 	movhi	r16,1
    4308:	84050a04 	addi	r16,r16,5160
    430c:	003acc06 	br	2e40 <__alt_data_end+0xff002e40>
    4310:	d9002c17 	ldw	r4,176(sp)
    4314:	d9801e04 	addi	r6,sp,120
    4318:	b80b883a 	mov	r5,r23
    431c:	00095a40 	call	95a4 <__sprint_r>
    4320:	103a3b1e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    4324:	dc402617 	ldw	r17,152(sp)
    4328:	d8c02017 	ldw	r3,128(sp)
    432c:	da000404 	addi	r8,sp,16
    4330:	003f9c06 	br	41a4 <__alt_data_end+0xff0041a4>
    4334:	ac400043 	ldbu	r17,1(r21)
    4338:	94800814 	ori	r18,r18,32
    433c:	ad400044 	addi	r21,r21,1
    4340:	8c403fcc 	andi	r17,r17,255
    4344:	8c40201c 	xori	r17,r17,128
    4348:	8c7fe004 	addi	r17,r17,-128
    434c:	00398f06 	br	298c <__alt_data_end+0xff00298c>
    4350:	d8c02d15 	stw	r3,180(sp)
    4354:	0039883a 	mov	fp,zero
    4358:	003e3506 	br	3c30 <__alt_data_end+0xff003c30>
    435c:	d9002c17 	ldw	r4,176(sp)
    4360:	d9801e04 	addi	r6,sp,120
    4364:	b80b883a 	mov	r5,r23
    4368:	00095a40 	call	95a4 <__sprint_r>
    436c:	103a281e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    4370:	d8c02017 	ldw	r3,128(sp)
    4374:	da000404 	addi	r8,sp,16
    4378:	003cd006 	br	36bc <__alt_data_end+0xff0036bc>
    437c:	8009883a 	mov	r4,r16
    4380:	da003d15 	stw	r8,244(sp)
    4384:	00027700 	call	2770 <strlen>
    4388:	d8802e15 	stw	r2,184(sp)
    438c:	da003d17 	ldw	r8,244(sp)
    4390:	103c340e 	bge	r2,zero,3464 <__alt_data_end+0xff003464>
    4394:	0005883a 	mov	r2,zero
    4398:	003c3206 	br	3464 <__alt_data_end+0xff003464>
    439c:	d9002c17 	ldw	r4,176(sp)
    43a0:	d9801e04 	addi	r6,sp,120
    43a4:	b80b883a 	mov	r5,r23
    43a8:	00095a40 	call	95a4 <__sprint_r>
    43ac:	103a181e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    43b0:	d8c02017 	ldw	r3,128(sp)
    43b4:	d8801f17 	ldw	r2,124(sp)
    43b8:	da000404 	addi	r8,sp,16
    43bc:	d9403317 	ldw	r5,204(sp)
    43c0:	10800044 	addi	r2,r2,1
    43c4:	44000015 	stw	r16,0(r8)
    43c8:	28c7883a 	add	r3,r5,r3
    43cc:	003b7d06 	br	31c4 <__alt_data_end+0xff0031c4>
    43d0:	01000074 	movhi	r4,1
    43d4:	21051e84 	addi	r4,r4,5242
    43d8:	d9003515 	stw	r4,212(sp)
    43dc:	003b1406 	br	3030 <__alt_data_end+0xff003030>
    43e0:	013fffc4 	movi	r4,-1
    43e4:	003a3506 	br	2cbc <__alt_data_end+0xff002cbc>
    43e8:	0023883a 	mov	r17,zero
    43ec:	003d9d06 	br	3a64 <__alt_data_end+0xff003a64>
    43f0:	d9002c17 	ldw	r4,176(sp)
    43f4:	d9801e04 	addi	r6,sp,120
    43f8:	b80b883a 	mov	r5,r23
    43fc:	00095a40 	call	95a4 <__sprint_r>
    4400:	103a031e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    4404:	d8c02017 	ldw	r3,128(sp)
    4408:	da000404 	addi	r8,sp,16
    440c:	003d9406 	br	3a60 <__alt_data_end+0xff003a60>
    4410:	01000074 	movhi	r4,1
    4414:	21051a84 	addi	r4,r4,5226
    4418:	d9002b15 	stw	r4,172(sp)
    441c:	d9002b17 	ldw	r4,172(sp)
    4420:	1c47883a 	add	r3,r3,r17
    4424:	10800044 	addi	r2,r2,1
    4428:	41000015 	stw	r4,0(r8)
    442c:	44400115 	stw	r17,4(r8)
    4430:	d8c02015 	stw	r3,128(sp)
    4434:	d8801f15 	stw	r2,124(sp)
    4438:	010001c4 	movi	r4,7
    443c:	20bfd716 	blt	r4,r2,439c <__alt_data_end+0xff00439c>
    4440:	42000204 	addi	r8,r8,8
    4444:	003fdd06 	br	43bc <__alt_data_end+0xff0043bc>
    4448:	d9002c17 	ldw	r4,176(sp)
    444c:	d9801e04 	addi	r6,sp,120
    4450:	b80b883a 	mov	r5,r23
    4454:	00095a40 	call	95a4 <__sprint_r>
    4458:	1039ed1e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    445c:	d8802617 	ldw	r2,152(sp)
    4460:	d8c02017 	ldw	r3,128(sp)
    4464:	da000404 	addi	r8,sp,16
    4468:	003e1006 	br	3cac <__alt_data_end+0xff003cac>
    446c:	00800044 	movi	r2,1
    4470:	10803fcc 	andi	r2,r2,255
    4474:	00c00044 	movi	r3,1
    4478:	10fa3526 	beq	r2,r3,2d50 <__alt_data_end+0xff002d50>
    447c:	00c00084 	movi	r3,2
    4480:	10fbcb26 	beq	r2,r3,33b0 <__alt_data_end+0xff0033b0>
    4484:	003a8f06 	br	2ec4 <__alt_data_end+0xff002ec4>
    4488:	01000074 	movhi	r4,1
    448c:	21051e84 	addi	r4,r4,5242
    4490:	d9003515 	stw	r4,212(sp)
    4494:	003b7606 	br	3270 <__alt_data_end+0xff003270>
    4498:	d8802917 	ldw	r2,164(sp)
    449c:	00c00184 	movi	r3,6
    44a0:	1880012e 	bgeu	r3,r2,44a8 <___vfprintf_internal_r+0x1ca0>
    44a4:	1805883a 	mov	r2,r3
    44a8:	d8802e15 	stw	r2,184(sp)
    44ac:	1000ef16 	blt	r2,zero,486c <___vfprintf_internal_r+0x2064>
    44b0:	04000074 	movhi	r16,1
    44b4:	d8802a15 	stw	r2,168(sp)
    44b8:	dcc02d15 	stw	r19,180(sp)
    44bc:	d8002915 	stw	zero,164(sp)
    44c0:	d8003215 	stw	zero,200(sp)
    44c4:	84051804 	addi	r16,r16,5216
    44c8:	0039883a 	mov	fp,zero
    44cc:	003aa206 	br	2f58 <__alt_data_end+0xff002f58>
    44d0:	0021883a 	mov	r16,zero
    44d4:	003e0706 	br	3cf4 <__alt_data_end+0xff003cf4>
    44d8:	d9002c17 	ldw	r4,176(sp)
    44dc:	d9801e04 	addi	r6,sp,120
    44e0:	b80b883a 	mov	r5,r23
    44e4:	00095a40 	call	95a4 <__sprint_r>
    44e8:	1039c91e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    44ec:	d8802617 	ldw	r2,152(sp)
    44f0:	d9403317 	ldw	r5,204(sp)
    44f4:	d8c02017 	ldw	r3,128(sp)
    44f8:	da000404 	addi	r8,sp,16
    44fc:	2885c83a 	sub	r2,r5,r2
    4500:	003dfb06 	br	3cf0 <__alt_data_end+0xff003cf0>
    4504:	9080004c 	andi	r2,r18,1
    4508:	103e8f1e 	bne	r2,zero,3f48 <__alt_data_end+0xff003f48>
    450c:	d8802117 	ldw	r2,132(sp)
    4510:	003e9e06 	br	3f8c <__alt_data_end+0xff003f8c>
    4514:	1025883a 	mov	r18,r2
    4518:	0039883a 	mov	fp,zero
    451c:	00800084 	movi	r2,2
    4520:	003fd306 	br	4470 <__alt_data_end+0xff004470>
    4524:	07000b44 	movi	fp,45
    4528:	df002785 	stb	fp,158(sp)
    452c:	003a4006 	br	2e30 <__alt_data_end+0xff002e30>
    4530:	00c00b44 	movi	r3,45
    4534:	d8c02785 	stb	r3,158(sp)
    4538:	d8802a15 	stw	r2,168(sp)
    453c:	dc802b17 	ldw	r18,172(sp)
    4540:	d8002915 	stw	zero,164(sp)
    4544:	07000b44 	movi	fp,45
    4548:	003a8006 	br	2f4c <__alt_data_end+0xff002f4c>
    454c:	04000074 	movhi	r16,1
    4550:	84050d04 	addi	r16,r16,5172
    4554:	003f4706 	br	4274 <__alt_data_end+0xff004274>
    4558:	d8c02d17 	ldw	r3,180(sp)
    455c:	d9002f17 	ldw	r4,188(sp)
    4560:	18800017 	ldw	r2,0(r3)
    4564:	18c00104 	addi	r3,r3,4
    4568:	d8c02d15 	stw	r3,180(sp)
    456c:	11000015 	stw	r4,0(r2)
    4570:	0038dd06 	br	28e8 <__alt_data_end+0xff0028e8>
    4574:	dd802617 	ldw	r22,152(sp)
    4578:	00bfff44 	movi	r2,-3
    457c:	b0801c16 	blt	r22,r2,45f0 <___vfprintf_internal_r+0x1de8>
    4580:	d9402917 	ldw	r5,164(sp)
    4584:	2d801a16 	blt	r5,r22,45f0 <___vfprintf_internal_r+0x1de8>
    4588:	dd803215 	stw	r22,200(sp)
    458c:	003e8906 	br	3fb4 <__alt_data_end+0xff003fb4>
    4590:	01000074 	movhi	r4,1
    4594:	21051a84 	addi	r4,r4,5226
    4598:	d9002b15 	stw	r4,172(sp)
    459c:	003c9106 	br	37e4 <__alt_data_end+0xff0037e4>
    45a0:	e005883a 	mov	r2,fp
    45a4:	003e7906 	br	3f8c <__alt_data_end+0xff003f8c>
    45a8:	d9402917 	ldw	r5,164(sp)
    45ac:	df002783 	ldbu	fp,158(sp)
    45b0:	dcc02d15 	stw	r19,180(sp)
    45b4:	d9402a15 	stw	r5,168(sp)
    45b8:	d9402e15 	stw	r5,184(sp)
    45bc:	d8002915 	stw	zero,164(sp)
    45c0:	d8003215 	stw	zero,200(sp)
    45c4:	003a5d06 	br	2f3c <__alt_data_end+0xff002f3c>
    45c8:	9080004c 	andi	r2,r18,1
    45cc:	0039883a 	mov	fp,zero
    45d0:	10000426 	beq	r2,zero,45e4 <___vfprintf_internal_r+0x1ddc>
    45d4:	00800c04 	movi	r2,48
    45d8:	dc001dc4 	addi	r16,sp,119
    45dc:	d8801dc5 	stb	r2,119(sp)
    45e0:	003b8006 	br	33e4 <__alt_data_end+0xff0033e4>
    45e4:	d8002e15 	stw	zero,184(sp)
    45e8:	dc001e04 	addi	r16,sp,120
    45ec:	003a4d06 	br	2f24 <__alt_data_end+0xff002f24>
    45f0:	8c7fff84 	addi	r17,r17,-2
    45f4:	b5bfffc4 	addi	r22,r22,-1
    45f8:	dd802615 	stw	r22,152(sp)
    45fc:	dc4022c5 	stb	r17,139(sp)
    4600:	b000bf16 	blt	r22,zero,4900 <___vfprintf_internal_r+0x20f8>
    4604:	00800ac4 	movi	r2,43
    4608:	d8802305 	stb	r2,140(sp)
    460c:	00800244 	movi	r2,9
    4610:	15807016 	blt	r2,r22,47d4 <___vfprintf_internal_r+0x1fcc>
    4614:	00800c04 	movi	r2,48
    4618:	b5800c04 	addi	r22,r22,48
    461c:	d8802345 	stb	r2,141(sp)
    4620:	dd802385 	stb	r22,142(sp)
    4624:	d88023c4 	addi	r2,sp,143
    4628:	df0022c4 	addi	fp,sp,139
    462c:	d8c03317 	ldw	r3,204(sp)
    4630:	1739c83a 	sub	fp,r2,fp
    4634:	d9003317 	ldw	r4,204(sp)
    4638:	e0c7883a 	add	r3,fp,r3
    463c:	df003a15 	stw	fp,232(sp)
    4640:	d8c02e15 	stw	r3,184(sp)
    4644:	00800044 	movi	r2,1
    4648:	1100b30e 	bge	r2,r4,4918 <___vfprintf_internal_r+0x2110>
    464c:	d8c02e17 	ldw	r3,184(sp)
    4650:	18c00044 	addi	r3,r3,1
    4654:	d8c02e15 	stw	r3,184(sp)
    4658:	1805883a 	mov	r2,r3
    465c:	1800ac16 	blt	r3,zero,4910 <___vfprintf_internal_r+0x2108>
    4660:	d8003215 	stw	zero,200(sp)
    4664:	003e5d06 	br	3fdc <__alt_data_end+0xff003fdc>
    4668:	d9002c17 	ldw	r4,176(sp)
    466c:	d9801e04 	addi	r6,sp,120
    4670:	b80b883a 	mov	r5,r23
    4674:	00095a40 	call	95a4 <__sprint_r>
    4678:	1039651e 	bne	r2,zero,2c10 <__alt_data_end+0xff002c10>
    467c:	dc402617 	ldw	r17,152(sp)
    4680:	d8c02017 	ldw	r3,128(sp)
    4684:	d8801f17 	ldw	r2,124(sp)
    4688:	da000404 	addi	r8,sp,16
    468c:	003ed606 	br	41e8 <__alt_data_end+0xff0041e8>
    4690:	582b883a 	mov	r21,r11
    4694:	d8002915 	stw	zero,164(sp)
    4698:	0038bd06 	br	2990 <__alt_data_end+0xff002990>
    469c:	d8802917 	ldw	r2,164(sp)
    46a0:	103e071e 	bne	r2,zero,3ec0 <__alt_data_end+0xff003ec0>
    46a4:	dc002915 	stw	r16,164(sp)
    46a8:	003e0506 	br	3ec0 <__alt_data_end+0xff003ec0>
    46ac:	d9002917 	ldw	r4,164(sp)
    46b0:	20c00044 	addi	r3,r4,1
    46b4:	003e0f06 	br	3ef4 <__alt_data_end+0xff003ef4>
    46b8:	01400184 	movi	r5,6
    46bc:	d9402915 	stw	r5,164(sp)
    46c0:	003dff06 	br	3ec0 <__alt_data_end+0xff003ec0>
    46c4:	d8802104 	addi	r2,sp,132
    46c8:	d8800315 	stw	r2,12(sp)
    46cc:	d8802504 	addi	r2,sp,148
    46d0:	d8800215 	stw	r2,8(sp)
    46d4:	d8802604 	addi	r2,sp,152
    46d8:	d8800115 	stw	r2,4(sp)
    46dc:	d8802917 	ldw	r2,164(sp)
    46e0:	d9403617 	ldw	r5,216(sp)
    46e4:	d9002c17 	ldw	r4,176(sp)
    46e8:	d8800015 	stw	r2,0(sp)
    46ec:	01c000c4 	movi	r7,3
    46f0:	980d883a 	mov	r6,r19
    46f4:	da003d15 	stw	r8,244(sp)
    46f8:	0004e2c0 	call	4e2c <_dtoa_r>
    46fc:	d8c02917 	ldw	r3,164(sp)
    4700:	da003d17 	ldw	r8,244(sp)
    4704:	1021883a 	mov	r16,r2
    4708:	10f9883a 	add	fp,r2,r3
    470c:	81000007 	ldb	r4,0(r16)
    4710:	00800c04 	movi	r2,48
    4714:	20805e26 	beq	r4,r2,4890 <___vfprintf_internal_r+0x2088>
    4718:	d8c02617 	ldw	r3,152(sp)
    471c:	e0f9883a 	add	fp,fp,r3
    4720:	003e0a06 	br	3f4c <__alt_data_end+0xff003f4c>
    4724:	00c00b44 	movi	r3,45
    4728:	24e0003c 	xorhi	r19,r4,32768
    472c:	d8c02a05 	stb	r3,168(sp)
    4730:	003de906 	br	3ed8 <__alt_data_end+0xff003ed8>
    4734:	d8c03217 	ldw	r3,200(sp)
    4738:	00c07a0e 	bge	zero,r3,4924 <___vfprintf_internal_r+0x211c>
    473c:	00800044 	movi	r2,1
    4740:	d9003317 	ldw	r4,204(sp)
    4744:	1105883a 	add	r2,r2,r4
    4748:	d8802e15 	stw	r2,184(sp)
    474c:	10004e16 	blt	r2,zero,4888 <___vfprintf_internal_r+0x2080>
    4750:	044019c4 	movi	r17,103
    4754:	003e2106 	br	3fdc <__alt_data_end+0xff003fdc>
    4758:	d9002917 	ldw	r4,164(sp)
    475c:	d8802104 	addi	r2,sp,132
    4760:	d8800315 	stw	r2,12(sp)
    4764:	d9000015 	stw	r4,0(sp)
    4768:	d8802504 	addi	r2,sp,148
    476c:	d9403617 	ldw	r5,216(sp)
    4770:	d9002c17 	ldw	r4,176(sp)
    4774:	d8800215 	stw	r2,8(sp)
    4778:	d8802604 	addi	r2,sp,152
    477c:	d8800115 	stw	r2,4(sp)
    4780:	01c000c4 	movi	r7,3
    4784:	980d883a 	mov	r6,r19
    4788:	da003d15 	stw	r8,244(sp)
    478c:	0004e2c0 	call	4e2c <_dtoa_r>
    4790:	d8c02917 	ldw	r3,164(sp)
    4794:	da003d17 	ldw	r8,244(sp)
    4798:	1021883a 	mov	r16,r2
    479c:	00801184 	movi	r2,70
    47a0:	80f9883a 	add	fp,r16,r3
    47a4:	88bfd926 	beq	r17,r2,470c <__alt_data_end+0xff00470c>
    47a8:	003de806 	br	3f4c <__alt_data_end+0xff003f4c>
    47ac:	d9002917 	ldw	r4,164(sp)
    47b0:	00c04d0e 	bge	zero,r3,48e8 <___vfprintf_internal_r+0x20e0>
    47b4:	2000441e 	bne	r4,zero,48c8 <___vfprintf_internal_r+0x20c0>
    47b8:	9480004c 	andi	r18,r18,1
    47bc:	9000421e 	bne	r18,zero,48c8 <___vfprintf_internal_r+0x20c0>
    47c0:	1805883a 	mov	r2,r3
    47c4:	18007016 	blt	r3,zero,4988 <___vfprintf_internal_r+0x2180>
    47c8:	d8c03217 	ldw	r3,200(sp)
    47cc:	d8c02e15 	stw	r3,184(sp)
    47d0:	003e0206 	br	3fdc <__alt_data_end+0xff003fdc>
    47d4:	df0022c4 	addi	fp,sp,139
    47d8:	dc002915 	stw	r16,164(sp)
    47dc:	4027883a 	mov	r19,r8
    47e0:	e021883a 	mov	r16,fp
    47e4:	b009883a 	mov	r4,r22
    47e8:	01400284 	movi	r5,10
    47ec:	0001c780 	call	1c78 <__modsi3>
    47f0:	10800c04 	addi	r2,r2,48
    47f4:	843fffc4 	addi	r16,r16,-1
    47f8:	b009883a 	mov	r4,r22
    47fc:	01400284 	movi	r5,10
    4800:	80800005 	stb	r2,0(r16)
    4804:	0001bf40 	call	1bf4 <__divsi3>
    4808:	102d883a 	mov	r22,r2
    480c:	00800244 	movi	r2,9
    4810:	15bff416 	blt	r2,r22,47e4 <__alt_data_end+0xff0047e4>
    4814:	9811883a 	mov	r8,r19
    4818:	b0800c04 	addi	r2,r22,48
    481c:	8027883a 	mov	r19,r16
    4820:	997fffc4 	addi	r5,r19,-1
    4824:	98bfffc5 	stb	r2,-1(r19)
    4828:	dc002917 	ldw	r16,164(sp)
    482c:	2f006a2e 	bgeu	r5,fp,49d8 <___vfprintf_internal_r+0x21d0>
    4830:	d9c02384 	addi	r7,sp,142
    4834:	3ccfc83a 	sub	r7,r7,r19
    4838:	d9002344 	addi	r4,sp,141
    483c:	e1cf883a 	add	r7,fp,r7
    4840:	00000106 	br	4848 <___vfprintf_internal_r+0x2040>
    4844:	28800003 	ldbu	r2,0(r5)
    4848:	20800005 	stb	r2,0(r4)
    484c:	21000044 	addi	r4,r4,1
    4850:	29400044 	addi	r5,r5,1
    4854:	393ffb1e 	bne	r7,r4,4844 <__alt_data_end+0xff004844>
    4858:	d8802304 	addi	r2,sp,140
    485c:	14c5c83a 	sub	r2,r2,r19
    4860:	d8c02344 	addi	r3,sp,141
    4864:	1885883a 	add	r2,r3,r2
    4868:	003f7006 	br	462c <__alt_data_end+0xff00462c>
    486c:	0005883a 	mov	r2,zero
    4870:	003f0f06 	br	44b0 <__alt_data_end+0xff0044b0>
    4874:	d8c03217 	ldw	r3,200(sp)
    4878:	18c00044 	addi	r3,r3,1
    487c:	d8c02e15 	stw	r3,184(sp)
    4880:	1805883a 	mov	r2,r3
    4884:	183fb20e 	bge	r3,zero,4750 <__alt_data_end+0xff004750>
    4888:	0005883a 	mov	r2,zero
    488c:	003fb006 	br	4750 <__alt_data_end+0xff004750>
    4890:	d9003617 	ldw	r4,216(sp)
    4894:	000d883a 	mov	r6,zero
    4898:	000f883a 	mov	r7,zero
    489c:	980b883a 	mov	r5,r19
    48a0:	d8c03c15 	stw	r3,240(sp)
    48a4:	da003d15 	stw	r8,244(sp)
    48a8:	000d0680 	call	d068 <__eqdf2>
    48ac:	d8c03c17 	ldw	r3,240(sp)
    48b0:	da003d17 	ldw	r8,244(sp)
    48b4:	103f9826 	beq	r2,zero,4718 <__alt_data_end+0xff004718>
    48b8:	00800044 	movi	r2,1
    48bc:	10c7c83a 	sub	r3,r2,r3
    48c0:	d8c02615 	stw	r3,152(sp)
    48c4:	003f9506 	br	471c <__alt_data_end+0xff00471c>
    48c8:	d9002917 	ldw	r4,164(sp)
    48cc:	d8c03217 	ldw	r3,200(sp)
    48d0:	20800044 	addi	r2,r4,1
    48d4:	1885883a 	add	r2,r3,r2
    48d8:	d8802e15 	stw	r2,184(sp)
    48dc:	103dbf0e 	bge	r2,zero,3fdc <__alt_data_end+0xff003fdc>
    48e0:	0005883a 	mov	r2,zero
    48e4:	003dbd06 	br	3fdc <__alt_data_end+0xff003fdc>
    48e8:	2000211e 	bne	r4,zero,4970 <___vfprintf_internal_r+0x2168>
    48ec:	9480004c 	andi	r18,r18,1
    48f0:	90001f1e 	bne	r18,zero,4970 <___vfprintf_internal_r+0x2168>
    48f4:	00800044 	movi	r2,1
    48f8:	d8802e15 	stw	r2,184(sp)
    48fc:	003db706 	br	3fdc <__alt_data_end+0xff003fdc>
    4900:	00800b44 	movi	r2,45
    4904:	05adc83a 	sub	r22,zero,r22
    4908:	d8802305 	stb	r2,140(sp)
    490c:	003f3f06 	br	460c <__alt_data_end+0xff00460c>
    4910:	0005883a 	mov	r2,zero
    4914:	003f5206 	br	4660 <__alt_data_end+0xff004660>
    4918:	90a4703a 	and	r18,r18,r2
    491c:	903f4e26 	beq	r18,zero,4658 <__alt_data_end+0xff004658>
    4920:	003f4a06 	br	464c <__alt_data_end+0xff00464c>
    4924:	00800084 	movi	r2,2
    4928:	10c5c83a 	sub	r2,r2,r3
    492c:	003f8406 	br	4740 <__alt_data_end+0xff004740>
    4930:	d8802d17 	ldw	r2,180(sp)
    4934:	d9002d17 	ldw	r4,180(sp)
    4938:	ac400043 	ldbu	r17,1(r21)
    493c:	10800017 	ldw	r2,0(r2)
    4940:	582b883a 	mov	r21,r11
    4944:	d8802915 	stw	r2,164(sp)
    4948:	20800104 	addi	r2,r4,4
    494c:	d9002917 	ldw	r4,164(sp)
    4950:	d8802d15 	stw	r2,180(sp)
    4954:	203e7a0e 	bge	r4,zero,4340 <__alt_data_end+0xff004340>
    4958:	8c403fcc 	andi	r17,r17,255
    495c:	00bfffc4 	movi	r2,-1
    4960:	8c40201c 	xori	r17,r17,128
    4964:	d8802915 	stw	r2,164(sp)
    4968:	8c7fe004 	addi	r17,r17,-128
    496c:	00380706 	br	298c <__alt_data_end+0xff00298c>
    4970:	d8c02917 	ldw	r3,164(sp)
    4974:	18c00084 	addi	r3,r3,2
    4978:	d8c02e15 	stw	r3,184(sp)
    497c:	1805883a 	mov	r2,r3
    4980:	183d960e 	bge	r3,zero,3fdc <__alt_data_end+0xff003fdc>
    4984:	003fd606 	br	48e0 <__alt_data_end+0xff0048e0>
    4988:	0005883a 	mov	r2,zero
    498c:	003f8e06 	br	47c8 <__alt_data_end+0xff0047c8>
    4990:	9080004c 	andi	r2,r18,1
    4994:	103f811e 	bne	r2,zero,479c <__alt_data_end+0xff00479c>
    4998:	d8802117 	ldw	r2,132(sp)
    499c:	1405c83a 	sub	r2,r2,r16
    49a0:	d8803315 	stw	r2,204(sp)
    49a4:	b47ef326 	beq	r22,r17,4574 <__alt_data_end+0xff004574>
    49a8:	dd802617 	ldw	r22,152(sp)
    49ac:	003f1106 	br	45f4 <__alt_data_end+0xff0045f4>
    49b0:	d9c02785 	stb	r7,158(sp)
    49b4:	00390406 	br	2dc8 <__alt_data_end+0xff002dc8>
    49b8:	d9c02785 	stb	r7,158(sp)
    49bc:	0038d306 	br	2d0c <__alt_data_end+0xff002d0c>
    49c0:	d9c02785 	stb	r7,158(sp)
    49c4:	003a6106 	br	334c <__alt_data_end+0xff00334c>
    49c8:	d9c02785 	stb	r7,158(sp)
    49cc:	003af806 	br	35b0 <__alt_data_end+0xff0035b0>
    49d0:	0005883a 	mov	r2,zero
    49d4:	003d7e06 	br	3fd0 <__alt_data_end+0xff003fd0>
    49d8:	d8802344 	addi	r2,sp,141
    49dc:	003f1306 	br	462c <__alt_data_end+0xff00462c>
    49e0:	d9c02785 	stb	r7,158(sp)
    49e4:	00392306 	br	2e74 <__alt_data_end+0xff002e74>
    49e8:	d9c02785 	stb	r7,158(sp)
    49ec:	003aa906 	br	3494 <__alt_data_end+0xff003494>
    49f0:	d9c02785 	stb	r7,158(sp)
    49f4:	003a3d06 	br	32ec <__alt_data_end+0xff0032ec>
    49f8:	d9c02785 	stb	r7,158(sp)
    49fc:	003aca06 	br	3528 <__alt_data_end+0xff003528>

00004a00 <__vfprintf_internal>:
    4a00:	00800074 	movhi	r2,1
    4a04:	108c7504 	addi	r2,r2,12756
    4a08:	300f883a 	mov	r7,r6
    4a0c:	280d883a 	mov	r6,r5
    4a10:	200b883a 	mov	r5,r4
    4a14:	11000017 	ldw	r4,0(r2)
    4a18:	00028081 	jmpi	2808 <___vfprintf_internal_r>

00004a1c <__sbprintf>:
    4a1c:	2880030b 	ldhu	r2,12(r5)
    4a20:	2ac01917 	ldw	r11,100(r5)
    4a24:	2a80038b 	ldhu	r10,14(r5)
    4a28:	2a400717 	ldw	r9,28(r5)
    4a2c:	2a000917 	ldw	r8,36(r5)
    4a30:	defee204 	addi	sp,sp,-1144
    4a34:	00c10004 	movi	r3,1024
    4a38:	dc011a15 	stw	r16,1128(sp)
    4a3c:	10bfff4c 	andi	r2,r2,65533
    4a40:	2821883a 	mov	r16,r5
    4a44:	d8cb883a 	add	r5,sp,r3
    4a48:	dc811c15 	stw	r18,1136(sp)
    4a4c:	dc411b15 	stw	r17,1132(sp)
    4a50:	dfc11d15 	stw	ra,1140(sp)
    4a54:	2025883a 	mov	r18,r4
    4a58:	d881030d 	sth	r2,1036(sp)
    4a5c:	dac11915 	stw	r11,1124(sp)
    4a60:	da81038d 	sth	r10,1038(sp)
    4a64:	da410715 	stw	r9,1052(sp)
    4a68:	da010915 	stw	r8,1060(sp)
    4a6c:	dec10015 	stw	sp,1024(sp)
    4a70:	dec10415 	stw	sp,1040(sp)
    4a74:	d8c10215 	stw	r3,1032(sp)
    4a78:	d8c10515 	stw	r3,1044(sp)
    4a7c:	d8010615 	stw	zero,1048(sp)
    4a80:	00028080 	call	2808 <___vfprintf_internal_r>
    4a84:	1023883a 	mov	r17,r2
    4a88:	10000416 	blt	r2,zero,4a9c <__sbprintf+0x80>
    4a8c:	d9410004 	addi	r5,sp,1024
    4a90:	9009883a 	mov	r4,r18
    4a94:	00066d00 	call	66d0 <_fflush_r>
    4a98:	10000d1e 	bne	r2,zero,4ad0 <__sbprintf+0xb4>
    4a9c:	d881030b 	ldhu	r2,1036(sp)
    4aa0:	1080100c 	andi	r2,r2,64
    4aa4:	10000326 	beq	r2,zero,4ab4 <__sbprintf+0x98>
    4aa8:	8080030b 	ldhu	r2,12(r16)
    4aac:	10801014 	ori	r2,r2,64
    4ab0:	8080030d 	sth	r2,12(r16)
    4ab4:	8805883a 	mov	r2,r17
    4ab8:	dfc11d17 	ldw	ra,1140(sp)
    4abc:	dc811c17 	ldw	r18,1136(sp)
    4ac0:	dc411b17 	ldw	r17,1132(sp)
    4ac4:	dc011a17 	ldw	r16,1128(sp)
    4ac8:	dec11e04 	addi	sp,sp,1144
    4acc:	f800283a 	ret
    4ad0:	047fffc4 	movi	r17,-1
    4ad4:	003ff106 	br	4a9c <__alt_data_end+0xff004a9c>

00004ad8 <__swsetup_r>:
    4ad8:	00800074 	movhi	r2,1
    4adc:	defffd04 	addi	sp,sp,-12
    4ae0:	108c7504 	addi	r2,r2,12756
    4ae4:	dc400115 	stw	r17,4(sp)
    4ae8:	2023883a 	mov	r17,r4
    4aec:	11000017 	ldw	r4,0(r2)
    4af0:	dc000015 	stw	r16,0(sp)
    4af4:	dfc00215 	stw	ra,8(sp)
    4af8:	2821883a 	mov	r16,r5
    4afc:	20000226 	beq	r4,zero,4b08 <__swsetup_r+0x30>
    4b00:	20800e17 	ldw	r2,56(r4)
    4b04:	10003126 	beq	r2,zero,4bcc <__swsetup_r+0xf4>
    4b08:	8080030b 	ldhu	r2,12(r16)
    4b0c:	10c0020c 	andi	r3,r2,8
    4b10:	1009883a 	mov	r4,r2
    4b14:	18000f26 	beq	r3,zero,4b54 <__swsetup_r+0x7c>
    4b18:	80c00417 	ldw	r3,16(r16)
    4b1c:	18001526 	beq	r3,zero,4b74 <__swsetup_r+0x9c>
    4b20:	1100004c 	andi	r4,r2,1
    4b24:	20001c1e 	bne	r4,zero,4b98 <__swsetup_r+0xc0>
    4b28:	1080008c 	andi	r2,r2,2
    4b2c:	1000291e 	bne	r2,zero,4bd4 <__swsetup_r+0xfc>
    4b30:	80800517 	ldw	r2,20(r16)
    4b34:	80800215 	stw	r2,8(r16)
    4b38:	18001c26 	beq	r3,zero,4bac <__swsetup_r+0xd4>
    4b3c:	0005883a 	mov	r2,zero
    4b40:	dfc00217 	ldw	ra,8(sp)
    4b44:	dc400117 	ldw	r17,4(sp)
    4b48:	dc000017 	ldw	r16,0(sp)
    4b4c:	dec00304 	addi	sp,sp,12
    4b50:	f800283a 	ret
    4b54:	2080040c 	andi	r2,r4,16
    4b58:	10002e26 	beq	r2,zero,4c14 <__swsetup_r+0x13c>
    4b5c:	2080010c 	andi	r2,r4,4
    4b60:	10001e1e 	bne	r2,zero,4bdc <__swsetup_r+0x104>
    4b64:	80c00417 	ldw	r3,16(r16)
    4b68:	20800214 	ori	r2,r4,8
    4b6c:	8080030d 	sth	r2,12(r16)
    4b70:	183feb1e 	bne	r3,zero,4b20 <__alt_data_end+0xff004b20>
    4b74:	1100a00c 	andi	r4,r2,640
    4b78:	01408004 	movi	r5,512
    4b7c:	217fe826 	beq	r4,r5,4b20 <__alt_data_end+0xff004b20>
    4b80:	800b883a 	mov	r5,r16
    4b84:	8809883a 	mov	r4,r17
    4b88:	00076500 	call	7650 <__smakebuf_r>
    4b8c:	8080030b 	ldhu	r2,12(r16)
    4b90:	80c00417 	ldw	r3,16(r16)
    4b94:	003fe206 	br	4b20 <__alt_data_end+0xff004b20>
    4b98:	80800517 	ldw	r2,20(r16)
    4b9c:	80000215 	stw	zero,8(r16)
    4ba0:	0085c83a 	sub	r2,zero,r2
    4ba4:	80800615 	stw	r2,24(r16)
    4ba8:	183fe41e 	bne	r3,zero,4b3c <__alt_data_end+0xff004b3c>
    4bac:	80c0030b 	ldhu	r3,12(r16)
    4bb0:	0005883a 	mov	r2,zero
    4bb4:	1900200c 	andi	r4,r3,128
    4bb8:	203fe126 	beq	r4,zero,4b40 <__alt_data_end+0xff004b40>
    4bbc:	18c01014 	ori	r3,r3,64
    4bc0:	80c0030d 	sth	r3,12(r16)
    4bc4:	00bfffc4 	movi	r2,-1
    4bc8:	003fdd06 	br	4b40 <__alt_data_end+0xff004b40>
    4bcc:	0006aac0 	call	6aac <__sinit>
    4bd0:	003fcd06 	br	4b08 <__alt_data_end+0xff004b08>
    4bd4:	0005883a 	mov	r2,zero
    4bd8:	003fd606 	br	4b34 <__alt_data_end+0xff004b34>
    4bdc:	81400c17 	ldw	r5,48(r16)
    4be0:	28000626 	beq	r5,zero,4bfc <__swsetup_r+0x124>
    4be4:	80801004 	addi	r2,r16,64
    4be8:	28800326 	beq	r5,r2,4bf8 <__swsetup_r+0x120>
    4bec:	8809883a 	mov	r4,r17
    4bf0:	0006c200 	call	6c20 <_free_r>
    4bf4:	8100030b 	ldhu	r4,12(r16)
    4bf8:	80000c15 	stw	zero,48(r16)
    4bfc:	80c00417 	ldw	r3,16(r16)
    4c00:	00bff6c4 	movi	r2,-37
    4c04:	1108703a 	and	r4,r2,r4
    4c08:	80000115 	stw	zero,4(r16)
    4c0c:	80c00015 	stw	r3,0(r16)
    4c10:	003fd506 	br	4b68 <__alt_data_end+0xff004b68>
    4c14:	00800244 	movi	r2,9
    4c18:	88800015 	stw	r2,0(r17)
    4c1c:	20801014 	ori	r2,r4,64
    4c20:	8080030d 	sth	r2,12(r16)
    4c24:	00bfffc4 	movi	r2,-1
    4c28:	003fc506 	br	4b40 <__alt_data_end+0xff004b40>

00004c2c <quorem>:
    4c2c:	defff704 	addi	sp,sp,-36
    4c30:	dc800215 	stw	r18,8(sp)
    4c34:	20800417 	ldw	r2,16(r4)
    4c38:	2c800417 	ldw	r18,16(r5)
    4c3c:	dfc00815 	stw	ra,32(sp)
    4c40:	ddc00715 	stw	r23,28(sp)
    4c44:	dd800615 	stw	r22,24(sp)
    4c48:	dd400515 	stw	r21,20(sp)
    4c4c:	dd000415 	stw	r20,16(sp)
    4c50:	dcc00315 	stw	r19,12(sp)
    4c54:	dc400115 	stw	r17,4(sp)
    4c58:	dc000015 	stw	r16,0(sp)
    4c5c:	14807116 	blt	r2,r18,4e24 <quorem+0x1f8>
    4c60:	94bfffc4 	addi	r18,r18,-1
    4c64:	94ad883a 	add	r22,r18,r18
    4c68:	b5ad883a 	add	r22,r22,r22
    4c6c:	2c400504 	addi	r17,r5,20
    4c70:	8da9883a 	add	r20,r17,r22
    4c74:	25400504 	addi	r21,r4,20
    4c78:	282f883a 	mov	r23,r5
    4c7c:	adad883a 	add	r22,r21,r22
    4c80:	a1400017 	ldw	r5,0(r20)
    4c84:	2021883a 	mov	r16,r4
    4c88:	b1000017 	ldw	r4,0(r22)
    4c8c:	29400044 	addi	r5,r5,1
    4c90:	0001cec0 	call	1cec <__udivsi3>
    4c94:	1027883a 	mov	r19,r2
    4c98:	10002c26 	beq	r2,zero,4d4c <quorem+0x120>
    4c9c:	a813883a 	mov	r9,r21
    4ca0:	880b883a 	mov	r5,r17
    4ca4:	0009883a 	mov	r4,zero
    4ca8:	000d883a 	mov	r6,zero
    4cac:	2a000017 	ldw	r8,0(r5)
    4cb0:	49c00017 	ldw	r7,0(r9)
    4cb4:	29400104 	addi	r5,r5,4
    4cb8:	40bfffcc 	andi	r2,r8,65535
    4cbc:	14c5383a 	mul	r2,r2,r19
    4cc0:	4010d43a 	srli	r8,r8,16
    4cc4:	38ffffcc 	andi	r3,r7,65535
    4cc8:	1105883a 	add	r2,r2,r4
    4ccc:	1008d43a 	srli	r4,r2,16
    4cd0:	44d1383a 	mul	r8,r8,r19
    4cd4:	198d883a 	add	r6,r3,r6
    4cd8:	10ffffcc 	andi	r3,r2,65535
    4cdc:	30c7c83a 	sub	r3,r6,r3
    4ce0:	380ed43a 	srli	r7,r7,16
    4ce4:	4105883a 	add	r2,r8,r4
    4ce8:	180dd43a 	srai	r6,r3,16
    4cec:	113fffcc 	andi	r4,r2,65535
    4cf0:	390fc83a 	sub	r7,r7,r4
    4cf4:	398d883a 	add	r6,r7,r6
    4cf8:	300e943a 	slli	r7,r6,16
    4cfc:	18ffffcc 	andi	r3,r3,65535
    4d00:	1008d43a 	srli	r4,r2,16
    4d04:	38ceb03a 	or	r7,r7,r3
    4d08:	49c00015 	stw	r7,0(r9)
    4d0c:	300dd43a 	srai	r6,r6,16
    4d10:	4a400104 	addi	r9,r9,4
    4d14:	a17fe52e 	bgeu	r20,r5,4cac <__alt_data_end+0xff004cac>
    4d18:	b0800017 	ldw	r2,0(r22)
    4d1c:	10000b1e 	bne	r2,zero,4d4c <quorem+0x120>
    4d20:	b0bfff04 	addi	r2,r22,-4
    4d24:	a880082e 	bgeu	r21,r2,4d48 <quorem+0x11c>
    4d28:	b0ffff17 	ldw	r3,-4(r22)
    4d2c:	18000326 	beq	r3,zero,4d3c <quorem+0x110>
    4d30:	00000506 	br	4d48 <quorem+0x11c>
    4d34:	10c00017 	ldw	r3,0(r2)
    4d38:	1800031e 	bne	r3,zero,4d48 <quorem+0x11c>
    4d3c:	10bfff04 	addi	r2,r2,-4
    4d40:	94bfffc4 	addi	r18,r18,-1
    4d44:	a8bffb36 	bltu	r21,r2,4d34 <__alt_data_end+0xff004d34>
    4d48:	84800415 	stw	r18,16(r16)
    4d4c:	b80b883a 	mov	r5,r23
    4d50:	8009883a 	mov	r4,r16
    4d54:	00085840 	call	8584 <__mcmp>
    4d58:	10002616 	blt	r2,zero,4df4 <quorem+0x1c8>
    4d5c:	9cc00044 	addi	r19,r19,1
    4d60:	a805883a 	mov	r2,r21
    4d64:	000b883a 	mov	r5,zero
    4d68:	11000017 	ldw	r4,0(r2)
    4d6c:	89800017 	ldw	r6,0(r17)
    4d70:	10800104 	addi	r2,r2,4
    4d74:	20ffffcc 	andi	r3,r4,65535
    4d78:	194b883a 	add	r5,r3,r5
    4d7c:	30ffffcc 	andi	r3,r6,65535
    4d80:	28c7c83a 	sub	r3,r5,r3
    4d84:	300cd43a 	srli	r6,r6,16
    4d88:	2008d43a 	srli	r4,r4,16
    4d8c:	180bd43a 	srai	r5,r3,16
    4d90:	18ffffcc 	andi	r3,r3,65535
    4d94:	2189c83a 	sub	r4,r4,r6
    4d98:	2149883a 	add	r4,r4,r5
    4d9c:	200c943a 	slli	r6,r4,16
    4da0:	8c400104 	addi	r17,r17,4
    4da4:	200bd43a 	srai	r5,r4,16
    4da8:	30c6b03a 	or	r3,r6,r3
    4dac:	10ffff15 	stw	r3,-4(r2)
    4db0:	a47fed2e 	bgeu	r20,r17,4d68 <__alt_data_end+0xff004d68>
    4db4:	9485883a 	add	r2,r18,r18
    4db8:	1085883a 	add	r2,r2,r2
    4dbc:	a887883a 	add	r3,r21,r2
    4dc0:	18800017 	ldw	r2,0(r3)
    4dc4:	10000b1e 	bne	r2,zero,4df4 <quorem+0x1c8>
    4dc8:	18bfff04 	addi	r2,r3,-4
    4dcc:	a880082e 	bgeu	r21,r2,4df0 <quorem+0x1c4>
    4dd0:	18ffff17 	ldw	r3,-4(r3)
    4dd4:	18000326 	beq	r3,zero,4de4 <quorem+0x1b8>
    4dd8:	00000506 	br	4df0 <quorem+0x1c4>
    4ddc:	10c00017 	ldw	r3,0(r2)
    4de0:	1800031e 	bne	r3,zero,4df0 <quorem+0x1c4>
    4de4:	10bfff04 	addi	r2,r2,-4
    4de8:	94bfffc4 	addi	r18,r18,-1
    4dec:	a8bffb36 	bltu	r21,r2,4ddc <__alt_data_end+0xff004ddc>
    4df0:	84800415 	stw	r18,16(r16)
    4df4:	9805883a 	mov	r2,r19
    4df8:	dfc00817 	ldw	ra,32(sp)
    4dfc:	ddc00717 	ldw	r23,28(sp)
    4e00:	dd800617 	ldw	r22,24(sp)
    4e04:	dd400517 	ldw	r21,20(sp)
    4e08:	dd000417 	ldw	r20,16(sp)
    4e0c:	dcc00317 	ldw	r19,12(sp)
    4e10:	dc800217 	ldw	r18,8(sp)
    4e14:	dc400117 	ldw	r17,4(sp)
    4e18:	dc000017 	ldw	r16,0(sp)
    4e1c:	dec00904 	addi	sp,sp,36
    4e20:	f800283a 	ret
    4e24:	0005883a 	mov	r2,zero
    4e28:	003ff306 	br	4df8 <__alt_data_end+0xff004df8>

00004e2c <_dtoa_r>:
    4e2c:	20801017 	ldw	r2,64(r4)
    4e30:	deffde04 	addi	sp,sp,-136
    4e34:	df002015 	stw	fp,128(sp)
    4e38:	dcc01b15 	stw	r19,108(sp)
    4e3c:	dc801a15 	stw	r18,104(sp)
    4e40:	dc401915 	stw	r17,100(sp)
    4e44:	dc001815 	stw	r16,96(sp)
    4e48:	dfc02115 	stw	ra,132(sp)
    4e4c:	ddc01f15 	stw	r23,124(sp)
    4e50:	dd801e15 	stw	r22,120(sp)
    4e54:	dd401d15 	stw	r21,116(sp)
    4e58:	dd001c15 	stw	r20,112(sp)
    4e5c:	d9c00315 	stw	r7,12(sp)
    4e60:	2039883a 	mov	fp,r4
    4e64:	3023883a 	mov	r17,r6
    4e68:	2825883a 	mov	r18,r5
    4e6c:	dc002417 	ldw	r16,144(sp)
    4e70:	3027883a 	mov	r19,r6
    4e74:	10000826 	beq	r2,zero,4e98 <_dtoa_r+0x6c>
    4e78:	21801117 	ldw	r6,68(r4)
    4e7c:	00c00044 	movi	r3,1
    4e80:	100b883a 	mov	r5,r2
    4e84:	1986983a 	sll	r3,r3,r6
    4e88:	11800115 	stw	r6,4(r2)
    4e8c:	10c00215 	stw	r3,8(r2)
    4e90:	0007d640 	call	7d64 <_Bfree>
    4e94:	e0001015 	stw	zero,64(fp)
    4e98:	88002e16 	blt	r17,zero,4f54 <_dtoa_r+0x128>
    4e9c:	80000015 	stw	zero,0(r16)
    4ea0:	889ffc2c 	andhi	r2,r17,32752
    4ea4:	00dffc34 	movhi	r3,32752
    4ea8:	10c01c26 	beq	r2,r3,4f1c <_dtoa_r+0xf0>
    4eac:	000d883a 	mov	r6,zero
    4eb0:	000f883a 	mov	r7,zero
    4eb4:	9009883a 	mov	r4,r18
    4eb8:	980b883a 	mov	r5,r19
    4ebc:	000d0680 	call	d068 <__eqdf2>
    4ec0:	10002b1e 	bne	r2,zero,4f70 <_dtoa_r+0x144>
    4ec4:	d9c02317 	ldw	r7,140(sp)
    4ec8:	00800044 	movi	r2,1
    4ecc:	38800015 	stw	r2,0(r7)
    4ed0:	d8802517 	ldw	r2,148(sp)
    4ed4:	10019e26 	beq	r2,zero,5550 <_dtoa_r+0x724>
    4ed8:	d8c02517 	ldw	r3,148(sp)
    4edc:	00800074 	movhi	r2,1
    4ee0:	10851a44 	addi	r2,r2,5225
    4ee4:	18800015 	stw	r2,0(r3)
    4ee8:	10bfffc4 	addi	r2,r2,-1
    4eec:	dfc02117 	ldw	ra,132(sp)
    4ef0:	df002017 	ldw	fp,128(sp)
    4ef4:	ddc01f17 	ldw	r23,124(sp)
    4ef8:	dd801e17 	ldw	r22,120(sp)
    4efc:	dd401d17 	ldw	r21,116(sp)
    4f00:	dd001c17 	ldw	r20,112(sp)
    4f04:	dcc01b17 	ldw	r19,108(sp)
    4f08:	dc801a17 	ldw	r18,104(sp)
    4f0c:	dc401917 	ldw	r17,100(sp)
    4f10:	dc001817 	ldw	r16,96(sp)
    4f14:	dec02204 	addi	sp,sp,136
    4f18:	f800283a 	ret
    4f1c:	d8c02317 	ldw	r3,140(sp)
    4f20:	0089c3c4 	movi	r2,9999
    4f24:	18800015 	stw	r2,0(r3)
    4f28:	90017726 	beq	r18,zero,5508 <_dtoa_r+0x6dc>
    4f2c:	00800074 	movhi	r2,1
    4f30:	10852604 	addi	r2,r2,5272
    4f34:	d9002517 	ldw	r4,148(sp)
    4f38:	203fec26 	beq	r4,zero,4eec <__alt_data_end+0xff004eec>
    4f3c:	10c000c7 	ldb	r3,3(r2)
    4f40:	1801781e 	bne	r3,zero,5524 <_dtoa_r+0x6f8>
    4f44:	10c000c4 	addi	r3,r2,3
    4f48:	d9802517 	ldw	r6,148(sp)
    4f4c:	30c00015 	stw	r3,0(r6)
    4f50:	003fe606 	br	4eec <__alt_data_end+0xff004eec>
    4f54:	04e00034 	movhi	r19,32768
    4f58:	9cffffc4 	addi	r19,r19,-1
    4f5c:	00800044 	movi	r2,1
    4f60:	8ce6703a 	and	r19,r17,r19
    4f64:	80800015 	stw	r2,0(r16)
    4f68:	9823883a 	mov	r17,r19
    4f6c:	003fcc06 	br	4ea0 <__alt_data_end+0xff004ea0>
    4f70:	d8800204 	addi	r2,sp,8
    4f74:	d8800015 	stw	r2,0(sp)
    4f78:	d9c00104 	addi	r7,sp,4
    4f7c:	900b883a 	mov	r5,r18
    4f80:	980d883a 	mov	r6,r19
    4f84:	e009883a 	mov	r4,fp
    4f88:	8820d53a 	srli	r16,r17,20
    4f8c:	00089500 	call	8950 <__d2b>
    4f90:	d8800915 	stw	r2,36(sp)
    4f94:	8001651e 	bne	r16,zero,552c <_dtoa_r+0x700>
    4f98:	dd800217 	ldw	r22,8(sp)
    4f9c:	dc000117 	ldw	r16,4(sp)
    4fa0:	00800804 	movi	r2,32
    4fa4:	b421883a 	add	r16,r22,r16
    4fa8:	80c10c84 	addi	r3,r16,1074
    4fac:	10c2d10e 	bge	r2,r3,5af4 <_dtoa_r+0xcc8>
    4fb0:	00801004 	movi	r2,64
    4fb4:	81010484 	addi	r4,r16,1042
    4fb8:	10c7c83a 	sub	r3,r2,r3
    4fbc:	9108d83a 	srl	r4,r18,r4
    4fc0:	88e2983a 	sll	r17,r17,r3
    4fc4:	2448b03a 	or	r4,r4,r17
    4fc8:	000e4300 	call	e430 <__floatunsidf>
    4fcc:	017f8434 	movhi	r5,65040
    4fd0:	01800044 	movi	r6,1
    4fd4:	1009883a 	mov	r4,r2
    4fd8:	194b883a 	add	r5,r3,r5
    4fdc:	843fffc4 	addi	r16,r16,-1
    4fe0:	d9801115 	stw	r6,68(sp)
    4fe4:	000d883a 	mov	r6,zero
    4fe8:	01cffe34 	movhi	r7,16376
    4fec:	000d9d80 	call	d9d8 <__subdf3>
    4ff0:	0198dbf4 	movhi	r6,25455
    4ff4:	01cff4f4 	movhi	r7,16339
    4ff8:	3190d844 	addi	r6,r6,17249
    4ffc:	39e1e9c4 	addi	r7,r7,-30809
    5000:	1009883a 	mov	r4,r2
    5004:	180b883a 	mov	r5,r3
    5008:	000d2c00 	call	d2c0 <__muldf3>
    500c:	01a2d874 	movhi	r6,35681
    5010:	01cff1f4 	movhi	r7,16327
    5014:	31b22cc4 	addi	r6,r6,-14157
    5018:	39e28a04 	addi	r7,r7,-30168
    501c:	180b883a 	mov	r5,r3
    5020:	1009883a 	mov	r4,r2
    5024:	000bed40 	call	bed4 <__adddf3>
    5028:	8009883a 	mov	r4,r16
    502c:	1029883a 	mov	r20,r2
    5030:	1823883a 	mov	r17,r3
    5034:	000e3540 	call	e354 <__floatsidf>
    5038:	019427f4 	movhi	r6,20639
    503c:	01cff4f4 	movhi	r7,16339
    5040:	319e7ec4 	addi	r6,r6,31227
    5044:	39d104c4 	addi	r7,r7,17427
    5048:	1009883a 	mov	r4,r2
    504c:	180b883a 	mov	r5,r3
    5050:	000d2c00 	call	d2c0 <__muldf3>
    5054:	100d883a 	mov	r6,r2
    5058:	180f883a 	mov	r7,r3
    505c:	a009883a 	mov	r4,r20
    5060:	880b883a 	mov	r5,r17
    5064:	000bed40 	call	bed4 <__adddf3>
    5068:	1009883a 	mov	r4,r2
    506c:	180b883a 	mov	r5,r3
    5070:	1029883a 	mov	r20,r2
    5074:	1823883a 	mov	r17,r3
    5078:	000e2d40 	call	e2d4 <__fixdfsi>
    507c:	000d883a 	mov	r6,zero
    5080:	000f883a 	mov	r7,zero
    5084:	a009883a 	mov	r4,r20
    5088:	880b883a 	mov	r5,r17
    508c:	d8800515 	stw	r2,20(sp)
    5090:	000d1cc0 	call	d1cc <__ledf2>
    5094:	10028716 	blt	r2,zero,5ab4 <_dtoa_r+0xc88>
    5098:	d8c00517 	ldw	r3,20(sp)
    509c:	00800584 	movi	r2,22
    50a0:	10c27536 	bltu	r2,r3,5a78 <_dtoa_r+0xc4c>
    50a4:	180490fa 	slli	r2,r3,3
    50a8:	00c00074 	movhi	r3,1
    50ac:	18c54204 	addi	r3,r3,5384
    50b0:	1885883a 	add	r2,r3,r2
    50b4:	11000017 	ldw	r4,0(r2)
    50b8:	11400117 	ldw	r5,4(r2)
    50bc:	900d883a 	mov	r6,r18
    50c0:	980f883a 	mov	r7,r19
    50c4:	000d0f00 	call	d0f0 <__gedf2>
    50c8:	00828d0e 	bge	zero,r2,5b00 <_dtoa_r+0xcd4>
    50cc:	d9000517 	ldw	r4,20(sp)
    50d0:	d8000e15 	stw	zero,56(sp)
    50d4:	213fffc4 	addi	r4,r4,-1
    50d8:	d9000515 	stw	r4,20(sp)
    50dc:	b42dc83a 	sub	r22,r22,r16
    50e0:	b5bfffc4 	addi	r22,r22,-1
    50e4:	b0026f16 	blt	r22,zero,5aa4 <_dtoa_r+0xc78>
    50e8:	d8000815 	stw	zero,32(sp)
    50ec:	d9c00517 	ldw	r7,20(sp)
    50f0:	38026416 	blt	r7,zero,5a84 <_dtoa_r+0xc58>
    50f4:	b1ed883a 	add	r22,r22,r7
    50f8:	d9c00d15 	stw	r7,52(sp)
    50fc:	d8000a15 	stw	zero,40(sp)
    5100:	d9800317 	ldw	r6,12(sp)
    5104:	00800244 	movi	r2,9
    5108:	11811436 	bltu	r2,r6,555c <_dtoa_r+0x730>
    510c:	00800144 	movi	r2,5
    5110:	1184e10e 	bge	r2,r6,6498 <_dtoa_r+0x166c>
    5114:	31bfff04 	addi	r6,r6,-4
    5118:	d9800315 	stw	r6,12(sp)
    511c:	0023883a 	mov	r17,zero
    5120:	d9800317 	ldw	r6,12(sp)
    5124:	008000c4 	movi	r2,3
    5128:	30836726 	beq	r6,r2,5ec8 <_dtoa_r+0x109c>
    512c:	1183410e 	bge	r2,r6,5e34 <_dtoa_r+0x1008>
    5130:	d9c00317 	ldw	r7,12(sp)
    5134:	00800104 	movi	r2,4
    5138:	38827c26 	beq	r7,r2,5b2c <_dtoa_r+0xd00>
    513c:	00800144 	movi	r2,5
    5140:	3884c41e 	bne	r7,r2,6454 <_dtoa_r+0x1628>
    5144:	00800044 	movi	r2,1
    5148:	d8800b15 	stw	r2,44(sp)
    514c:	d8c00517 	ldw	r3,20(sp)
    5150:	d9002217 	ldw	r4,136(sp)
    5154:	1907883a 	add	r3,r3,r4
    5158:	19800044 	addi	r6,r3,1
    515c:	d8c00c15 	stw	r3,48(sp)
    5160:	d9800615 	stw	r6,24(sp)
    5164:	0183a40e 	bge	zero,r6,5ff8 <_dtoa_r+0x11cc>
    5168:	d9800617 	ldw	r6,24(sp)
    516c:	3021883a 	mov	r16,r6
    5170:	e0001115 	stw	zero,68(fp)
    5174:	008005c4 	movi	r2,23
    5178:	1184c92e 	bgeu	r2,r6,64a0 <_dtoa_r+0x1674>
    517c:	00c00044 	movi	r3,1
    5180:	00800104 	movi	r2,4
    5184:	1085883a 	add	r2,r2,r2
    5188:	11000504 	addi	r4,r2,20
    518c:	180b883a 	mov	r5,r3
    5190:	18c00044 	addi	r3,r3,1
    5194:	313ffb2e 	bgeu	r6,r4,5184 <__alt_data_end+0xff005184>
    5198:	e1401115 	stw	r5,68(fp)
    519c:	e009883a 	mov	r4,fp
    51a0:	0007cbc0 	call	7cbc <_Balloc>
    51a4:	d8800715 	stw	r2,28(sp)
    51a8:	e0801015 	stw	r2,64(fp)
    51ac:	00800384 	movi	r2,14
    51b0:	1400f736 	bltu	r2,r16,5590 <_dtoa_r+0x764>
    51b4:	8800f626 	beq	r17,zero,5590 <_dtoa_r+0x764>
    51b8:	d9c00517 	ldw	r7,20(sp)
    51bc:	01c39a0e 	bge	zero,r7,6028 <_dtoa_r+0x11fc>
    51c0:	388003cc 	andi	r2,r7,15
    51c4:	100490fa 	slli	r2,r2,3
    51c8:	382bd13a 	srai	r21,r7,4
    51cc:	00c00074 	movhi	r3,1
    51d0:	18c54204 	addi	r3,r3,5384
    51d4:	1885883a 	add	r2,r3,r2
    51d8:	a8c0040c 	andi	r3,r21,16
    51dc:	12400017 	ldw	r9,0(r2)
    51e0:	12000117 	ldw	r8,4(r2)
    51e4:	18037926 	beq	r3,zero,5fcc <_dtoa_r+0x11a0>
    51e8:	00800074 	movhi	r2,1
    51ec:	10853804 	addi	r2,r2,5344
    51f0:	11800817 	ldw	r6,32(r2)
    51f4:	11c00917 	ldw	r7,36(r2)
    51f8:	9009883a 	mov	r4,r18
    51fc:	980b883a 	mov	r5,r19
    5200:	da001715 	stw	r8,92(sp)
    5204:	da401615 	stw	r9,88(sp)
    5208:	000c7800 	call	c780 <__divdf3>
    520c:	da001717 	ldw	r8,92(sp)
    5210:	da401617 	ldw	r9,88(sp)
    5214:	ad4003cc 	andi	r21,r21,15
    5218:	040000c4 	movi	r16,3
    521c:	1023883a 	mov	r17,r2
    5220:	1829883a 	mov	r20,r3
    5224:	a8001126 	beq	r21,zero,526c <_dtoa_r+0x440>
    5228:	05c00074 	movhi	r23,1
    522c:	bdc53804 	addi	r23,r23,5344
    5230:	4805883a 	mov	r2,r9
    5234:	4007883a 	mov	r3,r8
    5238:	a980004c 	andi	r6,r21,1
    523c:	1009883a 	mov	r4,r2
    5240:	a82bd07a 	srai	r21,r21,1
    5244:	180b883a 	mov	r5,r3
    5248:	30000426 	beq	r6,zero,525c <_dtoa_r+0x430>
    524c:	b9800017 	ldw	r6,0(r23)
    5250:	b9c00117 	ldw	r7,4(r23)
    5254:	84000044 	addi	r16,r16,1
    5258:	000d2c00 	call	d2c0 <__muldf3>
    525c:	bdc00204 	addi	r23,r23,8
    5260:	a83ff51e 	bne	r21,zero,5238 <__alt_data_end+0xff005238>
    5264:	1013883a 	mov	r9,r2
    5268:	1811883a 	mov	r8,r3
    526c:	480d883a 	mov	r6,r9
    5270:	400f883a 	mov	r7,r8
    5274:	8809883a 	mov	r4,r17
    5278:	a00b883a 	mov	r5,r20
    527c:	000c7800 	call	c780 <__divdf3>
    5280:	d8800f15 	stw	r2,60(sp)
    5284:	d8c01015 	stw	r3,64(sp)
    5288:	d8c00e17 	ldw	r3,56(sp)
    528c:	18000626 	beq	r3,zero,52a8 <_dtoa_r+0x47c>
    5290:	d9000f17 	ldw	r4,60(sp)
    5294:	d9401017 	ldw	r5,64(sp)
    5298:	000d883a 	mov	r6,zero
    529c:	01cffc34 	movhi	r7,16368
    52a0:	000d1cc0 	call	d1cc <__ledf2>
    52a4:	10040b16 	blt	r2,zero,62d4 <_dtoa_r+0x14a8>
    52a8:	8009883a 	mov	r4,r16
    52ac:	000e3540 	call	e354 <__floatsidf>
    52b0:	d9800f17 	ldw	r6,60(sp)
    52b4:	d9c01017 	ldw	r7,64(sp)
    52b8:	1009883a 	mov	r4,r2
    52bc:	180b883a 	mov	r5,r3
    52c0:	000d2c00 	call	d2c0 <__muldf3>
    52c4:	000d883a 	mov	r6,zero
    52c8:	01d00734 	movhi	r7,16412
    52cc:	1009883a 	mov	r4,r2
    52d0:	180b883a 	mov	r5,r3
    52d4:	000bed40 	call	bed4 <__adddf3>
    52d8:	1021883a 	mov	r16,r2
    52dc:	d8800617 	ldw	r2,24(sp)
    52e0:	047f3034 	movhi	r17,64704
    52e4:	1c63883a 	add	r17,r3,r17
    52e8:	10031826 	beq	r2,zero,5f4c <_dtoa_r+0x1120>
    52ec:	d8c00517 	ldw	r3,20(sp)
    52f0:	db000617 	ldw	r12,24(sp)
    52f4:	d8c01315 	stw	r3,76(sp)
    52f8:	d9000b17 	ldw	r4,44(sp)
    52fc:	20038f26 	beq	r4,zero,613c <_dtoa_r+0x1310>
    5300:	60bfffc4 	addi	r2,r12,-1
    5304:	100490fa 	slli	r2,r2,3
    5308:	00c00074 	movhi	r3,1
    530c:	18c54204 	addi	r3,r3,5384
    5310:	1885883a 	add	r2,r3,r2
    5314:	11800017 	ldw	r6,0(r2)
    5318:	11c00117 	ldw	r7,4(r2)
    531c:	d8800717 	ldw	r2,28(sp)
    5320:	0009883a 	mov	r4,zero
    5324:	014ff834 	movhi	r5,16352
    5328:	db001615 	stw	r12,88(sp)
    532c:	15c00044 	addi	r23,r2,1
    5330:	000c7800 	call	c780 <__divdf3>
    5334:	800d883a 	mov	r6,r16
    5338:	880f883a 	mov	r7,r17
    533c:	1009883a 	mov	r4,r2
    5340:	180b883a 	mov	r5,r3
    5344:	000d9d80 	call	d9d8 <__subdf3>
    5348:	d9401017 	ldw	r5,64(sp)
    534c:	d9000f17 	ldw	r4,60(sp)
    5350:	102b883a 	mov	r21,r2
    5354:	d8c01215 	stw	r3,72(sp)
    5358:	000e2d40 	call	e2d4 <__fixdfsi>
    535c:	1009883a 	mov	r4,r2
    5360:	1029883a 	mov	r20,r2
    5364:	000e3540 	call	e354 <__floatsidf>
    5368:	d9000f17 	ldw	r4,60(sp)
    536c:	d9401017 	ldw	r5,64(sp)
    5370:	100d883a 	mov	r6,r2
    5374:	180f883a 	mov	r7,r3
    5378:	000d9d80 	call	d9d8 <__subdf3>
    537c:	1823883a 	mov	r17,r3
    5380:	d8c00717 	ldw	r3,28(sp)
    5384:	d9401217 	ldw	r5,72(sp)
    5388:	a2000c04 	addi	r8,r20,48
    538c:	1021883a 	mov	r16,r2
    5390:	1a000005 	stb	r8,0(r3)
    5394:	800d883a 	mov	r6,r16
    5398:	880f883a 	mov	r7,r17
    539c:	a809883a 	mov	r4,r21
    53a0:	4029883a 	mov	r20,r8
    53a4:	000d0f00 	call	d0f0 <__gedf2>
    53a8:	00841d16 	blt	zero,r2,6420 <_dtoa_r+0x15f4>
    53ac:	800d883a 	mov	r6,r16
    53b0:	880f883a 	mov	r7,r17
    53b4:	0009883a 	mov	r4,zero
    53b8:	014ffc34 	movhi	r5,16368
    53bc:	000d9d80 	call	d9d8 <__subdf3>
    53c0:	d9401217 	ldw	r5,72(sp)
    53c4:	100d883a 	mov	r6,r2
    53c8:	180f883a 	mov	r7,r3
    53cc:	a809883a 	mov	r4,r21
    53d0:	000d0f00 	call	d0f0 <__gedf2>
    53d4:	db001617 	ldw	r12,88(sp)
    53d8:	00840e16 	blt	zero,r2,6414 <_dtoa_r+0x15e8>
    53dc:	00800044 	movi	r2,1
    53e0:	13006b0e 	bge	r2,r12,5590 <_dtoa_r+0x764>
    53e4:	d9000717 	ldw	r4,28(sp)
    53e8:	dd800f15 	stw	r22,60(sp)
    53ec:	dcc01015 	stw	r19,64(sp)
    53f0:	2319883a 	add	r12,r4,r12
    53f4:	dcc01217 	ldw	r19,72(sp)
    53f8:	602d883a 	mov	r22,r12
    53fc:	dc801215 	stw	r18,72(sp)
    5400:	b825883a 	mov	r18,r23
    5404:	00000906 	br	542c <_dtoa_r+0x600>
    5408:	000d9d80 	call	d9d8 <__subdf3>
    540c:	a80d883a 	mov	r6,r21
    5410:	980f883a 	mov	r7,r19
    5414:	1009883a 	mov	r4,r2
    5418:	180b883a 	mov	r5,r3
    541c:	000d1cc0 	call	d1cc <__ledf2>
    5420:	1003e816 	blt	r2,zero,63c4 <_dtoa_r+0x1598>
    5424:	b825883a 	mov	r18,r23
    5428:	bd83e926 	beq	r23,r22,63d0 <_dtoa_r+0x15a4>
    542c:	a809883a 	mov	r4,r21
    5430:	980b883a 	mov	r5,r19
    5434:	000d883a 	mov	r6,zero
    5438:	01d00934 	movhi	r7,16420
    543c:	000d2c00 	call	d2c0 <__muldf3>
    5440:	000d883a 	mov	r6,zero
    5444:	01d00934 	movhi	r7,16420
    5448:	8009883a 	mov	r4,r16
    544c:	880b883a 	mov	r5,r17
    5450:	102b883a 	mov	r21,r2
    5454:	1827883a 	mov	r19,r3
    5458:	000d2c00 	call	d2c0 <__muldf3>
    545c:	180b883a 	mov	r5,r3
    5460:	1009883a 	mov	r4,r2
    5464:	1821883a 	mov	r16,r3
    5468:	1023883a 	mov	r17,r2
    546c:	000e2d40 	call	e2d4 <__fixdfsi>
    5470:	1009883a 	mov	r4,r2
    5474:	1029883a 	mov	r20,r2
    5478:	000e3540 	call	e354 <__floatsidf>
    547c:	8809883a 	mov	r4,r17
    5480:	800b883a 	mov	r5,r16
    5484:	100d883a 	mov	r6,r2
    5488:	180f883a 	mov	r7,r3
    548c:	000d9d80 	call	d9d8 <__subdf3>
    5490:	a5000c04 	addi	r20,r20,48
    5494:	a80d883a 	mov	r6,r21
    5498:	980f883a 	mov	r7,r19
    549c:	1009883a 	mov	r4,r2
    54a0:	180b883a 	mov	r5,r3
    54a4:	95000005 	stb	r20,0(r18)
    54a8:	1021883a 	mov	r16,r2
    54ac:	1823883a 	mov	r17,r3
    54b0:	000d1cc0 	call	d1cc <__ledf2>
    54b4:	bdc00044 	addi	r23,r23,1
    54b8:	800d883a 	mov	r6,r16
    54bc:	880f883a 	mov	r7,r17
    54c0:	0009883a 	mov	r4,zero
    54c4:	014ffc34 	movhi	r5,16368
    54c8:	103fcf0e 	bge	r2,zero,5408 <__alt_data_end+0xff005408>
    54cc:	d8c01317 	ldw	r3,76(sp)
    54d0:	d8c00515 	stw	r3,20(sp)
    54d4:	d9400917 	ldw	r5,36(sp)
    54d8:	e009883a 	mov	r4,fp
    54dc:	0007d640 	call	7d64 <_Bfree>
    54e0:	d9000517 	ldw	r4,20(sp)
    54e4:	d9802317 	ldw	r6,140(sp)
    54e8:	d9c02517 	ldw	r7,148(sp)
    54ec:	b8000005 	stb	zero,0(r23)
    54f0:	20800044 	addi	r2,r4,1
    54f4:	30800015 	stw	r2,0(r6)
    54f8:	3802aa26 	beq	r7,zero,5fa4 <_dtoa_r+0x1178>
    54fc:	3dc00015 	stw	r23,0(r7)
    5500:	d8800717 	ldw	r2,28(sp)
    5504:	003e7906 	br	4eec <__alt_data_end+0xff004eec>
    5508:	00800434 	movhi	r2,16
    550c:	10bfffc4 	addi	r2,r2,-1
    5510:	88a2703a 	and	r17,r17,r2
    5514:	883e851e 	bne	r17,zero,4f2c <__alt_data_end+0xff004f2c>
    5518:	00800074 	movhi	r2,1
    551c:	10852304 	addi	r2,r2,5260
    5520:	003e8406 	br	4f34 <__alt_data_end+0xff004f34>
    5524:	10c00204 	addi	r3,r2,8
    5528:	003e8706 	br	4f48 <__alt_data_end+0xff004f48>
    552c:	01400434 	movhi	r5,16
    5530:	297fffc4 	addi	r5,r5,-1
    5534:	994a703a 	and	r5,r19,r5
    5538:	9009883a 	mov	r4,r18
    553c:	843f0044 	addi	r16,r16,-1023
    5540:	294ffc34 	orhi	r5,r5,16368
    5544:	dd800217 	ldw	r22,8(sp)
    5548:	d8001115 	stw	zero,68(sp)
    554c:	003ea506 	br	4fe4 <__alt_data_end+0xff004fe4>
    5550:	00800074 	movhi	r2,1
    5554:	10851a04 	addi	r2,r2,5224
    5558:	003e6406 	br	4eec <__alt_data_end+0xff004eec>
    555c:	e0001115 	stw	zero,68(fp)
    5560:	000b883a 	mov	r5,zero
    5564:	e009883a 	mov	r4,fp
    5568:	0007cbc0 	call	7cbc <_Balloc>
    556c:	01bfffc4 	movi	r6,-1
    5570:	01c00044 	movi	r7,1
    5574:	d8800715 	stw	r2,28(sp)
    5578:	d9800c15 	stw	r6,48(sp)
    557c:	e0801015 	stw	r2,64(fp)
    5580:	d8000315 	stw	zero,12(sp)
    5584:	d9c00b15 	stw	r7,44(sp)
    5588:	d9800615 	stw	r6,24(sp)
    558c:	d8002215 	stw	zero,136(sp)
    5590:	d8800117 	ldw	r2,4(sp)
    5594:	10008916 	blt	r2,zero,57bc <_dtoa_r+0x990>
    5598:	d9000517 	ldw	r4,20(sp)
    559c:	00c00384 	movi	r3,14
    55a0:	19008616 	blt	r3,r4,57bc <_dtoa_r+0x990>
    55a4:	200490fa 	slli	r2,r4,3
    55a8:	00c00074 	movhi	r3,1
    55ac:	d9802217 	ldw	r6,136(sp)
    55b0:	18c54204 	addi	r3,r3,5384
    55b4:	1885883a 	add	r2,r3,r2
    55b8:	14000017 	ldw	r16,0(r2)
    55bc:	14400117 	ldw	r17,4(r2)
    55c0:	30016316 	blt	r6,zero,5b50 <_dtoa_r+0xd24>
    55c4:	800d883a 	mov	r6,r16
    55c8:	880f883a 	mov	r7,r17
    55cc:	9009883a 	mov	r4,r18
    55d0:	980b883a 	mov	r5,r19
    55d4:	000c7800 	call	c780 <__divdf3>
    55d8:	180b883a 	mov	r5,r3
    55dc:	1009883a 	mov	r4,r2
    55e0:	000e2d40 	call	e2d4 <__fixdfsi>
    55e4:	1009883a 	mov	r4,r2
    55e8:	102b883a 	mov	r21,r2
    55ec:	000e3540 	call	e354 <__floatsidf>
    55f0:	800d883a 	mov	r6,r16
    55f4:	880f883a 	mov	r7,r17
    55f8:	1009883a 	mov	r4,r2
    55fc:	180b883a 	mov	r5,r3
    5600:	000d2c00 	call	d2c0 <__muldf3>
    5604:	100d883a 	mov	r6,r2
    5608:	180f883a 	mov	r7,r3
    560c:	9009883a 	mov	r4,r18
    5610:	980b883a 	mov	r5,r19
    5614:	000d9d80 	call	d9d8 <__subdf3>
    5618:	d9c00717 	ldw	r7,28(sp)
    561c:	1009883a 	mov	r4,r2
    5620:	a8800c04 	addi	r2,r21,48
    5624:	38800005 	stb	r2,0(r7)
    5628:	3dc00044 	addi	r23,r7,1
    562c:	d9c00617 	ldw	r7,24(sp)
    5630:	01800044 	movi	r6,1
    5634:	180b883a 	mov	r5,r3
    5638:	2005883a 	mov	r2,r4
    563c:	39803826 	beq	r7,r6,5720 <_dtoa_r+0x8f4>
    5640:	000d883a 	mov	r6,zero
    5644:	01d00934 	movhi	r7,16420
    5648:	000d2c00 	call	d2c0 <__muldf3>
    564c:	000d883a 	mov	r6,zero
    5650:	000f883a 	mov	r7,zero
    5654:	1009883a 	mov	r4,r2
    5658:	180b883a 	mov	r5,r3
    565c:	1025883a 	mov	r18,r2
    5660:	1827883a 	mov	r19,r3
    5664:	000d0680 	call	d068 <__eqdf2>
    5668:	103f9a26 	beq	r2,zero,54d4 <__alt_data_end+0xff0054d4>
    566c:	d9c00617 	ldw	r7,24(sp)
    5670:	d8c00717 	ldw	r3,28(sp)
    5674:	b829883a 	mov	r20,r23
    5678:	38bfffc4 	addi	r2,r7,-1
    567c:	18ad883a 	add	r22,r3,r2
    5680:	00000a06 	br	56ac <_dtoa_r+0x880>
    5684:	000d2c00 	call	d2c0 <__muldf3>
    5688:	000d883a 	mov	r6,zero
    568c:	000f883a 	mov	r7,zero
    5690:	1009883a 	mov	r4,r2
    5694:	180b883a 	mov	r5,r3
    5698:	1025883a 	mov	r18,r2
    569c:	1827883a 	mov	r19,r3
    56a0:	b829883a 	mov	r20,r23
    56a4:	000d0680 	call	d068 <__eqdf2>
    56a8:	103f8a26 	beq	r2,zero,54d4 <__alt_data_end+0xff0054d4>
    56ac:	800d883a 	mov	r6,r16
    56b0:	880f883a 	mov	r7,r17
    56b4:	9009883a 	mov	r4,r18
    56b8:	980b883a 	mov	r5,r19
    56bc:	000c7800 	call	c780 <__divdf3>
    56c0:	180b883a 	mov	r5,r3
    56c4:	1009883a 	mov	r4,r2
    56c8:	000e2d40 	call	e2d4 <__fixdfsi>
    56cc:	1009883a 	mov	r4,r2
    56d0:	102b883a 	mov	r21,r2
    56d4:	000e3540 	call	e354 <__floatsidf>
    56d8:	800d883a 	mov	r6,r16
    56dc:	880f883a 	mov	r7,r17
    56e0:	1009883a 	mov	r4,r2
    56e4:	180b883a 	mov	r5,r3
    56e8:	000d2c00 	call	d2c0 <__muldf3>
    56ec:	100d883a 	mov	r6,r2
    56f0:	180f883a 	mov	r7,r3
    56f4:	9009883a 	mov	r4,r18
    56f8:	980b883a 	mov	r5,r19
    56fc:	000d9d80 	call	d9d8 <__subdf3>
    5700:	aa000c04 	addi	r8,r21,48
    5704:	a2000005 	stb	r8,0(r20)
    5708:	000d883a 	mov	r6,zero
    570c:	01d00934 	movhi	r7,16420
    5710:	1009883a 	mov	r4,r2
    5714:	180b883a 	mov	r5,r3
    5718:	a5c00044 	addi	r23,r20,1
    571c:	b53fd91e 	bne	r22,r20,5684 <__alt_data_end+0xff005684>
    5720:	100d883a 	mov	r6,r2
    5724:	180f883a 	mov	r7,r3
    5728:	1009883a 	mov	r4,r2
    572c:	180b883a 	mov	r5,r3
    5730:	000bed40 	call	bed4 <__adddf3>
    5734:	100d883a 	mov	r6,r2
    5738:	180f883a 	mov	r7,r3
    573c:	8009883a 	mov	r4,r16
    5740:	880b883a 	mov	r5,r17
    5744:	1027883a 	mov	r19,r2
    5748:	1825883a 	mov	r18,r3
    574c:	000d1cc0 	call	d1cc <__ledf2>
    5750:	10000816 	blt	r2,zero,5774 <_dtoa_r+0x948>
    5754:	980d883a 	mov	r6,r19
    5758:	900f883a 	mov	r7,r18
    575c:	8009883a 	mov	r4,r16
    5760:	880b883a 	mov	r5,r17
    5764:	000d0680 	call	d068 <__eqdf2>
    5768:	103f5a1e 	bne	r2,zero,54d4 <__alt_data_end+0xff0054d4>
    576c:	ad40004c 	andi	r21,r21,1
    5770:	a83f5826 	beq	r21,zero,54d4 <__alt_data_end+0xff0054d4>
    5774:	bd3fffc3 	ldbu	r20,-1(r23)
    5778:	b8bfffc4 	addi	r2,r23,-1
    577c:	1007883a 	mov	r3,r2
    5780:	01400e44 	movi	r5,57
    5784:	d9800717 	ldw	r6,28(sp)
    5788:	00000506 	br	57a0 <_dtoa_r+0x974>
    578c:	18ffffc4 	addi	r3,r3,-1
    5790:	11824726 	beq	r2,r6,60b0 <_dtoa_r+0x1284>
    5794:	1d000003 	ldbu	r20,0(r3)
    5798:	102f883a 	mov	r23,r2
    579c:	10bfffc4 	addi	r2,r2,-1
    57a0:	a1003fcc 	andi	r4,r20,255
    57a4:	2100201c 	xori	r4,r4,128
    57a8:	213fe004 	addi	r4,r4,-128
    57ac:	217ff726 	beq	r4,r5,578c <__alt_data_end+0xff00578c>
    57b0:	a2000044 	addi	r8,r20,1
    57b4:	12000005 	stb	r8,0(r2)
    57b8:	003f4606 	br	54d4 <__alt_data_end+0xff0054d4>
    57bc:	d9000b17 	ldw	r4,44(sp)
    57c0:	2000c826 	beq	r4,zero,5ae4 <_dtoa_r+0xcb8>
    57c4:	d9800317 	ldw	r6,12(sp)
    57c8:	00c00044 	movi	r3,1
    57cc:	1980f90e 	bge	r3,r6,5bb4 <_dtoa_r+0xd88>
    57d0:	d8800617 	ldw	r2,24(sp)
    57d4:	d8c00a17 	ldw	r3,40(sp)
    57d8:	157fffc4 	addi	r21,r2,-1
    57dc:	1d41f316 	blt	r3,r21,5fac <_dtoa_r+0x1180>
    57e0:	1d6bc83a 	sub	r21,r3,r21
    57e4:	d9c00617 	ldw	r7,24(sp)
    57e8:	3802aa16 	blt	r7,zero,6294 <_dtoa_r+0x1468>
    57ec:	dd000817 	ldw	r20,32(sp)
    57f0:	d8800617 	ldw	r2,24(sp)
    57f4:	d8c00817 	ldw	r3,32(sp)
    57f8:	01400044 	movi	r5,1
    57fc:	e009883a 	mov	r4,fp
    5800:	1887883a 	add	r3,r3,r2
    5804:	d8c00815 	stw	r3,32(sp)
    5808:	b0ad883a 	add	r22,r22,r2
    580c:	00080c80 	call	80c8 <__i2b>
    5810:	1023883a 	mov	r17,r2
    5814:	a0000826 	beq	r20,zero,5838 <_dtoa_r+0xa0c>
    5818:	0580070e 	bge	zero,r22,5838 <_dtoa_r+0xa0c>
    581c:	a005883a 	mov	r2,r20
    5820:	b500b916 	blt	r22,r20,5b08 <_dtoa_r+0xcdc>
    5824:	d9000817 	ldw	r4,32(sp)
    5828:	a0a9c83a 	sub	r20,r20,r2
    582c:	b0adc83a 	sub	r22,r22,r2
    5830:	2089c83a 	sub	r4,r4,r2
    5834:	d9000815 	stw	r4,32(sp)
    5838:	d9800a17 	ldw	r6,40(sp)
    583c:	0181810e 	bge	zero,r6,5e44 <_dtoa_r+0x1018>
    5840:	d9c00b17 	ldw	r7,44(sp)
    5844:	3800b326 	beq	r7,zero,5b14 <_dtoa_r+0xce8>
    5848:	a800b226 	beq	r21,zero,5b14 <_dtoa_r+0xce8>
    584c:	880b883a 	mov	r5,r17
    5850:	a80d883a 	mov	r6,r21
    5854:	e009883a 	mov	r4,fp
    5858:	00082fc0 	call	82fc <__pow5mult>
    585c:	d9800917 	ldw	r6,36(sp)
    5860:	100b883a 	mov	r5,r2
    5864:	e009883a 	mov	r4,fp
    5868:	1023883a 	mov	r17,r2
    586c:	00081040 	call	8104 <__multiply>
    5870:	1021883a 	mov	r16,r2
    5874:	d8800a17 	ldw	r2,40(sp)
    5878:	d9400917 	ldw	r5,36(sp)
    587c:	e009883a 	mov	r4,fp
    5880:	1545c83a 	sub	r2,r2,r21
    5884:	d8800a15 	stw	r2,40(sp)
    5888:	0007d640 	call	7d64 <_Bfree>
    588c:	d8c00a17 	ldw	r3,40(sp)
    5890:	18009f1e 	bne	r3,zero,5b10 <_dtoa_r+0xce4>
    5894:	05c00044 	movi	r23,1
    5898:	e009883a 	mov	r4,fp
    589c:	b80b883a 	mov	r5,r23
    58a0:	00080c80 	call	80c8 <__i2b>
    58a4:	d9000d17 	ldw	r4,52(sp)
    58a8:	102b883a 	mov	r21,r2
    58ac:	2000ce26 	beq	r4,zero,5be8 <_dtoa_r+0xdbc>
    58b0:	200d883a 	mov	r6,r4
    58b4:	100b883a 	mov	r5,r2
    58b8:	e009883a 	mov	r4,fp
    58bc:	00082fc0 	call	82fc <__pow5mult>
    58c0:	d9800317 	ldw	r6,12(sp)
    58c4:	102b883a 	mov	r21,r2
    58c8:	b981810e 	bge	r23,r6,5ed0 <_dtoa_r+0x10a4>
    58cc:	0027883a 	mov	r19,zero
    58d0:	a8800417 	ldw	r2,16(r21)
    58d4:	05c00804 	movi	r23,32
    58d8:	10800104 	addi	r2,r2,4
    58dc:	1085883a 	add	r2,r2,r2
    58e0:	1085883a 	add	r2,r2,r2
    58e4:	a885883a 	add	r2,r21,r2
    58e8:	11000017 	ldw	r4,0(r2)
    58ec:	0007fb00 	call	7fb0 <__hi0bits>
    58f0:	b885c83a 	sub	r2,r23,r2
    58f4:	1585883a 	add	r2,r2,r22
    58f8:	108007cc 	andi	r2,r2,31
    58fc:	1000b326 	beq	r2,zero,5bcc <_dtoa_r+0xda0>
    5900:	00c00804 	movi	r3,32
    5904:	1887c83a 	sub	r3,r3,r2
    5908:	01000104 	movi	r4,4
    590c:	20c2cd0e 	bge	r4,r3,6444 <_dtoa_r+0x1618>
    5910:	00c00704 	movi	r3,28
    5914:	1885c83a 	sub	r2,r3,r2
    5918:	d8c00817 	ldw	r3,32(sp)
    591c:	a0a9883a 	add	r20,r20,r2
    5920:	b0ad883a 	add	r22,r22,r2
    5924:	1887883a 	add	r3,r3,r2
    5928:	d8c00815 	stw	r3,32(sp)
    592c:	d9800817 	ldw	r6,32(sp)
    5930:	0180040e 	bge	zero,r6,5944 <_dtoa_r+0xb18>
    5934:	800b883a 	mov	r5,r16
    5938:	e009883a 	mov	r4,fp
    593c:	000843c0 	call	843c <__lshift>
    5940:	1021883a 	mov	r16,r2
    5944:	0580050e 	bge	zero,r22,595c <_dtoa_r+0xb30>
    5948:	a80b883a 	mov	r5,r21
    594c:	b00d883a 	mov	r6,r22
    5950:	e009883a 	mov	r4,fp
    5954:	000843c0 	call	843c <__lshift>
    5958:	102b883a 	mov	r21,r2
    595c:	d9c00e17 	ldw	r7,56(sp)
    5960:	3801211e 	bne	r7,zero,5de8 <_dtoa_r+0xfbc>
    5964:	d9800617 	ldw	r6,24(sp)
    5968:	0181380e 	bge	zero,r6,5e4c <_dtoa_r+0x1020>
    596c:	d8c00b17 	ldw	r3,44(sp)
    5970:	1800ab1e 	bne	r3,zero,5c20 <_dtoa_r+0xdf4>
    5974:	dc800717 	ldw	r18,28(sp)
    5978:	dcc00617 	ldw	r19,24(sp)
    597c:	9029883a 	mov	r20,r18
    5980:	00000206 	br	598c <_dtoa_r+0xb60>
    5984:	0007d8c0 	call	7d8c <__multadd>
    5988:	1021883a 	mov	r16,r2
    598c:	a80b883a 	mov	r5,r21
    5990:	8009883a 	mov	r4,r16
    5994:	0004c2c0 	call	4c2c <quorem>
    5998:	10800c04 	addi	r2,r2,48
    599c:	90800005 	stb	r2,0(r18)
    59a0:	94800044 	addi	r18,r18,1
    59a4:	9507c83a 	sub	r3,r18,r20
    59a8:	000f883a 	mov	r7,zero
    59ac:	01800284 	movi	r6,10
    59b0:	800b883a 	mov	r5,r16
    59b4:	e009883a 	mov	r4,fp
    59b8:	1cfff216 	blt	r3,r19,5984 <__alt_data_end+0xff005984>
    59bc:	1011883a 	mov	r8,r2
    59c0:	d8800617 	ldw	r2,24(sp)
    59c4:	0082370e 	bge	zero,r2,62a4 <_dtoa_r+0x1478>
    59c8:	d9000717 	ldw	r4,28(sp)
    59cc:	0025883a 	mov	r18,zero
    59d0:	20af883a 	add	r23,r4,r2
    59d4:	01800044 	movi	r6,1
    59d8:	800b883a 	mov	r5,r16
    59dc:	e009883a 	mov	r4,fp
    59e0:	da001715 	stw	r8,92(sp)
    59e4:	000843c0 	call	843c <__lshift>
    59e8:	a80b883a 	mov	r5,r21
    59ec:	1009883a 	mov	r4,r2
    59f0:	d8800915 	stw	r2,36(sp)
    59f4:	00085840 	call	8584 <__mcmp>
    59f8:	da001717 	ldw	r8,92(sp)
    59fc:	0081800e 	bge	zero,r2,6000 <_dtoa_r+0x11d4>
    5a00:	b93fffc3 	ldbu	r4,-1(r23)
    5a04:	b8bfffc4 	addi	r2,r23,-1
    5a08:	1007883a 	mov	r3,r2
    5a0c:	01800e44 	movi	r6,57
    5a10:	d9c00717 	ldw	r7,28(sp)
    5a14:	00000506 	br	5a2c <_dtoa_r+0xc00>
    5a18:	18ffffc4 	addi	r3,r3,-1
    5a1c:	11c12326 	beq	r2,r7,5eac <_dtoa_r+0x1080>
    5a20:	19000003 	ldbu	r4,0(r3)
    5a24:	102f883a 	mov	r23,r2
    5a28:	10bfffc4 	addi	r2,r2,-1
    5a2c:	21403fcc 	andi	r5,r4,255
    5a30:	2940201c 	xori	r5,r5,128
    5a34:	297fe004 	addi	r5,r5,-128
    5a38:	29bff726 	beq	r5,r6,5a18 <__alt_data_end+0xff005a18>
    5a3c:	21000044 	addi	r4,r4,1
    5a40:	11000005 	stb	r4,0(r2)
    5a44:	a80b883a 	mov	r5,r21
    5a48:	e009883a 	mov	r4,fp
    5a4c:	0007d640 	call	7d64 <_Bfree>
    5a50:	883ea026 	beq	r17,zero,54d4 <__alt_data_end+0xff0054d4>
    5a54:	90000426 	beq	r18,zero,5a68 <_dtoa_r+0xc3c>
    5a58:	94400326 	beq	r18,r17,5a68 <_dtoa_r+0xc3c>
    5a5c:	900b883a 	mov	r5,r18
    5a60:	e009883a 	mov	r4,fp
    5a64:	0007d640 	call	7d64 <_Bfree>
    5a68:	880b883a 	mov	r5,r17
    5a6c:	e009883a 	mov	r4,fp
    5a70:	0007d640 	call	7d64 <_Bfree>
    5a74:	003e9706 	br	54d4 <__alt_data_end+0xff0054d4>
    5a78:	01800044 	movi	r6,1
    5a7c:	d9800e15 	stw	r6,56(sp)
    5a80:	003d9606 	br	50dc <__alt_data_end+0xff0050dc>
    5a84:	d8800817 	ldw	r2,32(sp)
    5a88:	d8c00517 	ldw	r3,20(sp)
    5a8c:	d8000d15 	stw	zero,52(sp)
    5a90:	10c5c83a 	sub	r2,r2,r3
    5a94:	00c9c83a 	sub	r4,zero,r3
    5a98:	d8800815 	stw	r2,32(sp)
    5a9c:	d9000a15 	stw	r4,40(sp)
    5aa0:	003d9706 	br	5100 <__alt_data_end+0xff005100>
    5aa4:	05adc83a 	sub	r22,zero,r22
    5aa8:	dd800815 	stw	r22,32(sp)
    5aac:	002d883a 	mov	r22,zero
    5ab0:	003d8e06 	br	50ec <__alt_data_end+0xff0050ec>
    5ab4:	d9000517 	ldw	r4,20(sp)
    5ab8:	000e3540 	call	e354 <__floatsidf>
    5abc:	100d883a 	mov	r6,r2
    5ac0:	180f883a 	mov	r7,r3
    5ac4:	a009883a 	mov	r4,r20
    5ac8:	880b883a 	mov	r5,r17
    5acc:	000d0680 	call	d068 <__eqdf2>
    5ad0:	103d7126 	beq	r2,zero,5098 <__alt_data_end+0xff005098>
    5ad4:	d9c00517 	ldw	r7,20(sp)
    5ad8:	39ffffc4 	addi	r7,r7,-1
    5adc:	d9c00515 	stw	r7,20(sp)
    5ae0:	003d6d06 	br	5098 <__alt_data_end+0xff005098>
    5ae4:	dd400a17 	ldw	r21,40(sp)
    5ae8:	dd000817 	ldw	r20,32(sp)
    5aec:	0023883a 	mov	r17,zero
    5af0:	003f4806 	br	5814 <__alt_data_end+0xff005814>
    5af4:	10e3c83a 	sub	r17,r2,r3
    5af8:	9448983a 	sll	r4,r18,r17
    5afc:	003d3206 	br	4fc8 <__alt_data_end+0xff004fc8>
    5b00:	d8000e15 	stw	zero,56(sp)
    5b04:	003d7506 	br	50dc <__alt_data_end+0xff0050dc>
    5b08:	b005883a 	mov	r2,r22
    5b0c:	003f4506 	br	5824 <__alt_data_end+0xff005824>
    5b10:	dc000915 	stw	r16,36(sp)
    5b14:	d9800a17 	ldw	r6,40(sp)
    5b18:	d9400917 	ldw	r5,36(sp)
    5b1c:	e009883a 	mov	r4,fp
    5b20:	00082fc0 	call	82fc <__pow5mult>
    5b24:	1021883a 	mov	r16,r2
    5b28:	003f5a06 	br	5894 <__alt_data_end+0xff005894>
    5b2c:	01c00044 	movi	r7,1
    5b30:	d9c00b15 	stw	r7,44(sp)
    5b34:	d8802217 	ldw	r2,136(sp)
    5b38:	0081280e 	bge	zero,r2,5fdc <_dtoa_r+0x11b0>
    5b3c:	100d883a 	mov	r6,r2
    5b40:	1021883a 	mov	r16,r2
    5b44:	d8800c15 	stw	r2,48(sp)
    5b48:	d8800615 	stw	r2,24(sp)
    5b4c:	003d8806 	br	5170 <__alt_data_end+0xff005170>
    5b50:	d8800617 	ldw	r2,24(sp)
    5b54:	00be9b16 	blt	zero,r2,55c4 <__alt_data_end+0xff0055c4>
    5b58:	10010f1e 	bne	r2,zero,5f98 <_dtoa_r+0x116c>
    5b5c:	880b883a 	mov	r5,r17
    5b60:	000d883a 	mov	r6,zero
    5b64:	01d00534 	movhi	r7,16404
    5b68:	8009883a 	mov	r4,r16
    5b6c:	000d2c00 	call	d2c0 <__muldf3>
    5b70:	900d883a 	mov	r6,r18
    5b74:	980f883a 	mov	r7,r19
    5b78:	1009883a 	mov	r4,r2
    5b7c:	180b883a 	mov	r5,r3
    5b80:	000d0f00 	call	d0f0 <__gedf2>
    5b84:	002b883a 	mov	r21,zero
    5b88:	0023883a 	mov	r17,zero
    5b8c:	1000bf16 	blt	r2,zero,5e8c <_dtoa_r+0x1060>
    5b90:	d9802217 	ldw	r6,136(sp)
    5b94:	ddc00717 	ldw	r23,28(sp)
    5b98:	018c303a 	nor	r6,zero,r6
    5b9c:	d9800515 	stw	r6,20(sp)
    5ba0:	a80b883a 	mov	r5,r21
    5ba4:	e009883a 	mov	r4,fp
    5ba8:	0007d640 	call	7d64 <_Bfree>
    5bac:	883e4926 	beq	r17,zero,54d4 <__alt_data_end+0xff0054d4>
    5bb0:	003fad06 	br	5a68 <__alt_data_end+0xff005a68>
    5bb4:	d9c01117 	ldw	r7,68(sp)
    5bb8:	3801bc26 	beq	r7,zero,62ac <_dtoa_r+0x1480>
    5bbc:	10810cc4 	addi	r2,r2,1075
    5bc0:	dd400a17 	ldw	r21,40(sp)
    5bc4:	dd000817 	ldw	r20,32(sp)
    5bc8:	003f0a06 	br	57f4 <__alt_data_end+0xff0057f4>
    5bcc:	00800704 	movi	r2,28
    5bd0:	d9000817 	ldw	r4,32(sp)
    5bd4:	a0a9883a 	add	r20,r20,r2
    5bd8:	b0ad883a 	add	r22,r22,r2
    5bdc:	2089883a 	add	r4,r4,r2
    5be0:	d9000815 	stw	r4,32(sp)
    5be4:	003f5106 	br	592c <__alt_data_end+0xff00592c>
    5be8:	d8c00317 	ldw	r3,12(sp)
    5bec:	b8c1fc0e 	bge	r23,r3,63e0 <_dtoa_r+0x15b4>
    5bf0:	0027883a 	mov	r19,zero
    5bf4:	b805883a 	mov	r2,r23
    5bf8:	003f3e06 	br	58f4 <__alt_data_end+0xff0058f4>
    5bfc:	880b883a 	mov	r5,r17
    5c00:	e009883a 	mov	r4,fp
    5c04:	000f883a 	mov	r7,zero
    5c08:	01800284 	movi	r6,10
    5c0c:	0007d8c0 	call	7d8c <__multadd>
    5c10:	d9000c17 	ldw	r4,48(sp)
    5c14:	1023883a 	mov	r17,r2
    5c18:	0102040e 	bge	zero,r4,642c <_dtoa_r+0x1600>
    5c1c:	d9000615 	stw	r4,24(sp)
    5c20:	0500050e 	bge	zero,r20,5c38 <_dtoa_r+0xe0c>
    5c24:	880b883a 	mov	r5,r17
    5c28:	a00d883a 	mov	r6,r20
    5c2c:	e009883a 	mov	r4,fp
    5c30:	000843c0 	call	843c <__lshift>
    5c34:	1023883a 	mov	r17,r2
    5c38:	9801241e 	bne	r19,zero,60cc <_dtoa_r+0x12a0>
    5c3c:	8829883a 	mov	r20,r17
    5c40:	d9000617 	ldw	r4,24(sp)
    5c44:	dcc00717 	ldw	r19,28(sp)
    5c48:	9480004c 	andi	r18,r18,1
    5c4c:	20bfffc4 	addi	r2,r4,-1
    5c50:	9885883a 	add	r2,r19,r2
    5c54:	d8800415 	stw	r2,16(sp)
    5c58:	dc800615 	stw	r18,24(sp)
    5c5c:	a80b883a 	mov	r5,r21
    5c60:	8009883a 	mov	r4,r16
    5c64:	0004c2c0 	call	4c2c <quorem>
    5c68:	880b883a 	mov	r5,r17
    5c6c:	8009883a 	mov	r4,r16
    5c70:	102f883a 	mov	r23,r2
    5c74:	00085840 	call	8584 <__mcmp>
    5c78:	a80b883a 	mov	r5,r21
    5c7c:	a00d883a 	mov	r6,r20
    5c80:	e009883a 	mov	r4,fp
    5c84:	102d883a 	mov	r22,r2
    5c88:	00085e40 	call	85e4 <__mdiff>
    5c8c:	1007883a 	mov	r3,r2
    5c90:	10800317 	ldw	r2,12(r2)
    5c94:	bc800c04 	addi	r18,r23,48
    5c98:	180b883a 	mov	r5,r3
    5c9c:	10004e1e 	bne	r2,zero,5dd8 <_dtoa_r+0xfac>
    5ca0:	8009883a 	mov	r4,r16
    5ca4:	d8c01615 	stw	r3,88(sp)
    5ca8:	00085840 	call	8584 <__mcmp>
    5cac:	d8c01617 	ldw	r3,88(sp)
    5cb0:	e009883a 	mov	r4,fp
    5cb4:	d8801615 	stw	r2,88(sp)
    5cb8:	180b883a 	mov	r5,r3
    5cbc:	0007d640 	call	7d64 <_Bfree>
    5cc0:	d8801617 	ldw	r2,88(sp)
    5cc4:	1000041e 	bne	r2,zero,5cd8 <_dtoa_r+0xeac>
    5cc8:	d9800317 	ldw	r6,12(sp)
    5ccc:	3000021e 	bne	r6,zero,5cd8 <_dtoa_r+0xeac>
    5cd0:	d8c00617 	ldw	r3,24(sp)
    5cd4:	18003726 	beq	r3,zero,5db4 <_dtoa_r+0xf88>
    5cd8:	b0002016 	blt	r22,zero,5d5c <_dtoa_r+0xf30>
    5cdc:	b000041e 	bne	r22,zero,5cf0 <_dtoa_r+0xec4>
    5ce0:	d9000317 	ldw	r4,12(sp)
    5ce4:	2000021e 	bne	r4,zero,5cf0 <_dtoa_r+0xec4>
    5ce8:	d8c00617 	ldw	r3,24(sp)
    5cec:	18001b26 	beq	r3,zero,5d5c <_dtoa_r+0xf30>
    5cf0:	00810716 	blt	zero,r2,6110 <_dtoa_r+0x12e4>
    5cf4:	d8c00417 	ldw	r3,16(sp)
    5cf8:	9d800044 	addi	r22,r19,1
    5cfc:	9c800005 	stb	r18,0(r19)
    5d00:	b02f883a 	mov	r23,r22
    5d04:	98c10626 	beq	r19,r3,6120 <_dtoa_r+0x12f4>
    5d08:	800b883a 	mov	r5,r16
    5d0c:	000f883a 	mov	r7,zero
    5d10:	01800284 	movi	r6,10
    5d14:	e009883a 	mov	r4,fp
    5d18:	0007d8c0 	call	7d8c <__multadd>
    5d1c:	1021883a 	mov	r16,r2
    5d20:	000f883a 	mov	r7,zero
    5d24:	01800284 	movi	r6,10
    5d28:	880b883a 	mov	r5,r17
    5d2c:	e009883a 	mov	r4,fp
    5d30:	8d002526 	beq	r17,r20,5dc8 <_dtoa_r+0xf9c>
    5d34:	0007d8c0 	call	7d8c <__multadd>
    5d38:	a00b883a 	mov	r5,r20
    5d3c:	000f883a 	mov	r7,zero
    5d40:	01800284 	movi	r6,10
    5d44:	e009883a 	mov	r4,fp
    5d48:	1023883a 	mov	r17,r2
    5d4c:	0007d8c0 	call	7d8c <__multadd>
    5d50:	1029883a 	mov	r20,r2
    5d54:	b027883a 	mov	r19,r22
    5d58:	003fc006 	br	5c5c <__alt_data_end+0xff005c5c>
    5d5c:	9011883a 	mov	r8,r18
    5d60:	00800e0e 	bge	zero,r2,5d9c <_dtoa_r+0xf70>
    5d64:	800b883a 	mov	r5,r16
    5d68:	01800044 	movi	r6,1
    5d6c:	e009883a 	mov	r4,fp
    5d70:	da001715 	stw	r8,92(sp)
    5d74:	000843c0 	call	843c <__lshift>
    5d78:	a80b883a 	mov	r5,r21
    5d7c:	1009883a 	mov	r4,r2
    5d80:	1021883a 	mov	r16,r2
    5d84:	00085840 	call	8584 <__mcmp>
    5d88:	da001717 	ldw	r8,92(sp)
    5d8c:	0081960e 	bge	zero,r2,63e8 <_dtoa_r+0x15bc>
    5d90:	00800e44 	movi	r2,57
    5d94:	40817026 	beq	r8,r2,6358 <_dtoa_r+0x152c>
    5d98:	ba000c44 	addi	r8,r23,49
    5d9c:	8825883a 	mov	r18,r17
    5da0:	9dc00044 	addi	r23,r19,1
    5da4:	9a000005 	stb	r8,0(r19)
    5da8:	a023883a 	mov	r17,r20
    5dac:	dc000915 	stw	r16,36(sp)
    5db0:	003f2406 	br	5a44 <__alt_data_end+0xff005a44>
    5db4:	00800e44 	movi	r2,57
    5db8:	9011883a 	mov	r8,r18
    5dbc:	90816626 	beq	r18,r2,6358 <_dtoa_r+0x152c>
    5dc0:	05bff516 	blt	zero,r22,5d98 <__alt_data_end+0xff005d98>
    5dc4:	003ff506 	br	5d9c <__alt_data_end+0xff005d9c>
    5dc8:	0007d8c0 	call	7d8c <__multadd>
    5dcc:	1023883a 	mov	r17,r2
    5dd0:	1029883a 	mov	r20,r2
    5dd4:	003fdf06 	br	5d54 <__alt_data_end+0xff005d54>
    5dd8:	e009883a 	mov	r4,fp
    5ddc:	0007d640 	call	7d64 <_Bfree>
    5de0:	00800044 	movi	r2,1
    5de4:	003fbc06 	br	5cd8 <__alt_data_end+0xff005cd8>
    5de8:	a80b883a 	mov	r5,r21
    5dec:	8009883a 	mov	r4,r16
    5df0:	00085840 	call	8584 <__mcmp>
    5df4:	103edb0e 	bge	r2,zero,5964 <__alt_data_end+0xff005964>
    5df8:	800b883a 	mov	r5,r16
    5dfc:	000f883a 	mov	r7,zero
    5e00:	01800284 	movi	r6,10
    5e04:	e009883a 	mov	r4,fp
    5e08:	0007d8c0 	call	7d8c <__multadd>
    5e0c:	1021883a 	mov	r16,r2
    5e10:	d8800517 	ldw	r2,20(sp)
    5e14:	d8c00b17 	ldw	r3,44(sp)
    5e18:	10bfffc4 	addi	r2,r2,-1
    5e1c:	d8800515 	stw	r2,20(sp)
    5e20:	183f761e 	bne	r3,zero,5bfc <__alt_data_end+0xff005bfc>
    5e24:	d9000c17 	ldw	r4,48(sp)
    5e28:	0101730e 	bge	zero,r4,63f8 <_dtoa_r+0x15cc>
    5e2c:	d9000615 	stw	r4,24(sp)
    5e30:	003ed006 	br	5974 <__alt_data_end+0xff005974>
    5e34:	00800084 	movi	r2,2
    5e38:	3081861e 	bne	r6,r2,6454 <_dtoa_r+0x1628>
    5e3c:	d8000b15 	stw	zero,44(sp)
    5e40:	003f3c06 	br	5b34 <__alt_data_end+0xff005b34>
    5e44:	dc000917 	ldw	r16,36(sp)
    5e48:	003e9206 	br	5894 <__alt_data_end+0xff005894>
    5e4c:	d9c00317 	ldw	r7,12(sp)
    5e50:	00800084 	movi	r2,2
    5e54:	11fec50e 	bge	r2,r7,596c <__alt_data_end+0xff00596c>
    5e58:	d9000617 	ldw	r4,24(sp)
    5e5c:	20013c1e 	bne	r4,zero,6350 <_dtoa_r+0x1524>
    5e60:	a80b883a 	mov	r5,r21
    5e64:	000f883a 	mov	r7,zero
    5e68:	01800144 	movi	r6,5
    5e6c:	e009883a 	mov	r4,fp
    5e70:	0007d8c0 	call	7d8c <__multadd>
    5e74:	100b883a 	mov	r5,r2
    5e78:	8009883a 	mov	r4,r16
    5e7c:	102b883a 	mov	r21,r2
    5e80:	00085840 	call	8584 <__mcmp>
    5e84:	dc000915 	stw	r16,36(sp)
    5e88:	00bf410e 	bge	zero,r2,5b90 <__alt_data_end+0xff005b90>
    5e8c:	d9c00717 	ldw	r7,28(sp)
    5e90:	00800c44 	movi	r2,49
    5e94:	38800005 	stb	r2,0(r7)
    5e98:	d8800517 	ldw	r2,20(sp)
    5e9c:	3dc00044 	addi	r23,r7,1
    5ea0:	10800044 	addi	r2,r2,1
    5ea4:	d8800515 	stw	r2,20(sp)
    5ea8:	003f3d06 	br	5ba0 <__alt_data_end+0xff005ba0>
    5eac:	d9800517 	ldw	r6,20(sp)
    5eb0:	d9c00717 	ldw	r7,28(sp)
    5eb4:	00800c44 	movi	r2,49
    5eb8:	31800044 	addi	r6,r6,1
    5ebc:	d9800515 	stw	r6,20(sp)
    5ec0:	38800005 	stb	r2,0(r7)
    5ec4:	003edf06 	br	5a44 <__alt_data_end+0xff005a44>
    5ec8:	d8000b15 	stw	zero,44(sp)
    5ecc:	003c9f06 	br	514c <__alt_data_end+0xff00514c>
    5ed0:	903e7e1e 	bne	r18,zero,58cc <__alt_data_end+0xff0058cc>
    5ed4:	00800434 	movhi	r2,16
    5ed8:	10bfffc4 	addi	r2,r2,-1
    5edc:	9884703a 	and	r2,r19,r2
    5ee0:	1000ea1e 	bne	r2,zero,628c <_dtoa_r+0x1460>
    5ee4:	9cdffc2c 	andhi	r19,r19,32752
    5ee8:	9800e826 	beq	r19,zero,628c <_dtoa_r+0x1460>
    5eec:	d9c00817 	ldw	r7,32(sp)
    5ef0:	b5800044 	addi	r22,r22,1
    5ef4:	04c00044 	movi	r19,1
    5ef8:	39c00044 	addi	r7,r7,1
    5efc:	d9c00815 	stw	r7,32(sp)
    5f00:	d8800d17 	ldw	r2,52(sp)
    5f04:	103e721e 	bne	r2,zero,58d0 <__alt_data_end+0xff0058d0>
    5f08:	00800044 	movi	r2,1
    5f0c:	003e7906 	br	58f4 <__alt_data_end+0xff0058f4>
    5f10:	8009883a 	mov	r4,r16
    5f14:	000e3540 	call	e354 <__floatsidf>
    5f18:	d9800f17 	ldw	r6,60(sp)
    5f1c:	d9c01017 	ldw	r7,64(sp)
    5f20:	1009883a 	mov	r4,r2
    5f24:	180b883a 	mov	r5,r3
    5f28:	000d2c00 	call	d2c0 <__muldf3>
    5f2c:	000d883a 	mov	r6,zero
    5f30:	01d00734 	movhi	r7,16412
    5f34:	1009883a 	mov	r4,r2
    5f38:	180b883a 	mov	r5,r3
    5f3c:	000bed40 	call	bed4 <__adddf3>
    5f40:	047f3034 	movhi	r17,64704
    5f44:	1021883a 	mov	r16,r2
    5f48:	1c63883a 	add	r17,r3,r17
    5f4c:	d9000f17 	ldw	r4,60(sp)
    5f50:	d9401017 	ldw	r5,64(sp)
    5f54:	000d883a 	mov	r6,zero
    5f58:	01d00534 	movhi	r7,16404
    5f5c:	000d9d80 	call	d9d8 <__subdf3>
    5f60:	800d883a 	mov	r6,r16
    5f64:	880f883a 	mov	r7,r17
    5f68:	1009883a 	mov	r4,r2
    5f6c:	180b883a 	mov	r5,r3
    5f70:	102b883a 	mov	r21,r2
    5f74:	1829883a 	mov	r20,r3
    5f78:	000d0f00 	call	d0f0 <__gedf2>
    5f7c:	00806c16 	blt	zero,r2,6130 <_dtoa_r+0x1304>
    5f80:	89e0003c 	xorhi	r7,r17,32768
    5f84:	800d883a 	mov	r6,r16
    5f88:	a809883a 	mov	r4,r21
    5f8c:	a00b883a 	mov	r5,r20
    5f90:	000d1cc0 	call	d1cc <__ledf2>
    5f94:	103d7e0e 	bge	r2,zero,5590 <__alt_data_end+0xff005590>
    5f98:	002b883a 	mov	r21,zero
    5f9c:	0023883a 	mov	r17,zero
    5fa0:	003efb06 	br	5b90 <__alt_data_end+0xff005b90>
    5fa4:	d8800717 	ldw	r2,28(sp)
    5fa8:	003bd006 	br	4eec <__alt_data_end+0xff004eec>
    5fac:	d9000a17 	ldw	r4,40(sp)
    5fb0:	d9800d17 	ldw	r6,52(sp)
    5fb4:	dd400a15 	stw	r21,40(sp)
    5fb8:	a905c83a 	sub	r2,r21,r4
    5fbc:	308d883a 	add	r6,r6,r2
    5fc0:	d9800d15 	stw	r6,52(sp)
    5fc4:	002b883a 	mov	r21,zero
    5fc8:	003e0606 	br	57e4 <__alt_data_end+0xff0057e4>
    5fcc:	9023883a 	mov	r17,r18
    5fd0:	9829883a 	mov	r20,r19
    5fd4:	04000084 	movi	r16,2
    5fd8:	003c9206 	br	5224 <__alt_data_end+0xff005224>
    5fdc:	04000044 	movi	r16,1
    5fe0:	dc000c15 	stw	r16,48(sp)
    5fe4:	dc000615 	stw	r16,24(sp)
    5fe8:	dc002215 	stw	r16,136(sp)
    5fec:	e0001115 	stw	zero,68(fp)
    5ff0:	000b883a 	mov	r5,zero
    5ff4:	003c6906 	br	519c <__alt_data_end+0xff00519c>
    5ff8:	3021883a 	mov	r16,r6
    5ffc:	003ffb06 	br	5fec <__alt_data_end+0xff005fec>
    6000:	1000021e 	bne	r2,zero,600c <_dtoa_r+0x11e0>
    6004:	4200004c 	andi	r8,r8,1
    6008:	403e7d1e 	bne	r8,zero,5a00 <__alt_data_end+0xff005a00>
    600c:	01000c04 	movi	r4,48
    6010:	00000106 	br	6018 <_dtoa_r+0x11ec>
    6014:	102f883a 	mov	r23,r2
    6018:	b8bfffc4 	addi	r2,r23,-1
    601c:	10c00007 	ldb	r3,0(r2)
    6020:	193ffc26 	beq	r3,r4,6014 <__alt_data_end+0xff006014>
    6024:	003e8706 	br	5a44 <__alt_data_end+0xff005a44>
    6028:	d8800517 	ldw	r2,20(sp)
    602c:	00a3c83a 	sub	r17,zero,r2
    6030:	8800a426 	beq	r17,zero,62c4 <_dtoa_r+0x1498>
    6034:	888003cc 	andi	r2,r17,15
    6038:	100490fa 	slli	r2,r2,3
    603c:	00c00074 	movhi	r3,1
    6040:	18c54204 	addi	r3,r3,5384
    6044:	1885883a 	add	r2,r3,r2
    6048:	11800017 	ldw	r6,0(r2)
    604c:	11c00117 	ldw	r7,4(r2)
    6050:	9009883a 	mov	r4,r18
    6054:	980b883a 	mov	r5,r19
    6058:	8823d13a 	srai	r17,r17,4
    605c:	000d2c00 	call	d2c0 <__muldf3>
    6060:	d8800f15 	stw	r2,60(sp)
    6064:	d8c01015 	stw	r3,64(sp)
    6068:	8800e826 	beq	r17,zero,640c <_dtoa_r+0x15e0>
    606c:	05000074 	movhi	r20,1
    6070:	a5053804 	addi	r20,r20,5344
    6074:	04000084 	movi	r16,2
    6078:	8980004c 	andi	r6,r17,1
    607c:	1009883a 	mov	r4,r2
    6080:	8823d07a 	srai	r17,r17,1
    6084:	180b883a 	mov	r5,r3
    6088:	30000426 	beq	r6,zero,609c <_dtoa_r+0x1270>
    608c:	a1800017 	ldw	r6,0(r20)
    6090:	a1c00117 	ldw	r7,4(r20)
    6094:	84000044 	addi	r16,r16,1
    6098:	000d2c00 	call	d2c0 <__muldf3>
    609c:	a5000204 	addi	r20,r20,8
    60a0:	883ff51e 	bne	r17,zero,6078 <__alt_data_end+0xff006078>
    60a4:	d8800f15 	stw	r2,60(sp)
    60a8:	d8c01015 	stw	r3,64(sp)
    60ac:	003c7606 	br	5288 <__alt_data_end+0xff005288>
    60b0:	00c00c04 	movi	r3,48
    60b4:	10c00005 	stb	r3,0(r2)
    60b8:	d8c00517 	ldw	r3,20(sp)
    60bc:	bd3fffc3 	ldbu	r20,-1(r23)
    60c0:	18c00044 	addi	r3,r3,1
    60c4:	d8c00515 	stw	r3,20(sp)
    60c8:	003db906 	br	57b0 <__alt_data_end+0xff0057b0>
    60cc:	89400117 	ldw	r5,4(r17)
    60d0:	e009883a 	mov	r4,fp
    60d4:	0007cbc0 	call	7cbc <_Balloc>
    60d8:	89800417 	ldw	r6,16(r17)
    60dc:	89400304 	addi	r5,r17,12
    60e0:	11000304 	addi	r4,r2,12
    60e4:	31800084 	addi	r6,r6,2
    60e8:	318d883a 	add	r6,r6,r6
    60ec:	318d883a 	add	r6,r6,r6
    60f0:	1027883a 	mov	r19,r2
    60f4:	00078f00 	call	78f0 <memcpy>
    60f8:	01800044 	movi	r6,1
    60fc:	980b883a 	mov	r5,r19
    6100:	e009883a 	mov	r4,fp
    6104:	000843c0 	call	843c <__lshift>
    6108:	1029883a 	mov	r20,r2
    610c:	003ecc06 	br	5c40 <__alt_data_end+0xff005c40>
    6110:	00800e44 	movi	r2,57
    6114:	90809026 	beq	r18,r2,6358 <_dtoa_r+0x152c>
    6118:	92000044 	addi	r8,r18,1
    611c:	003f1f06 	br	5d9c <__alt_data_end+0xff005d9c>
    6120:	9011883a 	mov	r8,r18
    6124:	8825883a 	mov	r18,r17
    6128:	a023883a 	mov	r17,r20
    612c:	003e2906 	br	59d4 <__alt_data_end+0xff0059d4>
    6130:	002b883a 	mov	r21,zero
    6134:	0023883a 	mov	r17,zero
    6138:	003f5406 	br	5e8c <__alt_data_end+0xff005e8c>
    613c:	61bfffc4 	addi	r6,r12,-1
    6140:	300490fa 	slli	r2,r6,3
    6144:	00c00074 	movhi	r3,1
    6148:	18c54204 	addi	r3,r3,5384
    614c:	1885883a 	add	r2,r3,r2
    6150:	11000017 	ldw	r4,0(r2)
    6154:	11400117 	ldw	r5,4(r2)
    6158:	d8800717 	ldw	r2,28(sp)
    615c:	880f883a 	mov	r7,r17
    6160:	d9801215 	stw	r6,72(sp)
    6164:	800d883a 	mov	r6,r16
    6168:	db001615 	stw	r12,88(sp)
    616c:	15c00044 	addi	r23,r2,1
    6170:	000d2c00 	call	d2c0 <__muldf3>
    6174:	d9401017 	ldw	r5,64(sp)
    6178:	d9000f17 	ldw	r4,60(sp)
    617c:	d8c01515 	stw	r3,84(sp)
    6180:	d8801415 	stw	r2,80(sp)
    6184:	000e2d40 	call	e2d4 <__fixdfsi>
    6188:	1009883a 	mov	r4,r2
    618c:	1021883a 	mov	r16,r2
    6190:	000e3540 	call	e354 <__floatsidf>
    6194:	d9000f17 	ldw	r4,60(sp)
    6198:	d9401017 	ldw	r5,64(sp)
    619c:	100d883a 	mov	r6,r2
    61a0:	180f883a 	mov	r7,r3
    61a4:	000d9d80 	call	d9d8 <__subdf3>
    61a8:	1829883a 	mov	r20,r3
    61ac:	d8c00717 	ldw	r3,28(sp)
    61b0:	84000c04 	addi	r16,r16,48
    61b4:	1023883a 	mov	r17,r2
    61b8:	1c000005 	stb	r16,0(r3)
    61bc:	db001617 	ldw	r12,88(sp)
    61c0:	00800044 	movi	r2,1
    61c4:	60802226 	beq	r12,r2,6250 <_dtoa_r+0x1424>
    61c8:	d9c00717 	ldw	r7,28(sp)
    61cc:	8805883a 	mov	r2,r17
    61d0:	b82b883a 	mov	r21,r23
    61d4:	3b19883a 	add	r12,r7,r12
    61d8:	6023883a 	mov	r17,r12
    61dc:	a007883a 	mov	r3,r20
    61e0:	dc800f15 	stw	r18,60(sp)
    61e4:	000d883a 	mov	r6,zero
    61e8:	01d00934 	movhi	r7,16420
    61ec:	1009883a 	mov	r4,r2
    61f0:	180b883a 	mov	r5,r3
    61f4:	000d2c00 	call	d2c0 <__muldf3>
    61f8:	180b883a 	mov	r5,r3
    61fc:	1009883a 	mov	r4,r2
    6200:	1829883a 	mov	r20,r3
    6204:	1025883a 	mov	r18,r2
    6208:	000e2d40 	call	e2d4 <__fixdfsi>
    620c:	1009883a 	mov	r4,r2
    6210:	1021883a 	mov	r16,r2
    6214:	000e3540 	call	e354 <__floatsidf>
    6218:	100d883a 	mov	r6,r2
    621c:	180f883a 	mov	r7,r3
    6220:	9009883a 	mov	r4,r18
    6224:	a00b883a 	mov	r5,r20
    6228:	84000c04 	addi	r16,r16,48
    622c:	000d9d80 	call	d9d8 <__subdf3>
    6230:	ad400044 	addi	r21,r21,1
    6234:	ac3fffc5 	stb	r16,-1(r21)
    6238:	ac7fea1e 	bne	r21,r17,61e4 <__alt_data_end+0xff0061e4>
    623c:	1023883a 	mov	r17,r2
    6240:	d8801217 	ldw	r2,72(sp)
    6244:	dc800f17 	ldw	r18,60(sp)
    6248:	1829883a 	mov	r20,r3
    624c:	b8af883a 	add	r23,r23,r2
    6250:	d9001417 	ldw	r4,80(sp)
    6254:	d9401517 	ldw	r5,84(sp)
    6258:	000d883a 	mov	r6,zero
    625c:	01cff834 	movhi	r7,16352
    6260:	000bed40 	call	bed4 <__adddf3>
    6264:	880d883a 	mov	r6,r17
    6268:	a00f883a 	mov	r7,r20
    626c:	1009883a 	mov	r4,r2
    6270:	180b883a 	mov	r5,r3
    6274:	000d1cc0 	call	d1cc <__ledf2>
    6278:	10003e0e 	bge	r2,zero,6374 <_dtoa_r+0x1548>
    627c:	d9001317 	ldw	r4,76(sp)
    6280:	bd3fffc3 	ldbu	r20,-1(r23)
    6284:	d9000515 	stw	r4,20(sp)
    6288:	003d3b06 	br	5778 <__alt_data_end+0xff005778>
    628c:	0027883a 	mov	r19,zero
    6290:	003f1b06 	br	5f00 <__alt_data_end+0xff005f00>
    6294:	d8800817 	ldw	r2,32(sp)
    6298:	11e9c83a 	sub	r20,r2,r7
    629c:	0005883a 	mov	r2,zero
    62a0:	003d5406 	br	57f4 <__alt_data_end+0xff0057f4>
    62a4:	00800044 	movi	r2,1
    62a8:	003dc706 	br	59c8 <__alt_data_end+0xff0059c8>
    62ac:	d8c00217 	ldw	r3,8(sp)
    62b0:	00800d84 	movi	r2,54
    62b4:	dd400a17 	ldw	r21,40(sp)
    62b8:	10c5c83a 	sub	r2,r2,r3
    62bc:	dd000817 	ldw	r20,32(sp)
    62c0:	003d4c06 	br	57f4 <__alt_data_end+0xff0057f4>
    62c4:	dc800f15 	stw	r18,60(sp)
    62c8:	dcc01015 	stw	r19,64(sp)
    62cc:	04000084 	movi	r16,2
    62d0:	003bed06 	br	5288 <__alt_data_end+0xff005288>
    62d4:	d9000617 	ldw	r4,24(sp)
    62d8:	203f0d26 	beq	r4,zero,5f10 <__alt_data_end+0xff005f10>
    62dc:	d9800c17 	ldw	r6,48(sp)
    62e0:	01bcab0e 	bge	zero,r6,5590 <__alt_data_end+0xff005590>
    62e4:	d9401017 	ldw	r5,64(sp)
    62e8:	d9000f17 	ldw	r4,60(sp)
    62ec:	000d883a 	mov	r6,zero
    62f0:	01d00934 	movhi	r7,16420
    62f4:	000d2c00 	call	d2c0 <__muldf3>
    62f8:	81000044 	addi	r4,r16,1
    62fc:	d8800f15 	stw	r2,60(sp)
    6300:	d8c01015 	stw	r3,64(sp)
    6304:	000e3540 	call	e354 <__floatsidf>
    6308:	d9800f17 	ldw	r6,60(sp)
    630c:	d9c01017 	ldw	r7,64(sp)
    6310:	1009883a 	mov	r4,r2
    6314:	180b883a 	mov	r5,r3
    6318:	000d2c00 	call	d2c0 <__muldf3>
    631c:	01d00734 	movhi	r7,16412
    6320:	000d883a 	mov	r6,zero
    6324:	1009883a 	mov	r4,r2
    6328:	180b883a 	mov	r5,r3
    632c:	000bed40 	call	bed4 <__adddf3>
    6330:	d9c00517 	ldw	r7,20(sp)
    6334:	047f3034 	movhi	r17,64704
    6338:	1021883a 	mov	r16,r2
    633c:	39ffffc4 	addi	r7,r7,-1
    6340:	d9c01315 	stw	r7,76(sp)
    6344:	1c63883a 	add	r17,r3,r17
    6348:	db000c17 	ldw	r12,48(sp)
    634c:	003bea06 	br	52f8 <__alt_data_end+0xff0052f8>
    6350:	dc000915 	stw	r16,36(sp)
    6354:	003e0e06 	br	5b90 <__alt_data_end+0xff005b90>
    6358:	01000e44 	movi	r4,57
    635c:	8825883a 	mov	r18,r17
    6360:	9dc00044 	addi	r23,r19,1
    6364:	99000005 	stb	r4,0(r19)
    6368:	a023883a 	mov	r17,r20
    636c:	dc000915 	stw	r16,36(sp)
    6370:	003da406 	br	5a04 <__alt_data_end+0xff005a04>
    6374:	d9801417 	ldw	r6,80(sp)
    6378:	d9c01517 	ldw	r7,84(sp)
    637c:	0009883a 	mov	r4,zero
    6380:	014ff834 	movhi	r5,16352
    6384:	000d9d80 	call	d9d8 <__subdf3>
    6388:	880d883a 	mov	r6,r17
    638c:	a00f883a 	mov	r7,r20
    6390:	1009883a 	mov	r4,r2
    6394:	180b883a 	mov	r5,r3
    6398:	000d0f00 	call	d0f0 <__gedf2>
    639c:	00bc7c0e 	bge	zero,r2,5590 <__alt_data_end+0xff005590>
    63a0:	01000c04 	movi	r4,48
    63a4:	00000106 	br	63ac <_dtoa_r+0x1580>
    63a8:	102f883a 	mov	r23,r2
    63ac:	b8bfffc4 	addi	r2,r23,-1
    63b0:	10c00007 	ldb	r3,0(r2)
    63b4:	193ffc26 	beq	r3,r4,63a8 <__alt_data_end+0xff0063a8>
    63b8:	d9801317 	ldw	r6,76(sp)
    63bc:	d9800515 	stw	r6,20(sp)
    63c0:	003c4406 	br	54d4 <__alt_data_end+0xff0054d4>
    63c4:	d9801317 	ldw	r6,76(sp)
    63c8:	d9800515 	stw	r6,20(sp)
    63cc:	003cea06 	br	5778 <__alt_data_end+0xff005778>
    63d0:	dd800f17 	ldw	r22,60(sp)
    63d4:	dcc01017 	ldw	r19,64(sp)
    63d8:	dc801217 	ldw	r18,72(sp)
    63dc:	003c6c06 	br	5590 <__alt_data_end+0xff005590>
    63e0:	903e031e 	bne	r18,zero,5bf0 <__alt_data_end+0xff005bf0>
    63e4:	003ebb06 	br	5ed4 <__alt_data_end+0xff005ed4>
    63e8:	103e6c1e 	bne	r2,zero,5d9c <__alt_data_end+0xff005d9c>
    63ec:	4080004c 	andi	r2,r8,1
    63f0:	103e6a26 	beq	r2,zero,5d9c <__alt_data_end+0xff005d9c>
    63f4:	003e6606 	br	5d90 <__alt_data_end+0xff005d90>
    63f8:	d8c00317 	ldw	r3,12(sp)
    63fc:	00800084 	movi	r2,2
    6400:	10c02916 	blt	r2,r3,64a8 <_dtoa_r+0x167c>
    6404:	d9000c17 	ldw	r4,48(sp)
    6408:	003e8806 	br	5e2c <__alt_data_end+0xff005e2c>
    640c:	04000084 	movi	r16,2
    6410:	003b9d06 	br	5288 <__alt_data_end+0xff005288>
    6414:	d9001317 	ldw	r4,76(sp)
    6418:	d9000515 	stw	r4,20(sp)
    641c:	003cd606 	br	5778 <__alt_data_end+0xff005778>
    6420:	d8801317 	ldw	r2,76(sp)
    6424:	d8800515 	stw	r2,20(sp)
    6428:	003c2a06 	br	54d4 <__alt_data_end+0xff0054d4>
    642c:	d9800317 	ldw	r6,12(sp)
    6430:	00800084 	movi	r2,2
    6434:	11801516 	blt	r2,r6,648c <_dtoa_r+0x1660>
    6438:	d9c00c17 	ldw	r7,48(sp)
    643c:	d9c00615 	stw	r7,24(sp)
    6440:	003df706 	br	5c20 <__alt_data_end+0xff005c20>
    6444:	193d3926 	beq	r3,r4,592c <__alt_data_end+0xff00592c>
    6448:	00c00f04 	movi	r3,60
    644c:	1885c83a 	sub	r2,r3,r2
    6450:	003ddf06 	br	5bd0 <__alt_data_end+0xff005bd0>
    6454:	e009883a 	mov	r4,fp
    6458:	e0001115 	stw	zero,68(fp)
    645c:	000b883a 	mov	r5,zero
    6460:	0007cbc0 	call	7cbc <_Balloc>
    6464:	d8800715 	stw	r2,28(sp)
    6468:	d8c00717 	ldw	r3,28(sp)
    646c:	00bfffc4 	movi	r2,-1
    6470:	01000044 	movi	r4,1
    6474:	d8800c15 	stw	r2,48(sp)
    6478:	e0c01015 	stw	r3,64(fp)
    647c:	d9000b15 	stw	r4,44(sp)
    6480:	d8800615 	stw	r2,24(sp)
    6484:	d8002215 	stw	zero,136(sp)
    6488:	003c4106 	br	5590 <__alt_data_end+0xff005590>
    648c:	d8c00c17 	ldw	r3,48(sp)
    6490:	d8c00615 	stw	r3,24(sp)
    6494:	003e7006 	br	5e58 <__alt_data_end+0xff005e58>
    6498:	04400044 	movi	r17,1
    649c:	003b2006 	br	5120 <__alt_data_end+0xff005120>
    64a0:	000b883a 	mov	r5,zero
    64a4:	003b3d06 	br	519c <__alt_data_end+0xff00519c>
    64a8:	d8800c17 	ldw	r2,48(sp)
    64ac:	d8800615 	stw	r2,24(sp)
    64b0:	003e6906 	br	5e58 <__alt_data_end+0xff005e58>

000064b4 <__sflush_r>:
    64b4:	2880030b 	ldhu	r2,12(r5)
    64b8:	defffb04 	addi	sp,sp,-20
    64bc:	dcc00315 	stw	r19,12(sp)
    64c0:	dc400115 	stw	r17,4(sp)
    64c4:	dfc00415 	stw	ra,16(sp)
    64c8:	dc800215 	stw	r18,8(sp)
    64cc:	dc000015 	stw	r16,0(sp)
    64d0:	10c0020c 	andi	r3,r2,8
    64d4:	2823883a 	mov	r17,r5
    64d8:	2027883a 	mov	r19,r4
    64dc:	1800311e 	bne	r3,zero,65a4 <__sflush_r+0xf0>
    64e0:	28c00117 	ldw	r3,4(r5)
    64e4:	10820014 	ori	r2,r2,2048
    64e8:	2880030d 	sth	r2,12(r5)
    64ec:	00c04b0e 	bge	zero,r3,661c <__sflush_r+0x168>
    64f0:	8a000a17 	ldw	r8,40(r17)
    64f4:	40002326 	beq	r8,zero,6584 <__sflush_r+0xd0>
    64f8:	9c000017 	ldw	r16,0(r19)
    64fc:	10c4000c 	andi	r3,r2,4096
    6500:	98000015 	stw	zero,0(r19)
    6504:	18004826 	beq	r3,zero,6628 <__sflush_r+0x174>
    6508:	89801417 	ldw	r6,80(r17)
    650c:	10c0010c 	andi	r3,r2,4
    6510:	18000626 	beq	r3,zero,652c <__sflush_r+0x78>
    6514:	88c00117 	ldw	r3,4(r17)
    6518:	88800c17 	ldw	r2,48(r17)
    651c:	30cdc83a 	sub	r6,r6,r3
    6520:	10000226 	beq	r2,zero,652c <__sflush_r+0x78>
    6524:	88800f17 	ldw	r2,60(r17)
    6528:	308dc83a 	sub	r6,r6,r2
    652c:	89400717 	ldw	r5,28(r17)
    6530:	000f883a 	mov	r7,zero
    6534:	9809883a 	mov	r4,r19
    6538:	403ee83a 	callr	r8
    653c:	00ffffc4 	movi	r3,-1
    6540:	10c04426 	beq	r2,r3,6654 <__sflush_r+0x1a0>
    6544:	88c0030b 	ldhu	r3,12(r17)
    6548:	89000417 	ldw	r4,16(r17)
    654c:	88000115 	stw	zero,4(r17)
    6550:	197dffcc 	andi	r5,r3,63487
    6554:	8940030d 	sth	r5,12(r17)
    6558:	89000015 	stw	r4,0(r17)
    655c:	18c4000c 	andi	r3,r3,4096
    6560:	18002c1e 	bne	r3,zero,6614 <__sflush_r+0x160>
    6564:	89400c17 	ldw	r5,48(r17)
    6568:	9c000015 	stw	r16,0(r19)
    656c:	28000526 	beq	r5,zero,6584 <__sflush_r+0xd0>
    6570:	88801004 	addi	r2,r17,64
    6574:	28800226 	beq	r5,r2,6580 <__sflush_r+0xcc>
    6578:	9809883a 	mov	r4,r19
    657c:	0006c200 	call	6c20 <_free_r>
    6580:	88000c15 	stw	zero,48(r17)
    6584:	0005883a 	mov	r2,zero
    6588:	dfc00417 	ldw	ra,16(sp)
    658c:	dcc00317 	ldw	r19,12(sp)
    6590:	dc800217 	ldw	r18,8(sp)
    6594:	dc400117 	ldw	r17,4(sp)
    6598:	dc000017 	ldw	r16,0(sp)
    659c:	dec00504 	addi	sp,sp,20
    65a0:	f800283a 	ret
    65a4:	2c800417 	ldw	r18,16(r5)
    65a8:	903ff626 	beq	r18,zero,6584 <__alt_data_end+0xff006584>
    65ac:	2c000017 	ldw	r16,0(r5)
    65b0:	108000cc 	andi	r2,r2,3
    65b4:	2c800015 	stw	r18,0(r5)
    65b8:	84a1c83a 	sub	r16,r16,r18
    65bc:	1000131e 	bne	r2,zero,660c <__sflush_r+0x158>
    65c0:	28800517 	ldw	r2,20(r5)
    65c4:	88800215 	stw	r2,8(r17)
    65c8:	04000316 	blt	zero,r16,65d8 <__sflush_r+0x124>
    65cc:	003fed06 	br	6584 <__alt_data_end+0xff006584>
    65d0:	90a5883a 	add	r18,r18,r2
    65d4:	043feb0e 	bge	zero,r16,6584 <__alt_data_end+0xff006584>
    65d8:	88800917 	ldw	r2,36(r17)
    65dc:	89400717 	ldw	r5,28(r17)
    65e0:	800f883a 	mov	r7,r16
    65e4:	900d883a 	mov	r6,r18
    65e8:	9809883a 	mov	r4,r19
    65ec:	103ee83a 	callr	r2
    65f0:	80a1c83a 	sub	r16,r16,r2
    65f4:	00bff616 	blt	zero,r2,65d0 <__alt_data_end+0xff0065d0>
    65f8:	88c0030b 	ldhu	r3,12(r17)
    65fc:	00bfffc4 	movi	r2,-1
    6600:	18c01014 	ori	r3,r3,64
    6604:	88c0030d 	sth	r3,12(r17)
    6608:	003fdf06 	br	6588 <__alt_data_end+0xff006588>
    660c:	0005883a 	mov	r2,zero
    6610:	003fec06 	br	65c4 <__alt_data_end+0xff0065c4>
    6614:	88801415 	stw	r2,80(r17)
    6618:	003fd206 	br	6564 <__alt_data_end+0xff006564>
    661c:	28c00f17 	ldw	r3,60(r5)
    6620:	00ffb316 	blt	zero,r3,64f0 <__alt_data_end+0xff0064f0>
    6624:	003fd706 	br	6584 <__alt_data_end+0xff006584>
    6628:	89400717 	ldw	r5,28(r17)
    662c:	000d883a 	mov	r6,zero
    6630:	01c00044 	movi	r7,1
    6634:	9809883a 	mov	r4,r19
    6638:	403ee83a 	callr	r8
    663c:	100d883a 	mov	r6,r2
    6640:	00bfffc4 	movi	r2,-1
    6644:	30801426 	beq	r6,r2,6698 <__sflush_r+0x1e4>
    6648:	8880030b 	ldhu	r2,12(r17)
    664c:	8a000a17 	ldw	r8,40(r17)
    6650:	003fae06 	br	650c <__alt_data_end+0xff00650c>
    6654:	98c00017 	ldw	r3,0(r19)
    6658:	183fba26 	beq	r3,zero,6544 <__alt_data_end+0xff006544>
    665c:	01000744 	movi	r4,29
    6660:	19000626 	beq	r3,r4,667c <__sflush_r+0x1c8>
    6664:	01000584 	movi	r4,22
    6668:	19000426 	beq	r3,r4,667c <__sflush_r+0x1c8>
    666c:	88c0030b 	ldhu	r3,12(r17)
    6670:	18c01014 	ori	r3,r3,64
    6674:	88c0030d 	sth	r3,12(r17)
    6678:	003fc306 	br	6588 <__alt_data_end+0xff006588>
    667c:	8880030b 	ldhu	r2,12(r17)
    6680:	88c00417 	ldw	r3,16(r17)
    6684:	88000115 	stw	zero,4(r17)
    6688:	10bdffcc 	andi	r2,r2,63487
    668c:	8880030d 	sth	r2,12(r17)
    6690:	88c00015 	stw	r3,0(r17)
    6694:	003fb306 	br	6564 <__alt_data_end+0xff006564>
    6698:	98800017 	ldw	r2,0(r19)
    669c:	103fea26 	beq	r2,zero,6648 <__alt_data_end+0xff006648>
    66a0:	00c00744 	movi	r3,29
    66a4:	10c00226 	beq	r2,r3,66b0 <__sflush_r+0x1fc>
    66a8:	00c00584 	movi	r3,22
    66ac:	10c0031e 	bne	r2,r3,66bc <__sflush_r+0x208>
    66b0:	9c000015 	stw	r16,0(r19)
    66b4:	0005883a 	mov	r2,zero
    66b8:	003fb306 	br	6588 <__alt_data_end+0xff006588>
    66bc:	88c0030b 	ldhu	r3,12(r17)
    66c0:	3005883a 	mov	r2,r6
    66c4:	18c01014 	ori	r3,r3,64
    66c8:	88c0030d 	sth	r3,12(r17)
    66cc:	003fae06 	br	6588 <__alt_data_end+0xff006588>

000066d0 <_fflush_r>:
    66d0:	defffd04 	addi	sp,sp,-12
    66d4:	dc000115 	stw	r16,4(sp)
    66d8:	dfc00215 	stw	ra,8(sp)
    66dc:	2021883a 	mov	r16,r4
    66e0:	20000226 	beq	r4,zero,66ec <_fflush_r+0x1c>
    66e4:	20800e17 	ldw	r2,56(r4)
    66e8:	10000c26 	beq	r2,zero,671c <_fflush_r+0x4c>
    66ec:	2880030f 	ldh	r2,12(r5)
    66f0:	1000051e 	bne	r2,zero,6708 <_fflush_r+0x38>
    66f4:	0005883a 	mov	r2,zero
    66f8:	dfc00217 	ldw	ra,8(sp)
    66fc:	dc000117 	ldw	r16,4(sp)
    6700:	dec00304 	addi	sp,sp,12
    6704:	f800283a 	ret
    6708:	8009883a 	mov	r4,r16
    670c:	dfc00217 	ldw	ra,8(sp)
    6710:	dc000117 	ldw	r16,4(sp)
    6714:	dec00304 	addi	sp,sp,12
    6718:	00064b41 	jmpi	64b4 <__sflush_r>
    671c:	d9400015 	stw	r5,0(sp)
    6720:	0006aac0 	call	6aac <__sinit>
    6724:	d9400017 	ldw	r5,0(sp)
    6728:	003ff006 	br	66ec <__alt_data_end+0xff0066ec>

0000672c <fflush>:
    672c:	20000526 	beq	r4,zero,6744 <fflush+0x18>
    6730:	00800074 	movhi	r2,1
    6734:	108c7504 	addi	r2,r2,12756
    6738:	200b883a 	mov	r5,r4
    673c:	11000017 	ldw	r4,0(r2)
    6740:	00066d01 	jmpi	66d0 <_fflush_r>
    6744:	00800074 	movhi	r2,1
    6748:	108c7404 	addi	r2,r2,12752
    674c:	11000017 	ldw	r4,0(r2)
    6750:	01400034 	movhi	r5,0
    6754:	2959b404 	addi	r5,r5,26320
    6758:	00074b01 	jmpi	74b0 <_fwalk_reent>

0000675c <__fp_unlock>:
    675c:	0005883a 	mov	r2,zero
    6760:	f800283a 	ret

00006764 <_cleanup_r>:
    6764:	01400074 	movhi	r5,1
    6768:	296b1a04 	addi	r5,r5,-21400
    676c:	00074b01 	jmpi	74b0 <_fwalk_reent>

00006770 <__sinit.part.1>:
    6770:	defff704 	addi	sp,sp,-36
    6774:	00c00034 	movhi	r3,0
    6778:	dfc00815 	stw	ra,32(sp)
    677c:	ddc00715 	stw	r23,28(sp)
    6780:	dd800615 	stw	r22,24(sp)
    6784:	dd400515 	stw	r21,20(sp)
    6788:	dd000415 	stw	r20,16(sp)
    678c:	dcc00315 	stw	r19,12(sp)
    6790:	dc800215 	stw	r18,8(sp)
    6794:	dc400115 	stw	r17,4(sp)
    6798:	dc000015 	stw	r16,0(sp)
    679c:	18d9d904 	addi	r3,r3,26468
    67a0:	24000117 	ldw	r16,4(r4)
    67a4:	20c00f15 	stw	r3,60(r4)
    67a8:	2080bb04 	addi	r2,r4,748
    67ac:	00c000c4 	movi	r3,3
    67b0:	20c0b915 	stw	r3,740(r4)
    67b4:	2080ba15 	stw	r2,744(r4)
    67b8:	2000b815 	stw	zero,736(r4)
    67bc:	05c00204 	movi	r23,8
    67c0:	00800104 	movi	r2,4
    67c4:	2025883a 	mov	r18,r4
    67c8:	b80d883a 	mov	r6,r23
    67cc:	81001704 	addi	r4,r16,92
    67d0:	000b883a 	mov	r5,zero
    67d4:	80000015 	stw	zero,0(r16)
    67d8:	80000115 	stw	zero,4(r16)
    67dc:	80000215 	stw	zero,8(r16)
    67e0:	8080030d 	sth	r2,12(r16)
    67e4:	80001915 	stw	zero,100(r16)
    67e8:	8000038d 	sth	zero,14(r16)
    67ec:	80000415 	stw	zero,16(r16)
    67f0:	80000515 	stw	zero,20(r16)
    67f4:	80000615 	stw	zero,24(r16)
    67f8:	0007b940 	call	7b94 <memset>
    67fc:	05800074 	movhi	r22,1
    6800:	94400217 	ldw	r17,8(r18)
    6804:	05400074 	movhi	r21,1
    6808:	05000074 	movhi	r20,1
    680c:	04c00074 	movhi	r19,1
    6810:	b5a4a404 	addi	r22,r22,-28016
    6814:	ad64bb04 	addi	r21,r21,-27924
    6818:	a524da04 	addi	r20,r20,-27800
    681c:	9ce4f104 	addi	r19,r19,-27708
    6820:	85800815 	stw	r22,32(r16)
    6824:	85400915 	stw	r21,36(r16)
    6828:	85000a15 	stw	r20,40(r16)
    682c:	84c00b15 	stw	r19,44(r16)
    6830:	84000715 	stw	r16,28(r16)
    6834:	00800284 	movi	r2,10
    6838:	8880030d 	sth	r2,12(r17)
    683c:	00800044 	movi	r2,1
    6840:	b80d883a 	mov	r6,r23
    6844:	89001704 	addi	r4,r17,92
    6848:	000b883a 	mov	r5,zero
    684c:	88000015 	stw	zero,0(r17)
    6850:	88000115 	stw	zero,4(r17)
    6854:	88000215 	stw	zero,8(r17)
    6858:	88001915 	stw	zero,100(r17)
    685c:	8880038d 	sth	r2,14(r17)
    6860:	88000415 	stw	zero,16(r17)
    6864:	88000515 	stw	zero,20(r17)
    6868:	88000615 	stw	zero,24(r17)
    686c:	0007b940 	call	7b94 <memset>
    6870:	94000317 	ldw	r16,12(r18)
    6874:	00800484 	movi	r2,18
    6878:	8c400715 	stw	r17,28(r17)
    687c:	8d800815 	stw	r22,32(r17)
    6880:	8d400915 	stw	r21,36(r17)
    6884:	8d000a15 	stw	r20,40(r17)
    6888:	8cc00b15 	stw	r19,44(r17)
    688c:	8080030d 	sth	r2,12(r16)
    6890:	00800084 	movi	r2,2
    6894:	80000015 	stw	zero,0(r16)
    6898:	80000115 	stw	zero,4(r16)
    689c:	80000215 	stw	zero,8(r16)
    68a0:	80001915 	stw	zero,100(r16)
    68a4:	8080038d 	sth	r2,14(r16)
    68a8:	80000415 	stw	zero,16(r16)
    68ac:	80000515 	stw	zero,20(r16)
    68b0:	80000615 	stw	zero,24(r16)
    68b4:	b80d883a 	mov	r6,r23
    68b8:	000b883a 	mov	r5,zero
    68bc:	81001704 	addi	r4,r16,92
    68c0:	0007b940 	call	7b94 <memset>
    68c4:	00800044 	movi	r2,1
    68c8:	84000715 	stw	r16,28(r16)
    68cc:	85800815 	stw	r22,32(r16)
    68d0:	85400915 	stw	r21,36(r16)
    68d4:	85000a15 	stw	r20,40(r16)
    68d8:	84c00b15 	stw	r19,44(r16)
    68dc:	90800e15 	stw	r2,56(r18)
    68e0:	dfc00817 	ldw	ra,32(sp)
    68e4:	ddc00717 	ldw	r23,28(sp)
    68e8:	dd800617 	ldw	r22,24(sp)
    68ec:	dd400517 	ldw	r21,20(sp)
    68f0:	dd000417 	ldw	r20,16(sp)
    68f4:	dcc00317 	ldw	r19,12(sp)
    68f8:	dc800217 	ldw	r18,8(sp)
    68fc:	dc400117 	ldw	r17,4(sp)
    6900:	dc000017 	ldw	r16,0(sp)
    6904:	dec00904 	addi	sp,sp,36
    6908:	f800283a 	ret

0000690c <__fp_lock>:
    690c:	0005883a 	mov	r2,zero
    6910:	f800283a 	ret

00006914 <__sfmoreglue>:
    6914:	defffc04 	addi	sp,sp,-16
    6918:	dc400115 	stw	r17,4(sp)
    691c:	2c7fffc4 	addi	r17,r5,-1
    6920:	8c401a24 	muli	r17,r17,104
    6924:	dc800215 	stw	r18,8(sp)
    6928:	2825883a 	mov	r18,r5
    692c:	89401d04 	addi	r5,r17,116
    6930:	dc000015 	stw	r16,0(sp)
    6934:	dfc00315 	stw	ra,12(sp)
    6938:	0001dd00 	call	1dd0 <_malloc_r>
    693c:	1021883a 	mov	r16,r2
    6940:	10000726 	beq	r2,zero,6960 <__sfmoreglue+0x4c>
    6944:	11000304 	addi	r4,r2,12
    6948:	10000015 	stw	zero,0(r2)
    694c:	14800115 	stw	r18,4(r2)
    6950:	11000215 	stw	r4,8(r2)
    6954:	89801a04 	addi	r6,r17,104
    6958:	000b883a 	mov	r5,zero
    695c:	0007b940 	call	7b94 <memset>
    6960:	8005883a 	mov	r2,r16
    6964:	dfc00317 	ldw	ra,12(sp)
    6968:	dc800217 	ldw	r18,8(sp)
    696c:	dc400117 	ldw	r17,4(sp)
    6970:	dc000017 	ldw	r16,0(sp)
    6974:	dec00404 	addi	sp,sp,16
    6978:	f800283a 	ret

0000697c <__sfp>:
    697c:	defffb04 	addi	sp,sp,-20
    6980:	dc000015 	stw	r16,0(sp)
    6984:	04000074 	movhi	r16,1
    6988:	840c7404 	addi	r16,r16,12752
    698c:	dcc00315 	stw	r19,12(sp)
    6990:	2027883a 	mov	r19,r4
    6994:	81000017 	ldw	r4,0(r16)
    6998:	dfc00415 	stw	ra,16(sp)
    699c:	dc800215 	stw	r18,8(sp)
    69a0:	20800e17 	ldw	r2,56(r4)
    69a4:	dc400115 	stw	r17,4(sp)
    69a8:	1000021e 	bne	r2,zero,69b4 <__sfp+0x38>
    69ac:	00067700 	call	6770 <__sinit.part.1>
    69b0:	81000017 	ldw	r4,0(r16)
    69b4:	2480b804 	addi	r18,r4,736
    69b8:	047fffc4 	movi	r17,-1
    69bc:	91000117 	ldw	r4,4(r18)
    69c0:	94000217 	ldw	r16,8(r18)
    69c4:	213fffc4 	addi	r4,r4,-1
    69c8:	20000a16 	blt	r4,zero,69f4 <__sfp+0x78>
    69cc:	8080030f 	ldh	r2,12(r16)
    69d0:	10000c26 	beq	r2,zero,6a04 <__sfp+0x88>
    69d4:	80c01d04 	addi	r3,r16,116
    69d8:	00000206 	br	69e4 <__sfp+0x68>
    69dc:	18bfe60f 	ldh	r2,-104(r3)
    69e0:	10000826 	beq	r2,zero,6a04 <__sfp+0x88>
    69e4:	213fffc4 	addi	r4,r4,-1
    69e8:	1c3ffd04 	addi	r16,r3,-12
    69ec:	18c01a04 	addi	r3,r3,104
    69f0:	247ffa1e 	bne	r4,r17,69dc <__alt_data_end+0xff0069dc>
    69f4:	90800017 	ldw	r2,0(r18)
    69f8:	10001d26 	beq	r2,zero,6a70 <__sfp+0xf4>
    69fc:	1025883a 	mov	r18,r2
    6a00:	003fee06 	br	69bc <__alt_data_end+0xff0069bc>
    6a04:	00bfffc4 	movi	r2,-1
    6a08:	8080038d 	sth	r2,14(r16)
    6a0c:	00800044 	movi	r2,1
    6a10:	8080030d 	sth	r2,12(r16)
    6a14:	80001915 	stw	zero,100(r16)
    6a18:	80000015 	stw	zero,0(r16)
    6a1c:	80000215 	stw	zero,8(r16)
    6a20:	80000115 	stw	zero,4(r16)
    6a24:	80000415 	stw	zero,16(r16)
    6a28:	80000515 	stw	zero,20(r16)
    6a2c:	80000615 	stw	zero,24(r16)
    6a30:	01800204 	movi	r6,8
    6a34:	000b883a 	mov	r5,zero
    6a38:	81001704 	addi	r4,r16,92
    6a3c:	0007b940 	call	7b94 <memset>
    6a40:	8005883a 	mov	r2,r16
    6a44:	80000c15 	stw	zero,48(r16)
    6a48:	80000d15 	stw	zero,52(r16)
    6a4c:	80001115 	stw	zero,68(r16)
    6a50:	80001215 	stw	zero,72(r16)
    6a54:	dfc00417 	ldw	ra,16(sp)
    6a58:	dcc00317 	ldw	r19,12(sp)
    6a5c:	dc800217 	ldw	r18,8(sp)
    6a60:	dc400117 	ldw	r17,4(sp)
    6a64:	dc000017 	ldw	r16,0(sp)
    6a68:	dec00504 	addi	sp,sp,20
    6a6c:	f800283a 	ret
    6a70:	01400104 	movi	r5,4
    6a74:	9809883a 	mov	r4,r19
    6a78:	00069140 	call	6914 <__sfmoreglue>
    6a7c:	90800015 	stw	r2,0(r18)
    6a80:	103fde1e 	bne	r2,zero,69fc <__alt_data_end+0xff0069fc>
    6a84:	00800304 	movi	r2,12
    6a88:	98800015 	stw	r2,0(r19)
    6a8c:	0005883a 	mov	r2,zero
    6a90:	003ff006 	br	6a54 <__alt_data_end+0xff006a54>

00006a94 <_cleanup>:
    6a94:	00800074 	movhi	r2,1
    6a98:	108c7404 	addi	r2,r2,12752
    6a9c:	11000017 	ldw	r4,0(r2)
    6aa0:	01400074 	movhi	r5,1
    6aa4:	296b1a04 	addi	r5,r5,-21400
    6aa8:	00074b01 	jmpi	74b0 <_fwalk_reent>

00006aac <__sinit>:
    6aac:	20800e17 	ldw	r2,56(r4)
    6ab0:	10000126 	beq	r2,zero,6ab8 <__sinit+0xc>
    6ab4:	f800283a 	ret
    6ab8:	00067701 	jmpi	6770 <__sinit.part.1>

00006abc <__sfp_lock_acquire>:
    6abc:	f800283a 	ret

00006ac0 <__sfp_lock_release>:
    6ac0:	f800283a 	ret

00006ac4 <__sinit_lock_acquire>:
    6ac4:	f800283a 	ret

00006ac8 <__sinit_lock_release>:
    6ac8:	f800283a 	ret

00006acc <__fp_lock_all>:
    6acc:	00800074 	movhi	r2,1
    6ad0:	108c7504 	addi	r2,r2,12756
    6ad4:	11000017 	ldw	r4,0(r2)
    6ad8:	01400034 	movhi	r5,0
    6adc:	295a4304 	addi	r5,r5,26892
    6ae0:	00073ec1 	jmpi	73ec <_fwalk>

00006ae4 <__fp_unlock_all>:
    6ae4:	00800074 	movhi	r2,1
    6ae8:	108c7504 	addi	r2,r2,12756
    6aec:	11000017 	ldw	r4,0(r2)
    6af0:	01400034 	movhi	r5,0
    6af4:	2959d704 	addi	r5,r5,26460
    6af8:	00073ec1 	jmpi	73ec <_fwalk>

00006afc <_malloc_trim_r>:
    6afc:	defffb04 	addi	sp,sp,-20
    6b00:	dcc00315 	stw	r19,12(sp)
    6b04:	04c00074 	movhi	r19,1
    6b08:	dc800215 	stw	r18,8(sp)
    6b0c:	dc400115 	stw	r17,4(sp)
    6b10:	dc000015 	stw	r16,0(sp)
    6b14:	dfc00415 	stw	ra,16(sp)
    6b18:	2821883a 	mov	r16,r5
    6b1c:	9cc5c704 	addi	r19,r19,5916
    6b20:	2025883a 	mov	r18,r4
    6b24:	000eab80 	call	eab8 <__malloc_lock>
    6b28:	98800217 	ldw	r2,8(r19)
    6b2c:	14400117 	ldw	r17,4(r2)
    6b30:	00bfff04 	movi	r2,-4
    6b34:	88a2703a 	and	r17,r17,r2
    6b38:	8c21c83a 	sub	r16,r17,r16
    6b3c:	8403fbc4 	addi	r16,r16,4079
    6b40:	8020d33a 	srli	r16,r16,12
    6b44:	0083ffc4 	movi	r2,4095
    6b48:	843fffc4 	addi	r16,r16,-1
    6b4c:	8020933a 	slli	r16,r16,12
    6b50:	1400060e 	bge	r2,r16,6b6c <_malloc_trim_r+0x70>
    6b54:	000b883a 	mov	r5,zero
    6b58:	9009883a 	mov	r4,r18
    6b5c:	000271c0 	call	271c <_sbrk_r>
    6b60:	98c00217 	ldw	r3,8(r19)
    6b64:	1c47883a 	add	r3,r3,r17
    6b68:	10c00a26 	beq	r2,r3,6b94 <_malloc_trim_r+0x98>
    6b6c:	9009883a 	mov	r4,r18
    6b70:	000eadc0 	call	eadc <__malloc_unlock>
    6b74:	0005883a 	mov	r2,zero
    6b78:	dfc00417 	ldw	ra,16(sp)
    6b7c:	dcc00317 	ldw	r19,12(sp)
    6b80:	dc800217 	ldw	r18,8(sp)
    6b84:	dc400117 	ldw	r17,4(sp)
    6b88:	dc000017 	ldw	r16,0(sp)
    6b8c:	dec00504 	addi	sp,sp,20
    6b90:	f800283a 	ret
    6b94:	040bc83a 	sub	r5,zero,r16
    6b98:	9009883a 	mov	r4,r18
    6b9c:	000271c0 	call	271c <_sbrk_r>
    6ba0:	00ffffc4 	movi	r3,-1
    6ba4:	10c00d26 	beq	r2,r3,6bdc <_malloc_trim_r+0xe0>
    6ba8:	00c00074 	movhi	r3,1
    6bac:	18d35704 	addi	r3,r3,19804
    6bb0:	18800017 	ldw	r2,0(r3)
    6bb4:	99000217 	ldw	r4,8(r19)
    6bb8:	8c23c83a 	sub	r17,r17,r16
    6bbc:	8c400054 	ori	r17,r17,1
    6bc0:	1421c83a 	sub	r16,r2,r16
    6bc4:	24400115 	stw	r17,4(r4)
    6bc8:	9009883a 	mov	r4,r18
    6bcc:	1c000015 	stw	r16,0(r3)
    6bd0:	000eadc0 	call	eadc <__malloc_unlock>
    6bd4:	00800044 	movi	r2,1
    6bd8:	003fe706 	br	6b78 <__alt_data_end+0xff006b78>
    6bdc:	000b883a 	mov	r5,zero
    6be0:	9009883a 	mov	r4,r18
    6be4:	000271c0 	call	271c <_sbrk_r>
    6be8:	99000217 	ldw	r4,8(r19)
    6bec:	014003c4 	movi	r5,15
    6bf0:	1107c83a 	sub	r3,r2,r4
    6bf4:	28ffdd0e 	bge	r5,r3,6b6c <__alt_data_end+0xff006b6c>
    6bf8:	01400074 	movhi	r5,1
    6bfc:	294c7204 	addi	r5,r5,12744
    6c00:	29400017 	ldw	r5,0(r5)
    6c04:	18c00054 	ori	r3,r3,1
    6c08:	20c00115 	stw	r3,4(r4)
    6c0c:	00c00074 	movhi	r3,1
    6c10:	1145c83a 	sub	r2,r2,r5
    6c14:	18d35704 	addi	r3,r3,19804
    6c18:	18800015 	stw	r2,0(r3)
    6c1c:	003fd306 	br	6b6c <__alt_data_end+0xff006b6c>

00006c20 <_free_r>:
    6c20:	28004126 	beq	r5,zero,6d28 <_free_r+0x108>
    6c24:	defffd04 	addi	sp,sp,-12
    6c28:	dc400115 	stw	r17,4(sp)
    6c2c:	dc000015 	stw	r16,0(sp)
    6c30:	2023883a 	mov	r17,r4
    6c34:	2821883a 	mov	r16,r5
    6c38:	dfc00215 	stw	ra,8(sp)
    6c3c:	000eab80 	call	eab8 <__malloc_lock>
    6c40:	81ffff17 	ldw	r7,-4(r16)
    6c44:	00bfff84 	movi	r2,-2
    6c48:	01000074 	movhi	r4,1
    6c4c:	81bffe04 	addi	r6,r16,-8
    6c50:	3884703a 	and	r2,r7,r2
    6c54:	2105c704 	addi	r4,r4,5916
    6c58:	308b883a 	add	r5,r6,r2
    6c5c:	2a400117 	ldw	r9,4(r5)
    6c60:	22000217 	ldw	r8,8(r4)
    6c64:	00ffff04 	movi	r3,-4
    6c68:	48c6703a 	and	r3,r9,r3
    6c6c:	2a005726 	beq	r5,r8,6dcc <_free_r+0x1ac>
    6c70:	28c00115 	stw	r3,4(r5)
    6c74:	39c0004c 	andi	r7,r7,1
    6c78:	3800091e 	bne	r7,zero,6ca0 <_free_r+0x80>
    6c7c:	823ffe17 	ldw	r8,-8(r16)
    6c80:	22400204 	addi	r9,r4,8
    6c84:	320dc83a 	sub	r6,r6,r8
    6c88:	31c00217 	ldw	r7,8(r6)
    6c8c:	1205883a 	add	r2,r2,r8
    6c90:	3a406526 	beq	r7,r9,6e28 <_free_r+0x208>
    6c94:	32000317 	ldw	r8,12(r6)
    6c98:	3a000315 	stw	r8,12(r7)
    6c9c:	41c00215 	stw	r7,8(r8)
    6ca0:	28cf883a 	add	r7,r5,r3
    6ca4:	39c00117 	ldw	r7,4(r7)
    6ca8:	39c0004c 	andi	r7,r7,1
    6cac:	38003a26 	beq	r7,zero,6d98 <_free_r+0x178>
    6cb0:	10c00054 	ori	r3,r2,1
    6cb4:	30c00115 	stw	r3,4(r6)
    6cb8:	3087883a 	add	r3,r6,r2
    6cbc:	18800015 	stw	r2,0(r3)
    6cc0:	00c07fc4 	movi	r3,511
    6cc4:	18801936 	bltu	r3,r2,6d2c <_free_r+0x10c>
    6cc8:	1004d0fa 	srli	r2,r2,3
    6ccc:	01c00044 	movi	r7,1
    6cd0:	21400117 	ldw	r5,4(r4)
    6cd4:	10c00044 	addi	r3,r2,1
    6cd8:	18c7883a 	add	r3,r3,r3
    6cdc:	1005d0ba 	srai	r2,r2,2
    6ce0:	18c7883a 	add	r3,r3,r3
    6ce4:	18c7883a 	add	r3,r3,r3
    6ce8:	1907883a 	add	r3,r3,r4
    6cec:	3884983a 	sll	r2,r7,r2
    6cf0:	19c00017 	ldw	r7,0(r3)
    6cf4:	1a3ffe04 	addi	r8,r3,-8
    6cf8:	1144b03a 	or	r2,r2,r5
    6cfc:	32000315 	stw	r8,12(r6)
    6d00:	31c00215 	stw	r7,8(r6)
    6d04:	20800115 	stw	r2,4(r4)
    6d08:	19800015 	stw	r6,0(r3)
    6d0c:	39800315 	stw	r6,12(r7)
    6d10:	8809883a 	mov	r4,r17
    6d14:	dfc00217 	ldw	ra,8(sp)
    6d18:	dc400117 	ldw	r17,4(sp)
    6d1c:	dc000017 	ldw	r16,0(sp)
    6d20:	dec00304 	addi	sp,sp,12
    6d24:	000eadc1 	jmpi	eadc <__malloc_unlock>
    6d28:	f800283a 	ret
    6d2c:	100ad27a 	srli	r5,r2,9
    6d30:	00c00104 	movi	r3,4
    6d34:	19404a36 	bltu	r3,r5,6e60 <_free_r+0x240>
    6d38:	100ad1ba 	srli	r5,r2,6
    6d3c:	28c00e44 	addi	r3,r5,57
    6d40:	18c7883a 	add	r3,r3,r3
    6d44:	29400e04 	addi	r5,r5,56
    6d48:	18c7883a 	add	r3,r3,r3
    6d4c:	18c7883a 	add	r3,r3,r3
    6d50:	1909883a 	add	r4,r3,r4
    6d54:	20c00017 	ldw	r3,0(r4)
    6d58:	01c00074 	movhi	r7,1
    6d5c:	213ffe04 	addi	r4,r4,-8
    6d60:	39c5c704 	addi	r7,r7,5916
    6d64:	20c04426 	beq	r4,r3,6e78 <_free_r+0x258>
    6d68:	01ffff04 	movi	r7,-4
    6d6c:	19400117 	ldw	r5,4(r3)
    6d70:	29ca703a 	and	r5,r5,r7
    6d74:	1140022e 	bgeu	r2,r5,6d80 <_free_r+0x160>
    6d78:	18c00217 	ldw	r3,8(r3)
    6d7c:	20fffb1e 	bne	r4,r3,6d6c <__alt_data_end+0xff006d6c>
    6d80:	19000317 	ldw	r4,12(r3)
    6d84:	31000315 	stw	r4,12(r6)
    6d88:	30c00215 	stw	r3,8(r6)
    6d8c:	21800215 	stw	r6,8(r4)
    6d90:	19800315 	stw	r6,12(r3)
    6d94:	003fde06 	br	6d10 <__alt_data_end+0xff006d10>
    6d98:	29c00217 	ldw	r7,8(r5)
    6d9c:	10c5883a 	add	r2,r2,r3
    6da0:	00c00074 	movhi	r3,1
    6da4:	18c5c904 	addi	r3,r3,5924
    6da8:	38c03b26 	beq	r7,r3,6e98 <_free_r+0x278>
    6dac:	2a000317 	ldw	r8,12(r5)
    6db0:	11400054 	ori	r5,r2,1
    6db4:	3087883a 	add	r3,r6,r2
    6db8:	3a000315 	stw	r8,12(r7)
    6dbc:	41c00215 	stw	r7,8(r8)
    6dc0:	31400115 	stw	r5,4(r6)
    6dc4:	18800015 	stw	r2,0(r3)
    6dc8:	003fbd06 	br	6cc0 <__alt_data_end+0xff006cc0>
    6dcc:	39c0004c 	andi	r7,r7,1
    6dd0:	10c5883a 	add	r2,r2,r3
    6dd4:	3800071e 	bne	r7,zero,6df4 <_free_r+0x1d4>
    6dd8:	81fffe17 	ldw	r7,-8(r16)
    6ddc:	31cdc83a 	sub	r6,r6,r7
    6de0:	30c00317 	ldw	r3,12(r6)
    6de4:	31400217 	ldw	r5,8(r6)
    6de8:	11c5883a 	add	r2,r2,r7
    6dec:	28c00315 	stw	r3,12(r5)
    6df0:	19400215 	stw	r5,8(r3)
    6df4:	10c00054 	ori	r3,r2,1
    6df8:	30c00115 	stw	r3,4(r6)
    6dfc:	00c00074 	movhi	r3,1
    6e00:	18cc7304 	addi	r3,r3,12748
    6e04:	18c00017 	ldw	r3,0(r3)
    6e08:	21800215 	stw	r6,8(r4)
    6e0c:	10ffc036 	bltu	r2,r3,6d10 <__alt_data_end+0xff006d10>
    6e10:	00800074 	movhi	r2,1
    6e14:	10934904 	addi	r2,r2,19748
    6e18:	11400017 	ldw	r5,0(r2)
    6e1c:	8809883a 	mov	r4,r17
    6e20:	0006afc0 	call	6afc <_malloc_trim_r>
    6e24:	003fba06 	br	6d10 <__alt_data_end+0xff006d10>
    6e28:	28c9883a 	add	r4,r5,r3
    6e2c:	21000117 	ldw	r4,4(r4)
    6e30:	2100004c 	andi	r4,r4,1
    6e34:	2000391e 	bne	r4,zero,6f1c <_free_r+0x2fc>
    6e38:	29c00217 	ldw	r7,8(r5)
    6e3c:	29000317 	ldw	r4,12(r5)
    6e40:	1885883a 	add	r2,r3,r2
    6e44:	10c00054 	ori	r3,r2,1
    6e48:	39000315 	stw	r4,12(r7)
    6e4c:	21c00215 	stw	r7,8(r4)
    6e50:	30c00115 	stw	r3,4(r6)
    6e54:	308d883a 	add	r6,r6,r2
    6e58:	30800015 	stw	r2,0(r6)
    6e5c:	003fac06 	br	6d10 <__alt_data_end+0xff006d10>
    6e60:	00c00504 	movi	r3,20
    6e64:	19401536 	bltu	r3,r5,6ebc <_free_r+0x29c>
    6e68:	28c01704 	addi	r3,r5,92
    6e6c:	18c7883a 	add	r3,r3,r3
    6e70:	294016c4 	addi	r5,r5,91
    6e74:	003fb406 	br	6d48 <__alt_data_end+0xff006d48>
    6e78:	280bd0ba 	srai	r5,r5,2
    6e7c:	00c00044 	movi	r3,1
    6e80:	38800117 	ldw	r2,4(r7)
    6e84:	194a983a 	sll	r5,r3,r5
    6e88:	2007883a 	mov	r3,r4
    6e8c:	2884b03a 	or	r2,r5,r2
    6e90:	38800115 	stw	r2,4(r7)
    6e94:	003fbb06 	br	6d84 <__alt_data_end+0xff006d84>
    6e98:	21800515 	stw	r6,20(r4)
    6e9c:	21800415 	stw	r6,16(r4)
    6ea0:	10c00054 	ori	r3,r2,1
    6ea4:	31c00315 	stw	r7,12(r6)
    6ea8:	31c00215 	stw	r7,8(r6)
    6eac:	30c00115 	stw	r3,4(r6)
    6eb0:	308d883a 	add	r6,r6,r2
    6eb4:	30800015 	stw	r2,0(r6)
    6eb8:	003f9506 	br	6d10 <__alt_data_end+0xff006d10>
    6ebc:	00c01504 	movi	r3,84
    6ec0:	19400536 	bltu	r3,r5,6ed8 <_free_r+0x2b8>
    6ec4:	100ad33a 	srli	r5,r2,12
    6ec8:	28c01bc4 	addi	r3,r5,111
    6ecc:	18c7883a 	add	r3,r3,r3
    6ed0:	29401b84 	addi	r5,r5,110
    6ed4:	003f9c06 	br	6d48 <__alt_data_end+0xff006d48>
    6ed8:	00c05504 	movi	r3,340
    6edc:	19400536 	bltu	r3,r5,6ef4 <_free_r+0x2d4>
    6ee0:	100ad3fa 	srli	r5,r2,15
    6ee4:	28c01e04 	addi	r3,r5,120
    6ee8:	18c7883a 	add	r3,r3,r3
    6eec:	29401dc4 	addi	r5,r5,119
    6ef0:	003f9506 	br	6d48 <__alt_data_end+0xff006d48>
    6ef4:	00c15504 	movi	r3,1364
    6ef8:	19400536 	bltu	r3,r5,6f10 <_free_r+0x2f0>
    6efc:	100ad4ba 	srli	r5,r2,18
    6f00:	28c01f44 	addi	r3,r5,125
    6f04:	18c7883a 	add	r3,r3,r3
    6f08:	29401f04 	addi	r5,r5,124
    6f0c:	003f8e06 	br	6d48 <__alt_data_end+0xff006d48>
    6f10:	00c03f84 	movi	r3,254
    6f14:	01401f84 	movi	r5,126
    6f18:	003f8b06 	br	6d48 <__alt_data_end+0xff006d48>
    6f1c:	10c00054 	ori	r3,r2,1
    6f20:	30c00115 	stw	r3,4(r6)
    6f24:	308d883a 	add	r6,r6,r2
    6f28:	30800015 	stw	r2,0(r6)
    6f2c:	003f7806 	br	6d10 <__alt_data_end+0xff006d10>

00006f30 <__sfvwrite_r>:
    6f30:	30800217 	ldw	r2,8(r6)
    6f34:	10006726 	beq	r2,zero,70d4 <__sfvwrite_r+0x1a4>
    6f38:	28c0030b 	ldhu	r3,12(r5)
    6f3c:	defff404 	addi	sp,sp,-48
    6f40:	dd400715 	stw	r21,28(sp)
    6f44:	dd000615 	stw	r20,24(sp)
    6f48:	dc000215 	stw	r16,8(sp)
    6f4c:	dfc00b15 	stw	ra,44(sp)
    6f50:	df000a15 	stw	fp,40(sp)
    6f54:	ddc00915 	stw	r23,36(sp)
    6f58:	dd800815 	stw	r22,32(sp)
    6f5c:	dcc00515 	stw	r19,20(sp)
    6f60:	dc800415 	stw	r18,16(sp)
    6f64:	dc400315 	stw	r17,12(sp)
    6f68:	1880020c 	andi	r2,r3,8
    6f6c:	2821883a 	mov	r16,r5
    6f70:	202b883a 	mov	r21,r4
    6f74:	3029883a 	mov	r20,r6
    6f78:	10002726 	beq	r2,zero,7018 <__sfvwrite_r+0xe8>
    6f7c:	28800417 	ldw	r2,16(r5)
    6f80:	10002526 	beq	r2,zero,7018 <__sfvwrite_r+0xe8>
    6f84:	1880008c 	andi	r2,r3,2
    6f88:	a4400017 	ldw	r17,0(r20)
    6f8c:	10002a26 	beq	r2,zero,7038 <__sfvwrite_r+0x108>
    6f90:	05a00034 	movhi	r22,32768
    6f94:	0027883a 	mov	r19,zero
    6f98:	0025883a 	mov	r18,zero
    6f9c:	b5bf0004 	addi	r22,r22,-1024
    6fa0:	980d883a 	mov	r6,r19
    6fa4:	a809883a 	mov	r4,r21
    6fa8:	90004626 	beq	r18,zero,70c4 <__sfvwrite_r+0x194>
    6fac:	900f883a 	mov	r7,r18
    6fb0:	b480022e 	bgeu	r22,r18,6fbc <__sfvwrite_r+0x8c>
    6fb4:	01e00034 	movhi	r7,32768
    6fb8:	39ff0004 	addi	r7,r7,-1024
    6fbc:	80800917 	ldw	r2,36(r16)
    6fc0:	81400717 	ldw	r5,28(r16)
    6fc4:	103ee83a 	callr	r2
    6fc8:	0080570e 	bge	zero,r2,7128 <__sfvwrite_r+0x1f8>
    6fcc:	a0c00217 	ldw	r3,8(r20)
    6fd0:	98a7883a 	add	r19,r19,r2
    6fd4:	90a5c83a 	sub	r18,r18,r2
    6fd8:	1885c83a 	sub	r2,r3,r2
    6fdc:	a0800215 	stw	r2,8(r20)
    6fe0:	103fef1e 	bne	r2,zero,6fa0 <__alt_data_end+0xff006fa0>
    6fe4:	0005883a 	mov	r2,zero
    6fe8:	dfc00b17 	ldw	ra,44(sp)
    6fec:	df000a17 	ldw	fp,40(sp)
    6ff0:	ddc00917 	ldw	r23,36(sp)
    6ff4:	dd800817 	ldw	r22,32(sp)
    6ff8:	dd400717 	ldw	r21,28(sp)
    6ffc:	dd000617 	ldw	r20,24(sp)
    7000:	dcc00517 	ldw	r19,20(sp)
    7004:	dc800417 	ldw	r18,16(sp)
    7008:	dc400317 	ldw	r17,12(sp)
    700c:	dc000217 	ldw	r16,8(sp)
    7010:	dec00c04 	addi	sp,sp,48
    7014:	f800283a 	ret
    7018:	800b883a 	mov	r5,r16
    701c:	a809883a 	mov	r4,r21
    7020:	0004ad80 	call	4ad8 <__swsetup_r>
    7024:	1000eb1e 	bne	r2,zero,73d4 <__sfvwrite_r+0x4a4>
    7028:	80c0030b 	ldhu	r3,12(r16)
    702c:	a4400017 	ldw	r17,0(r20)
    7030:	1880008c 	andi	r2,r3,2
    7034:	103fd61e 	bne	r2,zero,6f90 <__alt_data_end+0xff006f90>
    7038:	1880004c 	andi	r2,r3,1
    703c:	10003f1e 	bne	r2,zero,713c <__sfvwrite_r+0x20c>
    7040:	0039883a 	mov	fp,zero
    7044:	0025883a 	mov	r18,zero
    7048:	90001a26 	beq	r18,zero,70b4 <__sfvwrite_r+0x184>
    704c:	1880800c 	andi	r2,r3,512
    7050:	84c00217 	ldw	r19,8(r16)
    7054:	10002126 	beq	r2,zero,70dc <__sfvwrite_r+0x1ac>
    7058:	982f883a 	mov	r23,r19
    705c:	94c09336 	bltu	r18,r19,72ac <__sfvwrite_r+0x37c>
    7060:	1881200c 	andi	r2,r3,1152
    7064:	10009e1e 	bne	r2,zero,72e0 <__sfvwrite_r+0x3b0>
    7068:	81000017 	ldw	r4,0(r16)
    706c:	b80d883a 	mov	r6,r23
    7070:	e00b883a 	mov	r5,fp
    7074:	0007a380 	call	7a38 <memmove>
    7078:	80c00217 	ldw	r3,8(r16)
    707c:	81000017 	ldw	r4,0(r16)
    7080:	9005883a 	mov	r2,r18
    7084:	1ce7c83a 	sub	r19,r3,r19
    7088:	25cf883a 	add	r7,r4,r23
    708c:	84c00215 	stw	r19,8(r16)
    7090:	81c00015 	stw	r7,0(r16)
    7094:	a0c00217 	ldw	r3,8(r20)
    7098:	e0b9883a 	add	fp,fp,r2
    709c:	90a5c83a 	sub	r18,r18,r2
    70a0:	18a7c83a 	sub	r19,r3,r2
    70a4:	a4c00215 	stw	r19,8(r20)
    70a8:	983fce26 	beq	r19,zero,6fe4 <__alt_data_end+0xff006fe4>
    70ac:	80c0030b 	ldhu	r3,12(r16)
    70b0:	903fe61e 	bne	r18,zero,704c <__alt_data_end+0xff00704c>
    70b4:	8f000017 	ldw	fp,0(r17)
    70b8:	8c800117 	ldw	r18,4(r17)
    70bc:	8c400204 	addi	r17,r17,8
    70c0:	003fe106 	br	7048 <__alt_data_end+0xff007048>
    70c4:	8cc00017 	ldw	r19,0(r17)
    70c8:	8c800117 	ldw	r18,4(r17)
    70cc:	8c400204 	addi	r17,r17,8
    70d0:	003fb306 	br	6fa0 <__alt_data_end+0xff006fa0>
    70d4:	0005883a 	mov	r2,zero
    70d8:	f800283a 	ret
    70dc:	81000017 	ldw	r4,0(r16)
    70e0:	80800417 	ldw	r2,16(r16)
    70e4:	11005736 	bltu	r2,r4,7244 <__sfvwrite_r+0x314>
    70e8:	85c00517 	ldw	r23,20(r16)
    70ec:	95c05536 	bltu	r18,r23,7244 <__sfvwrite_r+0x314>
    70f0:	00a00034 	movhi	r2,32768
    70f4:	10bfffc4 	addi	r2,r2,-1
    70f8:	9009883a 	mov	r4,r18
    70fc:	1480012e 	bgeu	r2,r18,7104 <__sfvwrite_r+0x1d4>
    7100:	1009883a 	mov	r4,r2
    7104:	b80b883a 	mov	r5,r23
    7108:	0001bf40 	call	1bf4 <__divsi3>
    710c:	15cf383a 	mul	r7,r2,r23
    7110:	81400717 	ldw	r5,28(r16)
    7114:	80800917 	ldw	r2,36(r16)
    7118:	e00d883a 	mov	r6,fp
    711c:	a809883a 	mov	r4,r21
    7120:	103ee83a 	callr	r2
    7124:	00bfdb16 	blt	zero,r2,7094 <__alt_data_end+0xff007094>
    7128:	8080030b 	ldhu	r2,12(r16)
    712c:	10801014 	ori	r2,r2,64
    7130:	8080030d 	sth	r2,12(r16)
    7134:	00bfffc4 	movi	r2,-1
    7138:	003fab06 	br	6fe8 <__alt_data_end+0xff006fe8>
    713c:	0027883a 	mov	r19,zero
    7140:	0011883a 	mov	r8,zero
    7144:	0039883a 	mov	fp,zero
    7148:	0025883a 	mov	r18,zero
    714c:	90001f26 	beq	r18,zero,71cc <__sfvwrite_r+0x29c>
    7150:	40005a26 	beq	r8,zero,72bc <__sfvwrite_r+0x38c>
    7154:	982d883a 	mov	r22,r19
    7158:	94c0012e 	bgeu	r18,r19,7160 <__sfvwrite_r+0x230>
    715c:	902d883a 	mov	r22,r18
    7160:	81000017 	ldw	r4,0(r16)
    7164:	80800417 	ldw	r2,16(r16)
    7168:	b02f883a 	mov	r23,r22
    716c:	81c00517 	ldw	r7,20(r16)
    7170:	1100032e 	bgeu	r2,r4,7180 <__sfvwrite_r+0x250>
    7174:	80c00217 	ldw	r3,8(r16)
    7178:	38c7883a 	add	r3,r7,r3
    717c:	1d801816 	blt	r3,r22,71e0 <__sfvwrite_r+0x2b0>
    7180:	b1c03e16 	blt	r22,r7,727c <__sfvwrite_r+0x34c>
    7184:	80800917 	ldw	r2,36(r16)
    7188:	81400717 	ldw	r5,28(r16)
    718c:	e00d883a 	mov	r6,fp
    7190:	da000115 	stw	r8,4(sp)
    7194:	a809883a 	mov	r4,r21
    7198:	103ee83a 	callr	r2
    719c:	102f883a 	mov	r23,r2
    71a0:	da000117 	ldw	r8,4(sp)
    71a4:	00bfe00e 	bge	zero,r2,7128 <__alt_data_end+0xff007128>
    71a8:	9de7c83a 	sub	r19,r19,r23
    71ac:	98001f26 	beq	r19,zero,722c <__sfvwrite_r+0x2fc>
    71b0:	a0800217 	ldw	r2,8(r20)
    71b4:	e5f9883a 	add	fp,fp,r23
    71b8:	95e5c83a 	sub	r18,r18,r23
    71bc:	15efc83a 	sub	r23,r2,r23
    71c0:	a5c00215 	stw	r23,8(r20)
    71c4:	b83f8726 	beq	r23,zero,6fe4 <__alt_data_end+0xff006fe4>
    71c8:	903fe11e 	bne	r18,zero,7150 <__alt_data_end+0xff007150>
    71cc:	8f000017 	ldw	fp,0(r17)
    71d0:	8c800117 	ldw	r18,4(r17)
    71d4:	0011883a 	mov	r8,zero
    71d8:	8c400204 	addi	r17,r17,8
    71dc:	003fdb06 	br	714c <__alt_data_end+0xff00714c>
    71e0:	180d883a 	mov	r6,r3
    71e4:	e00b883a 	mov	r5,fp
    71e8:	da000115 	stw	r8,4(sp)
    71ec:	d8c00015 	stw	r3,0(sp)
    71f0:	0007a380 	call	7a38 <memmove>
    71f4:	d8c00017 	ldw	r3,0(sp)
    71f8:	80800017 	ldw	r2,0(r16)
    71fc:	800b883a 	mov	r5,r16
    7200:	a809883a 	mov	r4,r21
    7204:	10c5883a 	add	r2,r2,r3
    7208:	80800015 	stw	r2,0(r16)
    720c:	d8c00015 	stw	r3,0(sp)
    7210:	00066d00 	call	66d0 <_fflush_r>
    7214:	d8c00017 	ldw	r3,0(sp)
    7218:	da000117 	ldw	r8,4(sp)
    721c:	103fc21e 	bne	r2,zero,7128 <__alt_data_end+0xff007128>
    7220:	182f883a 	mov	r23,r3
    7224:	9de7c83a 	sub	r19,r19,r23
    7228:	983fe11e 	bne	r19,zero,71b0 <__alt_data_end+0xff0071b0>
    722c:	800b883a 	mov	r5,r16
    7230:	a809883a 	mov	r4,r21
    7234:	00066d00 	call	66d0 <_fflush_r>
    7238:	103fbb1e 	bne	r2,zero,7128 <__alt_data_end+0xff007128>
    723c:	0011883a 	mov	r8,zero
    7240:	003fdb06 	br	71b0 <__alt_data_end+0xff0071b0>
    7244:	94c0012e 	bgeu	r18,r19,724c <__sfvwrite_r+0x31c>
    7248:	9027883a 	mov	r19,r18
    724c:	980d883a 	mov	r6,r19
    7250:	e00b883a 	mov	r5,fp
    7254:	0007a380 	call	7a38 <memmove>
    7258:	80800217 	ldw	r2,8(r16)
    725c:	80c00017 	ldw	r3,0(r16)
    7260:	14c5c83a 	sub	r2,r2,r19
    7264:	1cc7883a 	add	r3,r3,r19
    7268:	80800215 	stw	r2,8(r16)
    726c:	80c00015 	stw	r3,0(r16)
    7270:	10004326 	beq	r2,zero,7380 <__sfvwrite_r+0x450>
    7274:	9805883a 	mov	r2,r19
    7278:	003f8606 	br	7094 <__alt_data_end+0xff007094>
    727c:	b00d883a 	mov	r6,r22
    7280:	e00b883a 	mov	r5,fp
    7284:	da000115 	stw	r8,4(sp)
    7288:	0007a380 	call	7a38 <memmove>
    728c:	80800217 	ldw	r2,8(r16)
    7290:	80c00017 	ldw	r3,0(r16)
    7294:	da000117 	ldw	r8,4(sp)
    7298:	1585c83a 	sub	r2,r2,r22
    729c:	1dad883a 	add	r22,r3,r22
    72a0:	80800215 	stw	r2,8(r16)
    72a4:	85800015 	stw	r22,0(r16)
    72a8:	003fbf06 	br	71a8 <__alt_data_end+0xff0071a8>
    72ac:	81000017 	ldw	r4,0(r16)
    72b0:	9027883a 	mov	r19,r18
    72b4:	902f883a 	mov	r23,r18
    72b8:	003f6c06 	br	706c <__alt_data_end+0xff00706c>
    72bc:	900d883a 	mov	r6,r18
    72c0:	01400284 	movi	r5,10
    72c4:	e009883a 	mov	r4,fp
    72c8:	000780c0 	call	780c <memchr>
    72cc:	10003e26 	beq	r2,zero,73c8 <__sfvwrite_r+0x498>
    72d0:	10800044 	addi	r2,r2,1
    72d4:	1727c83a 	sub	r19,r2,fp
    72d8:	02000044 	movi	r8,1
    72dc:	003f9d06 	br	7154 <__alt_data_end+0xff007154>
    72e0:	80800517 	ldw	r2,20(r16)
    72e4:	81400417 	ldw	r5,16(r16)
    72e8:	81c00017 	ldw	r7,0(r16)
    72ec:	10a7883a 	add	r19,r2,r2
    72f0:	9885883a 	add	r2,r19,r2
    72f4:	1026d7fa 	srli	r19,r2,31
    72f8:	396dc83a 	sub	r22,r7,r5
    72fc:	b1000044 	addi	r4,r22,1
    7300:	9885883a 	add	r2,r19,r2
    7304:	1027d07a 	srai	r19,r2,1
    7308:	2485883a 	add	r2,r4,r18
    730c:	980d883a 	mov	r6,r19
    7310:	9880022e 	bgeu	r19,r2,731c <__sfvwrite_r+0x3ec>
    7314:	1027883a 	mov	r19,r2
    7318:	100d883a 	mov	r6,r2
    731c:	18c1000c 	andi	r3,r3,1024
    7320:	18001c26 	beq	r3,zero,7394 <__sfvwrite_r+0x464>
    7324:	300b883a 	mov	r5,r6
    7328:	a809883a 	mov	r4,r21
    732c:	0001dd00 	call	1dd0 <_malloc_r>
    7330:	102f883a 	mov	r23,r2
    7334:	10002926 	beq	r2,zero,73dc <__sfvwrite_r+0x4ac>
    7338:	81400417 	ldw	r5,16(r16)
    733c:	b00d883a 	mov	r6,r22
    7340:	1009883a 	mov	r4,r2
    7344:	00078f00 	call	78f0 <memcpy>
    7348:	8080030b 	ldhu	r2,12(r16)
    734c:	00fedfc4 	movi	r3,-1153
    7350:	10c4703a 	and	r2,r2,r3
    7354:	10802014 	ori	r2,r2,128
    7358:	8080030d 	sth	r2,12(r16)
    735c:	bd89883a 	add	r4,r23,r22
    7360:	9d8fc83a 	sub	r7,r19,r22
    7364:	85c00415 	stw	r23,16(r16)
    7368:	84c00515 	stw	r19,20(r16)
    736c:	81000015 	stw	r4,0(r16)
    7370:	9027883a 	mov	r19,r18
    7374:	81c00215 	stw	r7,8(r16)
    7378:	902f883a 	mov	r23,r18
    737c:	003f3b06 	br	706c <__alt_data_end+0xff00706c>
    7380:	800b883a 	mov	r5,r16
    7384:	a809883a 	mov	r4,r21
    7388:	00066d00 	call	66d0 <_fflush_r>
    738c:	103fb926 	beq	r2,zero,7274 <__alt_data_end+0xff007274>
    7390:	003f6506 	br	7128 <__alt_data_end+0xff007128>
    7394:	a809883a 	mov	r4,r21
    7398:	0008cb80 	call	8cb8 <_realloc_r>
    739c:	102f883a 	mov	r23,r2
    73a0:	103fee1e 	bne	r2,zero,735c <__alt_data_end+0xff00735c>
    73a4:	81400417 	ldw	r5,16(r16)
    73a8:	a809883a 	mov	r4,r21
    73ac:	0006c200 	call	6c20 <_free_r>
    73b0:	8080030b 	ldhu	r2,12(r16)
    73b4:	00ffdfc4 	movi	r3,-129
    73b8:	1884703a 	and	r2,r3,r2
    73bc:	00c00304 	movi	r3,12
    73c0:	a8c00015 	stw	r3,0(r21)
    73c4:	003f5906 	br	712c <__alt_data_end+0xff00712c>
    73c8:	94c00044 	addi	r19,r18,1
    73cc:	02000044 	movi	r8,1
    73d0:	003f6006 	br	7154 <__alt_data_end+0xff007154>
    73d4:	00bfffc4 	movi	r2,-1
    73d8:	003f0306 	br	6fe8 <__alt_data_end+0xff006fe8>
    73dc:	00800304 	movi	r2,12
    73e0:	a8800015 	stw	r2,0(r21)
    73e4:	8080030b 	ldhu	r2,12(r16)
    73e8:	003f5006 	br	712c <__alt_data_end+0xff00712c>

000073ec <_fwalk>:
    73ec:	defff704 	addi	sp,sp,-36
    73f0:	dd000415 	stw	r20,16(sp)
    73f4:	dfc00815 	stw	ra,32(sp)
    73f8:	ddc00715 	stw	r23,28(sp)
    73fc:	dd800615 	stw	r22,24(sp)
    7400:	dd400515 	stw	r21,20(sp)
    7404:	dcc00315 	stw	r19,12(sp)
    7408:	dc800215 	stw	r18,8(sp)
    740c:	dc400115 	stw	r17,4(sp)
    7410:	dc000015 	stw	r16,0(sp)
    7414:	2500b804 	addi	r20,r4,736
    7418:	a0002326 	beq	r20,zero,74a8 <_fwalk+0xbc>
    741c:	282b883a 	mov	r21,r5
    7420:	002f883a 	mov	r23,zero
    7424:	05800044 	movi	r22,1
    7428:	04ffffc4 	movi	r19,-1
    742c:	a4400117 	ldw	r17,4(r20)
    7430:	a4800217 	ldw	r18,8(r20)
    7434:	8c7fffc4 	addi	r17,r17,-1
    7438:	88000d16 	blt	r17,zero,7470 <_fwalk+0x84>
    743c:	94000304 	addi	r16,r18,12
    7440:	94800384 	addi	r18,r18,14
    7444:	8080000b 	ldhu	r2,0(r16)
    7448:	8c7fffc4 	addi	r17,r17,-1
    744c:	813ffd04 	addi	r4,r16,-12
    7450:	b080042e 	bgeu	r22,r2,7464 <_fwalk+0x78>
    7454:	9080000f 	ldh	r2,0(r18)
    7458:	14c00226 	beq	r2,r19,7464 <_fwalk+0x78>
    745c:	a83ee83a 	callr	r21
    7460:	b8aeb03a 	or	r23,r23,r2
    7464:	84001a04 	addi	r16,r16,104
    7468:	94801a04 	addi	r18,r18,104
    746c:	8cfff51e 	bne	r17,r19,7444 <__alt_data_end+0xff007444>
    7470:	a5000017 	ldw	r20,0(r20)
    7474:	a03fed1e 	bne	r20,zero,742c <__alt_data_end+0xff00742c>
    7478:	b805883a 	mov	r2,r23
    747c:	dfc00817 	ldw	ra,32(sp)
    7480:	ddc00717 	ldw	r23,28(sp)
    7484:	dd800617 	ldw	r22,24(sp)
    7488:	dd400517 	ldw	r21,20(sp)
    748c:	dd000417 	ldw	r20,16(sp)
    7490:	dcc00317 	ldw	r19,12(sp)
    7494:	dc800217 	ldw	r18,8(sp)
    7498:	dc400117 	ldw	r17,4(sp)
    749c:	dc000017 	ldw	r16,0(sp)
    74a0:	dec00904 	addi	sp,sp,36
    74a4:	f800283a 	ret
    74a8:	002f883a 	mov	r23,zero
    74ac:	003ff206 	br	7478 <__alt_data_end+0xff007478>

000074b0 <_fwalk_reent>:
    74b0:	defff704 	addi	sp,sp,-36
    74b4:	dd000415 	stw	r20,16(sp)
    74b8:	dfc00815 	stw	ra,32(sp)
    74bc:	ddc00715 	stw	r23,28(sp)
    74c0:	dd800615 	stw	r22,24(sp)
    74c4:	dd400515 	stw	r21,20(sp)
    74c8:	dcc00315 	stw	r19,12(sp)
    74cc:	dc800215 	stw	r18,8(sp)
    74d0:	dc400115 	stw	r17,4(sp)
    74d4:	dc000015 	stw	r16,0(sp)
    74d8:	2500b804 	addi	r20,r4,736
    74dc:	a0002326 	beq	r20,zero,756c <_fwalk_reent+0xbc>
    74e0:	282b883a 	mov	r21,r5
    74e4:	2027883a 	mov	r19,r4
    74e8:	002f883a 	mov	r23,zero
    74ec:	05800044 	movi	r22,1
    74f0:	04bfffc4 	movi	r18,-1
    74f4:	a4400117 	ldw	r17,4(r20)
    74f8:	a4000217 	ldw	r16,8(r20)
    74fc:	8c7fffc4 	addi	r17,r17,-1
    7500:	88000c16 	blt	r17,zero,7534 <_fwalk_reent+0x84>
    7504:	84000304 	addi	r16,r16,12
    7508:	8080000b 	ldhu	r2,0(r16)
    750c:	8c7fffc4 	addi	r17,r17,-1
    7510:	817ffd04 	addi	r5,r16,-12
    7514:	b080052e 	bgeu	r22,r2,752c <_fwalk_reent+0x7c>
    7518:	8080008f 	ldh	r2,2(r16)
    751c:	9809883a 	mov	r4,r19
    7520:	14800226 	beq	r2,r18,752c <_fwalk_reent+0x7c>
    7524:	a83ee83a 	callr	r21
    7528:	b8aeb03a 	or	r23,r23,r2
    752c:	84001a04 	addi	r16,r16,104
    7530:	8cbff51e 	bne	r17,r18,7508 <__alt_data_end+0xff007508>
    7534:	a5000017 	ldw	r20,0(r20)
    7538:	a03fee1e 	bne	r20,zero,74f4 <__alt_data_end+0xff0074f4>
    753c:	b805883a 	mov	r2,r23
    7540:	dfc00817 	ldw	ra,32(sp)
    7544:	ddc00717 	ldw	r23,28(sp)
    7548:	dd800617 	ldw	r22,24(sp)
    754c:	dd400517 	ldw	r21,20(sp)
    7550:	dd000417 	ldw	r20,16(sp)
    7554:	dcc00317 	ldw	r19,12(sp)
    7558:	dc800217 	ldw	r18,8(sp)
    755c:	dc400117 	ldw	r17,4(sp)
    7560:	dc000017 	ldw	r16,0(sp)
    7564:	dec00904 	addi	sp,sp,36
    7568:	f800283a 	ret
    756c:	002f883a 	mov	r23,zero
    7570:	003ff206 	br	753c <__alt_data_end+0xff00753c>

00007574 <_setlocale_r>:
    7574:	30001b26 	beq	r6,zero,75e4 <_setlocale_r+0x70>
    7578:	01400074 	movhi	r5,1
    757c:	defffe04 	addi	sp,sp,-8
    7580:	29452804 	addi	r5,r5,5280
    7584:	3009883a 	mov	r4,r6
    7588:	dc000015 	stw	r16,0(sp)
    758c:	dfc00115 	stw	ra,4(sp)
    7590:	3021883a 	mov	r16,r6
    7594:	00093cc0 	call	93cc <strcmp>
    7598:	1000061e 	bne	r2,zero,75b4 <_setlocale_r+0x40>
    759c:	00800074 	movhi	r2,1
    75a0:	10852704 	addi	r2,r2,5276
    75a4:	dfc00117 	ldw	ra,4(sp)
    75a8:	dc000017 	ldw	r16,0(sp)
    75ac:	dec00204 	addi	sp,sp,8
    75b0:	f800283a 	ret
    75b4:	01400074 	movhi	r5,1
    75b8:	29452704 	addi	r5,r5,5276
    75bc:	8009883a 	mov	r4,r16
    75c0:	00093cc0 	call	93cc <strcmp>
    75c4:	103ff526 	beq	r2,zero,759c <__alt_data_end+0xff00759c>
    75c8:	01400074 	movhi	r5,1
    75cc:	2944f504 	addi	r5,r5,5076
    75d0:	8009883a 	mov	r4,r16
    75d4:	00093cc0 	call	93cc <strcmp>
    75d8:	103ff026 	beq	r2,zero,759c <__alt_data_end+0xff00759c>
    75dc:	0005883a 	mov	r2,zero
    75e0:	003ff006 	br	75a4 <__alt_data_end+0xff0075a4>
    75e4:	00800074 	movhi	r2,1
    75e8:	10852704 	addi	r2,r2,5276
    75ec:	f800283a 	ret

000075f0 <__locale_charset>:
    75f0:	00800074 	movhi	r2,1
    75f4:	1087da04 	addi	r2,r2,8040
    75f8:	f800283a 	ret

000075fc <__locale_mb_cur_max>:
    75fc:	00800074 	movhi	r2,1
    7600:	108c7604 	addi	r2,r2,12760
    7604:	10800017 	ldw	r2,0(r2)
    7608:	f800283a 	ret

0000760c <__locale_msgcharset>:
    760c:	00800074 	movhi	r2,1
    7610:	1087d204 	addi	r2,r2,8008
    7614:	f800283a 	ret

00007618 <__locale_cjk_lang>:
    7618:	0005883a 	mov	r2,zero
    761c:	f800283a 	ret

00007620 <_localeconv_r>:
    7620:	00800074 	movhi	r2,1
    7624:	1087e204 	addi	r2,r2,8072
    7628:	f800283a 	ret

0000762c <setlocale>:
    762c:	00800074 	movhi	r2,1
    7630:	108c7504 	addi	r2,r2,12756
    7634:	280d883a 	mov	r6,r5
    7638:	200b883a 	mov	r5,r4
    763c:	11000017 	ldw	r4,0(r2)
    7640:	00075741 	jmpi	7574 <_setlocale_r>

00007644 <localeconv>:
    7644:	00800074 	movhi	r2,1
    7648:	1087e204 	addi	r2,r2,8072
    764c:	f800283a 	ret

00007650 <__smakebuf_r>:
    7650:	2880030b 	ldhu	r2,12(r5)
    7654:	10c0008c 	andi	r3,r2,2
    7658:	1800411e 	bne	r3,zero,7760 <__smakebuf_r+0x110>
    765c:	deffec04 	addi	sp,sp,-80
    7660:	dc000f15 	stw	r16,60(sp)
    7664:	2821883a 	mov	r16,r5
    7668:	2940038f 	ldh	r5,14(r5)
    766c:	dc401015 	stw	r17,64(sp)
    7670:	dfc01315 	stw	ra,76(sp)
    7674:	dcc01215 	stw	r19,72(sp)
    7678:	dc801115 	stw	r18,68(sp)
    767c:	2023883a 	mov	r17,r4
    7680:	28001c16 	blt	r5,zero,76f4 <__smakebuf_r+0xa4>
    7684:	d80d883a 	mov	r6,sp
    7688:	000af740 	call	af74 <_fstat_r>
    768c:	10001816 	blt	r2,zero,76f0 <__smakebuf_r+0xa0>
    7690:	d8800117 	ldw	r2,4(sp)
    7694:	00e00014 	movui	r3,32768
    7698:	10bc000c 	andi	r2,r2,61440
    769c:	14c80020 	cmpeqi	r19,r2,8192
    76a0:	10c03726 	beq	r2,r3,7780 <__smakebuf_r+0x130>
    76a4:	80c0030b 	ldhu	r3,12(r16)
    76a8:	18c20014 	ori	r3,r3,2048
    76ac:	80c0030d 	sth	r3,12(r16)
    76b0:	00c80004 	movi	r3,8192
    76b4:	10c0521e 	bne	r2,r3,7800 <__smakebuf_r+0x1b0>
    76b8:	8140038f 	ldh	r5,14(r16)
    76bc:	8809883a 	mov	r4,r17
    76c0:	000afd00 	call	afd0 <_isatty_r>
    76c4:	10004c26 	beq	r2,zero,77f8 <__smakebuf_r+0x1a8>
    76c8:	8080030b 	ldhu	r2,12(r16)
    76cc:	80c010c4 	addi	r3,r16,67
    76d0:	80c00015 	stw	r3,0(r16)
    76d4:	10800054 	ori	r2,r2,1
    76d8:	8080030d 	sth	r2,12(r16)
    76dc:	00800044 	movi	r2,1
    76e0:	80c00415 	stw	r3,16(r16)
    76e4:	80800515 	stw	r2,20(r16)
    76e8:	04810004 	movi	r18,1024
    76ec:	00000706 	br	770c <__smakebuf_r+0xbc>
    76f0:	8080030b 	ldhu	r2,12(r16)
    76f4:	10c0200c 	andi	r3,r2,128
    76f8:	18001f1e 	bne	r3,zero,7778 <__smakebuf_r+0x128>
    76fc:	04810004 	movi	r18,1024
    7700:	10820014 	ori	r2,r2,2048
    7704:	8080030d 	sth	r2,12(r16)
    7708:	0027883a 	mov	r19,zero
    770c:	900b883a 	mov	r5,r18
    7710:	8809883a 	mov	r4,r17
    7714:	0001dd00 	call	1dd0 <_malloc_r>
    7718:	10002c26 	beq	r2,zero,77cc <__smakebuf_r+0x17c>
    771c:	80c0030b 	ldhu	r3,12(r16)
    7720:	01000034 	movhi	r4,0
    7724:	2119d904 	addi	r4,r4,26468
    7728:	89000f15 	stw	r4,60(r17)
    772c:	18c02014 	ori	r3,r3,128
    7730:	80c0030d 	sth	r3,12(r16)
    7734:	80800015 	stw	r2,0(r16)
    7738:	80800415 	stw	r2,16(r16)
    773c:	84800515 	stw	r18,20(r16)
    7740:	98001a1e 	bne	r19,zero,77ac <__smakebuf_r+0x15c>
    7744:	dfc01317 	ldw	ra,76(sp)
    7748:	dcc01217 	ldw	r19,72(sp)
    774c:	dc801117 	ldw	r18,68(sp)
    7750:	dc401017 	ldw	r17,64(sp)
    7754:	dc000f17 	ldw	r16,60(sp)
    7758:	dec01404 	addi	sp,sp,80
    775c:	f800283a 	ret
    7760:	288010c4 	addi	r2,r5,67
    7764:	28800015 	stw	r2,0(r5)
    7768:	28800415 	stw	r2,16(r5)
    776c:	00800044 	movi	r2,1
    7770:	28800515 	stw	r2,20(r5)
    7774:	f800283a 	ret
    7778:	04801004 	movi	r18,64
    777c:	003fe006 	br	7700 <__alt_data_end+0xff007700>
    7780:	81000a17 	ldw	r4,40(r16)
    7784:	00c00074 	movhi	r3,1
    7788:	18e4da04 	addi	r3,r3,-27800
    778c:	20ffc51e 	bne	r4,r3,76a4 <__alt_data_end+0xff0076a4>
    7790:	8080030b 	ldhu	r2,12(r16)
    7794:	04810004 	movi	r18,1024
    7798:	84801315 	stw	r18,76(r16)
    779c:	1484b03a 	or	r2,r2,r18
    77a0:	8080030d 	sth	r2,12(r16)
    77a4:	0027883a 	mov	r19,zero
    77a8:	003fd806 	br	770c <__alt_data_end+0xff00770c>
    77ac:	8140038f 	ldh	r5,14(r16)
    77b0:	8809883a 	mov	r4,r17
    77b4:	000afd00 	call	afd0 <_isatty_r>
    77b8:	103fe226 	beq	r2,zero,7744 <__alt_data_end+0xff007744>
    77bc:	8080030b 	ldhu	r2,12(r16)
    77c0:	10800054 	ori	r2,r2,1
    77c4:	8080030d 	sth	r2,12(r16)
    77c8:	003fde06 	br	7744 <__alt_data_end+0xff007744>
    77cc:	8080030b 	ldhu	r2,12(r16)
    77d0:	10c0800c 	andi	r3,r2,512
    77d4:	183fdb1e 	bne	r3,zero,7744 <__alt_data_end+0xff007744>
    77d8:	10800094 	ori	r2,r2,2
    77dc:	80c010c4 	addi	r3,r16,67
    77e0:	8080030d 	sth	r2,12(r16)
    77e4:	00800044 	movi	r2,1
    77e8:	80c00015 	stw	r3,0(r16)
    77ec:	80c00415 	stw	r3,16(r16)
    77f0:	80800515 	stw	r2,20(r16)
    77f4:	003fd306 	br	7744 <__alt_data_end+0xff007744>
    77f8:	04810004 	movi	r18,1024
    77fc:	003fc306 	br	770c <__alt_data_end+0xff00770c>
    7800:	0027883a 	mov	r19,zero
    7804:	04810004 	movi	r18,1024
    7808:	003fc006 	br	770c <__alt_data_end+0xff00770c>

0000780c <memchr>:
    780c:	208000cc 	andi	r2,r4,3
    7810:	280f883a 	mov	r7,r5
    7814:	10003426 	beq	r2,zero,78e8 <memchr+0xdc>
    7818:	30bfffc4 	addi	r2,r6,-1
    781c:	30001a26 	beq	r6,zero,7888 <memchr+0x7c>
    7820:	20c00003 	ldbu	r3,0(r4)
    7824:	29803fcc 	andi	r6,r5,255
    7828:	30c0051e 	bne	r6,r3,7840 <memchr+0x34>
    782c:	00001806 	br	7890 <memchr+0x84>
    7830:	10001526 	beq	r2,zero,7888 <memchr+0x7c>
    7834:	20c00003 	ldbu	r3,0(r4)
    7838:	10bfffc4 	addi	r2,r2,-1
    783c:	30c01426 	beq	r6,r3,7890 <memchr+0x84>
    7840:	21000044 	addi	r4,r4,1
    7844:	20c000cc 	andi	r3,r4,3
    7848:	183ff91e 	bne	r3,zero,7830 <__alt_data_end+0xff007830>
    784c:	020000c4 	movi	r8,3
    7850:	40801136 	bltu	r8,r2,7898 <memchr+0x8c>
    7854:	10000c26 	beq	r2,zero,7888 <memchr+0x7c>
    7858:	20c00003 	ldbu	r3,0(r4)
    785c:	29403fcc 	andi	r5,r5,255
    7860:	28c00b26 	beq	r5,r3,7890 <memchr+0x84>
    7864:	20c00044 	addi	r3,r4,1
    7868:	39803fcc 	andi	r6,r7,255
    786c:	2089883a 	add	r4,r4,r2
    7870:	00000306 	br	7880 <memchr+0x74>
    7874:	18c00044 	addi	r3,r3,1
    7878:	197fffc3 	ldbu	r5,-1(r3)
    787c:	31400526 	beq	r6,r5,7894 <memchr+0x88>
    7880:	1805883a 	mov	r2,r3
    7884:	20fffb1e 	bne	r4,r3,7874 <__alt_data_end+0xff007874>
    7888:	0005883a 	mov	r2,zero
    788c:	f800283a 	ret
    7890:	2005883a 	mov	r2,r4
    7894:	f800283a 	ret
    7898:	28c03fcc 	andi	r3,r5,255
    789c:	1812923a 	slli	r9,r3,8
    78a0:	02ffbff4 	movhi	r11,65279
    78a4:	02a02074 	movhi	r10,32897
    78a8:	48d2b03a 	or	r9,r9,r3
    78ac:	4806943a 	slli	r3,r9,16
    78b0:	5affbfc4 	addi	r11,r11,-257
    78b4:	52a02004 	addi	r10,r10,-32640
    78b8:	48d2b03a 	or	r9,r9,r3
    78bc:	20c00017 	ldw	r3,0(r4)
    78c0:	48c6f03a 	xor	r3,r9,r3
    78c4:	1acd883a 	add	r6,r3,r11
    78c8:	00c6303a 	nor	r3,zero,r3
    78cc:	30c6703a 	and	r3,r6,r3
    78d0:	1a86703a 	and	r3,r3,r10
    78d4:	183fe01e 	bne	r3,zero,7858 <__alt_data_end+0xff007858>
    78d8:	10bfff04 	addi	r2,r2,-4
    78dc:	21000104 	addi	r4,r4,4
    78e0:	40bff636 	bltu	r8,r2,78bc <__alt_data_end+0xff0078bc>
    78e4:	003fdb06 	br	7854 <__alt_data_end+0xff007854>
    78e8:	3005883a 	mov	r2,r6
    78ec:	003fd706 	br	784c <__alt_data_end+0xff00784c>

000078f0 <memcpy>:
    78f0:	defffd04 	addi	sp,sp,-12
    78f4:	dfc00215 	stw	ra,8(sp)
    78f8:	dc400115 	stw	r17,4(sp)
    78fc:	dc000015 	stw	r16,0(sp)
    7900:	00c003c4 	movi	r3,15
    7904:	2005883a 	mov	r2,r4
    7908:	1980452e 	bgeu	r3,r6,7a20 <memcpy+0x130>
    790c:	2906b03a 	or	r3,r5,r4
    7910:	18c000cc 	andi	r3,r3,3
    7914:	1800441e 	bne	r3,zero,7a28 <memcpy+0x138>
    7918:	347ffc04 	addi	r17,r6,-16
    791c:	8822d13a 	srli	r17,r17,4
    7920:	28c00104 	addi	r3,r5,4
    7924:	23400104 	addi	r13,r4,4
    7928:	8820913a 	slli	r16,r17,4
    792c:	2b000204 	addi	r12,r5,8
    7930:	22c00204 	addi	r11,r4,8
    7934:	84000504 	addi	r16,r16,20
    7938:	2a800304 	addi	r10,r5,12
    793c:	22400304 	addi	r9,r4,12
    7940:	2c21883a 	add	r16,r5,r16
    7944:	2811883a 	mov	r8,r5
    7948:	200f883a 	mov	r7,r4
    794c:	41000017 	ldw	r4,0(r8)
    7950:	1fc00017 	ldw	ra,0(r3)
    7954:	63c00017 	ldw	r15,0(r12)
    7958:	39000015 	stw	r4,0(r7)
    795c:	53800017 	ldw	r14,0(r10)
    7960:	6fc00015 	stw	ra,0(r13)
    7964:	5bc00015 	stw	r15,0(r11)
    7968:	4b800015 	stw	r14,0(r9)
    796c:	18c00404 	addi	r3,r3,16
    7970:	39c00404 	addi	r7,r7,16
    7974:	42000404 	addi	r8,r8,16
    7978:	6b400404 	addi	r13,r13,16
    797c:	63000404 	addi	r12,r12,16
    7980:	5ac00404 	addi	r11,r11,16
    7984:	52800404 	addi	r10,r10,16
    7988:	4a400404 	addi	r9,r9,16
    798c:	1c3fef1e 	bne	r3,r16,794c <__alt_data_end+0xff00794c>
    7990:	89c00044 	addi	r7,r17,1
    7994:	380e913a 	slli	r7,r7,4
    7998:	310003cc 	andi	r4,r6,15
    799c:	02c000c4 	movi	r11,3
    79a0:	11c7883a 	add	r3,r2,r7
    79a4:	29cb883a 	add	r5,r5,r7
    79a8:	5900212e 	bgeu	r11,r4,7a30 <memcpy+0x140>
    79ac:	1813883a 	mov	r9,r3
    79b0:	2811883a 	mov	r8,r5
    79b4:	200f883a 	mov	r7,r4
    79b8:	42800017 	ldw	r10,0(r8)
    79bc:	4a400104 	addi	r9,r9,4
    79c0:	39ffff04 	addi	r7,r7,-4
    79c4:	4abfff15 	stw	r10,-4(r9)
    79c8:	42000104 	addi	r8,r8,4
    79cc:	59fffa36 	bltu	r11,r7,79b8 <__alt_data_end+0xff0079b8>
    79d0:	213fff04 	addi	r4,r4,-4
    79d4:	2008d0ba 	srli	r4,r4,2
    79d8:	318000cc 	andi	r6,r6,3
    79dc:	21000044 	addi	r4,r4,1
    79e0:	2109883a 	add	r4,r4,r4
    79e4:	2109883a 	add	r4,r4,r4
    79e8:	1907883a 	add	r3,r3,r4
    79ec:	290b883a 	add	r5,r5,r4
    79f0:	30000626 	beq	r6,zero,7a0c <memcpy+0x11c>
    79f4:	198d883a 	add	r6,r3,r6
    79f8:	29c00003 	ldbu	r7,0(r5)
    79fc:	18c00044 	addi	r3,r3,1
    7a00:	29400044 	addi	r5,r5,1
    7a04:	19ffffc5 	stb	r7,-1(r3)
    7a08:	19bffb1e 	bne	r3,r6,79f8 <__alt_data_end+0xff0079f8>
    7a0c:	dfc00217 	ldw	ra,8(sp)
    7a10:	dc400117 	ldw	r17,4(sp)
    7a14:	dc000017 	ldw	r16,0(sp)
    7a18:	dec00304 	addi	sp,sp,12
    7a1c:	f800283a 	ret
    7a20:	2007883a 	mov	r3,r4
    7a24:	003ff206 	br	79f0 <__alt_data_end+0xff0079f0>
    7a28:	2007883a 	mov	r3,r4
    7a2c:	003ff106 	br	79f4 <__alt_data_end+0xff0079f4>
    7a30:	200d883a 	mov	r6,r4
    7a34:	003fee06 	br	79f0 <__alt_data_end+0xff0079f0>

00007a38 <memmove>:
    7a38:	2005883a 	mov	r2,r4
    7a3c:	29000b2e 	bgeu	r5,r4,7a6c <memmove+0x34>
    7a40:	298f883a 	add	r7,r5,r6
    7a44:	21c0092e 	bgeu	r4,r7,7a6c <memmove+0x34>
    7a48:	2187883a 	add	r3,r4,r6
    7a4c:	198bc83a 	sub	r5,r3,r6
    7a50:	30004826 	beq	r6,zero,7b74 <memmove+0x13c>
    7a54:	39ffffc4 	addi	r7,r7,-1
    7a58:	39000003 	ldbu	r4,0(r7)
    7a5c:	18ffffc4 	addi	r3,r3,-1
    7a60:	19000005 	stb	r4,0(r3)
    7a64:	28fffb1e 	bne	r5,r3,7a54 <__alt_data_end+0xff007a54>
    7a68:	f800283a 	ret
    7a6c:	00c003c4 	movi	r3,15
    7a70:	1980412e 	bgeu	r3,r6,7b78 <memmove+0x140>
    7a74:	2886b03a 	or	r3,r5,r2
    7a78:	18c000cc 	andi	r3,r3,3
    7a7c:	1800401e 	bne	r3,zero,7b80 <memmove+0x148>
    7a80:	33fffc04 	addi	r15,r6,-16
    7a84:	781ed13a 	srli	r15,r15,4
    7a88:	28c00104 	addi	r3,r5,4
    7a8c:	13400104 	addi	r13,r2,4
    7a90:	781c913a 	slli	r14,r15,4
    7a94:	2b000204 	addi	r12,r5,8
    7a98:	12c00204 	addi	r11,r2,8
    7a9c:	73800504 	addi	r14,r14,20
    7aa0:	2a800304 	addi	r10,r5,12
    7aa4:	12400304 	addi	r9,r2,12
    7aa8:	2b9d883a 	add	r14,r5,r14
    7aac:	2811883a 	mov	r8,r5
    7ab0:	100f883a 	mov	r7,r2
    7ab4:	41000017 	ldw	r4,0(r8)
    7ab8:	39c00404 	addi	r7,r7,16
    7abc:	18c00404 	addi	r3,r3,16
    7ac0:	393ffc15 	stw	r4,-16(r7)
    7ac4:	193ffc17 	ldw	r4,-16(r3)
    7ac8:	6b400404 	addi	r13,r13,16
    7acc:	5ac00404 	addi	r11,r11,16
    7ad0:	693ffc15 	stw	r4,-16(r13)
    7ad4:	61000017 	ldw	r4,0(r12)
    7ad8:	4a400404 	addi	r9,r9,16
    7adc:	42000404 	addi	r8,r8,16
    7ae0:	593ffc15 	stw	r4,-16(r11)
    7ae4:	51000017 	ldw	r4,0(r10)
    7ae8:	63000404 	addi	r12,r12,16
    7aec:	52800404 	addi	r10,r10,16
    7af0:	493ffc15 	stw	r4,-16(r9)
    7af4:	1bbfef1e 	bne	r3,r14,7ab4 <__alt_data_end+0xff007ab4>
    7af8:	79000044 	addi	r4,r15,1
    7afc:	2008913a 	slli	r4,r4,4
    7b00:	328003cc 	andi	r10,r6,15
    7b04:	02c000c4 	movi	r11,3
    7b08:	1107883a 	add	r3,r2,r4
    7b0c:	290b883a 	add	r5,r5,r4
    7b10:	5a801e2e 	bgeu	r11,r10,7b8c <memmove+0x154>
    7b14:	1813883a 	mov	r9,r3
    7b18:	2811883a 	mov	r8,r5
    7b1c:	500f883a 	mov	r7,r10
    7b20:	41000017 	ldw	r4,0(r8)
    7b24:	4a400104 	addi	r9,r9,4
    7b28:	39ffff04 	addi	r7,r7,-4
    7b2c:	493fff15 	stw	r4,-4(r9)
    7b30:	42000104 	addi	r8,r8,4
    7b34:	59fffa36 	bltu	r11,r7,7b20 <__alt_data_end+0xff007b20>
    7b38:	513fff04 	addi	r4,r10,-4
    7b3c:	2008d0ba 	srli	r4,r4,2
    7b40:	318000cc 	andi	r6,r6,3
    7b44:	21000044 	addi	r4,r4,1
    7b48:	2109883a 	add	r4,r4,r4
    7b4c:	2109883a 	add	r4,r4,r4
    7b50:	1907883a 	add	r3,r3,r4
    7b54:	290b883a 	add	r5,r5,r4
    7b58:	30000b26 	beq	r6,zero,7b88 <memmove+0x150>
    7b5c:	198d883a 	add	r6,r3,r6
    7b60:	29c00003 	ldbu	r7,0(r5)
    7b64:	18c00044 	addi	r3,r3,1
    7b68:	29400044 	addi	r5,r5,1
    7b6c:	19ffffc5 	stb	r7,-1(r3)
    7b70:	19bffb1e 	bne	r3,r6,7b60 <__alt_data_end+0xff007b60>
    7b74:	f800283a 	ret
    7b78:	1007883a 	mov	r3,r2
    7b7c:	003ff606 	br	7b58 <__alt_data_end+0xff007b58>
    7b80:	1007883a 	mov	r3,r2
    7b84:	003ff506 	br	7b5c <__alt_data_end+0xff007b5c>
    7b88:	f800283a 	ret
    7b8c:	500d883a 	mov	r6,r10
    7b90:	003ff106 	br	7b58 <__alt_data_end+0xff007b58>

00007b94 <memset>:
    7b94:	20c000cc 	andi	r3,r4,3
    7b98:	2005883a 	mov	r2,r4
    7b9c:	18004426 	beq	r3,zero,7cb0 <memset+0x11c>
    7ba0:	31ffffc4 	addi	r7,r6,-1
    7ba4:	30004026 	beq	r6,zero,7ca8 <memset+0x114>
    7ba8:	2813883a 	mov	r9,r5
    7bac:	200d883a 	mov	r6,r4
    7bb0:	2007883a 	mov	r3,r4
    7bb4:	00000406 	br	7bc8 <memset+0x34>
    7bb8:	3a3fffc4 	addi	r8,r7,-1
    7bbc:	31800044 	addi	r6,r6,1
    7bc0:	38003926 	beq	r7,zero,7ca8 <memset+0x114>
    7bc4:	400f883a 	mov	r7,r8
    7bc8:	18c00044 	addi	r3,r3,1
    7bcc:	32400005 	stb	r9,0(r6)
    7bd0:	1a0000cc 	andi	r8,r3,3
    7bd4:	403ff81e 	bne	r8,zero,7bb8 <__alt_data_end+0xff007bb8>
    7bd8:	010000c4 	movi	r4,3
    7bdc:	21c02d2e 	bgeu	r4,r7,7c94 <memset+0x100>
    7be0:	29003fcc 	andi	r4,r5,255
    7be4:	200c923a 	slli	r6,r4,8
    7be8:	3108b03a 	or	r4,r6,r4
    7bec:	200c943a 	slli	r6,r4,16
    7bf0:	218cb03a 	or	r6,r4,r6
    7bf4:	010003c4 	movi	r4,15
    7bf8:	21c0182e 	bgeu	r4,r7,7c5c <memset+0xc8>
    7bfc:	3b3ffc04 	addi	r12,r7,-16
    7c00:	6018d13a 	srli	r12,r12,4
    7c04:	1a000104 	addi	r8,r3,4
    7c08:	1ac00204 	addi	r11,r3,8
    7c0c:	6008913a 	slli	r4,r12,4
    7c10:	1a800304 	addi	r10,r3,12
    7c14:	1813883a 	mov	r9,r3
    7c18:	21000504 	addi	r4,r4,20
    7c1c:	1909883a 	add	r4,r3,r4
    7c20:	49800015 	stw	r6,0(r9)
    7c24:	41800015 	stw	r6,0(r8)
    7c28:	59800015 	stw	r6,0(r11)
    7c2c:	51800015 	stw	r6,0(r10)
    7c30:	42000404 	addi	r8,r8,16
    7c34:	4a400404 	addi	r9,r9,16
    7c38:	5ac00404 	addi	r11,r11,16
    7c3c:	52800404 	addi	r10,r10,16
    7c40:	413ff71e 	bne	r8,r4,7c20 <__alt_data_end+0xff007c20>
    7c44:	63000044 	addi	r12,r12,1
    7c48:	6018913a 	slli	r12,r12,4
    7c4c:	39c003cc 	andi	r7,r7,15
    7c50:	010000c4 	movi	r4,3
    7c54:	1b07883a 	add	r3,r3,r12
    7c58:	21c00e2e 	bgeu	r4,r7,7c94 <memset+0x100>
    7c5c:	1813883a 	mov	r9,r3
    7c60:	3811883a 	mov	r8,r7
    7c64:	010000c4 	movi	r4,3
    7c68:	49800015 	stw	r6,0(r9)
    7c6c:	423fff04 	addi	r8,r8,-4
    7c70:	4a400104 	addi	r9,r9,4
    7c74:	223ffc36 	bltu	r4,r8,7c68 <__alt_data_end+0xff007c68>
    7c78:	393fff04 	addi	r4,r7,-4
    7c7c:	2008d0ba 	srli	r4,r4,2
    7c80:	39c000cc 	andi	r7,r7,3
    7c84:	21000044 	addi	r4,r4,1
    7c88:	2109883a 	add	r4,r4,r4
    7c8c:	2109883a 	add	r4,r4,r4
    7c90:	1907883a 	add	r3,r3,r4
    7c94:	38000526 	beq	r7,zero,7cac <memset+0x118>
    7c98:	19cf883a 	add	r7,r3,r7
    7c9c:	19400005 	stb	r5,0(r3)
    7ca0:	18c00044 	addi	r3,r3,1
    7ca4:	38fffd1e 	bne	r7,r3,7c9c <__alt_data_end+0xff007c9c>
    7ca8:	f800283a 	ret
    7cac:	f800283a 	ret
    7cb0:	2007883a 	mov	r3,r4
    7cb4:	300f883a 	mov	r7,r6
    7cb8:	003fc706 	br	7bd8 <__alt_data_end+0xff007bd8>

00007cbc <_Balloc>:
    7cbc:	20801317 	ldw	r2,76(r4)
    7cc0:	defffc04 	addi	sp,sp,-16
    7cc4:	dc400115 	stw	r17,4(sp)
    7cc8:	dc000015 	stw	r16,0(sp)
    7ccc:	dfc00315 	stw	ra,12(sp)
    7cd0:	dc800215 	stw	r18,8(sp)
    7cd4:	2023883a 	mov	r17,r4
    7cd8:	2821883a 	mov	r16,r5
    7cdc:	10000f26 	beq	r2,zero,7d1c <_Balloc+0x60>
    7ce0:	8407883a 	add	r3,r16,r16
    7ce4:	18c7883a 	add	r3,r3,r3
    7ce8:	10c7883a 	add	r3,r2,r3
    7cec:	18800017 	ldw	r2,0(r3)
    7cf0:	10001126 	beq	r2,zero,7d38 <_Balloc+0x7c>
    7cf4:	11000017 	ldw	r4,0(r2)
    7cf8:	19000015 	stw	r4,0(r3)
    7cfc:	10000415 	stw	zero,16(r2)
    7d00:	10000315 	stw	zero,12(r2)
    7d04:	dfc00317 	ldw	ra,12(sp)
    7d08:	dc800217 	ldw	r18,8(sp)
    7d0c:	dc400117 	ldw	r17,4(sp)
    7d10:	dc000017 	ldw	r16,0(sp)
    7d14:	dec00404 	addi	sp,sp,16
    7d18:	f800283a 	ret
    7d1c:	01800844 	movi	r6,33
    7d20:	01400104 	movi	r5,4
    7d24:	000aba40 	call	aba4 <_calloc_r>
    7d28:	88801315 	stw	r2,76(r17)
    7d2c:	103fec1e 	bne	r2,zero,7ce0 <__alt_data_end+0xff007ce0>
    7d30:	0005883a 	mov	r2,zero
    7d34:	003ff306 	br	7d04 <__alt_data_end+0xff007d04>
    7d38:	01400044 	movi	r5,1
    7d3c:	2c24983a 	sll	r18,r5,r16
    7d40:	8809883a 	mov	r4,r17
    7d44:	91800144 	addi	r6,r18,5
    7d48:	318d883a 	add	r6,r6,r6
    7d4c:	318d883a 	add	r6,r6,r6
    7d50:	000aba40 	call	aba4 <_calloc_r>
    7d54:	103ff626 	beq	r2,zero,7d30 <__alt_data_end+0xff007d30>
    7d58:	14000115 	stw	r16,4(r2)
    7d5c:	14800215 	stw	r18,8(r2)
    7d60:	003fe606 	br	7cfc <__alt_data_end+0xff007cfc>

00007d64 <_Bfree>:
    7d64:	28000826 	beq	r5,zero,7d88 <_Bfree+0x24>
    7d68:	28c00117 	ldw	r3,4(r5)
    7d6c:	20801317 	ldw	r2,76(r4)
    7d70:	18c7883a 	add	r3,r3,r3
    7d74:	18c7883a 	add	r3,r3,r3
    7d78:	10c5883a 	add	r2,r2,r3
    7d7c:	10c00017 	ldw	r3,0(r2)
    7d80:	28c00015 	stw	r3,0(r5)
    7d84:	11400015 	stw	r5,0(r2)
    7d88:	f800283a 	ret

00007d8c <__multadd>:
    7d8c:	defffa04 	addi	sp,sp,-24
    7d90:	dc800315 	stw	r18,12(sp)
    7d94:	dc400215 	stw	r17,8(sp)
    7d98:	dc000115 	stw	r16,4(sp)
    7d9c:	2823883a 	mov	r17,r5
    7da0:	2c000417 	ldw	r16,16(r5)
    7da4:	dfc00515 	stw	ra,20(sp)
    7da8:	dcc00415 	stw	r19,16(sp)
    7dac:	2025883a 	mov	r18,r4
    7db0:	29400504 	addi	r5,r5,20
    7db4:	0011883a 	mov	r8,zero
    7db8:	28c00017 	ldw	r3,0(r5)
    7dbc:	29400104 	addi	r5,r5,4
    7dc0:	42000044 	addi	r8,r8,1
    7dc4:	18bfffcc 	andi	r2,r3,65535
    7dc8:	1185383a 	mul	r2,r2,r6
    7dcc:	1806d43a 	srli	r3,r3,16
    7dd0:	11cf883a 	add	r7,r2,r7
    7dd4:	3808d43a 	srli	r4,r7,16
    7dd8:	1987383a 	mul	r3,r3,r6
    7ddc:	38bfffcc 	andi	r2,r7,65535
    7de0:	1907883a 	add	r3,r3,r4
    7de4:	1808943a 	slli	r4,r3,16
    7de8:	180ed43a 	srli	r7,r3,16
    7dec:	2085883a 	add	r2,r4,r2
    7df0:	28bfff15 	stw	r2,-4(r5)
    7df4:	443ff016 	blt	r8,r16,7db8 <__alt_data_end+0xff007db8>
    7df8:	38000926 	beq	r7,zero,7e20 <__multadd+0x94>
    7dfc:	88800217 	ldw	r2,8(r17)
    7e00:	80800f0e 	bge	r16,r2,7e40 <__multadd+0xb4>
    7e04:	80800144 	addi	r2,r16,5
    7e08:	1085883a 	add	r2,r2,r2
    7e0c:	1085883a 	add	r2,r2,r2
    7e10:	8885883a 	add	r2,r17,r2
    7e14:	11c00015 	stw	r7,0(r2)
    7e18:	84000044 	addi	r16,r16,1
    7e1c:	8c000415 	stw	r16,16(r17)
    7e20:	8805883a 	mov	r2,r17
    7e24:	dfc00517 	ldw	ra,20(sp)
    7e28:	dcc00417 	ldw	r19,16(sp)
    7e2c:	dc800317 	ldw	r18,12(sp)
    7e30:	dc400217 	ldw	r17,8(sp)
    7e34:	dc000117 	ldw	r16,4(sp)
    7e38:	dec00604 	addi	sp,sp,24
    7e3c:	f800283a 	ret
    7e40:	89400117 	ldw	r5,4(r17)
    7e44:	9009883a 	mov	r4,r18
    7e48:	d9c00015 	stw	r7,0(sp)
    7e4c:	29400044 	addi	r5,r5,1
    7e50:	0007cbc0 	call	7cbc <_Balloc>
    7e54:	89800417 	ldw	r6,16(r17)
    7e58:	89400304 	addi	r5,r17,12
    7e5c:	11000304 	addi	r4,r2,12
    7e60:	31800084 	addi	r6,r6,2
    7e64:	318d883a 	add	r6,r6,r6
    7e68:	318d883a 	add	r6,r6,r6
    7e6c:	1027883a 	mov	r19,r2
    7e70:	00078f00 	call	78f0 <memcpy>
    7e74:	d9c00017 	ldw	r7,0(sp)
    7e78:	88000a26 	beq	r17,zero,7ea4 <__multadd+0x118>
    7e7c:	88c00117 	ldw	r3,4(r17)
    7e80:	90801317 	ldw	r2,76(r18)
    7e84:	18c7883a 	add	r3,r3,r3
    7e88:	18c7883a 	add	r3,r3,r3
    7e8c:	10c5883a 	add	r2,r2,r3
    7e90:	10c00017 	ldw	r3,0(r2)
    7e94:	88c00015 	stw	r3,0(r17)
    7e98:	14400015 	stw	r17,0(r2)
    7e9c:	9823883a 	mov	r17,r19
    7ea0:	003fd806 	br	7e04 <__alt_data_end+0xff007e04>
    7ea4:	9823883a 	mov	r17,r19
    7ea8:	003fd606 	br	7e04 <__alt_data_end+0xff007e04>

00007eac <__s2b>:
    7eac:	defff904 	addi	sp,sp,-28
    7eb0:	dc400115 	stw	r17,4(sp)
    7eb4:	dc000015 	stw	r16,0(sp)
    7eb8:	2023883a 	mov	r17,r4
    7ebc:	2821883a 	mov	r16,r5
    7ec0:	39000204 	addi	r4,r7,8
    7ec4:	01400244 	movi	r5,9
    7ec8:	dcc00315 	stw	r19,12(sp)
    7ecc:	dc800215 	stw	r18,8(sp)
    7ed0:	dfc00615 	stw	ra,24(sp)
    7ed4:	dd400515 	stw	r21,20(sp)
    7ed8:	dd000415 	stw	r20,16(sp)
    7edc:	3825883a 	mov	r18,r7
    7ee0:	3027883a 	mov	r19,r6
    7ee4:	0001bf40 	call	1bf4 <__divsi3>
    7ee8:	00c00044 	movi	r3,1
    7eec:	000b883a 	mov	r5,zero
    7ef0:	1880030e 	bge	r3,r2,7f00 <__s2b+0x54>
    7ef4:	18c7883a 	add	r3,r3,r3
    7ef8:	29400044 	addi	r5,r5,1
    7efc:	18bffd16 	blt	r3,r2,7ef4 <__alt_data_end+0xff007ef4>
    7f00:	8809883a 	mov	r4,r17
    7f04:	0007cbc0 	call	7cbc <_Balloc>
    7f08:	d8c00717 	ldw	r3,28(sp)
    7f0c:	10c00515 	stw	r3,20(r2)
    7f10:	00c00044 	movi	r3,1
    7f14:	10c00415 	stw	r3,16(r2)
    7f18:	00c00244 	movi	r3,9
    7f1c:	1cc0210e 	bge	r3,r19,7fa4 <__s2b+0xf8>
    7f20:	80eb883a 	add	r21,r16,r3
    7f24:	a829883a 	mov	r20,r21
    7f28:	84e1883a 	add	r16,r16,r19
    7f2c:	a1c00007 	ldb	r7,0(r20)
    7f30:	01800284 	movi	r6,10
    7f34:	a5000044 	addi	r20,r20,1
    7f38:	100b883a 	mov	r5,r2
    7f3c:	39fff404 	addi	r7,r7,-48
    7f40:	8809883a 	mov	r4,r17
    7f44:	0007d8c0 	call	7d8c <__multadd>
    7f48:	a43ff81e 	bne	r20,r16,7f2c <__alt_data_end+0xff007f2c>
    7f4c:	ace1883a 	add	r16,r21,r19
    7f50:	843ffe04 	addi	r16,r16,-8
    7f54:	9c800a0e 	bge	r19,r18,7f80 <__s2b+0xd4>
    7f58:	94e5c83a 	sub	r18,r18,r19
    7f5c:	84a5883a 	add	r18,r16,r18
    7f60:	81c00007 	ldb	r7,0(r16)
    7f64:	01800284 	movi	r6,10
    7f68:	84000044 	addi	r16,r16,1
    7f6c:	100b883a 	mov	r5,r2
    7f70:	39fff404 	addi	r7,r7,-48
    7f74:	8809883a 	mov	r4,r17
    7f78:	0007d8c0 	call	7d8c <__multadd>
    7f7c:	84bff81e 	bne	r16,r18,7f60 <__alt_data_end+0xff007f60>
    7f80:	dfc00617 	ldw	ra,24(sp)
    7f84:	dd400517 	ldw	r21,20(sp)
    7f88:	dd000417 	ldw	r20,16(sp)
    7f8c:	dcc00317 	ldw	r19,12(sp)
    7f90:	dc800217 	ldw	r18,8(sp)
    7f94:	dc400117 	ldw	r17,4(sp)
    7f98:	dc000017 	ldw	r16,0(sp)
    7f9c:	dec00704 	addi	sp,sp,28
    7fa0:	f800283a 	ret
    7fa4:	84000284 	addi	r16,r16,10
    7fa8:	1827883a 	mov	r19,r3
    7fac:	003fe906 	br	7f54 <__alt_data_end+0xff007f54>

00007fb0 <__hi0bits>:
    7fb0:	20bfffec 	andhi	r2,r4,65535
    7fb4:	1000141e 	bne	r2,zero,8008 <__hi0bits+0x58>
    7fb8:	2008943a 	slli	r4,r4,16
    7fbc:	00800404 	movi	r2,16
    7fc0:	20ffc02c 	andhi	r3,r4,65280
    7fc4:	1800021e 	bne	r3,zero,7fd0 <__hi0bits+0x20>
    7fc8:	2008923a 	slli	r4,r4,8
    7fcc:	10800204 	addi	r2,r2,8
    7fd0:	20fc002c 	andhi	r3,r4,61440
    7fd4:	1800021e 	bne	r3,zero,7fe0 <__hi0bits+0x30>
    7fd8:	2008913a 	slli	r4,r4,4
    7fdc:	10800104 	addi	r2,r2,4
    7fe0:	20f0002c 	andhi	r3,r4,49152
    7fe4:	1800031e 	bne	r3,zero,7ff4 <__hi0bits+0x44>
    7fe8:	2109883a 	add	r4,r4,r4
    7fec:	10800084 	addi	r2,r2,2
    7ff0:	2109883a 	add	r4,r4,r4
    7ff4:	20000316 	blt	r4,zero,8004 <__hi0bits+0x54>
    7ff8:	2110002c 	andhi	r4,r4,16384
    7ffc:	2000041e 	bne	r4,zero,8010 <__hi0bits+0x60>
    8000:	00800804 	movi	r2,32
    8004:	f800283a 	ret
    8008:	0005883a 	mov	r2,zero
    800c:	003fec06 	br	7fc0 <__alt_data_end+0xff007fc0>
    8010:	10800044 	addi	r2,r2,1
    8014:	f800283a 	ret

00008018 <__lo0bits>:
    8018:	20c00017 	ldw	r3,0(r4)
    801c:	188001cc 	andi	r2,r3,7
    8020:	10000826 	beq	r2,zero,8044 <__lo0bits+0x2c>
    8024:	1880004c 	andi	r2,r3,1
    8028:	1000211e 	bne	r2,zero,80b0 <__lo0bits+0x98>
    802c:	1880008c 	andi	r2,r3,2
    8030:	1000211e 	bne	r2,zero,80b8 <__lo0bits+0xa0>
    8034:	1806d0ba 	srli	r3,r3,2
    8038:	00800084 	movi	r2,2
    803c:	20c00015 	stw	r3,0(r4)
    8040:	f800283a 	ret
    8044:	18bfffcc 	andi	r2,r3,65535
    8048:	10001326 	beq	r2,zero,8098 <__lo0bits+0x80>
    804c:	0005883a 	mov	r2,zero
    8050:	19403fcc 	andi	r5,r3,255
    8054:	2800021e 	bne	r5,zero,8060 <__lo0bits+0x48>
    8058:	1806d23a 	srli	r3,r3,8
    805c:	10800204 	addi	r2,r2,8
    8060:	194003cc 	andi	r5,r3,15
    8064:	2800021e 	bne	r5,zero,8070 <__lo0bits+0x58>
    8068:	1806d13a 	srli	r3,r3,4
    806c:	10800104 	addi	r2,r2,4
    8070:	194000cc 	andi	r5,r3,3
    8074:	2800021e 	bne	r5,zero,8080 <__lo0bits+0x68>
    8078:	1806d0ba 	srli	r3,r3,2
    807c:	10800084 	addi	r2,r2,2
    8080:	1940004c 	andi	r5,r3,1
    8084:	2800081e 	bne	r5,zero,80a8 <__lo0bits+0x90>
    8088:	1806d07a 	srli	r3,r3,1
    808c:	1800051e 	bne	r3,zero,80a4 <__lo0bits+0x8c>
    8090:	00800804 	movi	r2,32
    8094:	f800283a 	ret
    8098:	1806d43a 	srli	r3,r3,16
    809c:	00800404 	movi	r2,16
    80a0:	003feb06 	br	8050 <__alt_data_end+0xff008050>
    80a4:	10800044 	addi	r2,r2,1
    80a8:	20c00015 	stw	r3,0(r4)
    80ac:	f800283a 	ret
    80b0:	0005883a 	mov	r2,zero
    80b4:	f800283a 	ret
    80b8:	1806d07a 	srli	r3,r3,1
    80bc:	00800044 	movi	r2,1
    80c0:	20c00015 	stw	r3,0(r4)
    80c4:	f800283a 	ret

000080c8 <__i2b>:
    80c8:	defffd04 	addi	sp,sp,-12
    80cc:	dc000015 	stw	r16,0(sp)
    80d0:	04000044 	movi	r16,1
    80d4:	dc400115 	stw	r17,4(sp)
    80d8:	2823883a 	mov	r17,r5
    80dc:	800b883a 	mov	r5,r16
    80e0:	dfc00215 	stw	ra,8(sp)
    80e4:	0007cbc0 	call	7cbc <_Balloc>
    80e8:	14400515 	stw	r17,20(r2)
    80ec:	14000415 	stw	r16,16(r2)
    80f0:	dfc00217 	ldw	ra,8(sp)
    80f4:	dc400117 	ldw	r17,4(sp)
    80f8:	dc000017 	ldw	r16,0(sp)
    80fc:	dec00304 	addi	sp,sp,12
    8100:	f800283a 	ret

00008104 <__multiply>:
    8104:	defffa04 	addi	sp,sp,-24
    8108:	dcc00315 	stw	r19,12(sp)
    810c:	dc800215 	stw	r18,8(sp)
    8110:	34c00417 	ldw	r19,16(r6)
    8114:	2c800417 	ldw	r18,16(r5)
    8118:	dd000415 	stw	r20,16(sp)
    811c:	dc400115 	stw	r17,4(sp)
    8120:	dfc00515 	stw	ra,20(sp)
    8124:	dc000015 	stw	r16,0(sp)
    8128:	2829883a 	mov	r20,r5
    812c:	3023883a 	mov	r17,r6
    8130:	94c0050e 	bge	r18,r19,8148 <__multiply+0x44>
    8134:	9007883a 	mov	r3,r18
    8138:	3029883a 	mov	r20,r6
    813c:	9825883a 	mov	r18,r19
    8140:	2823883a 	mov	r17,r5
    8144:	1827883a 	mov	r19,r3
    8148:	a0800217 	ldw	r2,8(r20)
    814c:	94e1883a 	add	r16,r18,r19
    8150:	a1400117 	ldw	r5,4(r20)
    8154:	1400010e 	bge	r2,r16,815c <__multiply+0x58>
    8158:	29400044 	addi	r5,r5,1
    815c:	0007cbc0 	call	7cbc <_Balloc>
    8160:	8415883a 	add	r10,r16,r16
    8164:	12c00504 	addi	r11,r2,20
    8168:	5295883a 	add	r10,r10,r10
    816c:	5a95883a 	add	r10,r11,r10
    8170:	5807883a 	mov	r3,r11
    8174:	5a80032e 	bgeu	r11,r10,8184 <__multiply+0x80>
    8178:	18000015 	stw	zero,0(r3)
    817c:	18c00104 	addi	r3,r3,4
    8180:	1abffd36 	bltu	r3,r10,8178 <__alt_data_end+0xff008178>
    8184:	9ce7883a 	add	r19,r19,r19
    8188:	94a5883a 	add	r18,r18,r18
    818c:	89800504 	addi	r6,r17,20
    8190:	9ce7883a 	add	r19,r19,r19
    8194:	a3400504 	addi	r13,r20,20
    8198:	94a5883a 	add	r18,r18,r18
    819c:	34d9883a 	add	r12,r6,r19
    81a0:	6c93883a 	add	r9,r13,r18
    81a4:	3300422e 	bgeu	r6,r12,82b0 <__multiply+0x1ac>
    81a8:	37c00017 	ldw	ra,0(r6)
    81ac:	fbffffcc 	andi	r15,ra,65535
    81b0:	78001b26 	beq	r15,zero,8220 <__multiply+0x11c>
    81b4:	5811883a 	mov	r8,r11
    81b8:	681d883a 	mov	r14,r13
    81bc:	000f883a 	mov	r7,zero
    81c0:	71000017 	ldw	r4,0(r14)
    81c4:	40c00017 	ldw	r3,0(r8)
    81c8:	73800104 	addi	r14,r14,4
    81cc:	217fffcc 	andi	r5,r4,65535
    81d0:	2bcb383a 	mul	r5,r5,r15
    81d4:	2008d43a 	srli	r4,r4,16
    81d8:	1c7fffcc 	andi	r17,r3,65535
    81dc:	2c4b883a 	add	r5,r5,r17
    81e0:	29cb883a 	add	r5,r5,r7
    81e4:	23c9383a 	mul	r4,r4,r15
    81e8:	1806d43a 	srli	r3,r3,16
    81ec:	280ed43a 	srli	r7,r5,16
    81f0:	297fffcc 	andi	r5,r5,65535
    81f4:	20c7883a 	add	r3,r4,r3
    81f8:	19c7883a 	add	r3,r3,r7
    81fc:	1808943a 	slli	r4,r3,16
    8200:	4023883a 	mov	r17,r8
    8204:	180ed43a 	srli	r7,r3,16
    8208:	214ab03a 	or	r5,r4,r5
    820c:	41400015 	stw	r5,0(r8)
    8210:	42000104 	addi	r8,r8,4
    8214:	727fea36 	bltu	r14,r9,81c0 <__alt_data_end+0xff0081c0>
    8218:	89c00115 	stw	r7,4(r17)
    821c:	37c00017 	ldw	ra,0(r6)
    8220:	f83ed43a 	srli	ra,ra,16
    8224:	f8001f26 	beq	ra,zero,82a4 <__multiply+0x1a0>
    8228:	58c00017 	ldw	r3,0(r11)
    822c:	681d883a 	mov	r14,r13
    8230:	581f883a 	mov	r15,r11
    8234:	1811883a 	mov	r8,r3
    8238:	5825883a 	mov	r18,r11
    823c:	000f883a 	mov	r7,zero
    8240:	00000106 	br	8248 <__multiply+0x144>
    8244:	8825883a 	mov	r18,r17
    8248:	7140000b 	ldhu	r5,0(r14)
    824c:	4010d43a 	srli	r8,r8,16
    8250:	193fffcc 	andi	r4,r3,65535
    8254:	2fcb383a 	mul	r5,r5,ra
    8258:	7bc00104 	addi	r15,r15,4
    825c:	73800104 	addi	r14,r14,4
    8260:	2a0b883a 	add	r5,r5,r8
    8264:	29cb883a 	add	r5,r5,r7
    8268:	2806943a 	slli	r3,r5,16
    826c:	94400104 	addi	r17,r18,4
    8270:	280ad43a 	srli	r5,r5,16
    8274:	1908b03a 	or	r4,r3,r4
    8278:	793fff15 	stw	r4,-4(r15)
    827c:	70ffff17 	ldw	r3,-4(r14)
    8280:	8a000017 	ldw	r8,0(r17)
    8284:	1806d43a 	srli	r3,r3,16
    8288:	413fffcc 	andi	r4,r8,65535
    828c:	1fc7383a 	mul	r3,r3,ra
    8290:	1907883a 	add	r3,r3,r4
    8294:	1947883a 	add	r3,r3,r5
    8298:	180ed43a 	srli	r7,r3,16
    829c:	727fe936 	bltu	r14,r9,8244 <__alt_data_end+0xff008244>
    82a0:	90c00115 	stw	r3,4(r18)
    82a4:	31800104 	addi	r6,r6,4
    82a8:	5ac00104 	addi	r11,r11,4
    82ac:	333fbe36 	bltu	r6,r12,81a8 <__alt_data_end+0xff0081a8>
    82b0:	0400090e 	bge	zero,r16,82d8 <__multiply+0x1d4>
    82b4:	50ffff17 	ldw	r3,-4(r10)
    82b8:	52bfff04 	addi	r10,r10,-4
    82bc:	18000326 	beq	r3,zero,82cc <__multiply+0x1c8>
    82c0:	00000506 	br	82d8 <__multiply+0x1d4>
    82c4:	50c00017 	ldw	r3,0(r10)
    82c8:	1800031e 	bne	r3,zero,82d8 <__multiply+0x1d4>
    82cc:	843fffc4 	addi	r16,r16,-1
    82d0:	52bfff04 	addi	r10,r10,-4
    82d4:	803ffb1e 	bne	r16,zero,82c4 <__alt_data_end+0xff0082c4>
    82d8:	14000415 	stw	r16,16(r2)
    82dc:	dfc00517 	ldw	ra,20(sp)
    82e0:	dd000417 	ldw	r20,16(sp)
    82e4:	dcc00317 	ldw	r19,12(sp)
    82e8:	dc800217 	ldw	r18,8(sp)
    82ec:	dc400117 	ldw	r17,4(sp)
    82f0:	dc000017 	ldw	r16,0(sp)
    82f4:	dec00604 	addi	sp,sp,24
    82f8:	f800283a 	ret

000082fc <__pow5mult>:
    82fc:	defffa04 	addi	sp,sp,-24
    8300:	dcc00315 	stw	r19,12(sp)
    8304:	dc000015 	stw	r16,0(sp)
    8308:	dfc00515 	stw	ra,20(sp)
    830c:	dd000415 	stw	r20,16(sp)
    8310:	dc800215 	stw	r18,8(sp)
    8314:	dc400115 	stw	r17,4(sp)
    8318:	308000cc 	andi	r2,r6,3
    831c:	3021883a 	mov	r16,r6
    8320:	2027883a 	mov	r19,r4
    8324:	10002f1e 	bne	r2,zero,83e4 <__pow5mult+0xe8>
    8328:	2825883a 	mov	r18,r5
    832c:	8021d0ba 	srai	r16,r16,2
    8330:	80001a26 	beq	r16,zero,839c <__pow5mult+0xa0>
    8334:	9c401217 	ldw	r17,72(r19)
    8338:	8800061e 	bne	r17,zero,8354 <__pow5mult+0x58>
    833c:	00003406 	br	8410 <__pow5mult+0x114>
    8340:	8021d07a 	srai	r16,r16,1
    8344:	80001526 	beq	r16,zero,839c <__pow5mult+0xa0>
    8348:	88800017 	ldw	r2,0(r17)
    834c:	10001c26 	beq	r2,zero,83c0 <__pow5mult+0xc4>
    8350:	1023883a 	mov	r17,r2
    8354:	8080004c 	andi	r2,r16,1
    8358:	103ff926 	beq	r2,zero,8340 <__alt_data_end+0xff008340>
    835c:	880d883a 	mov	r6,r17
    8360:	900b883a 	mov	r5,r18
    8364:	9809883a 	mov	r4,r19
    8368:	00081040 	call	8104 <__multiply>
    836c:	90001b26 	beq	r18,zero,83dc <__pow5mult+0xe0>
    8370:	91000117 	ldw	r4,4(r18)
    8374:	98c01317 	ldw	r3,76(r19)
    8378:	8021d07a 	srai	r16,r16,1
    837c:	2109883a 	add	r4,r4,r4
    8380:	2109883a 	add	r4,r4,r4
    8384:	1907883a 	add	r3,r3,r4
    8388:	19000017 	ldw	r4,0(r3)
    838c:	91000015 	stw	r4,0(r18)
    8390:	1c800015 	stw	r18,0(r3)
    8394:	1025883a 	mov	r18,r2
    8398:	803feb1e 	bne	r16,zero,8348 <__alt_data_end+0xff008348>
    839c:	9005883a 	mov	r2,r18
    83a0:	dfc00517 	ldw	ra,20(sp)
    83a4:	dd000417 	ldw	r20,16(sp)
    83a8:	dcc00317 	ldw	r19,12(sp)
    83ac:	dc800217 	ldw	r18,8(sp)
    83b0:	dc400117 	ldw	r17,4(sp)
    83b4:	dc000017 	ldw	r16,0(sp)
    83b8:	dec00604 	addi	sp,sp,24
    83bc:	f800283a 	ret
    83c0:	880d883a 	mov	r6,r17
    83c4:	880b883a 	mov	r5,r17
    83c8:	9809883a 	mov	r4,r19
    83cc:	00081040 	call	8104 <__multiply>
    83d0:	88800015 	stw	r2,0(r17)
    83d4:	10000015 	stw	zero,0(r2)
    83d8:	003fdd06 	br	8350 <__alt_data_end+0xff008350>
    83dc:	1025883a 	mov	r18,r2
    83e0:	003fd706 	br	8340 <__alt_data_end+0xff008340>
    83e4:	10bfffc4 	addi	r2,r2,-1
    83e8:	1085883a 	add	r2,r2,r2
    83ec:	00c00074 	movhi	r3,1
    83f0:	18c52b04 	addi	r3,r3,5292
    83f4:	1085883a 	add	r2,r2,r2
    83f8:	1885883a 	add	r2,r3,r2
    83fc:	11800017 	ldw	r6,0(r2)
    8400:	000f883a 	mov	r7,zero
    8404:	0007d8c0 	call	7d8c <__multadd>
    8408:	1025883a 	mov	r18,r2
    840c:	003fc706 	br	832c <__alt_data_end+0xff00832c>
    8410:	05000044 	movi	r20,1
    8414:	a00b883a 	mov	r5,r20
    8418:	9809883a 	mov	r4,r19
    841c:	0007cbc0 	call	7cbc <_Balloc>
    8420:	1023883a 	mov	r17,r2
    8424:	00809c44 	movi	r2,625
    8428:	88800515 	stw	r2,20(r17)
    842c:	8d000415 	stw	r20,16(r17)
    8430:	9c401215 	stw	r17,72(r19)
    8434:	88000015 	stw	zero,0(r17)
    8438:	003fc606 	br	8354 <__alt_data_end+0xff008354>

0000843c <__lshift>:
    843c:	defff904 	addi	sp,sp,-28
    8440:	dd400515 	stw	r21,20(sp)
    8444:	dcc00315 	stw	r19,12(sp)
    8448:	302bd17a 	srai	r21,r6,5
    844c:	2cc00417 	ldw	r19,16(r5)
    8450:	28800217 	ldw	r2,8(r5)
    8454:	dd000415 	stw	r20,16(sp)
    8458:	ace7883a 	add	r19,r21,r19
    845c:	dc800215 	stw	r18,8(sp)
    8460:	dc400115 	stw	r17,4(sp)
    8464:	dc000015 	stw	r16,0(sp)
    8468:	dfc00615 	stw	ra,24(sp)
    846c:	9c000044 	addi	r16,r19,1
    8470:	2823883a 	mov	r17,r5
    8474:	3029883a 	mov	r20,r6
    8478:	2025883a 	mov	r18,r4
    847c:	29400117 	ldw	r5,4(r5)
    8480:	1400030e 	bge	r2,r16,8490 <__lshift+0x54>
    8484:	1085883a 	add	r2,r2,r2
    8488:	29400044 	addi	r5,r5,1
    848c:	143ffd16 	blt	r2,r16,8484 <__alt_data_end+0xff008484>
    8490:	9009883a 	mov	r4,r18
    8494:	0007cbc0 	call	7cbc <_Balloc>
    8498:	10c00504 	addi	r3,r2,20
    849c:	0540070e 	bge	zero,r21,84bc <__lshift+0x80>
    84a0:	ad6b883a 	add	r21,r21,r21
    84a4:	ad6b883a 	add	r21,r21,r21
    84a8:	1809883a 	mov	r4,r3
    84ac:	1d47883a 	add	r3,r3,r21
    84b0:	20000015 	stw	zero,0(r4)
    84b4:	21000104 	addi	r4,r4,4
    84b8:	193ffd1e 	bne	r3,r4,84b0 <__alt_data_end+0xff0084b0>
    84bc:	8a000417 	ldw	r8,16(r17)
    84c0:	89000504 	addi	r4,r17,20
    84c4:	a18007cc 	andi	r6,r20,31
    84c8:	4211883a 	add	r8,r8,r8
    84cc:	4211883a 	add	r8,r8,r8
    84d0:	2211883a 	add	r8,r4,r8
    84d4:	30002326 	beq	r6,zero,8564 <__lshift+0x128>
    84d8:	02400804 	movi	r9,32
    84dc:	4993c83a 	sub	r9,r9,r6
    84e0:	000b883a 	mov	r5,zero
    84e4:	21c00017 	ldw	r7,0(r4)
    84e8:	1815883a 	mov	r10,r3
    84ec:	18c00104 	addi	r3,r3,4
    84f0:	398e983a 	sll	r7,r7,r6
    84f4:	21000104 	addi	r4,r4,4
    84f8:	394ab03a 	or	r5,r7,r5
    84fc:	197fff15 	stw	r5,-4(r3)
    8500:	217fff17 	ldw	r5,-4(r4)
    8504:	2a4ad83a 	srl	r5,r5,r9
    8508:	223ff636 	bltu	r4,r8,84e4 <__alt_data_end+0xff0084e4>
    850c:	51400115 	stw	r5,4(r10)
    8510:	28001a1e 	bne	r5,zero,857c <__lshift+0x140>
    8514:	843fffc4 	addi	r16,r16,-1
    8518:	14000415 	stw	r16,16(r2)
    851c:	88000826 	beq	r17,zero,8540 <__lshift+0x104>
    8520:	89000117 	ldw	r4,4(r17)
    8524:	90c01317 	ldw	r3,76(r18)
    8528:	2109883a 	add	r4,r4,r4
    852c:	2109883a 	add	r4,r4,r4
    8530:	1907883a 	add	r3,r3,r4
    8534:	19000017 	ldw	r4,0(r3)
    8538:	89000015 	stw	r4,0(r17)
    853c:	1c400015 	stw	r17,0(r3)
    8540:	dfc00617 	ldw	ra,24(sp)
    8544:	dd400517 	ldw	r21,20(sp)
    8548:	dd000417 	ldw	r20,16(sp)
    854c:	dcc00317 	ldw	r19,12(sp)
    8550:	dc800217 	ldw	r18,8(sp)
    8554:	dc400117 	ldw	r17,4(sp)
    8558:	dc000017 	ldw	r16,0(sp)
    855c:	dec00704 	addi	sp,sp,28
    8560:	f800283a 	ret
    8564:	21400017 	ldw	r5,0(r4)
    8568:	18c00104 	addi	r3,r3,4
    856c:	21000104 	addi	r4,r4,4
    8570:	197fff15 	stw	r5,-4(r3)
    8574:	223ffb36 	bltu	r4,r8,8564 <__alt_data_end+0xff008564>
    8578:	003fe606 	br	8514 <__alt_data_end+0xff008514>
    857c:	9c000084 	addi	r16,r19,2
    8580:	003fe406 	br	8514 <__alt_data_end+0xff008514>

00008584 <__mcmp>:
    8584:	20800417 	ldw	r2,16(r4)
    8588:	28c00417 	ldw	r3,16(r5)
    858c:	10c5c83a 	sub	r2,r2,r3
    8590:	1000111e 	bne	r2,zero,85d8 <__mcmp+0x54>
    8594:	18c7883a 	add	r3,r3,r3
    8598:	18c7883a 	add	r3,r3,r3
    859c:	21000504 	addi	r4,r4,20
    85a0:	29400504 	addi	r5,r5,20
    85a4:	20c5883a 	add	r2,r4,r3
    85a8:	28cb883a 	add	r5,r5,r3
    85ac:	00000106 	br	85b4 <__mcmp+0x30>
    85b0:	20800a2e 	bgeu	r4,r2,85dc <__mcmp+0x58>
    85b4:	10bfff04 	addi	r2,r2,-4
    85b8:	297fff04 	addi	r5,r5,-4
    85bc:	11800017 	ldw	r6,0(r2)
    85c0:	28c00017 	ldw	r3,0(r5)
    85c4:	30fffa26 	beq	r6,r3,85b0 <__alt_data_end+0xff0085b0>
    85c8:	30c00236 	bltu	r6,r3,85d4 <__mcmp+0x50>
    85cc:	00800044 	movi	r2,1
    85d0:	f800283a 	ret
    85d4:	00bfffc4 	movi	r2,-1
    85d8:	f800283a 	ret
    85dc:	0005883a 	mov	r2,zero
    85e0:	f800283a 	ret

000085e4 <__mdiff>:
    85e4:	28c00417 	ldw	r3,16(r5)
    85e8:	30800417 	ldw	r2,16(r6)
    85ec:	defffa04 	addi	sp,sp,-24
    85f0:	dcc00315 	stw	r19,12(sp)
    85f4:	dc800215 	stw	r18,8(sp)
    85f8:	dfc00515 	stw	ra,20(sp)
    85fc:	dd000415 	stw	r20,16(sp)
    8600:	dc400115 	stw	r17,4(sp)
    8604:	dc000015 	stw	r16,0(sp)
    8608:	1887c83a 	sub	r3,r3,r2
    860c:	2825883a 	mov	r18,r5
    8610:	3027883a 	mov	r19,r6
    8614:	1800141e 	bne	r3,zero,8668 <__mdiff+0x84>
    8618:	1085883a 	add	r2,r2,r2
    861c:	1085883a 	add	r2,r2,r2
    8620:	2a000504 	addi	r8,r5,20
    8624:	34000504 	addi	r16,r6,20
    8628:	4087883a 	add	r3,r8,r2
    862c:	8085883a 	add	r2,r16,r2
    8630:	00000106 	br	8638 <__mdiff+0x54>
    8634:	40c0592e 	bgeu	r8,r3,879c <__mdiff+0x1b8>
    8638:	18ffff04 	addi	r3,r3,-4
    863c:	10bfff04 	addi	r2,r2,-4
    8640:	19c00017 	ldw	r7,0(r3)
    8644:	11400017 	ldw	r5,0(r2)
    8648:	397ffa26 	beq	r7,r5,8634 <__alt_data_end+0xff008634>
    864c:	3940592e 	bgeu	r7,r5,87b4 <__mdiff+0x1d0>
    8650:	9005883a 	mov	r2,r18
    8654:	4023883a 	mov	r17,r8
    8658:	9825883a 	mov	r18,r19
    865c:	05000044 	movi	r20,1
    8660:	1027883a 	mov	r19,r2
    8664:	00000406 	br	8678 <__mdiff+0x94>
    8668:	18005616 	blt	r3,zero,87c4 <__mdiff+0x1e0>
    866c:	34400504 	addi	r17,r6,20
    8670:	2c000504 	addi	r16,r5,20
    8674:	0029883a 	mov	r20,zero
    8678:	91400117 	ldw	r5,4(r18)
    867c:	0007cbc0 	call	7cbc <_Balloc>
    8680:	92400417 	ldw	r9,16(r18)
    8684:	9b000417 	ldw	r12,16(r19)
    8688:	12c00504 	addi	r11,r2,20
    868c:	4a51883a 	add	r8,r9,r9
    8690:	6319883a 	add	r12,r12,r12
    8694:	4211883a 	add	r8,r8,r8
    8698:	6319883a 	add	r12,r12,r12
    869c:	15000315 	stw	r20,12(r2)
    86a0:	8211883a 	add	r8,r16,r8
    86a4:	8b19883a 	add	r12,r17,r12
    86a8:	0007883a 	mov	r3,zero
    86ac:	81400017 	ldw	r5,0(r16)
    86b0:	89c00017 	ldw	r7,0(r17)
    86b4:	59800104 	addi	r6,r11,4
    86b8:	293fffcc 	andi	r4,r5,65535
    86bc:	20c7883a 	add	r3,r4,r3
    86c0:	393fffcc 	andi	r4,r7,65535
    86c4:	1909c83a 	sub	r4,r3,r4
    86c8:	280ad43a 	srli	r5,r5,16
    86cc:	380ed43a 	srli	r7,r7,16
    86d0:	2007d43a 	srai	r3,r4,16
    86d4:	213fffcc 	andi	r4,r4,65535
    86d8:	29cbc83a 	sub	r5,r5,r7
    86dc:	28c7883a 	add	r3,r5,r3
    86e0:	180a943a 	slli	r5,r3,16
    86e4:	8c400104 	addi	r17,r17,4
    86e8:	84000104 	addi	r16,r16,4
    86ec:	2908b03a 	or	r4,r5,r4
    86f0:	59000015 	stw	r4,0(r11)
    86f4:	1807d43a 	srai	r3,r3,16
    86f8:	3015883a 	mov	r10,r6
    86fc:	3017883a 	mov	r11,r6
    8700:	8b3fea36 	bltu	r17,r12,86ac <__alt_data_end+0xff0086ac>
    8704:	8200162e 	bgeu	r16,r8,8760 <__mdiff+0x17c>
    8708:	8017883a 	mov	r11,r16
    870c:	59400017 	ldw	r5,0(r11)
    8710:	31800104 	addi	r6,r6,4
    8714:	5ac00104 	addi	r11,r11,4
    8718:	293fffcc 	andi	r4,r5,65535
    871c:	20c7883a 	add	r3,r4,r3
    8720:	280ed43a 	srli	r7,r5,16
    8724:	180bd43a 	srai	r5,r3,16
    8728:	193fffcc 	andi	r4,r3,65535
    872c:	3947883a 	add	r3,r7,r5
    8730:	180a943a 	slli	r5,r3,16
    8734:	1807d43a 	srai	r3,r3,16
    8738:	2908b03a 	or	r4,r5,r4
    873c:	313fff15 	stw	r4,-4(r6)
    8740:	5a3ff236 	bltu	r11,r8,870c <__alt_data_end+0xff00870c>
    8744:	0406303a 	nor	r3,zero,r16
    8748:	1a07883a 	add	r3,r3,r8
    874c:	1806d0ba 	srli	r3,r3,2
    8750:	18c00044 	addi	r3,r3,1
    8754:	18c7883a 	add	r3,r3,r3
    8758:	18c7883a 	add	r3,r3,r3
    875c:	50d5883a 	add	r10,r10,r3
    8760:	50ffff04 	addi	r3,r10,-4
    8764:	2000041e 	bne	r4,zero,8778 <__mdiff+0x194>
    8768:	18ffff04 	addi	r3,r3,-4
    876c:	19000017 	ldw	r4,0(r3)
    8770:	4a7fffc4 	addi	r9,r9,-1
    8774:	203ffc26 	beq	r4,zero,8768 <__alt_data_end+0xff008768>
    8778:	12400415 	stw	r9,16(r2)
    877c:	dfc00517 	ldw	ra,20(sp)
    8780:	dd000417 	ldw	r20,16(sp)
    8784:	dcc00317 	ldw	r19,12(sp)
    8788:	dc800217 	ldw	r18,8(sp)
    878c:	dc400117 	ldw	r17,4(sp)
    8790:	dc000017 	ldw	r16,0(sp)
    8794:	dec00604 	addi	sp,sp,24
    8798:	f800283a 	ret
    879c:	000b883a 	mov	r5,zero
    87a0:	0007cbc0 	call	7cbc <_Balloc>
    87a4:	00c00044 	movi	r3,1
    87a8:	10c00415 	stw	r3,16(r2)
    87ac:	10000515 	stw	zero,20(r2)
    87b0:	003ff206 	br	877c <__alt_data_end+0xff00877c>
    87b4:	8023883a 	mov	r17,r16
    87b8:	0029883a 	mov	r20,zero
    87bc:	4021883a 	mov	r16,r8
    87c0:	003fad06 	br	8678 <__alt_data_end+0xff008678>
    87c4:	9005883a 	mov	r2,r18
    87c8:	94400504 	addi	r17,r18,20
    87cc:	9c000504 	addi	r16,r19,20
    87d0:	9825883a 	mov	r18,r19
    87d4:	05000044 	movi	r20,1
    87d8:	1027883a 	mov	r19,r2
    87dc:	003fa606 	br	8678 <__alt_data_end+0xff008678>

000087e0 <__ulp>:
    87e0:	295ffc2c 	andhi	r5,r5,32752
    87e4:	00bf3034 	movhi	r2,64704
    87e8:	2887883a 	add	r3,r5,r2
    87ec:	00c0020e 	bge	zero,r3,87f8 <__ulp+0x18>
    87f0:	0005883a 	mov	r2,zero
    87f4:	f800283a 	ret
    87f8:	00c7c83a 	sub	r3,zero,r3
    87fc:	1807d53a 	srai	r3,r3,20
    8800:	008004c4 	movi	r2,19
    8804:	10c00b0e 	bge	r2,r3,8834 <__ulp+0x54>
    8808:	18bffb04 	addi	r2,r3,-20
    880c:	01000784 	movi	r4,30
    8810:	0007883a 	mov	r3,zero
    8814:	20800516 	blt	r4,r2,882c <__ulp+0x4c>
    8818:	010007c4 	movi	r4,31
    881c:	2089c83a 	sub	r4,r4,r2
    8820:	00800044 	movi	r2,1
    8824:	1104983a 	sll	r2,r2,r4
    8828:	f800283a 	ret
    882c:	00800044 	movi	r2,1
    8830:	f800283a 	ret
    8834:	01400234 	movhi	r5,8
    8838:	28c7d83a 	sra	r3,r5,r3
    883c:	0005883a 	mov	r2,zero
    8840:	f800283a 	ret

00008844 <__b2d>:
    8844:	defffa04 	addi	sp,sp,-24
    8848:	dc000015 	stw	r16,0(sp)
    884c:	24000417 	ldw	r16,16(r4)
    8850:	dc400115 	stw	r17,4(sp)
    8854:	24400504 	addi	r17,r4,20
    8858:	8421883a 	add	r16,r16,r16
    885c:	8421883a 	add	r16,r16,r16
    8860:	8c21883a 	add	r16,r17,r16
    8864:	dc800215 	stw	r18,8(sp)
    8868:	84bfff17 	ldw	r18,-4(r16)
    886c:	dd000415 	stw	r20,16(sp)
    8870:	dcc00315 	stw	r19,12(sp)
    8874:	9009883a 	mov	r4,r18
    8878:	2829883a 	mov	r20,r5
    887c:	dfc00515 	stw	ra,20(sp)
    8880:	0007fb00 	call	7fb0 <__hi0bits>
    8884:	00c00804 	movi	r3,32
    8888:	1889c83a 	sub	r4,r3,r2
    888c:	a1000015 	stw	r4,0(r20)
    8890:	01000284 	movi	r4,10
    8894:	84ffff04 	addi	r19,r16,-4
    8898:	20801216 	blt	r4,r2,88e4 <__b2d+0xa0>
    889c:	018002c4 	movi	r6,11
    88a0:	308dc83a 	sub	r6,r6,r2
    88a4:	9186d83a 	srl	r3,r18,r6
    88a8:	18cffc34 	orhi	r3,r3,16368
    88ac:	8cc0212e 	bgeu	r17,r19,8934 <__b2d+0xf0>
    88b0:	813ffe17 	ldw	r4,-8(r16)
    88b4:	218cd83a 	srl	r6,r4,r6
    88b8:	10800544 	addi	r2,r2,21
    88bc:	9084983a 	sll	r2,r18,r2
    88c0:	1184b03a 	or	r2,r2,r6
    88c4:	dfc00517 	ldw	ra,20(sp)
    88c8:	dd000417 	ldw	r20,16(sp)
    88cc:	dcc00317 	ldw	r19,12(sp)
    88d0:	dc800217 	ldw	r18,8(sp)
    88d4:	dc400117 	ldw	r17,4(sp)
    88d8:	dc000017 	ldw	r16,0(sp)
    88dc:	dec00604 	addi	sp,sp,24
    88e0:	f800283a 	ret
    88e4:	8cc00f2e 	bgeu	r17,r19,8924 <__b2d+0xe0>
    88e8:	117ffd44 	addi	r5,r2,-11
    88ec:	80bffe17 	ldw	r2,-8(r16)
    88f0:	28000e26 	beq	r5,zero,892c <__b2d+0xe8>
    88f4:	1949c83a 	sub	r4,r3,r5
    88f8:	9164983a 	sll	r18,r18,r5
    88fc:	1106d83a 	srl	r3,r2,r4
    8900:	81bffe04 	addi	r6,r16,-8
    8904:	948ffc34 	orhi	r18,r18,16368
    8908:	90c6b03a 	or	r3,r18,r3
    890c:	89800e2e 	bgeu	r17,r6,8948 <__b2d+0x104>
    8910:	81bffd17 	ldw	r6,-12(r16)
    8914:	1144983a 	sll	r2,r2,r5
    8918:	310ad83a 	srl	r5,r6,r4
    891c:	2884b03a 	or	r2,r5,r2
    8920:	003fe806 	br	88c4 <__alt_data_end+0xff0088c4>
    8924:	10bffd44 	addi	r2,r2,-11
    8928:	1000041e 	bne	r2,zero,893c <__b2d+0xf8>
    892c:	90cffc34 	orhi	r3,r18,16368
    8930:	003fe406 	br	88c4 <__alt_data_end+0xff0088c4>
    8934:	000d883a 	mov	r6,zero
    8938:	003fdf06 	br	88b8 <__alt_data_end+0xff0088b8>
    893c:	90a4983a 	sll	r18,r18,r2
    8940:	0005883a 	mov	r2,zero
    8944:	003ff906 	br	892c <__alt_data_end+0xff00892c>
    8948:	1144983a 	sll	r2,r2,r5
    894c:	003fdd06 	br	88c4 <__alt_data_end+0xff0088c4>

00008950 <__d2b>:
    8950:	defff804 	addi	sp,sp,-32
    8954:	dc000215 	stw	r16,8(sp)
    8958:	3021883a 	mov	r16,r6
    895c:	dc400315 	stw	r17,12(sp)
    8960:	8022907a 	slli	r17,r16,1
    8964:	dd000615 	stw	r20,24(sp)
    8968:	2829883a 	mov	r20,r5
    896c:	01400044 	movi	r5,1
    8970:	dcc00515 	stw	r19,20(sp)
    8974:	dc800415 	stw	r18,16(sp)
    8978:	dfc00715 	stw	ra,28(sp)
    897c:	3825883a 	mov	r18,r7
    8980:	8822d57a 	srli	r17,r17,21
    8984:	0007cbc0 	call	7cbc <_Balloc>
    8988:	1027883a 	mov	r19,r2
    898c:	00800434 	movhi	r2,16
    8990:	10bfffc4 	addi	r2,r2,-1
    8994:	808c703a 	and	r6,r16,r2
    8998:	88000126 	beq	r17,zero,89a0 <__d2b+0x50>
    899c:	31800434 	orhi	r6,r6,16
    89a0:	d9800015 	stw	r6,0(sp)
    89a4:	a0002426 	beq	r20,zero,8a38 <__d2b+0xe8>
    89a8:	d9000104 	addi	r4,sp,4
    89ac:	dd000115 	stw	r20,4(sp)
    89b0:	00080180 	call	8018 <__lo0bits>
    89b4:	d8c00017 	ldw	r3,0(sp)
    89b8:	10002f1e 	bne	r2,zero,8a78 <__d2b+0x128>
    89bc:	d9000117 	ldw	r4,4(sp)
    89c0:	99000515 	stw	r4,20(r19)
    89c4:	1821003a 	cmpeq	r16,r3,zero
    89c8:	01000084 	movi	r4,2
    89cc:	2421c83a 	sub	r16,r4,r16
    89d0:	98c00615 	stw	r3,24(r19)
    89d4:	9c000415 	stw	r16,16(r19)
    89d8:	88001f1e 	bne	r17,zero,8a58 <__d2b+0x108>
    89dc:	10bef384 	addi	r2,r2,-1074
    89e0:	90800015 	stw	r2,0(r18)
    89e4:	00900034 	movhi	r2,16384
    89e8:	10bfffc4 	addi	r2,r2,-1
    89ec:	8085883a 	add	r2,r16,r2
    89f0:	1085883a 	add	r2,r2,r2
    89f4:	1085883a 	add	r2,r2,r2
    89f8:	9885883a 	add	r2,r19,r2
    89fc:	11000517 	ldw	r4,20(r2)
    8a00:	8020917a 	slli	r16,r16,5
    8a04:	0007fb00 	call	7fb0 <__hi0bits>
    8a08:	d8c00817 	ldw	r3,32(sp)
    8a0c:	8085c83a 	sub	r2,r16,r2
    8a10:	18800015 	stw	r2,0(r3)
    8a14:	9805883a 	mov	r2,r19
    8a18:	dfc00717 	ldw	ra,28(sp)
    8a1c:	dd000617 	ldw	r20,24(sp)
    8a20:	dcc00517 	ldw	r19,20(sp)
    8a24:	dc800417 	ldw	r18,16(sp)
    8a28:	dc400317 	ldw	r17,12(sp)
    8a2c:	dc000217 	ldw	r16,8(sp)
    8a30:	dec00804 	addi	sp,sp,32
    8a34:	f800283a 	ret
    8a38:	d809883a 	mov	r4,sp
    8a3c:	00080180 	call	8018 <__lo0bits>
    8a40:	d8c00017 	ldw	r3,0(sp)
    8a44:	04000044 	movi	r16,1
    8a48:	9c000415 	stw	r16,16(r19)
    8a4c:	98c00515 	stw	r3,20(r19)
    8a50:	10800804 	addi	r2,r2,32
    8a54:	883fe126 	beq	r17,zero,89dc <__alt_data_end+0xff0089dc>
    8a58:	00c00d44 	movi	r3,53
    8a5c:	8c7ef344 	addi	r17,r17,-1075
    8a60:	88a3883a 	add	r17,r17,r2
    8a64:	1885c83a 	sub	r2,r3,r2
    8a68:	d8c00817 	ldw	r3,32(sp)
    8a6c:	94400015 	stw	r17,0(r18)
    8a70:	18800015 	stw	r2,0(r3)
    8a74:	003fe706 	br	8a14 <__alt_data_end+0xff008a14>
    8a78:	01000804 	movi	r4,32
    8a7c:	2089c83a 	sub	r4,r4,r2
    8a80:	1908983a 	sll	r4,r3,r4
    8a84:	d9400117 	ldw	r5,4(sp)
    8a88:	1886d83a 	srl	r3,r3,r2
    8a8c:	2148b03a 	or	r4,r4,r5
    8a90:	99000515 	stw	r4,20(r19)
    8a94:	d8c00015 	stw	r3,0(sp)
    8a98:	003fca06 	br	89c4 <__alt_data_end+0xff0089c4>

00008a9c <__ratio>:
    8a9c:	defff904 	addi	sp,sp,-28
    8aa0:	dc400315 	stw	r17,12(sp)
    8aa4:	2823883a 	mov	r17,r5
    8aa8:	d9400104 	addi	r5,sp,4
    8aac:	dfc00615 	stw	ra,24(sp)
    8ab0:	dcc00515 	stw	r19,20(sp)
    8ab4:	dc800415 	stw	r18,16(sp)
    8ab8:	2027883a 	mov	r19,r4
    8abc:	dc000215 	stw	r16,8(sp)
    8ac0:	00088440 	call	8844 <__b2d>
    8ac4:	d80b883a 	mov	r5,sp
    8ac8:	8809883a 	mov	r4,r17
    8acc:	1025883a 	mov	r18,r2
    8ad0:	1821883a 	mov	r16,r3
    8ad4:	00088440 	call	8844 <__b2d>
    8ad8:	8a000417 	ldw	r8,16(r17)
    8adc:	99000417 	ldw	r4,16(r19)
    8ae0:	d9400117 	ldw	r5,4(sp)
    8ae4:	2209c83a 	sub	r4,r4,r8
    8ae8:	2010917a 	slli	r8,r4,5
    8aec:	d9000017 	ldw	r4,0(sp)
    8af0:	2909c83a 	sub	r4,r5,r4
    8af4:	4109883a 	add	r4,r8,r4
    8af8:	01000e0e 	bge	zero,r4,8b34 <__ratio+0x98>
    8afc:	2008953a 	slli	r4,r4,20
    8b00:	2421883a 	add	r16,r4,r16
    8b04:	100d883a 	mov	r6,r2
    8b08:	180f883a 	mov	r7,r3
    8b0c:	9009883a 	mov	r4,r18
    8b10:	800b883a 	mov	r5,r16
    8b14:	000c7800 	call	c780 <__divdf3>
    8b18:	dfc00617 	ldw	ra,24(sp)
    8b1c:	dcc00517 	ldw	r19,20(sp)
    8b20:	dc800417 	ldw	r18,16(sp)
    8b24:	dc400317 	ldw	r17,12(sp)
    8b28:	dc000217 	ldw	r16,8(sp)
    8b2c:	dec00704 	addi	sp,sp,28
    8b30:	f800283a 	ret
    8b34:	2008953a 	slli	r4,r4,20
    8b38:	1907c83a 	sub	r3,r3,r4
    8b3c:	003ff106 	br	8b04 <__alt_data_end+0xff008b04>

00008b40 <_mprec_log10>:
    8b40:	defffe04 	addi	sp,sp,-8
    8b44:	dc000015 	stw	r16,0(sp)
    8b48:	dfc00115 	stw	ra,4(sp)
    8b4c:	008005c4 	movi	r2,23
    8b50:	2021883a 	mov	r16,r4
    8b54:	11000d0e 	bge	r2,r4,8b8c <_mprec_log10+0x4c>
    8b58:	0005883a 	mov	r2,zero
    8b5c:	00cffc34 	movhi	r3,16368
    8b60:	843fffc4 	addi	r16,r16,-1
    8b64:	000d883a 	mov	r6,zero
    8b68:	01d00934 	movhi	r7,16420
    8b6c:	1009883a 	mov	r4,r2
    8b70:	180b883a 	mov	r5,r3
    8b74:	000d2c00 	call	d2c0 <__muldf3>
    8b78:	803ff91e 	bne	r16,zero,8b60 <__alt_data_end+0xff008b60>
    8b7c:	dfc00117 	ldw	ra,4(sp)
    8b80:	dc000017 	ldw	r16,0(sp)
    8b84:	dec00204 	addi	sp,sp,8
    8b88:	f800283a 	ret
    8b8c:	202090fa 	slli	r16,r4,3
    8b90:	00800074 	movhi	r2,1
    8b94:	10854204 	addi	r2,r2,5384
    8b98:	1421883a 	add	r16,r2,r16
    8b9c:	80800017 	ldw	r2,0(r16)
    8ba0:	80c00117 	ldw	r3,4(r16)
    8ba4:	dfc00117 	ldw	ra,4(sp)
    8ba8:	dc000017 	ldw	r16,0(sp)
    8bac:	dec00204 	addi	sp,sp,8
    8bb0:	f800283a 	ret

00008bb4 <__copybits>:
    8bb4:	297fffc4 	addi	r5,r5,-1
    8bb8:	280fd17a 	srai	r7,r5,5
    8bbc:	30c00417 	ldw	r3,16(r6)
    8bc0:	30800504 	addi	r2,r6,20
    8bc4:	39c00044 	addi	r7,r7,1
    8bc8:	18c7883a 	add	r3,r3,r3
    8bcc:	39cf883a 	add	r7,r7,r7
    8bd0:	18c7883a 	add	r3,r3,r3
    8bd4:	39cf883a 	add	r7,r7,r7
    8bd8:	10c7883a 	add	r3,r2,r3
    8bdc:	21cf883a 	add	r7,r4,r7
    8be0:	10c00d2e 	bgeu	r2,r3,8c18 <__copybits+0x64>
    8be4:	200b883a 	mov	r5,r4
    8be8:	12000017 	ldw	r8,0(r2)
    8bec:	29400104 	addi	r5,r5,4
    8bf0:	10800104 	addi	r2,r2,4
    8bf4:	2a3fff15 	stw	r8,-4(r5)
    8bf8:	10fffb36 	bltu	r2,r3,8be8 <__alt_data_end+0xff008be8>
    8bfc:	1985c83a 	sub	r2,r3,r6
    8c00:	10bffac4 	addi	r2,r2,-21
    8c04:	1004d0ba 	srli	r2,r2,2
    8c08:	10800044 	addi	r2,r2,1
    8c0c:	1085883a 	add	r2,r2,r2
    8c10:	1085883a 	add	r2,r2,r2
    8c14:	2089883a 	add	r4,r4,r2
    8c18:	21c0032e 	bgeu	r4,r7,8c28 <__copybits+0x74>
    8c1c:	20000015 	stw	zero,0(r4)
    8c20:	21000104 	addi	r4,r4,4
    8c24:	21fffd36 	bltu	r4,r7,8c1c <__alt_data_end+0xff008c1c>
    8c28:	f800283a 	ret

00008c2c <__any_on>:
    8c2c:	20c00417 	ldw	r3,16(r4)
    8c30:	2805d17a 	srai	r2,r5,5
    8c34:	21000504 	addi	r4,r4,20
    8c38:	18800d0e 	bge	r3,r2,8c70 <__any_on+0x44>
    8c3c:	18c7883a 	add	r3,r3,r3
    8c40:	18c7883a 	add	r3,r3,r3
    8c44:	20c7883a 	add	r3,r4,r3
    8c48:	20c0192e 	bgeu	r4,r3,8cb0 <__any_on+0x84>
    8c4c:	18bfff17 	ldw	r2,-4(r3)
    8c50:	18ffff04 	addi	r3,r3,-4
    8c54:	1000041e 	bne	r2,zero,8c68 <__any_on+0x3c>
    8c58:	20c0142e 	bgeu	r4,r3,8cac <__any_on+0x80>
    8c5c:	18ffff04 	addi	r3,r3,-4
    8c60:	19400017 	ldw	r5,0(r3)
    8c64:	283ffc26 	beq	r5,zero,8c58 <__alt_data_end+0xff008c58>
    8c68:	00800044 	movi	r2,1
    8c6c:	f800283a 	ret
    8c70:	10c00a0e 	bge	r2,r3,8c9c <__any_on+0x70>
    8c74:	1085883a 	add	r2,r2,r2
    8c78:	1085883a 	add	r2,r2,r2
    8c7c:	294007cc 	andi	r5,r5,31
    8c80:	2087883a 	add	r3,r4,r2
    8c84:	283ff026 	beq	r5,zero,8c48 <__alt_data_end+0xff008c48>
    8c88:	19800017 	ldw	r6,0(r3)
    8c8c:	3144d83a 	srl	r2,r6,r5
    8c90:	114a983a 	sll	r5,r2,r5
    8c94:	317ff41e 	bne	r6,r5,8c68 <__alt_data_end+0xff008c68>
    8c98:	003feb06 	br	8c48 <__alt_data_end+0xff008c48>
    8c9c:	1085883a 	add	r2,r2,r2
    8ca0:	1085883a 	add	r2,r2,r2
    8ca4:	2087883a 	add	r3,r4,r2
    8ca8:	003fe706 	br	8c48 <__alt_data_end+0xff008c48>
    8cac:	f800283a 	ret
    8cb0:	0005883a 	mov	r2,zero
    8cb4:	f800283a 	ret

00008cb8 <_realloc_r>:
    8cb8:	defff604 	addi	sp,sp,-40
    8cbc:	dc800215 	stw	r18,8(sp)
    8cc0:	dfc00915 	stw	ra,36(sp)
    8cc4:	df000815 	stw	fp,32(sp)
    8cc8:	ddc00715 	stw	r23,28(sp)
    8ccc:	dd800615 	stw	r22,24(sp)
    8cd0:	dd400515 	stw	r21,20(sp)
    8cd4:	dd000415 	stw	r20,16(sp)
    8cd8:	dcc00315 	stw	r19,12(sp)
    8cdc:	dc400115 	stw	r17,4(sp)
    8ce0:	dc000015 	stw	r16,0(sp)
    8ce4:	3025883a 	mov	r18,r6
    8ce8:	2800b726 	beq	r5,zero,8fc8 <_realloc_r+0x310>
    8cec:	282b883a 	mov	r21,r5
    8cf0:	2029883a 	mov	r20,r4
    8cf4:	000eab80 	call	eab8 <__malloc_lock>
    8cf8:	a8bfff17 	ldw	r2,-4(r21)
    8cfc:	043fff04 	movi	r16,-4
    8d00:	90c002c4 	addi	r3,r18,11
    8d04:	01000584 	movi	r4,22
    8d08:	acfffe04 	addi	r19,r21,-8
    8d0c:	1420703a 	and	r16,r2,r16
    8d10:	20c0332e 	bgeu	r4,r3,8de0 <_realloc_r+0x128>
    8d14:	047ffe04 	movi	r17,-8
    8d18:	1c62703a 	and	r17,r3,r17
    8d1c:	8807883a 	mov	r3,r17
    8d20:	88005816 	blt	r17,zero,8e84 <_realloc_r+0x1cc>
    8d24:	8c805736 	bltu	r17,r18,8e84 <_realloc_r+0x1cc>
    8d28:	80c0300e 	bge	r16,r3,8dec <_realloc_r+0x134>
    8d2c:	07000074 	movhi	fp,1
    8d30:	e705c704 	addi	fp,fp,5916
    8d34:	e1c00217 	ldw	r7,8(fp)
    8d38:	9c09883a 	add	r4,r19,r16
    8d3c:	22000117 	ldw	r8,4(r4)
    8d40:	21c06326 	beq	r4,r7,8ed0 <_realloc_r+0x218>
    8d44:	017fff84 	movi	r5,-2
    8d48:	414a703a 	and	r5,r8,r5
    8d4c:	214b883a 	add	r5,r4,r5
    8d50:	29800117 	ldw	r6,4(r5)
    8d54:	3180004c 	andi	r6,r6,1
    8d58:	30003f26 	beq	r6,zero,8e58 <_realloc_r+0x1a0>
    8d5c:	1080004c 	andi	r2,r2,1
    8d60:	10008326 	beq	r2,zero,8f70 <_realloc_r+0x2b8>
    8d64:	900b883a 	mov	r5,r18
    8d68:	a009883a 	mov	r4,r20
    8d6c:	0001dd00 	call	1dd0 <_malloc_r>
    8d70:	1025883a 	mov	r18,r2
    8d74:	10011e26 	beq	r2,zero,91f0 <_realloc_r+0x538>
    8d78:	a93fff17 	ldw	r4,-4(r21)
    8d7c:	10fffe04 	addi	r3,r2,-8
    8d80:	00bfff84 	movi	r2,-2
    8d84:	2084703a 	and	r2,r4,r2
    8d88:	9885883a 	add	r2,r19,r2
    8d8c:	1880ee26 	beq	r3,r2,9148 <_realloc_r+0x490>
    8d90:	81bfff04 	addi	r6,r16,-4
    8d94:	00800904 	movi	r2,36
    8d98:	1180b836 	bltu	r2,r6,907c <_realloc_r+0x3c4>
    8d9c:	00c004c4 	movi	r3,19
    8da0:	19809636 	bltu	r3,r6,8ffc <_realloc_r+0x344>
    8da4:	9005883a 	mov	r2,r18
    8da8:	a807883a 	mov	r3,r21
    8dac:	19000017 	ldw	r4,0(r3)
    8db0:	11000015 	stw	r4,0(r2)
    8db4:	19000117 	ldw	r4,4(r3)
    8db8:	11000115 	stw	r4,4(r2)
    8dbc:	18c00217 	ldw	r3,8(r3)
    8dc0:	10c00215 	stw	r3,8(r2)
    8dc4:	a80b883a 	mov	r5,r21
    8dc8:	a009883a 	mov	r4,r20
    8dcc:	0006c200 	call	6c20 <_free_r>
    8dd0:	a009883a 	mov	r4,r20
    8dd4:	000eadc0 	call	eadc <__malloc_unlock>
    8dd8:	9005883a 	mov	r2,r18
    8ddc:	00001206 	br	8e28 <_realloc_r+0x170>
    8de0:	00c00404 	movi	r3,16
    8de4:	1823883a 	mov	r17,r3
    8de8:	003fce06 	br	8d24 <__alt_data_end+0xff008d24>
    8dec:	a825883a 	mov	r18,r21
    8df0:	8445c83a 	sub	r2,r16,r17
    8df4:	00c003c4 	movi	r3,15
    8df8:	18802636 	bltu	r3,r2,8e94 <_realloc_r+0x1dc>
    8dfc:	99800117 	ldw	r6,4(r19)
    8e00:	9c07883a 	add	r3,r19,r16
    8e04:	3180004c 	andi	r6,r6,1
    8e08:	3420b03a 	or	r16,r6,r16
    8e0c:	9c000115 	stw	r16,4(r19)
    8e10:	18800117 	ldw	r2,4(r3)
    8e14:	10800054 	ori	r2,r2,1
    8e18:	18800115 	stw	r2,4(r3)
    8e1c:	a009883a 	mov	r4,r20
    8e20:	000eadc0 	call	eadc <__malloc_unlock>
    8e24:	9005883a 	mov	r2,r18
    8e28:	dfc00917 	ldw	ra,36(sp)
    8e2c:	df000817 	ldw	fp,32(sp)
    8e30:	ddc00717 	ldw	r23,28(sp)
    8e34:	dd800617 	ldw	r22,24(sp)
    8e38:	dd400517 	ldw	r21,20(sp)
    8e3c:	dd000417 	ldw	r20,16(sp)
    8e40:	dcc00317 	ldw	r19,12(sp)
    8e44:	dc800217 	ldw	r18,8(sp)
    8e48:	dc400117 	ldw	r17,4(sp)
    8e4c:	dc000017 	ldw	r16,0(sp)
    8e50:	dec00a04 	addi	sp,sp,40
    8e54:	f800283a 	ret
    8e58:	017fff04 	movi	r5,-4
    8e5c:	414a703a 	and	r5,r8,r5
    8e60:	814d883a 	add	r6,r16,r5
    8e64:	30c01f16 	blt	r6,r3,8ee4 <_realloc_r+0x22c>
    8e68:	20800317 	ldw	r2,12(r4)
    8e6c:	20c00217 	ldw	r3,8(r4)
    8e70:	a825883a 	mov	r18,r21
    8e74:	3021883a 	mov	r16,r6
    8e78:	18800315 	stw	r2,12(r3)
    8e7c:	10c00215 	stw	r3,8(r2)
    8e80:	003fdb06 	br	8df0 <__alt_data_end+0xff008df0>
    8e84:	00800304 	movi	r2,12
    8e88:	a0800015 	stw	r2,0(r20)
    8e8c:	0005883a 	mov	r2,zero
    8e90:	003fe506 	br	8e28 <__alt_data_end+0xff008e28>
    8e94:	98c00117 	ldw	r3,4(r19)
    8e98:	9c4b883a 	add	r5,r19,r17
    8e9c:	11000054 	ori	r4,r2,1
    8ea0:	18c0004c 	andi	r3,r3,1
    8ea4:	1c62b03a 	or	r17,r3,r17
    8ea8:	9c400115 	stw	r17,4(r19)
    8eac:	29000115 	stw	r4,4(r5)
    8eb0:	2885883a 	add	r2,r5,r2
    8eb4:	10c00117 	ldw	r3,4(r2)
    8eb8:	29400204 	addi	r5,r5,8
    8ebc:	a009883a 	mov	r4,r20
    8ec0:	18c00054 	ori	r3,r3,1
    8ec4:	10c00115 	stw	r3,4(r2)
    8ec8:	0006c200 	call	6c20 <_free_r>
    8ecc:	003fd306 	br	8e1c <__alt_data_end+0xff008e1c>
    8ed0:	017fff04 	movi	r5,-4
    8ed4:	414a703a 	and	r5,r8,r5
    8ed8:	89800404 	addi	r6,r17,16
    8edc:	8151883a 	add	r8,r16,r5
    8ee0:	4180590e 	bge	r8,r6,9048 <_realloc_r+0x390>
    8ee4:	1080004c 	andi	r2,r2,1
    8ee8:	103f9e1e 	bne	r2,zero,8d64 <__alt_data_end+0xff008d64>
    8eec:	adbffe17 	ldw	r22,-8(r21)
    8ef0:	00bfff04 	movi	r2,-4
    8ef4:	9dadc83a 	sub	r22,r19,r22
    8ef8:	b1800117 	ldw	r6,4(r22)
    8efc:	3084703a 	and	r2,r6,r2
    8f00:	20002026 	beq	r4,zero,8f84 <_realloc_r+0x2cc>
    8f04:	80af883a 	add	r23,r16,r2
    8f08:	b96f883a 	add	r23,r23,r5
    8f0c:	21c05f26 	beq	r4,r7,908c <_realloc_r+0x3d4>
    8f10:	b8c01c16 	blt	r23,r3,8f84 <_realloc_r+0x2cc>
    8f14:	20800317 	ldw	r2,12(r4)
    8f18:	20c00217 	ldw	r3,8(r4)
    8f1c:	81bfff04 	addi	r6,r16,-4
    8f20:	01000904 	movi	r4,36
    8f24:	18800315 	stw	r2,12(r3)
    8f28:	10c00215 	stw	r3,8(r2)
    8f2c:	b0c00217 	ldw	r3,8(r22)
    8f30:	b0800317 	ldw	r2,12(r22)
    8f34:	b4800204 	addi	r18,r22,8
    8f38:	18800315 	stw	r2,12(r3)
    8f3c:	10c00215 	stw	r3,8(r2)
    8f40:	21801b36 	bltu	r4,r6,8fb0 <_realloc_r+0x2f8>
    8f44:	008004c4 	movi	r2,19
    8f48:	1180352e 	bgeu	r2,r6,9020 <_realloc_r+0x368>
    8f4c:	a8800017 	ldw	r2,0(r21)
    8f50:	b0800215 	stw	r2,8(r22)
    8f54:	a8800117 	ldw	r2,4(r21)
    8f58:	b0800315 	stw	r2,12(r22)
    8f5c:	008006c4 	movi	r2,27
    8f60:	11807f36 	bltu	r2,r6,9160 <_realloc_r+0x4a8>
    8f64:	b0800404 	addi	r2,r22,16
    8f68:	ad400204 	addi	r21,r21,8
    8f6c:	00002d06 	br	9024 <_realloc_r+0x36c>
    8f70:	adbffe17 	ldw	r22,-8(r21)
    8f74:	00bfff04 	movi	r2,-4
    8f78:	9dadc83a 	sub	r22,r19,r22
    8f7c:	b1000117 	ldw	r4,4(r22)
    8f80:	2084703a 	and	r2,r4,r2
    8f84:	b03f7726 	beq	r22,zero,8d64 <__alt_data_end+0xff008d64>
    8f88:	80af883a 	add	r23,r16,r2
    8f8c:	b8ff7516 	blt	r23,r3,8d64 <__alt_data_end+0xff008d64>
    8f90:	b0800317 	ldw	r2,12(r22)
    8f94:	b0c00217 	ldw	r3,8(r22)
    8f98:	81bfff04 	addi	r6,r16,-4
    8f9c:	01000904 	movi	r4,36
    8fa0:	18800315 	stw	r2,12(r3)
    8fa4:	10c00215 	stw	r3,8(r2)
    8fa8:	b4800204 	addi	r18,r22,8
    8fac:	21bfe52e 	bgeu	r4,r6,8f44 <__alt_data_end+0xff008f44>
    8fb0:	a80b883a 	mov	r5,r21
    8fb4:	9009883a 	mov	r4,r18
    8fb8:	0007a380 	call	7a38 <memmove>
    8fbc:	b821883a 	mov	r16,r23
    8fc0:	b027883a 	mov	r19,r22
    8fc4:	003f8a06 	br	8df0 <__alt_data_end+0xff008df0>
    8fc8:	300b883a 	mov	r5,r6
    8fcc:	dfc00917 	ldw	ra,36(sp)
    8fd0:	df000817 	ldw	fp,32(sp)
    8fd4:	ddc00717 	ldw	r23,28(sp)
    8fd8:	dd800617 	ldw	r22,24(sp)
    8fdc:	dd400517 	ldw	r21,20(sp)
    8fe0:	dd000417 	ldw	r20,16(sp)
    8fe4:	dcc00317 	ldw	r19,12(sp)
    8fe8:	dc800217 	ldw	r18,8(sp)
    8fec:	dc400117 	ldw	r17,4(sp)
    8ff0:	dc000017 	ldw	r16,0(sp)
    8ff4:	dec00a04 	addi	sp,sp,40
    8ff8:	0001dd01 	jmpi	1dd0 <_malloc_r>
    8ffc:	a8c00017 	ldw	r3,0(r21)
    9000:	90c00015 	stw	r3,0(r18)
    9004:	a8c00117 	ldw	r3,4(r21)
    9008:	90c00115 	stw	r3,4(r18)
    900c:	00c006c4 	movi	r3,27
    9010:	19804536 	bltu	r3,r6,9128 <_realloc_r+0x470>
    9014:	90800204 	addi	r2,r18,8
    9018:	a8c00204 	addi	r3,r21,8
    901c:	003f6306 	br	8dac <__alt_data_end+0xff008dac>
    9020:	9005883a 	mov	r2,r18
    9024:	a8c00017 	ldw	r3,0(r21)
    9028:	b821883a 	mov	r16,r23
    902c:	b027883a 	mov	r19,r22
    9030:	10c00015 	stw	r3,0(r2)
    9034:	a8c00117 	ldw	r3,4(r21)
    9038:	10c00115 	stw	r3,4(r2)
    903c:	a8c00217 	ldw	r3,8(r21)
    9040:	10c00215 	stw	r3,8(r2)
    9044:	003f6a06 	br	8df0 <__alt_data_end+0xff008df0>
    9048:	9c67883a 	add	r19,r19,r17
    904c:	4445c83a 	sub	r2,r8,r17
    9050:	e4c00215 	stw	r19,8(fp)
    9054:	10800054 	ori	r2,r2,1
    9058:	98800115 	stw	r2,4(r19)
    905c:	a8bfff17 	ldw	r2,-4(r21)
    9060:	a009883a 	mov	r4,r20
    9064:	1080004c 	andi	r2,r2,1
    9068:	1462b03a 	or	r17,r2,r17
    906c:	ac7fff15 	stw	r17,-4(r21)
    9070:	000eadc0 	call	eadc <__malloc_unlock>
    9074:	a805883a 	mov	r2,r21
    9078:	003f6b06 	br	8e28 <__alt_data_end+0xff008e28>
    907c:	a80b883a 	mov	r5,r21
    9080:	9009883a 	mov	r4,r18
    9084:	0007a380 	call	7a38 <memmove>
    9088:	003f4e06 	br	8dc4 <__alt_data_end+0xff008dc4>
    908c:	89000404 	addi	r4,r17,16
    9090:	b93fbc16 	blt	r23,r4,8f84 <__alt_data_end+0xff008f84>
    9094:	b0800317 	ldw	r2,12(r22)
    9098:	b0c00217 	ldw	r3,8(r22)
    909c:	81bfff04 	addi	r6,r16,-4
    90a0:	01000904 	movi	r4,36
    90a4:	18800315 	stw	r2,12(r3)
    90a8:	10c00215 	stw	r3,8(r2)
    90ac:	b4800204 	addi	r18,r22,8
    90b0:	21804336 	bltu	r4,r6,91c0 <_realloc_r+0x508>
    90b4:	008004c4 	movi	r2,19
    90b8:	11803f2e 	bgeu	r2,r6,91b8 <_realloc_r+0x500>
    90bc:	a8800017 	ldw	r2,0(r21)
    90c0:	b0800215 	stw	r2,8(r22)
    90c4:	a8800117 	ldw	r2,4(r21)
    90c8:	b0800315 	stw	r2,12(r22)
    90cc:	008006c4 	movi	r2,27
    90d0:	11803f36 	bltu	r2,r6,91d0 <_realloc_r+0x518>
    90d4:	b0800404 	addi	r2,r22,16
    90d8:	ad400204 	addi	r21,r21,8
    90dc:	a8c00017 	ldw	r3,0(r21)
    90e0:	10c00015 	stw	r3,0(r2)
    90e4:	a8c00117 	ldw	r3,4(r21)
    90e8:	10c00115 	stw	r3,4(r2)
    90ec:	a8c00217 	ldw	r3,8(r21)
    90f0:	10c00215 	stw	r3,8(r2)
    90f4:	b447883a 	add	r3,r22,r17
    90f8:	bc45c83a 	sub	r2,r23,r17
    90fc:	e0c00215 	stw	r3,8(fp)
    9100:	10800054 	ori	r2,r2,1
    9104:	18800115 	stw	r2,4(r3)
    9108:	b0800117 	ldw	r2,4(r22)
    910c:	a009883a 	mov	r4,r20
    9110:	1080004c 	andi	r2,r2,1
    9114:	1462b03a 	or	r17,r2,r17
    9118:	b4400115 	stw	r17,4(r22)
    911c:	000eadc0 	call	eadc <__malloc_unlock>
    9120:	9005883a 	mov	r2,r18
    9124:	003f4006 	br	8e28 <__alt_data_end+0xff008e28>
    9128:	a8c00217 	ldw	r3,8(r21)
    912c:	90c00215 	stw	r3,8(r18)
    9130:	a8c00317 	ldw	r3,12(r21)
    9134:	90c00315 	stw	r3,12(r18)
    9138:	30801126 	beq	r6,r2,9180 <_realloc_r+0x4c8>
    913c:	90800404 	addi	r2,r18,16
    9140:	a8c00404 	addi	r3,r21,16
    9144:	003f1906 	br	8dac <__alt_data_end+0xff008dac>
    9148:	90ffff17 	ldw	r3,-4(r18)
    914c:	00bfff04 	movi	r2,-4
    9150:	a825883a 	mov	r18,r21
    9154:	1884703a 	and	r2,r3,r2
    9158:	80a1883a 	add	r16,r16,r2
    915c:	003f2406 	br	8df0 <__alt_data_end+0xff008df0>
    9160:	a8800217 	ldw	r2,8(r21)
    9164:	b0800415 	stw	r2,16(r22)
    9168:	a8800317 	ldw	r2,12(r21)
    916c:	b0800515 	stw	r2,20(r22)
    9170:	31000a26 	beq	r6,r4,919c <_realloc_r+0x4e4>
    9174:	b0800604 	addi	r2,r22,24
    9178:	ad400404 	addi	r21,r21,16
    917c:	003fa906 	br	9024 <__alt_data_end+0xff009024>
    9180:	a9000417 	ldw	r4,16(r21)
    9184:	90800604 	addi	r2,r18,24
    9188:	a8c00604 	addi	r3,r21,24
    918c:	91000415 	stw	r4,16(r18)
    9190:	a9000517 	ldw	r4,20(r21)
    9194:	91000515 	stw	r4,20(r18)
    9198:	003f0406 	br	8dac <__alt_data_end+0xff008dac>
    919c:	a8c00417 	ldw	r3,16(r21)
    91a0:	ad400604 	addi	r21,r21,24
    91a4:	b0800804 	addi	r2,r22,32
    91a8:	b0c00615 	stw	r3,24(r22)
    91ac:	a8ffff17 	ldw	r3,-4(r21)
    91b0:	b0c00715 	stw	r3,28(r22)
    91b4:	003f9b06 	br	9024 <__alt_data_end+0xff009024>
    91b8:	9005883a 	mov	r2,r18
    91bc:	003fc706 	br	90dc <__alt_data_end+0xff0090dc>
    91c0:	a80b883a 	mov	r5,r21
    91c4:	9009883a 	mov	r4,r18
    91c8:	0007a380 	call	7a38 <memmove>
    91cc:	003fc906 	br	90f4 <__alt_data_end+0xff0090f4>
    91d0:	a8800217 	ldw	r2,8(r21)
    91d4:	b0800415 	stw	r2,16(r22)
    91d8:	a8800317 	ldw	r2,12(r21)
    91dc:	b0800515 	stw	r2,20(r22)
    91e0:	31000726 	beq	r6,r4,9200 <_realloc_r+0x548>
    91e4:	b0800604 	addi	r2,r22,24
    91e8:	ad400404 	addi	r21,r21,16
    91ec:	003fbb06 	br	90dc <__alt_data_end+0xff0090dc>
    91f0:	a009883a 	mov	r4,r20
    91f4:	000eadc0 	call	eadc <__malloc_unlock>
    91f8:	0005883a 	mov	r2,zero
    91fc:	003f0a06 	br	8e28 <__alt_data_end+0xff008e28>
    9200:	a8c00417 	ldw	r3,16(r21)
    9204:	ad400604 	addi	r21,r21,24
    9208:	b0800804 	addi	r2,r22,32
    920c:	b0c00615 	stw	r3,24(r22)
    9210:	a8ffff17 	ldw	r3,-4(r21)
    9214:	b0c00715 	stw	r3,28(r22)
    9218:	003fb006 	br	90dc <__alt_data_end+0xff0090dc>

0000921c <__fpclassifyd>:
    921c:	00a00034 	movhi	r2,32768
    9220:	10bfffc4 	addi	r2,r2,-1
    9224:	2884703a 	and	r2,r5,r2
    9228:	10000726 	beq	r2,zero,9248 <__fpclassifyd+0x2c>
    922c:	00fffc34 	movhi	r3,65520
    9230:	019ff834 	movhi	r6,32736
    9234:	28c7883a 	add	r3,r5,r3
    9238:	31bfffc4 	addi	r6,r6,-1
    923c:	30c00536 	bltu	r6,r3,9254 <__fpclassifyd+0x38>
    9240:	00800104 	movi	r2,4
    9244:	f800283a 	ret
    9248:	2000021e 	bne	r4,zero,9254 <__fpclassifyd+0x38>
    924c:	00800084 	movi	r2,2
    9250:	f800283a 	ret
    9254:	00dffc34 	movhi	r3,32752
    9258:	019ff834 	movhi	r6,32736
    925c:	28cb883a 	add	r5,r5,r3
    9260:	31bfffc4 	addi	r6,r6,-1
    9264:	317ff62e 	bgeu	r6,r5,9240 <__alt_data_end+0xff009240>
    9268:	01400434 	movhi	r5,16
    926c:	297fffc4 	addi	r5,r5,-1
    9270:	28800236 	bltu	r5,r2,927c <__fpclassifyd+0x60>
    9274:	008000c4 	movi	r2,3
    9278:	f800283a 	ret
    927c:	10c00226 	beq	r2,r3,9288 <__fpclassifyd+0x6c>
    9280:	0005883a 	mov	r2,zero
    9284:	f800283a 	ret
    9288:	2005003a 	cmpeq	r2,r4,zero
    928c:	f800283a 	ret

00009290 <__sread>:
    9290:	defffe04 	addi	sp,sp,-8
    9294:	dc000015 	stw	r16,0(sp)
    9298:	2821883a 	mov	r16,r5
    929c:	2940038f 	ldh	r5,14(r5)
    92a0:	dfc00115 	stw	ra,4(sp)
    92a4:	000b0840 	call	b084 <_read_r>
    92a8:	10000716 	blt	r2,zero,92c8 <__sread+0x38>
    92ac:	80c01417 	ldw	r3,80(r16)
    92b0:	1887883a 	add	r3,r3,r2
    92b4:	80c01415 	stw	r3,80(r16)
    92b8:	dfc00117 	ldw	ra,4(sp)
    92bc:	dc000017 	ldw	r16,0(sp)
    92c0:	dec00204 	addi	sp,sp,8
    92c4:	f800283a 	ret
    92c8:	80c0030b 	ldhu	r3,12(r16)
    92cc:	18fbffcc 	andi	r3,r3,61439
    92d0:	80c0030d 	sth	r3,12(r16)
    92d4:	dfc00117 	ldw	ra,4(sp)
    92d8:	dc000017 	ldw	r16,0(sp)
    92dc:	dec00204 	addi	sp,sp,8
    92e0:	f800283a 	ret

000092e4 <__seofread>:
    92e4:	0005883a 	mov	r2,zero
    92e8:	f800283a 	ret

000092ec <__swrite>:
    92ec:	2880030b 	ldhu	r2,12(r5)
    92f0:	defffb04 	addi	sp,sp,-20
    92f4:	dcc00315 	stw	r19,12(sp)
    92f8:	dc800215 	stw	r18,8(sp)
    92fc:	dc400115 	stw	r17,4(sp)
    9300:	dc000015 	stw	r16,0(sp)
    9304:	dfc00415 	stw	ra,16(sp)
    9308:	10c0400c 	andi	r3,r2,256
    930c:	2821883a 	mov	r16,r5
    9310:	2023883a 	mov	r17,r4
    9314:	3025883a 	mov	r18,r6
    9318:	3827883a 	mov	r19,r7
    931c:	18000526 	beq	r3,zero,9334 <__swrite+0x48>
    9320:	2940038f 	ldh	r5,14(r5)
    9324:	01c00084 	movi	r7,2
    9328:	000d883a 	mov	r6,zero
    932c:	000b0240 	call	b024 <_lseek_r>
    9330:	8080030b 	ldhu	r2,12(r16)
    9334:	8140038f 	ldh	r5,14(r16)
    9338:	10bbffcc 	andi	r2,r2,61439
    933c:	980f883a 	mov	r7,r19
    9340:	900d883a 	mov	r6,r18
    9344:	8809883a 	mov	r4,r17
    9348:	8080030d 	sth	r2,12(r16)
    934c:	dfc00417 	ldw	ra,16(sp)
    9350:	dcc00317 	ldw	r19,12(sp)
    9354:	dc800217 	ldw	r18,8(sp)
    9358:	dc400117 	ldw	r17,4(sp)
    935c:	dc000017 	ldw	r16,0(sp)
    9360:	dec00504 	addi	sp,sp,20
    9364:	000aaf01 	jmpi	aaf0 <_write_r>

00009368 <__sseek>:
    9368:	defffe04 	addi	sp,sp,-8
    936c:	dc000015 	stw	r16,0(sp)
    9370:	2821883a 	mov	r16,r5
    9374:	2940038f 	ldh	r5,14(r5)
    9378:	dfc00115 	stw	ra,4(sp)
    937c:	000b0240 	call	b024 <_lseek_r>
    9380:	00ffffc4 	movi	r3,-1
    9384:	10c00826 	beq	r2,r3,93a8 <__sseek+0x40>
    9388:	80c0030b 	ldhu	r3,12(r16)
    938c:	80801415 	stw	r2,80(r16)
    9390:	18c40014 	ori	r3,r3,4096
    9394:	80c0030d 	sth	r3,12(r16)
    9398:	dfc00117 	ldw	ra,4(sp)
    939c:	dc000017 	ldw	r16,0(sp)
    93a0:	dec00204 	addi	sp,sp,8
    93a4:	f800283a 	ret
    93a8:	80c0030b 	ldhu	r3,12(r16)
    93ac:	18fbffcc 	andi	r3,r3,61439
    93b0:	80c0030d 	sth	r3,12(r16)
    93b4:	dfc00117 	ldw	ra,4(sp)
    93b8:	dc000017 	ldw	r16,0(sp)
    93bc:	dec00204 	addi	sp,sp,8
    93c0:	f800283a 	ret

000093c4 <__sclose>:
    93c4:	2940038f 	ldh	r5,14(r5)
    93c8:	000ab501 	jmpi	ab50 <_close_r>

000093cc <strcmp>:
    93cc:	2144b03a 	or	r2,r4,r5
    93d0:	108000cc 	andi	r2,r2,3
    93d4:	1000171e 	bne	r2,zero,9434 <strcmp+0x68>
    93d8:	20800017 	ldw	r2,0(r4)
    93dc:	28c00017 	ldw	r3,0(r5)
    93e0:	10c0141e 	bne	r2,r3,9434 <strcmp+0x68>
    93e4:	027fbff4 	movhi	r9,65279
    93e8:	4a7fbfc4 	addi	r9,r9,-257
    93ec:	0086303a 	nor	r3,zero,r2
    93f0:	02202074 	movhi	r8,32897
    93f4:	1245883a 	add	r2,r2,r9
    93f8:	42202004 	addi	r8,r8,-32640
    93fc:	10c4703a 	and	r2,r2,r3
    9400:	1204703a 	and	r2,r2,r8
    9404:	10000226 	beq	r2,zero,9410 <strcmp+0x44>
    9408:	00002306 	br	9498 <strcmp+0xcc>
    940c:	1000221e 	bne	r2,zero,9498 <strcmp+0xcc>
    9410:	21000104 	addi	r4,r4,4
    9414:	20c00017 	ldw	r3,0(r4)
    9418:	29400104 	addi	r5,r5,4
    941c:	29800017 	ldw	r6,0(r5)
    9420:	1a4f883a 	add	r7,r3,r9
    9424:	00c4303a 	nor	r2,zero,r3
    9428:	3884703a 	and	r2,r7,r2
    942c:	1204703a 	and	r2,r2,r8
    9430:	19bff626 	beq	r3,r6,940c <__alt_data_end+0xff00940c>
    9434:	20800003 	ldbu	r2,0(r4)
    9438:	10c03fcc 	andi	r3,r2,255
    943c:	18c0201c 	xori	r3,r3,128
    9440:	18ffe004 	addi	r3,r3,-128
    9444:	18000c26 	beq	r3,zero,9478 <strcmp+0xac>
    9448:	29800007 	ldb	r6,0(r5)
    944c:	19800326 	beq	r3,r6,945c <strcmp+0x90>
    9450:	00001306 	br	94a0 <strcmp+0xd4>
    9454:	29800007 	ldb	r6,0(r5)
    9458:	11800b1e 	bne	r2,r6,9488 <strcmp+0xbc>
    945c:	21000044 	addi	r4,r4,1
    9460:	20c00003 	ldbu	r3,0(r4)
    9464:	29400044 	addi	r5,r5,1
    9468:	18803fcc 	andi	r2,r3,255
    946c:	1080201c 	xori	r2,r2,128
    9470:	10bfe004 	addi	r2,r2,-128
    9474:	103ff71e 	bne	r2,zero,9454 <__alt_data_end+0xff009454>
    9478:	0007883a 	mov	r3,zero
    947c:	28800003 	ldbu	r2,0(r5)
    9480:	1885c83a 	sub	r2,r3,r2
    9484:	f800283a 	ret
    9488:	28800003 	ldbu	r2,0(r5)
    948c:	18c03fcc 	andi	r3,r3,255
    9490:	1885c83a 	sub	r2,r3,r2
    9494:	f800283a 	ret
    9498:	0005883a 	mov	r2,zero
    949c:	f800283a 	ret
    94a0:	10c03fcc 	andi	r3,r2,255
    94a4:	003ff506 	br	947c <__alt_data_end+0xff00947c>

000094a8 <__sprint_r.part.0>:
    94a8:	28801917 	ldw	r2,100(r5)
    94ac:	defff604 	addi	sp,sp,-40
    94b0:	dd400515 	stw	r21,20(sp)
    94b4:	dfc00915 	stw	ra,36(sp)
    94b8:	df000815 	stw	fp,32(sp)
    94bc:	ddc00715 	stw	r23,28(sp)
    94c0:	dd800615 	stw	r22,24(sp)
    94c4:	dd000415 	stw	r20,16(sp)
    94c8:	dcc00315 	stw	r19,12(sp)
    94cc:	dc800215 	stw	r18,8(sp)
    94d0:	dc400115 	stw	r17,4(sp)
    94d4:	dc000015 	stw	r16,0(sp)
    94d8:	1088000c 	andi	r2,r2,8192
    94dc:	302b883a 	mov	r21,r6
    94e0:	10002e26 	beq	r2,zero,959c <__sprint_r.part.0+0xf4>
    94e4:	30800217 	ldw	r2,8(r6)
    94e8:	35800017 	ldw	r22,0(r6)
    94ec:	10002926 	beq	r2,zero,9594 <__sprint_r.part.0+0xec>
    94f0:	2827883a 	mov	r19,r5
    94f4:	2029883a 	mov	r20,r4
    94f8:	b5c00104 	addi	r23,r22,4
    94fc:	04bfffc4 	movi	r18,-1
    9500:	bc400017 	ldw	r17,0(r23)
    9504:	b4000017 	ldw	r16,0(r22)
    9508:	0039883a 	mov	fp,zero
    950c:	8822d0ba 	srli	r17,r17,2
    9510:	8800031e 	bne	r17,zero,9520 <__sprint_r.part.0+0x78>
    9514:	00001806 	br	9578 <__sprint_r.part.0+0xd0>
    9518:	84000104 	addi	r16,r16,4
    951c:	8f001526 	beq	r17,fp,9574 <__sprint_r.part.0+0xcc>
    9520:	81400017 	ldw	r5,0(r16)
    9524:	980d883a 	mov	r6,r19
    9528:	a009883a 	mov	r4,r20
    952c:	000aed00 	call	aed0 <_fputwc_r>
    9530:	e7000044 	addi	fp,fp,1
    9534:	14bff81e 	bne	r2,r18,9518 <__alt_data_end+0xff009518>
    9538:	9005883a 	mov	r2,r18
    953c:	a8000215 	stw	zero,8(r21)
    9540:	a8000115 	stw	zero,4(r21)
    9544:	dfc00917 	ldw	ra,36(sp)
    9548:	df000817 	ldw	fp,32(sp)
    954c:	ddc00717 	ldw	r23,28(sp)
    9550:	dd800617 	ldw	r22,24(sp)
    9554:	dd400517 	ldw	r21,20(sp)
    9558:	dd000417 	ldw	r20,16(sp)
    955c:	dcc00317 	ldw	r19,12(sp)
    9560:	dc800217 	ldw	r18,8(sp)
    9564:	dc400117 	ldw	r17,4(sp)
    9568:	dc000017 	ldw	r16,0(sp)
    956c:	dec00a04 	addi	sp,sp,40
    9570:	f800283a 	ret
    9574:	a8800217 	ldw	r2,8(r21)
    9578:	8c63883a 	add	r17,r17,r17
    957c:	8c63883a 	add	r17,r17,r17
    9580:	1445c83a 	sub	r2,r2,r17
    9584:	a8800215 	stw	r2,8(r21)
    9588:	b5800204 	addi	r22,r22,8
    958c:	bdc00204 	addi	r23,r23,8
    9590:	103fdb1e 	bne	r2,zero,9500 <__alt_data_end+0xff009500>
    9594:	0005883a 	mov	r2,zero
    9598:	003fe806 	br	953c <__alt_data_end+0xff00953c>
    959c:	0006f300 	call	6f30 <__sfvwrite_r>
    95a0:	003fe606 	br	953c <__alt_data_end+0xff00953c>

000095a4 <__sprint_r>:
    95a4:	30c00217 	ldw	r3,8(r6)
    95a8:	18000126 	beq	r3,zero,95b0 <__sprint_r+0xc>
    95ac:	00094a81 	jmpi	94a8 <__sprint_r.part.0>
    95b0:	30000115 	stw	zero,4(r6)
    95b4:	0005883a 	mov	r2,zero
    95b8:	f800283a 	ret

000095bc <___vfiprintf_internal_r>:
    95bc:	deffc904 	addi	sp,sp,-220
    95c0:	df003515 	stw	fp,212(sp)
    95c4:	dd003115 	stw	r20,196(sp)
    95c8:	dfc03615 	stw	ra,216(sp)
    95cc:	ddc03415 	stw	r23,208(sp)
    95d0:	dd803315 	stw	r22,204(sp)
    95d4:	dd403215 	stw	r21,200(sp)
    95d8:	dcc03015 	stw	r19,192(sp)
    95dc:	dc802f15 	stw	r18,188(sp)
    95e0:	dc402e15 	stw	r17,184(sp)
    95e4:	dc002d15 	stw	r16,180(sp)
    95e8:	d9002015 	stw	r4,128(sp)
    95ec:	d9c02215 	stw	r7,136(sp)
    95f0:	2829883a 	mov	r20,r5
    95f4:	3039883a 	mov	fp,r6
    95f8:	20000226 	beq	r4,zero,9604 <___vfiprintf_internal_r+0x48>
    95fc:	20800e17 	ldw	r2,56(r4)
    9600:	1000cf26 	beq	r2,zero,9940 <___vfiprintf_internal_r+0x384>
    9604:	a080030b 	ldhu	r2,12(r20)
    9608:	10c8000c 	andi	r3,r2,8192
    960c:	1800061e 	bne	r3,zero,9628 <___vfiprintf_internal_r+0x6c>
    9610:	a1001917 	ldw	r4,100(r20)
    9614:	00f7ffc4 	movi	r3,-8193
    9618:	10880014 	ori	r2,r2,8192
    961c:	20c6703a 	and	r3,r4,r3
    9620:	a080030d 	sth	r2,12(r20)
    9624:	a0c01915 	stw	r3,100(r20)
    9628:	10c0020c 	andi	r3,r2,8
    962c:	1800a926 	beq	r3,zero,98d4 <___vfiprintf_internal_r+0x318>
    9630:	a0c00417 	ldw	r3,16(r20)
    9634:	1800a726 	beq	r3,zero,98d4 <___vfiprintf_internal_r+0x318>
    9638:	1080068c 	andi	r2,r2,26
    963c:	00c00284 	movi	r3,10
    9640:	10c0ac26 	beq	r2,r3,98f4 <___vfiprintf_internal_r+0x338>
    9644:	da801a04 	addi	r10,sp,104
    9648:	da801e15 	stw	r10,120(sp)
    964c:	d8801e17 	ldw	r2,120(sp)
    9650:	da8019c4 	addi	r10,sp,103
    9654:	05800074 	movhi	r22,1
    9658:	05c00074 	movhi	r23,1
    965c:	da801f15 	stw	r10,124(sp)
    9660:	1295c83a 	sub	r10,r2,r10
    9664:	b5857804 	addi	r22,r22,5600
    9668:	bdc57404 	addi	r23,r23,5584
    966c:	dec01a15 	stw	sp,104(sp)
    9670:	d8001c15 	stw	zero,112(sp)
    9674:	d8001b15 	stw	zero,108(sp)
    9678:	d8002615 	stw	zero,152(sp)
    967c:	d8002315 	stw	zero,140(sp)
    9680:	da802715 	stw	r10,156(sp)
    9684:	d811883a 	mov	r8,sp
    9688:	dd002115 	stw	r20,132(sp)
    968c:	e021883a 	mov	r16,fp
    9690:	80800007 	ldb	r2,0(r16)
    9694:	1003ea26 	beq	r2,zero,a640 <___vfiprintf_internal_r+0x1084>
    9698:	00c00944 	movi	r3,37
    969c:	8025883a 	mov	r18,r16
    96a0:	10c0021e 	bne	r2,r3,96ac <___vfiprintf_internal_r+0xf0>
    96a4:	00001606 	br	9700 <___vfiprintf_internal_r+0x144>
    96a8:	10c00326 	beq	r2,r3,96b8 <___vfiprintf_internal_r+0xfc>
    96ac:	94800044 	addi	r18,r18,1
    96b0:	90800007 	ldb	r2,0(r18)
    96b4:	103ffc1e 	bne	r2,zero,96a8 <__alt_data_end+0xff0096a8>
    96b8:	9423c83a 	sub	r17,r18,r16
    96bc:	88001026 	beq	r17,zero,9700 <___vfiprintf_internal_r+0x144>
    96c0:	d8c01c17 	ldw	r3,112(sp)
    96c4:	d8801b17 	ldw	r2,108(sp)
    96c8:	44000015 	stw	r16,0(r8)
    96cc:	88c7883a 	add	r3,r17,r3
    96d0:	10800044 	addi	r2,r2,1
    96d4:	44400115 	stw	r17,4(r8)
    96d8:	d8c01c15 	stw	r3,112(sp)
    96dc:	d8801b15 	stw	r2,108(sp)
    96e0:	010001c4 	movi	r4,7
    96e4:	2080760e 	bge	r4,r2,98c0 <___vfiprintf_internal_r+0x304>
    96e8:	1803821e 	bne	r3,zero,a4f4 <___vfiprintf_internal_r+0xf38>
    96ec:	da802317 	ldw	r10,140(sp)
    96f0:	d8001b15 	stw	zero,108(sp)
    96f4:	d811883a 	mov	r8,sp
    96f8:	5455883a 	add	r10,r10,r17
    96fc:	da802315 	stw	r10,140(sp)
    9700:	90800007 	ldb	r2,0(r18)
    9704:	10044626 	beq	r2,zero,a820 <___vfiprintf_internal_r+0x1264>
    9708:	90c00047 	ldb	r3,1(r18)
    970c:	94000044 	addi	r16,r18,1
    9710:	d8001d85 	stb	zero,118(sp)
    9714:	0009883a 	mov	r4,zero
    9718:	000f883a 	mov	r7,zero
    971c:	027fffc4 	movi	r9,-1
    9720:	0023883a 	mov	r17,zero
    9724:	0029883a 	mov	r20,zero
    9728:	01401604 	movi	r5,88
    972c:	01800244 	movi	r6,9
    9730:	03400a84 	movi	r13,42
    9734:	03001b04 	movi	r12,108
    9738:	84000044 	addi	r16,r16,1
    973c:	18bff804 	addi	r2,r3,-32
    9740:	28827336 	bltu	r5,r2,a110 <___vfiprintf_internal_r+0xb54>
    9744:	100490ba 	slli	r2,r2,2
    9748:	02800074 	movhi	r10,1
    974c:	52a5d704 	addi	r10,r10,-26788
    9750:	1285883a 	add	r2,r2,r10
    9754:	10800017 	ldw	r2,0(r2)
    9758:	1000683a 	jmp	r2
    975c:	00009e44 	movi	zero,633
    9760:	0000a110 	cmplti	zero,zero,644
    9764:	0000a110 	cmplti	zero,zero,644
    9768:	00009e64 	muli	zero,zero,633
    976c:	0000a110 	cmplti	zero,zero,644
    9770:	0000a110 	cmplti	zero,zero,644
    9774:	0000a110 	cmplti	zero,zero,644
    9778:	0000a110 	cmplti	zero,zero,644
    977c:	0000a110 	cmplti	zero,zero,644
    9780:	0000a110 	cmplti	zero,zero,644
    9784:	0000a04c 	andi	zero,zero,641
    9788:	0000a068 	cmpgeui	zero,zero,641
    978c:	0000a110 	cmplti	zero,zero,644
    9790:	00009950 	cmplti	zero,zero,613
    9794:	0000a078 	rdprs	zero,zero,641
    9798:	0000a110 	cmplti	zero,zero,644
    979c:	00009e70 	cmpltui	zero,zero,633
    97a0:	00009e7c 	xorhi	zero,zero,633
    97a4:	00009e7c 	xorhi	zero,zero,633
    97a8:	00009e7c 	xorhi	zero,zero,633
    97ac:	00009e7c 	xorhi	zero,zero,633
    97b0:	00009e7c 	xorhi	zero,zero,633
    97b4:	00009e7c 	xorhi	zero,zero,633
    97b8:	00009e7c 	xorhi	zero,zero,633
    97bc:	00009e7c 	xorhi	zero,zero,633
    97c0:	00009e7c 	xorhi	zero,zero,633
    97c4:	0000a110 	cmplti	zero,zero,644
    97c8:	0000a110 	cmplti	zero,zero,644
    97cc:	0000a110 	cmplti	zero,zero,644
    97d0:	0000a110 	cmplti	zero,zero,644
    97d4:	0000a110 	cmplti	zero,zero,644
    97d8:	0000a110 	cmplti	zero,zero,644
    97dc:	0000a110 	cmplti	zero,zero,644
    97e0:	0000a110 	cmplti	zero,zero,644
    97e4:	0000a110 	cmplti	zero,zero,644
    97e8:	0000a110 	cmplti	zero,zero,644
    97ec:	00009ea8 	cmpgeui	zero,zero,634
    97f0:	0000a110 	cmplti	zero,zero,644
    97f4:	0000a110 	cmplti	zero,zero,644
    97f8:	0000a110 	cmplti	zero,zero,644
    97fc:	0000a110 	cmplti	zero,zero,644
    9800:	0000a110 	cmplti	zero,zero,644
    9804:	0000a110 	cmplti	zero,zero,644
    9808:	0000a110 	cmplti	zero,zero,644
    980c:	0000a110 	cmplti	zero,zero,644
    9810:	0000a110 	cmplti	zero,zero,644
    9814:	0000a110 	cmplti	zero,zero,644
    9818:	00009ee0 	cmpeqi	zero,zero,635
    981c:	0000a110 	cmplti	zero,zero,644
    9820:	0000a110 	cmplti	zero,zero,644
    9824:	0000a110 	cmplti	zero,zero,644
    9828:	0000a110 	cmplti	zero,zero,644
    982c:	0000a110 	cmplti	zero,zero,644
    9830:	00009f38 	rdprs	zero,zero,636
    9834:	0000a110 	cmplti	zero,zero,644
    9838:	0000a110 	cmplti	zero,zero,644
    983c:	00009fa8 	cmpgeui	zero,zero,638
    9840:	0000a110 	cmplti	zero,zero,644
    9844:	0000a110 	cmplti	zero,zero,644
    9848:	0000a110 	cmplti	zero,zero,644
    984c:	0000a110 	cmplti	zero,zero,644
    9850:	0000a110 	cmplti	zero,zero,644
    9854:	0000a110 	cmplti	zero,zero,644
    9858:	0000a110 	cmplti	zero,zero,644
    985c:	0000a110 	cmplti	zero,zero,644
    9860:	0000a110 	cmplti	zero,zero,644
    9864:	0000a110 	cmplti	zero,zero,644
    9868:	00009d54 	movui	zero,629
    986c:	00009d80 	call	9d8 <i2c_short_write+0x30>
    9870:	0000a110 	cmplti	zero,zero,644
    9874:	0000a110 	cmplti	zero,zero,644
    9878:	0000a110 	cmplti	zero,zero,644
    987c:	0000a0b8 	rdprs	zero,zero,642
    9880:	00009d80 	call	9d8 <i2c_short_write+0x30>
    9884:	0000a110 	cmplti	zero,zero,644
    9888:	0000a110 	cmplti	zero,zero,644
    988c:	00009c14 	movui	zero,624
    9890:	0000a110 	cmplti	zero,zero,644
    9894:	00009c24 	muli	zero,zero,624
    9898:	00009c60 	cmpeqi	zero,zero,625
    989c:	0000995c 	xori	zero,zero,613
    98a0:	00009c08 	cmpgei	zero,zero,624
    98a4:	0000a110 	cmplti	zero,zero,644
    98a8:	00009fe4 	muli	zero,zero,639
    98ac:	0000a110 	cmplti	zero,zero,644
    98b0:	0000a03c 	xorhi	zero,zero,640
    98b4:	0000a110 	cmplti	zero,zero,644
    98b8:	0000a110 	cmplti	zero,zero,644
    98bc:	00009d00 	call	9d0 <i2c_short_write+0x28>
    98c0:	42000204 	addi	r8,r8,8
    98c4:	da802317 	ldw	r10,140(sp)
    98c8:	5455883a 	add	r10,r10,r17
    98cc:	da802315 	stw	r10,140(sp)
    98d0:	003f8b06 	br	9700 <__alt_data_end+0xff009700>
    98d4:	d9002017 	ldw	r4,128(sp)
    98d8:	a00b883a 	mov	r5,r20
    98dc:	0004ad80 	call	4ad8 <__swsetup_r>
    98e0:	1003b11e 	bne	r2,zero,a7a8 <___vfiprintf_internal_r+0x11ec>
    98e4:	a080030b 	ldhu	r2,12(r20)
    98e8:	00c00284 	movi	r3,10
    98ec:	1080068c 	andi	r2,r2,26
    98f0:	10ff541e 	bne	r2,r3,9644 <__alt_data_end+0xff009644>
    98f4:	a080038f 	ldh	r2,14(r20)
    98f8:	103f5216 	blt	r2,zero,9644 <__alt_data_end+0xff009644>
    98fc:	d9c02217 	ldw	r7,136(sp)
    9900:	d9002017 	ldw	r4,128(sp)
    9904:	e00d883a 	mov	r6,fp
    9908:	a00b883a 	mov	r5,r20
    990c:	000aa340 	call	aa34 <__sbprintf>
    9910:	dfc03617 	ldw	ra,216(sp)
    9914:	df003517 	ldw	fp,212(sp)
    9918:	ddc03417 	ldw	r23,208(sp)
    991c:	dd803317 	ldw	r22,204(sp)
    9920:	dd403217 	ldw	r21,200(sp)
    9924:	dd003117 	ldw	r20,196(sp)
    9928:	dcc03017 	ldw	r19,192(sp)
    992c:	dc802f17 	ldw	r18,188(sp)
    9930:	dc402e17 	ldw	r17,184(sp)
    9934:	dc002d17 	ldw	r16,180(sp)
    9938:	dec03704 	addi	sp,sp,220
    993c:	f800283a 	ret
    9940:	0006aac0 	call	6aac <__sinit>
    9944:	003f2f06 	br	9604 <__alt_data_end+0xff009604>
    9948:	0463c83a 	sub	r17,zero,r17
    994c:	d8802215 	stw	r2,136(sp)
    9950:	a5000114 	ori	r20,r20,4
    9954:	80c00007 	ldb	r3,0(r16)
    9958:	003f7706 	br	9738 <__alt_data_end+0xff009738>
    995c:	00800c04 	movi	r2,48
    9960:	da802217 	ldw	r10,136(sp)
    9964:	d8801d05 	stb	r2,116(sp)
    9968:	00801e04 	movi	r2,120
    996c:	d8801d45 	stb	r2,117(sp)
    9970:	d8001d85 	stb	zero,118(sp)
    9974:	50c00104 	addi	r3,r10,4
    9978:	54800017 	ldw	r18,0(r10)
    997c:	0027883a 	mov	r19,zero
    9980:	a0800094 	ori	r2,r20,2
    9984:	48030b16 	blt	r9,zero,a5b4 <___vfiprintf_internal_r+0xff8>
    9988:	00bfdfc4 	movi	r2,-129
    998c:	a096703a 	and	r11,r20,r2
    9990:	d8c02215 	stw	r3,136(sp)
    9994:	5d000094 	ori	r20,r11,2
    9998:	90032b1e 	bne	r18,zero,a648 <___vfiprintf_internal_r+0x108c>
    999c:	00800074 	movhi	r2,1
    99a0:	10851304 	addi	r2,r2,5196
    99a4:	d8802615 	stw	r2,152(sp)
    99a8:	0039883a 	mov	fp,zero
    99ac:	48017b1e 	bne	r9,zero,9f9c <___vfiprintf_internal_r+0x9e0>
    99b0:	0013883a 	mov	r9,zero
    99b4:	0027883a 	mov	r19,zero
    99b8:	dd401a04 	addi	r21,sp,104
    99bc:	4825883a 	mov	r18,r9
    99c0:	4cc0010e 	bge	r9,r19,99c8 <___vfiprintf_internal_r+0x40c>
    99c4:	9825883a 	mov	r18,r19
    99c8:	e7003fcc 	andi	fp,fp,255
    99cc:	e700201c 	xori	fp,fp,128
    99d0:	e73fe004 	addi	fp,fp,-128
    99d4:	e0000126 	beq	fp,zero,99dc <___vfiprintf_internal_r+0x420>
    99d8:	94800044 	addi	r18,r18,1
    99dc:	a380008c 	andi	r14,r20,2
    99e0:	70000126 	beq	r14,zero,99e8 <___vfiprintf_internal_r+0x42c>
    99e4:	94800084 	addi	r18,r18,2
    99e8:	a700210c 	andi	fp,r20,132
    99ec:	e001df1e 	bne	fp,zero,a16c <___vfiprintf_internal_r+0xbb0>
    99f0:	8c87c83a 	sub	r3,r17,r18
    99f4:	00c1dd0e 	bge	zero,r3,a16c <___vfiprintf_internal_r+0xbb0>
    99f8:	01c00404 	movi	r7,16
    99fc:	d8801c17 	ldw	r2,112(sp)
    9a00:	38c3ad0e 	bge	r7,r3,a8b8 <___vfiprintf_internal_r+0x12fc>
    9a04:	02800074 	movhi	r10,1
    9a08:	52857804 	addi	r10,r10,5600
    9a0c:	dc002915 	stw	r16,164(sp)
    9a10:	d9801b17 	ldw	r6,108(sp)
    9a14:	da802415 	stw	r10,144(sp)
    9a18:	03c001c4 	movi	r15,7
    9a1c:	da402515 	stw	r9,148(sp)
    9a20:	db802815 	stw	r14,160(sp)
    9a24:	1821883a 	mov	r16,r3
    9a28:	00000506 	br	9a40 <___vfiprintf_internal_r+0x484>
    9a2c:	31400084 	addi	r5,r6,2
    9a30:	42000204 	addi	r8,r8,8
    9a34:	200d883a 	mov	r6,r4
    9a38:	843ffc04 	addi	r16,r16,-16
    9a3c:	3c000d0e 	bge	r7,r16,9a74 <___vfiprintf_internal_r+0x4b8>
    9a40:	10800404 	addi	r2,r2,16
    9a44:	31000044 	addi	r4,r6,1
    9a48:	45800015 	stw	r22,0(r8)
    9a4c:	41c00115 	stw	r7,4(r8)
    9a50:	d8801c15 	stw	r2,112(sp)
    9a54:	d9001b15 	stw	r4,108(sp)
    9a58:	793ff40e 	bge	r15,r4,9a2c <__alt_data_end+0xff009a2c>
    9a5c:	1001b51e 	bne	r2,zero,a134 <___vfiprintf_internal_r+0xb78>
    9a60:	843ffc04 	addi	r16,r16,-16
    9a64:	000d883a 	mov	r6,zero
    9a68:	01400044 	movi	r5,1
    9a6c:	d811883a 	mov	r8,sp
    9a70:	3c3ff316 	blt	r7,r16,9a40 <__alt_data_end+0xff009a40>
    9a74:	8007883a 	mov	r3,r16
    9a78:	da402517 	ldw	r9,148(sp)
    9a7c:	db802817 	ldw	r14,160(sp)
    9a80:	dc002917 	ldw	r16,164(sp)
    9a84:	da802417 	ldw	r10,144(sp)
    9a88:	1885883a 	add	r2,r3,r2
    9a8c:	40c00115 	stw	r3,4(r8)
    9a90:	42800015 	stw	r10,0(r8)
    9a94:	d8801c15 	stw	r2,112(sp)
    9a98:	d9401b15 	stw	r5,108(sp)
    9a9c:	00c001c4 	movi	r3,7
    9aa0:	19426016 	blt	r3,r5,a424 <___vfiprintf_internal_r+0xe68>
    9aa4:	d8c01d87 	ldb	r3,118(sp)
    9aa8:	42000204 	addi	r8,r8,8
    9aac:	29000044 	addi	r4,r5,1
    9ab0:	1801b31e 	bne	r3,zero,a180 <___vfiprintf_internal_r+0xbc4>
    9ab4:	7001c026 	beq	r14,zero,a1b8 <___vfiprintf_internal_r+0xbfc>
    9ab8:	d8c01d04 	addi	r3,sp,116
    9abc:	10800084 	addi	r2,r2,2
    9ac0:	40c00015 	stw	r3,0(r8)
    9ac4:	00c00084 	movi	r3,2
    9ac8:	40c00115 	stw	r3,4(r8)
    9acc:	d8801c15 	stw	r2,112(sp)
    9ad0:	d9001b15 	stw	r4,108(sp)
    9ad4:	00c001c4 	movi	r3,7
    9ad8:	1902650e 	bge	r3,r4,a470 <___vfiprintf_internal_r+0xeb4>
    9adc:	10029a1e 	bne	r2,zero,a548 <___vfiprintf_internal_r+0xf8c>
    9ae0:	00c02004 	movi	r3,128
    9ae4:	01000044 	movi	r4,1
    9ae8:	000b883a 	mov	r5,zero
    9aec:	d811883a 	mov	r8,sp
    9af0:	e0c1b31e 	bne	fp,r3,a1c0 <___vfiprintf_internal_r+0xc04>
    9af4:	8cb9c83a 	sub	fp,r17,r18
    9af8:	0701b10e 	bge	zero,fp,a1c0 <___vfiprintf_internal_r+0xc04>
    9afc:	01c00404 	movi	r7,16
    9b00:	3f03890e 	bge	r7,fp,a928 <___vfiprintf_internal_r+0x136c>
    9b04:	00c00074 	movhi	r3,1
    9b08:	18c57404 	addi	r3,r3,5584
    9b0c:	d8c02415 	stw	r3,144(sp)
    9b10:	8007883a 	mov	r3,r16
    9b14:	034001c4 	movi	r13,7
    9b18:	e021883a 	mov	r16,fp
    9b1c:	da402515 	stw	r9,148(sp)
    9b20:	1839883a 	mov	fp,r3
    9b24:	00000506 	br	9b3c <___vfiprintf_internal_r+0x580>
    9b28:	29800084 	addi	r6,r5,2
    9b2c:	42000204 	addi	r8,r8,8
    9b30:	180b883a 	mov	r5,r3
    9b34:	843ffc04 	addi	r16,r16,-16
    9b38:	3c000d0e 	bge	r7,r16,9b70 <___vfiprintf_internal_r+0x5b4>
    9b3c:	10800404 	addi	r2,r2,16
    9b40:	28c00044 	addi	r3,r5,1
    9b44:	45c00015 	stw	r23,0(r8)
    9b48:	41c00115 	stw	r7,4(r8)
    9b4c:	d8801c15 	stw	r2,112(sp)
    9b50:	d8c01b15 	stw	r3,108(sp)
    9b54:	68fff40e 	bge	r13,r3,9b28 <__alt_data_end+0xff009b28>
    9b58:	1002241e 	bne	r2,zero,a3ec <___vfiprintf_internal_r+0xe30>
    9b5c:	843ffc04 	addi	r16,r16,-16
    9b60:	01800044 	movi	r6,1
    9b64:	000b883a 	mov	r5,zero
    9b68:	d811883a 	mov	r8,sp
    9b6c:	3c3ff316 	blt	r7,r16,9b3c <__alt_data_end+0xff009b3c>
    9b70:	da402517 	ldw	r9,148(sp)
    9b74:	e007883a 	mov	r3,fp
    9b78:	8039883a 	mov	fp,r16
    9b7c:	1821883a 	mov	r16,r3
    9b80:	d8c02417 	ldw	r3,144(sp)
    9b84:	1705883a 	add	r2,r2,fp
    9b88:	47000115 	stw	fp,4(r8)
    9b8c:	40c00015 	stw	r3,0(r8)
    9b90:	d8801c15 	stw	r2,112(sp)
    9b94:	d9801b15 	stw	r6,108(sp)
    9b98:	00c001c4 	movi	r3,7
    9b9c:	19827616 	blt	r3,r6,a578 <___vfiprintf_internal_r+0xfbc>
    9ba0:	4cf9c83a 	sub	fp,r9,r19
    9ba4:	42000204 	addi	r8,r8,8
    9ba8:	31000044 	addi	r4,r6,1
    9bac:	300b883a 	mov	r5,r6
    9bb0:	07018516 	blt	zero,fp,a1c8 <___vfiprintf_internal_r+0xc0c>
    9bb4:	9885883a 	add	r2,r19,r2
    9bb8:	45400015 	stw	r21,0(r8)
    9bbc:	44c00115 	stw	r19,4(r8)
    9bc0:	d8801c15 	stw	r2,112(sp)
    9bc4:	d9001b15 	stw	r4,108(sp)
    9bc8:	00c001c4 	movi	r3,7
    9bcc:	1901dd0e 	bge	r3,r4,a344 <___vfiprintf_internal_r+0xd88>
    9bd0:	1002401e 	bne	r2,zero,a4d4 <___vfiprintf_internal_r+0xf18>
    9bd4:	d8001b15 	stw	zero,108(sp)
    9bd8:	a2c0010c 	andi	r11,r20,4
    9bdc:	58000226 	beq	r11,zero,9be8 <___vfiprintf_internal_r+0x62c>
    9be0:	8ca7c83a 	sub	r19,r17,r18
    9be4:	04c2f216 	blt	zero,r19,a7b0 <___vfiprintf_internal_r+0x11f4>
    9be8:	8c80010e 	bge	r17,r18,9bf0 <___vfiprintf_internal_r+0x634>
    9bec:	9023883a 	mov	r17,r18
    9bf0:	da802317 	ldw	r10,140(sp)
    9bf4:	5455883a 	add	r10,r10,r17
    9bf8:	da802315 	stw	r10,140(sp)
    9bfc:	d8001b15 	stw	zero,108(sp)
    9c00:	d811883a 	mov	r8,sp
    9c04:	003ea206 	br	9690 <__alt_data_end+0xff009690>
    9c08:	a5000814 	ori	r20,r20,32
    9c0c:	80c00007 	ldb	r3,0(r16)
    9c10:	003ec906 	br	9738 <__alt_data_end+0xff009738>
    9c14:	80c00007 	ldb	r3,0(r16)
    9c18:	1b030926 	beq	r3,r12,a840 <___vfiprintf_internal_r+0x1284>
    9c1c:	a5000414 	ori	r20,r20,16
    9c20:	003ec506 	br	9738 <__alt_data_end+0xff009738>
    9c24:	21003fcc 	andi	r4,r4,255
    9c28:	20035e1e 	bne	r4,zero,a9a4 <___vfiprintf_internal_r+0x13e8>
    9c2c:	a080080c 	andi	r2,r20,32
    9c30:	1002a526 	beq	r2,zero,a6c8 <___vfiprintf_internal_r+0x110c>
    9c34:	da802217 	ldw	r10,136(sp)
    9c38:	50800017 	ldw	r2,0(r10)
    9c3c:	da802317 	ldw	r10,140(sp)
    9c40:	5007d7fa 	srai	r3,r10,31
    9c44:	da802217 	ldw	r10,136(sp)
    9c48:	10c00115 	stw	r3,4(r2)
    9c4c:	52800104 	addi	r10,r10,4
    9c50:	da802215 	stw	r10,136(sp)
    9c54:	da802317 	ldw	r10,140(sp)
    9c58:	12800015 	stw	r10,0(r2)
    9c5c:	003e8c06 	br	9690 <__alt_data_end+0xff009690>
    9c60:	21003fcc 	andi	r4,r4,255
    9c64:	2003511e 	bne	r4,zero,a9ac <___vfiprintf_internal_r+0x13f0>
    9c68:	a080080c 	andi	r2,r20,32
    9c6c:	1000a126 	beq	r2,zero,9ef4 <___vfiprintf_internal_r+0x938>
    9c70:	da802217 	ldw	r10,136(sp)
    9c74:	d8001d85 	stb	zero,118(sp)
    9c78:	50800204 	addi	r2,r10,8
    9c7c:	54800017 	ldw	r18,0(r10)
    9c80:	54c00117 	ldw	r19,4(r10)
    9c84:	4802b416 	blt	r9,zero,a758 <___vfiprintf_internal_r+0x119c>
    9c88:	013fdfc4 	movi	r4,-129
    9c8c:	94c6b03a 	or	r3,r18,r19
    9c90:	d8802215 	stw	r2,136(sp)
    9c94:	a128703a 	and	r20,r20,r4
    9c98:	1800a226 	beq	r3,zero,9f24 <___vfiprintf_internal_r+0x968>
    9c9c:	0039883a 	mov	fp,zero
    9ca0:	dd401a04 	addi	r21,sp,104
    9ca4:	9006d0fa 	srli	r3,r18,3
    9ca8:	9808977a 	slli	r4,r19,29
    9cac:	9826d0fa 	srli	r19,r19,3
    9cb0:	948001cc 	andi	r18,r18,7
    9cb4:	90800c04 	addi	r2,r18,48
    9cb8:	ad7fffc4 	addi	r21,r21,-1
    9cbc:	20e4b03a 	or	r18,r4,r3
    9cc0:	a8800005 	stb	r2,0(r21)
    9cc4:	94c6b03a 	or	r3,r18,r19
    9cc8:	183ff61e 	bne	r3,zero,9ca4 <__alt_data_end+0xff009ca4>
    9ccc:	a0c0004c 	andi	r3,r20,1
    9cd0:	18005926 	beq	r3,zero,9e38 <___vfiprintf_internal_r+0x87c>
    9cd4:	10803fcc 	andi	r2,r2,255
    9cd8:	1080201c 	xori	r2,r2,128
    9cdc:	10bfe004 	addi	r2,r2,-128
    9ce0:	00c00c04 	movi	r3,48
    9ce4:	10c05426 	beq	r2,r3,9e38 <___vfiprintf_internal_r+0x87c>
    9ce8:	da801e17 	ldw	r10,120(sp)
    9cec:	a8bfffc4 	addi	r2,r21,-1
    9cf0:	a8ffffc5 	stb	r3,-1(r21)
    9cf4:	50a7c83a 	sub	r19,r10,r2
    9cf8:	102b883a 	mov	r21,r2
    9cfc:	003f2f06 	br	99bc <__alt_data_end+0xff0099bc>
    9d00:	21003fcc 	andi	r4,r4,255
    9d04:	2003421e 	bne	r4,zero,aa10 <___vfiprintf_internal_r+0x1454>
    9d08:	00800074 	movhi	r2,1
    9d0c:	10851304 	addi	r2,r2,5196
    9d10:	d8802615 	stw	r2,152(sp)
    9d14:	a080080c 	andi	r2,r20,32
    9d18:	1000aa26 	beq	r2,zero,9fc4 <___vfiprintf_internal_r+0xa08>
    9d1c:	da802217 	ldw	r10,136(sp)
    9d20:	54800017 	ldw	r18,0(r10)
    9d24:	54c00117 	ldw	r19,4(r10)
    9d28:	52800204 	addi	r10,r10,8
    9d2c:	da802215 	stw	r10,136(sp)
    9d30:	a080004c 	andi	r2,r20,1
    9d34:	1001d226 	beq	r2,zero,a480 <___vfiprintf_internal_r+0xec4>
    9d38:	94c4b03a 	or	r2,r18,r19
    9d3c:	1002351e 	bne	r2,zero,a614 <___vfiprintf_internal_r+0x1058>
    9d40:	d8001d85 	stb	zero,118(sp)
    9d44:	48022216 	blt	r9,zero,a5d0 <___vfiprintf_internal_r+0x1014>
    9d48:	00bfdfc4 	movi	r2,-129
    9d4c:	a0a8703a 	and	r20,r20,r2
    9d50:	003f1506 	br	99a8 <__alt_data_end+0xff0099a8>
    9d54:	da802217 	ldw	r10,136(sp)
    9d58:	04800044 	movi	r18,1
    9d5c:	d8001d85 	stb	zero,118(sp)
    9d60:	50800017 	ldw	r2,0(r10)
    9d64:	52800104 	addi	r10,r10,4
    9d68:	da802215 	stw	r10,136(sp)
    9d6c:	d8801005 	stb	r2,64(sp)
    9d70:	9027883a 	mov	r19,r18
    9d74:	dd401004 	addi	r21,sp,64
    9d78:	0013883a 	mov	r9,zero
    9d7c:	003f1706 	br	99dc <__alt_data_end+0xff0099dc>
    9d80:	21003fcc 	andi	r4,r4,255
    9d84:	2003201e 	bne	r4,zero,aa08 <___vfiprintf_internal_r+0x144c>
    9d88:	a080080c 	andi	r2,r20,32
    9d8c:	10004b26 	beq	r2,zero,9ebc <___vfiprintf_internal_r+0x900>
    9d90:	da802217 	ldw	r10,136(sp)
    9d94:	50800117 	ldw	r2,4(r10)
    9d98:	54800017 	ldw	r18,0(r10)
    9d9c:	52800204 	addi	r10,r10,8
    9da0:	da802215 	stw	r10,136(sp)
    9da4:	1027883a 	mov	r19,r2
    9da8:	10022c16 	blt	r2,zero,a65c <___vfiprintf_internal_r+0x10a0>
    9dac:	df001d83 	ldbu	fp,118(sp)
    9db0:	48007216 	blt	r9,zero,9f7c <___vfiprintf_internal_r+0x9c0>
    9db4:	00ffdfc4 	movi	r3,-129
    9db8:	94c4b03a 	or	r2,r18,r19
    9dbc:	a0e8703a 	and	r20,r20,r3
    9dc0:	1000cc26 	beq	r2,zero,a0f4 <___vfiprintf_internal_r+0xb38>
    9dc4:	98021026 	beq	r19,zero,a608 <___vfiprintf_internal_r+0x104c>
    9dc8:	dc402415 	stw	r17,144(sp)
    9dcc:	dc002515 	stw	r16,148(sp)
    9dd0:	9823883a 	mov	r17,r19
    9dd4:	9021883a 	mov	r16,r18
    9dd8:	dd401a04 	addi	r21,sp,104
    9ddc:	4825883a 	mov	r18,r9
    9de0:	4027883a 	mov	r19,r8
    9de4:	8009883a 	mov	r4,r16
    9de8:	880b883a 	mov	r5,r17
    9dec:	01800284 	movi	r6,10
    9df0:	000f883a 	mov	r7,zero
    9df4:	000b99c0 	call	b99c <__umoddi3>
    9df8:	10800c04 	addi	r2,r2,48
    9dfc:	ad7fffc4 	addi	r21,r21,-1
    9e00:	8009883a 	mov	r4,r16
    9e04:	880b883a 	mov	r5,r17
    9e08:	a8800005 	stb	r2,0(r21)
    9e0c:	01800284 	movi	r6,10
    9e10:	000f883a 	mov	r7,zero
    9e14:	000b4240 	call	b424 <__udivdi3>
    9e18:	1021883a 	mov	r16,r2
    9e1c:	10c4b03a 	or	r2,r2,r3
    9e20:	1823883a 	mov	r17,r3
    9e24:	103fef1e 	bne	r2,zero,9de4 <__alt_data_end+0xff009de4>
    9e28:	dc402417 	ldw	r17,144(sp)
    9e2c:	dc002517 	ldw	r16,148(sp)
    9e30:	9013883a 	mov	r9,r18
    9e34:	9811883a 	mov	r8,r19
    9e38:	da801e17 	ldw	r10,120(sp)
    9e3c:	5567c83a 	sub	r19,r10,r21
    9e40:	003ede06 	br	99bc <__alt_data_end+0xff0099bc>
    9e44:	38803fcc 	andi	r2,r7,255
    9e48:	1080201c 	xori	r2,r2,128
    9e4c:	10bfe004 	addi	r2,r2,-128
    9e50:	1002371e 	bne	r2,zero,a730 <___vfiprintf_internal_r+0x1174>
    9e54:	01000044 	movi	r4,1
    9e58:	01c00804 	movi	r7,32
    9e5c:	80c00007 	ldb	r3,0(r16)
    9e60:	003e3506 	br	9738 <__alt_data_end+0xff009738>
    9e64:	a5000054 	ori	r20,r20,1
    9e68:	80c00007 	ldb	r3,0(r16)
    9e6c:	003e3206 	br	9738 <__alt_data_end+0xff009738>
    9e70:	a5002014 	ori	r20,r20,128
    9e74:	80c00007 	ldb	r3,0(r16)
    9e78:	003e2f06 	br	9738 <__alt_data_end+0xff009738>
    9e7c:	8015883a 	mov	r10,r16
    9e80:	0023883a 	mov	r17,zero
    9e84:	18bff404 	addi	r2,r3,-48
    9e88:	50c00007 	ldb	r3,0(r10)
    9e8c:	8c4002a4 	muli	r17,r17,10
    9e90:	84000044 	addi	r16,r16,1
    9e94:	8015883a 	mov	r10,r16
    9e98:	1463883a 	add	r17,r2,r17
    9e9c:	18bff404 	addi	r2,r3,-48
    9ea0:	30bff92e 	bgeu	r6,r2,9e88 <__alt_data_end+0xff009e88>
    9ea4:	003e2506 	br	973c <__alt_data_end+0xff00973c>
    9ea8:	21003fcc 	andi	r4,r4,255
    9eac:	2002d41e 	bne	r4,zero,aa00 <___vfiprintf_internal_r+0x1444>
    9eb0:	a5000414 	ori	r20,r20,16
    9eb4:	a080080c 	andi	r2,r20,32
    9eb8:	103fb51e 	bne	r2,zero,9d90 <__alt_data_end+0xff009d90>
    9ebc:	a080040c 	andi	r2,r20,16
    9ec0:	1001f826 	beq	r2,zero,a6a4 <___vfiprintf_internal_r+0x10e8>
    9ec4:	da802217 	ldw	r10,136(sp)
    9ec8:	54800017 	ldw	r18,0(r10)
    9ecc:	52800104 	addi	r10,r10,4
    9ed0:	da802215 	stw	r10,136(sp)
    9ed4:	9027d7fa 	srai	r19,r18,31
    9ed8:	9805883a 	mov	r2,r19
    9edc:	003fb206 	br	9da8 <__alt_data_end+0xff009da8>
    9ee0:	21003fcc 	andi	r4,r4,255
    9ee4:	2002c41e 	bne	r4,zero,a9f8 <___vfiprintf_internal_r+0x143c>
    9ee8:	a5000414 	ori	r20,r20,16
    9eec:	a080080c 	andi	r2,r20,32
    9ef0:	103f5f1e 	bne	r2,zero,9c70 <__alt_data_end+0xff009c70>
    9ef4:	a080040c 	andi	r2,r20,16
    9ef8:	10020f26 	beq	r2,zero,a738 <___vfiprintf_internal_r+0x117c>
    9efc:	da802217 	ldw	r10,136(sp)
    9f00:	d8001d85 	stb	zero,118(sp)
    9f04:	0027883a 	mov	r19,zero
    9f08:	50800104 	addi	r2,r10,4
    9f0c:	54800017 	ldw	r18,0(r10)
    9f10:	48021116 	blt	r9,zero,a758 <___vfiprintf_internal_r+0x119c>
    9f14:	00ffdfc4 	movi	r3,-129
    9f18:	d8802215 	stw	r2,136(sp)
    9f1c:	a0e8703a 	and	r20,r20,r3
    9f20:	903f5e1e 	bne	r18,zero,9c9c <__alt_data_end+0xff009c9c>
    9f24:	0039883a 	mov	fp,zero
    9f28:	4802a626 	beq	r9,zero,a9c4 <___vfiprintf_internal_r+0x1408>
    9f2c:	0025883a 	mov	r18,zero
    9f30:	0027883a 	mov	r19,zero
    9f34:	003f5a06 	br	9ca0 <__alt_data_end+0xff009ca0>
    9f38:	21003fcc 	andi	r4,r4,255
    9f3c:	20029f1e 	bne	r4,zero,a9bc <___vfiprintf_internal_r+0x1400>
    9f40:	a5000414 	ori	r20,r20,16
    9f44:	a080080c 	andi	r2,r20,32
    9f48:	10005e1e 	bne	r2,zero,a0c4 <___vfiprintf_internal_r+0xb08>
    9f4c:	a080040c 	andi	r2,r20,16
    9f50:	1001a21e 	bne	r2,zero,a5dc <___vfiprintf_internal_r+0x1020>
    9f54:	a080100c 	andi	r2,r20,64
    9f58:	d8001d85 	stb	zero,118(sp)
    9f5c:	da802217 	ldw	r10,136(sp)
    9f60:	1002231e 	bne	r2,zero,a7f0 <___vfiprintf_internal_r+0x1234>
    9f64:	50800104 	addi	r2,r10,4
    9f68:	54800017 	ldw	r18,0(r10)
    9f6c:	0027883a 	mov	r19,zero
    9f70:	4801a00e 	bge	r9,zero,a5f4 <___vfiprintf_internal_r+0x1038>
    9f74:	d8802215 	stw	r2,136(sp)
    9f78:	0039883a 	mov	fp,zero
    9f7c:	94c4b03a 	or	r2,r18,r19
    9f80:	103f901e 	bne	r2,zero,9dc4 <__alt_data_end+0xff009dc4>
    9f84:	00800044 	movi	r2,1
    9f88:	10803fcc 	andi	r2,r2,255
    9f8c:	00c00044 	movi	r3,1
    9f90:	10c05926 	beq	r2,r3,a0f8 <___vfiprintf_internal_r+0xb3c>
    9f94:	00c00084 	movi	r3,2
    9f98:	10ffe41e 	bne	r2,r3,9f2c <__alt_data_end+0xff009f2c>
    9f9c:	0025883a 	mov	r18,zero
    9fa0:	0027883a 	mov	r19,zero
    9fa4:	00013d06 	br	a49c <___vfiprintf_internal_r+0xee0>
    9fa8:	21003fcc 	andi	r4,r4,255
    9fac:	2002811e 	bne	r4,zero,a9b4 <___vfiprintf_internal_r+0x13f8>
    9fb0:	00800074 	movhi	r2,1
    9fb4:	10850e04 	addi	r2,r2,5176
    9fb8:	d8802615 	stw	r2,152(sp)
    9fbc:	a080080c 	andi	r2,r20,32
    9fc0:	103f561e 	bne	r2,zero,9d1c <__alt_data_end+0xff009d1c>
    9fc4:	a080040c 	andi	r2,r20,16
    9fc8:	1001d126 	beq	r2,zero,a710 <___vfiprintf_internal_r+0x1154>
    9fcc:	da802217 	ldw	r10,136(sp)
    9fd0:	0027883a 	mov	r19,zero
    9fd4:	54800017 	ldw	r18,0(r10)
    9fd8:	52800104 	addi	r10,r10,4
    9fdc:	da802215 	stw	r10,136(sp)
    9fe0:	003f5306 	br	9d30 <__alt_data_end+0xff009d30>
    9fe4:	da802217 	ldw	r10,136(sp)
    9fe8:	d8001d85 	stb	zero,118(sp)
    9fec:	55400017 	ldw	r21,0(r10)
    9ff0:	50c00104 	addi	r3,r10,4
    9ff4:	a8024226 	beq	r21,zero,a900 <___vfiprintf_internal_r+0x1344>
    9ff8:	48021816 	blt	r9,zero,a85c <___vfiprintf_internal_r+0x12a0>
    9ffc:	480d883a 	mov	r6,r9
    a000:	000b883a 	mov	r5,zero
    a004:	a809883a 	mov	r4,r21
    a008:	d8c02a15 	stw	r3,168(sp)
    a00c:	da002b15 	stw	r8,172(sp)
    a010:	da402c15 	stw	r9,176(sp)
    a014:	000780c0 	call	780c <memchr>
    a018:	d8c02a17 	ldw	r3,168(sp)
    a01c:	da002b17 	ldw	r8,172(sp)
    a020:	da402c17 	ldw	r9,176(sp)
    a024:	10024826 	beq	r2,zero,a948 <___vfiprintf_internal_r+0x138c>
    a028:	1567c83a 	sub	r19,r2,r21
    a02c:	df001d83 	ldbu	fp,118(sp)
    a030:	d8c02215 	stw	r3,136(sp)
    a034:	0013883a 	mov	r9,zero
    a038:	003e6006 	br	99bc <__alt_data_end+0xff0099bc>
    a03c:	21003fcc 	andi	r4,r4,255
    a040:	203fc026 	beq	r4,zero,9f44 <__alt_data_end+0xff009f44>
    a044:	d9c01d85 	stb	r7,118(sp)
    a048:	003fbe06 	br	9f44 <__alt_data_end+0xff009f44>
    a04c:	da802217 	ldw	r10,136(sp)
    a050:	54400017 	ldw	r17,0(r10)
    a054:	50800104 	addi	r2,r10,4
    a058:	883e3b16 	blt	r17,zero,9948 <__alt_data_end+0xff009948>
    a05c:	d8802215 	stw	r2,136(sp)
    a060:	80c00007 	ldb	r3,0(r16)
    a064:	003db406 	br	9738 <__alt_data_end+0xff009738>
    a068:	01000044 	movi	r4,1
    a06c:	01c00ac4 	movi	r7,43
    a070:	80c00007 	ldb	r3,0(r16)
    a074:	003db006 	br	9738 <__alt_data_end+0xff009738>
    a078:	80c00007 	ldb	r3,0(r16)
    a07c:	82800044 	addi	r10,r16,1
    a080:	1b423c26 	beq	r3,r13,a974 <___vfiprintf_internal_r+0x13b8>
    a084:	18bff404 	addi	r2,r3,-48
    a088:	0013883a 	mov	r9,zero
    a08c:	30822b36 	bltu	r6,r2,a93c <___vfiprintf_internal_r+0x1380>
    a090:	50c00007 	ldb	r3,0(r10)
    a094:	4a4002a4 	muli	r9,r9,10
    a098:	54000044 	addi	r16,r10,1
    a09c:	8015883a 	mov	r10,r16
    a0a0:	4893883a 	add	r9,r9,r2
    a0a4:	18bff404 	addi	r2,r3,-48
    a0a8:	30bff92e 	bgeu	r6,r2,a090 <__alt_data_end+0xff00a090>
    a0ac:	483da30e 	bge	r9,zero,973c <__alt_data_end+0xff00973c>
    a0b0:	027fffc4 	movi	r9,-1
    a0b4:	003da106 	br	973c <__alt_data_end+0xff00973c>
    a0b8:	a5001014 	ori	r20,r20,64
    a0bc:	80c00007 	ldb	r3,0(r16)
    a0c0:	003d9d06 	br	9738 <__alt_data_end+0xff009738>
    a0c4:	da802217 	ldw	r10,136(sp)
    a0c8:	d8001d85 	stb	zero,118(sp)
    a0cc:	50c00204 	addi	r3,r10,8
    a0d0:	54800017 	ldw	r18,0(r10)
    a0d4:	54c00117 	ldw	r19,4(r10)
    a0d8:	4801ca16 	blt	r9,zero,a804 <___vfiprintf_internal_r+0x1248>
    a0dc:	013fdfc4 	movi	r4,-129
    a0e0:	94c4b03a 	or	r2,r18,r19
    a0e4:	d8c02215 	stw	r3,136(sp)
    a0e8:	a128703a 	and	r20,r20,r4
    a0ec:	0039883a 	mov	fp,zero
    a0f0:	103f341e 	bne	r2,zero,9dc4 <__alt_data_end+0xff009dc4>
    a0f4:	483e2e26 	beq	r9,zero,99b0 <__alt_data_end+0xff0099b0>
    a0f8:	0025883a 	mov	r18,zero
    a0fc:	94800c04 	addi	r18,r18,48
    a100:	dc8019c5 	stb	r18,103(sp)
    a104:	dcc02717 	ldw	r19,156(sp)
    a108:	dd4019c4 	addi	r21,sp,103
    a10c:	003e2b06 	br	99bc <__alt_data_end+0xff0099bc>
    a110:	21003fcc 	andi	r4,r4,255
    a114:	2002361e 	bne	r4,zero,a9f0 <___vfiprintf_internal_r+0x1434>
    a118:	1801c126 	beq	r3,zero,a820 <___vfiprintf_internal_r+0x1264>
    a11c:	04800044 	movi	r18,1
    a120:	d8c01005 	stb	r3,64(sp)
    a124:	d8001d85 	stb	zero,118(sp)
    a128:	9027883a 	mov	r19,r18
    a12c:	dd401004 	addi	r21,sp,64
    a130:	003f1106 	br	9d78 <__alt_data_end+0xff009d78>
    a134:	d9402117 	ldw	r5,132(sp)
    a138:	d9002017 	ldw	r4,128(sp)
    a13c:	d9801a04 	addi	r6,sp,104
    a140:	d9c02b15 	stw	r7,172(sp)
    a144:	dbc02a15 	stw	r15,168(sp)
    a148:	00094a80 	call	94a8 <__sprint_r.part.0>
    a14c:	d9c02b17 	ldw	r7,172(sp)
    a150:	dbc02a17 	ldw	r15,168(sp)
    a154:	10006d1e 	bne	r2,zero,a30c <___vfiprintf_internal_r+0xd50>
    a158:	d9801b17 	ldw	r6,108(sp)
    a15c:	d8801c17 	ldw	r2,112(sp)
    a160:	d811883a 	mov	r8,sp
    a164:	31400044 	addi	r5,r6,1
    a168:	003e3306 	br	9a38 <__alt_data_end+0xff009a38>
    a16c:	d9401b17 	ldw	r5,108(sp)
    a170:	d8801c17 	ldw	r2,112(sp)
    a174:	29000044 	addi	r4,r5,1
    a178:	d8c01d87 	ldb	r3,118(sp)
    a17c:	183e4d26 	beq	r3,zero,9ab4 <__alt_data_end+0xff009ab4>
    a180:	00c00044 	movi	r3,1
    a184:	d9401d84 	addi	r5,sp,118
    a188:	10c5883a 	add	r2,r2,r3
    a18c:	41400015 	stw	r5,0(r8)
    a190:	40c00115 	stw	r3,4(r8)
    a194:	d8801c15 	stw	r2,112(sp)
    a198:	d9001b15 	stw	r4,108(sp)
    a19c:	014001c4 	movi	r5,7
    a1a0:	2900a90e 	bge	r5,r4,a448 <___vfiprintf_internal_r+0xe8c>
    a1a4:	1000da1e 	bne	r2,zero,a510 <___vfiprintf_internal_r+0xf54>
    a1a8:	7000ab1e 	bne	r14,zero,a458 <___vfiprintf_internal_r+0xe9c>
    a1ac:	000b883a 	mov	r5,zero
    a1b0:	1809883a 	mov	r4,r3
    a1b4:	d811883a 	mov	r8,sp
    a1b8:	00c02004 	movi	r3,128
    a1bc:	e0fe4d26 	beq	fp,r3,9af4 <__alt_data_end+0xff009af4>
    a1c0:	4cf9c83a 	sub	fp,r9,r19
    a1c4:	073e7b0e 	bge	zero,fp,9bb4 <__alt_data_end+0xff009bb4>
    a1c8:	01c00404 	movi	r7,16
    a1cc:	3f01900e 	bge	r7,fp,a810 <___vfiprintf_internal_r+0x1254>
    a1d0:	00c00074 	movhi	r3,1
    a1d4:	18c57404 	addi	r3,r3,5584
    a1d8:	d8c02415 	stw	r3,144(sp)
    a1dc:	034001c4 	movi	r13,7
    a1e0:	00000506 	br	a1f8 <___vfiprintf_internal_r+0xc3c>
    a1e4:	29000084 	addi	r4,r5,2
    a1e8:	42000204 	addi	r8,r8,8
    a1ec:	180b883a 	mov	r5,r3
    a1f0:	e73ffc04 	addi	fp,fp,-16
    a1f4:	3f000d0e 	bge	r7,fp,a22c <___vfiprintf_internal_r+0xc70>
    a1f8:	10800404 	addi	r2,r2,16
    a1fc:	28c00044 	addi	r3,r5,1
    a200:	45c00015 	stw	r23,0(r8)
    a204:	41c00115 	stw	r7,4(r8)
    a208:	d8801c15 	stw	r2,112(sp)
    a20c:	d8c01b15 	stw	r3,108(sp)
    a210:	68fff40e 	bge	r13,r3,a1e4 <__alt_data_end+0xff00a1e4>
    a214:	1000101e 	bne	r2,zero,a258 <___vfiprintf_internal_r+0xc9c>
    a218:	e73ffc04 	addi	fp,fp,-16
    a21c:	01000044 	movi	r4,1
    a220:	000b883a 	mov	r5,zero
    a224:	d811883a 	mov	r8,sp
    a228:	3f3ff316 	blt	r7,fp,a1f8 <__alt_data_end+0xff00a1f8>
    a22c:	da802417 	ldw	r10,144(sp)
    a230:	1705883a 	add	r2,r2,fp
    a234:	47000115 	stw	fp,4(r8)
    a238:	42800015 	stw	r10,0(r8)
    a23c:	d8801c15 	stw	r2,112(sp)
    a240:	d9001b15 	stw	r4,108(sp)
    a244:	00c001c4 	movi	r3,7
    a248:	19003616 	blt	r3,r4,a324 <___vfiprintf_internal_r+0xd68>
    a24c:	42000204 	addi	r8,r8,8
    a250:	21000044 	addi	r4,r4,1
    a254:	003e5706 	br	9bb4 <__alt_data_end+0xff009bb4>
    a258:	d9402117 	ldw	r5,132(sp)
    a25c:	d9002017 	ldw	r4,128(sp)
    a260:	d9801a04 	addi	r6,sp,104
    a264:	d9c02b15 	stw	r7,172(sp)
    a268:	db402a15 	stw	r13,168(sp)
    a26c:	00094a80 	call	94a8 <__sprint_r.part.0>
    a270:	d9c02b17 	ldw	r7,172(sp)
    a274:	db402a17 	ldw	r13,168(sp)
    a278:	1000241e 	bne	r2,zero,a30c <___vfiprintf_internal_r+0xd50>
    a27c:	d9401b17 	ldw	r5,108(sp)
    a280:	d8801c17 	ldw	r2,112(sp)
    a284:	d811883a 	mov	r8,sp
    a288:	29000044 	addi	r4,r5,1
    a28c:	003fd806 	br	a1f0 <__alt_data_end+0xff00a1f0>
    a290:	d9401b17 	ldw	r5,108(sp)
    a294:	00c00074 	movhi	r3,1
    a298:	18c57804 	addi	r3,r3,5600
    a29c:	d8c02415 	stw	r3,144(sp)
    a2a0:	29400044 	addi	r5,r5,1
    a2a4:	d8c02417 	ldw	r3,144(sp)
    a2a8:	14c5883a 	add	r2,r2,r19
    a2ac:	44c00115 	stw	r19,4(r8)
    a2b0:	40c00015 	stw	r3,0(r8)
    a2b4:	d8801c15 	stw	r2,112(sp)
    a2b8:	d9401b15 	stw	r5,108(sp)
    a2bc:	00c001c4 	movi	r3,7
    a2c0:	1940070e 	bge	r3,r5,a2e0 <___vfiprintf_internal_r+0xd24>
    a2c4:	103e4826 	beq	r2,zero,9be8 <__alt_data_end+0xff009be8>
    a2c8:	d9402117 	ldw	r5,132(sp)
    a2cc:	d9002017 	ldw	r4,128(sp)
    a2d0:	d9801a04 	addi	r6,sp,104
    a2d4:	00094a80 	call	94a8 <__sprint_r.part.0>
    a2d8:	10000c1e 	bne	r2,zero,a30c <___vfiprintf_internal_r+0xd50>
    a2dc:	d8801c17 	ldw	r2,112(sp)
    a2e0:	8c80010e 	bge	r17,r18,a2e8 <___vfiprintf_internal_r+0xd2c>
    a2e4:	9023883a 	mov	r17,r18
    a2e8:	da802317 	ldw	r10,140(sp)
    a2ec:	5455883a 	add	r10,r10,r17
    a2f0:	da802315 	stw	r10,140(sp)
    a2f4:	103e4126 	beq	r2,zero,9bfc <__alt_data_end+0xff009bfc>
    a2f8:	d9402117 	ldw	r5,132(sp)
    a2fc:	d9002017 	ldw	r4,128(sp)
    a300:	d9801a04 	addi	r6,sp,104
    a304:	00094a80 	call	94a8 <__sprint_r.part.0>
    a308:	103e3c26 	beq	r2,zero,9bfc <__alt_data_end+0xff009bfc>
    a30c:	dd002117 	ldw	r20,132(sp)
    a310:	a080030b 	ldhu	r2,12(r20)
    a314:	1080100c 	andi	r2,r2,64
    a318:	1001231e 	bne	r2,zero,a7a8 <___vfiprintf_internal_r+0x11ec>
    a31c:	d8802317 	ldw	r2,140(sp)
    a320:	003d7b06 	br	9910 <__alt_data_end+0xff009910>
    a324:	1000991e 	bne	r2,zero,a58c <___vfiprintf_internal_r+0xfd0>
    a328:	00c00044 	movi	r3,1
    a32c:	9805883a 	mov	r2,r19
    a330:	dd400015 	stw	r21,0(sp)
    a334:	dcc00115 	stw	r19,4(sp)
    a338:	dcc01c15 	stw	r19,112(sp)
    a33c:	d8c01b15 	stw	r3,108(sp)
    a340:	d811883a 	mov	r8,sp
    a344:	42000204 	addi	r8,r8,8
    a348:	a2c0010c 	andi	r11,r20,4
    a34c:	583fe426 	beq	r11,zero,a2e0 <__alt_data_end+0xff00a2e0>
    a350:	8ca7c83a 	sub	r19,r17,r18
    a354:	04ffe20e 	bge	zero,r19,a2e0 <__alt_data_end+0xff00a2e0>
    a358:	01c00404 	movi	r7,16
    a35c:	3cffcc0e 	bge	r7,r19,a290 <__alt_data_end+0xff00a290>
    a360:	02800074 	movhi	r10,1
    a364:	52857804 	addi	r10,r10,5600
    a368:	d9001b17 	ldw	r4,108(sp)
    a36c:	da802415 	stw	r10,144(sp)
    a370:	382b883a 	mov	r21,r7
    a374:	050001c4 	movi	r20,7
    a378:	df002017 	ldw	fp,128(sp)
    a37c:	00000506 	br	a394 <___vfiprintf_internal_r+0xdd8>
    a380:	21400084 	addi	r5,r4,2
    a384:	42000204 	addi	r8,r8,8
    a388:	1809883a 	mov	r4,r3
    a38c:	9cfffc04 	addi	r19,r19,-16
    a390:	acffc40e 	bge	r21,r19,a2a4 <__alt_data_end+0xff00a2a4>
    a394:	10800404 	addi	r2,r2,16
    a398:	20c00044 	addi	r3,r4,1
    a39c:	45800015 	stw	r22,0(r8)
    a3a0:	45400115 	stw	r21,4(r8)
    a3a4:	d8801c15 	stw	r2,112(sp)
    a3a8:	d8c01b15 	stw	r3,108(sp)
    a3ac:	a0fff40e 	bge	r20,r3,a380 <__alt_data_end+0xff00a380>
    a3b0:	1000041e 	bne	r2,zero,a3c4 <___vfiprintf_internal_r+0xe08>
    a3b4:	01400044 	movi	r5,1
    a3b8:	0009883a 	mov	r4,zero
    a3bc:	d811883a 	mov	r8,sp
    a3c0:	003ff206 	br	a38c <__alt_data_end+0xff00a38c>
    a3c4:	d9402117 	ldw	r5,132(sp)
    a3c8:	d9801a04 	addi	r6,sp,104
    a3cc:	e009883a 	mov	r4,fp
    a3d0:	00094a80 	call	94a8 <__sprint_r.part.0>
    a3d4:	103fcd1e 	bne	r2,zero,a30c <__alt_data_end+0xff00a30c>
    a3d8:	d9001b17 	ldw	r4,108(sp)
    a3dc:	d8801c17 	ldw	r2,112(sp)
    a3e0:	d811883a 	mov	r8,sp
    a3e4:	21400044 	addi	r5,r4,1
    a3e8:	003fe806 	br	a38c <__alt_data_end+0xff00a38c>
    a3ec:	d9402117 	ldw	r5,132(sp)
    a3f0:	d9002017 	ldw	r4,128(sp)
    a3f4:	d9801a04 	addi	r6,sp,104
    a3f8:	d9c02b15 	stw	r7,172(sp)
    a3fc:	db402a15 	stw	r13,168(sp)
    a400:	00094a80 	call	94a8 <__sprint_r.part.0>
    a404:	d9c02b17 	ldw	r7,172(sp)
    a408:	db402a17 	ldw	r13,168(sp)
    a40c:	103fbf1e 	bne	r2,zero,a30c <__alt_data_end+0xff00a30c>
    a410:	d9401b17 	ldw	r5,108(sp)
    a414:	d8801c17 	ldw	r2,112(sp)
    a418:	d811883a 	mov	r8,sp
    a41c:	29800044 	addi	r6,r5,1
    a420:	003dc406 	br	9b34 <__alt_data_end+0xff009b34>
    a424:	1000d21e 	bne	r2,zero,a770 <___vfiprintf_internal_r+0x11b4>
    a428:	d8c01d87 	ldb	r3,118(sp)
    a42c:	18009526 	beq	r3,zero,a684 <___vfiprintf_internal_r+0x10c8>
    a430:	00800044 	movi	r2,1
    a434:	d8c01d84 	addi	r3,sp,118
    a438:	1009883a 	mov	r4,r2
    a43c:	d8c00015 	stw	r3,0(sp)
    a440:	d8800115 	stw	r2,4(sp)
    a444:	d811883a 	mov	r8,sp
    a448:	200b883a 	mov	r5,r4
    a44c:	42000204 	addi	r8,r8,8
    a450:	21000044 	addi	r4,r4,1
    a454:	003d9706 	br	9ab4 <__alt_data_end+0xff009ab4>
    a458:	d9001d04 	addi	r4,sp,116
    a45c:	00800084 	movi	r2,2
    a460:	d9000015 	stw	r4,0(sp)
    a464:	d8800115 	stw	r2,4(sp)
    a468:	1809883a 	mov	r4,r3
    a46c:	d811883a 	mov	r8,sp
    a470:	200b883a 	mov	r5,r4
    a474:	42000204 	addi	r8,r8,8
    a478:	21000044 	addi	r4,r4,1
    a47c:	003f4e06 	br	a1b8 <__alt_data_end+0xff00a1b8>
    a480:	d8001d85 	stb	zero,118(sp)
    a484:	48005016 	blt	r9,zero,a5c8 <___vfiprintf_internal_r+0x100c>
    a488:	00ffdfc4 	movi	r3,-129
    a48c:	94c4b03a 	or	r2,r18,r19
    a490:	a0e8703a 	and	r20,r20,r3
    a494:	103d4426 	beq	r2,zero,99a8 <__alt_data_end+0xff0099a8>
    a498:	0039883a 	mov	fp,zero
    a49c:	d9002617 	ldw	r4,152(sp)
    a4a0:	dd401a04 	addi	r21,sp,104
    a4a4:	908003cc 	andi	r2,r18,15
    a4a8:	9806973a 	slli	r3,r19,28
    a4ac:	2085883a 	add	r2,r4,r2
    a4b0:	9024d13a 	srli	r18,r18,4
    a4b4:	10800003 	ldbu	r2,0(r2)
    a4b8:	9826d13a 	srli	r19,r19,4
    a4bc:	ad7fffc4 	addi	r21,r21,-1
    a4c0:	1ca4b03a 	or	r18,r3,r18
    a4c4:	a8800005 	stb	r2,0(r21)
    a4c8:	94c4b03a 	or	r2,r18,r19
    a4cc:	103ff51e 	bne	r2,zero,a4a4 <__alt_data_end+0xff00a4a4>
    a4d0:	003e5906 	br	9e38 <__alt_data_end+0xff009e38>
    a4d4:	d9402117 	ldw	r5,132(sp)
    a4d8:	d9002017 	ldw	r4,128(sp)
    a4dc:	d9801a04 	addi	r6,sp,104
    a4e0:	00094a80 	call	94a8 <__sprint_r.part.0>
    a4e4:	103f891e 	bne	r2,zero,a30c <__alt_data_end+0xff00a30c>
    a4e8:	d8801c17 	ldw	r2,112(sp)
    a4ec:	d811883a 	mov	r8,sp
    a4f0:	003f9506 	br	a348 <__alt_data_end+0xff00a348>
    a4f4:	d9402117 	ldw	r5,132(sp)
    a4f8:	d9002017 	ldw	r4,128(sp)
    a4fc:	d9801a04 	addi	r6,sp,104
    a500:	00094a80 	call	94a8 <__sprint_r.part.0>
    a504:	103f811e 	bne	r2,zero,a30c <__alt_data_end+0xff00a30c>
    a508:	d811883a 	mov	r8,sp
    a50c:	003ced06 	br	98c4 <__alt_data_end+0xff0098c4>
    a510:	d9402117 	ldw	r5,132(sp)
    a514:	d9002017 	ldw	r4,128(sp)
    a518:	d9801a04 	addi	r6,sp,104
    a51c:	da402c15 	stw	r9,176(sp)
    a520:	db802a15 	stw	r14,168(sp)
    a524:	00094a80 	call	94a8 <__sprint_r.part.0>
    a528:	da402c17 	ldw	r9,176(sp)
    a52c:	db802a17 	ldw	r14,168(sp)
    a530:	103f761e 	bne	r2,zero,a30c <__alt_data_end+0xff00a30c>
    a534:	d9401b17 	ldw	r5,108(sp)
    a538:	d8801c17 	ldw	r2,112(sp)
    a53c:	d811883a 	mov	r8,sp
    a540:	29000044 	addi	r4,r5,1
    a544:	003d5b06 	br	9ab4 <__alt_data_end+0xff009ab4>
    a548:	d9402117 	ldw	r5,132(sp)
    a54c:	d9002017 	ldw	r4,128(sp)
    a550:	d9801a04 	addi	r6,sp,104
    a554:	da402c15 	stw	r9,176(sp)
    a558:	00094a80 	call	94a8 <__sprint_r.part.0>
    a55c:	da402c17 	ldw	r9,176(sp)
    a560:	103f6a1e 	bne	r2,zero,a30c <__alt_data_end+0xff00a30c>
    a564:	d9401b17 	ldw	r5,108(sp)
    a568:	d8801c17 	ldw	r2,112(sp)
    a56c:	d811883a 	mov	r8,sp
    a570:	29000044 	addi	r4,r5,1
    a574:	003f1006 	br	a1b8 <__alt_data_end+0xff00a1b8>
    a578:	1000c31e 	bne	r2,zero,a888 <___vfiprintf_internal_r+0x12cc>
    a57c:	01000044 	movi	r4,1
    a580:	000b883a 	mov	r5,zero
    a584:	d811883a 	mov	r8,sp
    a588:	003f0d06 	br	a1c0 <__alt_data_end+0xff00a1c0>
    a58c:	d9402117 	ldw	r5,132(sp)
    a590:	d9002017 	ldw	r4,128(sp)
    a594:	d9801a04 	addi	r6,sp,104
    a598:	00094a80 	call	94a8 <__sprint_r.part.0>
    a59c:	103f5b1e 	bne	r2,zero,a30c <__alt_data_end+0xff00a30c>
    a5a0:	d9001b17 	ldw	r4,108(sp)
    a5a4:	d8801c17 	ldw	r2,112(sp)
    a5a8:	d811883a 	mov	r8,sp
    a5ac:	21000044 	addi	r4,r4,1
    a5b0:	003d8006 	br	9bb4 <__alt_data_end+0xff009bb4>
    a5b4:	01000074 	movhi	r4,1
    a5b8:	21051304 	addi	r4,r4,5196
    a5bc:	d9002615 	stw	r4,152(sp)
    a5c0:	d8c02215 	stw	r3,136(sp)
    a5c4:	1029883a 	mov	r20,r2
    a5c8:	94c4b03a 	or	r2,r18,r19
    a5cc:	103fb21e 	bne	r2,zero,a498 <__alt_data_end+0xff00a498>
    a5d0:	0039883a 	mov	fp,zero
    a5d4:	00800084 	movi	r2,2
    a5d8:	003e6b06 	br	9f88 <__alt_data_end+0xff009f88>
    a5dc:	da802217 	ldw	r10,136(sp)
    a5e0:	d8001d85 	stb	zero,118(sp)
    a5e4:	0027883a 	mov	r19,zero
    a5e8:	50800104 	addi	r2,r10,4
    a5ec:	54800017 	ldw	r18,0(r10)
    a5f0:	483e6016 	blt	r9,zero,9f74 <__alt_data_end+0xff009f74>
    a5f4:	00ffdfc4 	movi	r3,-129
    a5f8:	d8802215 	stw	r2,136(sp)
    a5fc:	a0e8703a 	and	r20,r20,r3
    a600:	0039883a 	mov	fp,zero
    a604:	903ebb26 	beq	r18,zero,a0f4 <__alt_data_end+0xff00a0f4>
    a608:	00800244 	movi	r2,9
    a60c:	14bdee36 	bltu	r2,r18,9dc8 <__alt_data_end+0xff009dc8>
    a610:	003eba06 	br	a0fc <__alt_data_end+0xff00a0fc>
    a614:	00800c04 	movi	r2,48
    a618:	d8c01d45 	stb	r3,117(sp)
    a61c:	d8801d05 	stb	r2,116(sp)
    a620:	d8001d85 	stb	zero,118(sp)
    a624:	a0c00094 	ori	r3,r20,2
    a628:	4800a916 	blt	r9,zero,a8d0 <___vfiprintf_internal_r+0x1314>
    a62c:	00bfdfc4 	movi	r2,-129
    a630:	a096703a 	and	r11,r20,r2
    a634:	5d000094 	ori	r20,r11,2
    a638:	0039883a 	mov	fp,zero
    a63c:	003f9706 	br	a49c <__alt_data_end+0xff00a49c>
    a640:	8025883a 	mov	r18,r16
    a644:	003c2e06 	br	9700 <__alt_data_end+0xff009700>
    a648:	00800074 	movhi	r2,1
    a64c:	10851304 	addi	r2,r2,5196
    a650:	0039883a 	mov	fp,zero
    a654:	d8802615 	stw	r2,152(sp)
    a658:	003f9006 	br	a49c <__alt_data_end+0xff00a49c>
    a65c:	04a5c83a 	sub	r18,zero,r18
    a660:	07000b44 	movi	fp,45
    a664:	9004c03a 	cmpne	r2,r18,zero
    a668:	04e7c83a 	sub	r19,zero,r19
    a66c:	df001d85 	stb	fp,118(sp)
    a670:	98a7c83a 	sub	r19,r19,r2
    a674:	48009f16 	blt	r9,zero,a8f4 <___vfiprintf_internal_r+0x1338>
    a678:	00bfdfc4 	movi	r2,-129
    a67c:	a0a8703a 	and	r20,r20,r2
    a680:	003dd006 	br	9dc4 <__alt_data_end+0xff009dc4>
    a684:	70004c26 	beq	r14,zero,a7b8 <___vfiprintf_internal_r+0x11fc>
    a688:	00800084 	movi	r2,2
    a68c:	d8c01d04 	addi	r3,sp,116
    a690:	d8c00015 	stw	r3,0(sp)
    a694:	d8800115 	stw	r2,4(sp)
    a698:	01000044 	movi	r4,1
    a69c:	d811883a 	mov	r8,sp
    a6a0:	003f7306 	br	a470 <__alt_data_end+0xff00a470>
    a6a4:	a080100c 	andi	r2,r20,64
    a6a8:	da802217 	ldw	r10,136(sp)
    a6ac:	103e0626 	beq	r2,zero,9ec8 <__alt_data_end+0xff009ec8>
    a6b0:	5480000f 	ldh	r18,0(r10)
    a6b4:	52800104 	addi	r10,r10,4
    a6b8:	da802215 	stw	r10,136(sp)
    a6bc:	9027d7fa 	srai	r19,r18,31
    a6c0:	9805883a 	mov	r2,r19
    a6c4:	003db806 	br	9da8 <__alt_data_end+0xff009da8>
    a6c8:	a080040c 	andi	r2,r20,16
    a6cc:	1000091e 	bne	r2,zero,a6f4 <___vfiprintf_internal_r+0x1138>
    a6d0:	a2c0100c 	andi	r11,r20,64
    a6d4:	58000726 	beq	r11,zero,a6f4 <___vfiprintf_internal_r+0x1138>
    a6d8:	da802217 	ldw	r10,136(sp)
    a6dc:	50800017 	ldw	r2,0(r10)
    a6e0:	52800104 	addi	r10,r10,4
    a6e4:	da802215 	stw	r10,136(sp)
    a6e8:	da802317 	ldw	r10,140(sp)
    a6ec:	1280000d 	sth	r10,0(r2)
    a6f0:	003be706 	br	9690 <__alt_data_end+0xff009690>
    a6f4:	da802217 	ldw	r10,136(sp)
    a6f8:	50800017 	ldw	r2,0(r10)
    a6fc:	52800104 	addi	r10,r10,4
    a700:	da802215 	stw	r10,136(sp)
    a704:	da802317 	ldw	r10,140(sp)
    a708:	12800015 	stw	r10,0(r2)
    a70c:	003be006 	br	9690 <__alt_data_end+0xff009690>
    a710:	a080100c 	andi	r2,r20,64
    a714:	da802217 	ldw	r10,136(sp)
    a718:	10003026 	beq	r2,zero,a7dc <___vfiprintf_internal_r+0x1220>
    a71c:	5480000b 	ldhu	r18,0(r10)
    a720:	52800104 	addi	r10,r10,4
    a724:	0027883a 	mov	r19,zero
    a728:	da802215 	stw	r10,136(sp)
    a72c:	003d8006 	br	9d30 <__alt_data_end+0xff009d30>
    a730:	80c00007 	ldb	r3,0(r16)
    a734:	003c0006 	br	9738 <__alt_data_end+0xff009738>
    a738:	a080100c 	andi	r2,r20,64
    a73c:	d8001d85 	stb	zero,118(sp)
    a740:	da802217 	ldw	r10,136(sp)
    a744:	1000201e 	bne	r2,zero,a7c8 <___vfiprintf_internal_r+0x120c>
    a748:	50800104 	addi	r2,r10,4
    a74c:	54800017 	ldw	r18,0(r10)
    a750:	0027883a 	mov	r19,zero
    a754:	483def0e 	bge	r9,zero,9f14 <__alt_data_end+0xff009f14>
    a758:	94c6b03a 	or	r3,r18,r19
    a75c:	d8802215 	stw	r2,136(sp)
    a760:	183d4e1e 	bne	r3,zero,9c9c <__alt_data_end+0xff009c9c>
    a764:	0039883a 	mov	fp,zero
    a768:	0005883a 	mov	r2,zero
    a76c:	003e0606 	br	9f88 <__alt_data_end+0xff009f88>
    a770:	d9402117 	ldw	r5,132(sp)
    a774:	d9002017 	ldw	r4,128(sp)
    a778:	d9801a04 	addi	r6,sp,104
    a77c:	da402c15 	stw	r9,176(sp)
    a780:	db802a15 	stw	r14,168(sp)
    a784:	00094a80 	call	94a8 <__sprint_r.part.0>
    a788:	da402c17 	ldw	r9,176(sp)
    a78c:	db802a17 	ldw	r14,168(sp)
    a790:	103ede1e 	bne	r2,zero,a30c <__alt_data_end+0xff00a30c>
    a794:	d9401b17 	ldw	r5,108(sp)
    a798:	d8801c17 	ldw	r2,112(sp)
    a79c:	d811883a 	mov	r8,sp
    a7a0:	29000044 	addi	r4,r5,1
    a7a4:	003e7406 	br	a178 <__alt_data_end+0xff00a178>
    a7a8:	00bfffc4 	movi	r2,-1
    a7ac:	003c5806 	br	9910 <__alt_data_end+0xff009910>
    a7b0:	d811883a 	mov	r8,sp
    a7b4:	003ee806 	br	a358 <__alt_data_end+0xff00a358>
    a7b8:	000b883a 	mov	r5,zero
    a7bc:	01000044 	movi	r4,1
    a7c0:	d811883a 	mov	r8,sp
    a7c4:	003e7c06 	br	a1b8 <__alt_data_end+0xff00a1b8>
    a7c8:	50800104 	addi	r2,r10,4
    a7cc:	5480000b 	ldhu	r18,0(r10)
    a7d0:	0027883a 	mov	r19,zero
    a7d4:	483dcf0e 	bge	r9,zero,9f14 <__alt_data_end+0xff009f14>
    a7d8:	003fdf06 	br	a758 <__alt_data_end+0xff00a758>
    a7dc:	54800017 	ldw	r18,0(r10)
    a7e0:	52800104 	addi	r10,r10,4
    a7e4:	0027883a 	mov	r19,zero
    a7e8:	da802215 	stw	r10,136(sp)
    a7ec:	003d5006 	br	9d30 <__alt_data_end+0xff009d30>
    a7f0:	50800104 	addi	r2,r10,4
    a7f4:	5480000b 	ldhu	r18,0(r10)
    a7f8:	0027883a 	mov	r19,zero
    a7fc:	483f7d0e 	bge	r9,zero,a5f4 <__alt_data_end+0xff00a5f4>
    a800:	003ddc06 	br	9f74 <__alt_data_end+0xff009f74>
    a804:	d8c02215 	stw	r3,136(sp)
    a808:	0039883a 	mov	fp,zero
    a80c:	003ddb06 	br	9f7c <__alt_data_end+0xff009f7c>
    a810:	02800074 	movhi	r10,1
    a814:	52857404 	addi	r10,r10,5584
    a818:	da802415 	stw	r10,144(sp)
    a81c:	003e8306 	br	a22c <__alt_data_end+0xff00a22c>
    a820:	d8801c17 	ldw	r2,112(sp)
    a824:	dd002117 	ldw	r20,132(sp)
    a828:	103eb926 	beq	r2,zero,a310 <__alt_data_end+0xff00a310>
    a82c:	d9002017 	ldw	r4,128(sp)
    a830:	d9801a04 	addi	r6,sp,104
    a834:	a00b883a 	mov	r5,r20
    a838:	00094a80 	call	94a8 <__sprint_r.part.0>
    a83c:	003eb406 	br	a310 <__alt_data_end+0xff00a310>
    a840:	80c00043 	ldbu	r3,1(r16)
    a844:	a5000814 	ori	r20,r20,32
    a848:	84000044 	addi	r16,r16,1
    a84c:	18c03fcc 	andi	r3,r3,255
    a850:	18c0201c 	xori	r3,r3,128
    a854:	18ffe004 	addi	r3,r3,-128
    a858:	003bb706 	br	9738 <__alt_data_end+0xff009738>
    a85c:	a809883a 	mov	r4,r21
    a860:	d8c02a15 	stw	r3,168(sp)
    a864:	da002b15 	stw	r8,172(sp)
    a868:	00027700 	call	2770 <strlen>
    a86c:	d8c02a17 	ldw	r3,168(sp)
    a870:	1027883a 	mov	r19,r2
    a874:	df001d83 	ldbu	fp,118(sp)
    a878:	d8c02215 	stw	r3,136(sp)
    a87c:	0013883a 	mov	r9,zero
    a880:	da002b17 	ldw	r8,172(sp)
    a884:	003c4d06 	br	99bc <__alt_data_end+0xff0099bc>
    a888:	d9402117 	ldw	r5,132(sp)
    a88c:	d9002017 	ldw	r4,128(sp)
    a890:	d9801a04 	addi	r6,sp,104
    a894:	da402c15 	stw	r9,176(sp)
    a898:	00094a80 	call	94a8 <__sprint_r.part.0>
    a89c:	da402c17 	ldw	r9,176(sp)
    a8a0:	103e9a1e 	bne	r2,zero,a30c <__alt_data_end+0xff00a30c>
    a8a4:	d9401b17 	ldw	r5,108(sp)
    a8a8:	d8801c17 	ldw	r2,112(sp)
    a8ac:	d811883a 	mov	r8,sp
    a8b0:	29000044 	addi	r4,r5,1
    a8b4:	003e4206 	br	a1c0 <__alt_data_end+0xff00a1c0>
    a8b8:	d9401b17 	ldw	r5,108(sp)
    a8bc:	01000074 	movhi	r4,1
    a8c0:	21057804 	addi	r4,r4,5600
    a8c4:	d9002415 	stw	r4,144(sp)
    a8c8:	29400044 	addi	r5,r5,1
    a8cc:	003c6d06 	br	9a84 <__alt_data_end+0xff009a84>
    a8d0:	0039883a 	mov	fp,zero
    a8d4:	00800084 	movi	r2,2
    a8d8:	10803fcc 	andi	r2,r2,255
    a8dc:	01000044 	movi	r4,1
    a8e0:	11001e26 	beq	r2,r4,a95c <___vfiprintf_internal_r+0x13a0>
    a8e4:	01000084 	movi	r4,2
    a8e8:	11001e1e 	bne	r2,r4,a964 <___vfiprintf_internal_r+0x13a8>
    a8ec:	1829883a 	mov	r20,r3
    a8f0:	003eea06 	br	a49c <__alt_data_end+0xff00a49c>
    a8f4:	a007883a 	mov	r3,r20
    a8f8:	00800044 	movi	r2,1
    a8fc:	003ff606 	br	a8d8 <__alt_data_end+0xff00a8d8>
    a900:	00800184 	movi	r2,6
    a904:	1240012e 	bgeu	r2,r9,a90c <___vfiprintf_internal_r+0x1350>
    a908:	1013883a 	mov	r9,r2
    a90c:	4827883a 	mov	r19,r9
    a910:	4825883a 	mov	r18,r9
    a914:	48001516 	blt	r9,zero,a96c <___vfiprintf_internal_r+0x13b0>
    a918:	05400074 	movhi	r21,1
    a91c:	d8c02215 	stw	r3,136(sp)
    a920:	ad451804 	addi	r21,r21,5216
    a924:	003d1406 	br	9d78 <__alt_data_end+0xff009d78>
    a928:	02800074 	movhi	r10,1
    a92c:	52857404 	addi	r10,r10,5584
    a930:	da802415 	stw	r10,144(sp)
    a934:	200d883a 	mov	r6,r4
    a938:	003c9106 	br	9b80 <__alt_data_end+0xff009b80>
    a93c:	5021883a 	mov	r16,r10
    a940:	0013883a 	mov	r9,zero
    a944:	003b7d06 	br	973c <__alt_data_end+0xff00973c>
    a948:	4827883a 	mov	r19,r9
    a94c:	df001d83 	ldbu	fp,118(sp)
    a950:	d8c02215 	stw	r3,136(sp)
    a954:	0013883a 	mov	r9,zero
    a958:	003c1806 	br	99bc <__alt_data_end+0xff0099bc>
    a95c:	1829883a 	mov	r20,r3
    a960:	003d1806 	br	9dc4 <__alt_data_end+0xff009dc4>
    a964:	1829883a 	mov	r20,r3
    a968:	003ccd06 	br	9ca0 <__alt_data_end+0xff009ca0>
    a96c:	0025883a 	mov	r18,zero
    a970:	003fe906 	br	a918 <__alt_data_end+0xff00a918>
    a974:	d8802217 	ldw	r2,136(sp)
    a978:	80c00043 	ldbu	r3,1(r16)
    a97c:	5021883a 	mov	r16,r10
    a980:	12400017 	ldw	r9,0(r2)
    a984:	10800104 	addi	r2,r2,4
    a988:	d8802215 	stw	r2,136(sp)
    a98c:	483faf0e 	bge	r9,zero,a84c <__alt_data_end+0xff00a84c>
    a990:	18c03fcc 	andi	r3,r3,255
    a994:	18c0201c 	xori	r3,r3,128
    a998:	027fffc4 	movi	r9,-1
    a99c:	18ffe004 	addi	r3,r3,-128
    a9a0:	003b6506 	br	9738 <__alt_data_end+0xff009738>
    a9a4:	d9c01d85 	stb	r7,118(sp)
    a9a8:	003ca006 	br	9c2c <__alt_data_end+0xff009c2c>
    a9ac:	d9c01d85 	stb	r7,118(sp)
    a9b0:	003cad06 	br	9c68 <__alt_data_end+0xff009c68>
    a9b4:	d9c01d85 	stb	r7,118(sp)
    a9b8:	003d7d06 	br	9fb0 <__alt_data_end+0xff009fb0>
    a9bc:	d9c01d85 	stb	r7,118(sp)
    a9c0:	003d5f06 	br	9f40 <__alt_data_end+0xff009f40>
    a9c4:	a080004c 	andi	r2,r20,1
    a9c8:	0039883a 	mov	fp,zero
    a9cc:	10000526 	beq	r2,zero,a9e4 <___vfiprintf_internal_r+0x1428>
    a9d0:	00800c04 	movi	r2,48
    a9d4:	d88019c5 	stb	r2,103(sp)
    a9d8:	dcc02717 	ldw	r19,156(sp)
    a9dc:	dd4019c4 	addi	r21,sp,103
    a9e0:	003bf606 	br	99bc <__alt_data_end+0xff0099bc>
    a9e4:	0027883a 	mov	r19,zero
    a9e8:	dd401a04 	addi	r21,sp,104
    a9ec:	003bf306 	br	99bc <__alt_data_end+0xff0099bc>
    a9f0:	d9c01d85 	stb	r7,118(sp)
    a9f4:	003dc806 	br	a118 <__alt_data_end+0xff00a118>
    a9f8:	d9c01d85 	stb	r7,118(sp)
    a9fc:	003d3a06 	br	9ee8 <__alt_data_end+0xff009ee8>
    aa00:	d9c01d85 	stb	r7,118(sp)
    aa04:	003d2a06 	br	9eb0 <__alt_data_end+0xff009eb0>
    aa08:	d9c01d85 	stb	r7,118(sp)
    aa0c:	003cde06 	br	9d88 <__alt_data_end+0xff009d88>
    aa10:	d9c01d85 	stb	r7,118(sp)
    aa14:	003cbc06 	br	9d08 <__alt_data_end+0xff009d08>

0000aa18 <__vfiprintf_internal>:
    aa18:	00800074 	movhi	r2,1
    aa1c:	108c7504 	addi	r2,r2,12756
    aa20:	300f883a 	mov	r7,r6
    aa24:	280d883a 	mov	r6,r5
    aa28:	200b883a 	mov	r5,r4
    aa2c:	11000017 	ldw	r4,0(r2)
    aa30:	00095bc1 	jmpi	95bc <___vfiprintf_internal_r>

0000aa34 <__sbprintf>:
    aa34:	2880030b 	ldhu	r2,12(r5)
    aa38:	2ac01917 	ldw	r11,100(r5)
    aa3c:	2a80038b 	ldhu	r10,14(r5)
    aa40:	2a400717 	ldw	r9,28(r5)
    aa44:	2a000917 	ldw	r8,36(r5)
    aa48:	defee204 	addi	sp,sp,-1144
    aa4c:	00c10004 	movi	r3,1024
    aa50:	dc011a15 	stw	r16,1128(sp)
    aa54:	10bfff4c 	andi	r2,r2,65533
    aa58:	2821883a 	mov	r16,r5
    aa5c:	d8cb883a 	add	r5,sp,r3
    aa60:	dc811c15 	stw	r18,1136(sp)
    aa64:	dc411b15 	stw	r17,1132(sp)
    aa68:	dfc11d15 	stw	ra,1140(sp)
    aa6c:	2025883a 	mov	r18,r4
    aa70:	d881030d 	sth	r2,1036(sp)
    aa74:	dac11915 	stw	r11,1124(sp)
    aa78:	da81038d 	sth	r10,1038(sp)
    aa7c:	da410715 	stw	r9,1052(sp)
    aa80:	da010915 	stw	r8,1060(sp)
    aa84:	dec10015 	stw	sp,1024(sp)
    aa88:	dec10415 	stw	sp,1040(sp)
    aa8c:	d8c10215 	stw	r3,1032(sp)
    aa90:	d8c10515 	stw	r3,1044(sp)
    aa94:	d8010615 	stw	zero,1048(sp)
    aa98:	00095bc0 	call	95bc <___vfiprintf_internal_r>
    aa9c:	1023883a 	mov	r17,r2
    aaa0:	10000416 	blt	r2,zero,aab4 <__sbprintf+0x80>
    aaa4:	d9410004 	addi	r5,sp,1024
    aaa8:	9009883a 	mov	r4,r18
    aaac:	00066d00 	call	66d0 <_fflush_r>
    aab0:	10000d1e 	bne	r2,zero,aae8 <__sbprintf+0xb4>
    aab4:	d881030b 	ldhu	r2,1036(sp)
    aab8:	1080100c 	andi	r2,r2,64
    aabc:	10000326 	beq	r2,zero,aacc <__sbprintf+0x98>
    aac0:	8080030b 	ldhu	r2,12(r16)
    aac4:	10801014 	ori	r2,r2,64
    aac8:	8080030d 	sth	r2,12(r16)
    aacc:	8805883a 	mov	r2,r17
    aad0:	dfc11d17 	ldw	ra,1140(sp)
    aad4:	dc811c17 	ldw	r18,1136(sp)
    aad8:	dc411b17 	ldw	r17,1132(sp)
    aadc:	dc011a17 	ldw	r16,1128(sp)
    aae0:	dec11e04 	addi	sp,sp,1144
    aae4:	f800283a 	ret
    aae8:	047fffc4 	movi	r17,-1
    aaec:	003ff106 	br	aab4 <__alt_data_end+0xff00aab4>

0000aaf0 <_write_r>:
    aaf0:	defffd04 	addi	sp,sp,-12
    aaf4:	2805883a 	mov	r2,r5
    aaf8:	dc000015 	stw	r16,0(sp)
    aafc:	04000074 	movhi	r16,1
    ab00:	dc400115 	stw	r17,4(sp)
    ab04:	300b883a 	mov	r5,r6
    ab08:	84134a04 	addi	r16,r16,19752
    ab0c:	2023883a 	mov	r17,r4
    ab10:	380d883a 	mov	r6,r7
    ab14:	1009883a 	mov	r4,r2
    ab18:	dfc00215 	stw	ra,8(sp)
    ab1c:	80000015 	stw	zero,0(r16)
    ab20:	000edb80 	call	edb8 <write>
    ab24:	00ffffc4 	movi	r3,-1
    ab28:	10c00526 	beq	r2,r3,ab40 <_write_r+0x50>
    ab2c:	dfc00217 	ldw	ra,8(sp)
    ab30:	dc400117 	ldw	r17,4(sp)
    ab34:	dc000017 	ldw	r16,0(sp)
    ab38:	dec00304 	addi	sp,sp,12
    ab3c:	f800283a 	ret
    ab40:	80c00017 	ldw	r3,0(r16)
    ab44:	183ff926 	beq	r3,zero,ab2c <__alt_data_end+0xff00ab2c>
    ab48:	88c00015 	stw	r3,0(r17)
    ab4c:	003ff706 	br	ab2c <__alt_data_end+0xff00ab2c>

0000ab50 <_close_r>:
    ab50:	defffd04 	addi	sp,sp,-12
    ab54:	dc000015 	stw	r16,0(sp)
    ab58:	04000074 	movhi	r16,1
    ab5c:	dc400115 	stw	r17,4(sp)
    ab60:	84134a04 	addi	r16,r16,19752
    ab64:	2023883a 	mov	r17,r4
    ab68:	2809883a 	mov	r4,r5
    ab6c:	dfc00215 	stw	ra,8(sp)
    ab70:	80000015 	stw	zero,0(r16)
    ab74:	000e5780 	call	e578 <close>
    ab78:	00ffffc4 	movi	r3,-1
    ab7c:	10c00526 	beq	r2,r3,ab94 <_close_r+0x44>
    ab80:	dfc00217 	ldw	ra,8(sp)
    ab84:	dc400117 	ldw	r17,4(sp)
    ab88:	dc000017 	ldw	r16,0(sp)
    ab8c:	dec00304 	addi	sp,sp,12
    ab90:	f800283a 	ret
    ab94:	80c00017 	ldw	r3,0(r16)
    ab98:	183ff926 	beq	r3,zero,ab80 <__alt_data_end+0xff00ab80>
    ab9c:	88c00015 	stw	r3,0(r17)
    aba0:	003ff706 	br	ab80 <__alt_data_end+0xff00ab80>

0000aba4 <_calloc_r>:
    aba4:	298b383a 	mul	r5,r5,r6
    aba8:	defffe04 	addi	sp,sp,-8
    abac:	dfc00115 	stw	ra,4(sp)
    abb0:	dc000015 	stw	r16,0(sp)
    abb4:	0001dd00 	call	1dd0 <_malloc_r>
    abb8:	10002926 	beq	r2,zero,ac60 <_calloc_r+0xbc>
    abbc:	11bfff17 	ldw	r6,-4(r2)
    abc0:	1021883a 	mov	r16,r2
    abc4:	00bfff04 	movi	r2,-4
    abc8:	308c703a 	and	r6,r6,r2
    abcc:	00c00904 	movi	r3,36
    abd0:	308d883a 	add	r6,r6,r2
    abd4:	19801636 	bltu	r3,r6,ac30 <_calloc_r+0x8c>
    abd8:	008004c4 	movi	r2,19
    abdc:	11800b2e 	bgeu	r2,r6,ac0c <_calloc_r+0x68>
    abe0:	80000015 	stw	zero,0(r16)
    abe4:	80000115 	stw	zero,4(r16)
    abe8:	008006c4 	movi	r2,27
    abec:	11801a2e 	bgeu	r2,r6,ac58 <_calloc_r+0xb4>
    abf0:	80000215 	stw	zero,8(r16)
    abf4:	80000315 	stw	zero,12(r16)
    abf8:	30c0151e 	bne	r6,r3,ac50 <_calloc_r+0xac>
    abfc:	80000415 	stw	zero,16(r16)
    ac00:	80800604 	addi	r2,r16,24
    ac04:	80000515 	stw	zero,20(r16)
    ac08:	00000106 	br	ac10 <_calloc_r+0x6c>
    ac0c:	8005883a 	mov	r2,r16
    ac10:	10000015 	stw	zero,0(r2)
    ac14:	10000115 	stw	zero,4(r2)
    ac18:	10000215 	stw	zero,8(r2)
    ac1c:	8005883a 	mov	r2,r16
    ac20:	dfc00117 	ldw	ra,4(sp)
    ac24:	dc000017 	ldw	r16,0(sp)
    ac28:	dec00204 	addi	sp,sp,8
    ac2c:	f800283a 	ret
    ac30:	000b883a 	mov	r5,zero
    ac34:	8009883a 	mov	r4,r16
    ac38:	0007b940 	call	7b94 <memset>
    ac3c:	8005883a 	mov	r2,r16
    ac40:	dfc00117 	ldw	ra,4(sp)
    ac44:	dc000017 	ldw	r16,0(sp)
    ac48:	dec00204 	addi	sp,sp,8
    ac4c:	f800283a 	ret
    ac50:	80800404 	addi	r2,r16,16
    ac54:	003fee06 	br	ac10 <__alt_data_end+0xff00ac10>
    ac58:	80800204 	addi	r2,r16,8
    ac5c:	003fec06 	br	ac10 <__alt_data_end+0xff00ac10>
    ac60:	0005883a 	mov	r2,zero
    ac64:	003fee06 	br	ac20 <__alt_data_end+0xff00ac20>

0000ac68 <_fclose_r>:
    ac68:	28003926 	beq	r5,zero,ad50 <_fclose_r+0xe8>
    ac6c:	defffc04 	addi	sp,sp,-16
    ac70:	dc400115 	stw	r17,4(sp)
    ac74:	dc000015 	stw	r16,0(sp)
    ac78:	dfc00315 	stw	ra,12(sp)
    ac7c:	dc800215 	stw	r18,8(sp)
    ac80:	2023883a 	mov	r17,r4
    ac84:	2821883a 	mov	r16,r5
    ac88:	20000226 	beq	r4,zero,ac94 <_fclose_r+0x2c>
    ac8c:	20800e17 	ldw	r2,56(r4)
    ac90:	10002726 	beq	r2,zero,ad30 <_fclose_r+0xc8>
    ac94:	8080030f 	ldh	r2,12(r16)
    ac98:	1000071e 	bne	r2,zero,acb8 <_fclose_r+0x50>
    ac9c:	0005883a 	mov	r2,zero
    aca0:	dfc00317 	ldw	ra,12(sp)
    aca4:	dc800217 	ldw	r18,8(sp)
    aca8:	dc400117 	ldw	r17,4(sp)
    acac:	dc000017 	ldw	r16,0(sp)
    acb0:	dec00404 	addi	sp,sp,16
    acb4:	f800283a 	ret
    acb8:	800b883a 	mov	r5,r16
    acbc:	8809883a 	mov	r4,r17
    acc0:	00064b40 	call	64b4 <__sflush_r>
    acc4:	1025883a 	mov	r18,r2
    acc8:	80800b17 	ldw	r2,44(r16)
    accc:	10000426 	beq	r2,zero,ace0 <_fclose_r+0x78>
    acd0:	81400717 	ldw	r5,28(r16)
    acd4:	8809883a 	mov	r4,r17
    acd8:	103ee83a 	callr	r2
    acdc:	10001616 	blt	r2,zero,ad38 <_fclose_r+0xd0>
    ace0:	8080030b 	ldhu	r2,12(r16)
    ace4:	1080200c 	andi	r2,r2,128
    ace8:	1000151e 	bne	r2,zero,ad40 <_fclose_r+0xd8>
    acec:	81400c17 	ldw	r5,48(r16)
    acf0:	28000526 	beq	r5,zero,ad08 <_fclose_r+0xa0>
    acf4:	80801004 	addi	r2,r16,64
    acf8:	28800226 	beq	r5,r2,ad04 <_fclose_r+0x9c>
    acfc:	8809883a 	mov	r4,r17
    ad00:	0006c200 	call	6c20 <_free_r>
    ad04:	80000c15 	stw	zero,48(r16)
    ad08:	81401117 	ldw	r5,68(r16)
    ad0c:	28000326 	beq	r5,zero,ad1c <_fclose_r+0xb4>
    ad10:	8809883a 	mov	r4,r17
    ad14:	0006c200 	call	6c20 <_free_r>
    ad18:	80001115 	stw	zero,68(r16)
    ad1c:	0006abc0 	call	6abc <__sfp_lock_acquire>
    ad20:	8000030d 	sth	zero,12(r16)
    ad24:	0006ac00 	call	6ac0 <__sfp_lock_release>
    ad28:	9005883a 	mov	r2,r18
    ad2c:	003fdc06 	br	aca0 <__alt_data_end+0xff00aca0>
    ad30:	0006aac0 	call	6aac <__sinit>
    ad34:	003fd706 	br	ac94 <__alt_data_end+0xff00ac94>
    ad38:	04bfffc4 	movi	r18,-1
    ad3c:	003fe806 	br	ace0 <__alt_data_end+0xff00ace0>
    ad40:	81400417 	ldw	r5,16(r16)
    ad44:	8809883a 	mov	r4,r17
    ad48:	0006c200 	call	6c20 <_free_r>
    ad4c:	003fe706 	br	acec <__alt_data_end+0xff00acec>
    ad50:	0005883a 	mov	r2,zero
    ad54:	f800283a 	ret

0000ad58 <fclose>:
    ad58:	00800074 	movhi	r2,1
    ad5c:	108c7504 	addi	r2,r2,12756
    ad60:	200b883a 	mov	r5,r4
    ad64:	11000017 	ldw	r4,0(r2)
    ad68:	000ac681 	jmpi	ac68 <_fclose_r>

0000ad6c <__fputwc>:
    ad6c:	defff804 	addi	sp,sp,-32
    ad70:	dcc00415 	stw	r19,16(sp)
    ad74:	dc800315 	stw	r18,12(sp)
    ad78:	dc000115 	stw	r16,4(sp)
    ad7c:	dfc00715 	stw	ra,28(sp)
    ad80:	dd400615 	stw	r21,24(sp)
    ad84:	dd000515 	stw	r20,20(sp)
    ad88:	dc400215 	stw	r17,8(sp)
    ad8c:	2027883a 	mov	r19,r4
    ad90:	2825883a 	mov	r18,r5
    ad94:	3021883a 	mov	r16,r6
    ad98:	00075fc0 	call	75fc <__locale_mb_cur_max>
    ad9c:	00c00044 	movi	r3,1
    ada0:	10c03e26 	beq	r2,r3,ae9c <__fputwc+0x130>
    ada4:	81c01704 	addi	r7,r16,92
    ada8:	900d883a 	mov	r6,r18
    adac:	d80b883a 	mov	r5,sp
    adb0:	9809883a 	mov	r4,r19
    adb4:	000b23c0 	call	b23c <_wcrtomb_r>
    adb8:	1029883a 	mov	r20,r2
    adbc:	00bfffc4 	movi	r2,-1
    adc0:	a0802026 	beq	r20,r2,ae44 <__fputwc+0xd8>
    adc4:	d9400003 	ldbu	r5,0(sp)
    adc8:	a0001c26 	beq	r20,zero,ae3c <__fputwc+0xd0>
    adcc:	0023883a 	mov	r17,zero
    add0:	05400284 	movi	r21,10
    add4:	00000906 	br	adfc <__fputwc+0x90>
    add8:	80800017 	ldw	r2,0(r16)
    addc:	11400005 	stb	r5,0(r2)
    ade0:	80c00017 	ldw	r3,0(r16)
    ade4:	18c00044 	addi	r3,r3,1
    ade8:	80c00015 	stw	r3,0(r16)
    adec:	8c400044 	addi	r17,r17,1
    adf0:	dc45883a 	add	r2,sp,r17
    adf4:	8d00112e 	bgeu	r17,r20,ae3c <__fputwc+0xd0>
    adf8:	11400003 	ldbu	r5,0(r2)
    adfc:	80c00217 	ldw	r3,8(r16)
    ae00:	18ffffc4 	addi	r3,r3,-1
    ae04:	80c00215 	stw	r3,8(r16)
    ae08:	183ff30e 	bge	r3,zero,add8 <__alt_data_end+0xff00add8>
    ae0c:	80800617 	ldw	r2,24(r16)
    ae10:	18801916 	blt	r3,r2,ae78 <__fputwc+0x10c>
    ae14:	80800017 	ldw	r2,0(r16)
    ae18:	11400005 	stb	r5,0(r2)
    ae1c:	80800017 	ldw	r2,0(r16)
    ae20:	10c00003 	ldbu	r3,0(r2)
    ae24:	10800044 	addi	r2,r2,1
    ae28:	1d402326 	beq	r3,r21,aeb8 <__fputwc+0x14c>
    ae2c:	80800015 	stw	r2,0(r16)
    ae30:	8c400044 	addi	r17,r17,1
    ae34:	dc45883a 	add	r2,sp,r17
    ae38:	8d3fef36 	bltu	r17,r20,adf8 <__alt_data_end+0xff00adf8>
    ae3c:	9005883a 	mov	r2,r18
    ae40:	00000406 	br	ae54 <__fputwc+0xe8>
    ae44:	80c0030b 	ldhu	r3,12(r16)
    ae48:	a005883a 	mov	r2,r20
    ae4c:	18c01014 	ori	r3,r3,64
    ae50:	80c0030d 	sth	r3,12(r16)
    ae54:	dfc00717 	ldw	ra,28(sp)
    ae58:	dd400617 	ldw	r21,24(sp)
    ae5c:	dd000517 	ldw	r20,20(sp)
    ae60:	dcc00417 	ldw	r19,16(sp)
    ae64:	dc800317 	ldw	r18,12(sp)
    ae68:	dc400217 	ldw	r17,8(sp)
    ae6c:	dc000117 	ldw	r16,4(sp)
    ae70:	dec00804 	addi	sp,sp,32
    ae74:	f800283a 	ret
    ae78:	800d883a 	mov	r6,r16
    ae7c:	29403fcc 	andi	r5,r5,255
    ae80:	9809883a 	mov	r4,r19
    ae84:	000b0e40 	call	b0e4 <__swbuf_r>
    ae88:	10bfffe0 	cmpeqi	r2,r2,-1
    ae8c:	10803fcc 	andi	r2,r2,255
    ae90:	103fd626 	beq	r2,zero,adec <__alt_data_end+0xff00adec>
    ae94:	00bfffc4 	movi	r2,-1
    ae98:	003fee06 	br	ae54 <__alt_data_end+0xff00ae54>
    ae9c:	90ffffc4 	addi	r3,r18,-1
    aea0:	01003f84 	movi	r4,254
    aea4:	20ffbf36 	bltu	r4,r3,ada4 <__alt_data_end+0xff00ada4>
    aea8:	900b883a 	mov	r5,r18
    aeac:	dc800005 	stb	r18,0(sp)
    aeb0:	1029883a 	mov	r20,r2
    aeb4:	003fc506 	br	adcc <__alt_data_end+0xff00adcc>
    aeb8:	800d883a 	mov	r6,r16
    aebc:	a80b883a 	mov	r5,r21
    aec0:	9809883a 	mov	r4,r19
    aec4:	000b0e40 	call	b0e4 <__swbuf_r>
    aec8:	10bfffe0 	cmpeqi	r2,r2,-1
    aecc:	003fef06 	br	ae8c <__alt_data_end+0xff00ae8c>

0000aed0 <_fputwc_r>:
    aed0:	3080030b 	ldhu	r2,12(r6)
    aed4:	10c8000c 	andi	r3,r2,8192
    aed8:	1800051e 	bne	r3,zero,aef0 <_fputwc_r+0x20>
    aedc:	30c01917 	ldw	r3,100(r6)
    aee0:	10880014 	ori	r2,r2,8192
    aee4:	3080030d 	sth	r2,12(r6)
    aee8:	18880014 	ori	r2,r3,8192
    aeec:	30801915 	stw	r2,100(r6)
    aef0:	000ad6c1 	jmpi	ad6c <__fputwc>

0000aef4 <fputwc>:
    aef4:	00800074 	movhi	r2,1
    aef8:	defffc04 	addi	sp,sp,-16
    aefc:	108c7504 	addi	r2,r2,12756
    af00:	dc000115 	stw	r16,4(sp)
    af04:	14000017 	ldw	r16,0(r2)
    af08:	dc400215 	stw	r17,8(sp)
    af0c:	dfc00315 	stw	ra,12(sp)
    af10:	2023883a 	mov	r17,r4
    af14:	80000226 	beq	r16,zero,af20 <fputwc+0x2c>
    af18:	80800e17 	ldw	r2,56(r16)
    af1c:	10001026 	beq	r2,zero,af60 <fputwc+0x6c>
    af20:	2880030b 	ldhu	r2,12(r5)
    af24:	10c8000c 	andi	r3,r2,8192
    af28:	1800051e 	bne	r3,zero,af40 <fputwc+0x4c>
    af2c:	28c01917 	ldw	r3,100(r5)
    af30:	10880014 	ori	r2,r2,8192
    af34:	2880030d 	sth	r2,12(r5)
    af38:	18880014 	ori	r2,r3,8192
    af3c:	28801915 	stw	r2,100(r5)
    af40:	280d883a 	mov	r6,r5
    af44:	8009883a 	mov	r4,r16
    af48:	880b883a 	mov	r5,r17
    af4c:	dfc00317 	ldw	ra,12(sp)
    af50:	dc400217 	ldw	r17,8(sp)
    af54:	dc000117 	ldw	r16,4(sp)
    af58:	dec00404 	addi	sp,sp,16
    af5c:	000ad6c1 	jmpi	ad6c <__fputwc>
    af60:	8009883a 	mov	r4,r16
    af64:	d9400015 	stw	r5,0(sp)
    af68:	0006aac0 	call	6aac <__sinit>
    af6c:	d9400017 	ldw	r5,0(sp)
    af70:	003feb06 	br	af20 <__alt_data_end+0xff00af20>

0000af74 <_fstat_r>:
    af74:	defffd04 	addi	sp,sp,-12
    af78:	2805883a 	mov	r2,r5
    af7c:	dc000015 	stw	r16,0(sp)
    af80:	04000074 	movhi	r16,1
    af84:	dc400115 	stw	r17,4(sp)
    af88:	84134a04 	addi	r16,r16,19752
    af8c:	2023883a 	mov	r17,r4
    af90:	300b883a 	mov	r5,r6
    af94:	1009883a 	mov	r4,r2
    af98:	dfc00215 	stw	ra,8(sp)
    af9c:	80000015 	stw	zero,0(r16)
    afa0:	000e6b00 	call	e6b0 <fstat>
    afa4:	00ffffc4 	movi	r3,-1
    afa8:	10c00526 	beq	r2,r3,afc0 <_fstat_r+0x4c>
    afac:	dfc00217 	ldw	ra,8(sp)
    afb0:	dc400117 	ldw	r17,4(sp)
    afb4:	dc000017 	ldw	r16,0(sp)
    afb8:	dec00304 	addi	sp,sp,12
    afbc:	f800283a 	ret
    afc0:	80c00017 	ldw	r3,0(r16)
    afc4:	183ff926 	beq	r3,zero,afac <__alt_data_end+0xff00afac>
    afc8:	88c00015 	stw	r3,0(r17)
    afcc:	003ff706 	br	afac <__alt_data_end+0xff00afac>

0000afd0 <_isatty_r>:
    afd0:	defffd04 	addi	sp,sp,-12
    afd4:	dc000015 	stw	r16,0(sp)
    afd8:	04000074 	movhi	r16,1
    afdc:	dc400115 	stw	r17,4(sp)
    afe0:	84134a04 	addi	r16,r16,19752
    afe4:	2023883a 	mov	r17,r4
    afe8:	2809883a 	mov	r4,r5
    afec:	dfc00215 	stw	ra,8(sp)
    aff0:	80000015 	stw	zero,0(r16)
    aff4:	000e79c0 	call	e79c <isatty>
    aff8:	00ffffc4 	movi	r3,-1
    affc:	10c00526 	beq	r2,r3,b014 <_isatty_r+0x44>
    b000:	dfc00217 	ldw	ra,8(sp)
    b004:	dc400117 	ldw	r17,4(sp)
    b008:	dc000017 	ldw	r16,0(sp)
    b00c:	dec00304 	addi	sp,sp,12
    b010:	f800283a 	ret
    b014:	80c00017 	ldw	r3,0(r16)
    b018:	183ff926 	beq	r3,zero,b000 <__alt_data_end+0xff00b000>
    b01c:	88c00015 	stw	r3,0(r17)
    b020:	003ff706 	br	b000 <__alt_data_end+0xff00b000>

0000b024 <_lseek_r>:
    b024:	defffd04 	addi	sp,sp,-12
    b028:	2805883a 	mov	r2,r5
    b02c:	dc000015 	stw	r16,0(sp)
    b030:	04000074 	movhi	r16,1
    b034:	dc400115 	stw	r17,4(sp)
    b038:	300b883a 	mov	r5,r6
    b03c:	84134a04 	addi	r16,r16,19752
    b040:	2023883a 	mov	r17,r4
    b044:	380d883a 	mov	r6,r7
    b048:	1009883a 	mov	r4,r2
    b04c:	dfc00215 	stw	ra,8(sp)
    b050:	80000015 	stw	zero,0(r16)
    b054:	000e9680 	call	e968 <lseek>
    b058:	00ffffc4 	movi	r3,-1
    b05c:	10c00526 	beq	r2,r3,b074 <_lseek_r+0x50>
    b060:	dfc00217 	ldw	ra,8(sp)
    b064:	dc400117 	ldw	r17,4(sp)
    b068:	dc000017 	ldw	r16,0(sp)
    b06c:	dec00304 	addi	sp,sp,12
    b070:	f800283a 	ret
    b074:	80c00017 	ldw	r3,0(r16)
    b078:	183ff926 	beq	r3,zero,b060 <__alt_data_end+0xff00b060>
    b07c:	88c00015 	stw	r3,0(r17)
    b080:	003ff706 	br	b060 <__alt_data_end+0xff00b060>

0000b084 <_read_r>:
    b084:	defffd04 	addi	sp,sp,-12
    b088:	2805883a 	mov	r2,r5
    b08c:	dc000015 	stw	r16,0(sp)
    b090:	04000074 	movhi	r16,1
    b094:	dc400115 	stw	r17,4(sp)
    b098:	300b883a 	mov	r5,r6
    b09c:	84134a04 	addi	r16,r16,19752
    b0a0:	2023883a 	mov	r17,r4
    b0a4:	380d883a 	mov	r6,r7
    b0a8:	1009883a 	mov	r4,r2
    b0ac:	dfc00215 	stw	ra,8(sp)
    b0b0:	80000015 	stw	zero,0(r16)
    b0b4:	000eb3c0 	call	eb3c <read>
    b0b8:	00ffffc4 	movi	r3,-1
    b0bc:	10c00526 	beq	r2,r3,b0d4 <_read_r+0x50>
    b0c0:	dfc00217 	ldw	ra,8(sp)
    b0c4:	dc400117 	ldw	r17,4(sp)
    b0c8:	dc000017 	ldw	r16,0(sp)
    b0cc:	dec00304 	addi	sp,sp,12
    b0d0:	f800283a 	ret
    b0d4:	80c00017 	ldw	r3,0(r16)
    b0d8:	183ff926 	beq	r3,zero,b0c0 <__alt_data_end+0xff00b0c0>
    b0dc:	88c00015 	stw	r3,0(r17)
    b0e0:	003ff706 	br	b0c0 <__alt_data_end+0xff00b0c0>

0000b0e4 <__swbuf_r>:
    b0e4:	defffb04 	addi	sp,sp,-20
    b0e8:	dcc00315 	stw	r19,12(sp)
    b0ec:	dc800215 	stw	r18,8(sp)
    b0f0:	dc000015 	stw	r16,0(sp)
    b0f4:	dfc00415 	stw	ra,16(sp)
    b0f8:	dc400115 	stw	r17,4(sp)
    b0fc:	2025883a 	mov	r18,r4
    b100:	2827883a 	mov	r19,r5
    b104:	3021883a 	mov	r16,r6
    b108:	20000226 	beq	r4,zero,b114 <__swbuf_r+0x30>
    b10c:	20800e17 	ldw	r2,56(r4)
    b110:	10004226 	beq	r2,zero,b21c <__swbuf_r+0x138>
    b114:	80800617 	ldw	r2,24(r16)
    b118:	8100030b 	ldhu	r4,12(r16)
    b11c:	80800215 	stw	r2,8(r16)
    b120:	2080020c 	andi	r2,r4,8
    b124:	10003626 	beq	r2,zero,b200 <__swbuf_r+0x11c>
    b128:	80c00417 	ldw	r3,16(r16)
    b12c:	18003426 	beq	r3,zero,b200 <__swbuf_r+0x11c>
    b130:	2088000c 	andi	r2,r4,8192
    b134:	9c403fcc 	andi	r17,r19,255
    b138:	10001a26 	beq	r2,zero,b1a4 <__swbuf_r+0xc0>
    b13c:	80800017 	ldw	r2,0(r16)
    b140:	81000517 	ldw	r4,20(r16)
    b144:	10c7c83a 	sub	r3,r2,r3
    b148:	1900200e 	bge	r3,r4,b1cc <__swbuf_r+0xe8>
    b14c:	18c00044 	addi	r3,r3,1
    b150:	81000217 	ldw	r4,8(r16)
    b154:	11400044 	addi	r5,r2,1
    b158:	81400015 	stw	r5,0(r16)
    b15c:	213fffc4 	addi	r4,r4,-1
    b160:	81000215 	stw	r4,8(r16)
    b164:	14c00005 	stb	r19,0(r2)
    b168:	80800517 	ldw	r2,20(r16)
    b16c:	10c01e26 	beq	r2,r3,b1e8 <__swbuf_r+0x104>
    b170:	8080030b 	ldhu	r2,12(r16)
    b174:	1080004c 	andi	r2,r2,1
    b178:	10000226 	beq	r2,zero,b184 <__swbuf_r+0xa0>
    b17c:	00800284 	movi	r2,10
    b180:	88801926 	beq	r17,r2,b1e8 <__swbuf_r+0x104>
    b184:	8805883a 	mov	r2,r17
    b188:	dfc00417 	ldw	ra,16(sp)
    b18c:	dcc00317 	ldw	r19,12(sp)
    b190:	dc800217 	ldw	r18,8(sp)
    b194:	dc400117 	ldw	r17,4(sp)
    b198:	dc000017 	ldw	r16,0(sp)
    b19c:	dec00504 	addi	sp,sp,20
    b1a0:	f800283a 	ret
    b1a4:	81401917 	ldw	r5,100(r16)
    b1a8:	00b7ffc4 	movi	r2,-8193
    b1ac:	21080014 	ori	r4,r4,8192
    b1b0:	2884703a 	and	r2,r5,r2
    b1b4:	80801915 	stw	r2,100(r16)
    b1b8:	80800017 	ldw	r2,0(r16)
    b1bc:	8100030d 	sth	r4,12(r16)
    b1c0:	81000517 	ldw	r4,20(r16)
    b1c4:	10c7c83a 	sub	r3,r2,r3
    b1c8:	193fe016 	blt	r3,r4,b14c <__alt_data_end+0xff00b14c>
    b1cc:	800b883a 	mov	r5,r16
    b1d0:	9009883a 	mov	r4,r18
    b1d4:	00066d00 	call	66d0 <_fflush_r>
    b1d8:	1000071e 	bne	r2,zero,b1f8 <__swbuf_r+0x114>
    b1dc:	80800017 	ldw	r2,0(r16)
    b1e0:	00c00044 	movi	r3,1
    b1e4:	003fda06 	br	b150 <__alt_data_end+0xff00b150>
    b1e8:	800b883a 	mov	r5,r16
    b1ec:	9009883a 	mov	r4,r18
    b1f0:	00066d00 	call	66d0 <_fflush_r>
    b1f4:	103fe326 	beq	r2,zero,b184 <__alt_data_end+0xff00b184>
    b1f8:	00bfffc4 	movi	r2,-1
    b1fc:	003fe206 	br	b188 <__alt_data_end+0xff00b188>
    b200:	800b883a 	mov	r5,r16
    b204:	9009883a 	mov	r4,r18
    b208:	0004ad80 	call	4ad8 <__swsetup_r>
    b20c:	103ffa1e 	bne	r2,zero,b1f8 <__alt_data_end+0xff00b1f8>
    b210:	8100030b 	ldhu	r4,12(r16)
    b214:	80c00417 	ldw	r3,16(r16)
    b218:	003fc506 	br	b130 <__alt_data_end+0xff00b130>
    b21c:	0006aac0 	call	6aac <__sinit>
    b220:	003fbc06 	br	b114 <__alt_data_end+0xff00b114>

0000b224 <__swbuf>:
    b224:	00800074 	movhi	r2,1
    b228:	108c7504 	addi	r2,r2,12756
    b22c:	280d883a 	mov	r6,r5
    b230:	200b883a 	mov	r5,r4
    b234:	11000017 	ldw	r4,0(r2)
    b238:	000b0e41 	jmpi	b0e4 <__swbuf_r>

0000b23c <_wcrtomb_r>:
    b23c:	defff604 	addi	sp,sp,-40
    b240:	00800074 	movhi	r2,1
    b244:	dc800815 	stw	r18,32(sp)
    b248:	dc400715 	stw	r17,28(sp)
    b24c:	dc000615 	stw	r16,24(sp)
    b250:	108c7704 	addi	r2,r2,12764
    b254:	dfc00915 	stw	ra,36(sp)
    b258:	2021883a 	mov	r16,r4
    b25c:	3823883a 	mov	r17,r7
    b260:	14800017 	ldw	r18,0(r2)
    b264:	28001426 	beq	r5,zero,b2b8 <_wcrtomb_r+0x7c>
    b268:	d9400415 	stw	r5,16(sp)
    b26c:	d9800515 	stw	r6,20(sp)
    b270:	00075f00 	call	75f0 <__locale_charset>
    b274:	d9800517 	ldw	r6,20(sp)
    b278:	d9400417 	ldw	r5,16(sp)
    b27c:	100f883a 	mov	r7,r2
    b280:	dc400015 	stw	r17,0(sp)
    b284:	8009883a 	mov	r4,r16
    b288:	903ee83a 	callr	r18
    b28c:	00ffffc4 	movi	r3,-1
    b290:	10c0031e 	bne	r2,r3,b2a0 <_wcrtomb_r+0x64>
    b294:	88000015 	stw	zero,0(r17)
    b298:	00c02284 	movi	r3,138
    b29c:	80c00015 	stw	r3,0(r16)
    b2a0:	dfc00917 	ldw	ra,36(sp)
    b2a4:	dc800817 	ldw	r18,32(sp)
    b2a8:	dc400717 	ldw	r17,28(sp)
    b2ac:	dc000617 	ldw	r16,24(sp)
    b2b0:	dec00a04 	addi	sp,sp,40
    b2b4:	f800283a 	ret
    b2b8:	00075f00 	call	75f0 <__locale_charset>
    b2bc:	100f883a 	mov	r7,r2
    b2c0:	dc400015 	stw	r17,0(sp)
    b2c4:	000d883a 	mov	r6,zero
    b2c8:	d9400104 	addi	r5,sp,4
    b2cc:	8009883a 	mov	r4,r16
    b2d0:	903ee83a 	callr	r18
    b2d4:	003fed06 	br	b28c <__alt_data_end+0xff00b28c>

0000b2d8 <wcrtomb>:
    b2d8:	defff604 	addi	sp,sp,-40
    b2dc:	00800074 	movhi	r2,1
    b2e0:	dc800615 	stw	r18,24(sp)
    b2e4:	dc400515 	stw	r17,20(sp)
    b2e8:	108c7504 	addi	r2,r2,12756
    b2ec:	dfc00915 	stw	ra,36(sp)
    b2f0:	dd000815 	stw	r20,32(sp)
    b2f4:	dcc00715 	stw	r19,28(sp)
    b2f8:	dc000415 	stw	r16,16(sp)
    b2fc:	3025883a 	mov	r18,r6
    b300:	14400017 	ldw	r17,0(r2)
    b304:	20001926 	beq	r4,zero,b36c <wcrtomb+0x94>
    b308:	00800074 	movhi	r2,1
    b30c:	108c7704 	addi	r2,r2,12764
    b310:	15000017 	ldw	r20,0(r2)
    b314:	2021883a 	mov	r16,r4
    b318:	2827883a 	mov	r19,r5
    b31c:	00075f00 	call	75f0 <__locale_charset>
    b320:	100f883a 	mov	r7,r2
    b324:	dc800015 	stw	r18,0(sp)
    b328:	980d883a 	mov	r6,r19
    b32c:	800b883a 	mov	r5,r16
    b330:	8809883a 	mov	r4,r17
    b334:	a03ee83a 	callr	r20
    b338:	00ffffc4 	movi	r3,-1
    b33c:	10c0031e 	bne	r2,r3,b34c <wcrtomb+0x74>
    b340:	90000015 	stw	zero,0(r18)
    b344:	00c02284 	movi	r3,138
    b348:	88c00015 	stw	r3,0(r17)
    b34c:	dfc00917 	ldw	ra,36(sp)
    b350:	dd000817 	ldw	r20,32(sp)
    b354:	dcc00717 	ldw	r19,28(sp)
    b358:	dc800617 	ldw	r18,24(sp)
    b35c:	dc400517 	ldw	r17,20(sp)
    b360:	dc000417 	ldw	r16,16(sp)
    b364:	dec00a04 	addi	sp,sp,40
    b368:	f800283a 	ret
    b36c:	00800074 	movhi	r2,1
    b370:	108c7704 	addi	r2,r2,12764
    b374:	14000017 	ldw	r16,0(r2)
    b378:	00075f00 	call	75f0 <__locale_charset>
    b37c:	100f883a 	mov	r7,r2
    b380:	dc800015 	stw	r18,0(sp)
    b384:	000d883a 	mov	r6,zero
    b388:	d9400104 	addi	r5,sp,4
    b38c:	8809883a 	mov	r4,r17
    b390:	803ee83a 	callr	r16
    b394:	003fe806 	br	b338 <__alt_data_end+0xff00b338>

0000b398 <__ascii_wctomb>:
    b398:	28000526 	beq	r5,zero,b3b0 <__ascii_wctomb+0x18>
    b39c:	00803fc4 	movi	r2,255
    b3a0:	11800536 	bltu	r2,r6,b3b8 <__ascii_wctomb+0x20>
    b3a4:	29800005 	stb	r6,0(r5)
    b3a8:	00800044 	movi	r2,1
    b3ac:	f800283a 	ret
    b3b0:	0005883a 	mov	r2,zero
    b3b4:	f800283a 	ret
    b3b8:	00802284 	movi	r2,138
    b3bc:	20800015 	stw	r2,0(r4)
    b3c0:	00bfffc4 	movi	r2,-1
    b3c4:	f800283a 	ret

0000b3c8 <_wctomb_r>:
    b3c8:	00800074 	movhi	r2,1
    b3cc:	defff904 	addi	sp,sp,-28
    b3d0:	108c7704 	addi	r2,r2,12764
    b3d4:	dfc00615 	stw	ra,24(sp)
    b3d8:	dc400515 	stw	r17,20(sp)
    b3dc:	dc000415 	stw	r16,16(sp)
    b3e0:	3823883a 	mov	r17,r7
    b3e4:	14000017 	ldw	r16,0(r2)
    b3e8:	d9000115 	stw	r4,4(sp)
    b3ec:	d9400215 	stw	r5,8(sp)
    b3f0:	d9800315 	stw	r6,12(sp)
    b3f4:	00075f00 	call	75f0 <__locale_charset>
    b3f8:	d9800317 	ldw	r6,12(sp)
    b3fc:	d9400217 	ldw	r5,8(sp)
    b400:	d9000117 	ldw	r4,4(sp)
    b404:	100f883a 	mov	r7,r2
    b408:	dc400015 	stw	r17,0(sp)
    b40c:	803ee83a 	callr	r16
    b410:	dfc00617 	ldw	ra,24(sp)
    b414:	dc400517 	ldw	r17,20(sp)
    b418:	dc000417 	ldw	r16,16(sp)
    b41c:	dec00704 	addi	sp,sp,28
    b420:	f800283a 	ret

0000b424 <__udivdi3>:
    b424:	defff504 	addi	sp,sp,-44
    b428:	dcc00415 	stw	r19,16(sp)
    b42c:	dc000115 	stw	r16,4(sp)
    b430:	dfc00a15 	stw	ra,40(sp)
    b434:	df000915 	stw	fp,36(sp)
    b438:	ddc00815 	stw	r23,32(sp)
    b43c:	dd800715 	stw	r22,28(sp)
    b440:	dd400615 	stw	r21,24(sp)
    b444:	dd000515 	stw	r20,20(sp)
    b448:	dc800315 	stw	r18,12(sp)
    b44c:	dc400215 	stw	r17,8(sp)
    b450:	2027883a 	mov	r19,r4
    b454:	2821883a 	mov	r16,r5
    b458:	3800411e 	bne	r7,zero,b560 <__udivdi3+0x13c>
    b45c:	3023883a 	mov	r17,r6
    b460:	2025883a 	mov	r18,r4
    b464:	2980522e 	bgeu	r5,r6,b5b0 <__udivdi3+0x18c>
    b468:	00bfffd4 	movui	r2,65535
    b46c:	282d883a 	mov	r22,r5
    b470:	1180a836 	bltu	r2,r6,b714 <__udivdi3+0x2f0>
    b474:	00803fc4 	movi	r2,255
    b478:	1185803a 	cmpltu	r2,r2,r6
    b47c:	100490fa 	slli	r2,r2,3
    b480:	3086d83a 	srl	r3,r6,r2
    b484:	01000074 	movhi	r4,1
    b488:	21057c04 	addi	r4,r4,5616
    b48c:	20c7883a 	add	r3,r4,r3
    b490:	18c00003 	ldbu	r3,0(r3)
    b494:	1885883a 	add	r2,r3,r2
    b498:	00c00804 	movi	r3,32
    b49c:	1887c83a 	sub	r3,r3,r2
    b4a0:	18000526 	beq	r3,zero,b4b8 <__udivdi3+0x94>
    b4a4:	80e0983a 	sll	r16,r16,r3
    b4a8:	9884d83a 	srl	r2,r19,r2
    b4ac:	30e2983a 	sll	r17,r6,r3
    b4b0:	98e4983a 	sll	r18,r19,r3
    b4b4:	142cb03a 	or	r22,r2,r16
    b4b8:	882ad43a 	srli	r21,r17,16
    b4bc:	b009883a 	mov	r4,r22
    b4c0:	8d3fffcc 	andi	r20,r17,65535
    b4c4:	a80b883a 	mov	r5,r21
    b4c8:	0001d500 	call	1d50 <__umodsi3>
    b4cc:	b009883a 	mov	r4,r22
    b4d0:	a80b883a 	mov	r5,r21
    b4d4:	1027883a 	mov	r19,r2
    b4d8:	0001cec0 	call	1cec <__udivsi3>
    b4dc:	102d883a 	mov	r22,r2
    b4e0:	9826943a 	slli	r19,r19,16
    b4e4:	9004d43a 	srli	r2,r18,16
    b4e8:	a5a1383a 	mul	r16,r20,r22
    b4ec:	14c4b03a 	or	r2,r2,r19
    b4f0:	1400052e 	bgeu	r2,r16,b508 <__udivdi3+0xe4>
    b4f4:	1445883a 	add	r2,r2,r17
    b4f8:	b0ffffc4 	addi	r3,r22,-1
    b4fc:	14400136 	bltu	r2,r17,b504 <__udivdi3+0xe0>
    b500:	14012336 	bltu	r2,r16,b990 <__udivdi3+0x56c>
    b504:	182d883a 	mov	r22,r3
    b508:	1421c83a 	sub	r16,r2,r16
    b50c:	a80b883a 	mov	r5,r21
    b510:	8009883a 	mov	r4,r16
    b514:	0001d500 	call	1d50 <__umodsi3>
    b518:	1027883a 	mov	r19,r2
    b51c:	a80b883a 	mov	r5,r21
    b520:	8009883a 	mov	r4,r16
    b524:	0001cec0 	call	1cec <__udivsi3>
    b528:	9826943a 	slli	r19,r19,16
    b52c:	a0a9383a 	mul	r20,r20,r2
    b530:	94bfffcc 	andi	r18,r18,65535
    b534:	94e4b03a 	or	r18,r18,r19
    b538:	9500052e 	bgeu	r18,r20,b550 <__udivdi3+0x12c>
    b53c:	8ca5883a 	add	r18,r17,r18
    b540:	10ffffc4 	addi	r3,r2,-1
    b544:	9440f136 	bltu	r18,r17,b90c <__udivdi3+0x4e8>
    b548:	9500f02e 	bgeu	r18,r20,b90c <__udivdi3+0x4e8>
    b54c:	10bfff84 	addi	r2,r2,-2
    b550:	b00c943a 	slli	r6,r22,16
    b554:	0007883a 	mov	r3,zero
    b558:	3084b03a 	or	r2,r6,r2
    b55c:	00005906 	br	b6c4 <__udivdi3+0x2a0>
    b560:	29c05636 	bltu	r5,r7,b6bc <__udivdi3+0x298>
    b564:	00bfffd4 	movui	r2,65535
    b568:	11c0622e 	bgeu	r2,r7,b6f4 <__udivdi3+0x2d0>
    b56c:	00804034 	movhi	r2,256
    b570:	10bfffc4 	addi	r2,r2,-1
    b574:	11c0ee36 	bltu	r2,r7,b930 <__udivdi3+0x50c>
    b578:	00800404 	movi	r2,16
    b57c:	3886d83a 	srl	r3,r7,r2
    b580:	01000074 	movhi	r4,1
    b584:	21057c04 	addi	r4,r4,5616
    b588:	20c7883a 	add	r3,r4,r3
    b58c:	18c00003 	ldbu	r3,0(r3)
    b590:	05400804 	movi	r21,32
    b594:	1885883a 	add	r2,r3,r2
    b598:	a8abc83a 	sub	r21,r21,r2
    b59c:	a800621e 	bne	r21,zero,b728 <__udivdi3+0x304>
    b5a0:	3c00e936 	bltu	r7,r16,b948 <__udivdi3+0x524>
    b5a4:	9985403a 	cmpgeu	r2,r19,r6
    b5a8:	0007883a 	mov	r3,zero
    b5ac:	00004506 	br	b6c4 <__udivdi3+0x2a0>
    b5b0:	3000041e 	bne	r6,zero,b5c4 <__udivdi3+0x1a0>
    b5b4:	000b883a 	mov	r5,zero
    b5b8:	01000044 	movi	r4,1
    b5bc:	0001cec0 	call	1cec <__udivsi3>
    b5c0:	1023883a 	mov	r17,r2
    b5c4:	00bfffd4 	movui	r2,65535
    b5c8:	14404e2e 	bgeu	r2,r17,b704 <__udivdi3+0x2e0>
    b5cc:	00804034 	movhi	r2,256
    b5d0:	10bfffc4 	addi	r2,r2,-1
    b5d4:	1440d836 	bltu	r2,r17,b938 <__udivdi3+0x514>
    b5d8:	00800404 	movi	r2,16
    b5dc:	8886d83a 	srl	r3,r17,r2
    b5e0:	01000074 	movhi	r4,1
    b5e4:	21057c04 	addi	r4,r4,5616
    b5e8:	20c7883a 	add	r3,r4,r3
    b5ec:	18c00003 	ldbu	r3,0(r3)
    b5f0:	1885883a 	add	r2,r3,r2
    b5f4:	00c00804 	movi	r3,32
    b5f8:	1887c83a 	sub	r3,r3,r2
    b5fc:	18008f1e 	bne	r3,zero,b83c <__udivdi3+0x418>
    b600:	882ad43a 	srli	r21,r17,16
    b604:	8461c83a 	sub	r16,r16,r17
    b608:	8d3fffcc 	andi	r20,r17,65535
    b60c:	00c00044 	movi	r3,1
    b610:	8009883a 	mov	r4,r16
    b614:	a80b883a 	mov	r5,r21
    b618:	d8c00015 	stw	r3,0(sp)
    b61c:	0001d500 	call	1d50 <__umodsi3>
    b620:	8009883a 	mov	r4,r16
    b624:	a80b883a 	mov	r5,r21
    b628:	1027883a 	mov	r19,r2
    b62c:	0001cec0 	call	1cec <__udivsi3>
    b630:	9826943a 	slli	r19,r19,16
    b634:	9008d43a 	srli	r4,r18,16
    b638:	1521383a 	mul	r16,r2,r20
    b63c:	102d883a 	mov	r22,r2
    b640:	24c8b03a 	or	r4,r4,r19
    b644:	d8c00017 	ldw	r3,0(sp)
    b648:	2400052e 	bgeu	r4,r16,b660 <__udivdi3+0x23c>
    b64c:	2449883a 	add	r4,r4,r17
    b650:	b0bfffc4 	addi	r2,r22,-1
    b654:	24400136 	bltu	r4,r17,b65c <__udivdi3+0x238>
    b658:	2400ca36 	bltu	r4,r16,b984 <__udivdi3+0x560>
    b65c:	102d883a 	mov	r22,r2
    b660:	2421c83a 	sub	r16,r4,r16
    b664:	a80b883a 	mov	r5,r21
    b668:	8009883a 	mov	r4,r16
    b66c:	d8c00015 	stw	r3,0(sp)
    b670:	0001d500 	call	1d50 <__umodsi3>
    b674:	1027883a 	mov	r19,r2
    b678:	a80b883a 	mov	r5,r21
    b67c:	8009883a 	mov	r4,r16
    b680:	0001cec0 	call	1cec <__udivsi3>
    b684:	9826943a 	slli	r19,r19,16
    b688:	1529383a 	mul	r20,r2,r20
    b68c:	94bfffcc 	andi	r18,r18,65535
    b690:	94e4b03a 	or	r18,r18,r19
    b694:	d8c00017 	ldw	r3,0(sp)
    b698:	9500052e 	bgeu	r18,r20,b6b0 <__udivdi3+0x28c>
    b69c:	8ca5883a 	add	r18,r17,r18
    b6a0:	113fffc4 	addi	r4,r2,-1
    b6a4:	94409736 	bltu	r18,r17,b904 <__udivdi3+0x4e0>
    b6a8:	9500962e 	bgeu	r18,r20,b904 <__udivdi3+0x4e0>
    b6ac:	10bfff84 	addi	r2,r2,-2
    b6b0:	b00c943a 	slli	r6,r22,16
    b6b4:	3084b03a 	or	r2,r6,r2
    b6b8:	00000206 	br	b6c4 <__udivdi3+0x2a0>
    b6bc:	0007883a 	mov	r3,zero
    b6c0:	0005883a 	mov	r2,zero
    b6c4:	dfc00a17 	ldw	ra,40(sp)
    b6c8:	df000917 	ldw	fp,36(sp)
    b6cc:	ddc00817 	ldw	r23,32(sp)
    b6d0:	dd800717 	ldw	r22,28(sp)
    b6d4:	dd400617 	ldw	r21,24(sp)
    b6d8:	dd000517 	ldw	r20,20(sp)
    b6dc:	dcc00417 	ldw	r19,16(sp)
    b6e0:	dc800317 	ldw	r18,12(sp)
    b6e4:	dc400217 	ldw	r17,8(sp)
    b6e8:	dc000117 	ldw	r16,4(sp)
    b6ec:	dec00b04 	addi	sp,sp,44
    b6f0:	f800283a 	ret
    b6f4:	00803fc4 	movi	r2,255
    b6f8:	11c5803a 	cmpltu	r2,r2,r7
    b6fc:	100490fa 	slli	r2,r2,3
    b700:	003f9e06 	br	b57c <__alt_data_end+0xff00b57c>
    b704:	00803fc4 	movi	r2,255
    b708:	1445803a 	cmpltu	r2,r2,r17
    b70c:	100490fa 	slli	r2,r2,3
    b710:	003fb206 	br	b5dc <__alt_data_end+0xff00b5dc>
    b714:	00804034 	movhi	r2,256
    b718:	10bfffc4 	addi	r2,r2,-1
    b71c:	11808836 	bltu	r2,r6,b940 <__udivdi3+0x51c>
    b720:	00800404 	movi	r2,16
    b724:	003f5606 	br	b480 <__alt_data_end+0xff00b480>
    b728:	30aed83a 	srl	r23,r6,r2
    b72c:	3d4e983a 	sll	r7,r7,r21
    b730:	80acd83a 	srl	r22,r16,r2
    b734:	9884d83a 	srl	r2,r19,r2
    b738:	3deeb03a 	or	r23,r7,r23
    b73c:	b824d43a 	srli	r18,r23,16
    b740:	8560983a 	sll	r16,r16,r21
    b744:	b009883a 	mov	r4,r22
    b748:	900b883a 	mov	r5,r18
    b74c:	3568983a 	sll	r20,r6,r21
    b750:	1420b03a 	or	r16,r2,r16
    b754:	0001d500 	call	1d50 <__umodsi3>
    b758:	b009883a 	mov	r4,r22
    b75c:	900b883a 	mov	r5,r18
    b760:	1023883a 	mov	r17,r2
    b764:	0001cec0 	call	1cec <__udivsi3>
    b768:	8808943a 	slli	r4,r17,16
    b76c:	bf3fffcc 	andi	fp,r23,65535
    b770:	8006d43a 	srli	r3,r16,16
    b774:	e0a3383a 	mul	r17,fp,r2
    b778:	100d883a 	mov	r6,r2
    b77c:	1906b03a 	or	r3,r3,r4
    b780:	1c40042e 	bgeu	r3,r17,b794 <__udivdi3+0x370>
    b784:	1dc7883a 	add	r3,r3,r23
    b788:	10bfffc4 	addi	r2,r2,-1
    b78c:	1dc0752e 	bgeu	r3,r23,b964 <__udivdi3+0x540>
    b790:	100d883a 	mov	r6,r2
    b794:	1c63c83a 	sub	r17,r3,r17
    b798:	900b883a 	mov	r5,r18
    b79c:	8809883a 	mov	r4,r17
    b7a0:	d9800015 	stw	r6,0(sp)
    b7a4:	0001d500 	call	1d50 <__umodsi3>
    b7a8:	102d883a 	mov	r22,r2
    b7ac:	8809883a 	mov	r4,r17
    b7b0:	900b883a 	mov	r5,r18
    b7b4:	0001cec0 	call	1cec <__udivsi3>
    b7b8:	b02c943a 	slli	r22,r22,16
    b7bc:	e089383a 	mul	r4,fp,r2
    b7c0:	843fffcc 	andi	r16,r16,65535
    b7c4:	85a0b03a 	or	r16,r16,r22
    b7c8:	d9800017 	ldw	r6,0(sp)
    b7cc:	8100042e 	bgeu	r16,r4,b7e0 <__udivdi3+0x3bc>
    b7d0:	85e1883a 	add	r16,r16,r23
    b7d4:	10ffffc4 	addi	r3,r2,-1
    b7d8:	85c05e2e 	bgeu	r16,r23,b954 <__udivdi3+0x530>
    b7dc:	1805883a 	mov	r2,r3
    b7e0:	300c943a 	slli	r6,r6,16
    b7e4:	a17fffcc 	andi	r5,r20,65535
    b7e8:	a028d43a 	srli	r20,r20,16
    b7ec:	3084b03a 	or	r2,r6,r2
    b7f0:	10ffffcc 	andi	r3,r2,65535
    b7f4:	100cd43a 	srli	r6,r2,16
    b7f8:	194f383a 	mul	r7,r3,r5
    b7fc:	1d07383a 	mul	r3,r3,r20
    b800:	314b383a 	mul	r5,r6,r5
    b804:	3810d43a 	srli	r8,r7,16
    b808:	8121c83a 	sub	r16,r16,r4
    b80c:	1947883a 	add	r3,r3,r5
    b810:	40c7883a 	add	r3,r8,r3
    b814:	350d383a 	mul	r6,r6,r20
    b818:	1940022e 	bgeu	r3,r5,b824 <__udivdi3+0x400>
    b81c:	01000074 	movhi	r4,1
    b820:	310d883a 	add	r6,r6,r4
    b824:	1828d43a 	srli	r20,r3,16
    b828:	a18d883a 	add	r6,r20,r6
    b82c:	81803e36 	bltu	r16,r6,b928 <__udivdi3+0x504>
    b830:	81803826 	beq	r16,r6,b914 <__udivdi3+0x4f0>
    b834:	0007883a 	mov	r3,zero
    b838:	003fa206 	br	b6c4 <__alt_data_end+0xff00b6c4>
    b83c:	88e2983a 	sll	r17,r17,r3
    b840:	80a8d83a 	srl	r20,r16,r2
    b844:	80e0983a 	sll	r16,r16,r3
    b848:	882ad43a 	srli	r21,r17,16
    b84c:	9884d83a 	srl	r2,r19,r2
    b850:	a009883a 	mov	r4,r20
    b854:	a80b883a 	mov	r5,r21
    b858:	142eb03a 	or	r23,r2,r16
    b85c:	98e4983a 	sll	r18,r19,r3
    b860:	0001d500 	call	1d50 <__umodsi3>
    b864:	a009883a 	mov	r4,r20
    b868:	a80b883a 	mov	r5,r21
    b86c:	1021883a 	mov	r16,r2
    b870:	0001cec0 	call	1cec <__udivsi3>
    b874:	1039883a 	mov	fp,r2
    b878:	8d3fffcc 	andi	r20,r17,65535
    b87c:	8020943a 	slli	r16,r16,16
    b880:	b804d43a 	srli	r2,r23,16
    b884:	a72d383a 	mul	r22,r20,fp
    b888:	1404b03a 	or	r2,r2,r16
    b88c:	1580062e 	bgeu	r2,r22,b8a8 <__udivdi3+0x484>
    b890:	1445883a 	add	r2,r2,r17
    b894:	e0ffffc4 	addi	r3,fp,-1
    b898:	14403836 	bltu	r2,r17,b97c <__udivdi3+0x558>
    b89c:	1580372e 	bgeu	r2,r22,b97c <__udivdi3+0x558>
    b8a0:	e73fff84 	addi	fp,fp,-2
    b8a4:	1445883a 	add	r2,r2,r17
    b8a8:	15adc83a 	sub	r22,r2,r22
    b8ac:	a80b883a 	mov	r5,r21
    b8b0:	b009883a 	mov	r4,r22
    b8b4:	0001d500 	call	1d50 <__umodsi3>
    b8b8:	1027883a 	mov	r19,r2
    b8bc:	b009883a 	mov	r4,r22
    b8c0:	a80b883a 	mov	r5,r21
    b8c4:	0001cec0 	call	1cec <__udivsi3>
    b8c8:	9826943a 	slli	r19,r19,16
    b8cc:	a0a1383a 	mul	r16,r20,r2
    b8d0:	b93fffcc 	andi	r4,r23,65535
    b8d4:	24c8b03a 	or	r4,r4,r19
    b8d8:	2400062e 	bgeu	r4,r16,b8f4 <__udivdi3+0x4d0>
    b8dc:	2449883a 	add	r4,r4,r17
    b8e0:	10ffffc4 	addi	r3,r2,-1
    b8e4:	24402336 	bltu	r4,r17,b974 <__udivdi3+0x550>
    b8e8:	2400222e 	bgeu	r4,r16,b974 <__udivdi3+0x550>
    b8ec:	10bfff84 	addi	r2,r2,-2
    b8f0:	2449883a 	add	r4,r4,r17
    b8f4:	e038943a 	slli	fp,fp,16
    b8f8:	2421c83a 	sub	r16,r4,r16
    b8fc:	e086b03a 	or	r3,fp,r2
    b900:	003f4306 	br	b610 <__alt_data_end+0xff00b610>
    b904:	2005883a 	mov	r2,r4
    b908:	003f6906 	br	b6b0 <__alt_data_end+0xff00b6b0>
    b90c:	1805883a 	mov	r2,r3
    b910:	003f0f06 	br	b550 <__alt_data_end+0xff00b550>
    b914:	1806943a 	slli	r3,r3,16
    b918:	9d66983a 	sll	r19,r19,r21
    b91c:	39ffffcc 	andi	r7,r7,65535
    b920:	19c7883a 	add	r3,r3,r7
    b924:	98ffc32e 	bgeu	r19,r3,b834 <__alt_data_end+0xff00b834>
    b928:	10bfffc4 	addi	r2,r2,-1
    b92c:	003fc106 	br	b834 <__alt_data_end+0xff00b834>
    b930:	00800604 	movi	r2,24
    b934:	003f1106 	br	b57c <__alt_data_end+0xff00b57c>
    b938:	00800604 	movi	r2,24
    b93c:	003f2706 	br	b5dc <__alt_data_end+0xff00b5dc>
    b940:	00800604 	movi	r2,24
    b944:	003ece06 	br	b480 <__alt_data_end+0xff00b480>
    b948:	0007883a 	mov	r3,zero
    b94c:	00800044 	movi	r2,1
    b950:	003f5c06 	br	b6c4 <__alt_data_end+0xff00b6c4>
    b954:	813fa12e 	bgeu	r16,r4,b7dc <__alt_data_end+0xff00b7dc>
    b958:	10bfff84 	addi	r2,r2,-2
    b95c:	85e1883a 	add	r16,r16,r23
    b960:	003f9f06 	br	b7e0 <__alt_data_end+0xff00b7e0>
    b964:	1c7f8a2e 	bgeu	r3,r17,b790 <__alt_data_end+0xff00b790>
    b968:	31bfff84 	addi	r6,r6,-2
    b96c:	1dc7883a 	add	r3,r3,r23
    b970:	003f8806 	br	b794 <__alt_data_end+0xff00b794>
    b974:	1805883a 	mov	r2,r3
    b978:	003fde06 	br	b8f4 <__alt_data_end+0xff00b8f4>
    b97c:	1839883a 	mov	fp,r3
    b980:	003fc906 	br	b8a8 <__alt_data_end+0xff00b8a8>
    b984:	b5bfff84 	addi	r22,r22,-2
    b988:	2449883a 	add	r4,r4,r17
    b98c:	003f3406 	br	b660 <__alt_data_end+0xff00b660>
    b990:	b5bfff84 	addi	r22,r22,-2
    b994:	1445883a 	add	r2,r2,r17
    b998:	003edb06 	br	b508 <__alt_data_end+0xff00b508>

0000b99c <__umoddi3>:
    b99c:	defff404 	addi	sp,sp,-48
    b9a0:	df000a15 	stw	fp,40(sp)
    b9a4:	dc400315 	stw	r17,12(sp)
    b9a8:	dc000215 	stw	r16,8(sp)
    b9ac:	dfc00b15 	stw	ra,44(sp)
    b9b0:	ddc00915 	stw	r23,36(sp)
    b9b4:	dd800815 	stw	r22,32(sp)
    b9b8:	dd400715 	stw	r21,28(sp)
    b9bc:	dd000615 	stw	r20,24(sp)
    b9c0:	dcc00515 	stw	r19,20(sp)
    b9c4:	dc800415 	stw	r18,16(sp)
    b9c8:	2021883a 	mov	r16,r4
    b9cc:	2823883a 	mov	r17,r5
    b9d0:	2839883a 	mov	fp,r5
    b9d4:	38003c1e 	bne	r7,zero,bac8 <__umoddi3+0x12c>
    b9d8:	3027883a 	mov	r19,r6
    b9dc:	2029883a 	mov	r20,r4
    b9e0:	2980512e 	bgeu	r5,r6,bb28 <__umoddi3+0x18c>
    b9e4:	00bfffd4 	movui	r2,65535
    b9e8:	11809a36 	bltu	r2,r6,bc54 <__umoddi3+0x2b8>
    b9ec:	01003fc4 	movi	r4,255
    b9f0:	2189803a 	cmpltu	r4,r4,r6
    b9f4:	200890fa 	slli	r4,r4,3
    b9f8:	3104d83a 	srl	r2,r6,r4
    b9fc:	00c00074 	movhi	r3,1
    ba00:	18c57c04 	addi	r3,r3,5616
    ba04:	1885883a 	add	r2,r3,r2
    ba08:	10c00003 	ldbu	r3,0(r2)
    ba0c:	00800804 	movi	r2,32
    ba10:	1909883a 	add	r4,r3,r4
    ba14:	1125c83a 	sub	r18,r2,r4
    ba18:	90000526 	beq	r18,zero,ba30 <__umoddi3+0x94>
    ba1c:	8ca2983a 	sll	r17,r17,r18
    ba20:	8108d83a 	srl	r4,r16,r4
    ba24:	34a6983a 	sll	r19,r6,r18
    ba28:	84a8983a 	sll	r20,r16,r18
    ba2c:	2478b03a 	or	fp,r4,r17
    ba30:	982ed43a 	srli	r23,r19,16
    ba34:	e009883a 	mov	r4,fp
    ba38:	9dbfffcc 	andi	r22,r19,65535
    ba3c:	b80b883a 	mov	r5,r23
    ba40:	0001d500 	call	1d50 <__umodsi3>
    ba44:	e009883a 	mov	r4,fp
    ba48:	b80b883a 	mov	r5,r23
    ba4c:	102b883a 	mov	r21,r2
    ba50:	0001cec0 	call	1cec <__udivsi3>
    ba54:	a806943a 	slli	r3,r21,16
    ba58:	a008d43a 	srli	r4,r20,16
    ba5c:	b085383a 	mul	r2,r22,r2
    ba60:	20c8b03a 	or	r4,r4,r3
    ba64:	2080032e 	bgeu	r4,r2,ba74 <__umoddi3+0xd8>
    ba68:	24c9883a 	add	r4,r4,r19
    ba6c:	24c00136 	bltu	r4,r19,ba74 <__umoddi3+0xd8>
    ba70:	20811036 	bltu	r4,r2,beb4 <__umoddi3+0x518>
    ba74:	20abc83a 	sub	r21,r4,r2
    ba78:	b80b883a 	mov	r5,r23
    ba7c:	a809883a 	mov	r4,r21
    ba80:	0001d500 	call	1d50 <__umodsi3>
    ba84:	1023883a 	mov	r17,r2
    ba88:	b80b883a 	mov	r5,r23
    ba8c:	a809883a 	mov	r4,r21
    ba90:	0001cec0 	call	1cec <__udivsi3>
    ba94:	8822943a 	slli	r17,r17,16
    ba98:	b085383a 	mul	r2,r22,r2
    ba9c:	a0ffffcc 	andi	r3,r20,65535
    baa0:	1c46b03a 	or	r3,r3,r17
    baa4:	1880042e 	bgeu	r3,r2,bab8 <__umoddi3+0x11c>
    baa8:	1cc7883a 	add	r3,r3,r19
    baac:	1cc00236 	bltu	r3,r19,bab8 <__umoddi3+0x11c>
    bab0:	1880012e 	bgeu	r3,r2,bab8 <__umoddi3+0x11c>
    bab4:	1cc7883a 	add	r3,r3,r19
    bab8:	1885c83a 	sub	r2,r3,r2
    babc:	1484d83a 	srl	r2,r2,r18
    bac0:	0007883a 	mov	r3,zero
    bac4:	00004f06 	br	bc04 <__umoddi3+0x268>
    bac8:	29c04c36 	bltu	r5,r7,bbfc <__umoddi3+0x260>
    bacc:	00bfffd4 	movui	r2,65535
    bad0:	11c0582e 	bgeu	r2,r7,bc34 <__umoddi3+0x298>
    bad4:	00804034 	movhi	r2,256
    bad8:	10bfffc4 	addi	r2,r2,-1
    badc:	11c0e736 	bltu	r2,r7,be7c <__umoddi3+0x4e0>
    bae0:	01000404 	movi	r4,16
    bae4:	3904d83a 	srl	r2,r7,r4
    bae8:	00c00074 	movhi	r3,1
    baec:	18c57c04 	addi	r3,r3,5616
    baf0:	1885883a 	add	r2,r3,r2
    baf4:	14c00003 	ldbu	r19,0(r2)
    baf8:	00c00804 	movi	r3,32
    bafc:	9927883a 	add	r19,r19,r4
    bb00:	1ce9c83a 	sub	r20,r3,r19
    bb04:	a000581e 	bne	r20,zero,bc68 <__umoddi3+0x2cc>
    bb08:	3c400136 	bltu	r7,r17,bb10 <__umoddi3+0x174>
    bb0c:	8180eb36 	bltu	r16,r6,bebc <__umoddi3+0x520>
    bb10:	8185c83a 	sub	r2,r16,r6
    bb14:	89e3c83a 	sub	r17,r17,r7
    bb18:	8089803a 	cmpltu	r4,r16,r2
    bb1c:	8939c83a 	sub	fp,r17,r4
    bb20:	e007883a 	mov	r3,fp
    bb24:	00003706 	br	bc04 <__umoddi3+0x268>
    bb28:	3000041e 	bne	r6,zero,bb3c <__umoddi3+0x1a0>
    bb2c:	000b883a 	mov	r5,zero
    bb30:	01000044 	movi	r4,1
    bb34:	0001cec0 	call	1cec <__udivsi3>
    bb38:	1027883a 	mov	r19,r2
    bb3c:	00bfffd4 	movui	r2,65535
    bb40:	14c0402e 	bgeu	r2,r19,bc44 <__umoddi3+0x2a8>
    bb44:	00804034 	movhi	r2,256
    bb48:	10bfffc4 	addi	r2,r2,-1
    bb4c:	14c0cd36 	bltu	r2,r19,be84 <__umoddi3+0x4e8>
    bb50:	00800404 	movi	r2,16
    bb54:	9886d83a 	srl	r3,r19,r2
    bb58:	01000074 	movhi	r4,1
    bb5c:	21057c04 	addi	r4,r4,5616
    bb60:	20c7883a 	add	r3,r4,r3
    bb64:	18c00003 	ldbu	r3,0(r3)
    bb68:	1887883a 	add	r3,r3,r2
    bb6c:	00800804 	movi	r2,32
    bb70:	10e5c83a 	sub	r18,r2,r3
    bb74:	9000901e 	bne	r18,zero,bdb8 <__umoddi3+0x41c>
    bb78:	982cd43a 	srli	r22,r19,16
    bb7c:	8ce3c83a 	sub	r17,r17,r19
    bb80:	9d7fffcc 	andi	r21,r19,65535
    bb84:	b00b883a 	mov	r5,r22
    bb88:	8809883a 	mov	r4,r17
    bb8c:	0001d500 	call	1d50 <__umodsi3>
    bb90:	8809883a 	mov	r4,r17
    bb94:	b00b883a 	mov	r5,r22
    bb98:	1021883a 	mov	r16,r2
    bb9c:	0001cec0 	call	1cec <__udivsi3>
    bba0:	8006943a 	slli	r3,r16,16
    bba4:	a008d43a 	srli	r4,r20,16
    bba8:	1545383a 	mul	r2,r2,r21
    bbac:	20c8b03a 	or	r4,r4,r3
    bbb0:	2080042e 	bgeu	r4,r2,bbc4 <__umoddi3+0x228>
    bbb4:	24c9883a 	add	r4,r4,r19
    bbb8:	24c00236 	bltu	r4,r19,bbc4 <__umoddi3+0x228>
    bbbc:	2080012e 	bgeu	r4,r2,bbc4 <__umoddi3+0x228>
    bbc0:	24c9883a 	add	r4,r4,r19
    bbc4:	20a1c83a 	sub	r16,r4,r2
    bbc8:	b00b883a 	mov	r5,r22
    bbcc:	8009883a 	mov	r4,r16
    bbd0:	0001d500 	call	1d50 <__umodsi3>
    bbd4:	1023883a 	mov	r17,r2
    bbd8:	b00b883a 	mov	r5,r22
    bbdc:	8009883a 	mov	r4,r16
    bbe0:	0001cec0 	call	1cec <__udivsi3>
    bbe4:	8822943a 	slli	r17,r17,16
    bbe8:	1545383a 	mul	r2,r2,r21
    bbec:	a53fffcc 	andi	r20,r20,65535
    bbf0:	a446b03a 	or	r3,r20,r17
    bbf4:	18bfb02e 	bgeu	r3,r2,bab8 <__alt_data_end+0xff00bab8>
    bbf8:	003fab06 	br	baa8 <__alt_data_end+0xff00baa8>
    bbfc:	2005883a 	mov	r2,r4
    bc00:	2807883a 	mov	r3,r5
    bc04:	dfc00b17 	ldw	ra,44(sp)
    bc08:	df000a17 	ldw	fp,40(sp)
    bc0c:	ddc00917 	ldw	r23,36(sp)
    bc10:	dd800817 	ldw	r22,32(sp)
    bc14:	dd400717 	ldw	r21,28(sp)
    bc18:	dd000617 	ldw	r20,24(sp)
    bc1c:	dcc00517 	ldw	r19,20(sp)
    bc20:	dc800417 	ldw	r18,16(sp)
    bc24:	dc400317 	ldw	r17,12(sp)
    bc28:	dc000217 	ldw	r16,8(sp)
    bc2c:	dec00c04 	addi	sp,sp,48
    bc30:	f800283a 	ret
    bc34:	04c03fc4 	movi	r19,255
    bc38:	99c9803a 	cmpltu	r4,r19,r7
    bc3c:	200890fa 	slli	r4,r4,3
    bc40:	003fa806 	br	bae4 <__alt_data_end+0xff00bae4>
    bc44:	00803fc4 	movi	r2,255
    bc48:	14c5803a 	cmpltu	r2,r2,r19
    bc4c:	100490fa 	slli	r2,r2,3
    bc50:	003fc006 	br	bb54 <__alt_data_end+0xff00bb54>
    bc54:	00804034 	movhi	r2,256
    bc58:	10bfffc4 	addi	r2,r2,-1
    bc5c:	11808b36 	bltu	r2,r6,be8c <__umoddi3+0x4f0>
    bc60:	01000404 	movi	r4,16
    bc64:	003f6406 	br	b9f8 <__alt_data_end+0xff00b9f8>
    bc68:	34c4d83a 	srl	r2,r6,r19
    bc6c:	3d0e983a 	sll	r7,r7,r20
    bc70:	8cf8d83a 	srl	fp,r17,r19
    bc74:	8d10983a 	sll	r8,r17,r20
    bc78:	38aab03a 	or	r21,r7,r2
    bc7c:	a82cd43a 	srli	r22,r21,16
    bc80:	84e2d83a 	srl	r17,r16,r19
    bc84:	e009883a 	mov	r4,fp
    bc88:	b00b883a 	mov	r5,r22
    bc8c:	8a22b03a 	or	r17,r17,r8
    bc90:	3524983a 	sll	r18,r6,r20
    bc94:	0001d500 	call	1d50 <__umodsi3>
    bc98:	e009883a 	mov	r4,fp
    bc9c:	b00b883a 	mov	r5,r22
    bca0:	102f883a 	mov	r23,r2
    bca4:	0001cec0 	call	1cec <__udivsi3>
    bca8:	100d883a 	mov	r6,r2
    bcac:	b808943a 	slli	r4,r23,16
    bcb0:	aa3fffcc 	andi	r8,r21,65535
    bcb4:	8804d43a 	srli	r2,r17,16
    bcb8:	41af383a 	mul	r23,r8,r6
    bcbc:	8520983a 	sll	r16,r16,r20
    bcc0:	1104b03a 	or	r2,r2,r4
    bcc4:	15c0042e 	bgeu	r2,r23,bcd8 <__umoddi3+0x33c>
    bcc8:	1545883a 	add	r2,r2,r21
    bccc:	30ffffc4 	addi	r3,r6,-1
    bcd0:	1540742e 	bgeu	r2,r21,bea4 <__umoddi3+0x508>
    bcd4:	180d883a 	mov	r6,r3
    bcd8:	15efc83a 	sub	r23,r2,r23
    bcdc:	b00b883a 	mov	r5,r22
    bce0:	b809883a 	mov	r4,r23
    bce4:	d9800115 	stw	r6,4(sp)
    bce8:	da000015 	stw	r8,0(sp)
    bcec:	0001d500 	call	1d50 <__umodsi3>
    bcf0:	b00b883a 	mov	r5,r22
    bcf4:	b809883a 	mov	r4,r23
    bcf8:	1039883a 	mov	fp,r2
    bcfc:	0001cec0 	call	1cec <__udivsi3>
    bd00:	da000017 	ldw	r8,0(sp)
    bd04:	e038943a 	slli	fp,fp,16
    bd08:	100b883a 	mov	r5,r2
    bd0c:	4089383a 	mul	r4,r8,r2
    bd10:	8a3fffcc 	andi	r8,r17,65535
    bd14:	4710b03a 	or	r8,r8,fp
    bd18:	d9800117 	ldw	r6,4(sp)
    bd1c:	4100042e 	bgeu	r8,r4,bd30 <__umoddi3+0x394>
    bd20:	4551883a 	add	r8,r8,r21
    bd24:	10bfffc4 	addi	r2,r2,-1
    bd28:	45405a2e 	bgeu	r8,r21,be94 <__umoddi3+0x4f8>
    bd2c:	100b883a 	mov	r5,r2
    bd30:	300c943a 	slli	r6,r6,16
    bd34:	91ffffcc 	andi	r7,r18,65535
    bd38:	9004d43a 	srli	r2,r18,16
    bd3c:	314cb03a 	or	r6,r6,r5
    bd40:	317fffcc 	andi	r5,r6,65535
    bd44:	300cd43a 	srli	r6,r6,16
    bd48:	29d3383a 	mul	r9,r5,r7
    bd4c:	288b383a 	mul	r5,r5,r2
    bd50:	31cf383a 	mul	r7,r6,r7
    bd54:	4806d43a 	srli	r3,r9,16
    bd58:	4111c83a 	sub	r8,r8,r4
    bd5c:	29cb883a 	add	r5,r5,r7
    bd60:	194b883a 	add	r5,r3,r5
    bd64:	3085383a 	mul	r2,r6,r2
    bd68:	29c0022e 	bgeu	r5,r7,bd74 <__umoddi3+0x3d8>
    bd6c:	00c00074 	movhi	r3,1
    bd70:	10c5883a 	add	r2,r2,r3
    bd74:	2808d43a 	srli	r4,r5,16
    bd78:	280a943a 	slli	r5,r5,16
    bd7c:	4a7fffcc 	andi	r9,r9,65535
    bd80:	2085883a 	add	r2,r4,r2
    bd84:	2a4b883a 	add	r5,r5,r9
    bd88:	40803636 	bltu	r8,r2,be64 <__umoddi3+0x4c8>
    bd8c:	40804d26 	beq	r8,r2,bec4 <__umoddi3+0x528>
    bd90:	4089c83a 	sub	r4,r8,r2
    bd94:	280f883a 	mov	r7,r5
    bd98:	81cfc83a 	sub	r7,r16,r7
    bd9c:	81c7803a 	cmpltu	r3,r16,r7
    bda0:	20c7c83a 	sub	r3,r4,r3
    bda4:	1cc4983a 	sll	r2,r3,r19
    bda8:	3d0ed83a 	srl	r7,r7,r20
    bdac:	1d06d83a 	srl	r3,r3,r20
    bdb0:	11c4b03a 	or	r2,r2,r7
    bdb4:	003f9306 	br	bc04 <__alt_data_end+0xff00bc04>
    bdb8:	9ca6983a 	sll	r19,r19,r18
    bdbc:	88e8d83a 	srl	r20,r17,r3
    bdc0:	80c4d83a 	srl	r2,r16,r3
    bdc4:	982cd43a 	srli	r22,r19,16
    bdc8:	8ca2983a 	sll	r17,r17,r18
    bdcc:	a009883a 	mov	r4,r20
    bdd0:	b00b883a 	mov	r5,r22
    bdd4:	1478b03a 	or	fp,r2,r17
    bdd8:	0001d500 	call	1d50 <__umodsi3>
    bddc:	a009883a 	mov	r4,r20
    bde0:	b00b883a 	mov	r5,r22
    bde4:	1023883a 	mov	r17,r2
    bde8:	0001cec0 	call	1cec <__udivsi3>
    bdec:	9d7fffcc 	andi	r21,r19,65535
    bdf0:	880a943a 	slli	r5,r17,16
    bdf4:	e008d43a 	srli	r4,fp,16
    bdf8:	a885383a 	mul	r2,r21,r2
    bdfc:	84a8983a 	sll	r20,r16,r18
    be00:	2148b03a 	or	r4,r4,r5
    be04:	2080042e 	bgeu	r4,r2,be18 <__umoddi3+0x47c>
    be08:	24c9883a 	add	r4,r4,r19
    be0c:	24c00236 	bltu	r4,r19,be18 <__umoddi3+0x47c>
    be10:	2080012e 	bgeu	r4,r2,be18 <__umoddi3+0x47c>
    be14:	24c9883a 	add	r4,r4,r19
    be18:	20a3c83a 	sub	r17,r4,r2
    be1c:	b00b883a 	mov	r5,r22
    be20:	8809883a 	mov	r4,r17
    be24:	0001d500 	call	1d50 <__umodsi3>
    be28:	102f883a 	mov	r23,r2
    be2c:	8809883a 	mov	r4,r17
    be30:	b00b883a 	mov	r5,r22
    be34:	0001cec0 	call	1cec <__udivsi3>
    be38:	b82e943a 	slli	r23,r23,16
    be3c:	a885383a 	mul	r2,r21,r2
    be40:	e13fffcc 	andi	r4,fp,65535
    be44:	25c8b03a 	or	r4,r4,r23
    be48:	2080042e 	bgeu	r4,r2,be5c <__umoddi3+0x4c0>
    be4c:	24c9883a 	add	r4,r4,r19
    be50:	24c00236 	bltu	r4,r19,be5c <__umoddi3+0x4c0>
    be54:	2080012e 	bgeu	r4,r2,be5c <__umoddi3+0x4c0>
    be58:	24c9883a 	add	r4,r4,r19
    be5c:	20a3c83a 	sub	r17,r4,r2
    be60:	003f4806 	br	bb84 <__alt_data_end+0xff00bb84>
    be64:	2c8fc83a 	sub	r7,r5,r18
    be68:	1545c83a 	sub	r2,r2,r21
    be6c:	29cb803a 	cmpltu	r5,r5,r7
    be70:	1145c83a 	sub	r2,r2,r5
    be74:	4089c83a 	sub	r4,r8,r2
    be78:	003fc706 	br	bd98 <__alt_data_end+0xff00bd98>
    be7c:	01000604 	movi	r4,24
    be80:	003f1806 	br	bae4 <__alt_data_end+0xff00bae4>
    be84:	00800604 	movi	r2,24
    be88:	003f3206 	br	bb54 <__alt_data_end+0xff00bb54>
    be8c:	01000604 	movi	r4,24
    be90:	003ed906 	br	b9f8 <__alt_data_end+0xff00b9f8>
    be94:	413fa52e 	bgeu	r8,r4,bd2c <__alt_data_end+0xff00bd2c>
    be98:	297fff84 	addi	r5,r5,-2
    be9c:	4551883a 	add	r8,r8,r21
    bea0:	003fa306 	br	bd30 <__alt_data_end+0xff00bd30>
    bea4:	15ff8b2e 	bgeu	r2,r23,bcd4 <__alt_data_end+0xff00bcd4>
    bea8:	31bfff84 	addi	r6,r6,-2
    beac:	1545883a 	add	r2,r2,r21
    beb0:	003f8906 	br	bcd8 <__alt_data_end+0xff00bcd8>
    beb4:	24c9883a 	add	r4,r4,r19
    beb8:	003eee06 	br	ba74 <__alt_data_end+0xff00ba74>
    bebc:	8005883a 	mov	r2,r16
    bec0:	003f1706 	br	bb20 <__alt_data_end+0xff00bb20>
    bec4:	817fe736 	bltu	r16,r5,be64 <__alt_data_end+0xff00be64>
    bec8:	280f883a 	mov	r7,r5
    becc:	0009883a 	mov	r4,zero
    bed0:	003fb106 	br	bd98 <__alt_data_end+0xff00bd98>

0000bed4 <__adddf3>:
    bed4:	02c00434 	movhi	r11,16
    bed8:	5affffc4 	addi	r11,r11,-1
    bedc:	2806d7fa 	srli	r3,r5,31
    bee0:	2ad4703a 	and	r10,r5,r11
    bee4:	3ad2703a 	and	r9,r7,r11
    bee8:	3804d53a 	srli	r2,r7,20
    beec:	3018d77a 	srli	r12,r6,29
    bef0:	280ad53a 	srli	r5,r5,20
    bef4:	501490fa 	slli	r10,r10,3
    bef8:	2010d77a 	srli	r8,r4,29
    befc:	481290fa 	slli	r9,r9,3
    bf00:	380ed7fa 	srli	r7,r7,31
    bf04:	defffb04 	addi	sp,sp,-20
    bf08:	dc800215 	stw	r18,8(sp)
    bf0c:	dc400115 	stw	r17,4(sp)
    bf10:	dc000015 	stw	r16,0(sp)
    bf14:	dfc00415 	stw	ra,16(sp)
    bf18:	dcc00315 	stw	r19,12(sp)
    bf1c:	1c803fcc 	andi	r18,r3,255
    bf20:	2c01ffcc 	andi	r16,r5,2047
    bf24:	5210b03a 	or	r8,r10,r8
    bf28:	202290fa 	slli	r17,r4,3
    bf2c:	1081ffcc 	andi	r2,r2,2047
    bf30:	4b12b03a 	or	r9,r9,r12
    bf34:	300c90fa 	slli	r6,r6,3
    bf38:	91c07526 	beq	r18,r7,c110 <__adddf3+0x23c>
    bf3c:	8087c83a 	sub	r3,r16,r2
    bf40:	00c0ab0e 	bge	zero,r3,c1f0 <__adddf3+0x31c>
    bf44:	10002a1e 	bne	r2,zero,bff0 <__adddf3+0x11c>
    bf48:	4984b03a 	or	r2,r9,r6
    bf4c:	1000961e 	bne	r2,zero,c1a8 <__adddf3+0x2d4>
    bf50:	888001cc 	andi	r2,r17,7
    bf54:	10000726 	beq	r2,zero,bf74 <__adddf3+0xa0>
    bf58:	888003cc 	andi	r2,r17,15
    bf5c:	00c00104 	movi	r3,4
    bf60:	10c00426 	beq	r2,r3,bf74 <__adddf3+0xa0>
    bf64:	88c7883a 	add	r3,r17,r3
    bf68:	1c63803a 	cmpltu	r17,r3,r17
    bf6c:	4451883a 	add	r8,r8,r17
    bf70:	1823883a 	mov	r17,r3
    bf74:	4080202c 	andhi	r2,r8,128
    bf78:	10005926 	beq	r2,zero,c0e0 <__adddf3+0x20c>
    bf7c:	84000044 	addi	r16,r16,1
    bf80:	0081ffc4 	movi	r2,2047
    bf84:	8080ba26 	beq	r16,r2,c270 <__adddf3+0x39c>
    bf88:	00bfe034 	movhi	r2,65408
    bf8c:	10bfffc4 	addi	r2,r2,-1
    bf90:	4090703a 	and	r8,r8,r2
    bf94:	4004977a 	slli	r2,r8,29
    bf98:	4010927a 	slli	r8,r8,9
    bf9c:	8822d0fa 	srli	r17,r17,3
    bfa0:	8401ffcc 	andi	r16,r16,2047
    bfa4:	4010d33a 	srli	r8,r8,12
    bfa8:	9007883a 	mov	r3,r18
    bfac:	1444b03a 	or	r2,r2,r17
    bfb0:	8401ffcc 	andi	r16,r16,2047
    bfb4:	8020953a 	slli	r16,r16,20
    bfb8:	18c03fcc 	andi	r3,r3,255
    bfbc:	01000434 	movhi	r4,16
    bfc0:	213fffc4 	addi	r4,r4,-1
    bfc4:	180697fa 	slli	r3,r3,31
    bfc8:	4110703a 	and	r8,r8,r4
    bfcc:	4410b03a 	or	r8,r8,r16
    bfd0:	40c6b03a 	or	r3,r8,r3
    bfd4:	dfc00417 	ldw	ra,16(sp)
    bfd8:	dcc00317 	ldw	r19,12(sp)
    bfdc:	dc800217 	ldw	r18,8(sp)
    bfe0:	dc400117 	ldw	r17,4(sp)
    bfe4:	dc000017 	ldw	r16,0(sp)
    bfe8:	dec00504 	addi	sp,sp,20
    bfec:	f800283a 	ret
    bff0:	0081ffc4 	movi	r2,2047
    bff4:	80bfd626 	beq	r16,r2,bf50 <__alt_data_end+0xff00bf50>
    bff8:	4a402034 	orhi	r9,r9,128
    bffc:	00800e04 	movi	r2,56
    c000:	10c09f16 	blt	r2,r3,c280 <__adddf3+0x3ac>
    c004:	008007c4 	movi	r2,31
    c008:	10c0c216 	blt	r2,r3,c314 <__adddf3+0x440>
    c00c:	00800804 	movi	r2,32
    c010:	10c5c83a 	sub	r2,r2,r3
    c014:	488a983a 	sll	r5,r9,r2
    c018:	30c8d83a 	srl	r4,r6,r3
    c01c:	3084983a 	sll	r2,r6,r2
    c020:	48c6d83a 	srl	r3,r9,r3
    c024:	290cb03a 	or	r6,r5,r4
    c028:	1004c03a 	cmpne	r2,r2,zero
    c02c:	308cb03a 	or	r6,r6,r2
    c030:	898dc83a 	sub	r6,r17,r6
    c034:	89a3803a 	cmpltu	r17,r17,r6
    c038:	40d1c83a 	sub	r8,r8,r3
    c03c:	4451c83a 	sub	r8,r8,r17
    c040:	3023883a 	mov	r17,r6
    c044:	4080202c 	andhi	r2,r8,128
    c048:	10002326 	beq	r2,zero,c0d8 <__adddf3+0x204>
    c04c:	04c02034 	movhi	r19,128
    c050:	9cffffc4 	addi	r19,r19,-1
    c054:	44e6703a 	and	r19,r8,r19
    c058:	98007626 	beq	r19,zero,c234 <__adddf3+0x360>
    c05c:	9809883a 	mov	r4,r19
    c060:	000e4d80 	call	e4d8 <__clzsi2>
    c064:	10fffe04 	addi	r3,r2,-8
    c068:	010007c4 	movi	r4,31
    c06c:	20c07716 	blt	r4,r3,c24c <__adddf3+0x378>
    c070:	00800804 	movi	r2,32
    c074:	10c5c83a 	sub	r2,r2,r3
    c078:	8884d83a 	srl	r2,r17,r2
    c07c:	98d0983a 	sll	r8,r19,r3
    c080:	88e2983a 	sll	r17,r17,r3
    c084:	1204b03a 	or	r2,r2,r8
    c088:	1c007416 	blt	r3,r16,c25c <__adddf3+0x388>
    c08c:	1c21c83a 	sub	r16,r3,r16
    c090:	82000044 	addi	r8,r16,1
    c094:	00c007c4 	movi	r3,31
    c098:	1a009116 	blt	r3,r8,c2e0 <__adddf3+0x40c>
    c09c:	00c00804 	movi	r3,32
    c0a0:	1a07c83a 	sub	r3,r3,r8
    c0a4:	8a08d83a 	srl	r4,r17,r8
    c0a8:	88e2983a 	sll	r17,r17,r3
    c0ac:	10c6983a 	sll	r3,r2,r3
    c0b0:	1210d83a 	srl	r8,r2,r8
    c0b4:	8804c03a 	cmpne	r2,r17,zero
    c0b8:	1906b03a 	or	r3,r3,r4
    c0bc:	18a2b03a 	or	r17,r3,r2
    c0c0:	0021883a 	mov	r16,zero
    c0c4:	003fa206 	br	bf50 <__alt_data_end+0xff00bf50>
    c0c8:	1890b03a 	or	r8,r3,r2
    c0cc:	40017d26 	beq	r8,zero,c6c4 <__adddf3+0x7f0>
    c0d0:	1011883a 	mov	r8,r2
    c0d4:	1823883a 	mov	r17,r3
    c0d8:	888001cc 	andi	r2,r17,7
    c0dc:	103f9e1e 	bne	r2,zero,bf58 <__alt_data_end+0xff00bf58>
    c0e0:	4004977a 	slli	r2,r8,29
    c0e4:	8822d0fa 	srli	r17,r17,3
    c0e8:	4010d0fa 	srli	r8,r8,3
    c0ec:	9007883a 	mov	r3,r18
    c0f0:	1444b03a 	or	r2,r2,r17
    c0f4:	0101ffc4 	movi	r4,2047
    c0f8:	81002426 	beq	r16,r4,c18c <__adddf3+0x2b8>
    c0fc:	8120703a 	and	r16,r16,r4
    c100:	01000434 	movhi	r4,16
    c104:	213fffc4 	addi	r4,r4,-1
    c108:	4110703a 	and	r8,r8,r4
    c10c:	003fa806 	br	bfb0 <__alt_data_end+0xff00bfb0>
    c110:	8089c83a 	sub	r4,r16,r2
    c114:	01005e0e 	bge	zero,r4,c290 <__adddf3+0x3bc>
    c118:	10002b26 	beq	r2,zero,c1c8 <__adddf3+0x2f4>
    c11c:	0081ffc4 	movi	r2,2047
    c120:	80bf8b26 	beq	r16,r2,bf50 <__alt_data_end+0xff00bf50>
    c124:	4a402034 	orhi	r9,r9,128
    c128:	00800e04 	movi	r2,56
    c12c:	1100a40e 	bge	r2,r4,c3c0 <__adddf3+0x4ec>
    c130:	498cb03a 	or	r6,r9,r6
    c134:	300ac03a 	cmpne	r5,r6,zero
    c138:	0013883a 	mov	r9,zero
    c13c:	2c4b883a 	add	r5,r5,r17
    c140:	2c63803a 	cmpltu	r17,r5,r17
    c144:	4a11883a 	add	r8,r9,r8
    c148:	8a11883a 	add	r8,r17,r8
    c14c:	2823883a 	mov	r17,r5
    c150:	4080202c 	andhi	r2,r8,128
    c154:	103fe026 	beq	r2,zero,c0d8 <__alt_data_end+0xff00c0d8>
    c158:	84000044 	addi	r16,r16,1
    c15c:	0081ffc4 	movi	r2,2047
    c160:	8080d226 	beq	r16,r2,c4ac <__adddf3+0x5d8>
    c164:	00bfe034 	movhi	r2,65408
    c168:	10bfffc4 	addi	r2,r2,-1
    c16c:	4090703a 	and	r8,r8,r2
    c170:	880ad07a 	srli	r5,r17,1
    c174:	400897fa 	slli	r4,r8,31
    c178:	88c0004c 	andi	r3,r17,1
    c17c:	28e2b03a 	or	r17,r5,r3
    c180:	4010d07a 	srli	r8,r8,1
    c184:	2462b03a 	or	r17,r4,r17
    c188:	003f7106 	br	bf50 <__alt_data_end+0xff00bf50>
    c18c:	4088b03a 	or	r4,r8,r2
    c190:	20014526 	beq	r4,zero,c6a8 <__adddf3+0x7d4>
    c194:	01000434 	movhi	r4,16
    c198:	42000234 	orhi	r8,r8,8
    c19c:	213fffc4 	addi	r4,r4,-1
    c1a0:	4110703a 	and	r8,r8,r4
    c1a4:	003f8206 	br	bfb0 <__alt_data_end+0xff00bfb0>
    c1a8:	18ffffc4 	addi	r3,r3,-1
    c1ac:	1800491e 	bne	r3,zero,c2d4 <__adddf3+0x400>
    c1b0:	898bc83a 	sub	r5,r17,r6
    c1b4:	8963803a 	cmpltu	r17,r17,r5
    c1b8:	4251c83a 	sub	r8,r8,r9
    c1bc:	4451c83a 	sub	r8,r8,r17
    c1c0:	2823883a 	mov	r17,r5
    c1c4:	003f9f06 	br	c044 <__alt_data_end+0xff00c044>
    c1c8:	4984b03a 	or	r2,r9,r6
    c1cc:	103f6026 	beq	r2,zero,bf50 <__alt_data_end+0xff00bf50>
    c1d0:	213fffc4 	addi	r4,r4,-1
    c1d4:	2000931e 	bne	r4,zero,c424 <__adddf3+0x550>
    c1d8:	898d883a 	add	r6,r17,r6
    c1dc:	3463803a 	cmpltu	r17,r6,r17
    c1e0:	4251883a 	add	r8,r8,r9
    c1e4:	8a11883a 	add	r8,r17,r8
    c1e8:	3023883a 	mov	r17,r6
    c1ec:	003fd806 	br	c150 <__alt_data_end+0xff00c150>
    c1f0:	1800541e 	bne	r3,zero,c344 <__adddf3+0x470>
    c1f4:	80800044 	addi	r2,r16,1
    c1f8:	1081ffcc 	andi	r2,r2,2047
    c1fc:	00c00044 	movi	r3,1
    c200:	1880a00e 	bge	r3,r2,c484 <__adddf3+0x5b0>
    c204:	8989c83a 	sub	r4,r17,r6
    c208:	8905803a 	cmpltu	r2,r17,r4
    c20c:	4267c83a 	sub	r19,r8,r9
    c210:	98a7c83a 	sub	r19,r19,r2
    c214:	9880202c 	andhi	r2,r19,128
    c218:	10006326 	beq	r2,zero,c3a8 <__adddf3+0x4d4>
    c21c:	3463c83a 	sub	r17,r6,r17
    c220:	4a07c83a 	sub	r3,r9,r8
    c224:	344d803a 	cmpltu	r6,r6,r17
    c228:	19a7c83a 	sub	r19,r3,r6
    c22c:	3825883a 	mov	r18,r7
    c230:	983f8a1e 	bne	r19,zero,c05c <__alt_data_end+0xff00c05c>
    c234:	8809883a 	mov	r4,r17
    c238:	000e4d80 	call	e4d8 <__clzsi2>
    c23c:	10800804 	addi	r2,r2,32
    c240:	10fffe04 	addi	r3,r2,-8
    c244:	010007c4 	movi	r4,31
    c248:	20ff890e 	bge	r4,r3,c070 <__alt_data_end+0xff00c070>
    c24c:	10bff604 	addi	r2,r2,-40
    c250:	8884983a 	sll	r2,r17,r2
    c254:	0023883a 	mov	r17,zero
    c258:	1c3f8c0e 	bge	r3,r16,c08c <__alt_data_end+0xff00c08c>
    c25c:	023fe034 	movhi	r8,65408
    c260:	423fffc4 	addi	r8,r8,-1
    c264:	80e1c83a 	sub	r16,r16,r3
    c268:	1210703a 	and	r8,r2,r8
    c26c:	003f3806 	br	bf50 <__alt_data_end+0xff00bf50>
    c270:	9007883a 	mov	r3,r18
    c274:	0011883a 	mov	r8,zero
    c278:	0005883a 	mov	r2,zero
    c27c:	003f4c06 	br	bfb0 <__alt_data_end+0xff00bfb0>
    c280:	498cb03a 	or	r6,r9,r6
    c284:	300cc03a 	cmpne	r6,r6,zero
    c288:	0007883a 	mov	r3,zero
    c28c:	003f6806 	br	c030 <__alt_data_end+0xff00c030>
    c290:	20009c1e 	bne	r4,zero,c504 <__adddf3+0x630>
    c294:	80800044 	addi	r2,r16,1
    c298:	1141ffcc 	andi	r5,r2,2047
    c29c:	01000044 	movi	r4,1
    c2a0:	2140670e 	bge	r4,r5,c440 <__adddf3+0x56c>
    c2a4:	0101ffc4 	movi	r4,2047
    c2a8:	11007f26 	beq	r2,r4,c4a8 <__adddf3+0x5d4>
    c2ac:	898d883a 	add	r6,r17,r6
    c2b0:	4247883a 	add	r3,r8,r9
    c2b4:	3451803a 	cmpltu	r8,r6,r17
    c2b8:	40d1883a 	add	r8,r8,r3
    c2bc:	402297fa 	slli	r17,r8,31
    c2c0:	300cd07a 	srli	r6,r6,1
    c2c4:	4010d07a 	srli	r8,r8,1
    c2c8:	1021883a 	mov	r16,r2
    c2cc:	89a2b03a 	or	r17,r17,r6
    c2d0:	003f1f06 	br	bf50 <__alt_data_end+0xff00bf50>
    c2d4:	0081ffc4 	movi	r2,2047
    c2d8:	80bf481e 	bne	r16,r2,bffc <__alt_data_end+0xff00bffc>
    c2dc:	003f1c06 	br	bf50 <__alt_data_end+0xff00bf50>
    c2e0:	843ff844 	addi	r16,r16,-31
    c2e4:	01000804 	movi	r4,32
    c2e8:	1406d83a 	srl	r3,r2,r16
    c2ec:	41005026 	beq	r8,r4,c430 <__adddf3+0x55c>
    c2f0:	01001004 	movi	r4,64
    c2f4:	2211c83a 	sub	r8,r4,r8
    c2f8:	1204983a 	sll	r2,r2,r8
    c2fc:	88a2b03a 	or	r17,r17,r2
    c300:	8822c03a 	cmpne	r17,r17,zero
    c304:	1c62b03a 	or	r17,r3,r17
    c308:	0011883a 	mov	r8,zero
    c30c:	0021883a 	mov	r16,zero
    c310:	003f7106 	br	c0d8 <__alt_data_end+0xff00c0d8>
    c314:	193ff804 	addi	r4,r3,-32
    c318:	00800804 	movi	r2,32
    c31c:	4908d83a 	srl	r4,r9,r4
    c320:	18804526 	beq	r3,r2,c438 <__adddf3+0x564>
    c324:	00801004 	movi	r2,64
    c328:	10c5c83a 	sub	r2,r2,r3
    c32c:	4886983a 	sll	r3,r9,r2
    c330:	198cb03a 	or	r6,r3,r6
    c334:	300cc03a 	cmpne	r6,r6,zero
    c338:	218cb03a 	or	r6,r4,r6
    c33c:	0007883a 	mov	r3,zero
    c340:	003f3b06 	br	c030 <__alt_data_end+0xff00c030>
    c344:	80002a26 	beq	r16,zero,c3f0 <__adddf3+0x51c>
    c348:	0101ffc4 	movi	r4,2047
    c34c:	11006826 	beq	r2,r4,c4f0 <__adddf3+0x61c>
    c350:	00c7c83a 	sub	r3,zero,r3
    c354:	42002034 	orhi	r8,r8,128
    c358:	01000e04 	movi	r4,56
    c35c:	20c07c16 	blt	r4,r3,c550 <__adddf3+0x67c>
    c360:	010007c4 	movi	r4,31
    c364:	20c0da16 	blt	r4,r3,c6d0 <__adddf3+0x7fc>
    c368:	01000804 	movi	r4,32
    c36c:	20c9c83a 	sub	r4,r4,r3
    c370:	4114983a 	sll	r10,r8,r4
    c374:	88cad83a 	srl	r5,r17,r3
    c378:	8908983a 	sll	r4,r17,r4
    c37c:	40c6d83a 	srl	r3,r8,r3
    c380:	5162b03a 	or	r17,r10,r5
    c384:	2008c03a 	cmpne	r4,r4,zero
    c388:	8922b03a 	or	r17,r17,r4
    c38c:	3463c83a 	sub	r17,r6,r17
    c390:	48c7c83a 	sub	r3,r9,r3
    c394:	344d803a 	cmpltu	r6,r6,r17
    c398:	1991c83a 	sub	r8,r3,r6
    c39c:	1021883a 	mov	r16,r2
    c3a0:	3825883a 	mov	r18,r7
    c3a4:	003f2706 	br	c044 <__alt_data_end+0xff00c044>
    c3a8:	24d0b03a 	or	r8,r4,r19
    c3ac:	40001b1e 	bne	r8,zero,c41c <__adddf3+0x548>
    c3b0:	0005883a 	mov	r2,zero
    c3b4:	0007883a 	mov	r3,zero
    c3b8:	0021883a 	mov	r16,zero
    c3bc:	003f4d06 	br	c0f4 <__alt_data_end+0xff00c0f4>
    c3c0:	008007c4 	movi	r2,31
    c3c4:	11003c16 	blt	r2,r4,c4b8 <__adddf3+0x5e4>
    c3c8:	00800804 	movi	r2,32
    c3cc:	1105c83a 	sub	r2,r2,r4
    c3d0:	488e983a 	sll	r7,r9,r2
    c3d4:	310ad83a 	srl	r5,r6,r4
    c3d8:	3084983a 	sll	r2,r6,r2
    c3dc:	4912d83a 	srl	r9,r9,r4
    c3e0:	394ab03a 	or	r5,r7,r5
    c3e4:	1004c03a 	cmpne	r2,r2,zero
    c3e8:	288ab03a 	or	r5,r5,r2
    c3ec:	003f5306 	br	c13c <__alt_data_end+0xff00c13c>
    c3f0:	4448b03a 	or	r4,r8,r17
    c3f4:	20003e26 	beq	r4,zero,c4f0 <__adddf3+0x61c>
    c3f8:	00c6303a 	nor	r3,zero,r3
    c3fc:	18003a1e 	bne	r3,zero,c4e8 <__adddf3+0x614>
    c400:	3463c83a 	sub	r17,r6,r17
    c404:	4a07c83a 	sub	r3,r9,r8
    c408:	344d803a 	cmpltu	r6,r6,r17
    c40c:	1991c83a 	sub	r8,r3,r6
    c410:	1021883a 	mov	r16,r2
    c414:	3825883a 	mov	r18,r7
    c418:	003f0a06 	br	c044 <__alt_data_end+0xff00c044>
    c41c:	2023883a 	mov	r17,r4
    c420:	003f0d06 	br	c058 <__alt_data_end+0xff00c058>
    c424:	0081ffc4 	movi	r2,2047
    c428:	80bf3f1e 	bne	r16,r2,c128 <__alt_data_end+0xff00c128>
    c42c:	003ec806 	br	bf50 <__alt_data_end+0xff00bf50>
    c430:	0005883a 	mov	r2,zero
    c434:	003fb106 	br	c2fc <__alt_data_end+0xff00c2fc>
    c438:	0007883a 	mov	r3,zero
    c43c:	003fbc06 	br	c330 <__alt_data_end+0xff00c330>
    c440:	4444b03a 	or	r2,r8,r17
    c444:	8000871e 	bne	r16,zero,c664 <__adddf3+0x790>
    c448:	1000ba26 	beq	r2,zero,c734 <__adddf3+0x860>
    c44c:	4984b03a 	or	r2,r9,r6
    c450:	103ebf26 	beq	r2,zero,bf50 <__alt_data_end+0xff00bf50>
    c454:	8985883a 	add	r2,r17,r6
    c458:	4247883a 	add	r3,r8,r9
    c45c:	1451803a 	cmpltu	r8,r2,r17
    c460:	40d1883a 	add	r8,r8,r3
    c464:	40c0202c 	andhi	r3,r8,128
    c468:	1023883a 	mov	r17,r2
    c46c:	183f1a26 	beq	r3,zero,c0d8 <__alt_data_end+0xff00c0d8>
    c470:	00bfe034 	movhi	r2,65408
    c474:	10bfffc4 	addi	r2,r2,-1
    c478:	2021883a 	mov	r16,r4
    c47c:	4090703a 	and	r8,r8,r2
    c480:	003eb306 	br	bf50 <__alt_data_end+0xff00bf50>
    c484:	4444b03a 	or	r2,r8,r17
    c488:	8000291e 	bne	r16,zero,c530 <__adddf3+0x65c>
    c48c:	10004b1e 	bne	r2,zero,c5bc <__adddf3+0x6e8>
    c490:	4990b03a 	or	r8,r9,r6
    c494:	40008b26 	beq	r8,zero,c6c4 <__adddf3+0x7f0>
    c498:	4811883a 	mov	r8,r9
    c49c:	3023883a 	mov	r17,r6
    c4a0:	3825883a 	mov	r18,r7
    c4a4:	003eaa06 	br	bf50 <__alt_data_end+0xff00bf50>
    c4a8:	1021883a 	mov	r16,r2
    c4ac:	0011883a 	mov	r8,zero
    c4b0:	0005883a 	mov	r2,zero
    c4b4:	003f0f06 	br	c0f4 <__alt_data_end+0xff00c0f4>
    c4b8:	217ff804 	addi	r5,r4,-32
    c4bc:	00800804 	movi	r2,32
    c4c0:	494ad83a 	srl	r5,r9,r5
    c4c4:	20807d26 	beq	r4,r2,c6bc <__adddf3+0x7e8>
    c4c8:	00801004 	movi	r2,64
    c4cc:	1109c83a 	sub	r4,r2,r4
    c4d0:	4912983a 	sll	r9,r9,r4
    c4d4:	498cb03a 	or	r6,r9,r6
    c4d8:	300cc03a 	cmpne	r6,r6,zero
    c4dc:	298ab03a 	or	r5,r5,r6
    c4e0:	0013883a 	mov	r9,zero
    c4e4:	003f1506 	br	c13c <__alt_data_end+0xff00c13c>
    c4e8:	0101ffc4 	movi	r4,2047
    c4ec:	113f9a1e 	bne	r2,r4,c358 <__alt_data_end+0xff00c358>
    c4f0:	4811883a 	mov	r8,r9
    c4f4:	3023883a 	mov	r17,r6
    c4f8:	1021883a 	mov	r16,r2
    c4fc:	3825883a 	mov	r18,r7
    c500:	003e9306 	br	bf50 <__alt_data_end+0xff00bf50>
    c504:	8000161e 	bne	r16,zero,c560 <__adddf3+0x68c>
    c508:	444ab03a 	or	r5,r8,r17
    c50c:	28005126 	beq	r5,zero,c654 <__adddf3+0x780>
    c510:	0108303a 	nor	r4,zero,r4
    c514:	20004d1e 	bne	r4,zero,c64c <__adddf3+0x778>
    c518:	89a3883a 	add	r17,r17,r6
    c51c:	4253883a 	add	r9,r8,r9
    c520:	898d803a 	cmpltu	r6,r17,r6
    c524:	3251883a 	add	r8,r6,r9
    c528:	1021883a 	mov	r16,r2
    c52c:	003f0806 	br	c150 <__alt_data_end+0xff00c150>
    c530:	1000301e 	bne	r2,zero,c5f4 <__adddf3+0x720>
    c534:	4984b03a 	or	r2,r9,r6
    c538:	10007126 	beq	r2,zero,c700 <__adddf3+0x82c>
    c53c:	4811883a 	mov	r8,r9
    c540:	3023883a 	mov	r17,r6
    c544:	3825883a 	mov	r18,r7
    c548:	0401ffc4 	movi	r16,2047
    c54c:	003e8006 	br	bf50 <__alt_data_end+0xff00bf50>
    c550:	4462b03a 	or	r17,r8,r17
    c554:	8822c03a 	cmpne	r17,r17,zero
    c558:	0007883a 	mov	r3,zero
    c55c:	003f8b06 	br	c38c <__alt_data_end+0xff00c38c>
    c560:	0141ffc4 	movi	r5,2047
    c564:	11403b26 	beq	r2,r5,c654 <__adddf3+0x780>
    c568:	0109c83a 	sub	r4,zero,r4
    c56c:	42002034 	orhi	r8,r8,128
    c570:	01400e04 	movi	r5,56
    c574:	29006716 	blt	r5,r4,c714 <__adddf3+0x840>
    c578:	014007c4 	movi	r5,31
    c57c:	29007016 	blt	r5,r4,c740 <__adddf3+0x86c>
    c580:	01400804 	movi	r5,32
    c584:	290bc83a 	sub	r5,r5,r4
    c588:	4154983a 	sll	r10,r8,r5
    c58c:	890ed83a 	srl	r7,r17,r4
    c590:	894a983a 	sll	r5,r17,r5
    c594:	4108d83a 	srl	r4,r8,r4
    c598:	51e2b03a 	or	r17,r10,r7
    c59c:	280ac03a 	cmpne	r5,r5,zero
    c5a0:	8962b03a 	or	r17,r17,r5
    c5a4:	89a3883a 	add	r17,r17,r6
    c5a8:	2253883a 	add	r9,r4,r9
    c5ac:	898d803a 	cmpltu	r6,r17,r6
    c5b0:	3251883a 	add	r8,r6,r9
    c5b4:	1021883a 	mov	r16,r2
    c5b8:	003ee506 	br	c150 <__alt_data_end+0xff00c150>
    c5bc:	4984b03a 	or	r2,r9,r6
    c5c0:	103e6326 	beq	r2,zero,bf50 <__alt_data_end+0xff00bf50>
    c5c4:	8987c83a 	sub	r3,r17,r6
    c5c8:	88c9803a 	cmpltu	r4,r17,r3
    c5cc:	4245c83a 	sub	r2,r8,r9
    c5d0:	1105c83a 	sub	r2,r2,r4
    c5d4:	1100202c 	andhi	r4,r2,128
    c5d8:	203ebb26 	beq	r4,zero,c0c8 <__alt_data_end+0xff00c0c8>
    c5dc:	3463c83a 	sub	r17,r6,r17
    c5e0:	4a07c83a 	sub	r3,r9,r8
    c5e4:	344d803a 	cmpltu	r6,r6,r17
    c5e8:	1991c83a 	sub	r8,r3,r6
    c5ec:	3825883a 	mov	r18,r7
    c5f0:	003e5706 	br	bf50 <__alt_data_end+0xff00bf50>
    c5f4:	4984b03a 	or	r2,r9,r6
    c5f8:	10002e26 	beq	r2,zero,c6b4 <__adddf3+0x7e0>
    c5fc:	4004d0fa 	srli	r2,r8,3
    c600:	8822d0fa 	srli	r17,r17,3
    c604:	4010977a 	slli	r8,r8,29
    c608:	10c0022c 	andhi	r3,r2,8
    c60c:	4462b03a 	or	r17,r8,r17
    c610:	18000826 	beq	r3,zero,c634 <__adddf3+0x760>
    c614:	4808d0fa 	srli	r4,r9,3
    c618:	20c0022c 	andhi	r3,r4,8
    c61c:	1800051e 	bne	r3,zero,c634 <__adddf3+0x760>
    c620:	300cd0fa 	srli	r6,r6,3
    c624:	4806977a 	slli	r3,r9,29
    c628:	2005883a 	mov	r2,r4
    c62c:	3825883a 	mov	r18,r7
    c630:	19a2b03a 	or	r17,r3,r6
    c634:	8810d77a 	srli	r8,r17,29
    c638:	100490fa 	slli	r2,r2,3
    c63c:	882290fa 	slli	r17,r17,3
    c640:	0401ffc4 	movi	r16,2047
    c644:	4090b03a 	or	r8,r8,r2
    c648:	003e4106 	br	bf50 <__alt_data_end+0xff00bf50>
    c64c:	0141ffc4 	movi	r5,2047
    c650:	117fc71e 	bne	r2,r5,c570 <__alt_data_end+0xff00c570>
    c654:	4811883a 	mov	r8,r9
    c658:	3023883a 	mov	r17,r6
    c65c:	1021883a 	mov	r16,r2
    c660:	003e3b06 	br	bf50 <__alt_data_end+0xff00bf50>
    c664:	10002f26 	beq	r2,zero,c724 <__adddf3+0x850>
    c668:	4984b03a 	or	r2,r9,r6
    c66c:	10001126 	beq	r2,zero,c6b4 <__adddf3+0x7e0>
    c670:	4004d0fa 	srli	r2,r8,3
    c674:	8822d0fa 	srli	r17,r17,3
    c678:	4010977a 	slli	r8,r8,29
    c67c:	10c0022c 	andhi	r3,r2,8
    c680:	4462b03a 	or	r17,r8,r17
    c684:	183feb26 	beq	r3,zero,c634 <__alt_data_end+0xff00c634>
    c688:	4808d0fa 	srli	r4,r9,3
    c68c:	20c0022c 	andhi	r3,r4,8
    c690:	183fe81e 	bne	r3,zero,c634 <__alt_data_end+0xff00c634>
    c694:	300cd0fa 	srli	r6,r6,3
    c698:	4806977a 	slli	r3,r9,29
    c69c:	2005883a 	mov	r2,r4
    c6a0:	19a2b03a 	or	r17,r3,r6
    c6a4:	003fe306 	br	c634 <__alt_data_end+0xff00c634>
    c6a8:	0011883a 	mov	r8,zero
    c6ac:	0005883a 	mov	r2,zero
    c6b0:	003e3f06 	br	bfb0 <__alt_data_end+0xff00bfb0>
    c6b4:	0401ffc4 	movi	r16,2047
    c6b8:	003e2506 	br	bf50 <__alt_data_end+0xff00bf50>
    c6bc:	0013883a 	mov	r9,zero
    c6c0:	003f8406 	br	c4d4 <__alt_data_end+0xff00c4d4>
    c6c4:	0005883a 	mov	r2,zero
    c6c8:	0007883a 	mov	r3,zero
    c6cc:	003e8906 	br	c0f4 <__alt_data_end+0xff00c0f4>
    c6d0:	197ff804 	addi	r5,r3,-32
    c6d4:	01000804 	movi	r4,32
    c6d8:	414ad83a 	srl	r5,r8,r5
    c6dc:	19002426 	beq	r3,r4,c770 <__adddf3+0x89c>
    c6e0:	01001004 	movi	r4,64
    c6e4:	20c7c83a 	sub	r3,r4,r3
    c6e8:	40c6983a 	sll	r3,r8,r3
    c6ec:	1c46b03a 	or	r3,r3,r17
    c6f0:	1806c03a 	cmpne	r3,r3,zero
    c6f4:	28e2b03a 	or	r17,r5,r3
    c6f8:	0007883a 	mov	r3,zero
    c6fc:	003f2306 	br	c38c <__alt_data_end+0xff00c38c>
    c700:	0007883a 	mov	r3,zero
    c704:	5811883a 	mov	r8,r11
    c708:	00bfffc4 	movi	r2,-1
    c70c:	0401ffc4 	movi	r16,2047
    c710:	003e7806 	br	c0f4 <__alt_data_end+0xff00c0f4>
    c714:	4462b03a 	or	r17,r8,r17
    c718:	8822c03a 	cmpne	r17,r17,zero
    c71c:	0009883a 	mov	r4,zero
    c720:	003fa006 	br	c5a4 <__alt_data_end+0xff00c5a4>
    c724:	4811883a 	mov	r8,r9
    c728:	3023883a 	mov	r17,r6
    c72c:	0401ffc4 	movi	r16,2047
    c730:	003e0706 	br	bf50 <__alt_data_end+0xff00bf50>
    c734:	4811883a 	mov	r8,r9
    c738:	3023883a 	mov	r17,r6
    c73c:	003e0406 	br	bf50 <__alt_data_end+0xff00bf50>
    c740:	21fff804 	addi	r7,r4,-32
    c744:	01400804 	movi	r5,32
    c748:	41ced83a 	srl	r7,r8,r7
    c74c:	21400a26 	beq	r4,r5,c778 <__adddf3+0x8a4>
    c750:	01401004 	movi	r5,64
    c754:	2909c83a 	sub	r4,r5,r4
    c758:	4108983a 	sll	r4,r8,r4
    c75c:	2448b03a 	or	r4,r4,r17
    c760:	2008c03a 	cmpne	r4,r4,zero
    c764:	3922b03a 	or	r17,r7,r4
    c768:	0009883a 	mov	r4,zero
    c76c:	003f8d06 	br	c5a4 <__alt_data_end+0xff00c5a4>
    c770:	0007883a 	mov	r3,zero
    c774:	003fdd06 	br	c6ec <__alt_data_end+0xff00c6ec>
    c778:	0009883a 	mov	r4,zero
    c77c:	003ff706 	br	c75c <__alt_data_end+0xff00c75c>

0000c780 <__divdf3>:
    c780:	defff204 	addi	sp,sp,-56
    c784:	dd400915 	stw	r21,36(sp)
    c788:	282ad53a 	srli	r21,r5,20
    c78c:	dd000815 	stw	r20,32(sp)
    c790:	2828d7fa 	srli	r20,r5,31
    c794:	dc000415 	stw	r16,16(sp)
    c798:	04000434 	movhi	r16,16
    c79c:	df000c15 	stw	fp,48(sp)
    c7a0:	843fffc4 	addi	r16,r16,-1
    c7a4:	dfc00d15 	stw	ra,52(sp)
    c7a8:	ddc00b15 	stw	r23,44(sp)
    c7ac:	dd800a15 	stw	r22,40(sp)
    c7b0:	dcc00715 	stw	r19,28(sp)
    c7b4:	dc800615 	stw	r18,24(sp)
    c7b8:	dc400515 	stw	r17,20(sp)
    c7bc:	ad41ffcc 	andi	r21,r21,2047
    c7c0:	2c20703a 	and	r16,r5,r16
    c7c4:	a7003fcc 	andi	fp,r20,255
    c7c8:	a8006126 	beq	r21,zero,c950 <__divdf3+0x1d0>
    c7cc:	0081ffc4 	movi	r2,2047
    c7d0:	2025883a 	mov	r18,r4
    c7d4:	a8803726 	beq	r21,r2,c8b4 <__divdf3+0x134>
    c7d8:	80800434 	orhi	r2,r16,16
    c7dc:	100490fa 	slli	r2,r2,3
    c7e0:	2020d77a 	srli	r16,r4,29
    c7e4:	202490fa 	slli	r18,r4,3
    c7e8:	ad7f0044 	addi	r21,r21,-1023
    c7ec:	80a0b03a 	or	r16,r16,r2
    c7f0:	0027883a 	mov	r19,zero
    c7f4:	0013883a 	mov	r9,zero
    c7f8:	3804d53a 	srli	r2,r7,20
    c7fc:	382cd7fa 	srli	r22,r7,31
    c800:	04400434 	movhi	r17,16
    c804:	8c7fffc4 	addi	r17,r17,-1
    c808:	1081ffcc 	andi	r2,r2,2047
    c80c:	3011883a 	mov	r8,r6
    c810:	3c62703a 	and	r17,r7,r17
    c814:	b5c03fcc 	andi	r23,r22,255
    c818:	10006c26 	beq	r2,zero,c9cc <__divdf3+0x24c>
    c81c:	00c1ffc4 	movi	r3,2047
    c820:	10c06426 	beq	r2,r3,c9b4 <__divdf3+0x234>
    c824:	88c00434 	orhi	r3,r17,16
    c828:	180690fa 	slli	r3,r3,3
    c82c:	3022d77a 	srli	r17,r6,29
    c830:	301090fa 	slli	r8,r6,3
    c834:	10bf0044 	addi	r2,r2,-1023
    c838:	88e2b03a 	or	r17,r17,r3
    c83c:	000f883a 	mov	r7,zero
    c840:	a58cf03a 	xor	r6,r20,r22
    c844:	3cc8b03a 	or	r4,r7,r19
    c848:	a8abc83a 	sub	r21,r21,r2
    c84c:	008003c4 	movi	r2,15
    c850:	3007883a 	mov	r3,r6
    c854:	34c03fcc 	andi	r19,r6,255
    c858:	11009036 	bltu	r2,r4,ca9c <__divdf3+0x31c>
    c85c:	200890ba 	slli	r4,r4,2
    c860:	00800074 	movhi	r2,1
    c864:	10b21d04 	addi	r2,r2,-14220
    c868:	2089883a 	add	r4,r4,r2
    c86c:	20800017 	ldw	r2,0(r4)
    c870:	1000683a 	jmp	r2
    c874:	0000ca9c 	xori	zero,zero,810
    c878:	0000c8ec 	andhi	zero,zero,803
    c87c:	0000ca8c 	andi	zero,zero,810
    c880:	0000c8e0 	cmpeqi	zero,zero,803
    c884:	0000ca8c 	andi	zero,zero,810
    c888:	0000ca60 	cmpeqi	zero,zero,809
    c88c:	0000ca8c 	andi	zero,zero,810
    c890:	0000c8e0 	cmpeqi	zero,zero,803
    c894:	0000c8ec 	andhi	zero,zero,803
    c898:	0000c8ec 	andhi	zero,zero,803
    c89c:	0000ca60 	cmpeqi	zero,zero,809
    c8a0:	0000c8e0 	cmpeqi	zero,zero,803
    c8a4:	0000c8d0 	cmplti	zero,zero,803
    c8a8:	0000c8d0 	cmplti	zero,zero,803
    c8ac:	0000c8d0 	cmplti	zero,zero,803
    c8b0:	0000cd80 	call	cd8 <init_LCD+0x2b0>
    c8b4:	2404b03a 	or	r2,r4,r16
    c8b8:	1000661e 	bne	r2,zero,ca54 <__divdf3+0x2d4>
    c8bc:	04c00204 	movi	r19,8
    c8c0:	0021883a 	mov	r16,zero
    c8c4:	0025883a 	mov	r18,zero
    c8c8:	02400084 	movi	r9,2
    c8cc:	003fca06 	br	c7f8 <__alt_data_end+0xff00c7f8>
    c8d0:	8023883a 	mov	r17,r16
    c8d4:	9011883a 	mov	r8,r18
    c8d8:	e02f883a 	mov	r23,fp
    c8dc:	480f883a 	mov	r7,r9
    c8e0:	00800084 	movi	r2,2
    c8e4:	3881311e 	bne	r7,r2,cdac <__divdf3+0x62c>
    c8e8:	b827883a 	mov	r19,r23
    c8ec:	98c0004c 	andi	r3,r19,1
    c8f0:	0081ffc4 	movi	r2,2047
    c8f4:	000b883a 	mov	r5,zero
    c8f8:	0025883a 	mov	r18,zero
    c8fc:	1004953a 	slli	r2,r2,20
    c900:	18c03fcc 	andi	r3,r3,255
    c904:	04400434 	movhi	r17,16
    c908:	8c7fffc4 	addi	r17,r17,-1
    c90c:	180697fa 	slli	r3,r3,31
    c910:	2c4a703a 	and	r5,r5,r17
    c914:	288ab03a 	or	r5,r5,r2
    c918:	28c6b03a 	or	r3,r5,r3
    c91c:	9005883a 	mov	r2,r18
    c920:	dfc00d17 	ldw	ra,52(sp)
    c924:	df000c17 	ldw	fp,48(sp)
    c928:	ddc00b17 	ldw	r23,44(sp)
    c92c:	dd800a17 	ldw	r22,40(sp)
    c930:	dd400917 	ldw	r21,36(sp)
    c934:	dd000817 	ldw	r20,32(sp)
    c938:	dcc00717 	ldw	r19,28(sp)
    c93c:	dc800617 	ldw	r18,24(sp)
    c940:	dc400517 	ldw	r17,20(sp)
    c944:	dc000417 	ldw	r16,16(sp)
    c948:	dec00e04 	addi	sp,sp,56
    c94c:	f800283a 	ret
    c950:	2404b03a 	or	r2,r4,r16
    c954:	2027883a 	mov	r19,r4
    c958:	10003926 	beq	r2,zero,ca40 <__divdf3+0x2c0>
    c95c:	80012e26 	beq	r16,zero,ce18 <__divdf3+0x698>
    c960:	8009883a 	mov	r4,r16
    c964:	d9800315 	stw	r6,12(sp)
    c968:	d9c00215 	stw	r7,8(sp)
    c96c:	000e4d80 	call	e4d8 <__clzsi2>
    c970:	d9800317 	ldw	r6,12(sp)
    c974:	d9c00217 	ldw	r7,8(sp)
    c978:	113ffd44 	addi	r4,r2,-11
    c97c:	00c00704 	movi	r3,28
    c980:	19012116 	blt	r3,r4,ce08 <__divdf3+0x688>
    c984:	00c00744 	movi	r3,29
    c988:	147ffe04 	addi	r17,r2,-8
    c98c:	1907c83a 	sub	r3,r3,r4
    c990:	8460983a 	sll	r16,r16,r17
    c994:	98c6d83a 	srl	r3,r19,r3
    c998:	9c64983a 	sll	r18,r19,r17
    c99c:	1c20b03a 	or	r16,r3,r16
    c9a0:	1080fcc4 	addi	r2,r2,1011
    c9a4:	00abc83a 	sub	r21,zero,r2
    c9a8:	0027883a 	mov	r19,zero
    c9ac:	0013883a 	mov	r9,zero
    c9b0:	003f9106 	br	c7f8 <__alt_data_end+0xff00c7f8>
    c9b4:	3446b03a 	or	r3,r6,r17
    c9b8:	18001f1e 	bne	r3,zero,ca38 <__divdf3+0x2b8>
    c9bc:	0023883a 	mov	r17,zero
    c9c0:	0011883a 	mov	r8,zero
    c9c4:	01c00084 	movi	r7,2
    c9c8:	003f9d06 	br	c840 <__alt_data_end+0xff00c840>
    c9cc:	3446b03a 	or	r3,r6,r17
    c9d0:	18001526 	beq	r3,zero,ca28 <__divdf3+0x2a8>
    c9d4:	88011b26 	beq	r17,zero,ce44 <__divdf3+0x6c4>
    c9d8:	8809883a 	mov	r4,r17
    c9dc:	d9800315 	stw	r6,12(sp)
    c9e0:	da400115 	stw	r9,4(sp)
    c9e4:	000e4d80 	call	e4d8 <__clzsi2>
    c9e8:	d9800317 	ldw	r6,12(sp)
    c9ec:	da400117 	ldw	r9,4(sp)
    c9f0:	113ffd44 	addi	r4,r2,-11
    c9f4:	00c00704 	movi	r3,28
    c9f8:	19010e16 	blt	r3,r4,ce34 <__divdf3+0x6b4>
    c9fc:	00c00744 	movi	r3,29
    ca00:	123ffe04 	addi	r8,r2,-8
    ca04:	1907c83a 	sub	r3,r3,r4
    ca08:	8a22983a 	sll	r17,r17,r8
    ca0c:	30c6d83a 	srl	r3,r6,r3
    ca10:	3210983a 	sll	r8,r6,r8
    ca14:	1c62b03a 	or	r17,r3,r17
    ca18:	1080fcc4 	addi	r2,r2,1011
    ca1c:	0085c83a 	sub	r2,zero,r2
    ca20:	000f883a 	mov	r7,zero
    ca24:	003f8606 	br	c840 <__alt_data_end+0xff00c840>
    ca28:	0023883a 	mov	r17,zero
    ca2c:	0011883a 	mov	r8,zero
    ca30:	01c00044 	movi	r7,1
    ca34:	003f8206 	br	c840 <__alt_data_end+0xff00c840>
    ca38:	01c000c4 	movi	r7,3
    ca3c:	003f8006 	br	c840 <__alt_data_end+0xff00c840>
    ca40:	04c00104 	movi	r19,4
    ca44:	0021883a 	mov	r16,zero
    ca48:	0025883a 	mov	r18,zero
    ca4c:	02400044 	movi	r9,1
    ca50:	003f6906 	br	c7f8 <__alt_data_end+0xff00c7f8>
    ca54:	04c00304 	movi	r19,12
    ca58:	024000c4 	movi	r9,3
    ca5c:	003f6606 	br	c7f8 <__alt_data_end+0xff00c7f8>
    ca60:	01400434 	movhi	r5,16
    ca64:	0007883a 	mov	r3,zero
    ca68:	297fffc4 	addi	r5,r5,-1
    ca6c:	04bfffc4 	movi	r18,-1
    ca70:	0081ffc4 	movi	r2,2047
    ca74:	003fa106 	br	c8fc <__alt_data_end+0xff00c8fc>
    ca78:	00c00044 	movi	r3,1
    ca7c:	1887c83a 	sub	r3,r3,r2
    ca80:	01000e04 	movi	r4,56
    ca84:	20c1210e 	bge	r4,r3,cf0c <__divdf3+0x78c>
    ca88:	98c0004c 	andi	r3,r19,1
    ca8c:	0005883a 	mov	r2,zero
    ca90:	000b883a 	mov	r5,zero
    ca94:	0025883a 	mov	r18,zero
    ca98:	003f9806 	br	c8fc <__alt_data_end+0xff00c8fc>
    ca9c:	8c00fd36 	bltu	r17,r16,ce94 <__divdf3+0x714>
    caa0:	8440fb26 	beq	r16,r17,ce90 <__divdf3+0x710>
    caa4:	8007883a 	mov	r3,r16
    caa8:	ad7fffc4 	addi	r21,r21,-1
    caac:	0021883a 	mov	r16,zero
    cab0:	4004d63a 	srli	r2,r8,24
    cab4:	8822923a 	slli	r17,r17,8
    cab8:	1809883a 	mov	r4,r3
    cabc:	402c923a 	slli	r22,r8,8
    cac0:	88b8b03a 	or	fp,r17,r2
    cac4:	e028d43a 	srli	r20,fp,16
    cac8:	d8c00015 	stw	r3,0(sp)
    cacc:	e5ffffcc 	andi	r23,fp,65535
    cad0:	a00b883a 	mov	r5,r20
    cad4:	0001cec0 	call	1cec <__udivsi3>
    cad8:	d8c00017 	ldw	r3,0(sp)
    cadc:	a00b883a 	mov	r5,r20
    cae0:	d8800315 	stw	r2,12(sp)
    cae4:	1809883a 	mov	r4,r3
    cae8:	0001d500 	call	1d50 <__umodsi3>
    caec:	d9800317 	ldw	r6,12(sp)
    caf0:	1006943a 	slli	r3,r2,16
    caf4:	9004d43a 	srli	r2,r18,16
    caf8:	b9a3383a 	mul	r17,r23,r6
    cafc:	10c4b03a 	or	r2,r2,r3
    cb00:	1440062e 	bgeu	r2,r17,cb1c <__divdf3+0x39c>
    cb04:	1705883a 	add	r2,r2,fp
    cb08:	30ffffc4 	addi	r3,r6,-1
    cb0c:	1700ee36 	bltu	r2,fp,cec8 <__divdf3+0x748>
    cb10:	1440ed2e 	bgeu	r2,r17,cec8 <__divdf3+0x748>
    cb14:	31bfff84 	addi	r6,r6,-2
    cb18:	1705883a 	add	r2,r2,fp
    cb1c:	1463c83a 	sub	r17,r2,r17
    cb20:	a00b883a 	mov	r5,r20
    cb24:	8809883a 	mov	r4,r17
    cb28:	d9800315 	stw	r6,12(sp)
    cb2c:	0001cec0 	call	1cec <__udivsi3>
    cb30:	a00b883a 	mov	r5,r20
    cb34:	8809883a 	mov	r4,r17
    cb38:	d8800215 	stw	r2,8(sp)
    cb3c:	0001d500 	call	1d50 <__umodsi3>
    cb40:	d9c00217 	ldw	r7,8(sp)
    cb44:	1004943a 	slli	r2,r2,16
    cb48:	94bfffcc 	andi	r18,r18,65535
    cb4c:	b9d1383a 	mul	r8,r23,r7
    cb50:	90a4b03a 	or	r18,r18,r2
    cb54:	d9800317 	ldw	r6,12(sp)
    cb58:	9200062e 	bgeu	r18,r8,cb74 <__divdf3+0x3f4>
    cb5c:	9725883a 	add	r18,r18,fp
    cb60:	38bfffc4 	addi	r2,r7,-1
    cb64:	9700d636 	bltu	r18,fp,cec0 <__divdf3+0x740>
    cb68:	9200d52e 	bgeu	r18,r8,cec0 <__divdf3+0x740>
    cb6c:	39ffff84 	addi	r7,r7,-2
    cb70:	9725883a 	add	r18,r18,fp
    cb74:	3004943a 	slli	r2,r6,16
    cb78:	b012d43a 	srli	r9,r22,16
    cb7c:	b1bfffcc 	andi	r6,r22,65535
    cb80:	11e2b03a 	or	r17,r2,r7
    cb84:	8806d43a 	srli	r3,r17,16
    cb88:	893fffcc 	andi	r4,r17,65535
    cb8c:	218b383a 	mul	r5,r4,r6
    cb90:	30c5383a 	mul	r2,r6,r3
    cb94:	2249383a 	mul	r4,r4,r9
    cb98:	280ed43a 	srli	r7,r5,16
    cb9c:	9225c83a 	sub	r18,r18,r8
    cba0:	2089883a 	add	r4,r4,r2
    cba4:	3909883a 	add	r4,r7,r4
    cba8:	1a47383a 	mul	r3,r3,r9
    cbac:	2080022e 	bgeu	r4,r2,cbb8 <__divdf3+0x438>
    cbb0:	00800074 	movhi	r2,1
    cbb4:	1887883a 	add	r3,r3,r2
    cbb8:	2004d43a 	srli	r2,r4,16
    cbbc:	2008943a 	slli	r4,r4,16
    cbc0:	297fffcc 	andi	r5,r5,65535
    cbc4:	10c7883a 	add	r3,r2,r3
    cbc8:	2149883a 	add	r4,r4,r5
    cbcc:	90c0a536 	bltu	r18,r3,ce64 <__divdf3+0x6e4>
    cbd0:	90c0bf26 	beq	r18,r3,ced0 <__divdf3+0x750>
    cbd4:	90c7c83a 	sub	r3,r18,r3
    cbd8:	810fc83a 	sub	r7,r16,r4
    cbdc:	81e5803a 	cmpltu	r18,r16,r7
    cbe0:	1ca5c83a 	sub	r18,r3,r18
    cbe4:	e480c126 	beq	fp,r18,ceec <__divdf3+0x76c>
    cbe8:	a00b883a 	mov	r5,r20
    cbec:	9009883a 	mov	r4,r18
    cbf0:	d9800315 	stw	r6,12(sp)
    cbf4:	d9c00215 	stw	r7,8(sp)
    cbf8:	da400115 	stw	r9,4(sp)
    cbfc:	0001cec0 	call	1cec <__udivsi3>
    cc00:	a00b883a 	mov	r5,r20
    cc04:	9009883a 	mov	r4,r18
    cc08:	d8800015 	stw	r2,0(sp)
    cc0c:	0001d500 	call	1d50 <__umodsi3>
    cc10:	d9c00217 	ldw	r7,8(sp)
    cc14:	da000017 	ldw	r8,0(sp)
    cc18:	1006943a 	slli	r3,r2,16
    cc1c:	3804d43a 	srli	r2,r7,16
    cc20:	ba21383a 	mul	r16,r23,r8
    cc24:	d9800317 	ldw	r6,12(sp)
    cc28:	10c4b03a 	or	r2,r2,r3
    cc2c:	da400117 	ldw	r9,4(sp)
    cc30:	1400062e 	bgeu	r2,r16,cc4c <__divdf3+0x4cc>
    cc34:	1705883a 	add	r2,r2,fp
    cc38:	40ffffc4 	addi	r3,r8,-1
    cc3c:	1700ad36 	bltu	r2,fp,cef4 <__divdf3+0x774>
    cc40:	1400ac2e 	bgeu	r2,r16,cef4 <__divdf3+0x774>
    cc44:	423fff84 	addi	r8,r8,-2
    cc48:	1705883a 	add	r2,r2,fp
    cc4c:	1421c83a 	sub	r16,r2,r16
    cc50:	a00b883a 	mov	r5,r20
    cc54:	8009883a 	mov	r4,r16
    cc58:	d9800315 	stw	r6,12(sp)
    cc5c:	d9c00215 	stw	r7,8(sp)
    cc60:	da000015 	stw	r8,0(sp)
    cc64:	da400115 	stw	r9,4(sp)
    cc68:	0001cec0 	call	1cec <__udivsi3>
    cc6c:	8009883a 	mov	r4,r16
    cc70:	a00b883a 	mov	r5,r20
    cc74:	1025883a 	mov	r18,r2
    cc78:	0001d500 	call	1d50 <__umodsi3>
    cc7c:	d9c00217 	ldw	r7,8(sp)
    cc80:	1004943a 	slli	r2,r2,16
    cc84:	bcaf383a 	mul	r23,r23,r18
    cc88:	393fffcc 	andi	r4,r7,65535
    cc8c:	2088b03a 	or	r4,r4,r2
    cc90:	d9800317 	ldw	r6,12(sp)
    cc94:	da000017 	ldw	r8,0(sp)
    cc98:	da400117 	ldw	r9,4(sp)
    cc9c:	25c0062e 	bgeu	r4,r23,ccb8 <__divdf3+0x538>
    cca0:	2709883a 	add	r4,r4,fp
    cca4:	90bfffc4 	addi	r2,r18,-1
    cca8:	27009436 	bltu	r4,fp,cefc <__divdf3+0x77c>
    ccac:	25c0932e 	bgeu	r4,r23,cefc <__divdf3+0x77c>
    ccb0:	94bfff84 	addi	r18,r18,-2
    ccb4:	2709883a 	add	r4,r4,fp
    ccb8:	4004943a 	slli	r2,r8,16
    ccbc:	25efc83a 	sub	r23,r4,r23
    ccc0:	1490b03a 	or	r8,r2,r18
    ccc4:	4008d43a 	srli	r4,r8,16
    ccc8:	40ffffcc 	andi	r3,r8,65535
    cccc:	30c5383a 	mul	r2,r6,r3
    ccd0:	1a47383a 	mul	r3,r3,r9
    ccd4:	310d383a 	mul	r6,r6,r4
    ccd8:	100ad43a 	srli	r5,r2,16
    ccdc:	4913383a 	mul	r9,r9,r4
    cce0:	1987883a 	add	r3,r3,r6
    cce4:	28c7883a 	add	r3,r5,r3
    cce8:	1980022e 	bgeu	r3,r6,ccf4 <__divdf3+0x574>
    ccec:	01000074 	movhi	r4,1
    ccf0:	4913883a 	add	r9,r9,r4
    ccf4:	1808d43a 	srli	r4,r3,16
    ccf8:	1806943a 	slli	r3,r3,16
    ccfc:	10bfffcc 	andi	r2,r2,65535
    cd00:	2253883a 	add	r9,r4,r9
    cd04:	1887883a 	add	r3,r3,r2
    cd08:	ba403836 	bltu	r23,r9,cdec <__divdf3+0x66c>
    cd0c:	ba403626 	beq	r23,r9,cde8 <__divdf3+0x668>
    cd10:	42000054 	ori	r8,r8,1
    cd14:	a880ffc4 	addi	r2,r21,1023
    cd18:	00bf570e 	bge	zero,r2,ca78 <__alt_data_end+0xff00ca78>
    cd1c:	40c001cc 	andi	r3,r8,7
    cd20:	18000726 	beq	r3,zero,cd40 <__divdf3+0x5c0>
    cd24:	40c003cc 	andi	r3,r8,15
    cd28:	01000104 	movi	r4,4
    cd2c:	19000426 	beq	r3,r4,cd40 <__divdf3+0x5c0>
    cd30:	4107883a 	add	r3,r8,r4
    cd34:	1a11803a 	cmpltu	r8,r3,r8
    cd38:	8a23883a 	add	r17,r17,r8
    cd3c:	1811883a 	mov	r8,r3
    cd40:	88c0402c 	andhi	r3,r17,256
    cd44:	18000426 	beq	r3,zero,cd58 <__divdf3+0x5d8>
    cd48:	00ffc034 	movhi	r3,65280
    cd4c:	18ffffc4 	addi	r3,r3,-1
    cd50:	a8810004 	addi	r2,r21,1024
    cd54:	88e2703a 	and	r17,r17,r3
    cd58:	00c1ff84 	movi	r3,2046
    cd5c:	18bee316 	blt	r3,r2,c8ec <__alt_data_end+0xff00c8ec>
    cd60:	8824977a 	slli	r18,r17,29
    cd64:	4010d0fa 	srli	r8,r8,3
    cd68:	8822927a 	slli	r17,r17,9
    cd6c:	1081ffcc 	andi	r2,r2,2047
    cd70:	9224b03a 	or	r18,r18,r8
    cd74:	880ad33a 	srli	r5,r17,12
    cd78:	98c0004c 	andi	r3,r19,1
    cd7c:	003edf06 	br	c8fc <__alt_data_end+0xff00c8fc>
    cd80:	8080022c 	andhi	r2,r16,8
    cd84:	10001226 	beq	r2,zero,cdd0 <__divdf3+0x650>
    cd88:	8880022c 	andhi	r2,r17,8
    cd8c:	1000101e 	bne	r2,zero,cdd0 <__divdf3+0x650>
    cd90:	00800434 	movhi	r2,16
    cd94:	89400234 	orhi	r5,r17,8
    cd98:	10bfffc4 	addi	r2,r2,-1
    cd9c:	b007883a 	mov	r3,r22
    cda0:	288a703a 	and	r5,r5,r2
    cda4:	4025883a 	mov	r18,r8
    cda8:	003f3106 	br	ca70 <__alt_data_end+0xff00ca70>
    cdac:	008000c4 	movi	r2,3
    cdb0:	3880a626 	beq	r7,r2,d04c <__divdf3+0x8cc>
    cdb4:	00800044 	movi	r2,1
    cdb8:	3880521e 	bne	r7,r2,cf04 <__divdf3+0x784>
    cdbc:	b807883a 	mov	r3,r23
    cdc0:	0005883a 	mov	r2,zero
    cdc4:	000b883a 	mov	r5,zero
    cdc8:	0025883a 	mov	r18,zero
    cdcc:	003ecb06 	br	c8fc <__alt_data_end+0xff00c8fc>
    cdd0:	00800434 	movhi	r2,16
    cdd4:	81400234 	orhi	r5,r16,8
    cdd8:	10bfffc4 	addi	r2,r2,-1
    cddc:	a007883a 	mov	r3,r20
    cde0:	288a703a 	and	r5,r5,r2
    cde4:	003f2206 	br	ca70 <__alt_data_end+0xff00ca70>
    cde8:	183fca26 	beq	r3,zero,cd14 <__alt_data_end+0xff00cd14>
    cdec:	e5ef883a 	add	r23,fp,r23
    cdf0:	40bfffc4 	addi	r2,r8,-1
    cdf4:	bf00392e 	bgeu	r23,fp,cedc <__divdf3+0x75c>
    cdf8:	1011883a 	mov	r8,r2
    cdfc:	ba7fc41e 	bne	r23,r9,cd10 <__alt_data_end+0xff00cd10>
    ce00:	b0ffc31e 	bne	r22,r3,cd10 <__alt_data_end+0xff00cd10>
    ce04:	003fc306 	br	cd14 <__alt_data_end+0xff00cd14>
    ce08:	143ff604 	addi	r16,r2,-40
    ce0c:	9c20983a 	sll	r16,r19,r16
    ce10:	0025883a 	mov	r18,zero
    ce14:	003ee206 	br	c9a0 <__alt_data_end+0xff00c9a0>
    ce18:	d9800315 	stw	r6,12(sp)
    ce1c:	d9c00215 	stw	r7,8(sp)
    ce20:	000e4d80 	call	e4d8 <__clzsi2>
    ce24:	10800804 	addi	r2,r2,32
    ce28:	d9c00217 	ldw	r7,8(sp)
    ce2c:	d9800317 	ldw	r6,12(sp)
    ce30:	003ed106 	br	c978 <__alt_data_end+0xff00c978>
    ce34:	147ff604 	addi	r17,r2,-40
    ce38:	3462983a 	sll	r17,r6,r17
    ce3c:	0011883a 	mov	r8,zero
    ce40:	003ef506 	br	ca18 <__alt_data_end+0xff00ca18>
    ce44:	3009883a 	mov	r4,r6
    ce48:	d9800315 	stw	r6,12(sp)
    ce4c:	da400115 	stw	r9,4(sp)
    ce50:	000e4d80 	call	e4d8 <__clzsi2>
    ce54:	10800804 	addi	r2,r2,32
    ce58:	da400117 	ldw	r9,4(sp)
    ce5c:	d9800317 	ldw	r6,12(sp)
    ce60:	003ee306 	br	c9f0 <__alt_data_end+0xff00c9f0>
    ce64:	85a1883a 	add	r16,r16,r22
    ce68:	8585803a 	cmpltu	r2,r16,r22
    ce6c:	1705883a 	add	r2,r2,fp
    ce70:	14a5883a 	add	r18,r2,r18
    ce74:	88bfffc4 	addi	r2,r17,-1
    ce78:	e4800c2e 	bgeu	fp,r18,ceac <__divdf3+0x72c>
    ce7c:	90c03e36 	bltu	r18,r3,cf78 <__divdf3+0x7f8>
    ce80:	1c806926 	beq	r3,r18,d028 <__divdf3+0x8a8>
    ce84:	90c7c83a 	sub	r3,r18,r3
    ce88:	1023883a 	mov	r17,r2
    ce8c:	003f5206 	br	cbd8 <__alt_data_end+0xff00cbd8>
    ce90:	923f0436 	bltu	r18,r8,caa4 <__alt_data_end+0xff00caa4>
    ce94:	800897fa 	slli	r4,r16,31
    ce98:	9004d07a 	srli	r2,r18,1
    ce9c:	8006d07a 	srli	r3,r16,1
    cea0:	902097fa 	slli	r16,r18,31
    cea4:	20a4b03a 	or	r18,r4,r2
    cea8:	003f0106 	br	cab0 <__alt_data_end+0xff00cab0>
    ceac:	e4bff51e 	bne	fp,r18,ce84 <__alt_data_end+0xff00ce84>
    ceb0:	85bff22e 	bgeu	r16,r22,ce7c <__alt_data_end+0xff00ce7c>
    ceb4:	e0c7c83a 	sub	r3,fp,r3
    ceb8:	1023883a 	mov	r17,r2
    cebc:	003f4606 	br	cbd8 <__alt_data_end+0xff00cbd8>
    cec0:	100f883a 	mov	r7,r2
    cec4:	003f2b06 	br	cb74 <__alt_data_end+0xff00cb74>
    cec8:	180d883a 	mov	r6,r3
    cecc:	003f1306 	br	cb1c <__alt_data_end+0xff00cb1c>
    ced0:	813fe436 	bltu	r16,r4,ce64 <__alt_data_end+0xff00ce64>
    ced4:	0007883a 	mov	r3,zero
    ced8:	003f3f06 	br	cbd8 <__alt_data_end+0xff00cbd8>
    cedc:	ba402c36 	bltu	r23,r9,cf90 <__divdf3+0x810>
    cee0:	4dc05426 	beq	r9,r23,d034 <__divdf3+0x8b4>
    cee4:	1011883a 	mov	r8,r2
    cee8:	003f8906 	br	cd10 <__alt_data_end+0xff00cd10>
    ceec:	023fffc4 	movi	r8,-1
    cef0:	003f8806 	br	cd14 <__alt_data_end+0xff00cd14>
    cef4:	1811883a 	mov	r8,r3
    cef8:	003f5406 	br	cc4c <__alt_data_end+0xff00cc4c>
    cefc:	1025883a 	mov	r18,r2
    cf00:	003f6d06 	br	ccb8 <__alt_data_end+0xff00ccb8>
    cf04:	b827883a 	mov	r19,r23
    cf08:	003f8206 	br	cd14 <__alt_data_end+0xff00cd14>
    cf0c:	010007c4 	movi	r4,31
    cf10:	20c02616 	blt	r4,r3,cfac <__divdf3+0x82c>
    cf14:	00800804 	movi	r2,32
    cf18:	10c5c83a 	sub	r2,r2,r3
    cf1c:	888a983a 	sll	r5,r17,r2
    cf20:	40c8d83a 	srl	r4,r8,r3
    cf24:	4084983a 	sll	r2,r8,r2
    cf28:	88e2d83a 	srl	r17,r17,r3
    cf2c:	2906b03a 	or	r3,r5,r4
    cf30:	1004c03a 	cmpne	r2,r2,zero
    cf34:	1886b03a 	or	r3,r3,r2
    cf38:	188001cc 	andi	r2,r3,7
    cf3c:	10000726 	beq	r2,zero,cf5c <__divdf3+0x7dc>
    cf40:	188003cc 	andi	r2,r3,15
    cf44:	01000104 	movi	r4,4
    cf48:	11000426 	beq	r2,r4,cf5c <__divdf3+0x7dc>
    cf4c:	1805883a 	mov	r2,r3
    cf50:	10c00104 	addi	r3,r2,4
    cf54:	1885803a 	cmpltu	r2,r3,r2
    cf58:	88a3883a 	add	r17,r17,r2
    cf5c:	8880202c 	andhi	r2,r17,128
    cf60:	10002726 	beq	r2,zero,d000 <__divdf3+0x880>
    cf64:	98c0004c 	andi	r3,r19,1
    cf68:	00800044 	movi	r2,1
    cf6c:	000b883a 	mov	r5,zero
    cf70:	0025883a 	mov	r18,zero
    cf74:	003e6106 	br	c8fc <__alt_data_end+0xff00c8fc>
    cf78:	85a1883a 	add	r16,r16,r22
    cf7c:	8585803a 	cmpltu	r2,r16,r22
    cf80:	1705883a 	add	r2,r2,fp
    cf84:	14a5883a 	add	r18,r2,r18
    cf88:	8c7fff84 	addi	r17,r17,-2
    cf8c:	003f1106 	br	cbd4 <__alt_data_end+0xff00cbd4>
    cf90:	b589883a 	add	r4,r22,r22
    cf94:	25ad803a 	cmpltu	r22,r4,r22
    cf98:	b739883a 	add	fp,r22,fp
    cf9c:	40bfff84 	addi	r2,r8,-2
    cfa0:	bf2f883a 	add	r23,r23,fp
    cfa4:	202d883a 	mov	r22,r4
    cfa8:	003f9306 	br	cdf8 <__alt_data_end+0xff00cdf8>
    cfac:	013ff844 	movi	r4,-31
    cfb0:	2085c83a 	sub	r2,r4,r2
    cfb4:	8888d83a 	srl	r4,r17,r2
    cfb8:	00800804 	movi	r2,32
    cfbc:	18802126 	beq	r3,r2,d044 <__divdf3+0x8c4>
    cfc0:	00801004 	movi	r2,64
    cfc4:	10c5c83a 	sub	r2,r2,r3
    cfc8:	8884983a 	sll	r2,r17,r2
    cfcc:	1204b03a 	or	r2,r2,r8
    cfd0:	1004c03a 	cmpne	r2,r2,zero
    cfd4:	2084b03a 	or	r2,r4,r2
    cfd8:	144001cc 	andi	r17,r2,7
    cfdc:	88000d1e 	bne	r17,zero,d014 <__divdf3+0x894>
    cfe0:	000b883a 	mov	r5,zero
    cfe4:	1024d0fa 	srli	r18,r2,3
    cfe8:	98c0004c 	andi	r3,r19,1
    cfec:	0005883a 	mov	r2,zero
    cff0:	9464b03a 	or	r18,r18,r17
    cff4:	003e4106 	br	c8fc <__alt_data_end+0xff00c8fc>
    cff8:	1007883a 	mov	r3,r2
    cffc:	0023883a 	mov	r17,zero
    d000:	880a927a 	slli	r5,r17,9
    d004:	1805883a 	mov	r2,r3
    d008:	8822977a 	slli	r17,r17,29
    d00c:	280ad33a 	srli	r5,r5,12
    d010:	003ff406 	br	cfe4 <__alt_data_end+0xff00cfe4>
    d014:	10c003cc 	andi	r3,r2,15
    d018:	01000104 	movi	r4,4
    d01c:	193ff626 	beq	r3,r4,cff8 <__alt_data_end+0xff00cff8>
    d020:	0023883a 	mov	r17,zero
    d024:	003fca06 	br	cf50 <__alt_data_end+0xff00cf50>
    d028:	813fd336 	bltu	r16,r4,cf78 <__alt_data_end+0xff00cf78>
    d02c:	1023883a 	mov	r17,r2
    d030:	003fa806 	br	ced4 <__alt_data_end+0xff00ced4>
    d034:	b0ffd636 	bltu	r22,r3,cf90 <__alt_data_end+0xff00cf90>
    d038:	1011883a 	mov	r8,r2
    d03c:	b0ff341e 	bne	r22,r3,cd10 <__alt_data_end+0xff00cd10>
    d040:	003f3406 	br	cd14 <__alt_data_end+0xff00cd14>
    d044:	0005883a 	mov	r2,zero
    d048:	003fe006 	br	cfcc <__alt_data_end+0xff00cfcc>
    d04c:	00800434 	movhi	r2,16
    d050:	89400234 	orhi	r5,r17,8
    d054:	10bfffc4 	addi	r2,r2,-1
    d058:	b807883a 	mov	r3,r23
    d05c:	288a703a 	and	r5,r5,r2
    d060:	4025883a 	mov	r18,r8
    d064:	003e8206 	br	ca70 <__alt_data_end+0xff00ca70>

0000d068 <__eqdf2>:
    d068:	2804d53a 	srli	r2,r5,20
    d06c:	3806d53a 	srli	r3,r7,20
    d070:	02000434 	movhi	r8,16
    d074:	423fffc4 	addi	r8,r8,-1
    d078:	1081ffcc 	andi	r2,r2,2047
    d07c:	0281ffc4 	movi	r10,2047
    d080:	2a12703a 	and	r9,r5,r8
    d084:	18c1ffcc 	andi	r3,r3,2047
    d088:	3a10703a 	and	r8,r7,r8
    d08c:	280ad7fa 	srli	r5,r5,31
    d090:	380ed7fa 	srli	r7,r7,31
    d094:	12801026 	beq	r2,r10,d0d8 <__eqdf2+0x70>
    d098:	0281ffc4 	movi	r10,2047
    d09c:	1a800a26 	beq	r3,r10,d0c8 <__eqdf2+0x60>
    d0a0:	10c00226 	beq	r2,r3,d0ac <__eqdf2+0x44>
    d0a4:	00800044 	movi	r2,1
    d0a8:	f800283a 	ret
    d0ac:	4a3ffd1e 	bne	r9,r8,d0a4 <__alt_data_end+0xff00d0a4>
    d0b0:	21bffc1e 	bne	r4,r6,d0a4 <__alt_data_end+0xff00d0a4>
    d0b4:	29c00c26 	beq	r5,r7,d0e8 <__eqdf2+0x80>
    d0b8:	103ffa1e 	bne	r2,zero,d0a4 <__alt_data_end+0xff00d0a4>
    d0bc:	2244b03a 	or	r2,r4,r9
    d0c0:	1004c03a 	cmpne	r2,r2,zero
    d0c4:	f800283a 	ret
    d0c8:	3214b03a 	or	r10,r6,r8
    d0cc:	503ff426 	beq	r10,zero,d0a0 <__alt_data_end+0xff00d0a0>
    d0d0:	00800044 	movi	r2,1
    d0d4:	f800283a 	ret
    d0d8:	2254b03a 	or	r10,r4,r9
    d0dc:	503fee26 	beq	r10,zero,d098 <__alt_data_end+0xff00d098>
    d0e0:	00800044 	movi	r2,1
    d0e4:	f800283a 	ret
    d0e8:	0005883a 	mov	r2,zero
    d0ec:	f800283a 	ret

0000d0f0 <__gedf2>:
    d0f0:	2804d53a 	srli	r2,r5,20
    d0f4:	3806d53a 	srli	r3,r7,20
    d0f8:	02000434 	movhi	r8,16
    d0fc:	423fffc4 	addi	r8,r8,-1
    d100:	1081ffcc 	andi	r2,r2,2047
    d104:	0241ffc4 	movi	r9,2047
    d108:	2a14703a 	and	r10,r5,r8
    d10c:	18c1ffcc 	andi	r3,r3,2047
    d110:	3a10703a 	and	r8,r7,r8
    d114:	280ad7fa 	srli	r5,r5,31
    d118:	380ed7fa 	srli	r7,r7,31
    d11c:	12401d26 	beq	r2,r9,d194 <__gedf2+0xa4>
    d120:	0241ffc4 	movi	r9,2047
    d124:	1a401226 	beq	r3,r9,d170 <__gedf2+0x80>
    d128:	1000081e 	bne	r2,zero,d14c <__gedf2+0x5c>
    d12c:	2296b03a 	or	r11,r4,r10
    d130:	5813003a 	cmpeq	r9,r11,zero
    d134:	1800091e 	bne	r3,zero,d15c <__gedf2+0x6c>
    d138:	3218b03a 	or	r12,r6,r8
    d13c:	6000071e 	bne	r12,zero,d15c <__gedf2+0x6c>
    d140:	0005883a 	mov	r2,zero
    d144:	5800101e 	bne	r11,zero,d188 <__gedf2+0x98>
    d148:	f800283a 	ret
    d14c:	18000c1e 	bne	r3,zero,d180 <__gedf2+0x90>
    d150:	3212b03a 	or	r9,r6,r8
    d154:	48000c26 	beq	r9,zero,d188 <__gedf2+0x98>
    d158:	0013883a 	mov	r9,zero
    d15c:	39c03fcc 	andi	r7,r7,255
    d160:	48000826 	beq	r9,zero,d184 <__gedf2+0x94>
    d164:	38000926 	beq	r7,zero,d18c <__gedf2+0x9c>
    d168:	00800044 	movi	r2,1
    d16c:	f800283a 	ret
    d170:	3212b03a 	or	r9,r6,r8
    d174:	483fec26 	beq	r9,zero,d128 <__alt_data_end+0xff00d128>
    d178:	00bfff84 	movi	r2,-2
    d17c:	f800283a 	ret
    d180:	39c03fcc 	andi	r7,r7,255
    d184:	29c00626 	beq	r5,r7,d1a0 <__gedf2+0xb0>
    d188:	283ff726 	beq	r5,zero,d168 <__alt_data_end+0xff00d168>
    d18c:	00bfffc4 	movi	r2,-1
    d190:	f800283a 	ret
    d194:	2292b03a 	or	r9,r4,r10
    d198:	483fe126 	beq	r9,zero,d120 <__alt_data_end+0xff00d120>
    d19c:	003ff606 	br	d178 <__alt_data_end+0xff00d178>
    d1a0:	18bff916 	blt	r3,r2,d188 <__alt_data_end+0xff00d188>
    d1a4:	10c00316 	blt	r2,r3,d1b4 <__gedf2+0xc4>
    d1a8:	42bff736 	bltu	r8,r10,d188 <__alt_data_end+0xff00d188>
    d1ac:	52000326 	beq	r10,r8,d1bc <__gedf2+0xcc>
    d1b0:	5200042e 	bgeu	r10,r8,d1c4 <__gedf2+0xd4>
    d1b4:	283fec1e 	bne	r5,zero,d168 <__alt_data_end+0xff00d168>
    d1b8:	003ff406 	br	d18c <__alt_data_end+0xff00d18c>
    d1bc:	313ff236 	bltu	r6,r4,d188 <__alt_data_end+0xff00d188>
    d1c0:	21bffc36 	bltu	r4,r6,d1b4 <__alt_data_end+0xff00d1b4>
    d1c4:	0005883a 	mov	r2,zero
    d1c8:	f800283a 	ret

0000d1cc <__ledf2>:
    d1cc:	2804d53a 	srli	r2,r5,20
    d1d0:	3810d53a 	srli	r8,r7,20
    d1d4:	00c00434 	movhi	r3,16
    d1d8:	18ffffc4 	addi	r3,r3,-1
    d1dc:	1081ffcc 	andi	r2,r2,2047
    d1e0:	0241ffc4 	movi	r9,2047
    d1e4:	28d4703a 	and	r10,r5,r3
    d1e8:	4201ffcc 	andi	r8,r8,2047
    d1ec:	38c6703a 	and	r3,r7,r3
    d1f0:	280ad7fa 	srli	r5,r5,31
    d1f4:	380ed7fa 	srli	r7,r7,31
    d1f8:	12401f26 	beq	r2,r9,d278 <__ledf2+0xac>
    d1fc:	0241ffc4 	movi	r9,2047
    d200:	42401426 	beq	r8,r9,d254 <__ledf2+0x88>
    d204:	1000091e 	bne	r2,zero,d22c <__ledf2+0x60>
    d208:	2296b03a 	or	r11,r4,r10
    d20c:	5813003a 	cmpeq	r9,r11,zero
    d210:	29403fcc 	andi	r5,r5,255
    d214:	40000a1e 	bne	r8,zero,d240 <__ledf2+0x74>
    d218:	30d8b03a 	or	r12,r6,r3
    d21c:	6000081e 	bne	r12,zero,d240 <__ledf2+0x74>
    d220:	0005883a 	mov	r2,zero
    d224:	5800111e 	bne	r11,zero,d26c <__ledf2+0xa0>
    d228:	f800283a 	ret
    d22c:	29403fcc 	andi	r5,r5,255
    d230:	40000c1e 	bne	r8,zero,d264 <__ledf2+0x98>
    d234:	30d2b03a 	or	r9,r6,r3
    d238:	48000c26 	beq	r9,zero,d26c <__ledf2+0xa0>
    d23c:	0013883a 	mov	r9,zero
    d240:	39c03fcc 	andi	r7,r7,255
    d244:	48000826 	beq	r9,zero,d268 <__ledf2+0x9c>
    d248:	38001126 	beq	r7,zero,d290 <__ledf2+0xc4>
    d24c:	00800044 	movi	r2,1
    d250:	f800283a 	ret
    d254:	30d2b03a 	or	r9,r6,r3
    d258:	483fea26 	beq	r9,zero,d204 <__alt_data_end+0xff00d204>
    d25c:	00800084 	movi	r2,2
    d260:	f800283a 	ret
    d264:	39c03fcc 	andi	r7,r7,255
    d268:	39400726 	beq	r7,r5,d288 <__ledf2+0xbc>
    d26c:	2800081e 	bne	r5,zero,d290 <__ledf2+0xc4>
    d270:	00800044 	movi	r2,1
    d274:	f800283a 	ret
    d278:	2292b03a 	or	r9,r4,r10
    d27c:	483fdf26 	beq	r9,zero,d1fc <__alt_data_end+0xff00d1fc>
    d280:	00800084 	movi	r2,2
    d284:	f800283a 	ret
    d288:	4080030e 	bge	r8,r2,d298 <__ledf2+0xcc>
    d28c:	383fef26 	beq	r7,zero,d24c <__alt_data_end+0xff00d24c>
    d290:	00bfffc4 	movi	r2,-1
    d294:	f800283a 	ret
    d298:	123feb16 	blt	r2,r8,d248 <__alt_data_end+0xff00d248>
    d29c:	1abff336 	bltu	r3,r10,d26c <__alt_data_end+0xff00d26c>
    d2a0:	50c00326 	beq	r10,r3,d2b0 <__ledf2+0xe4>
    d2a4:	50c0042e 	bgeu	r10,r3,d2b8 <__ledf2+0xec>
    d2a8:	283fe81e 	bne	r5,zero,d24c <__alt_data_end+0xff00d24c>
    d2ac:	003ff806 	br	d290 <__alt_data_end+0xff00d290>
    d2b0:	313fee36 	bltu	r6,r4,d26c <__alt_data_end+0xff00d26c>
    d2b4:	21bffc36 	bltu	r4,r6,d2a8 <__alt_data_end+0xff00d2a8>
    d2b8:	0005883a 	mov	r2,zero
    d2bc:	f800283a 	ret

0000d2c0 <__muldf3>:
    d2c0:	defff304 	addi	sp,sp,-52
    d2c4:	2804d53a 	srli	r2,r5,20
    d2c8:	dd800915 	stw	r22,36(sp)
    d2cc:	282cd7fa 	srli	r22,r5,31
    d2d0:	dc000315 	stw	r16,12(sp)
    d2d4:	04000434 	movhi	r16,16
    d2d8:	dd400815 	stw	r21,32(sp)
    d2dc:	dc800515 	stw	r18,20(sp)
    d2e0:	843fffc4 	addi	r16,r16,-1
    d2e4:	dfc00c15 	stw	ra,48(sp)
    d2e8:	df000b15 	stw	fp,44(sp)
    d2ec:	ddc00a15 	stw	r23,40(sp)
    d2f0:	dd000715 	stw	r20,28(sp)
    d2f4:	dcc00615 	stw	r19,24(sp)
    d2f8:	dc400415 	stw	r17,16(sp)
    d2fc:	1481ffcc 	andi	r18,r2,2047
    d300:	2c20703a 	and	r16,r5,r16
    d304:	b02b883a 	mov	r21,r22
    d308:	b2403fcc 	andi	r9,r22,255
    d30c:	90006026 	beq	r18,zero,d490 <__muldf3+0x1d0>
    d310:	0081ffc4 	movi	r2,2047
    d314:	2029883a 	mov	r20,r4
    d318:	90803626 	beq	r18,r2,d3f4 <__muldf3+0x134>
    d31c:	80800434 	orhi	r2,r16,16
    d320:	100490fa 	slli	r2,r2,3
    d324:	2020d77a 	srli	r16,r4,29
    d328:	202890fa 	slli	r20,r4,3
    d32c:	94bf0044 	addi	r18,r18,-1023
    d330:	80a0b03a 	or	r16,r16,r2
    d334:	0027883a 	mov	r19,zero
    d338:	0039883a 	mov	fp,zero
    d33c:	3804d53a 	srli	r2,r7,20
    d340:	382ed7fa 	srli	r23,r7,31
    d344:	04400434 	movhi	r17,16
    d348:	8c7fffc4 	addi	r17,r17,-1
    d34c:	1081ffcc 	andi	r2,r2,2047
    d350:	3011883a 	mov	r8,r6
    d354:	3c62703a 	and	r17,r7,r17
    d358:	ba803fcc 	andi	r10,r23,255
    d35c:	10006d26 	beq	r2,zero,d514 <__muldf3+0x254>
    d360:	00c1ffc4 	movi	r3,2047
    d364:	10c06526 	beq	r2,r3,d4fc <__muldf3+0x23c>
    d368:	88c00434 	orhi	r3,r17,16
    d36c:	180690fa 	slli	r3,r3,3
    d370:	3022d77a 	srli	r17,r6,29
    d374:	301090fa 	slli	r8,r6,3
    d378:	10bf0044 	addi	r2,r2,-1023
    d37c:	88e2b03a 	or	r17,r17,r3
    d380:	000b883a 	mov	r5,zero
    d384:	9085883a 	add	r2,r18,r2
    d388:	2cc8b03a 	or	r4,r5,r19
    d38c:	00c003c4 	movi	r3,15
    d390:	bdacf03a 	xor	r22,r23,r22
    d394:	12c00044 	addi	r11,r2,1
    d398:	19009936 	bltu	r3,r4,d600 <__muldf3+0x340>
    d39c:	200890ba 	slli	r4,r4,2
    d3a0:	00c00074 	movhi	r3,1
    d3a4:	18f4ed04 	addi	r3,r3,-11340
    d3a8:	20c9883a 	add	r4,r4,r3
    d3ac:	20c00017 	ldw	r3,0(r4)
    d3b0:	1800683a 	jmp	r3
    d3b4:	0000d600 	call	d60 <init_LCD+0x338>
    d3b8:	0000d414 	movui	zero,848
    d3bc:	0000d414 	movui	zero,848
    d3c0:	0000d410 	cmplti	zero,zero,848
    d3c4:	0000d5dc 	xori	zero,zero,855
    d3c8:	0000d5dc 	xori	zero,zero,855
    d3cc:	0000d5c4 	movi	zero,855
    d3d0:	0000d410 	cmplti	zero,zero,848
    d3d4:	0000d5dc 	xori	zero,zero,855
    d3d8:	0000d5c4 	movi	zero,855
    d3dc:	0000d5dc 	xori	zero,zero,855
    d3e0:	0000d410 	cmplti	zero,zero,848
    d3e4:	0000d5ec 	andhi	zero,zero,855
    d3e8:	0000d5ec 	andhi	zero,zero,855
    d3ec:	0000d5ec 	andhi	zero,zero,855
    d3f0:	0000d808 	cmpgei	zero,zero,864
    d3f4:	2404b03a 	or	r2,r4,r16
    d3f8:	10006f1e 	bne	r2,zero,d5b8 <__muldf3+0x2f8>
    d3fc:	04c00204 	movi	r19,8
    d400:	0021883a 	mov	r16,zero
    d404:	0029883a 	mov	r20,zero
    d408:	07000084 	movi	fp,2
    d40c:	003fcb06 	br	d33c <__alt_data_end+0xff00d33c>
    d410:	502d883a 	mov	r22,r10
    d414:	00800084 	movi	r2,2
    d418:	28805726 	beq	r5,r2,d578 <__muldf3+0x2b8>
    d41c:	008000c4 	movi	r2,3
    d420:	28816626 	beq	r5,r2,d9bc <__muldf3+0x6fc>
    d424:	00800044 	movi	r2,1
    d428:	2881411e 	bne	r5,r2,d930 <__muldf3+0x670>
    d42c:	b02b883a 	mov	r21,r22
    d430:	0005883a 	mov	r2,zero
    d434:	000b883a 	mov	r5,zero
    d438:	0029883a 	mov	r20,zero
    d43c:	1004953a 	slli	r2,r2,20
    d440:	a8c03fcc 	andi	r3,r21,255
    d444:	04400434 	movhi	r17,16
    d448:	8c7fffc4 	addi	r17,r17,-1
    d44c:	180697fa 	slli	r3,r3,31
    d450:	2c4a703a 	and	r5,r5,r17
    d454:	288ab03a 	or	r5,r5,r2
    d458:	28c6b03a 	or	r3,r5,r3
    d45c:	a005883a 	mov	r2,r20
    d460:	dfc00c17 	ldw	ra,48(sp)
    d464:	df000b17 	ldw	fp,44(sp)
    d468:	ddc00a17 	ldw	r23,40(sp)
    d46c:	dd800917 	ldw	r22,36(sp)
    d470:	dd400817 	ldw	r21,32(sp)
    d474:	dd000717 	ldw	r20,28(sp)
    d478:	dcc00617 	ldw	r19,24(sp)
    d47c:	dc800517 	ldw	r18,20(sp)
    d480:	dc400417 	ldw	r17,16(sp)
    d484:	dc000317 	ldw	r16,12(sp)
    d488:	dec00d04 	addi	sp,sp,52
    d48c:	f800283a 	ret
    d490:	2404b03a 	or	r2,r4,r16
    d494:	2027883a 	mov	r19,r4
    d498:	10004226 	beq	r2,zero,d5a4 <__muldf3+0x2e4>
    d49c:	8000fc26 	beq	r16,zero,d890 <__muldf3+0x5d0>
    d4a0:	8009883a 	mov	r4,r16
    d4a4:	d9800215 	stw	r6,8(sp)
    d4a8:	d9c00015 	stw	r7,0(sp)
    d4ac:	da400115 	stw	r9,4(sp)
    d4b0:	000e4d80 	call	e4d8 <__clzsi2>
    d4b4:	d9800217 	ldw	r6,8(sp)
    d4b8:	d9c00017 	ldw	r7,0(sp)
    d4bc:	da400117 	ldw	r9,4(sp)
    d4c0:	113ffd44 	addi	r4,r2,-11
    d4c4:	00c00704 	movi	r3,28
    d4c8:	1900ed16 	blt	r3,r4,d880 <__muldf3+0x5c0>
    d4cc:	00c00744 	movi	r3,29
    d4d0:	147ffe04 	addi	r17,r2,-8
    d4d4:	1907c83a 	sub	r3,r3,r4
    d4d8:	8460983a 	sll	r16,r16,r17
    d4dc:	98c6d83a 	srl	r3,r19,r3
    d4e0:	9c68983a 	sll	r20,r19,r17
    d4e4:	1c20b03a 	or	r16,r3,r16
    d4e8:	1080fcc4 	addi	r2,r2,1011
    d4ec:	00a5c83a 	sub	r18,zero,r2
    d4f0:	0027883a 	mov	r19,zero
    d4f4:	0039883a 	mov	fp,zero
    d4f8:	003f9006 	br	d33c <__alt_data_end+0xff00d33c>
    d4fc:	3446b03a 	or	r3,r6,r17
    d500:	1800261e 	bne	r3,zero,d59c <__muldf3+0x2dc>
    d504:	0023883a 	mov	r17,zero
    d508:	0011883a 	mov	r8,zero
    d50c:	01400084 	movi	r5,2
    d510:	003f9c06 	br	d384 <__alt_data_end+0xff00d384>
    d514:	3446b03a 	or	r3,r6,r17
    d518:	18001c26 	beq	r3,zero,d58c <__muldf3+0x2cc>
    d51c:	8800ce26 	beq	r17,zero,d858 <__muldf3+0x598>
    d520:	8809883a 	mov	r4,r17
    d524:	d9800215 	stw	r6,8(sp)
    d528:	da400115 	stw	r9,4(sp)
    d52c:	da800015 	stw	r10,0(sp)
    d530:	000e4d80 	call	e4d8 <__clzsi2>
    d534:	d9800217 	ldw	r6,8(sp)
    d538:	da400117 	ldw	r9,4(sp)
    d53c:	da800017 	ldw	r10,0(sp)
    d540:	113ffd44 	addi	r4,r2,-11
    d544:	00c00704 	movi	r3,28
    d548:	1900bf16 	blt	r3,r4,d848 <__muldf3+0x588>
    d54c:	00c00744 	movi	r3,29
    d550:	123ffe04 	addi	r8,r2,-8
    d554:	1907c83a 	sub	r3,r3,r4
    d558:	8a22983a 	sll	r17,r17,r8
    d55c:	30c6d83a 	srl	r3,r6,r3
    d560:	3210983a 	sll	r8,r6,r8
    d564:	1c62b03a 	or	r17,r3,r17
    d568:	1080fcc4 	addi	r2,r2,1011
    d56c:	0085c83a 	sub	r2,zero,r2
    d570:	000b883a 	mov	r5,zero
    d574:	003f8306 	br	d384 <__alt_data_end+0xff00d384>
    d578:	b02b883a 	mov	r21,r22
    d57c:	0081ffc4 	movi	r2,2047
    d580:	000b883a 	mov	r5,zero
    d584:	0029883a 	mov	r20,zero
    d588:	003fac06 	br	d43c <__alt_data_end+0xff00d43c>
    d58c:	0023883a 	mov	r17,zero
    d590:	0011883a 	mov	r8,zero
    d594:	01400044 	movi	r5,1
    d598:	003f7a06 	br	d384 <__alt_data_end+0xff00d384>
    d59c:	014000c4 	movi	r5,3
    d5a0:	003f7806 	br	d384 <__alt_data_end+0xff00d384>
    d5a4:	04c00104 	movi	r19,4
    d5a8:	0021883a 	mov	r16,zero
    d5ac:	0029883a 	mov	r20,zero
    d5b0:	07000044 	movi	fp,1
    d5b4:	003f6106 	br	d33c <__alt_data_end+0xff00d33c>
    d5b8:	04c00304 	movi	r19,12
    d5bc:	070000c4 	movi	fp,3
    d5c0:	003f5e06 	br	d33c <__alt_data_end+0xff00d33c>
    d5c4:	01400434 	movhi	r5,16
    d5c8:	002b883a 	mov	r21,zero
    d5cc:	297fffc4 	addi	r5,r5,-1
    d5d0:	053fffc4 	movi	r20,-1
    d5d4:	0081ffc4 	movi	r2,2047
    d5d8:	003f9806 	br	d43c <__alt_data_end+0xff00d43c>
    d5dc:	8023883a 	mov	r17,r16
    d5e0:	a011883a 	mov	r8,r20
    d5e4:	e00b883a 	mov	r5,fp
    d5e8:	003f8a06 	br	d414 <__alt_data_end+0xff00d414>
    d5ec:	8023883a 	mov	r17,r16
    d5f0:	a011883a 	mov	r8,r20
    d5f4:	482d883a 	mov	r22,r9
    d5f8:	e00b883a 	mov	r5,fp
    d5fc:	003f8506 	br	d414 <__alt_data_end+0xff00d414>
    d600:	a00ad43a 	srli	r5,r20,16
    d604:	401ad43a 	srli	r13,r8,16
    d608:	a53fffcc 	andi	r20,r20,65535
    d60c:	423fffcc 	andi	r8,r8,65535
    d610:	4519383a 	mul	r12,r8,r20
    d614:	4147383a 	mul	r3,r8,r5
    d618:	6d09383a 	mul	r4,r13,r20
    d61c:	600cd43a 	srli	r6,r12,16
    d620:	2b5d383a 	mul	r14,r5,r13
    d624:	20c9883a 	add	r4,r4,r3
    d628:	310d883a 	add	r6,r6,r4
    d62c:	30c0022e 	bgeu	r6,r3,d638 <__muldf3+0x378>
    d630:	00c00074 	movhi	r3,1
    d634:	70dd883a 	add	r14,r14,r3
    d638:	8826d43a 	srli	r19,r17,16
    d63c:	8bffffcc 	andi	r15,r17,65535
    d640:	7d23383a 	mul	r17,r15,r20
    d644:	7949383a 	mul	r4,r15,r5
    d648:	9d29383a 	mul	r20,r19,r20
    d64c:	8814d43a 	srli	r10,r17,16
    d650:	3012943a 	slli	r9,r6,16
    d654:	a129883a 	add	r20,r20,r4
    d658:	633fffcc 	andi	r12,r12,65535
    d65c:	5515883a 	add	r10,r10,r20
    d660:	3006d43a 	srli	r3,r6,16
    d664:	4b13883a 	add	r9,r9,r12
    d668:	2ccb383a 	mul	r5,r5,r19
    d66c:	5100022e 	bgeu	r10,r4,d678 <__muldf3+0x3b8>
    d670:	01000074 	movhi	r4,1
    d674:	290b883a 	add	r5,r5,r4
    d678:	802ad43a 	srli	r21,r16,16
    d67c:	843fffcc 	andi	r16,r16,65535
    d680:	440d383a 	mul	r6,r8,r16
    d684:	4565383a 	mul	r18,r8,r21
    d688:	8349383a 	mul	r4,r16,r13
    d68c:	500e943a 	slli	r7,r10,16
    d690:	3010d43a 	srli	r8,r6,16
    d694:	5028d43a 	srli	r20,r10,16
    d698:	2489883a 	add	r4,r4,r18
    d69c:	8abfffcc 	andi	r10,r17,65535
    d6a0:	3a95883a 	add	r10,r7,r10
    d6a4:	4119883a 	add	r12,r8,r4
    d6a8:	a169883a 	add	r20,r20,r5
    d6ac:	1a87883a 	add	r3,r3,r10
    d6b0:	6d5b383a 	mul	r13,r13,r21
    d6b4:	6480022e 	bgeu	r12,r18,d6c0 <__muldf3+0x400>
    d6b8:	01000074 	movhi	r4,1
    d6bc:	691b883a 	add	r13,r13,r4
    d6c0:	7c25383a 	mul	r18,r15,r16
    d6c4:	7d4b383a 	mul	r5,r15,r21
    d6c8:	84cf383a 	mul	r7,r16,r19
    d6cc:	901ed43a 	srli	r15,r18,16
    d6d0:	6008d43a 	srli	r4,r12,16
    d6d4:	6010943a 	slli	r8,r12,16
    d6d8:	394f883a 	add	r7,r7,r5
    d6dc:	333fffcc 	andi	r12,r6,65535
    d6e0:	79df883a 	add	r15,r15,r7
    d6e4:	235b883a 	add	r13,r4,r13
    d6e8:	9d63383a 	mul	r17,r19,r21
    d6ec:	4309883a 	add	r4,r8,r12
    d6f0:	7940022e 	bgeu	r15,r5,d6fc <__muldf3+0x43c>
    d6f4:	01400074 	movhi	r5,1
    d6f8:	8963883a 	add	r17,r17,r5
    d6fc:	780a943a 	slli	r5,r15,16
    d700:	91bfffcc 	andi	r6,r18,65535
    d704:	70c7883a 	add	r3,r14,r3
    d708:	298d883a 	add	r6,r5,r6
    d70c:	1a8f803a 	cmpltu	r7,r3,r10
    d710:	350b883a 	add	r5,r6,r20
    d714:	20c7883a 	add	r3,r4,r3
    d718:	3955883a 	add	r10,r7,r5
    d71c:	1909803a 	cmpltu	r4,r3,r4
    d720:	6a91883a 	add	r8,r13,r10
    d724:	780cd43a 	srli	r6,r15,16
    d728:	2219883a 	add	r12,r4,r8
    d72c:	2d0b803a 	cmpltu	r5,r5,r20
    d730:	51cf803a 	cmpltu	r7,r10,r7
    d734:	29ceb03a 	or	r7,r5,r7
    d738:	4351803a 	cmpltu	r8,r8,r13
    d73c:	610b803a 	cmpltu	r5,r12,r4
    d740:	4148b03a 	or	r4,r8,r5
    d744:	398f883a 	add	r7,r7,r6
    d748:	3909883a 	add	r4,r7,r4
    d74c:	1810927a 	slli	r8,r3,9
    d750:	2449883a 	add	r4,r4,r17
    d754:	2008927a 	slli	r4,r4,9
    d758:	6022d5fa 	srli	r17,r12,23
    d75c:	1806d5fa 	srli	r3,r3,23
    d760:	4252b03a 	or	r9,r8,r9
    d764:	600a927a 	slli	r5,r12,9
    d768:	4810c03a 	cmpne	r8,r9,zero
    d76c:	2462b03a 	or	r17,r4,r17
    d770:	40c6b03a 	or	r3,r8,r3
    d774:	8900402c 	andhi	r4,r17,256
    d778:	1950b03a 	or	r8,r3,r5
    d77c:	20000726 	beq	r4,zero,d79c <__muldf3+0x4dc>
    d780:	4006d07a 	srli	r3,r8,1
    d784:	880497fa 	slli	r2,r17,31
    d788:	4200004c 	andi	r8,r8,1
    d78c:	8822d07a 	srli	r17,r17,1
    d790:	1a10b03a 	or	r8,r3,r8
    d794:	1210b03a 	or	r8,r2,r8
    d798:	5805883a 	mov	r2,r11
    d79c:	1140ffc4 	addi	r5,r2,1023
    d7a0:	0140440e 	bge	zero,r5,d8b4 <__muldf3+0x5f4>
    d7a4:	40c001cc 	andi	r3,r8,7
    d7a8:	18000726 	beq	r3,zero,d7c8 <__muldf3+0x508>
    d7ac:	40c003cc 	andi	r3,r8,15
    d7b0:	01000104 	movi	r4,4
    d7b4:	19000426 	beq	r3,r4,d7c8 <__muldf3+0x508>
    d7b8:	4107883a 	add	r3,r8,r4
    d7bc:	1a11803a 	cmpltu	r8,r3,r8
    d7c0:	8a23883a 	add	r17,r17,r8
    d7c4:	1811883a 	mov	r8,r3
    d7c8:	88c0402c 	andhi	r3,r17,256
    d7cc:	18000426 	beq	r3,zero,d7e0 <__muldf3+0x520>
    d7d0:	11410004 	addi	r5,r2,1024
    d7d4:	00bfc034 	movhi	r2,65280
    d7d8:	10bfffc4 	addi	r2,r2,-1
    d7dc:	88a2703a 	and	r17,r17,r2
    d7e0:	0081ff84 	movi	r2,2046
    d7e4:	117f6416 	blt	r2,r5,d578 <__alt_data_end+0xff00d578>
    d7e8:	8828977a 	slli	r20,r17,29
    d7ec:	4010d0fa 	srli	r8,r8,3
    d7f0:	8822927a 	slli	r17,r17,9
    d7f4:	2881ffcc 	andi	r2,r5,2047
    d7f8:	a228b03a 	or	r20,r20,r8
    d7fc:	880ad33a 	srli	r5,r17,12
    d800:	b02b883a 	mov	r21,r22
    d804:	003f0d06 	br	d43c <__alt_data_end+0xff00d43c>
    d808:	8080022c 	andhi	r2,r16,8
    d80c:	10000926 	beq	r2,zero,d834 <__muldf3+0x574>
    d810:	8880022c 	andhi	r2,r17,8
    d814:	1000071e 	bne	r2,zero,d834 <__muldf3+0x574>
    d818:	00800434 	movhi	r2,16
    d81c:	89400234 	orhi	r5,r17,8
    d820:	10bfffc4 	addi	r2,r2,-1
    d824:	b82b883a 	mov	r21,r23
    d828:	288a703a 	and	r5,r5,r2
    d82c:	4029883a 	mov	r20,r8
    d830:	003f6806 	br	d5d4 <__alt_data_end+0xff00d5d4>
    d834:	00800434 	movhi	r2,16
    d838:	81400234 	orhi	r5,r16,8
    d83c:	10bfffc4 	addi	r2,r2,-1
    d840:	288a703a 	and	r5,r5,r2
    d844:	003f6306 	br	d5d4 <__alt_data_end+0xff00d5d4>
    d848:	147ff604 	addi	r17,r2,-40
    d84c:	3462983a 	sll	r17,r6,r17
    d850:	0011883a 	mov	r8,zero
    d854:	003f4406 	br	d568 <__alt_data_end+0xff00d568>
    d858:	3009883a 	mov	r4,r6
    d85c:	d9800215 	stw	r6,8(sp)
    d860:	da400115 	stw	r9,4(sp)
    d864:	da800015 	stw	r10,0(sp)
    d868:	000e4d80 	call	e4d8 <__clzsi2>
    d86c:	10800804 	addi	r2,r2,32
    d870:	da800017 	ldw	r10,0(sp)
    d874:	da400117 	ldw	r9,4(sp)
    d878:	d9800217 	ldw	r6,8(sp)
    d87c:	003f3006 	br	d540 <__alt_data_end+0xff00d540>
    d880:	143ff604 	addi	r16,r2,-40
    d884:	9c20983a 	sll	r16,r19,r16
    d888:	0029883a 	mov	r20,zero
    d88c:	003f1606 	br	d4e8 <__alt_data_end+0xff00d4e8>
    d890:	d9800215 	stw	r6,8(sp)
    d894:	d9c00015 	stw	r7,0(sp)
    d898:	da400115 	stw	r9,4(sp)
    d89c:	000e4d80 	call	e4d8 <__clzsi2>
    d8a0:	10800804 	addi	r2,r2,32
    d8a4:	da400117 	ldw	r9,4(sp)
    d8a8:	d9c00017 	ldw	r7,0(sp)
    d8ac:	d9800217 	ldw	r6,8(sp)
    d8b0:	003f0306 	br	d4c0 <__alt_data_end+0xff00d4c0>
    d8b4:	00c00044 	movi	r3,1
    d8b8:	1947c83a 	sub	r3,r3,r5
    d8bc:	00800e04 	movi	r2,56
    d8c0:	10feda16 	blt	r2,r3,d42c <__alt_data_end+0xff00d42c>
    d8c4:	008007c4 	movi	r2,31
    d8c8:	10c01b16 	blt	r2,r3,d938 <__muldf3+0x678>
    d8cc:	00800804 	movi	r2,32
    d8d0:	10c5c83a 	sub	r2,r2,r3
    d8d4:	888a983a 	sll	r5,r17,r2
    d8d8:	40c8d83a 	srl	r4,r8,r3
    d8dc:	4084983a 	sll	r2,r8,r2
    d8e0:	88e2d83a 	srl	r17,r17,r3
    d8e4:	2906b03a 	or	r3,r5,r4
    d8e8:	1004c03a 	cmpne	r2,r2,zero
    d8ec:	1886b03a 	or	r3,r3,r2
    d8f0:	188001cc 	andi	r2,r3,7
    d8f4:	10000726 	beq	r2,zero,d914 <__muldf3+0x654>
    d8f8:	188003cc 	andi	r2,r3,15
    d8fc:	01000104 	movi	r4,4
    d900:	11000426 	beq	r2,r4,d914 <__muldf3+0x654>
    d904:	1805883a 	mov	r2,r3
    d908:	10c00104 	addi	r3,r2,4
    d90c:	1885803a 	cmpltu	r2,r3,r2
    d910:	88a3883a 	add	r17,r17,r2
    d914:	8880202c 	andhi	r2,r17,128
    d918:	10001c26 	beq	r2,zero,d98c <__muldf3+0x6cc>
    d91c:	b02b883a 	mov	r21,r22
    d920:	00800044 	movi	r2,1
    d924:	000b883a 	mov	r5,zero
    d928:	0029883a 	mov	r20,zero
    d92c:	003ec306 	br	d43c <__alt_data_end+0xff00d43c>
    d930:	5805883a 	mov	r2,r11
    d934:	003f9906 	br	d79c <__alt_data_end+0xff00d79c>
    d938:	00bff844 	movi	r2,-31
    d93c:	1145c83a 	sub	r2,r2,r5
    d940:	8888d83a 	srl	r4,r17,r2
    d944:	00800804 	movi	r2,32
    d948:	18801a26 	beq	r3,r2,d9b4 <__muldf3+0x6f4>
    d94c:	00801004 	movi	r2,64
    d950:	10c5c83a 	sub	r2,r2,r3
    d954:	8884983a 	sll	r2,r17,r2
    d958:	1204b03a 	or	r2,r2,r8
    d95c:	1004c03a 	cmpne	r2,r2,zero
    d960:	2084b03a 	or	r2,r4,r2
    d964:	144001cc 	andi	r17,r2,7
    d968:	88000d1e 	bne	r17,zero,d9a0 <__muldf3+0x6e0>
    d96c:	000b883a 	mov	r5,zero
    d970:	1028d0fa 	srli	r20,r2,3
    d974:	b02b883a 	mov	r21,r22
    d978:	0005883a 	mov	r2,zero
    d97c:	a468b03a 	or	r20,r20,r17
    d980:	003eae06 	br	d43c <__alt_data_end+0xff00d43c>
    d984:	1007883a 	mov	r3,r2
    d988:	0023883a 	mov	r17,zero
    d98c:	880a927a 	slli	r5,r17,9
    d990:	1805883a 	mov	r2,r3
    d994:	8822977a 	slli	r17,r17,29
    d998:	280ad33a 	srli	r5,r5,12
    d99c:	003ff406 	br	d970 <__alt_data_end+0xff00d970>
    d9a0:	10c003cc 	andi	r3,r2,15
    d9a4:	01000104 	movi	r4,4
    d9a8:	193ff626 	beq	r3,r4,d984 <__alt_data_end+0xff00d984>
    d9ac:	0023883a 	mov	r17,zero
    d9b0:	003fd506 	br	d908 <__alt_data_end+0xff00d908>
    d9b4:	0005883a 	mov	r2,zero
    d9b8:	003fe706 	br	d958 <__alt_data_end+0xff00d958>
    d9bc:	00800434 	movhi	r2,16
    d9c0:	89400234 	orhi	r5,r17,8
    d9c4:	10bfffc4 	addi	r2,r2,-1
    d9c8:	b02b883a 	mov	r21,r22
    d9cc:	288a703a 	and	r5,r5,r2
    d9d0:	4029883a 	mov	r20,r8
    d9d4:	003eff06 	br	d5d4 <__alt_data_end+0xff00d5d4>

0000d9d8 <__subdf3>:
    d9d8:	02000434 	movhi	r8,16
    d9dc:	423fffc4 	addi	r8,r8,-1
    d9e0:	defffb04 	addi	sp,sp,-20
    d9e4:	2a14703a 	and	r10,r5,r8
    d9e8:	3812d53a 	srli	r9,r7,20
    d9ec:	3a10703a 	and	r8,r7,r8
    d9f0:	2006d77a 	srli	r3,r4,29
    d9f4:	3004d77a 	srli	r2,r6,29
    d9f8:	dc000015 	stw	r16,0(sp)
    d9fc:	501490fa 	slli	r10,r10,3
    da00:	2820d53a 	srli	r16,r5,20
    da04:	401090fa 	slli	r8,r8,3
    da08:	dc800215 	stw	r18,8(sp)
    da0c:	dc400115 	stw	r17,4(sp)
    da10:	dfc00415 	stw	ra,16(sp)
    da14:	202290fa 	slli	r17,r4,3
    da18:	dcc00315 	stw	r19,12(sp)
    da1c:	4a41ffcc 	andi	r9,r9,2047
    da20:	0101ffc4 	movi	r4,2047
    da24:	2824d7fa 	srli	r18,r5,31
    da28:	8401ffcc 	andi	r16,r16,2047
    da2c:	50c6b03a 	or	r3,r10,r3
    da30:	380ed7fa 	srli	r7,r7,31
    da34:	408ab03a 	or	r5,r8,r2
    da38:	300c90fa 	slli	r6,r6,3
    da3c:	49009626 	beq	r9,r4,dc98 <__subdf3+0x2c0>
    da40:	39c0005c 	xori	r7,r7,1
    da44:	8245c83a 	sub	r2,r16,r9
    da48:	3c807426 	beq	r7,r18,dc1c <__subdf3+0x244>
    da4c:	0080af0e 	bge	zero,r2,dd0c <__subdf3+0x334>
    da50:	48002a1e 	bne	r9,zero,dafc <__subdf3+0x124>
    da54:	2988b03a 	or	r4,r5,r6
    da58:	20009a1e 	bne	r4,zero,dcc4 <__subdf3+0x2ec>
    da5c:	888001cc 	andi	r2,r17,7
    da60:	10000726 	beq	r2,zero,da80 <__subdf3+0xa8>
    da64:	888003cc 	andi	r2,r17,15
    da68:	01000104 	movi	r4,4
    da6c:	11000426 	beq	r2,r4,da80 <__subdf3+0xa8>
    da70:	890b883a 	add	r5,r17,r4
    da74:	2c63803a 	cmpltu	r17,r5,r17
    da78:	1c47883a 	add	r3,r3,r17
    da7c:	2823883a 	mov	r17,r5
    da80:	1880202c 	andhi	r2,r3,128
    da84:	10005926 	beq	r2,zero,dbec <__subdf3+0x214>
    da88:	84000044 	addi	r16,r16,1
    da8c:	0081ffc4 	movi	r2,2047
    da90:	8080be26 	beq	r16,r2,dd8c <__subdf3+0x3b4>
    da94:	017fe034 	movhi	r5,65408
    da98:	297fffc4 	addi	r5,r5,-1
    da9c:	1946703a 	and	r3,r3,r5
    daa0:	1804977a 	slli	r2,r3,29
    daa4:	1806927a 	slli	r3,r3,9
    daa8:	8822d0fa 	srli	r17,r17,3
    daac:	8401ffcc 	andi	r16,r16,2047
    dab0:	180ad33a 	srli	r5,r3,12
    dab4:	9100004c 	andi	r4,r18,1
    dab8:	1444b03a 	or	r2,r2,r17
    dabc:	80c1ffcc 	andi	r3,r16,2047
    dac0:	1820953a 	slli	r16,r3,20
    dac4:	20c03fcc 	andi	r3,r4,255
    dac8:	180897fa 	slli	r4,r3,31
    dacc:	00c00434 	movhi	r3,16
    dad0:	18ffffc4 	addi	r3,r3,-1
    dad4:	28c6703a 	and	r3,r5,r3
    dad8:	1c06b03a 	or	r3,r3,r16
    dadc:	1906b03a 	or	r3,r3,r4
    dae0:	dfc00417 	ldw	ra,16(sp)
    dae4:	dcc00317 	ldw	r19,12(sp)
    dae8:	dc800217 	ldw	r18,8(sp)
    daec:	dc400117 	ldw	r17,4(sp)
    daf0:	dc000017 	ldw	r16,0(sp)
    daf4:	dec00504 	addi	sp,sp,20
    daf8:	f800283a 	ret
    dafc:	0101ffc4 	movi	r4,2047
    db00:	813fd626 	beq	r16,r4,da5c <__alt_data_end+0xff00da5c>
    db04:	29402034 	orhi	r5,r5,128
    db08:	01000e04 	movi	r4,56
    db0c:	2080a316 	blt	r4,r2,dd9c <__subdf3+0x3c4>
    db10:	010007c4 	movi	r4,31
    db14:	2080c616 	blt	r4,r2,de30 <__subdf3+0x458>
    db18:	01000804 	movi	r4,32
    db1c:	2089c83a 	sub	r4,r4,r2
    db20:	2910983a 	sll	r8,r5,r4
    db24:	308ed83a 	srl	r7,r6,r2
    db28:	3108983a 	sll	r4,r6,r4
    db2c:	2884d83a 	srl	r2,r5,r2
    db30:	41ccb03a 	or	r6,r8,r7
    db34:	2008c03a 	cmpne	r4,r4,zero
    db38:	310cb03a 	or	r6,r6,r4
    db3c:	898dc83a 	sub	r6,r17,r6
    db40:	89a3803a 	cmpltu	r17,r17,r6
    db44:	1887c83a 	sub	r3,r3,r2
    db48:	1c47c83a 	sub	r3,r3,r17
    db4c:	3023883a 	mov	r17,r6
    db50:	1880202c 	andhi	r2,r3,128
    db54:	10002326 	beq	r2,zero,dbe4 <__subdf3+0x20c>
    db58:	04c02034 	movhi	r19,128
    db5c:	9cffffc4 	addi	r19,r19,-1
    db60:	1ce6703a 	and	r19,r3,r19
    db64:	98007a26 	beq	r19,zero,dd50 <__subdf3+0x378>
    db68:	9809883a 	mov	r4,r19
    db6c:	000e4d80 	call	e4d8 <__clzsi2>
    db70:	113ffe04 	addi	r4,r2,-8
    db74:	00c007c4 	movi	r3,31
    db78:	19007b16 	blt	r3,r4,dd68 <__subdf3+0x390>
    db7c:	00800804 	movi	r2,32
    db80:	1105c83a 	sub	r2,r2,r4
    db84:	8884d83a 	srl	r2,r17,r2
    db88:	9906983a 	sll	r3,r19,r4
    db8c:	8922983a 	sll	r17,r17,r4
    db90:	10c4b03a 	or	r2,r2,r3
    db94:	24007816 	blt	r4,r16,dd78 <__subdf3+0x3a0>
    db98:	2421c83a 	sub	r16,r4,r16
    db9c:	80c00044 	addi	r3,r16,1
    dba0:	010007c4 	movi	r4,31
    dba4:	20c09516 	blt	r4,r3,ddfc <__subdf3+0x424>
    dba8:	01400804 	movi	r5,32
    dbac:	28cbc83a 	sub	r5,r5,r3
    dbb0:	88c8d83a 	srl	r4,r17,r3
    dbb4:	8962983a 	sll	r17,r17,r5
    dbb8:	114a983a 	sll	r5,r2,r5
    dbbc:	10c6d83a 	srl	r3,r2,r3
    dbc0:	8804c03a 	cmpne	r2,r17,zero
    dbc4:	290ab03a 	or	r5,r5,r4
    dbc8:	28a2b03a 	or	r17,r5,r2
    dbcc:	0021883a 	mov	r16,zero
    dbd0:	003fa206 	br	da5c <__alt_data_end+0xff00da5c>
    dbd4:	2090b03a 	or	r8,r4,r2
    dbd8:	40018e26 	beq	r8,zero,e214 <__subdf3+0x83c>
    dbdc:	1007883a 	mov	r3,r2
    dbe0:	2023883a 	mov	r17,r4
    dbe4:	888001cc 	andi	r2,r17,7
    dbe8:	103f9e1e 	bne	r2,zero,da64 <__alt_data_end+0xff00da64>
    dbec:	1804977a 	slli	r2,r3,29
    dbf0:	8822d0fa 	srli	r17,r17,3
    dbf4:	1810d0fa 	srli	r8,r3,3
    dbf8:	9100004c 	andi	r4,r18,1
    dbfc:	1444b03a 	or	r2,r2,r17
    dc00:	00c1ffc4 	movi	r3,2047
    dc04:	80c02826 	beq	r16,r3,dca8 <__subdf3+0x2d0>
    dc08:	01400434 	movhi	r5,16
    dc0c:	297fffc4 	addi	r5,r5,-1
    dc10:	80e0703a 	and	r16,r16,r3
    dc14:	414a703a 	and	r5,r8,r5
    dc18:	003fa806 	br	dabc <__alt_data_end+0xff00dabc>
    dc1c:	0080630e 	bge	zero,r2,ddac <__subdf3+0x3d4>
    dc20:	48003026 	beq	r9,zero,dce4 <__subdf3+0x30c>
    dc24:	0101ffc4 	movi	r4,2047
    dc28:	813f8c26 	beq	r16,r4,da5c <__alt_data_end+0xff00da5c>
    dc2c:	29402034 	orhi	r5,r5,128
    dc30:	01000e04 	movi	r4,56
    dc34:	2080a90e 	bge	r4,r2,dedc <__subdf3+0x504>
    dc38:	298cb03a 	or	r6,r5,r6
    dc3c:	3012c03a 	cmpne	r9,r6,zero
    dc40:	0005883a 	mov	r2,zero
    dc44:	4c53883a 	add	r9,r9,r17
    dc48:	4c63803a 	cmpltu	r17,r9,r17
    dc4c:	10c7883a 	add	r3,r2,r3
    dc50:	88c7883a 	add	r3,r17,r3
    dc54:	4823883a 	mov	r17,r9
    dc58:	1880202c 	andhi	r2,r3,128
    dc5c:	1000d026 	beq	r2,zero,dfa0 <__subdf3+0x5c8>
    dc60:	84000044 	addi	r16,r16,1
    dc64:	0081ffc4 	movi	r2,2047
    dc68:	8080fe26 	beq	r16,r2,e064 <__subdf3+0x68c>
    dc6c:	00bfe034 	movhi	r2,65408
    dc70:	10bfffc4 	addi	r2,r2,-1
    dc74:	1886703a 	and	r3,r3,r2
    dc78:	880ad07a 	srli	r5,r17,1
    dc7c:	180497fa 	slli	r2,r3,31
    dc80:	8900004c 	andi	r4,r17,1
    dc84:	2922b03a 	or	r17,r5,r4
    dc88:	1806d07a 	srli	r3,r3,1
    dc8c:	1462b03a 	or	r17,r2,r17
    dc90:	3825883a 	mov	r18,r7
    dc94:	003f7106 	br	da5c <__alt_data_end+0xff00da5c>
    dc98:	2984b03a 	or	r2,r5,r6
    dc9c:	103f6826 	beq	r2,zero,da40 <__alt_data_end+0xff00da40>
    dca0:	39c03fcc 	andi	r7,r7,255
    dca4:	003f6706 	br	da44 <__alt_data_end+0xff00da44>
    dca8:	4086b03a 	or	r3,r8,r2
    dcac:	18015226 	beq	r3,zero,e1f8 <__subdf3+0x820>
    dcb0:	00c00434 	movhi	r3,16
    dcb4:	41400234 	orhi	r5,r8,8
    dcb8:	18ffffc4 	addi	r3,r3,-1
    dcbc:	28ca703a 	and	r5,r5,r3
    dcc0:	003f7e06 	br	dabc <__alt_data_end+0xff00dabc>
    dcc4:	10bfffc4 	addi	r2,r2,-1
    dcc8:	1000491e 	bne	r2,zero,ddf0 <__subdf3+0x418>
    dccc:	898fc83a 	sub	r7,r17,r6
    dcd0:	89e3803a 	cmpltu	r17,r17,r7
    dcd4:	1947c83a 	sub	r3,r3,r5
    dcd8:	1c47c83a 	sub	r3,r3,r17
    dcdc:	3823883a 	mov	r17,r7
    dce0:	003f9b06 	br	db50 <__alt_data_end+0xff00db50>
    dce4:	2988b03a 	or	r4,r5,r6
    dce8:	203f5c26 	beq	r4,zero,da5c <__alt_data_end+0xff00da5c>
    dcec:	10bfffc4 	addi	r2,r2,-1
    dcf0:	1000931e 	bne	r2,zero,df40 <__subdf3+0x568>
    dcf4:	898d883a 	add	r6,r17,r6
    dcf8:	3463803a 	cmpltu	r17,r6,r17
    dcfc:	1947883a 	add	r3,r3,r5
    dd00:	88c7883a 	add	r3,r17,r3
    dd04:	3023883a 	mov	r17,r6
    dd08:	003fd306 	br	dc58 <__alt_data_end+0xff00dc58>
    dd0c:	1000541e 	bne	r2,zero,de60 <__subdf3+0x488>
    dd10:	80800044 	addi	r2,r16,1
    dd14:	1081ffcc 	andi	r2,r2,2047
    dd18:	01000044 	movi	r4,1
    dd1c:	2080a20e 	bge	r4,r2,dfa8 <__subdf3+0x5d0>
    dd20:	8989c83a 	sub	r4,r17,r6
    dd24:	8905803a 	cmpltu	r2,r17,r4
    dd28:	1967c83a 	sub	r19,r3,r5
    dd2c:	98a7c83a 	sub	r19,r19,r2
    dd30:	9880202c 	andhi	r2,r19,128
    dd34:	10006326 	beq	r2,zero,dec4 <__subdf3+0x4ec>
    dd38:	3463c83a 	sub	r17,r6,r17
    dd3c:	28c7c83a 	sub	r3,r5,r3
    dd40:	344d803a 	cmpltu	r6,r6,r17
    dd44:	19a7c83a 	sub	r19,r3,r6
    dd48:	3825883a 	mov	r18,r7
    dd4c:	983f861e 	bne	r19,zero,db68 <__alt_data_end+0xff00db68>
    dd50:	8809883a 	mov	r4,r17
    dd54:	000e4d80 	call	e4d8 <__clzsi2>
    dd58:	10800804 	addi	r2,r2,32
    dd5c:	113ffe04 	addi	r4,r2,-8
    dd60:	00c007c4 	movi	r3,31
    dd64:	193f850e 	bge	r3,r4,db7c <__alt_data_end+0xff00db7c>
    dd68:	10bff604 	addi	r2,r2,-40
    dd6c:	8884983a 	sll	r2,r17,r2
    dd70:	0023883a 	mov	r17,zero
    dd74:	243f880e 	bge	r4,r16,db98 <__alt_data_end+0xff00db98>
    dd78:	00ffe034 	movhi	r3,65408
    dd7c:	18ffffc4 	addi	r3,r3,-1
    dd80:	8121c83a 	sub	r16,r16,r4
    dd84:	10c6703a 	and	r3,r2,r3
    dd88:	003f3406 	br	da5c <__alt_data_end+0xff00da5c>
    dd8c:	9100004c 	andi	r4,r18,1
    dd90:	000b883a 	mov	r5,zero
    dd94:	0005883a 	mov	r2,zero
    dd98:	003f4806 	br	dabc <__alt_data_end+0xff00dabc>
    dd9c:	298cb03a 	or	r6,r5,r6
    dda0:	300cc03a 	cmpne	r6,r6,zero
    dda4:	0005883a 	mov	r2,zero
    dda8:	003f6406 	br	db3c <__alt_data_end+0xff00db3c>
    ddac:	10009a1e 	bne	r2,zero,e018 <__subdf3+0x640>
    ddb0:	82400044 	addi	r9,r16,1
    ddb4:	4881ffcc 	andi	r2,r9,2047
    ddb8:	02800044 	movi	r10,1
    ddbc:	5080670e 	bge	r10,r2,df5c <__subdf3+0x584>
    ddc0:	0081ffc4 	movi	r2,2047
    ddc4:	4880af26 	beq	r9,r2,e084 <__subdf3+0x6ac>
    ddc8:	898d883a 	add	r6,r17,r6
    ddcc:	1945883a 	add	r2,r3,r5
    ddd0:	3447803a 	cmpltu	r3,r6,r17
    ddd4:	1887883a 	add	r3,r3,r2
    ddd8:	182297fa 	slli	r17,r3,31
    dddc:	300cd07a 	srli	r6,r6,1
    dde0:	1806d07a 	srli	r3,r3,1
    dde4:	4821883a 	mov	r16,r9
    dde8:	89a2b03a 	or	r17,r17,r6
    ddec:	003f1b06 	br	da5c <__alt_data_end+0xff00da5c>
    ddf0:	0101ffc4 	movi	r4,2047
    ddf4:	813f441e 	bne	r16,r4,db08 <__alt_data_end+0xff00db08>
    ddf8:	003f1806 	br	da5c <__alt_data_end+0xff00da5c>
    ddfc:	843ff844 	addi	r16,r16,-31
    de00:	01400804 	movi	r5,32
    de04:	1408d83a 	srl	r4,r2,r16
    de08:	19405026 	beq	r3,r5,df4c <__subdf3+0x574>
    de0c:	01401004 	movi	r5,64
    de10:	28c7c83a 	sub	r3,r5,r3
    de14:	10c4983a 	sll	r2,r2,r3
    de18:	88a2b03a 	or	r17,r17,r2
    de1c:	8822c03a 	cmpne	r17,r17,zero
    de20:	2462b03a 	or	r17,r4,r17
    de24:	0007883a 	mov	r3,zero
    de28:	0021883a 	mov	r16,zero
    de2c:	003f6d06 	br	dbe4 <__alt_data_end+0xff00dbe4>
    de30:	11fff804 	addi	r7,r2,-32
    de34:	01000804 	movi	r4,32
    de38:	29ced83a 	srl	r7,r5,r7
    de3c:	11004526 	beq	r2,r4,df54 <__subdf3+0x57c>
    de40:	01001004 	movi	r4,64
    de44:	2089c83a 	sub	r4,r4,r2
    de48:	2904983a 	sll	r2,r5,r4
    de4c:	118cb03a 	or	r6,r2,r6
    de50:	300cc03a 	cmpne	r6,r6,zero
    de54:	398cb03a 	or	r6,r7,r6
    de58:	0005883a 	mov	r2,zero
    de5c:	003f3706 	br	db3c <__alt_data_end+0xff00db3c>
    de60:	80002a26 	beq	r16,zero,df0c <__subdf3+0x534>
    de64:	0101ffc4 	movi	r4,2047
    de68:	49006626 	beq	r9,r4,e004 <__subdf3+0x62c>
    de6c:	0085c83a 	sub	r2,zero,r2
    de70:	18c02034 	orhi	r3,r3,128
    de74:	01000e04 	movi	r4,56
    de78:	20807e16 	blt	r4,r2,e074 <__subdf3+0x69c>
    de7c:	010007c4 	movi	r4,31
    de80:	2080e716 	blt	r4,r2,e220 <__subdf3+0x848>
    de84:	01000804 	movi	r4,32
    de88:	2089c83a 	sub	r4,r4,r2
    de8c:	1914983a 	sll	r10,r3,r4
    de90:	8890d83a 	srl	r8,r17,r2
    de94:	8908983a 	sll	r4,r17,r4
    de98:	1884d83a 	srl	r2,r3,r2
    de9c:	5222b03a 	or	r17,r10,r8
    dea0:	2006c03a 	cmpne	r3,r4,zero
    dea4:	88e2b03a 	or	r17,r17,r3
    dea8:	3463c83a 	sub	r17,r6,r17
    deac:	2885c83a 	sub	r2,r5,r2
    deb0:	344d803a 	cmpltu	r6,r6,r17
    deb4:	1187c83a 	sub	r3,r2,r6
    deb8:	4821883a 	mov	r16,r9
    debc:	3825883a 	mov	r18,r7
    dec0:	003f2306 	br	db50 <__alt_data_end+0xff00db50>
    dec4:	24d0b03a 	or	r8,r4,r19
    dec8:	40001b1e 	bne	r8,zero,df38 <__subdf3+0x560>
    decc:	0005883a 	mov	r2,zero
    ded0:	0009883a 	mov	r4,zero
    ded4:	0021883a 	mov	r16,zero
    ded8:	003f4906 	br	dc00 <__alt_data_end+0xff00dc00>
    dedc:	010007c4 	movi	r4,31
    dee0:	20803a16 	blt	r4,r2,dfcc <__subdf3+0x5f4>
    dee4:	01000804 	movi	r4,32
    dee8:	2089c83a 	sub	r4,r4,r2
    deec:	2912983a 	sll	r9,r5,r4
    def0:	3090d83a 	srl	r8,r6,r2
    def4:	3108983a 	sll	r4,r6,r4
    def8:	2884d83a 	srl	r2,r5,r2
    defc:	4a12b03a 	or	r9,r9,r8
    df00:	2008c03a 	cmpne	r4,r4,zero
    df04:	4912b03a 	or	r9,r9,r4
    df08:	003f4e06 	br	dc44 <__alt_data_end+0xff00dc44>
    df0c:	1c48b03a 	or	r4,r3,r17
    df10:	20003c26 	beq	r4,zero,e004 <__subdf3+0x62c>
    df14:	0084303a 	nor	r2,zero,r2
    df18:	1000381e 	bne	r2,zero,dffc <__subdf3+0x624>
    df1c:	3463c83a 	sub	r17,r6,r17
    df20:	28c5c83a 	sub	r2,r5,r3
    df24:	344d803a 	cmpltu	r6,r6,r17
    df28:	1187c83a 	sub	r3,r2,r6
    df2c:	4821883a 	mov	r16,r9
    df30:	3825883a 	mov	r18,r7
    df34:	003f0606 	br	db50 <__alt_data_end+0xff00db50>
    df38:	2023883a 	mov	r17,r4
    df3c:	003f0906 	br	db64 <__alt_data_end+0xff00db64>
    df40:	0101ffc4 	movi	r4,2047
    df44:	813f3a1e 	bne	r16,r4,dc30 <__alt_data_end+0xff00dc30>
    df48:	003ec406 	br	da5c <__alt_data_end+0xff00da5c>
    df4c:	0005883a 	mov	r2,zero
    df50:	003fb106 	br	de18 <__alt_data_end+0xff00de18>
    df54:	0005883a 	mov	r2,zero
    df58:	003fbc06 	br	de4c <__alt_data_end+0xff00de4c>
    df5c:	1c44b03a 	or	r2,r3,r17
    df60:	80008e1e 	bne	r16,zero,e19c <__subdf3+0x7c4>
    df64:	1000c826 	beq	r2,zero,e288 <__subdf3+0x8b0>
    df68:	2984b03a 	or	r2,r5,r6
    df6c:	103ebb26 	beq	r2,zero,da5c <__alt_data_end+0xff00da5c>
    df70:	8989883a 	add	r4,r17,r6
    df74:	1945883a 	add	r2,r3,r5
    df78:	2447803a 	cmpltu	r3,r4,r17
    df7c:	1887883a 	add	r3,r3,r2
    df80:	1880202c 	andhi	r2,r3,128
    df84:	2023883a 	mov	r17,r4
    df88:	103f1626 	beq	r2,zero,dbe4 <__alt_data_end+0xff00dbe4>
    df8c:	00bfe034 	movhi	r2,65408
    df90:	10bfffc4 	addi	r2,r2,-1
    df94:	5021883a 	mov	r16,r10
    df98:	1886703a 	and	r3,r3,r2
    df9c:	003eaf06 	br	da5c <__alt_data_end+0xff00da5c>
    dfa0:	3825883a 	mov	r18,r7
    dfa4:	003f0f06 	br	dbe4 <__alt_data_end+0xff00dbe4>
    dfa8:	1c44b03a 	or	r2,r3,r17
    dfac:	8000251e 	bne	r16,zero,e044 <__subdf3+0x66c>
    dfb0:	1000661e 	bne	r2,zero,e14c <__subdf3+0x774>
    dfb4:	2990b03a 	or	r8,r5,r6
    dfb8:	40009626 	beq	r8,zero,e214 <__subdf3+0x83c>
    dfbc:	2807883a 	mov	r3,r5
    dfc0:	3023883a 	mov	r17,r6
    dfc4:	3825883a 	mov	r18,r7
    dfc8:	003ea406 	br	da5c <__alt_data_end+0xff00da5c>
    dfcc:	127ff804 	addi	r9,r2,-32
    dfd0:	01000804 	movi	r4,32
    dfd4:	2a52d83a 	srl	r9,r5,r9
    dfd8:	11008c26 	beq	r2,r4,e20c <__subdf3+0x834>
    dfdc:	01001004 	movi	r4,64
    dfe0:	2085c83a 	sub	r2,r4,r2
    dfe4:	2884983a 	sll	r2,r5,r2
    dfe8:	118cb03a 	or	r6,r2,r6
    dfec:	300cc03a 	cmpne	r6,r6,zero
    dff0:	4992b03a 	or	r9,r9,r6
    dff4:	0005883a 	mov	r2,zero
    dff8:	003f1206 	br	dc44 <__alt_data_end+0xff00dc44>
    dffc:	0101ffc4 	movi	r4,2047
    e000:	493f9c1e 	bne	r9,r4,de74 <__alt_data_end+0xff00de74>
    e004:	2807883a 	mov	r3,r5
    e008:	3023883a 	mov	r17,r6
    e00c:	4821883a 	mov	r16,r9
    e010:	3825883a 	mov	r18,r7
    e014:	003e9106 	br	da5c <__alt_data_end+0xff00da5c>
    e018:	80001f1e 	bne	r16,zero,e098 <__subdf3+0x6c0>
    e01c:	1c48b03a 	or	r4,r3,r17
    e020:	20005a26 	beq	r4,zero,e18c <__subdf3+0x7b4>
    e024:	0084303a 	nor	r2,zero,r2
    e028:	1000561e 	bne	r2,zero,e184 <__subdf3+0x7ac>
    e02c:	89a3883a 	add	r17,r17,r6
    e030:	1945883a 	add	r2,r3,r5
    e034:	898d803a 	cmpltu	r6,r17,r6
    e038:	3087883a 	add	r3,r6,r2
    e03c:	4821883a 	mov	r16,r9
    e040:	003f0506 	br	dc58 <__alt_data_end+0xff00dc58>
    e044:	10002b1e 	bne	r2,zero,e0f4 <__subdf3+0x71c>
    e048:	2984b03a 	or	r2,r5,r6
    e04c:	10008026 	beq	r2,zero,e250 <__subdf3+0x878>
    e050:	2807883a 	mov	r3,r5
    e054:	3023883a 	mov	r17,r6
    e058:	3825883a 	mov	r18,r7
    e05c:	0401ffc4 	movi	r16,2047
    e060:	003e7e06 	br	da5c <__alt_data_end+0xff00da5c>
    e064:	3809883a 	mov	r4,r7
    e068:	0011883a 	mov	r8,zero
    e06c:	0005883a 	mov	r2,zero
    e070:	003ee306 	br	dc00 <__alt_data_end+0xff00dc00>
    e074:	1c62b03a 	or	r17,r3,r17
    e078:	8822c03a 	cmpne	r17,r17,zero
    e07c:	0005883a 	mov	r2,zero
    e080:	003f8906 	br	dea8 <__alt_data_end+0xff00dea8>
    e084:	3809883a 	mov	r4,r7
    e088:	4821883a 	mov	r16,r9
    e08c:	0011883a 	mov	r8,zero
    e090:	0005883a 	mov	r2,zero
    e094:	003eda06 	br	dc00 <__alt_data_end+0xff00dc00>
    e098:	0101ffc4 	movi	r4,2047
    e09c:	49003b26 	beq	r9,r4,e18c <__subdf3+0x7b4>
    e0a0:	0085c83a 	sub	r2,zero,r2
    e0a4:	18c02034 	orhi	r3,r3,128
    e0a8:	01000e04 	movi	r4,56
    e0ac:	20806e16 	blt	r4,r2,e268 <__subdf3+0x890>
    e0b0:	010007c4 	movi	r4,31
    e0b4:	20807716 	blt	r4,r2,e294 <__subdf3+0x8bc>
    e0b8:	01000804 	movi	r4,32
    e0bc:	2089c83a 	sub	r4,r4,r2
    e0c0:	1914983a 	sll	r10,r3,r4
    e0c4:	8890d83a 	srl	r8,r17,r2
    e0c8:	8908983a 	sll	r4,r17,r4
    e0cc:	1884d83a 	srl	r2,r3,r2
    e0d0:	5222b03a 	or	r17,r10,r8
    e0d4:	2006c03a 	cmpne	r3,r4,zero
    e0d8:	88e2b03a 	or	r17,r17,r3
    e0dc:	89a3883a 	add	r17,r17,r6
    e0e0:	1145883a 	add	r2,r2,r5
    e0e4:	898d803a 	cmpltu	r6,r17,r6
    e0e8:	3087883a 	add	r3,r6,r2
    e0ec:	4821883a 	mov	r16,r9
    e0f0:	003ed906 	br	dc58 <__alt_data_end+0xff00dc58>
    e0f4:	2984b03a 	or	r2,r5,r6
    e0f8:	10004226 	beq	r2,zero,e204 <__subdf3+0x82c>
    e0fc:	1808d0fa 	srli	r4,r3,3
    e100:	8822d0fa 	srli	r17,r17,3
    e104:	1806977a 	slli	r3,r3,29
    e108:	2080022c 	andhi	r2,r4,8
    e10c:	1c62b03a 	or	r17,r3,r17
    e110:	10000826 	beq	r2,zero,e134 <__subdf3+0x75c>
    e114:	2812d0fa 	srli	r9,r5,3
    e118:	4880022c 	andhi	r2,r9,8
    e11c:	1000051e 	bne	r2,zero,e134 <__subdf3+0x75c>
    e120:	300cd0fa 	srli	r6,r6,3
    e124:	2804977a 	slli	r2,r5,29
    e128:	4809883a 	mov	r4,r9
    e12c:	3825883a 	mov	r18,r7
    e130:	11a2b03a 	or	r17,r2,r6
    e134:	8806d77a 	srli	r3,r17,29
    e138:	200890fa 	slli	r4,r4,3
    e13c:	882290fa 	slli	r17,r17,3
    e140:	0401ffc4 	movi	r16,2047
    e144:	1906b03a 	or	r3,r3,r4
    e148:	003e4406 	br	da5c <__alt_data_end+0xff00da5c>
    e14c:	2984b03a 	or	r2,r5,r6
    e150:	103e4226 	beq	r2,zero,da5c <__alt_data_end+0xff00da5c>
    e154:	8989c83a 	sub	r4,r17,r6
    e158:	8911803a 	cmpltu	r8,r17,r4
    e15c:	1945c83a 	sub	r2,r3,r5
    e160:	1205c83a 	sub	r2,r2,r8
    e164:	1200202c 	andhi	r8,r2,128
    e168:	403e9a26 	beq	r8,zero,dbd4 <__alt_data_end+0xff00dbd4>
    e16c:	3463c83a 	sub	r17,r6,r17
    e170:	28c5c83a 	sub	r2,r5,r3
    e174:	344d803a 	cmpltu	r6,r6,r17
    e178:	1187c83a 	sub	r3,r2,r6
    e17c:	3825883a 	mov	r18,r7
    e180:	003e3606 	br	da5c <__alt_data_end+0xff00da5c>
    e184:	0101ffc4 	movi	r4,2047
    e188:	493fc71e 	bne	r9,r4,e0a8 <__alt_data_end+0xff00e0a8>
    e18c:	2807883a 	mov	r3,r5
    e190:	3023883a 	mov	r17,r6
    e194:	4821883a 	mov	r16,r9
    e198:	003e3006 	br	da5c <__alt_data_end+0xff00da5c>
    e19c:	10003626 	beq	r2,zero,e278 <__subdf3+0x8a0>
    e1a0:	2984b03a 	or	r2,r5,r6
    e1a4:	10001726 	beq	r2,zero,e204 <__subdf3+0x82c>
    e1a8:	1808d0fa 	srli	r4,r3,3
    e1ac:	8822d0fa 	srli	r17,r17,3
    e1b0:	1806977a 	slli	r3,r3,29
    e1b4:	2080022c 	andhi	r2,r4,8
    e1b8:	1c62b03a 	or	r17,r3,r17
    e1bc:	10000726 	beq	r2,zero,e1dc <__subdf3+0x804>
    e1c0:	2812d0fa 	srli	r9,r5,3
    e1c4:	4880022c 	andhi	r2,r9,8
    e1c8:	1000041e 	bne	r2,zero,e1dc <__subdf3+0x804>
    e1cc:	300cd0fa 	srli	r6,r6,3
    e1d0:	2804977a 	slli	r2,r5,29
    e1d4:	4809883a 	mov	r4,r9
    e1d8:	11a2b03a 	or	r17,r2,r6
    e1dc:	8806d77a 	srli	r3,r17,29
    e1e0:	200890fa 	slli	r4,r4,3
    e1e4:	882290fa 	slli	r17,r17,3
    e1e8:	3825883a 	mov	r18,r7
    e1ec:	1906b03a 	or	r3,r3,r4
    e1f0:	0401ffc4 	movi	r16,2047
    e1f4:	003e1906 	br	da5c <__alt_data_end+0xff00da5c>
    e1f8:	000b883a 	mov	r5,zero
    e1fc:	0005883a 	mov	r2,zero
    e200:	003e2e06 	br	dabc <__alt_data_end+0xff00dabc>
    e204:	0401ffc4 	movi	r16,2047
    e208:	003e1406 	br	da5c <__alt_data_end+0xff00da5c>
    e20c:	0005883a 	mov	r2,zero
    e210:	003f7506 	br	dfe8 <__alt_data_end+0xff00dfe8>
    e214:	0005883a 	mov	r2,zero
    e218:	0009883a 	mov	r4,zero
    e21c:	003e7806 	br	dc00 <__alt_data_end+0xff00dc00>
    e220:	123ff804 	addi	r8,r2,-32
    e224:	01000804 	movi	r4,32
    e228:	1a10d83a 	srl	r8,r3,r8
    e22c:	11002526 	beq	r2,r4,e2c4 <__subdf3+0x8ec>
    e230:	01001004 	movi	r4,64
    e234:	2085c83a 	sub	r2,r4,r2
    e238:	1884983a 	sll	r2,r3,r2
    e23c:	1444b03a 	or	r2,r2,r17
    e240:	1004c03a 	cmpne	r2,r2,zero
    e244:	40a2b03a 	or	r17,r8,r2
    e248:	0005883a 	mov	r2,zero
    e24c:	003f1606 	br	dea8 <__alt_data_end+0xff00dea8>
    e250:	02000434 	movhi	r8,16
    e254:	0009883a 	mov	r4,zero
    e258:	423fffc4 	addi	r8,r8,-1
    e25c:	00bfffc4 	movi	r2,-1
    e260:	0401ffc4 	movi	r16,2047
    e264:	003e6606 	br	dc00 <__alt_data_end+0xff00dc00>
    e268:	1c62b03a 	or	r17,r3,r17
    e26c:	8822c03a 	cmpne	r17,r17,zero
    e270:	0005883a 	mov	r2,zero
    e274:	003f9906 	br	e0dc <__alt_data_end+0xff00e0dc>
    e278:	2807883a 	mov	r3,r5
    e27c:	3023883a 	mov	r17,r6
    e280:	0401ffc4 	movi	r16,2047
    e284:	003df506 	br	da5c <__alt_data_end+0xff00da5c>
    e288:	2807883a 	mov	r3,r5
    e28c:	3023883a 	mov	r17,r6
    e290:	003df206 	br	da5c <__alt_data_end+0xff00da5c>
    e294:	123ff804 	addi	r8,r2,-32
    e298:	01000804 	movi	r4,32
    e29c:	1a10d83a 	srl	r8,r3,r8
    e2a0:	11000a26 	beq	r2,r4,e2cc <__subdf3+0x8f4>
    e2a4:	01001004 	movi	r4,64
    e2a8:	2085c83a 	sub	r2,r4,r2
    e2ac:	1884983a 	sll	r2,r3,r2
    e2b0:	1444b03a 	or	r2,r2,r17
    e2b4:	1004c03a 	cmpne	r2,r2,zero
    e2b8:	40a2b03a 	or	r17,r8,r2
    e2bc:	0005883a 	mov	r2,zero
    e2c0:	003f8606 	br	e0dc <__alt_data_end+0xff00e0dc>
    e2c4:	0005883a 	mov	r2,zero
    e2c8:	003fdc06 	br	e23c <__alt_data_end+0xff00e23c>
    e2cc:	0005883a 	mov	r2,zero
    e2d0:	003ff706 	br	e2b0 <__alt_data_end+0xff00e2b0>

0000e2d4 <__fixdfsi>:
    e2d4:	280cd53a 	srli	r6,r5,20
    e2d8:	00c00434 	movhi	r3,16
    e2dc:	18ffffc4 	addi	r3,r3,-1
    e2e0:	3181ffcc 	andi	r6,r6,2047
    e2e4:	01c0ff84 	movi	r7,1022
    e2e8:	28c6703a 	and	r3,r5,r3
    e2ec:	280ad7fa 	srli	r5,r5,31
    e2f0:	3980120e 	bge	r7,r6,e33c <__fixdfsi+0x68>
    e2f4:	00810744 	movi	r2,1053
    e2f8:	11800c16 	blt	r2,r6,e32c <__fixdfsi+0x58>
    e2fc:	00810cc4 	movi	r2,1075
    e300:	1185c83a 	sub	r2,r2,r6
    e304:	01c007c4 	movi	r7,31
    e308:	18c00434 	orhi	r3,r3,16
    e30c:	38800d16 	blt	r7,r2,e344 <__fixdfsi+0x70>
    e310:	31befb44 	addi	r6,r6,-1043
    e314:	2084d83a 	srl	r2,r4,r2
    e318:	1986983a 	sll	r3,r3,r6
    e31c:	1884b03a 	or	r2,r3,r2
    e320:	28000726 	beq	r5,zero,e340 <__fixdfsi+0x6c>
    e324:	0085c83a 	sub	r2,zero,r2
    e328:	f800283a 	ret
    e32c:	00a00034 	movhi	r2,32768
    e330:	10bfffc4 	addi	r2,r2,-1
    e334:	2885883a 	add	r2,r5,r2
    e338:	f800283a 	ret
    e33c:	0005883a 	mov	r2,zero
    e340:	f800283a 	ret
    e344:	008104c4 	movi	r2,1043
    e348:	1185c83a 	sub	r2,r2,r6
    e34c:	1884d83a 	srl	r2,r3,r2
    e350:	003ff306 	br	e320 <__alt_data_end+0xff00e320>

0000e354 <__floatsidf>:
    e354:	defffd04 	addi	sp,sp,-12
    e358:	dfc00215 	stw	ra,8(sp)
    e35c:	dc400115 	stw	r17,4(sp)
    e360:	dc000015 	stw	r16,0(sp)
    e364:	20002b26 	beq	r4,zero,e414 <__floatsidf+0xc0>
    e368:	2023883a 	mov	r17,r4
    e36c:	2020d7fa 	srli	r16,r4,31
    e370:	20002d16 	blt	r4,zero,e428 <__floatsidf+0xd4>
    e374:	8809883a 	mov	r4,r17
    e378:	000e4d80 	call	e4d8 <__clzsi2>
    e37c:	01410784 	movi	r5,1054
    e380:	288bc83a 	sub	r5,r5,r2
    e384:	01010cc4 	movi	r4,1075
    e388:	2149c83a 	sub	r4,r4,r5
    e38c:	00c007c4 	movi	r3,31
    e390:	1900160e 	bge	r3,r4,e3ec <__floatsidf+0x98>
    e394:	00c104c4 	movi	r3,1043
    e398:	1947c83a 	sub	r3,r3,r5
    e39c:	88c6983a 	sll	r3,r17,r3
    e3a0:	00800434 	movhi	r2,16
    e3a4:	10bfffc4 	addi	r2,r2,-1
    e3a8:	1886703a 	and	r3,r3,r2
    e3ac:	2941ffcc 	andi	r5,r5,2047
    e3b0:	800d883a 	mov	r6,r16
    e3b4:	0005883a 	mov	r2,zero
    e3b8:	280a953a 	slli	r5,r5,20
    e3bc:	31803fcc 	andi	r6,r6,255
    e3c0:	01000434 	movhi	r4,16
    e3c4:	300c97fa 	slli	r6,r6,31
    e3c8:	213fffc4 	addi	r4,r4,-1
    e3cc:	1906703a 	and	r3,r3,r4
    e3d0:	1946b03a 	or	r3,r3,r5
    e3d4:	1986b03a 	or	r3,r3,r6
    e3d8:	dfc00217 	ldw	ra,8(sp)
    e3dc:	dc400117 	ldw	r17,4(sp)
    e3e0:	dc000017 	ldw	r16,0(sp)
    e3e4:	dec00304 	addi	sp,sp,12
    e3e8:	f800283a 	ret
    e3ec:	00c002c4 	movi	r3,11
    e3f0:	1887c83a 	sub	r3,r3,r2
    e3f4:	88c6d83a 	srl	r3,r17,r3
    e3f8:	8904983a 	sll	r2,r17,r4
    e3fc:	01000434 	movhi	r4,16
    e400:	213fffc4 	addi	r4,r4,-1
    e404:	2941ffcc 	andi	r5,r5,2047
    e408:	1906703a 	and	r3,r3,r4
    e40c:	800d883a 	mov	r6,r16
    e410:	003fe906 	br	e3b8 <__alt_data_end+0xff00e3b8>
    e414:	000d883a 	mov	r6,zero
    e418:	000b883a 	mov	r5,zero
    e41c:	0007883a 	mov	r3,zero
    e420:	0005883a 	mov	r2,zero
    e424:	003fe406 	br	e3b8 <__alt_data_end+0xff00e3b8>
    e428:	0123c83a 	sub	r17,zero,r4
    e42c:	003fd106 	br	e374 <__alt_data_end+0xff00e374>

0000e430 <__floatunsidf>:
    e430:	defffe04 	addi	sp,sp,-8
    e434:	dc000015 	stw	r16,0(sp)
    e438:	dfc00115 	stw	ra,4(sp)
    e43c:	2021883a 	mov	r16,r4
    e440:	20002226 	beq	r4,zero,e4cc <__floatunsidf+0x9c>
    e444:	000e4d80 	call	e4d8 <__clzsi2>
    e448:	01010784 	movi	r4,1054
    e44c:	2089c83a 	sub	r4,r4,r2
    e450:	01810cc4 	movi	r6,1075
    e454:	310dc83a 	sub	r6,r6,r4
    e458:	00c007c4 	movi	r3,31
    e45c:	1980120e 	bge	r3,r6,e4a8 <__floatunsidf+0x78>
    e460:	00c104c4 	movi	r3,1043
    e464:	1907c83a 	sub	r3,r3,r4
    e468:	80ca983a 	sll	r5,r16,r3
    e46c:	00800434 	movhi	r2,16
    e470:	10bfffc4 	addi	r2,r2,-1
    e474:	2101ffcc 	andi	r4,r4,2047
    e478:	0021883a 	mov	r16,zero
    e47c:	288a703a 	and	r5,r5,r2
    e480:	2008953a 	slli	r4,r4,20
    e484:	00c00434 	movhi	r3,16
    e488:	18ffffc4 	addi	r3,r3,-1
    e48c:	28c6703a 	and	r3,r5,r3
    e490:	8005883a 	mov	r2,r16
    e494:	1906b03a 	or	r3,r3,r4
    e498:	dfc00117 	ldw	ra,4(sp)
    e49c:	dc000017 	ldw	r16,0(sp)
    e4a0:	dec00204 	addi	sp,sp,8
    e4a4:	f800283a 	ret
    e4a8:	00c002c4 	movi	r3,11
    e4ac:	188bc83a 	sub	r5,r3,r2
    e4b0:	814ad83a 	srl	r5,r16,r5
    e4b4:	00c00434 	movhi	r3,16
    e4b8:	18ffffc4 	addi	r3,r3,-1
    e4bc:	81a0983a 	sll	r16,r16,r6
    e4c0:	2101ffcc 	andi	r4,r4,2047
    e4c4:	28ca703a 	and	r5,r5,r3
    e4c8:	003fed06 	br	e480 <__alt_data_end+0xff00e480>
    e4cc:	0009883a 	mov	r4,zero
    e4d0:	000b883a 	mov	r5,zero
    e4d4:	003fea06 	br	e480 <__alt_data_end+0xff00e480>

0000e4d8 <__clzsi2>:
    e4d8:	00bfffd4 	movui	r2,65535
    e4dc:	11000536 	bltu	r2,r4,e4f4 <__clzsi2+0x1c>
    e4e0:	00803fc4 	movi	r2,255
    e4e4:	11000f36 	bltu	r2,r4,e524 <__clzsi2+0x4c>
    e4e8:	00800804 	movi	r2,32
    e4ec:	0007883a 	mov	r3,zero
    e4f0:	00000506 	br	e508 <__clzsi2+0x30>
    e4f4:	00804034 	movhi	r2,256
    e4f8:	10bfffc4 	addi	r2,r2,-1
    e4fc:	11000c2e 	bgeu	r2,r4,e530 <__clzsi2+0x58>
    e500:	00800204 	movi	r2,8
    e504:	00c00604 	movi	r3,24
    e508:	20c8d83a 	srl	r4,r4,r3
    e50c:	00c00074 	movhi	r3,1
    e510:	18c57c04 	addi	r3,r3,5616
    e514:	1909883a 	add	r4,r3,r4
    e518:	20c00003 	ldbu	r3,0(r4)
    e51c:	10c5c83a 	sub	r2,r2,r3
    e520:	f800283a 	ret
    e524:	00800604 	movi	r2,24
    e528:	00c00204 	movi	r3,8
    e52c:	003ff606 	br	e508 <__alt_data_end+0xff00e508>
    e530:	00800404 	movi	r2,16
    e534:	1007883a 	mov	r3,r2
    e538:	003ff306 	br	e508 <__alt_data_end+0xff00e508>

0000e53c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e53c:	defffe04 	addi	sp,sp,-8
    e540:	dfc00115 	stw	ra,4(sp)
    e544:	df000015 	stw	fp,0(sp)
    e548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e54c:	d0a00b17 	ldw	r2,-32724(gp)
    e550:	10000326 	beq	r2,zero,e560 <alt_get_errno+0x24>
    e554:	d0a00b17 	ldw	r2,-32724(gp)
    e558:	103ee83a 	callr	r2
    e55c:	00000106 	br	e564 <alt_get_errno+0x28>
    e560:	d0a6d804 	addi	r2,gp,-25760
}
    e564:	e037883a 	mov	sp,fp
    e568:	dfc00117 	ldw	ra,4(sp)
    e56c:	df000017 	ldw	fp,0(sp)
    e570:	dec00204 	addi	sp,sp,8
    e574:	f800283a 	ret

0000e578 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e578:	defffb04 	addi	sp,sp,-20
    e57c:	dfc00415 	stw	ra,16(sp)
    e580:	df000315 	stw	fp,12(sp)
    e584:	df000304 	addi	fp,sp,12
    e588:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e58c:	e0bfff17 	ldw	r2,-4(fp)
    e590:	10000616 	blt	r2,zero,e5ac <close+0x34>
    e594:	e0bfff17 	ldw	r2,-4(fp)
    e598:	10c00324 	muli	r3,r2,12
    e59c:	00800074 	movhi	r2,1
    e5a0:	1087fa04 	addi	r2,r2,8168
    e5a4:	1885883a 	add	r2,r3,r2
    e5a8:	00000106 	br	e5b0 <close+0x38>
    e5ac:	0005883a 	mov	r2,zero
    e5b0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e5b4:	e0bffd17 	ldw	r2,-12(fp)
    e5b8:	10001926 	beq	r2,zero,e620 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e5bc:	e0bffd17 	ldw	r2,-12(fp)
    e5c0:	10800017 	ldw	r2,0(r2)
    e5c4:	10800417 	ldw	r2,16(r2)
    e5c8:	10000626 	beq	r2,zero,e5e4 <close+0x6c>
    e5cc:	e0bffd17 	ldw	r2,-12(fp)
    e5d0:	10800017 	ldw	r2,0(r2)
    e5d4:	10800417 	ldw	r2,16(r2)
    e5d8:	e13ffd17 	ldw	r4,-12(fp)
    e5dc:	103ee83a 	callr	r2
    e5e0:	00000106 	br	e5e8 <close+0x70>
    e5e4:	0005883a 	mov	r2,zero
    e5e8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e5ec:	e13fff17 	ldw	r4,-4(fp)
    e5f0:	000ec380 	call	ec38 <alt_release_fd>
    if (rval < 0)
    e5f4:	e0bffe17 	ldw	r2,-8(fp)
    e5f8:	1000070e 	bge	r2,zero,e618 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e5fc:	000e53c0 	call	e53c <alt_get_errno>
    e600:	1007883a 	mov	r3,r2
    e604:	e0bffe17 	ldw	r2,-8(fp)
    e608:	0085c83a 	sub	r2,zero,r2
    e60c:	18800015 	stw	r2,0(r3)
      return -1;
    e610:	00bfffc4 	movi	r2,-1
    e614:	00000706 	br	e634 <close+0xbc>
    }
    return 0;
    e618:	0005883a 	mov	r2,zero
    e61c:	00000506 	br	e634 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e620:	000e53c0 	call	e53c <alt_get_errno>
    e624:	1007883a 	mov	r3,r2
    e628:	00801444 	movi	r2,81
    e62c:	18800015 	stw	r2,0(r3)
    return -1;
    e630:	00bfffc4 	movi	r2,-1
  }
}
    e634:	e037883a 	mov	sp,fp
    e638:	dfc00117 	ldw	ra,4(sp)
    e63c:	df000017 	ldw	fp,0(sp)
    e640:	dec00204 	addi	sp,sp,8
    e644:	f800283a 	ret

0000e648 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e648:	defffc04 	addi	sp,sp,-16
    e64c:	df000315 	stw	fp,12(sp)
    e650:	df000304 	addi	fp,sp,12
    e654:	e13ffd15 	stw	r4,-12(fp)
    e658:	e17ffe15 	stw	r5,-8(fp)
    e65c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e660:	e0bfff17 	ldw	r2,-4(fp)
}
    e664:	e037883a 	mov	sp,fp
    e668:	df000017 	ldw	fp,0(sp)
    e66c:	dec00104 	addi	sp,sp,4
    e670:	f800283a 	ret

0000e674 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e674:	defffe04 	addi	sp,sp,-8
    e678:	dfc00115 	stw	ra,4(sp)
    e67c:	df000015 	stw	fp,0(sp)
    e680:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e684:	d0a00b17 	ldw	r2,-32724(gp)
    e688:	10000326 	beq	r2,zero,e698 <alt_get_errno+0x24>
    e68c:	d0a00b17 	ldw	r2,-32724(gp)
    e690:	103ee83a 	callr	r2
    e694:	00000106 	br	e69c <alt_get_errno+0x28>
    e698:	d0a6d804 	addi	r2,gp,-25760
}
    e69c:	e037883a 	mov	sp,fp
    e6a0:	dfc00117 	ldw	ra,4(sp)
    e6a4:	df000017 	ldw	fp,0(sp)
    e6a8:	dec00204 	addi	sp,sp,8
    e6ac:	f800283a 	ret

0000e6b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e6b0:	defffb04 	addi	sp,sp,-20
    e6b4:	dfc00415 	stw	ra,16(sp)
    e6b8:	df000315 	stw	fp,12(sp)
    e6bc:	df000304 	addi	fp,sp,12
    e6c0:	e13ffe15 	stw	r4,-8(fp)
    e6c4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e6c8:	e0bffe17 	ldw	r2,-8(fp)
    e6cc:	10000616 	blt	r2,zero,e6e8 <fstat+0x38>
    e6d0:	e0bffe17 	ldw	r2,-8(fp)
    e6d4:	10c00324 	muli	r3,r2,12
    e6d8:	00800074 	movhi	r2,1
    e6dc:	1087fa04 	addi	r2,r2,8168
    e6e0:	1885883a 	add	r2,r3,r2
    e6e4:	00000106 	br	e6ec <fstat+0x3c>
    e6e8:	0005883a 	mov	r2,zero
    e6ec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e6f0:	e0bffd17 	ldw	r2,-12(fp)
    e6f4:	10001026 	beq	r2,zero,e738 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e6f8:	e0bffd17 	ldw	r2,-12(fp)
    e6fc:	10800017 	ldw	r2,0(r2)
    e700:	10800817 	ldw	r2,32(r2)
    e704:	10000726 	beq	r2,zero,e724 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e708:	e0bffd17 	ldw	r2,-12(fp)
    e70c:	10800017 	ldw	r2,0(r2)
    e710:	10800817 	ldw	r2,32(r2)
    e714:	e17fff17 	ldw	r5,-4(fp)
    e718:	e13ffd17 	ldw	r4,-12(fp)
    e71c:	103ee83a 	callr	r2
    e720:	00000a06 	br	e74c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e724:	e0bfff17 	ldw	r2,-4(fp)
    e728:	00c80004 	movi	r3,8192
    e72c:	10c00115 	stw	r3,4(r2)
      return 0;
    e730:	0005883a 	mov	r2,zero
    e734:	00000506 	br	e74c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e738:	000e6740 	call	e674 <alt_get_errno>
    e73c:	1007883a 	mov	r3,r2
    e740:	00801444 	movi	r2,81
    e744:	18800015 	stw	r2,0(r3)
    return -1;
    e748:	00bfffc4 	movi	r2,-1
  }
}
    e74c:	e037883a 	mov	sp,fp
    e750:	dfc00117 	ldw	ra,4(sp)
    e754:	df000017 	ldw	fp,0(sp)
    e758:	dec00204 	addi	sp,sp,8
    e75c:	f800283a 	ret

0000e760 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e760:	defffe04 	addi	sp,sp,-8
    e764:	dfc00115 	stw	ra,4(sp)
    e768:	df000015 	stw	fp,0(sp)
    e76c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e770:	d0a00b17 	ldw	r2,-32724(gp)
    e774:	10000326 	beq	r2,zero,e784 <alt_get_errno+0x24>
    e778:	d0a00b17 	ldw	r2,-32724(gp)
    e77c:	103ee83a 	callr	r2
    e780:	00000106 	br	e788 <alt_get_errno+0x28>
    e784:	d0a6d804 	addi	r2,gp,-25760
}
    e788:	e037883a 	mov	sp,fp
    e78c:	dfc00117 	ldw	ra,4(sp)
    e790:	df000017 	ldw	fp,0(sp)
    e794:	dec00204 	addi	sp,sp,8
    e798:	f800283a 	ret

0000e79c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e79c:	deffed04 	addi	sp,sp,-76
    e7a0:	dfc01215 	stw	ra,72(sp)
    e7a4:	df001115 	stw	fp,68(sp)
    e7a8:	df001104 	addi	fp,sp,68
    e7ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e7b0:	e0bfff17 	ldw	r2,-4(fp)
    e7b4:	10000616 	blt	r2,zero,e7d0 <isatty+0x34>
    e7b8:	e0bfff17 	ldw	r2,-4(fp)
    e7bc:	10c00324 	muli	r3,r2,12
    e7c0:	00800074 	movhi	r2,1
    e7c4:	1087fa04 	addi	r2,r2,8168
    e7c8:	1885883a 	add	r2,r3,r2
    e7cc:	00000106 	br	e7d4 <isatty+0x38>
    e7d0:	0005883a 	mov	r2,zero
    e7d4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e7d8:	e0bfef17 	ldw	r2,-68(fp)
    e7dc:	10000e26 	beq	r2,zero,e818 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e7e0:	e0bfef17 	ldw	r2,-68(fp)
    e7e4:	10800017 	ldw	r2,0(r2)
    e7e8:	10800817 	ldw	r2,32(r2)
    e7ec:	1000021e 	bne	r2,zero,e7f8 <isatty+0x5c>
    {
      return 1;
    e7f0:	00800044 	movi	r2,1
    e7f4:	00000d06 	br	e82c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e7f8:	e0bff004 	addi	r2,fp,-64
    e7fc:	100b883a 	mov	r5,r2
    e800:	e13fff17 	ldw	r4,-4(fp)
    e804:	000e6b00 	call	e6b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e808:	e0bff117 	ldw	r2,-60(fp)
    e80c:	10880020 	cmpeqi	r2,r2,8192
    e810:	10803fcc 	andi	r2,r2,255
    e814:	00000506 	br	e82c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e818:	000e7600 	call	e760 <alt_get_errno>
    e81c:	1007883a 	mov	r3,r2
    e820:	00801444 	movi	r2,81
    e824:	18800015 	stw	r2,0(r3)
    return 0;
    e828:	0005883a 	mov	r2,zero
  }
}
    e82c:	e037883a 	mov	sp,fp
    e830:	dfc00117 	ldw	ra,4(sp)
    e834:	df000017 	ldw	fp,0(sp)
    e838:	dec00204 	addi	sp,sp,8
    e83c:	f800283a 	ret

0000e840 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    e840:	defffc04 	addi	sp,sp,-16
    e844:	df000315 	stw	fp,12(sp)
    e848:	df000304 	addi	fp,sp,12
    e84c:	e13ffd15 	stw	r4,-12(fp)
    e850:	e17ffe15 	stw	r5,-8(fp)
    e854:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    e858:	e0fffe17 	ldw	r3,-8(fp)
    e85c:	e0bffd17 	ldw	r2,-12(fp)
    e860:	18800c26 	beq	r3,r2,e894 <alt_load_section+0x54>
  {
    while( to != end )
    e864:	00000806 	br	e888 <alt_load_section+0x48>
    {
      *to++ = *from++;
    e868:	e0bffe17 	ldw	r2,-8(fp)
    e86c:	10c00104 	addi	r3,r2,4
    e870:	e0fffe15 	stw	r3,-8(fp)
    e874:	e0fffd17 	ldw	r3,-12(fp)
    e878:	19000104 	addi	r4,r3,4
    e87c:	e13ffd15 	stw	r4,-12(fp)
    e880:	18c00017 	ldw	r3,0(r3)
    e884:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    e888:	e0fffe17 	ldw	r3,-8(fp)
    e88c:	e0bfff17 	ldw	r2,-4(fp)
    e890:	18bff51e 	bne	r3,r2,e868 <__alt_data_end+0xff00e868>
    {
      *to++ = *from++;
    }
  }
}
    e894:	0001883a 	nop
    e898:	e037883a 	mov	sp,fp
    e89c:	df000017 	ldw	fp,0(sp)
    e8a0:	dec00104 	addi	sp,sp,4
    e8a4:	f800283a 	ret

0000e8a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e8a8:	defffe04 	addi	sp,sp,-8
    e8ac:	dfc00115 	stw	ra,4(sp)
    e8b0:	df000015 	stw	fp,0(sp)
    e8b4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    e8b8:	01800074 	movhi	r6,1
    e8bc:	318c8204 	addi	r6,r6,12808
    e8c0:	01400074 	movhi	r5,1
    e8c4:	2945c704 	addi	r5,r5,5916
    e8c8:	01000074 	movhi	r4,1
    e8cc:	210c8204 	addi	r4,r4,12808
    e8d0:	000e8400 	call	e840 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    e8d4:	01800034 	movhi	r6,0
    e8d8:	31809104 	addi	r6,r6,580
    e8dc:	01400034 	movhi	r5,0
    e8e0:	29400804 	addi	r5,r5,32
    e8e4:	01000034 	movhi	r4,0
    e8e8:	21000804 	addi	r4,r4,32
    e8ec:	000e8400 	call	e840 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    e8f0:	01800074 	movhi	r6,1
    e8f4:	3185c704 	addi	r6,r6,5916
    e8f8:	01400074 	movhi	r5,1
    e8fc:	2943df04 	addi	r5,r5,3964
    e900:	01000074 	movhi	r4,1
    e904:	2103df04 	addi	r4,r4,3964
    e908:	000e8400 	call	e840 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e90c:	000fe900 	call	fe90 <alt_dcache_flush_all>
  alt_icache_flush_all();
    e910:	00100500 	call	10050 <alt_icache_flush_all>
}
    e914:	0001883a 	nop
    e918:	e037883a 	mov	sp,fp
    e91c:	dfc00117 	ldw	ra,4(sp)
    e920:	df000017 	ldw	fp,0(sp)
    e924:	dec00204 	addi	sp,sp,8
    e928:	f800283a 	ret

0000e92c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e92c:	defffe04 	addi	sp,sp,-8
    e930:	dfc00115 	stw	ra,4(sp)
    e934:	df000015 	stw	fp,0(sp)
    e938:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e93c:	d0a00b17 	ldw	r2,-32724(gp)
    e940:	10000326 	beq	r2,zero,e950 <alt_get_errno+0x24>
    e944:	d0a00b17 	ldw	r2,-32724(gp)
    e948:	103ee83a 	callr	r2
    e94c:	00000106 	br	e954 <alt_get_errno+0x28>
    e950:	d0a6d804 	addi	r2,gp,-25760
}
    e954:	e037883a 	mov	sp,fp
    e958:	dfc00117 	ldw	ra,4(sp)
    e95c:	df000017 	ldw	fp,0(sp)
    e960:	dec00204 	addi	sp,sp,8
    e964:	f800283a 	ret

0000e968 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e968:	defff904 	addi	sp,sp,-28
    e96c:	dfc00615 	stw	ra,24(sp)
    e970:	df000515 	stw	fp,20(sp)
    e974:	df000504 	addi	fp,sp,20
    e978:	e13ffd15 	stw	r4,-12(fp)
    e97c:	e17ffe15 	stw	r5,-8(fp)
    e980:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e984:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e988:	e0bffd17 	ldw	r2,-12(fp)
    e98c:	10000616 	blt	r2,zero,e9a8 <lseek+0x40>
    e990:	e0bffd17 	ldw	r2,-12(fp)
    e994:	10c00324 	muli	r3,r2,12
    e998:	00800074 	movhi	r2,1
    e99c:	1087fa04 	addi	r2,r2,8168
    e9a0:	1885883a 	add	r2,r3,r2
    e9a4:	00000106 	br	e9ac <lseek+0x44>
    e9a8:	0005883a 	mov	r2,zero
    e9ac:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    e9b0:	e0bffc17 	ldw	r2,-16(fp)
    e9b4:	10001026 	beq	r2,zero,e9f8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e9b8:	e0bffc17 	ldw	r2,-16(fp)
    e9bc:	10800017 	ldw	r2,0(r2)
    e9c0:	10800717 	ldw	r2,28(r2)
    e9c4:	10000926 	beq	r2,zero,e9ec <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e9c8:	e0bffc17 	ldw	r2,-16(fp)
    e9cc:	10800017 	ldw	r2,0(r2)
    e9d0:	10800717 	ldw	r2,28(r2)
    e9d4:	e1bfff17 	ldw	r6,-4(fp)
    e9d8:	e17ffe17 	ldw	r5,-8(fp)
    e9dc:	e13ffc17 	ldw	r4,-16(fp)
    e9e0:	103ee83a 	callr	r2
    e9e4:	e0bffb15 	stw	r2,-20(fp)
    e9e8:	00000506 	br	ea00 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e9ec:	00bfde84 	movi	r2,-134
    e9f0:	e0bffb15 	stw	r2,-20(fp)
    e9f4:	00000206 	br	ea00 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    e9f8:	00bfebc4 	movi	r2,-81
    e9fc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    ea00:	e0bffb17 	ldw	r2,-20(fp)
    ea04:	1000070e 	bge	r2,zero,ea24 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    ea08:	000e92c0 	call	e92c <alt_get_errno>
    ea0c:	1007883a 	mov	r3,r2
    ea10:	e0bffb17 	ldw	r2,-20(fp)
    ea14:	0085c83a 	sub	r2,zero,r2
    ea18:	18800015 	stw	r2,0(r3)
    rc = -1;
    ea1c:	00bfffc4 	movi	r2,-1
    ea20:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    ea24:	e0bffb17 	ldw	r2,-20(fp)
}
    ea28:	e037883a 	mov	sp,fp
    ea2c:	dfc00117 	ldw	ra,4(sp)
    ea30:	df000017 	ldw	fp,0(sp)
    ea34:	dec00204 	addi	sp,sp,8
    ea38:	f800283a 	ret

0000ea3c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ea3c:	defffd04 	addi	sp,sp,-12
    ea40:	dfc00215 	stw	ra,8(sp)
    ea44:	df000115 	stw	fp,4(sp)
    ea48:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ea4c:	0009883a 	mov	r4,zero
    ea50:	000eee40 	call	eee4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    ea54:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ea58:	000ef1c0 	call	ef1c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ea5c:	01800074 	movhi	r6,1
    ea60:	3185bf04 	addi	r6,r6,5884
    ea64:	01400074 	movhi	r5,1
    ea68:	2945bf04 	addi	r5,r5,5884
    ea6c:	01000074 	movhi	r4,1
    ea70:	2105bf04 	addi	r4,r4,5884
    ea74:	00103e80 	call	103e8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ea78:	000ff900 	call	ff90 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ea7c:	01000074 	movhi	r4,1
    ea80:	213ffc04 	addi	r4,r4,-16
    ea84:	0010be80 	call	10be8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ea88:	d0a6dc17 	ldw	r2,-25744(gp)
    ea8c:	d0e6dd17 	ldw	r3,-25740(gp)
    ea90:	d126de17 	ldw	r4,-25736(gp)
    ea94:	200d883a 	mov	r6,r4
    ea98:	180b883a 	mov	r5,r3
    ea9c:	1009883a 	mov	r4,r2
    eaa0:	0000f400 	call	f40 <main>
    eaa4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    eaa8:	01000044 	movi	r4,1
    eaac:	000e5780 	call	e578 <close>
  exit (result);
    eab0:	e13fff17 	ldw	r4,-4(fp)
    eab4:	0010bfc0 	call	10bfc <exit>

0000eab8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    eab8:	defffe04 	addi	sp,sp,-8
    eabc:	df000115 	stw	fp,4(sp)
    eac0:	df000104 	addi	fp,sp,4
    eac4:	e13fff15 	stw	r4,-4(fp)
}
    eac8:	0001883a 	nop
    eacc:	e037883a 	mov	sp,fp
    ead0:	df000017 	ldw	fp,0(sp)
    ead4:	dec00104 	addi	sp,sp,4
    ead8:	f800283a 	ret

0000eadc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    eadc:	defffe04 	addi	sp,sp,-8
    eae0:	df000115 	stw	fp,4(sp)
    eae4:	df000104 	addi	fp,sp,4
    eae8:	e13fff15 	stw	r4,-4(fp)
}
    eaec:	0001883a 	nop
    eaf0:	e037883a 	mov	sp,fp
    eaf4:	df000017 	ldw	fp,0(sp)
    eaf8:	dec00104 	addi	sp,sp,4
    eafc:	f800283a 	ret

0000eb00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eb00:	defffe04 	addi	sp,sp,-8
    eb04:	dfc00115 	stw	ra,4(sp)
    eb08:	df000015 	stw	fp,0(sp)
    eb0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eb10:	d0a00b17 	ldw	r2,-32724(gp)
    eb14:	10000326 	beq	r2,zero,eb24 <alt_get_errno+0x24>
    eb18:	d0a00b17 	ldw	r2,-32724(gp)
    eb1c:	103ee83a 	callr	r2
    eb20:	00000106 	br	eb28 <alt_get_errno+0x28>
    eb24:	d0a6d804 	addi	r2,gp,-25760
}
    eb28:	e037883a 	mov	sp,fp
    eb2c:	dfc00117 	ldw	ra,4(sp)
    eb30:	df000017 	ldw	fp,0(sp)
    eb34:	dec00204 	addi	sp,sp,8
    eb38:	f800283a 	ret

0000eb3c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    eb3c:	defff904 	addi	sp,sp,-28
    eb40:	dfc00615 	stw	ra,24(sp)
    eb44:	df000515 	stw	fp,20(sp)
    eb48:	df000504 	addi	fp,sp,20
    eb4c:	e13ffd15 	stw	r4,-12(fp)
    eb50:	e17ffe15 	stw	r5,-8(fp)
    eb54:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    eb58:	e0bffd17 	ldw	r2,-12(fp)
    eb5c:	10000616 	blt	r2,zero,eb78 <read+0x3c>
    eb60:	e0bffd17 	ldw	r2,-12(fp)
    eb64:	10c00324 	muli	r3,r2,12
    eb68:	00800074 	movhi	r2,1
    eb6c:	1087fa04 	addi	r2,r2,8168
    eb70:	1885883a 	add	r2,r3,r2
    eb74:	00000106 	br	eb7c <read+0x40>
    eb78:	0005883a 	mov	r2,zero
    eb7c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    eb80:	e0bffb17 	ldw	r2,-20(fp)
    eb84:	10002226 	beq	r2,zero,ec10 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    eb88:	e0bffb17 	ldw	r2,-20(fp)
    eb8c:	10800217 	ldw	r2,8(r2)
    eb90:	108000cc 	andi	r2,r2,3
    eb94:	10800060 	cmpeqi	r2,r2,1
    eb98:	1000181e 	bne	r2,zero,ebfc <read+0xc0>
        (fd->dev->read))
    eb9c:	e0bffb17 	ldw	r2,-20(fp)
    eba0:	10800017 	ldw	r2,0(r2)
    eba4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    eba8:	10001426 	beq	r2,zero,ebfc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ebac:	e0bffb17 	ldw	r2,-20(fp)
    ebb0:	10800017 	ldw	r2,0(r2)
    ebb4:	10800517 	ldw	r2,20(r2)
    ebb8:	e0ffff17 	ldw	r3,-4(fp)
    ebbc:	180d883a 	mov	r6,r3
    ebc0:	e17ffe17 	ldw	r5,-8(fp)
    ebc4:	e13ffb17 	ldw	r4,-20(fp)
    ebc8:	103ee83a 	callr	r2
    ebcc:	e0bffc15 	stw	r2,-16(fp)
    ebd0:	e0bffc17 	ldw	r2,-16(fp)
    ebd4:	1000070e 	bge	r2,zero,ebf4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    ebd8:	000eb000 	call	eb00 <alt_get_errno>
    ebdc:	1007883a 	mov	r3,r2
    ebe0:	e0bffc17 	ldw	r2,-16(fp)
    ebe4:	0085c83a 	sub	r2,zero,r2
    ebe8:	18800015 	stw	r2,0(r3)
          return -1;
    ebec:	00bfffc4 	movi	r2,-1
    ebf0:	00000c06 	br	ec24 <read+0xe8>
        }
        return rval;
    ebf4:	e0bffc17 	ldw	r2,-16(fp)
    ebf8:	00000a06 	br	ec24 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ebfc:	000eb000 	call	eb00 <alt_get_errno>
    ec00:	1007883a 	mov	r3,r2
    ec04:	00800344 	movi	r2,13
    ec08:	18800015 	stw	r2,0(r3)
    ec0c:	00000406 	br	ec20 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ec10:	000eb000 	call	eb00 <alt_get_errno>
    ec14:	1007883a 	mov	r3,r2
    ec18:	00801444 	movi	r2,81
    ec1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ec20:	00bfffc4 	movi	r2,-1
}
    ec24:	e037883a 	mov	sp,fp
    ec28:	dfc00117 	ldw	ra,4(sp)
    ec2c:	df000017 	ldw	fp,0(sp)
    ec30:	dec00204 	addi	sp,sp,8
    ec34:	f800283a 	ret

0000ec38 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ec38:	defffe04 	addi	sp,sp,-8
    ec3c:	df000115 	stw	fp,4(sp)
    ec40:	df000104 	addi	fp,sp,4
    ec44:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ec48:	e0bfff17 	ldw	r2,-4(fp)
    ec4c:	108000d0 	cmplti	r2,r2,3
    ec50:	10000d1e 	bne	r2,zero,ec88 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    ec54:	00800074 	movhi	r2,1
    ec58:	1087fa04 	addi	r2,r2,8168
    ec5c:	e0ffff17 	ldw	r3,-4(fp)
    ec60:	18c00324 	muli	r3,r3,12
    ec64:	10c5883a 	add	r2,r2,r3
    ec68:	10800204 	addi	r2,r2,8
    ec6c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ec70:	00800074 	movhi	r2,1
    ec74:	1087fa04 	addi	r2,r2,8168
    ec78:	e0ffff17 	ldw	r3,-4(fp)
    ec7c:	18c00324 	muli	r3,r3,12
    ec80:	10c5883a 	add	r2,r2,r3
    ec84:	10000015 	stw	zero,0(r2)
  }
}
    ec88:	0001883a 	nop
    ec8c:	e037883a 	mov	sp,fp
    ec90:	df000017 	ldw	fp,0(sp)
    ec94:	dec00104 	addi	sp,sp,4
    ec98:	f800283a 	ret

0000ec9c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ec9c:	defff904 	addi	sp,sp,-28
    eca0:	df000615 	stw	fp,24(sp)
    eca4:	df000604 	addi	fp,sp,24
    eca8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ecac:	0005303a 	rdctl	r2,status
    ecb0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ecb4:	e0fffe17 	ldw	r3,-8(fp)
    ecb8:	00bfff84 	movi	r2,-2
    ecbc:	1884703a 	and	r2,r3,r2
    ecc0:	1001703a 	wrctl	status,r2
  
  return context;
    ecc4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    ecc8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    eccc:	d0a00c17 	ldw	r2,-32720(gp)
    ecd0:	10c000c4 	addi	r3,r2,3
    ecd4:	00bfff04 	movi	r2,-4
    ecd8:	1884703a 	and	r2,r3,r2
    ecdc:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ece0:	d0e00c17 	ldw	r3,-32720(gp)
    ece4:	e0bfff17 	ldw	r2,-4(fp)
    ece8:	1887883a 	add	r3,r3,r2
    ecec:	00804034 	movhi	r2,256
    ecf0:	10800004 	addi	r2,r2,0
    ecf4:	10c0062e 	bgeu	r2,r3,ed10 <sbrk+0x74>
    ecf8:	e0bffb17 	ldw	r2,-20(fp)
    ecfc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed00:	e0bffa17 	ldw	r2,-24(fp)
    ed04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ed08:	00bfffc4 	movi	r2,-1
    ed0c:	00000b06 	br	ed3c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    ed10:	d0a00c17 	ldw	r2,-32720(gp)
    ed14:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    ed18:	d0e00c17 	ldw	r3,-32720(gp)
    ed1c:	e0bfff17 	ldw	r2,-4(fp)
    ed20:	1885883a 	add	r2,r3,r2
    ed24:	d0a00c15 	stw	r2,-32720(gp)
    ed28:	e0bffb17 	ldw	r2,-20(fp)
    ed2c:	e0bffc15 	stw	r2,-16(fp)
    ed30:	e0bffc17 	ldw	r2,-16(fp)
    ed34:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    ed38:	e0bffd17 	ldw	r2,-12(fp)
} 
    ed3c:	e037883a 	mov	sp,fp
    ed40:	df000017 	ldw	fp,0(sp)
    ed44:	dec00104 	addi	sp,sp,4
    ed48:	f800283a 	ret

0000ed4c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    ed4c:	defffd04 	addi	sp,sp,-12
    ed50:	dfc00215 	stw	ra,8(sp)
    ed54:	df000115 	stw	fp,4(sp)
    ed58:	df000104 	addi	fp,sp,4
    ed5c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    ed60:	e13fff17 	ldw	r4,-4(fp)
    ed64:	000fd380 	call	fd38 <alt_busy_sleep>
}
    ed68:	e037883a 	mov	sp,fp
    ed6c:	dfc00117 	ldw	ra,4(sp)
    ed70:	df000017 	ldw	fp,0(sp)
    ed74:	dec00204 	addi	sp,sp,8
    ed78:	f800283a 	ret

0000ed7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ed7c:	defffe04 	addi	sp,sp,-8
    ed80:	dfc00115 	stw	ra,4(sp)
    ed84:	df000015 	stw	fp,0(sp)
    ed88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ed8c:	d0a00b17 	ldw	r2,-32724(gp)
    ed90:	10000326 	beq	r2,zero,eda0 <alt_get_errno+0x24>
    ed94:	d0a00b17 	ldw	r2,-32724(gp)
    ed98:	103ee83a 	callr	r2
    ed9c:	00000106 	br	eda4 <alt_get_errno+0x28>
    eda0:	d0a6d804 	addi	r2,gp,-25760
}
    eda4:	e037883a 	mov	sp,fp
    eda8:	dfc00117 	ldw	ra,4(sp)
    edac:	df000017 	ldw	fp,0(sp)
    edb0:	dec00204 	addi	sp,sp,8
    edb4:	f800283a 	ret

0000edb8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    edb8:	defff904 	addi	sp,sp,-28
    edbc:	dfc00615 	stw	ra,24(sp)
    edc0:	df000515 	stw	fp,20(sp)
    edc4:	df000504 	addi	fp,sp,20
    edc8:	e13ffd15 	stw	r4,-12(fp)
    edcc:	e17ffe15 	stw	r5,-8(fp)
    edd0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    edd4:	e0bffd17 	ldw	r2,-12(fp)
    edd8:	10000616 	blt	r2,zero,edf4 <write+0x3c>
    eddc:	e0bffd17 	ldw	r2,-12(fp)
    ede0:	10c00324 	muli	r3,r2,12
    ede4:	00800074 	movhi	r2,1
    ede8:	1087fa04 	addi	r2,r2,8168
    edec:	1885883a 	add	r2,r3,r2
    edf0:	00000106 	br	edf8 <write+0x40>
    edf4:	0005883a 	mov	r2,zero
    edf8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    edfc:	e0bffb17 	ldw	r2,-20(fp)
    ee00:	10002126 	beq	r2,zero,ee88 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ee04:	e0bffb17 	ldw	r2,-20(fp)
    ee08:	10800217 	ldw	r2,8(r2)
    ee0c:	108000cc 	andi	r2,r2,3
    ee10:	10001826 	beq	r2,zero,ee74 <write+0xbc>
    ee14:	e0bffb17 	ldw	r2,-20(fp)
    ee18:	10800017 	ldw	r2,0(r2)
    ee1c:	10800617 	ldw	r2,24(r2)
    ee20:	10001426 	beq	r2,zero,ee74 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ee24:	e0bffb17 	ldw	r2,-20(fp)
    ee28:	10800017 	ldw	r2,0(r2)
    ee2c:	10800617 	ldw	r2,24(r2)
    ee30:	e0ffff17 	ldw	r3,-4(fp)
    ee34:	180d883a 	mov	r6,r3
    ee38:	e17ffe17 	ldw	r5,-8(fp)
    ee3c:	e13ffb17 	ldw	r4,-20(fp)
    ee40:	103ee83a 	callr	r2
    ee44:	e0bffc15 	stw	r2,-16(fp)
    ee48:	e0bffc17 	ldw	r2,-16(fp)
    ee4c:	1000070e 	bge	r2,zero,ee6c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    ee50:	000ed7c0 	call	ed7c <alt_get_errno>
    ee54:	1007883a 	mov	r3,r2
    ee58:	e0bffc17 	ldw	r2,-16(fp)
    ee5c:	0085c83a 	sub	r2,zero,r2
    ee60:	18800015 	stw	r2,0(r3)
        return -1;
    ee64:	00bfffc4 	movi	r2,-1
    ee68:	00000c06 	br	ee9c <write+0xe4>
      }
      return rval;
    ee6c:	e0bffc17 	ldw	r2,-16(fp)
    ee70:	00000a06 	br	ee9c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    ee74:	000ed7c0 	call	ed7c <alt_get_errno>
    ee78:	1007883a 	mov	r3,r2
    ee7c:	00800344 	movi	r2,13
    ee80:	18800015 	stw	r2,0(r3)
    ee84:	00000406 	br	ee98 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    ee88:	000ed7c0 	call	ed7c <alt_get_errno>
    ee8c:	1007883a 	mov	r3,r2
    ee90:	00801444 	movi	r2,81
    ee94:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ee98:	00bfffc4 	movi	r2,-1
}
    ee9c:	e037883a 	mov	sp,fp
    eea0:	dfc00117 	ldw	ra,4(sp)
    eea4:	df000017 	ldw	fp,0(sp)
    eea8:	dec00204 	addi	sp,sp,8
    eeac:	f800283a 	ret

0000eeb0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    eeb0:	defffd04 	addi	sp,sp,-12
    eeb4:	dfc00215 	stw	ra,8(sp)
    eeb8:	df000115 	stw	fp,4(sp)
    eebc:	df000104 	addi	fp,sp,4
    eec0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    eec4:	d1600804 	addi	r5,gp,-32736
    eec8:	e13fff17 	ldw	r4,-4(fp)
    eecc:	000feec0 	call	feec <alt_dev_llist_insert>
}
    eed0:	e037883a 	mov	sp,fp
    eed4:	dfc00117 	ldw	ra,4(sp)
    eed8:	df000017 	ldw	fp,0(sp)
    eedc:	dec00204 	addi	sp,sp,8
    eee0:	f800283a 	ret

0000eee4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    eee4:	defffd04 	addi	sp,sp,-12
    eee8:	dfc00215 	stw	ra,8(sp)
    eeec:	df000115 	stw	fp,4(sp)
    eef0:	df000104 	addi	fp,sp,4
    eef4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    eef8:	001085c0 	call	1085c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    eefc:	00800044 	movi	r2,1
    ef00:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ef04:	0001883a 	nop
    ef08:	e037883a 	mov	sp,fp
    ef0c:	dfc00117 	ldw	ra,4(sp)
    ef10:	df000017 	ldw	fp,0(sp)
    ef14:	dec00204 	addi	sp,sp,8
    ef18:	f800283a 	ret

0000ef1c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ef1c:	defffe04 	addi	sp,sp,-8
    ef20:	dfc00115 	stw	ra,4(sp)
    ef24:	df000015 	stw	fp,0(sp)
    ef28:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ef2c:	00804034 	movhi	r2,256
    ef30:	10840004 	addi	r2,r2,4096
    ef34:	d0a6df15 	stw	r2,-25732(gp)
    ef38:	0080bef4 	movhi	r2,763
    ef3c:	10bc2004 	addi	r2,r2,-3968
    ef40:	d0a6e015 	stw	r2,-25728(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ef44:	01c0fa04 	movi	r7,1000
    ef48:	01800104 	movi	r6,4
    ef4c:	000b883a 	mov	r5,zero
    ef50:	01004034 	movhi	r4,256
    ef54:	21040804 	addi	r4,r4,4128
    ef58:	000fa780 	call	fa78 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ef5c:	000d883a 	mov	r6,zero
    ef60:	000b883a 	mov	r5,zero
    ef64:	01000074 	movhi	r4,1
    ef68:	21086404 	addi	r4,r4,8592
    ef6c:	000f0fc0 	call	f0fc <altera_avalon_jtag_uart_init>
    ef70:	01000074 	movhi	r4,1
    ef74:	21085a04 	addi	r4,r4,8552
    ef78:	000eeb00 	call	eeb0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ef7c:	0001883a 	nop
}
    ef80:	0001883a 	nop
    ef84:	e037883a 	mov	sp,fp
    ef88:	dfc00117 	ldw	ra,4(sp)
    ef8c:	df000017 	ldw	fp,0(sp)
    ef90:	dec00204 	addi	sp,sp,8
    ef94:	f800283a 	ret

0000ef98 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    ef98:	defffa04 	addi	sp,sp,-24
    ef9c:	dfc00515 	stw	ra,20(sp)
    efa0:	df000415 	stw	fp,16(sp)
    efa4:	df000404 	addi	fp,sp,16
    efa8:	e13ffd15 	stw	r4,-12(fp)
    efac:	e17ffe15 	stw	r5,-8(fp)
    efb0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    efb4:	e0bffd17 	ldw	r2,-12(fp)
    efb8:	10800017 	ldw	r2,0(r2)
    efbc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    efc0:	e0bffc17 	ldw	r2,-16(fp)
    efc4:	10c00a04 	addi	r3,r2,40
    efc8:	e0bffd17 	ldw	r2,-12(fp)
    efcc:	10800217 	ldw	r2,8(r2)
    efd0:	100f883a 	mov	r7,r2
    efd4:	e1bfff17 	ldw	r6,-4(fp)
    efd8:	e17ffe17 	ldw	r5,-8(fp)
    efdc:	1809883a 	mov	r4,r3
    efe0:	000f5c00 	call	f5c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    efe4:	e037883a 	mov	sp,fp
    efe8:	dfc00117 	ldw	ra,4(sp)
    efec:	df000017 	ldw	fp,0(sp)
    eff0:	dec00204 	addi	sp,sp,8
    eff4:	f800283a 	ret

0000eff8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    eff8:	defffa04 	addi	sp,sp,-24
    effc:	dfc00515 	stw	ra,20(sp)
    f000:	df000415 	stw	fp,16(sp)
    f004:	df000404 	addi	fp,sp,16
    f008:	e13ffd15 	stw	r4,-12(fp)
    f00c:	e17ffe15 	stw	r5,-8(fp)
    f010:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f014:	e0bffd17 	ldw	r2,-12(fp)
    f018:	10800017 	ldw	r2,0(r2)
    f01c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f020:	e0bffc17 	ldw	r2,-16(fp)
    f024:	10c00a04 	addi	r3,r2,40
    f028:	e0bffd17 	ldw	r2,-12(fp)
    f02c:	10800217 	ldw	r2,8(r2)
    f030:	100f883a 	mov	r7,r2
    f034:	e1bfff17 	ldw	r6,-4(fp)
    f038:	e17ffe17 	ldw	r5,-8(fp)
    f03c:	1809883a 	mov	r4,r3
    f040:	000f7dc0 	call	f7dc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f044:	e037883a 	mov	sp,fp
    f048:	dfc00117 	ldw	ra,4(sp)
    f04c:	df000017 	ldw	fp,0(sp)
    f050:	dec00204 	addi	sp,sp,8
    f054:	f800283a 	ret

0000f058 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f058:	defffc04 	addi	sp,sp,-16
    f05c:	dfc00315 	stw	ra,12(sp)
    f060:	df000215 	stw	fp,8(sp)
    f064:	df000204 	addi	fp,sp,8
    f068:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f06c:	e0bfff17 	ldw	r2,-4(fp)
    f070:	10800017 	ldw	r2,0(r2)
    f074:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f078:	e0bffe17 	ldw	r2,-8(fp)
    f07c:	10c00a04 	addi	r3,r2,40
    f080:	e0bfff17 	ldw	r2,-4(fp)
    f084:	10800217 	ldw	r2,8(r2)
    f088:	100b883a 	mov	r5,r2
    f08c:	1809883a 	mov	r4,r3
    f090:	000f4680 	call	f468 <altera_avalon_jtag_uart_close>
}
    f094:	e037883a 	mov	sp,fp
    f098:	dfc00117 	ldw	ra,4(sp)
    f09c:	df000017 	ldw	fp,0(sp)
    f0a0:	dec00204 	addi	sp,sp,8
    f0a4:	f800283a 	ret

0000f0a8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f0a8:	defffa04 	addi	sp,sp,-24
    f0ac:	dfc00515 	stw	ra,20(sp)
    f0b0:	df000415 	stw	fp,16(sp)
    f0b4:	df000404 	addi	fp,sp,16
    f0b8:	e13ffd15 	stw	r4,-12(fp)
    f0bc:	e17ffe15 	stw	r5,-8(fp)
    f0c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f0c4:	e0bffd17 	ldw	r2,-12(fp)
    f0c8:	10800017 	ldw	r2,0(r2)
    f0cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f0d0:	e0bffc17 	ldw	r2,-16(fp)
    f0d4:	10800a04 	addi	r2,r2,40
    f0d8:	e1bfff17 	ldw	r6,-4(fp)
    f0dc:	e17ffe17 	ldw	r5,-8(fp)
    f0e0:	1009883a 	mov	r4,r2
    f0e4:	000f4d00 	call	f4d0 <altera_avalon_jtag_uart_ioctl>
}
    f0e8:	e037883a 	mov	sp,fp
    f0ec:	dfc00117 	ldw	ra,4(sp)
    f0f0:	df000017 	ldw	fp,0(sp)
    f0f4:	dec00204 	addi	sp,sp,8
    f0f8:	f800283a 	ret

0000f0fc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f0fc:	defffa04 	addi	sp,sp,-24
    f100:	dfc00515 	stw	ra,20(sp)
    f104:	df000415 	stw	fp,16(sp)
    f108:	df000404 	addi	fp,sp,16
    f10c:	e13ffd15 	stw	r4,-12(fp)
    f110:	e17ffe15 	stw	r5,-8(fp)
    f114:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f118:	e0bffd17 	ldw	r2,-12(fp)
    f11c:	00c00044 	movi	r3,1
    f120:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f124:	e0bffd17 	ldw	r2,-12(fp)
    f128:	10800017 	ldw	r2,0(r2)
    f12c:	10800104 	addi	r2,r2,4
    f130:	1007883a 	mov	r3,r2
    f134:	e0bffd17 	ldw	r2,-12(fp)
    f138:	10800817 	ldw	r2,32(r2)
    f13c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f140:	e0bffe17 	ldw	r2,-8(fp)
    f144:	e0ffff17 	ldw	r3,-4(fp)
    f148:	d8000015 	stw	zero,0(sp)
    f14c:	e1fffd17 	ldw	r7,-12(fp)
    f150:	01800074 	movhi	r6,1
    f154:	31bc6f04 	addi	r6,r6,-3652
    f158:	180b883a 	mov	r5,r3
    f15c:	1009883a 	mov	r4,r2
    f160:	00100840 	call	10084 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f164:	e0bffd17 	ldw	r2,-12(fp)
    f168:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f16c:	e0bffd17 	ldw	r2,-12(fp)
    f170:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f174:	d0e6e217 	ldw	r3,-25720(gp)
    f178:	e1fffd17 	ldw	r7,-12(fp)
    f17c:	01800074 	movhi	r6,1
    f180:	31bcf204 	addi	r6,r6,-3128
    f184:	180b883a 	mov	r5,r3
    f188:	1009883a 	mov	r4,r2
    f18c:	000fc0c0 	call	fc0c <alt_alarm_start>
    f190:	1000040e 	bge	r2,zero,f1a4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f194:	e0fffd17 	ldw	r3,-12(fp)
    f198:	00a00034 	movhi	r2,32768
    f19c:	10bfffc4 	addi	r2,r2,-1
    f1a0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f1a4:	0001883a 	nop
    f1a8:	e037883a 	mov	sp,fp
    f1ac:	dfc00117 	ldw	ra,4(sp)
    f1b0:	df000017 	ldw	fp,0(sp)
    f1b4:	dec00204 	addi	sp,sp,8
    f1b8:	f800283a 	ret

0000f1bc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f1bc:	defff804 	addi	sp,sp,-32
    f1c0:	df000715 	stw	fp,28(sp)
    f1c4:	df000704 	addi	fp,sp,28
    f1c8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f1cc:	e0bfff17 	ldw	r2,-4(fp)
    f1d0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f1d4:	e0bffb17 	ldw	r2,-20(fp)
    f1d8:	10800017 	ldw	r2,0(r2)
    f1dc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f1e0:	e0bffc17 	ldw	r2,-16(fp)
    f1e4:	10800104 	addi	r2,r2,4
    f1e8:	10800037 	ldwio	r2,0(r2)
    f1ec:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f1f0:	e0bffd17 	ldw	r2,-12(fp)
    f1f4:	1080c00c 	andi	r2,r2,768
    f1f8:	10006d26 	beq	r2,zero,f3b0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f1fc:	e0bffd17 	ldw	r2,-12(fp)
    f200:	1080400c 	andi	r2,r2,256
    f204:	10003526 	beq	r2,zero,f2dc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f208:	00800074 	movhi	r2,1
    f20c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f210:	e0bffb17 	ldw	r2,-20(fp)
    f214:	10800a17 	ldw	r2,40(r2)
    f218:	10800044 	addi	r2,r2,1
    f21c:	1081ffcc 	andi	r2,r2,2047
    f220:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f224:	e0bffb17 	ldw	r2,-20(fp)
    f228:	10c00b17 	ldw	r3,44(r2)
    f22c:	e0bffe17 	ldw	r2,-8(fp)
    f230:	18801526 	beq	r3,r2,f288 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f234:	e0bffc17 	ldw	r2,-16(fp)
    f238:	10800037 	ldwio	r2,0(r2)
    f23c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f240:	e0bff917 	ldw	r2,-28(fp)
    f244:	10a0000c 	andi	r2,r2,32768
    f248:	10001126 	beq	r2,zero,f290 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f24c:	e0bffb17 	ldw	r2,-20(fp)
    f250:	10800a17 	ldw	r2,40(r2)
    f254:	e0fff917 	ldw	r3,-28(fp)
    f258:	1809883a 	mov	r4,r3
    f25c:	e0fffb17 	ldw	r3,-20(fp)
    f260:	1885883a 	add	r2,r3,r2
    f264:	10800e04 	addi	r2,r2,56
    f268:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f26c:	e0bffb17 	ldw	r2,-20(fp)
    f270:	10800a17 	ldw	r2,40(r2)
    f274:	10800044 	addi	r2,r2,1
    f278:	10c1ffcc 	andi	r3,r2,2047
    f27c:	e0bffb17 	ldw	r2,-20(fp)
    f280:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f284:	003fe206 	br	f210 <__alt_data_end+0xff00f210>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f288:	0001883a 	nop
    f28c:	00000106 	br	f294 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f290:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f294:	e0bff917 	ldw	r2,-28(fp)
    f298:	10bfffec 	andhi	r2,r2,65535
    f29c:	10000f26 	beq	r2,zero,f2dc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f2a0:	e0bffb17 	ldw	r2,-20(fp)
    f2a4:	10c00817 	ldw	r3,32(r2)
    f2a8:	00bfff84 	movi	r2,-2
    f2ac:	1886703a 	and	r3,r3,r2
    f2b0:	e0bffb17 	ldw	r2,-20(fp)
    f2b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f2b8:	e0bffc17 	ldw	r2,-16(fp)
    f2bc:	10800104 	addi	r2,r2,4
    f2c0:	1007883a 	mov	r3,r2
    f2c4:	e0bffb17 	ldw	r2,-20(fp)
    f2c8:	10800817 	ldw	r2,32(r2)
    f2cc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f2d0:	e0bffc17 	ldw	r2,-16(fp)
    f2d4:	10800104 	addi	r2,r2,4
    f2d8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f2dc:	e0bffd17 	ldw	r2,-12(fp)
    f2e0:	1080800c 	andi	r2,r2,512
    f2e4:	103fbe26 	beq	r2,zero,f1e0 <__alt_data_end+0xff00f1e0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f2e8:	e0bffd17 	ldw	r2,-12(fp)
    f2ec:	1004d43a 	srli	r2,r2,16
    f2f0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f2f4:	00001406 	br	f348 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f2f8:	e0bffc17 	ldw	r2,-16(fp)
    f2fc:	e0fffb17 	ldw	r3,-20(fp)
    f300:	18c00d17 	ldw	r3,52(r3)
    f304:	e13ffb17 	ldw	r4,-20(fp)
    f308:	20c7883a 	add	r3,r4,r3
    f30c:	18c20e04 	addi	r3,r3,2104
    f310:	18c00003 	ldbu	r3,0(r3)
    f314:	18c03fcc 	andi	r3,r3,255
    f318:	18c0201c 	xori	r3,r3,128
    f31c:	18ffe004 	addi	r3,r3,-128
    f320:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f324:	e0bffb17 	ldw	r2,-20(fp)
    f328:	10800d17 	ldw	r2,52(r2)
    f32c:	10800044 	addi	r2,r2,1
    f330:	10c1ffcc 	andi	r3,r2,2047
    f334:	e0bffb17 	ldw	r2,-20(fp)
    f338:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f33c:	e0bffa17 	ldw	r2,-24(fp)
    f340:	10bfffc4 	addi	r2,r2,-1
    f344:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f348:	e0bffa17 	ldw	r2,-24(fp)
    f34c:	10000526 	beq	r2,zero,f364 <altera_avalon_jtag_uart_irq+0x1a8>
    f350:	e0bffb17 	ldw	r2,-20(fp)
    f354:	10c00d17 	ldw	r3,52(r2)
    f358:	e0bffb17 	ldw	r2,-20(fp)
    f35c:	10800c17 	ldw	r2,48(r2)
    f360:	18bfe51e 	bne	r3,r2,f2f8 <__alt_data_end+0xff00f2f8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f364:	e0bffa17 	ldw	r2,-24(fp)
    f368:	103f9d26 	beq	r2,zero,f1e0 <__alt_data_end+0xff00f1e0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f36c:	e0bffb17 	ldw	r2,-20(fp)
    f370:	10c00817 	ldw	r3,32(r2)
    f374:	00bfff44 	movi	r2,-3
    f378:	1886703a 	and	r3,r3,r2
    f37c:	e0bffb17 	ldw	r2,-20(fp)
    f380:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f384:	e0bffb17 	ldw	r2,-20(fp)
    f388:	10800017 	ldw	r2,0(r2)
    f38c:	10800104 	addi	r2,r2,4
    f390:	1007883a 	mov	r3,r2
    f394:	e0bffb17 	ldw	r2,-20(fp)
    f398:	10800817 	ldw	r2,32(r2)
    f39c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f3a0:	e0bffc17 	ldw	r2,-16(fp)
    f3a4:	10800104 	addi	r2,r2,4
    f3a8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f3ac:	003f8c06 	br	f1e0 <__alt_data_end+0xff00f1e0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    f3b0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    f3b4:	0001883a 	nop
    f3b8:	e037883a 	mov	sp,fp
    f3bc:	df000017 	ldw	fp,0(sp)
    f3c0:	dec00104 	addi	sp,sp,4
    f3c4:	f800283a 	ret

0000f3c8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f3c8:	defff804 	addi	sp,sp,-32
    f3cc:	df000715 	stw	fp,28(sp)
    f3d0:	df000704 	addi	fp,sp,28
    f3d4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f3d8:	e0bffb17 	ldw	r2,-20(fp)
    f3dc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f3e0:	e0bff917 	ldw	r2,-28(fp)
    f3e4:	10800017 	ldw	r2,0(r2)
    f3e8:	10800104 	addi	r2,r2,4
    f3ec:	10800037 	ldwio	r2,0(r2)
    f3f0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f3f4:	e0bffa17 	ldw	r2,-24(fp)
    f3f8:	1081000c 	andi	r2,r2,1024
    f3fc:	10000b26 	beq	r2,zero,f42c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f400:	e0bff917 	ldw	r2,-28(fp)
    f404:	10800017 	ldw	r2,0(r2)
    f408:	10800104 	addi	r2,r2,4
    f40c:	1007883a 	mov	r3,r2
    f410:	e0bff917 	ldw	r2,-28(fp)
    f414:	10800817 	ldw	r2,32(r2)
    f418:	10810014 	ori	r2,r2,1024
    f41c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f420:	e0bff917 	ldw	r2,-28(fp)
    f424:	10000915 	stw	zero,36(r2)
    f428:	00000a06 	br	f454 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f42c:	e0bff917 	ldw	r2,-28(fp)
    f430:	10c00917 	ldw	r3,36(r2)
    f434:	00a00034 	movhi	r2,32768
    f438:	10bfff04 	addi	r2,r2,-4
    f43c:	10c00536 	bltu	r2,r3,f454 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f440:	e0bff917 	ldw	r2,-28(fp)
    f444:	10800917 	ldw	r2,36(r2)
    f448:	10c00044 	addi	r3,r2,1
    f44c:	e0bff917 	ldw	r2,-28(fp)
    f450:	10c00915 	stw	r3,36(r2)
    f454:	d0a6e217 	ldw	r2,-25720(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f458:	e037883a 	mov	sp,fp
    f45c:	df000017 	ldw	fp,0(sp)
    f460:	dec00104 	addi	sp,sp,4
    f464:	f800283a 	ret

0000f468 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f468:	defffd04 	addi	sp,sp,-12
    f46c:	df000215 	stw	fp,8(sp)
    f470:	df000204 	addi	fp,sp,8
    f474:	e13ffe15 	stw	r4,-8(fp)
    f478:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f47c:	00000506 	br	f494 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f480:	e0bfff17 	ldw	r2,-4(fp)
    f484:	1090000c 	andi	r2,r2,16384
    f488:	10000226 	beq	r2,zero,f494 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f48c:	00bffd44 	movi	r2,-11
    f490:	00000b06 	br	f4c0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f494:	e0bffe17 	ldw	r2,-8(fp)
    f498:	10c00d17 	ldw	r3,52(r2)
    f49c:	e0bffe17 	ldw	r2,-8(fp)
    f4a0:	10800c17 	ldw	r2,48(r2)
    f4a4:	18800526 	beq	r3,r2,f4bc <altera_avalon_jtag_uart_close+0x54>
    f4a8:	e0bffe17 	ldw	r2,-8(fp)
    f4ac:	10c00917 	ldw	r3,36(r2)
    f4b0:	e0bffe17 	ldw	r2,-8(fp)
    f4b4:	10800117 	ldw	r2,4(r2)
    f4b8:	18bff136 	bltu	r3,r2,f480 <__alt_data_end+0xff00f480>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f4bc:	0005883a 	mov	r2,zero
}
    f4c0:	e037883a 	mov	sp,fp
    f4c4:	df000017 	ldw	fp,0(sp)
    f4c8:	dec00104 	addi	sp,sp,4
    f4cc:	f800283a 	ret

0000f4d0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f4d0:	defffa04 	addi	sp,sp,-24
    f4d4:	df000515 	stw	fp,20(sp)
    f4d8:	df000504 	addi	fp,sp,20
    f4dc:	e13ffd15 	stw	r4,-12(fp)
    f4e0:	e17ffe15 	stw	r5,-8(fp)
    f4e4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f4e8:	00bff9c4 	movi	r2,-25
    f4ec:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f4f0:	e0bffe17 	ldw	r2,-8(fp)
    f4f4:	10da8060 	cmpeqi	r3,r2,27137
    f4f8:	1800031e 	bne	r3,zero,f508 <altera_avalon_jtag_uart_ioctl+0x38>
    f4fc:	109a80a0 	cmpeqi	r2,r2,27138
    f500:	1000181e 	bne	r2,zero,f564 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    f504:	00002906 	br	f5ac <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f508:	e0bffd17 	ldw	r2,-12(fp)
    f50c:	10c00117 	ldw	r3,4(r2)
    f510:	00a00034 	movhi	r2,32768
    f514:	10bfffc4 	addi	r2,r2,-1
    f518:	18802126 	beq	r3,r2,f5a0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    f51c:	e0bfff17 	ldw	r2,-4(fp)
    f520:	10800017 	ldw	r2,0(r2)
    f524:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f528:	e0bffc17 	ldw	r2,-16(fp)
    f52c:	10800090 	cmplti	r2,r2,2
    f530:	1000061e 	bne	r2,zero,f54c <altera_avalon_jtag_uart_ioctl+0x7c>
    f534:	e0fffc17 	ldw	r3,-16(fp)
    f538:	00a00034 	movhi	r2,32768
    f53c:	10bfffc4 	addi	r2,r2,-1
    f540:	18800226 	beq	r3,r2,f54c <altera_avalon_jtag_uart_ioctl+0x7c>
    f544:	e0bffc17 	ldw	r2,-16(fp)
    f548:	00000206 	br	f554 <altera_avalon_jtag_uart_ioctl+0x84>
    f54c:	00a00034 	movhi	r2,32768
    f550:	10bfff84 	addi	r2,r2,-2
    f554:	e0fffd17 	ldw	r3,-12(fp)
    f558:	18800115 	stw	r2,4(r3)
      rc = 0;
    f55c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f560:	00000f06 	br	f5a0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f564:	e0bffd17 	ldw	r2,-12(fp)
    f568:	10c00117 	ldw	r3,4(r2)
    f56c:	00a00034 	movhi	r2,32768
    f570:	10bfffc4 	addi	r2,r2,-1
    f574:	18800c26 	beq	r3,r2,f5a8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f578:	e0bffd17 	ldw	r2,-12(fp)
    f57c:	10c00917 	ldw	r3,36(r2)
    f580:	e0bffd17 	ldw	r2,-12(fp)
    f584:	10800117 	ldw	r2,4(r2)
    f588:	1885803a 	cmpltu	r2,r3,r2
    f58c:	10c03fcc 	andi	r3,r2,255
    f590:	e0bfff17 	ldw	r2,-4(fp)
    f594:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f598:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f59c:	00000206 	br	f5a8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    f5a0:	0001883a 	nop
    f5a4:	00000106 	br	f5ac <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    f5a8:	0001883a 	nop

  default:
    break;
  }

  return rc;
    f5ac:	e0bffb17 	ldw	r2,-20(fp)
}
    f5b0:	e037883a 	mov	sp,fp
    f5b4:	df000017 	ldw	fp,0(sp)
    f5b8:	dec00104 	addi	sp,sp,4
    f5bc:	f800283a 	ret

0000f5c0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f5c0:	defff304 	addi	sp,sp,-52
    f5c4:	dfc00c15 	stw	ra,48(sp)
    f5c8:	df000b15 	stw	fp,44(sp)
    f5cc:	df000b04 	addi	fp,sp,44
    f5d0:	e13ffc15 	stw	r4,-16(fp)
    f5d4:	e17ffd15 	stw	r5,-12(fp)
    f5d8:	e1bffe15 	stw	r6,-8(fp)
    f5dc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    f5e0:	e0bffd17 	ldw	r2,-12(fp)
    f5e4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f5e8:	00004706 	br	f708 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f5ec:	e0bffc17 	ldw	r2,-16(fp)
    f5f0:	10800a17 	ldw	r2,40(r2)
    f5f4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    f5f8:	e0bffc17 	ldw	r2,-16(fp)
    f5fc:	10800b17 	ldw	r2,44(r2)
    f600:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    f604:	e0fff717 	ldw	r3,-36(fp)
    f608:	e0bff817 	ldw	r2,-32(fp)
    f60c:	18800536 	bltu	r3,r2,f624 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    f610:	e0fff717 	ldw	r3,-36(fp)
    f614:	e0bff817 	ldw	r2,-32(fp)
    f618:	1885c83a 	sub	r2,r3,r2
    f61c:	e0bff615 	stw	r2,-40(fp)
    f620:	00000406 	br	f634 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f624:	00c20004 	movi	r3,2048
    f628:	e0bff817 	ldw	r2,-32(fp)
    f62c:	1885c83a 	sub	r2,r3,r2
    f630:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f634:	e0bff617 	ldw	r2,-40(fp)
    f638:	10001e26 	beq	r2,zero,f6b4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    f63c:	e0fffe17 	ldw	r3,-8(fp)
    f640:	e0bff617 	ldw	r2,-40(fp)
    f644:	1880022e 	bgeu	r3,r2,f650 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    f648:	e0bffe17 	ldw	r2,-8(fp)
    f64c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    f650:	e0bffc17 	ldw	r2,-16(fp)
    f654:	10c00e04 	addi	r3,r2,56
    f658:	e0bff817 	ldw	r2,-32(fp)
    f65c:	1885883a 	add	r2,r3,r2
    f660:	e1bff617 	ldw	r6,-40(fp)
    f664:	100b883a 	mov	r5,r2
    f668:	e13ff517 	ldw	r4,-44(fp)
    f66c:	00078f00 	call	78f0 <memcpy>
      ptr   += n;
    f670:	e0fff517 	ldw	r3,-44(fp)
    f674:	e0bff617 	ldw	r2,-40(fp)
    f678:	1885883a 	add	r2,r3,r2
    f67c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    f680:	e0fffe17 	ldw	r3,-8(fp)
    f684:	e0bff617 	ldw	r2,-40(fp)
    f688:	1885c83a 	sub	r2,r3,r2
    f68c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f690:	e0fff817 	ldw	r3,-32(fp)
    f694:	e0bff617 	ldw	r2,-40(fp)
    f698:	1885883a 	add	r2,r3,r2
    f69c:	10c1ffcc 	andi	r3,r2,2047
    f6a0:	e0bffc17 	ldw	r2,-16(fp)
    f6a4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    f6a8:	e0bffe17 	ldw	r2,-8(fp)
    f6ac:	00bfcf16 	blt	zero,r2,f5ec <__alt_data_end+0xff00f5ec>
    f6b0:	00000106 	br	f6b8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    f6b4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    f6b8:	e0fff517 	ldw	r3,-44(fp)
    f6bc:	e0bffd17 	ldw	r2,-12(fp)
    f6c0:	1880141e 	bne	r3,r2,f714 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f6c4:	e0bfff17 	ldw	r2,-4(fp)
    f6c8:	1090000c 	andi	r2,r2,16384
    f6cc:	1000131e 	bne	r2,zero,f71c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f6d0:	0001883a 	nop
    f6d4:	e0bffc17 	ldw	r2,-16(fp)
    f6d8:	10c00a17 	ldw	r3,40(r2)
    f6dc:	e0bff717 	ldw	r2,-36(fp)
    f6e0:	1880051e 	bne	r3,r2,f6f8 <altera_avalon_jtag_uart_read+0x138>
    f6e4:	e0bffc17 	ldw	r2,-16(fp)
    f6e8:	10c00917 	ldw	r3,36(r2)
    f6ec:	e0bffc17 	ldw	r2,-16(fp)
    f6f0:	10800117 	ldw	r2,4(r2)
    f6f4:	18bff736 	bltu	r3,r2,f6d4 <__alt_data_end+0xff00f6d4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f6f8:	e0bffc17 	ldw	r2,-16(fp)
    f6fc:	10c00a17 	ldw	r3,40(r2)
    f700:	e0bff717 	ldw	r2,-36(fp)
    f704:	18800726 	beq	r3,r2,f724 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f708:	e0bffe17 	ldw	r2,-8(fp)
    f70c:	00bfb716 	blt	zero,r2,f5ec <__alt_data_end+0xff00f5ec>
    f710:	00000506 	br	f728 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    f714:	0001883a 	nop
    f718:	00000306 	br	f728 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    f71c:	0001883a 	nop
    f720:	00000106 	br	f728 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    f724:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    f728:	e0fff517 	ldw	r3,-44(fp)
    f72c:	e0bffd17 	ldw	r2,-12(fp)
    f730:	18801826 	beq	r3,r2,f794 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f734:	0005303a 	rdctl	r2,status
    f738:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f73c:	e0fffb17 	ldw	r3,-20(fp)
    f740:	00bfff84 	movi	r2,-2
    f744:	1884703a 	and	r2,r3,r2
    f748:	1001703a 	wrctl	status,r2
  
  return context;
    f74c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    f750:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f754:	e0bffc17 	ldw	r2,-16(fp)
    f758:	10800817 	ldw	r2,32(r2)
    f75c:	10c00054 	ori	r3,r2,1
    f760:	e0bffc17 	ldw	r2,-16(fp)
    f764:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f768:	e0bffc17 	ldw	r2,-16(fp)
    f76c:	10800017 	ldw	r2,0(r2)
    f770:	10800104 	addi	r2,r2,4
    f774:	1007883a 	mov	r3,r2
    f778:	e0bffc17 	ldw	r2,-16(fp)
    f77c:	10800817 	ldw	r2,32(r2)
    f780:	18800035 	stwio	r2,0(r3)
    f784:	e0bffa17 	ldw	r2,-24(fp)
    f788:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f78c:	e0bff917 	ldw	r2,-28(fp)
    f790:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    f794:	e0fff517 	ldw	r3,-44(fp)
    f798:	e0bffd17 	ldw	r2,-12(fp)
    f79c:	18800426 	beq	r3,r2,f7b0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    f7a0:	e0fff517 	ldw	r3,-44(fp)
    f7a4:	e0bffd17 	ldw	r2,-12(fp)
    f7a8:	1885c83a 	sub	r2,r3,r2
    f7ac:	00000606 	br	f7c8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    f7b0:	e0bfff17 	ldw	r2,-4(fp)
    f7b4:	1090000c 	andi	r2,r2,16384
    f7b8:	10000226 	beq	r2,zero,f7c4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    f7bc:	00bffd44 	movi	r2,-11
    f7c0:	00000106 	br	f7c8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    f7c4:	00bffec4 	movi	r2,-5
}
    f7c8:	e037883a 	mov	sp,fp
    f7cc:	dfc00117 	ldw	ra,4(sp)
    f7d0:	df000017 	ldw	fp,0(sp)
    f7d4:	dec00204 	addi	sp,sp,8
    f7d8:	f800283a 	ret

0000f7dc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f7dc:	defff304 	addi	sp,sp,-52
    f7e0:	dfc00c15 	stw	ra,48(sp)
    f7e4:	df000b15 	stw	fp,44(sp)
    f7e8:	df000b04 	addi	fp,sp,44
    f7ec:	e13ffc15 	stw	r4,-16(fp)
    f7f0:	e17ffd15 	stw	r5,-12(fp)
    f7f4:	e1bffe15 	stw	r6,-8(fp)
    f7f8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    f7fc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    f800:	e0bffd17 	ldw	r2,-12(fp)
    f804:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f808:	00003706 	br	f8e8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f80c:	e0bffc17 	ldw	r2,-16(fp)
    f810:	10800c17 	ldw	r2,48(r2)
    f814:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    f818:	e0bffc17 	ldw	r2,-16(fp)
    f81c:	10800d17 	ldw	r2,52(r2)
    f820:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    f824:	e0fff917 	ldw	r3,-28(fp)
    f828:	e0bff517 	ldw	r2,-44(fp)
    f82c:	1880062e 	bgeu	r3,r2,f848 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    f830:	e0fff517 	ldw	r3,-44(fp)
    f834:	e0bff917 	ldw	r2,-28(fp)
    f838:	1885c83a 	sub	r2,r3,r2
    f83c:	10bfffc4 	addi	r2,r2,-1
    f840:	e0bff615 	stw	r2,-40(fp)
    f844:	00000b06 	br	f874 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    f848:	e0bff517 	ldw	r2,-44(fp)
    f84c:	10000526 	beq	r2,zero,f864 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f850:	00c20004 	movi	r3,2048
    f854:	e0bff917 	ldw	r2,-28(fp)
    f858:	1885c83a 	sub	r2,r3,r2
    f85c:	e0bff615 	stw	r2,-40(fp)
    f860:	00000406 	br	f874 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f864:	00c1ffc4 	movi	r3,2047
    f868:	e0bff917 	ldw	r2,-28(fp)
    f86c:	1885c83a 	sub	r2,r3,r2
    f870:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f874:	e0bff617 	ldw	r2,-40(fp)
    f878:	10001e26 	beq	r2,zero,f8f4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    f87c:	e0fffe17 	ldw	r3,-8(fp)
    f880:	e0bff617 	ldw	r2,-40(fp)
    f884:	1880022e 	bgeu	r3,r2,f890 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    f888:	e0bffe17 	ldw	r2,-8(fp)
    f88c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    f890:	e0bffc17 	ldw	r2,-16(fp)
    f894:	10c20e04 	addi	r3,r2,2104
    f898:	e0bff917 	ldw	r2,-28(fp)
    f89c:	1885883a 	add	r2,r3,r2
    f8a0:	e1bff617 	ldw	r6,-40(fp)
    f8a4:	e17ffd17 	ldw	r5,-12(fp)
    f8a8:	1009883a 	mov	r4,r2
    f8ac:	00078f00 	call	78f0 <memcpy>
      ptr   += n;
    f8b0:	e0fffd17 	ldw	r3,-12(fp)
    f8b4:	e0bff617 	ldw	r2,-40(fp)
    f8b8:	1885883a 	add	r2,r3,r2
    f8bc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    f8c0:	e0fffe17 	ldw	r3,-8(fp)
    f8c4:	e0bff617 	ldw	r2,-40(fp)
    f8c8:	1885c83a 	sub	r2,r3,r2
    f8cc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f8d0:	e0fff917 	ldw	r3,-28(fp)
    f8d4:	e0bff617 	ldw	r2,-40(fp)
    f8d8:	1885883a 	add	r2,r3,r2
    f8dc:	10c1ffcc 	andi	r3,r2,2047
    f8e0:	e0bffc17 	ldw	r2,-16(fp)
    f8e4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f8e8:	e0bffe17 	ldw	r2,-8(fp)
    f8ec:	00bfc716 	blt	zero,r2,f80c <__alt_data_end+0xff00f80c>
    f8f0:	00000106 	br	f8f8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    f8f4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f8f8:	0005303a 	rdctl	r2,status
    f8fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f900:	e0fffb17 	ldw	r3,-20(fp)
    f904:	00bfff84 	movi	r2,-2
    f908:	1884703a 	and	r2,r3,r2
    f90c:	1001703a 	wrctl	status,r2
  
  return context;
    f910:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    f914:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f918:	e0bffc17 	ldw	r2,-16(fp)
    f91c:	10800817 	ldw	r2,32(r2)
    f920:	10c00094 	ori	r3,r2,2
    f924:	e0bffc17 	ldw	r2,-16(fp)
    f928:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f92c:	e0bffc17 	ldw	r2,-16(fp)
    f930:	10800017 	ldw	r2,0(r2)
    f934:	10800104 	addi	r2,r2,4
    f938:	1007883a 	mov	r3,r2
    f93c:	e0bffc17 	ldw	r2,-16(fp)
    f940:	10800817 	ldw	r2,32(r2)
    f944:	18800035 	stwio	r2,0(r3)
    f948:	e0bffa17 	ldw	r2,-24(fp)
    f94c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f950:	e0bff817 	ldw	r2,-32(fp)
    f954:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f958:	e0bffe17 	ldw	r2,-8(fp)
    f95c:	0080100e 	bge	zero,r2,f9a0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    f960:	e0bfff17 	ldw	r2,-4(fp)
    f964:	1090000c 	andi	r2,r2,16384
    f968:	1000101e 	bne	r2,zero,f9ac <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f96c:	0001883a 	nop
    f970:	e0bffc17 	ldw	r2,-16(fp)
    f974:	10c00d17 	ldw	r3,52(r2)
    f978:	e0bff517 	ldw	r2,-44(fp)
    f97c:	1880051e 	bne	r3,r2,f994 <altera_avalon_jtag_uart_write+0x1b8>
    f980:	e0bffc17 	ldw	r2,-16(fp)
    f984:	10c00917 	ldw	r3,36(r2)
    f988:	e0bffc17 	ldw	r2,-16(fp)
    f98c:	10800117 	ldw	r2,4(r2)
    f990:	18bff736 	bltu	r3,r2,f970 <__alt_data_end+0xff00f970>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f994:	e0bffc17 	ldw	r2,-16(fp)
    f998:	10800917 	ldw	r2,36(r2)
    f99c:	1000051e 	bne	r2,zero,f9b4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    f9a0:	e0bffe17 	ldw	r2,-8(fp)
    f9a4:	00bfd016 	blt	zero,r2,f8e8 <__alt_data_end+0xff00f8e8>
    f9a8:	00000306 	br	f9b8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    f9ac:	0001883a 	nop
    f9b0:	00000106 	br	f9b8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    f9b4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f9b8:	e0fffd17 	ldw	r3,-12(fp)
    f9bc:	e0bff717 	ldw	r2,-36(fp)
    f9c0:	18800426 	beq	r3,r2,f9d4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    f9c4:	e0fffd17 	ldw	r3,-12(fp)
    f9c8:	e0bff717 	ldw	r2,-36(fp)
    f9cc:	1885c83a 	sub	r2,r3,r2
    f9d0:	00000606 	br	f9ec <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    f9d4:	e0bfff17 	ldw	r2,-4(fp)
    f9d8:	1090000c 	andi	r2,r2,16384
    f9dc:	10000226 	beq	r2,zero,f9e8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    f9e0:	00bffd44 	movi	r2,-11
    f9e4:	00000106 	br	f9ec <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f9e8:	00bffec4 	movi	r2,-5
}
    f9ec:	e037883a 	mov	sp,fp
    f9f0:	dfc00117 	ldw	ra,4(sp)
    f9f4:	df000017 	ldw	fp,0(sp)
    f9f8:	dec00204 	addi	sp,sp,8
    f9fc:	f800283a 	ret

0000fa00 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    fa00:	defffa04 	addi	sp,sp,-24
    fa04:	dfc00515 	stw	ra,20(sp)
    fa08:	df000415 	stw	fp,16(sp)
    fa0c:	df000404 	addi	fp,sp,16
    fa10:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    fa14:	0007883a 	mov	r3,zero
    fa18:	e0bfff17 	ldw	r2,-4(fp)
    fa1c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    fa20:	e0bfff17 	ldw	r2,-4(fp)
    fa24:	10800104 	addi	r2,r2,4
    fa28:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fa2c:	0005303a 	rdctl	r2,status
    fa30:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa34:	e0fffd17 	ldw	r3,-12(fp)
    fa38:	00bfff84 	movi	r2,-2
    fa3c:	1884703a 	and	r2,r3,r2
    fa40:	1001703a 	wrctl	status,r2
  
  return context;
    fa44:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    fa48:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    fa4c:	00107540 	call	10754 <alt_tick>
    fa50:	e0bffc17 	ldw	r2,-16(fp)
    fa54:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa58:	e0bffe17 	ldw	r2,-8(fp)
    fa5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    fa60:	0001883a 	nop
    fa64:	e037883a 	mov	sp,fp
    fa68:	dfc00117 	ldw	ra,4(sp)
    fa6c:	df000017 	ldw	fp,0(sp)
    fa70:	dec00204 	addi	sp,sp,8
    fa74:	f800283a 	ret

0000fa78 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    fa78:	defff804 	addi	sp,sp,-32
    fa7c:	dfc00715 	stw	ra,28(sp)
    fa80:	df000615 	stw	fp,24(sp)
    fa84:	df000604 	addi	fp,sp,24
    fa88:	e13ffc15 	stw	r4,-16(fp)
    fa8c:	e17ffd15 	stw	r5,-12(fp)
    fa90:	e1bffe15 	stw	r6,-8(fp)
    fa94:	e1ffff15 	stw	r7,-4(fp)
    fa98:	e0bfff17 	ldw	r2,-4(fp)
    fa9c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    faa0:	d0a6e217 	ldw	r2,-25720(gp)
    faa4:	1000021e 	bne	r2,zero,fab0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    faa8:	e0bffb17 	ldw	r2,-20(fp)
    faac:	d0a6e215 	stw	r2,-25720(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    fab0:	e0bffc17 	ldw	r2,-16(fp)
    fab4:	10800104 	addi	r2,r2,4
    fab8:	00c001c4 	movi	r3,7
    fabc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    fac0:	d8000015 	stw	zero,0(sp)
    fac4:	e1fffc17 	ldw	r7,-16(fp)
    fac8:	01800074 	movhi	r6,1
    facc:	31be8004 	addi	r6,r6,-1536
    fad0:	e17ffe17 	ldw	r5,-8(fp)
    fad4:	e13ffd17 	ldw	r4,-12(fp)
    fad8:	00100840 	call	10084 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    fadc:	0001883a 	nop
    fae0:	e037883a 	mov	sp,fp
    fae4:	dfc00117 	ldw	ra,4(sp)
    fae8:	df000017 	ldw	fp,0(sp)
    faec:	dec00204 	addi	sp,sp,8
    faf0:	f800283a 	ret

0000faf4 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    faf4:	defffe04 	addi	sp,sp,-8
    faf8:	df000115 	stw	fp,4(sp)
    fafc:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
    fb00:	d0a6df17 	ldw	r2,-25732(gp)
    fb04:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
    fb08:	d0a6e017 	ldw	r2,-25728(gp)
    fb0c:	1000021e 	bne	r2,zero,fb18 <alt_timestamp_start+0x24>
  {
    return -1;
    fb10:	00bfffc4 	movi	r2,-1
    fb14:	00001106 	br	fb5c <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    fb18:	e0bfff17 	ldw	r2,-4(fp)
    fb1c:	10800104 	addi	r2,r2,4
    fb20:	00c00204 	movi	r3,8
    fb24:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    fb28:	e0bfff17 	ldw	r2,-4(fp)
    fb2c:	10800204 	addi	r2,r2,8
    fb30:	00ffffd4 	movui	r3,65535
    fb34:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    fb38:	e0bfff17 	ldw	r2,-4(fp)
    fb3c:	10800304 	addi	r2,r2,12
    fb40:	00ffffd4 	movui	r3,65535
    fb44:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    fb48:	e0bfff17 	ldw	r2,-4(fp)
    fb4c:	10800104 	addi	r2,r2,4
    fb50:	00c00104 	movi	r3,4
    fb54:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
    fb58:	0005883a 	mov	r2,zero
}
    fb5c:	e037883a 	mov	sp,fp
    fb60:	df000017 	ldw	fp,0(sp)
    fb64:	dec00104 	addi	sp,sp,4
    fb68:	f800283a 	ret

0000fb6c <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    fb6c:	defffc04 	addi	sp,sp,-16
    fb70:	df000315 	stw	fp,12(sp)
    fb74:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
    fb78:	d0a6df17 	ldw	r2,-25732(gp)
    fb7c:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
    fb80:	d0a6e017 	ldw	r2,-25728(gp)
    fb84:	1000021e 	bne	r2,zero,fb90 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    fb88:	00bfffc4 	movi	r2,-1
    fb8c:	00001306 	br	fbdc <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    fb90:	e0bffd17 	ldw	r2,-12(fp)
    fb94:	10800404 	addi	r2,r2,16
    fb98:	0007883a 	mov	r3,zero
    fb9c:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    fba0:	e0bffd17 	ldw	r2,-12(fp)
    fba4:	10800404 	addi	r2,r2,16
    fba8:	10800037 	ldwio	r2,0(r2)
    fbac:	10bfffcc 	andi	r2,r2,65535
    fbb0:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    fbb4:	e0bffd17 	ldw	r2,-12(fp)
    fbb8:	10800504 	addi	r2,r2,20
    fbbc:	10800037 	ldwio	r2,0(r2)
    fbc0:	10bfffcc 	andi	r2,r2,65535
    fbc4:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    fbc8:	e0bfff17 	ldw	r2,-4(fp)
    fbcc:	1006943a 	slli	r3,r2,16
    fbd0:	e0bffe17 	ldw	r2,-8(fp)
    fbd4:	1884b03a 	or	r2,r3,r2
    fbd8:	0084303a 	nor	r2,zero,r2
#endif
  }
}
    fbdc:	e037883a 	mov	sp,fp
    fbe0:	df000017 	ldw	fp,0(sp)
    fbe4:	dec00104 	addi	sp,sp,4
    fbe8:	f800283a 	ret

0000fbec <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    fbec:	deffff04 	addi	sp,sp,-4
    fbf0:	df000015 	stw	fp,0(sp)
    fbf4:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    fbf8:	d0a6e017 	ldw	r2,-25728(gp)
}
    fbfc:	e037883a 	mov	sp,fp
    fc00:	df000017 	ldw	fp,0(sp)
    fc04:	dec00104 	addi	sp,sp,4
    fc08:	f800283a 	ret

0000fc0c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    fc0c:	defff504 	addi	sp,sp,-44
    fc10:	df000a15 	stw	fp,40(sp)
    fc14:	df000a04 	addi	fp,sp,40
    fc18:	e13ffc15 	stw	r4,-16(fp)
    fc1c:	e17ffd15 	stw	r5,-12(fp)
    fc20:	e1bffe15 	stw	r6,-8(fp)
    fc24:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    fc28:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    fc2c:	d0a6e217 	ldw	r2,-25720(gp)
  
  if (alt_ticks_per_second ())
    fc30:	10003c26 	beq	r2,zero,fd24 <alt_alarm_start+0x118>
  {
    if (alarm)
    fc34:	e0bffc17 	ldw	r2,-16(fp)
    fc38:	10003826 	beq	r2,zero,fd1c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    fc3c:	e0bffc17 	ldw	r2,-16(fp)
    fc40:	e0fffe17 	ldw	r3,-8(fp)
    fc44:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    fc48:	e0bffc17 	ldw	r2,-16(fp)
    fc4c:	e0ffff17 	ldw	r3,-4(fp)
    fc50:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc54:	0005303a 	rdctl	r2,status
    fc58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc5c:	e0fff917 	ldw	r3,-28(fp)
    fc60:	00bfff84 	movi	r2,-2
    fc64:	1884703a 	and	r2,r3,r2
    fc68:	1001703a 	wrctl	status,r2
  
  return context;
    fc6c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    fc70:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    fc74:	d0a6e317 	ldw	r2,-25716(gp)
      
      current_nticks = alt_nticks();
    fc78:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    fc7c:	e0fffd17 	ldw	r3,-12(fp)
    fc80:	e0bff617 	ldw	r2,-40(fp)
    fc84:	1885883a 	add	r2,r3,r2
    fc88:	10c00044 	addi	r3,r2,1
    fc8c:	e0bffc17 	ldw	r2,-16(fp)
    fc90:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    fc94:	e0bffc17 	ldw	r2,-16(fp)
    fc98:	10c00217 	ldw	r3,8(r2)
    fc9c:	e0bff617 	ldw	r2,-40(fp)
    fca0:	1880042e 	bgeu	r3,r2,fcb4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    fca4:	e0bffc17 	ldw	r2,-16(fp)
    fca8:	00c00044 	movi	r3,1
    fcac:	10c00405 	stb	r3,16(r2)
    fcb0:	00000206 	br	fcbc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    fcb4:	e0bffc17 	ldw	r2,-16(fp)
    fcb8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    fcbc:	e0bffc17 	ldw	r2,-16(fp)
    fcc0:	d0e00e04 	addi	r3,gp,-32712
    fcc4:	e0fffa15 	stw	r3,-24(fp)
    fcc8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fccc:	e0bffb17 	ldw	r2,-20(fp)
    fcd0:	e0fffa17 	ldw	r3,-24(fp)
    fcd4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fcd8:	e0bffa17 	ldw	r2,-24(fp)
    fcdc:	10c00017 	ldw	r3,0(r2)
    fce0:	e0bffb17 	ldw	r2,-20(fp)
    fce4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fce8:	e0bffa17 	ldw	r2,-24(fp)
    fcec:	10800017 	ldw	r2,0(r2)
    fcf0:	e0fffb17 	ldw	r3,-20(fp)
    fcf4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fcf8:	e0bffa17 	ldw	r2,-24(fp)
    fcfc:	e0fffb17 	ldw	r3,-20(fp)
    fd00:	10c00015 	stw	r3,0(r2)
    fd04:	e0bff817 	ldw	r2,-32(fp)
    fd08:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd0c:	e0bff717 	ldw	r2,-36(fp)
    fd10:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    fd14:	0005883a 	mov	r2,zero
    fd18:	00000306 	br	fd28 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    fd1c:	00bffa84 	movi	r2,-22
    fd20:	00000106 	br	fd28 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    fd24:	00bfde84 	movi	r2,-134
  }
}
    fd28:	e037883a 	mov	sp,fp
    fd2c:	df000017 	ldw	fp,0(sp)
    fd30:	dec00104 	addi	sp,sp,4
    fd34:	f800283a 	ret

0000fd38 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    fd38:	defffa04 	addi	sp,sp,-24
    fd3c:	dfc00515 	stw	ra,20(sp)
    fd40:	df000415 	stw	fp,16(sp)
    fd44:	df000404 	addi	fp,sp,16
    fd48:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    fd4c:	008000c4 	movi	r2,3
    fd50:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    fd54:	e0fffd17 	ldw	r3,-12(fp)
    fd58:	008003f4 	movhi	r2,15
    fd5c:	10909004 	addi	r2,r2,16960
    fd60:	1885383a 	mul	r2,r3,r2
    fd64:	100b883a 	mov	r5,r2
    fd68:	0100bef4 	movhi	r4,763
    fd6c:	213c2004 	addi	r4,r4,-3968
    fd70:	0001cec0 	call	1cec <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    fd74:	100b883a 	mov	r5,r2
    fd78:	01200034 	movhi	r4,32768
    fd7c:	213fffc4 	addi	r4,r4,-1
    fd80:	0001cec0 	call	1cec <__udivsi3>
    fd84:	100b883a 	mov	r5,r2
    fd88:	e13fff17 	ldw	r4,-4(fp)
    fd8c:	0001cec0 	call	1cec <__udivsi3>
    fd90:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    fd94:	e0bffe17 	ldw	r2,-8(fp)
    fd98:	10002a26 	beq	r2,zero,fe44 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    fd9c:	e03ffc15 	stw	zero,-16(fp)
    fda0:	00001706 	br	fe00 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    fda4:	00a00034 	movhi	r2,32768
    fda8:	10bfffc4 	addi	r2,r2,-1
    fdac:	10bfffc4 	addi	r2,r2,-1
    fdb0:	103ffe1e 	bne	r2,zero,fdac <__alt_data_end+0xff00fdac>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    fdb4:	e0fffd17 	ldw	r3,-12(fp)
    fdb8:	008003f4 	movhi	r2,15
    fdbc:	10909004 	addi	r2,r2,16960
    fdc0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    fdc4:	100b883a 	mov	r5,r2
    fdc8:	0100bef4 	movhi	r4,763
    fdcc:	213c2004 	addi	r4,r4,-3968
    fdd0:	0001cec0 	call	1cec <__udivsi3>
    fdd4:	100b883a 	mov	r5,r2
    fdd8:	01200034 	movhi	r4,32768
    fddc:	213fffc4 	addi	r4,r4,-1
    fde0:	0001cec0 	call	1cec <__udivsi3>
    fde4:	1007883a 	mov	r3,r2
    fde8:	e0bfff17 	ldw	r2,-4(fp)
    fdec:	10c5c83a 	sub	r2,r2,r3
    fdf0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    fdf4:	e0bffc17 	ldw	r2,-16(fp)
    fdf8:	10800044 	addi	r2,r2,1
    fdfc:	e0bffc15 	stw	r2,-16(fp)
    fe00:	e0fffc17 	ldw	r3,-16(fp)
    fe04:	e0bffe17 	ldw	r2,-8(fp)
    fe08:	18bfe616 	blt	r3,r2,fda4 <__alt_data_end+0xff00fda4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fe0c:	e0fffd17 	ldw	r3,-12(fp)
    fe10:	008003f4 	movhi	r2,15
    fe14:	10909004 	addi	r2,r2,16960
    fe18:	1885383a 	mul	r2,r3,r2
    fe1c:	100b883a 	mov	r5,r2
    fe20:	0100bef4 	movhi	r4,763
    fe24:	213c2004 	addi	r4,r4,-3968
    fe28:	0001cec0 	call	1cec <__udivsi3>
    fe2c:	1007883a 	mov	r3,r2
    fe30:	e0bfff17 	ldw	r2,-4(fp)
    fe34:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    fe38:	10bfffc4 	addi	r2,r2,-1
    fe3c:	103ffe1e 	bne	r2,zero,fe38 <__alt_data_end+0xff00fe38>
    fe40:	00000d06 	br	fe78 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fe44:	e0fffd17 	ldw	r3,-12(fp)
    fe48:	008003f4 	movhi	r2,15
    fe4c:	10909004 	addi	r2,r2,16960
    fe50:	1885383a 	mul	r2,r3,r2
    fe54:	100b883a 	mov	r5,r2
    fe58:	0100bef4 	movhi	r4,763
    fe5c:	213c2004 	addi	r4,r4,-3968
    fe60:	0001cec0 	call	1cec <__udivsi3>
    fe64:	1007883a 	mov	r3,r2
    fe68:	e0bfff17 	ldw	r2,-4(fp)
    fe6c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    fe70:	10bfffc4 	addi	r2,r2,-1
    fe74:	00bffe16 	blt	zero,r2,fe70 <__alt_data_end+0xff00fe70>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    fe78:	0005883a 	mov	r2,zero
}
    fe7c:	e037883a 	mov	sp,fp
    fe80:	dfc00117 	ldw	ra,4(sp)
    fe84:	df000017 	ldw	fp,0(sp)
    fe88:	dec00204 	addi	sp,sp,8
    fe8c:	f800283a 	ret

0000fe90 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    fe90:	deffff04 	addi	sp,sp,-4
    fe94:	df000015 	stw	fp,0(sp)
    fe98:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    fe9c:	0001883a 	nop
    fea0:	e037883a 	mov	sp,fp
    fea4:	df000017 	ldw	fp,0(sp)
    fea8:	dec00104 	addi	sp,sp,4
    feac:	f800283a 	ret

0000feb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    feb0:	defffe04 	addi	sp,sp,-8
    feb4:	dfc00115 	stw	ra,4(sp)
    feb8:	df000015 	stw	fp,0(sp)
    febc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fec0:	d0a00b17 	ldw	r2,-32724(gp)
    fec4:	10000326 	beq	r2,zero,fed4 <alt_get_errno+0x24>
    fec8:	d0a00b17 	ldw	r2,-32724(gp)
    fecc:	103ee83a 	callr	r2
    fed0:	00000106 	br	fed8 <alt_get_errno+0x28>
    fed4:	d0a6d804 	addi	r2,gp,-25760
}
    fed8:	e037883a 	mov	sp,fp
    fedc:	dfc00117 	ldw	ra,4(sp)
    fee0:	df000017 	ldw	fp,0(sp)
    fee4:	dec00204 	addi	sp,sp,8
    fee8:	f800283a 	ret

0000feec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    feec:	defffa04 	addi	sp,sp,-24
    fef0:	dfc00515 	stw	ra,20(sp)
    fef4:	df000415 	stw	fp,16(sp)
    fef8:	df000404 	addi	fp,sp,16
    fefc:	e13ffe15 	stw	r4,-8(fp)
    ff00:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    ff04:	e0bffe17 	ldw	r2,-8(fp)
    ff08:	10000326 	beq	r2,zero,ff18 <alt_dev_llist_insert+0x2c>
    ff0c:	e0bffe17 	ldw	r2,-8(fp)
    ff10:	10800217 	ldw	r2,8(r2)
    ff14:	1000061e 	bne	r2,zero,ff30 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    ff18:	000feb00 	call	feb0 <alt_get_errno>
    ff1c:	1007883a 	mov	r3,r2
    ff20:	00800584 	movi	r2,22
    ff24:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    ff28:	00bffa84 	movi	r2,-22
    ff2c:	00001306 	br	ff7c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    ff30:	e0bffe17 	ldw	r2,-8(fp)
    ff34:	e0ffff17 	ldw	r3,-4(fp)
    ff38:	e0fffc15 	stw	r3,-16(fp)
    ff3c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ff40:	e0bffd17 	ldw	r2,-12(fp)
    ff44:	e0fffc17 	ldw	r3,-16(fp)
    ff48:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ff4c:	e0bffc17 	ldw	r2,-16(fp)
    ff50:	10c00017 	ldw	r3,0(r2)
    ff54:	e0bffd17 	ldw	r2,-12(fp)
    ff58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    ff5c:	e0bffc17 	ldw	r2,-16(fp)
    ff60:	10800017 	ldw	r2,0(r2)
    ff64:	e0fffd17 	ldw	r3,-12(fp)
    ff68:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    ff6c:	e0bffc17 	ldw	r2,-16(fp)
    ff70:	e0fffd17 	ldw	r3,-12(fp)
    ff74:	10c00015 	stw	r3,0(r2)

  return 0;  
    ff78:	0005883a 	mov	r2,zero
}
    ff7c:	e037883a 	mov	sp,fp
    ff80:	dfc00117 	ldw	ra,4(sp)
    ff84:	df000017 	ldw	fp,0(sp)
    ff88:	dec00204 	addi	sp,sp,8
    ff8c:	f800283a 	ret

0000ff90 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    ff90:	defffd04 	addi	sp,sp,-12
    ff94:	dfc00215 	stw	ra,8(sp)
    ff98:	df000115 	stw	fp,4(sp)
    ff9c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ffa0:	00800074 	movhi	r2,1
    ffa4:	1083de04 	addi	r2,r2,3960
    ffa8:	e0bfff15 	stw	r2,-4(fp)
    ffac:	00000606 	br	ffc8 <_do_ctors+0x38>
        (*ctor) (); 
    ffb0:	e0bfff17 	ldw	r2,-4(fp)
    ffb4:	10800017 	ldw	r2,0(r2)
    ffb8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ffbc:	e0bfff17 	ldw	r2,-4(fp)
    ffc0:	10bfff04 	addi	r2,r2,-4
    ffc4:	e0bfff15 	stw	r2,-4(fp)
    ffc8:	e0ffff17 	ldw	r3,-4(fp)
    ffcc:	00800074 	movhi	r2,1
    ffd0:	1083df04 	addi	r2,r2,3964
    ffd4:	18bff62e 	bgeu	r3,r2,ffb0 <__alt_data_end+0xff00ffb0>
        (*ctor) (); 
}
    ffd8:	0001883a 	nop
    ffdc:	e037883a 	mov	sp,fp
    ffe0:	dfc00117 	ldw	ra,4(sp)
    ffe4:	df000017 	ldw	fp,0(sp)
    ffe8:	dec00204 	addi	sp,sp,8
    ffec:	f800283a 	ret

0000fff0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    fff0:	defffd04 	addi	sp,sp,-12
    fff4:	dfc00215 	stw	ra,8(sp)
    fff8:	df000115 	stw	fp,4(sp)
    fffc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10000:	00800074 	movhi	r2,1
   10004:	1083de04 	addi	r2,r2,3960
   10008:	e0bfff15 	stw	r2,-4(fp)
   1000c:	00000606 	br	10028 <_do_dtors+0x38>
        (*dtor) (); 
   10010:	e0bfff17 	ldw	r2,-4(fp)
   10014:	10800017 	ldw	r2,0(r2)
   10018:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1001c:	e0bfff17 	ldw	r2,-4(fp)
   10020:	10bfff04 	addi	r2,r2,-4
   10024:	e0bfff15 	stw	r2,-4(fp)
   10028:	e0ffff17 	ldw	r3,-4(fp)
   1002c:	00800074 	movhi	r2,1
   10030:	1083df04 	addi	r2,r2,3964
   10034:	18bff62e 	bgeu	r3,r2,10010 <__alt_data_end+0xff010010>
        (*dtor) (); 
}
   10038:	0001883a 	nop
   1003c:	e037883a 	mov	sp,fp
   10040:	dfc00117 	ldw	ra,4(sp)
   10044:	df000017 	ldw	fp,0(sp)
   10048:	dec00204 	addi	sp,sp,8
   1004c:	f800283a 	ret

00010050 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10050:	defffe04 	addi	sp,sp,-8
   10054:	dfc00115 	stw	ra,4(sp)
   10058:	df000015 	stw	fp,0(sp)
   1005c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10060:	01440004 	movi	r5,4096
   10064:	0009883a 	mov	r4,zero
   10068:	0010abc0 	call	10abc <alt_icache_flush>
#endif
}
   1006c:	0001883a 	nop
   10070:	e037883a 	mov	sp,fp
   10074:	dfc00117 	ldw	ra,4(sp)
   10078:	df000017 	ldw	fp,0(sp)
   1007c:	dec00204 	addi	sp,sp,8
   10080:	f800283a 	ret

00010084 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10084:	defff904 	addi	sp,sp,-28
   10088:	dfc00615 	stw	ra,24(sp)
   1008c:	df000515 	stw	fp,20(sp)
   10090:	df000504 	addi	fp,sp,20
   10094:	e13ffc15 	stw	r4,-16(fp)
   10098:	e17ffd15 	stw	r5,-12(fp)
   1009c:	e1bffe15 	stw	r6,-8(fp)
   100a0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   100a4:	e0800217 	ldw	r2,8(fp)
   100a8:	d8800015 	stw	r2,0(sp)
   100ac:	e1ffff17 	ldw	r7,-4(fp)
   100b0:	e1bffe17 	ldw	r6,-8(fp)
   100b4:	e17ffd17 	ldw	r5,-12(fp)
   100b8:	e13ffc17 	ldw	r4,-16(fp)
   100bc:	00102340 	call	10234 <alt_iic_isr_register>
}  
   100c0:	e037883a 	mov	sp,fp
   100c4:	dfc00117 	ldw	ra,4(sp)
   100c8:	df000017 	ldw	fp,0(sp)
   100cc:	dec00204 	addi	sp,sp,8
   100d0:	f800283a 	ret

000100d4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   100d4:	defff904 	addi	sp,sp,-28
   100d8:	df000615 	stw	fp,24(sp)
   100dc:	df000604 	addi	fp,sp,24
   100e0:	e13ffe15 	stw	r4,-8(fp)
   100e4:	e17fff15 	stw	r5,-4(fp)
   100e8:	e0bfff17 	ldw	r2,-4(fp)
   100ec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   100f0:	0005303a 	rdctl	r2,status
   100f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   100f8:	e0fffb17 	ldw	r3,-20(fp)
   100fc:	00bfff84 	movi	r2,-2
   10100:	1884703a 	and	r2,r3,r2
   10104:	1001703a 	wrctl	status,r2
  
  return context;
   10108:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1010c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10110:	00c00044 	movi	r3,1
   10114:	e0bffa17 	ldw	r2,-24(fp)
   10118:	1884983a 	sll	r2,r3,r2
   1011c:	1007883a 	mov	r3,r2
   10120:	d0a6e117 	ldw	r2,-25724(gp)
   10124:	1884b03a 	or	r2,r3,r2
   10128:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1012c:	d0a6e117 	ldw	r2,-25724(gp)
   10130:	100170fa 	wrctl	ienable,r2
   10134:	e0bffc17 	ldw	r2,-16(fp)
   10138:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1013c:	e0bffd17 	ldw	r2,-12(fp)
   10140:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10144:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10148:	0001883a 	nop
}
   1014c:	e037883a 	mov	sp,fp
   10150:	df000017 	ldw	fp,0(sp)
   10154:	dec00104 	addi	sp,sp,4
   10158:	f800283a 	ret

0001015c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1015c:	defff904 	addi	sp,sp,-28
   10160:	df000615 	stw	fp,24(sp)
   10164:	df000604 	addi	fp,sp,24
   10168:	e13ffe15 	stw	r4,-8(fp)
   1016c:	e17fff15 	stw	r5,-4(fp)
   10170:	e0bfff17 	ldw	r2,-4(fp)
   10174:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10178:	0005303a 	rdctl	r2,status
   1017c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10180:	e0fffb17 	ldw	r3,-20(fp)
   10184:	00bfff84 	movi	r2,-2
   10188:	1884703a 	and	r2,r3,r2
   1018c:	1001703a 	wrctl	status,r2
  
  return context;
   10190:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10194:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10198:	00c00044 	movi	r3,1
   1019c:	e0bffa17 	ldw	r2,-24(fp)
   101a0:	1884983a 	sll	r2,r3,r2
   101a4:	0084303a 	nor	r2,zero,r2
   101a8:	1007883a 	mov	r3,r2
   101ac:	d0a6e117 	ldw	r2,-25724(gp)
   101b0:	1884703a 	and	r2,r3,r2
   101b4:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   101b8:	d0a6e117 	ldw	r2,-25724(gp)
   101bc:	100170fa 	wrctl	ienable,r2
   101c0:	e0bffc17 	ldw	r2,-16(fp)
   101c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   101c8:	e0bffd17 	ldw	r2,-12(fp)
   101cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   101d0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   101d4:	0001883a 	nop
}
   101d8:	e037883a 	mov	sp,fp
   101dc:	df000017 	ldw	fp,0(sp)
   101e0:	dec00104 	addi	sp,sp,4
   101e4:	f800283a 	ret

000101e8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   101e8:	defffc04 	addi	sp,sp,-16
   101ec:	df000315 	stw	fp,12(sp)
   101f0:	df000304 	addi	fp,sp,12
   101f4:	e13ffe15 	stw	r4,-8(fp)
   101f8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   101fc:	000530fa 	rdctl	r2,ienable
   10200:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10204:	00c00044 	movi	r3,1
   10208:	e0bfff17 	ldw	r2,-4(fp)
   1020c:	1884983a 	sll	r2,r3,r2
   10210:	1007883a 	mov	r3,r2
   10214:	e0bffd17 	ldw	r2,-12(fp)
   10218:	1884703a 	and	r2,r3,r2
   1021c:	1004c03a 	cmpne	r2,r2,zero
   10220:	10803fcc 	andi	r2,r2,255
}
   10224:	e037883a 	mov	sp,fp
   10228:	df000017 	ldw	fp,0(sp)
   1022c:	dec00104 	addi	sp,sp,4
   10230:	f800283a 	ret

00010234 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10234:	defff504 	addi	sp,sp,-44
   10238:	dfc00a15 	stw	ra,40(sp)
   1023c:	df000915 	stw	fp,36(sp)
   10240:	df000904 	addi	fp,sp,36
   10244:	e13ffc15 	stw	r4,-16(fp)
   10248:	e17ffd15 	stw	r5,-12(fp)
   1024c:	e1bffe15 	stw	r6,-8(fp)
   10250:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10254:	00bffa84 	movi	r2,-22
   10258:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1025c:	e0bffd17 	ldw	r2,-12(fp)
   10260:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10264:	e0bff817 	ldw	r2,-32(fp)
   10268:	10800808 	cmpgei	r2,r2,32
   1026c:	1000271e 	bne	r2,zero,1030c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10270:	0005303a 	rdctl	r2,status
   10274:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10278:	e0fffb17 	ldw	r3,-20(fp)
   1027c:	00bfff84 	movi	r2,-2
   10280:	1884703a 	and	r2,r3,r2
   10284:	1001703a 	wrctl	status,r2
  
  return context;
   10288:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1028c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10290:	00800074 	movhi	r2,1
   10294:	10936104 	addi	r2,r2,19844
   10298:	e0fff817 	ldw	r3,-32(fp)
   1029c:	180690fa 	slli	r3,r3,3
   102a0:	10c5883a 	add	r2,r2,r3
   102a4:	e0fffe17 	ldw	r3,-8(fp)
   102a8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   102ac:	00800074 	movhi	r2,1
   102b0:	10936104 	addi	r2,r2,19844
   102b4:	e0fff817 	ldw	r3,-32(fp)
   102b8:	180690fa 	slli	r3,r3,3
   102bc:	10c5883a 	add	r2,r2,r3
   102c0:	10800104 	addi	r2,r2,4
   102c4:	e0ffff17 	ldw	r3,-4(fp)
   102c8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   102cc:	e0bffe17 	ldw	r2,-8(fp)
   102d0:	10000526 	beq	r2,zero,102e8 <alt_iic_isr_register+0xb4>
   102d4:	e0bff817 	ldw	r2,-32(fp)
   102d8:	100b883a 	mov	r5,r2
   102dc:	e13ffc17 	ldw	r4,-16(fp)
   102e0:	00100d40 	call	100d4 <alt_ic_irq_enable>
   102e4:	00000406 	br	102f8 <alt_iic_isr_register+0xc4>
   102e8:	e0bff817 	ldw	r2,-32(fp)
   102ec:	100b883a 	mov	r5,r2
   102f0:	e13ffc17 	ldw	r4,-16(fp)
   102f4:	001015c0 	call	1015c <alt_ic_irq_disable>
   102f8:	e0bff715 	stw	r2,-36(fp)
   102fc:	e0bffa17 	ldw	r2,-24(fp)
   10300:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10304:	e0bff917 	ldw	r2,-28(fp)
   10308:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1030c:	e0bff717 	ldw	r2,-36(fp)
}
   10310:	e037883a 	mov	sp,fp
   10314:	dfc00117 	ldw	ra,4(sp)
   10318:	df000017 	ldw	fp,0(sp)
   1031c:	dec00204 	addi	sp,sp,8
   10320:	f800283a 	ret

00010324 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10324:	defff904 	addi	sp,sp,-28
   10328:	dfc00615 	stw	ra,24(sp)
   1032c:	df000515 	stw	fp,20(sp)
   10330:	df000504 	addi	fp,sp,20
   10334:	e13ffc15 	stw	r4,-16(fp)
   10338:	e17ffd15 	stw	r5,-12(fp)
   1033c:	e1bffe15 	stw	r6,-8(fp)
   10340:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   10344:	e1bfff17 	ldw	r6,-4(fp)
   10348:	e17ffe17 	ldw	r5,-8(fp)
   1034c:	e13ffd17 	ldw	r4,-12(fp)
   10350:	00105640 	call	10564 <open>
   10354:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   10358:	e0bffb17 	ldw	r2,-20(fp)
   1035c:	10001c16 	blt	r2,zero,103d0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   10360:	00800074 	movhi	r2,1
   10364:	1087fa04 	addi	r2,r2,8168
   10368:	e0fffb17 	ldw	r3,-20(fp)
   1036c:	18c00324 	muli	r3,r3,12
   10370:	10c5883a 	add	r2,r2,r3
   10374:	10c00017 	ldw	r3,0(r2)
   10378:	e0bffc17 	ldw	r2,-16(fp)
   1037c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10380:	00800074 	movhi	r2,1
   10384:	1087fa04 	addi	r2,r2,8168
   10388:	e0fffb17 	ldw	r3,-20(fp)
   1038c:	18c00324 	muli	r3,r3,12
   10390:	10c5883a 	add	r2,r2,r3
   10394:	10800104 	addi	r2,r2,4
   10398:	10c00017 	ldw	r3,0(r2)
   1039c:	e0bffc17 	ldw	r2,-16(fp)
   103a0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   103a4:	00800074 	movhi	r2,1
   103a8:	1087fa04 	addi	r2,r2,8168
   103ac:	e0fffb17 	ldw	r3,-20(fp)
   103b0:	18c00324 	muli	r3,r3,12
   103b4:	10c5883a 	add	r2,r2,r3
   103b8:	10800204 	addi	r2,r2,8
   103bc:	10c00017 	ldw	r3,0(r2)
   103c0:	e0bffc17 	ldw	r2,-16(fp)
   103c4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   103c8:	e13ffb17 	ldw	r4,-20(fp)
   103cc:	000ec380 	call	ec38 <alt_release_fd>
  }
} 
   103d0:	0001883a 	nop
   103d4:	e037883a 	mov	sp,fp
   103d8:	dfc00117 	ldw	ra,4(sp)
   103dc:	df000017 	ldw	fp,0(sp)
   103e0:	dec00204 	addi	sp,sp,8
   103e4:	f800283a 	ret

000103e8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   103e8:	defffb04 	addi	sp,sp,-20
   103ec:	dfc00415 	stw	ra,16(sp)
   103f0:	df000315 	stw	fp,12(sp)
   103f4:	df000304 	addi	fp,sp,12
   103f8:	e13ffd15 	stw	r4,-12(fp)
   103fc:	e17ffe15 	stw	r5,-8(fp)
   10400:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10404:	01c07fc4 	movi	r7,511
   10408:	01800044 	movi	r6,1
   1040c:	e17ffd17 	ldw	r5,-12(fp)
   10410:	01000074 	movhi	r4,1
   10414:	2107fd04 	addi	r4,r4,8180
   10418:	00103240 	call	10324 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1041c:	01c07fc4 	movi	r7,511
   10420:	000d883a 	mov	r6,zero
   10424:	e17ffe17 	ldw	r5,-8(fp)
   10428:	01000074 	movhi	r4,1
   1042c:	2107fa04 	addi	r4,r4,8168
   10430:	00103240 	call	10324 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10434:	01c07fc4 	movi	r7,511
   10438:	01800044 	movi	r6,1
   1043c:	e17fff17 	ldw	r5,-4(fp)
   10440:	01000074 	movhi	r4,1
   10444:	21080004 	addi	r4,r4,8192
   10448:	00103240 	call	10324 <alt_open_fd>
}  
   1044c:	0001883a 	nop
   10450:	e037883a 	mov	sp,fp
   10454:	dfc00117 	ldw	ra,4(sp)
   10458:	df000017 	ldw	fp,0(sp)
   1045c:	dec00204 	addi	sp,sp,8
   10460:	f800283a 	ret

00010464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10464:	defffe04 	addi	sp,sp,-8
   10468:	dfc00115 	stw	ra,4(sp)
   1046c:	df000015 	stw	fp,0(sp)
   10470:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10474:	d0a00b17 	ldw	r2,-32724(gp)
   10478:	10000326 	beq	r2,zero,10488 <alt_get_errno+0x24>
   1047c:	d0a00b17 	ldw	r2,-32724(gp)
   10480:	103ee83a 	callr	r2
   10484:	00000106 	br	1048c <alt_get_errno+0x28>
   10488:	d0a6d804 	addi	r2,gp,-25760
}
   1048c:	e037883a 	mov	sp,fp
   10490:	dfc00117 	ldw	ra,4(sp)
   10494:	df000017 	ldw	fp,0(sp)
   10498:	dec00204 	addi	sp,sp,8
   1049c:	f800283a 	ret

000104a0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   104a0:	defffd04 	addi	sp,sp,-12
   104a4:	df000215 	stw	fp,8(sp)
   104a8:	df000204 	addi	fp,sp,8
   104ac:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   104b0:	e0bfff17 	ldw	r2,-4(fp)
   104b4:	10800217 	ldw	r2,8(r2)
   104b8:	10d00034 	orhi	r3,r2,16384
   104bc:	e0bfff17 	ldw	r2,-4(fp)
   104c0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   104c4:	e03ffe15 	stw	zero,-8(fp)
   104c8:	00001d06 	br	10540 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   104cc:	00800074 	movhi	r2,1
   104d0:	1087fa04 	addi	r2,r2,8168
   104d4:	e0fffe17 	ldw	r3,-8(fp)
   104d8:	18c00324 	muli	r3,r3,12
   104dc:	10c5883a 	add	r2,r2,r3
   104e0:	10c00017 	ldw	r3,0(r2)
   104e4:	e0bfff17 	ldw	r2,-4(fp)
   104e8:	10800017 	ldw	r2,0(r2)
   104ec:	1880111e 	bne	r3,r2,10534 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   104f0:	00800074 	movhi	r2,1
   104f4:	1087fa04 	addi	r2,r2,8168
   104f8:	e0fffe17 	ldw	r3,-8(fp)
   104fc:	18c00324 	muli	r3,r3,12
   10500:	10c5883a 	add	r2,r2,r3
   10504:	10800204 	addi	r2,r2,8
   10508:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1050c:	1000090e 	bge	r2,zero,10534 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   10510:	e0bffe17 	ldw	r2,-8(fp)
   10514:	10c00324 	muli	r3,r2,12
   10518:	00800074 	movhi	r2,1
   1051c:	1087fa04 	addi	r2,r2,8168
   10520:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10524:	e0bfff17 	ldw	r2,-4(fp)
   10528:	18800226 	beq	r3,r2,10534 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1052c:	00bffcc4 	movi	r2,-13
   10530:	00000806 	br	10554 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10534:	e0bffe17 	ldw	r2,-8(fp)
   10538:	10800044 	addi	r2,r2,1
   1053c:	e0bffe15 	stw	r2,-8(fp)
   10540:	d0a00a17 	ldw	r2,-32728(gp)
   10544:	1007883a 	mov	r3,r2
   10548:	e0bffe17 	ldw	r2,-8(fp)
   1054c:	18bfdf2e 	bgeu	r3,r2,104cc <__alt_data_end+0xff0104cc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10550:	0005883a 	mov	r2,zero
}
   10554:	e037883a 	mov	sp,fp
   10558:	df000017 	ldw	fp,0(sp)
   1055c:	dec00104 	addi	sp,sp,4
   10560:	f800283a 	ret

00010564 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10564:	defff604 	addi	sp,sp,-40
   10568:	dfc00915 	stw	ra,36(sp)
   1056c:	df000815 	stw	fp,32(sp)
   10570:	df000804 	addi	fp,sp,32
   10574:	e13ffd15 	stw	r4,-12(fp)
   10578:	e17ffe15 	stw	r5,-8(fp)
   1057c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10580:	00bfffc4 	movi	r2,-1
   10584:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10588:	00bffb44 	movi	r2,-19
   1058c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10590:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10594:	d1600804 	addi	r5,gp,-32736
   10598:	e13ffd17 	ldw	r4,-12(fp)
   1059c:	00108800 	call	10880 <alt_find_dev>
   105a0:	e0bff815 	stw	r2,-32(fp)
   105a4:	e0bff817 	ldw	r2,-32(fp)
   105a8:	1000051e 	bne	r2,zero,105c0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   105ac:	e13ffd17 	ldw	r4,-12(fp)
   105b0:	00109100 	call	10910 <alt_find_file>
   105b4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   105b8:	00800044 	movi	r2,1
   105bc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   105c0:	e0bff817 	ldw	r2,-32(fp)
   105c4:	10002926 	beq	r2,zero,1066c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   105c8:	e13ff817 	ldw	r4,-32(fp)
   105cc:	0010a180 	call	10a18 <alt_get_fd>
   105d0:	e0bff915 	stw	r2,-28(fp)
   105d4:	e0bff917 	ldw	r2,-28(fp)
   105d8:	1000030e 	bge	r2,zero,105e8 <open+0x84>
    {
      status = index;
   105dc:	e0bff917 	ldw	r2,-28(fp)
   105e0:	e0bffa15 	stw	r2,-24(fp)
   105e4:	00002306 	br	10674 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   105e8:	e0bff917 	ldw	r2,-28(fp)
   105ec:	10c00324 	muli	r3,r2,12
   105f0:	00800074 	movhi	r2,1
   105f4:	1087fa04 	addi	r2,r2,8168
   105f8:	1885883a 	add	r2,r3,r2
   105fc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10600:	e0fffe17 	ldw	r3,-8(fp)
   10604:	00900034 	movhi	r2,16384
   10608:	10bfffc4 	addi	r2,r2,-1
   1060c:	1886703a 	and	r3,r3,r2
   10610:	e0bffc17 	ldw	r2,-16(fp)
   10614:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10618:	e0bffb17 	ldw	r2,-20(fp)
   1061c:	1000051e 	bne	r2,zero,10634 <open+0xd0>
   10620:	e13ffc17 	ldw	r4,-16(fp)
   10624:	00104a00 	call	104a0 <alt_file_locked>
   10628:	e0bffa15 	stw	r2,-24(fp)
   1062c:	e0bffa17 	ldw	r2,-24(fp)
   10630:	10001016 	blt	r2,zero,10674 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10634:	e0bff817 	ldw	r2,-32(fp)
   10638:	10800317 	ldw	r2,12(r2)
   1063c:	10000826 	beq	r2,zero,10660 <open+0xfc>
   10640:	e0bff817 	ldw	r2,-32(fp)
   10644:	10800317 	ldw	r2,12(r2)
   10648:	e1ffff17 	ldw	r7,-4(fp)
   1064c:	e1bffe17 	ldw	r6,-8(fp)
   10650:	e17ffd17 	ldw	r5,-12(fp)
   10654:	e13ffc17 	ldw	r4,-16(fp)
   10658:	103ee83a 	callr	r2
   1065c:	00000106 	br	10664 <open+0x100>
   10660:	0005883a 	mov	r2,zero
   10664:	e0bffa15 	stw	r2,-24(fp)
   10668:	00000206 	br	10674 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1066c:	00bffb44 	movi	r2,-19
   10670:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10674:	e0bffa17 	ldw	r2,-24(fp)
   10678:	1000090e 	bge	r2,zero,106a0 <open+0x13c>
  {
    alt_release_fd (index);  
   1067c:	e13ff917 	ldw	r4,-28(fp)
   10680:	000ec380 	call	ec38 <alt_release_fd>
    ALT_ERRNO = -status;
   10684:	00104640 	call	10464 <alt_get_errno>
   10688:	1007883a 	mov	r3,r2
   1068c:	e0bffa17 	ldw	r2,-24(fp)
   10690:	0085c83a 	sub	r2,zero,r2
   10694:	18800015 	stw	r2,0(r3)
    return -1;
   10698:	00bfffc4 	movi	r2,-1
   1069c:	00000106 	br	106a4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   106a0:	e0bff917 	ldw	r2,-28(fp)
}
   106a4:	e037883a 	mov	sp,fp
   106a8:	dfc00117 	ldw	ra,4(sp)
   106ac:	df000017 	ldw	fp,0(sp)
   106b0:	dec00204 	addi	sp,sp,8
   106b4:	f800283a 	ret

000106b8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   106b8:	defffa04 	addi	sp,sp,-24
   106bc:	df000515 	stw	fp,20(sp)
   106c0:	df000504 	addi	fp,sp,20
   106c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106c8:	0005303a 	rdctl	r2,status
   106cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106d0:	e0fffc17 	ldw	r3,-16(fp)
   106d4:	00bfff84 	movi	r2,-2
   106d8:	1884703a 	and	r2,r3,r2
   106dc:	1001703a 	wrctl	status,r2
  
  return context;
   106e0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   106e4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   106e8:	e0bfff17 	ldw	r2,-4(fp)
   106ec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   106f0:	e0bffd17 	ldw	r2,-12(fp)
   106f4:	10800017 	ldw	r2,0(r2)
   106f8:	e0fffd17 	ldw	r3,-12(fp)
   106fc:	18c00117 	ldw	r3,4(r3)
   10700:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10704:	e0bffd17 	ldw	r2,-12(fp)
   10708:	10800117 	ldw	r2,4(r2)
   1070c:	e0fffd17 	ldw	r3,-12(fp)
   10710:	18c00017 	ldw	r3,0(r3)
   10714:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10718:	e0bffd17 	ldw	r2,-12(fp)
   1071c:	e0fffd17 	ldw	r3,-12(fp)
   10720:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   10724:	e0bffd17 	ldw	r2,-12(fp)
   10728:	e0fffd17 	ldw	r3,-12(fp)
   1072c:	10c00015 	stw	r3,0(r2)
   10730:	e0bffb17 	ldw	r2,-20(fp)
   10734:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10738:	e0bffe17 	ldw	r2,-8(fp)
   1073c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10740:	0001883a 	nop
   10744:	e037883a 	mov	sp,fp
   10748:	df000017 	ldw	fp,0(sp)
   1074c:	dec00104 	addi	sp,sp,4
   10750:	f800283a 	ret

00010754 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10754:	defffb04 	addi	sp,sp,-20
   10758:	dfc00415 	stw	ra,16(sp)
   1075c:	df000315 	stw	fp,12(sp)
   10760:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10764:	d0a00e17 	ldw	r2,-32712(gp)
   10768:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1076c:	d0a6e317 	ldw	r2,-25716(gp)
   10770:	10800044 	addi	r2,r2,1
   10774:	d0a6e315 	stw	r2,-25716(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10778:	00002e06 	br	10834 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1077c:	e0bffd17 	ldw	r2,-12(fp)
   10780:	10800017 	ldw	r2,0(r2)
   10784:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10788:	e0bffd17 	ldw	r2,-12(fp)
   1078c:	10800403 	ldbu	r2,16(r2)
   10790:	10803fcc 	andi	r2,r2,255
   10794:	10000426 	beq	r2,zero,107a8 <alt_tick+0x54>
   10798:	d0a6e317 	ldw	r2,-25716(gp)
   1079c:	1000021e 	bne	r2,zero,107a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   107a0:	e0bffd17 	ldw	r2,-12(fp)
   107a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   107a8:	e0bffd17 	ldw	r2,-12(fp)
   107ac:	10800217 	ldw	r2,8(r2)
   107b0:	d0e6e317 	ldw	r3,-25716(gp)
   107b4:	18801d36 	bltu	r3,r2,1082c <alt_tick+0xd8>
   107b8:	e0bffd17 	ldw	r2,-12(fp)
   107bc:	10800403 	ldbu	r2,16(r2)
   107c0:	10803fcc 	andi	r2,r2,255
   107c4:	1000191e 	bne	r2,zero,1082c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   107c8:	e0bffd17 	ldw	r2,-12(fp)
   107cc:	10800317 	ldw	r2,12(r2)
   107d0:	e0fffd17 	ldw	r3,-12(fp)
   107d4:	18c00517 	ldw	r3,20(r3)
   107d8:	1809883a 	mov	r4,r3
   107dc:	103ee83a 	callr	r2
   107e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   107e4:	e0bfff17 	ldw	r2,-4(fp)
   107e8:	1000031e 	bne	r2,zero,107f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   107ec:	e13ffd17 	ldw	r4,-12(fp)
   107f0:	00106b80 	call	106b8 <alt_alarm_stop>
   107f4:	00000d06 	br	1082c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   107f8:	e0bffd17 	ldw	r2,-12(fp)
   107fc:	10c00217 	ldw	r3,8(r2)
   10800:	e0bfff17 	ldw	r2,-4(fp)
   10804:	1887883a 	add	r3,r3,r2
   10808:	e0bffd17 	ldw	r2,-12(fp)
   1080c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10810:	e0bffd17 	ldw	r2,-12(fp)
   10814:	10c00217 	ldw	r3,8(r2)
   10818:	d0a6e317 	ldw	r2,-25716(gp)
   1081c:	1880032e 	bgeu	r3,r2,1082c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   10820:	e0bffd17 	ldw	r2,-12(fp)
   10824:	00c00044 	movi	r3,1
   10828:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1082c:	e0bffe17 	ldw	r2,-8(fp)
   10830:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10834:	e0fffd17 	ldw	r3,-12(fp)
   10838:	d0a00e04 	addi	r2,gp,-32712
   1083c:	18bfcf1e 	bne	r3,r2,1077c <__alt_data_end+0xff01077c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10840:	0001883a 	nop
}
   10844:	0001883a 	nop
   10848:	e037883a 	mov	sp,fp
   1084c:	dfc00117 	ldw	ra,4(sp)
   10850:	df000017 	ldw	fp,0(sp)
   10854:	dec00204 	addi	sp,sp,8
   10858:	f800283a 	ret

0001085c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1085c:	deffff04 	addi	sp,sp,-4
   10860:	df000015 	stw	fp,0(sp)
   10864:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10868:	000170fa 	wrctl	ienable,zero
}
   1086c:	0001883a 	nop
   10870:	e037883a 	mov	sp,fp
   10874:	df000017 	ldw	fp,0(sp)
   10878:	dec00104 	addi	sp,sp,4
   1087c:	f800283a 	ret

00010880 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10880:	defffa04 	addi	sp,sp,-24
   10884:	dfc00515 	stw	ra,20(sp)
   10888:	df000415 	stw	fp,16(sp)
   1088c:	df000404 	addi	fp,sp,16
   10890:	e13ffe15 	stw	r4,-8(fp)
   10894:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10898:	e0bfff17 	ldw	r2,-4(fp)
   1089c:	10800017 	ldw	r2,0(r2)
   108a0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   108a4:	e13ffe17 	ldw	r4,-8(fp)
   108a8:	00027700 	call	2770 <strlen>
   108ac:	10800044 	addi	r2,r2,1
   108b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   108b4:	00000d06 	br	108ec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   108b8:	e0bffc17 	ldw	r2,-16(fp)
   108bc:	10800217 	ldw	r2,8(r2)
   108c0:	e0fffd17 	ldw	r3,-12(fp)
   108c4:	180d883a 	mov	r6,r3
   108c8:	e17ffe17 	ldw	r5,-8(fp)
   108cc:	1009883a 	mov	r4,r2
   108d0:	0010c340 	call	10c34 <memcmp>
   108d4:	1000021e 	bne	r2,zero,108e0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   108d8:	e0bffc17 	ldw	r2,-16(fp)
   108dc:	00000706 	br	108fc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   108e0:	e0bffc17 	ldw	r2,-16(fp)
   108e4:	10800017 	ldw	r2,0(r2)
   108e8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   108ec:	e0fffc17 	ldw	r3,-16(fp)
   108f0:	e0bfff17 	ldw	r2,-4(fp)
   108f4:	18bff01e 	bne	r3,r2,108b8 <__alt_data_end+0xff0108b8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   108f8:	0005883a 	mov	r2,zero
}
   108fc:	e037883a 	mov	sp,fp
   10900:	dfc00117 	ldw	ra,4(sp)
   10904:	df000017 	ldw	fp,0(sp)
   10908:	dec00204 	addi	sp,sp,8
   1090c:	f800283a 	ret

00010910 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10910:	defffb04 	addi	sp,sp,-20
   10914:	dfc00415 	stw	ra,16(sp)
   10918:	df000315 	stw	fp,12(sp)
   1091c:	df000304 	addi	fp,sp,12
   10920:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10924:	d0a00617 	ldw	r2,-32744(gp)
   10928:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1092c:	00003106 	br	109f4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   10930:	e0bffd17 	ldw	r2,-12(fp)
   10934:	10800217 	ldw	r2,8(r2)
   10938:	1009883a 	mov	r4,r2
   1093c:	00027700 	call	2770 <strlen>
   10940:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10944:	e0bffd17 	ldw	r2,-12(fp)
   10948:	10c00217 	ldw	r3,8(r2)
   1094c:	e0bffe17 	ldw	r2,-8(fp)
   10950:	10bfffc4 	addi	r2,r2,-1
   10954:	1885883a 	add	r2,r3,r2
   10958:	10800003 	ldbu	r2,0(r2)
   1095c:	10803fcc 	andi	r2,r2,255
   10960:	1080201c 	xori	r2,r2,128
   10964:	10bfe004 	addi	r2,r2,-128
   10968:	10800bd8 	cmpnei	r2,r2,47
   1096c:	1000031e 	bne	r2,zero,1097c <alt_find_file+0x6c>
    {
      len -= 1;
   10970:	e0bffe17 	ldw	r2,-8(fp)
   10974:	10bfffc4 	addi	r2,r2,-1
   10978:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1097c:	e0bffe17 	ldw	r2,-8(fp)
   10980:	e0ffff17 	ldw	r3,-4(fp)
   10984:	1885883a 	add	r2,r3,r2
   10988:	10800003 	ldbu	r2,0(r2)
   1098c:	10803fcc 	andi	r2,r2,255
   10990:	1080201c 	xori	r2,r2,128
   10994:	10bfe004 	addi	r2,r2,-128
   10998:	10800be0 	cmpeqi	r2,r2,47
   1099c:	1000081e 	bne	r2,zero,109c0 <alt_find_file+0xb0>
   109a0:	e0bffe17 	ldw	r2,-8(fp)
   109a4:	e0ffff17 	ldw	r3,-4(fp)
   109a8:	1885883a 	add	r2,r3,r2
   109ac:	10800003 	ldbu	r2,0(r2)
   109b0:	10803fcc 	andi	r2,r2,255
   109b4:	1080201c 	xori	r2,r2,128
   109b8:	10bfe004 	addi	r2,r2,-128
   109bc:	10000a1e 	bne	r2,zero,109e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   109c0:	e0bffd17 	ldw	r2,-12(fp)
   109c4:	10800217 	ldw	r2,8(r2)
   109c8:	e0fffe17 	ldw	r3,-8(fp)
   109cc:	180d883a 	mov	r6,r3
   109d0:	e17fff17 	ldw	r5,-4(fp)
   109d4:	1009883a 	mov	r4,r2
   109d8:	0010c340 	call	10c34 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   109dc:	1000021e 	bne	r2,zero,109e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   109e0:	e0bffd17 	ldw	r2,-12(fp)
   109e4:	00000706 	br	10a04 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   109e8:	e0bffd17 	ldw	r2,-12(fp)
   109ec:	10800017 	ldw	r2,0(r2)
   109f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   109f4:	e0fffd17 	ldw	r3,-12(fp)
   109f8:	d0a00604 	addi	r2,gp,-32744
   109fc:	18bfcc1e 	bne	r3,r2,10930 <__alt_data_end+0xff010930>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10a00:	0005883a 	mov	r2,zero
}
   10a04:	e037883a 	mov	sp,fp
   10a08:	dfc00117 	ldw	ra,4(sp)
   10a0c:	df000017 	ldw	fp,0(sp)
   10a10:	dec00204 	addi	sp,sp,8
   10a14:	f800283a 	ret

00010a18 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10a18:	defffc04 	addi	sp,sp,-16
   10a1c:	df000315 	stw	fp,12(sp)
   10a20:	df000304 	addi	fp,sp,12
   10a24:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10a28:	00bffa04 	movi	r2,-24
   10a2c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10a30:	e03ffd15 	stw	zero,-12(fp)
   10a34:	00001906 	br	10a9c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   10a38:	00800074 	movhi	r2,1
   10a3c:	1087fa04 	addi	r2,r2,8168
   10a40:	e0fffd17 	ldw	r3,-12(fp)
   10a44:	18c00324 	muli	r3,r3,12
   10a48:	10c5883a 	add	r2,r2,r3
   10a4c:	10800017 	ldw	r2,0(r2)
   10a50:	10000f1e 	bne	r2,zero,10a90 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   10a54:	00800074 	movhi	r2,1
   10a58:	1087fa04 	addi	r2,r2,8168
   10a5c:	e0fffd17 	ldw	r3,-12(fp)
   10a60:	18c00324 	muli	r3,r3,12
   10a64:	10c5883a 	add	r2,r2,r3
   10a68:	e0ffff17 	ldw	r3,-4(fp)
   10a6c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10a70:	d0e00a17 	ldw	r3,-32728(gp)
   10a74:	e0bffd17 	ldw	r2,-12(fp)
   10a78:	1880020e 	bge	r3,r2,10a84 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   10a7c:	e0bffd17 	ldw	r2,-12(fp)
   10a80:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   10a84:	e0bffd17 	ldw	r2,-12(fp)
   10a88:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   10a8c:	00000606 	br	10aa8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10a90:	e0bffd17 	ldw	r2,-12(fp)
   10a94:	10800044 	addi	r2,r2,1
   10a98:	e0bffd15 	stw	r2,-12(fp)
   10a9c:	e0bffd17 	ldw	r2,-12(fp)
   10aa0:	10800810 	cmplti	r2,r2,32
   10aa4:	103fe41e 	bne	r2,zero,10a38 <__alt_data_end+0xff010a38>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10aa8:	e0bffe17 	ldw	r2,-8(fp)
}
   10aac:	e037883a 	mov	sp,fp
   10ab0:	df000017 	ldw	fp,0(sp)
   10ab4:	dec00104 	addi	sp,sp,4
   10ab8:	f800283a 	ret

00010abc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   10abc:	defffb04 	addi	sp,sp,-20
   10ac0:	df000415 	stw	fp,16(sp)
   10ac4:	df000404 	addi	fp,sp,16
   10ac8:	e13ffe15 	stw	r4,-8(fp)
   10acc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   10ad0:	e0bfff17 	ldw	r2,-4(fp)
   10ad4:	10840070 	cmpltui	r2,r2,4097
   10ad8:	1000021e 	bne	r2,zero,10ae4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   10adc:	00840004 	movi	r2,4096
   10ae0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   10ae4:	e0fffe17 	ldw	r3,-8(fp)
   10ae8:	e0bfff17 	ldw	r2,-4(fp)
   10aec:	1885883a 	add	r2,r3,r2
   10af0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10af4:	e0bffe17 	ldw	r2,-8(fp)
   10af8:	e0bffc15 	stw	r2,-16(fp)
   10afc:	00000506 	br	10b14 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10b00:	e0bffc17 	ldw	r2,-16(fp)
   10b04:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10b08:	e0bffc17 	ldw	r2,-16(fp)
   10b0c:	10800804 	addi	r2,r2,32
   10b10:	e0bffc15 	stw	r2,-16(fp)
   10b14:	e0fffc17 	ldw	r3,-16(fp)
   10b18:	e0bffd17 	ldw	r2,-12(fp)
   10b1c:	18bff836 	bltu	r3,r2,10b00 <__alt_data_end+0xff010b00>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10b20:	e0bffe17 	ldw	r2,-8(fp)
   10b24:	108007cc 	andi	r2,r2,31
   10b28:	10000226 	beq	r2,zero,10b34 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10b2c:	e0bffc17 	ldw	r2,-16(fp)
   10b30:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10b34:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10b38:	0001883a 	nop
   10b3c:	e037883a 	mov	sp,fp
   10b40:	df000017 	ldw	fp,0(sp)
   10b44:	dec00104 	addi	sp,sp,4
   10b48:	f800283a 	ret

00010b4c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10b4c:	defffe04 	addi	sp,sp,-8
   10b50:	df000115 	stw	fp,4(sp)
   10b54:	df000104 	addi	fp,sp,4
   10b58:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10b5c:	e0bfff17 	ldw	r2,-4(fp)
   10b60:	10bffe84 	addi	r2,r2,-6
   10b64:	10c00428 	cmpgeui	r3,r2,16
   10b68:	18001a1e 	bne	r3,zero,10bd4 <alt_exception_cause_generated_bad_addr+0x88>
   10b6c:	100690ba 	slli	r3,r2,2
   10b70:	00800074 	movhi	r2,1
   10b74:	1082e104 	addi	r2,r2,2948
   10b78:	1885883a 	add	r2,r3,r2
   10b7c:	10800017 	ldw	r2,0(r2)
   10b80:	1000683a 	jmp	r2
   10b84:	00010bc4 	movi	zero,1071
   10b88:	00010bc4 	movi	zero,1071
   10b8c:	00010bd4 	movui	zero,1071
   10b90:	00010bd4 	movui	zero,1071
   10b94:	00010bd4 	movui	zero,1071
   10b98:	00010bc4 	movi	zero,1071
   10b9c:	00010bcc 	andi	zero,zero,1071
   10ba0:	00010bd4 	movui	zero,1071
   10ba4:	00010bc4 	movi	zero,1071
   10ba8:	00010bc4 	movi	zero,1071
   10bac:	00010bd4 	movui	zero,1071
   10bb0:	00010bc4 	movi	zero,1071
   10bb4:	00010bcc 	andi	zero,zero,1071
   10bb8:	00010bd4 	movui	zero,1071
   10bbc:	00010bd4 	movui	zero,1071
   10bc0:	00010bc4 	movi	zero,1071
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10bc4:	00800044 	movi	r2,1
   10bc8:	00000306 	br	10bd8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10bcc:	0005883a 	mov	r2,zero
   10bd0:	00000106 	br	10bd8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10bd4:	0005883a 	mov	r2,zero
  }
}
   10bd8:	e037883a 	mov	sp,fp
   10bdc:	df000017 	ldw	fp,0(sp)
   10be0:	dec00104 	addi	sp,sp,4
   10be4:	f800283a 	ret

00010be8 <atexit>:
   10be8:	200b883a 	mov	r5,r4
   10bec:	000f883a 	mov	r7,zero
   10bf0:	000d883a 	mov	r6,zero
   10bf4:	0009883a 	mov	r4,zero
   10bf8:	0010cb01 	jmpi	10cb0 <__register_exitproc>

00010bfc <exit>:
   10bfc:	defffe04 	addi	sp,sp,-8
   10c00:	000b883a 	mov	r5,zero
   10c04:	dc000015 	stw	r16,0(sp)
   10c08:	dfc00115 	stw	ra,4(sp)
   10c0c:	2021883a 	mov	r16,r4
   10c10:	0010dc80 	call	10dc8 <__call_exitprocs>
   10c14:	00800074 	movhi	r2,1
   10c18:	108c7404 	addi	r2,r2,12752
   10c1c:	11000017 	ldw	r4,0(r2)
   10c20:	20800f17 	ldw	r2,60(r4)
   10c24:	10000126 	beq	r2,zero,10c2c <exit+0x30>
   10c28:	103ee83a 	callr	r2
   10c2c:	8009883a 	mov	r4,r16
   10c30:	0010f480 	call	10f48 <_exit>

00010c34 <memcmp>:
   10c34:	01c000c4 	movi	r7,3
   10c38:	3980192e 	bgeu	r7,r6,10ca0 <memcmp+0x6c>
   10c3c:	2144b03a 	or	r2,r4,r5
   10c40:	11c4703a 	and	r2,r2,r7
   10c44:	10000f26 	beq	r2,zero,10c84 <memcmp+0x50>
   10c48:	20800003 	ldbu	r2,0(r4)
   10c4c:	28c00003 	ldbu	r3,0(r5)
   10c50:	10c0151e 	bne	r2,r3,10ca8 <memcmp+0x74>
   10c54:	31bfff84 	addi	r6,r6,-2
   10c58:	01ffffc4 	movi	r7,-1
   10c5c:	00000406 	br	10c70 <memcmp+0x3c>
   10c60:	20800003 	ldbu	r2,0(r4)
   10c64:	28c00003 	ldbu	r3,0(r5)
   10c68:	31bfffc4 	addi	r6,r6,-1
   10c6c:	10c00e1e 	bne	r2,r3,10ca8 <memcmp+0x74>
   10c70:	21000044 	addi	r4,r4,1
   10c74:	29400044 	addi	r5,r5,1
   10c78:	31fff91e 	bne	r6,r7,10c60 <__alt_data_end+0xff010c60>
   10c7c:	0005883a 	mov	r2,zero
   10c80:	f800283a 	ret
   10c84:	20c00017 	ldw	r3,0(r4)
   10c88:	28800017 	ldw	r2,0(r5)
   10c8c:	18bfee1e 	bne	r3,r2,10c48 <__alt_data_end+0xff010c48>
   10c90:	31bfff04 	addi	r6,r6,-4
   10c94:	21000104 	addi	r4,r4,4
   10c98:	29400104 	addi	r5,r5,4
   10c9c:	39bff936 	bltu	r7,r6,10c84 <__alt_data_end+0xff010c84>
   10ca0:	303fe91e 	bne	r6,zero,10c48 <__alt_data_end+0xff010c48>
   10ca4:	003ff506 	br	10c7c <__alt_data_end+0xff010c7c>
   10ca8:	10c5c83a 	sub	r2,r2,r3
   10cac:	f800283a 	ret

00010cb0 <__register_exitproc>:
   10cb0:	defffa04 	addi	sp,sp,-24
   10cb4:	dc000315 	stw	r16,12(sp)
   10cb8:	04000074 	movhi	r16,1
   10cbc:	840c7404 	addi	r16,r16,12752
   10cc0:	80c00017 	ldw	r3,0(r16)
   10cc4:	dc400415 	stw	r17,16(sp)
   10cc8:	dfc00515 	stw	ra,20(sp)
   10ccc:	18805217 	ldw	r2,328(r3)
   10cd0:	2023883a 	mov	r17,r4
   10cd4:	10003726 	beq	r2,zero,10db4 <__register_exitproc+0x104>
   10cd8:	10c00117 	ldw	r3,4(r2)
   10cdc:	010007c4 	movi	r4,31
   10ce0:	20c00e16 	blt	r4,r3,10d1c <__register_exitproc+0x6c>
   10ce4:	1a000044 	addi	r8,r3,1
   10ce8:	8800221e 	bne	r17,zero,10d74 <__register_exitproc+0xc4>
   10cec:	18c00084 	addi	r3,r3,2
   10cf0:	18c7883a 	add	r3,r3,r3
   10cf4:	18c7883a 	add	r3,r3,r3
   10cf8:	12000115 	stw	r8,4(r2)
   10cfc:	10c7883a 	add	r3,r2,r3
   10d00:	19400015 	stw	r5,0(r3)
   10d04:	0005883a 	mov	r2,zero
   10d08:	dfc00517 	ldw	ra,20(sp)
   10d0c:	dc400417 	ldw	r17,16(sp)
   10d10:	dc000317 	ldw	r16,12(sp)
   10d14:	dec00604 	addi	sp,sp,24
   10d18:	f800283a 	ret
   10d1c:	00800034 	movhi	r2,0
   10d20:	10876a04 	addi	r2,r2,7592
   10d24:	10002626 	beq	r2,zero,10dc0 <__register_exitproc+0x110>
   10d28:	01006404 	movi	r4,400
   10d2c:	d9400015 	stw	r5,0(sp)
   10d30:	d9800115 	stw	r6,4(sp)
   10d34:	d9c00215 	stw	r7,8(sp)
   10d38:	0001da80 	call	1da8 <malloc>
   10d3c:	d9400017 	ldw	r5,0(sp)
   10d40:	d9800117 	ldw	r6,4(sp)
   10d44:	d9c00217 	ldw	r7,8(sp)
   10d48:	10001d26 	beq	r2,zero,10dc0 <__register_exitproc+0x110>
   10d4c:	81000017 	ldw	r4,0(r16)
   10d50:	10000115 	stw	zero,4(r2)
   10d54:	02000044 	movi	r8,1
   10d58:	22405217 	ldw	r9,328(r4)
   10d5c:	0007883a 	mov	r3,zero
   10d60:	12400015 	stw	r9,0(r2)
   10d64:	20805215 	stw	r2,328(r4)
   10d68:	10006215 	stw	zero,392(r2)
   10d6c:	10006315 	stw	zero,396(r2)
   10d70:	883fde26 	beq	r17,zero,10cec <__alt_data_end+0xff010cec>
   10d74:	18c9883a 	add	r4,r3,r3
   10d78:	2109883a 	add	r4,r4,r4
   10d7c:	1109883a 	add	r4,r2,r4
   10d80:	21802215 	stw	r6,136(r4)
   10d84:	01800044 	movi	r6,1
   10d88:	12406217 	ldw	r9,392(r2)
   10d8c:	30cc983a 	sll	r6,r6,r3
   10d90:	4992b03a 	or	r9,r9,r6
   10d94:	12406215 	stw	r9,392(r2)
   10d98:	21c04215 	stw	r7,264(r4)
   10d9c:	01000084 	movi	r4,2
   10da0:	893fd21e 	bne	r17,r4,10cec <__alt_data_end+0xff010cec>
   10da4:	11006317 	ldw	r4,396(r2)
   10da8:	218cb03a 	or	r6,r4,r6
   10dac:	11806315 	stw	r6,396(r2)
   10db0:	003fce06 	br	10cec <__alt_data_end+0xff010cec>
   10db4:	18805304 	addi	r2,r3,332
   10db8:	18805215 	stw	r2,328(r3)
   10dbc:	003fc606 	br	10cd8 <__alt_data_end+0xff010cd8>
   10dc0:	00bfffc4 	movi	r2,-1
   10dc4:	003fd006 	br	10d08 <__alt_data_end+0xff010d08>

00010dc8 <__call_exitprocs>:
   10dc8:	defff504 	addi	sp,sp,-44
   10dcc:	df000915 	stw	fp,36(sp)
   10dd0:	dd400615 	stw	r21,24(sp)
   10dd4:	dc800315 	stw	r18,12(sp)
   10dd8:	dfc00a15 	stw	ra,40(sp)
   10ddc:	ddc00815 	stw	r23,32(sp)
   10de0:	dd800715 	stw	r22,28(sp)
   10de4:	dd000515 	stw	r20,20(sp)
   10de8:	dcc00415 	stw	r19,16(sp)
   10dec:	dc400215 	stw	r17,8(sp)
   10df0:	dc000115 	stw	r16,4(sp)
   10df4:	d9000015 	stw	r4,0(sp)
   10df8:	2839883a 	mov	fp,r5
   10dfc:	04800044 	movi	r18,1
   10e00:	057fffc4 	movi	r21,-1
   10e04:	00800074 	movhi	r2,1
   10e08:	108c7404 	addi	r2,r2,12752
   10e0c:	12000017 	ldw	r8,0(r2)
   10e10:	45005217 	ldw	r20,328(r8)
   10e14:	44c05204 	addi	r19,r8,328
   10e18:	a0001c26 	beq	r20,zero,10e8c <__call_exitprocs+0xc4>
   10e1c:	a0800117 	ldw	r2,4(r20)
   10e20:	15ffffc4 	addi	r23,r2,-1
   10e24:	b8000d16 	blt	r23,zero,10e5c <__call_exitprocs+0x94>
   10e28:	14000044 	addi	r16,r2,1
   10e2c:	8421883a 	add	r16,r16,r16
   10e30:	8421883a 	add	r16,r16,r16
   10e34:	84402004 	addi	r17,r16,128
   10e38:	a463883a 	add	r17,r20,r17
   10e3c:	a421883a 	add	r16,r20,r16
   10e40:	e0001e26 	beq	fp,zero,10ebc <__call_exitprocs+0xf4>
   10e44:	80804017 	ldw	r2,256(r16)
   10e48:	e0801c26 	beq	fp,r2,10ebc <__call_exitprocs+0xf4>
   10e4c:	bdffffc4 	addi	r23,r23,-1
   10e50:	843fff04 	addi	r16,r16,-4
   10e54:	8c7fff04 	addi	r17,r17,-4
   10e58:	bd7ff91e 	bne	r23,r21,10e40 <__alt_data_end+0xff010e40>
   10e5c:	00800034 	movhi	r2,0
   10e60:	10876f04 	addi	r2,r2,7612
   10e64:	10000926 	beq	r2,zero,10e8c <__call_exitprocs+0xc4>
   10e68:	a0800117 	ldw	r2,4(r20)
   10e6c:	1000301e 	bne	r2,zero,10f30 <__call_exitprocs+0x168>
   10e70:	a0800017 	ldw	r2,0(r20)
   10e74:	10003226 	beq	r2,zero,10f40 <__call_exitprocs+0x178>
   10e78:	a009883a 	mov	r4,r20
   10e7c:	98800015 	stw	r2,0(r19)
   10e80:	0001dbc0 	call	1dbc <free>
   10e84:	9d000017 	ldw	r20,0(r19)
   10e88:	a03fe41e 	bne	r20,zero,10e1c <__alt_data_end+0xff010e1c>
   10e8c:	dfc00a17 	ldw	ra,40(sp)
   10e90:	df000917 	ldw	fp,36(sp)
   10e94:	ddc00817 	ldw	r23,32(sp)
   10e98:	dd800717 	ldw	r22,28(sp)
   10e9c:	dd400617 	ldw	r21,24(sp)
   10ea0:	dd000517 	ldw	r20,20(sp)
   10ea4:	dcc00417 	ldw	r19,16(sp)
   10ea8:	dc800317 	ldw	r18,12(sp)
   10eac:	dc400217 	ldw	r17,8(sp)
   10eb0:	dc000117 	ldw	r16,4(sp)
   10eb4:	dec00b04 	addi	sp,sp,44
   10eb8:	f800283a 	ret
   10ebc:	a0800117 	ldw	r2,4(r20)
   10ec0:	80c00017 	ldw	r3,0(r16)
   10ec4:	10bfffc4 	addi	r2,r2,-1
   10ec8:	15c01426 	beq	r2,r23,10f1c <__call_exitprocs+0x154>
   10ecc:	80000015 	stw	zero,0(r16)
   10ed0:	183fde26 	beq	r3,zero,10e4c <__alt_data_end+0xff010e4c>
   10ed4:	95c8983a 	sll	r4,r18,r23
   10ed8:	a0806217 	ldw	r2,392(r20)
   10edc:	a5800117 	ldw	r22,4(r20)
   10ee0:	2084703a 	and	r2,r4,r2
   10ee4:	10000b26 	beq	r2,zero,10f14 <__call_exitprocs+0x14c>
   10ee8:	a0806317 	ldw	r2,396(r20)
   10eec:	2088703a 	and	r4,r4,r2
   10ef0:	20000c1e 	bne	r4,zero,10f24 <__call_exitprocs+0x15c>
   10ef4:	89400017 	ldw	r5,0(r17)
   10ef8:	d9000017 	ldw	r4,0(sp)
   10efc:	183ee83a 	callr	r3
   10f00:	a0800117 	ldw	r2,4(r20)
   10f04:	15bfbf1e 	bne	r2,r22,10e04 <__alt_data_end+0xff010e04>
   10f08:	98800017 	ldw	r2,0(r19)
   10f0c:	153fcf26 	beq	r2,r20,10e4c <__alt_data_end+0xff010e4c>
   10f10:	003fbc06 	br	10e04 <__alt_data_end+0xff010e04>
   10f14:	183ee83a 	callr	r3
   10f18:	003ff906 	br	10f00 <__alt_data_end+0xff010f00>
   10f1c:	a5c00115 	stw	r23,4(r20)
   10f20:	003feb06 	br	10ed0 <__alt_data_end+0xff010ed0>
   10f24:	89000017 	ldw	r4,0(r17)
   10f28:	183ee83a 	callr	r3
   10f2c:	003ff406 	br	10f00 <__alt_data_end+0xff010f00>
   10f30:	a0800017 	ldw	r2,0(r20)
   10f34:	a027883a 	mov	r19,r20
   10f38:	1029883a 	mov	r20,r2
   10f3c:	003fb606 	br	10e18 <__alt_data_end+0xff010e18>
   10f40:	0005883a 	mov	r2,zero
   10f44:	003ffb06 	br	10f34 <__alt_data_end+0xff010f34>

00010f48 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   10f48:	defffd04 	addi	sp,sp,-12
   10f4c:	df000215 	stw	fp,8(sp)
   10f50:	df000204 	addi	fp,sp,8
   10f54:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   10f58:	0001883a 	nop
   10f5c:	e0bfff17 	ldw	r2,-4(fp)
   10f60:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   10f64:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10f68:	10000226 	beq	r2,zero,10f74 <_exit+0x2c>
    ALT_SIM_FAIL();
   10f6c:	002af070 	cmpltui	zero,zero,43969
   10f70:	00000106 	br	10f78 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   10f74:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   10f78:	003fff06 	br	10f78 <__alt_data_end+0xff010f78>


sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011780 memsz 0x00011780 flags r-x
    LOAD off    0x000127a0 vaddr 0x000117a0 paddr 0x0001338c align 2**12
         filesz 0x00001bec memsz 0x00001bec flags rw-
    LOAD off    0x00014f78 vaddr 0x00014f78 paddr 0x00014f78 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010d84  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007d8  00010fc8  00010fc8  00011fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bec  000117a0  0001338c  000127a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00014f78  00014f78  00014f78  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00015108  00015108  0001438c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001438c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001050  00000000  00000000  000143b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026a14  00000000  00000000  00015400  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009c2f  00000000  00000000  0003be14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c4ba  00000000  00000000  00045a43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000025f4  00000000  00000000  00051f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003e27  00000000  00000000  000544f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00018f29  00000000  00000000  0005831b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  00071244  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001980  00000000  00000000  00071298  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00076646  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00076649  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00076655  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00076656  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00076657  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007665b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007665f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00076663  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007666c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00076675  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0007667e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000057  00000000  00000000  00076689  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  000766e0  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000723e4  00000000  00000000  0007c1b8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00010fc8 l    d  .rodata	00000000 .rodata
000117a0 l    d  .rwdata	00000000 .rwdata
00014f78 l    d  .bss	00000000 .bss
00015108 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/adrie/OneDrive/Documents/HES/Master/TSM_EmbHardw/Labo/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000114ee l     O .rodata	00000010 zeroes.4404
00004a68 l     F .text	000000bc __sbprintf
000114fe l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004c78 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000067a8 l     F .text	00000008 __fp_unlock
000067bc l     F .text	0000019c __sinit.part.1
00006958 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00011ca8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000120ec l     O .rwdata	00000020 lc_ctype_charset
000120cc l     O .rwdata	00000020 lc_message_charset
0001210c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00011530 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000094f4 l     F .text	000000fc __sprint_r.part.0
00011664 l     O .rodata	00000010 blanks.4348
00011654 l     O .rodata	00000010 zeroes.4349
0000aa80 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e588 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e694 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e6c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e7ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000e88c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e978 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000eb4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001337c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000edc8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000eefc l     F .text	00000034 alt_dev_reg
000122ec l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f208 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000f414 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000fa4c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000fefc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010370 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000104b0 l     F .text	0000003c alt_get_errno
000104ec l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00014fdc g     O .bss	00000004 alt_instruction_exception_handler
00008b8c g     F .text	00000074 _mprec_log10
00008c78 g     F .text	0000008c __any_on
0000b01c g     F .text	00000054 _isatty_r
0001153c g     O .rodata	00000028 __mprec_tinytens
0000ea88 g     F .text	0000007c alt_main
00002694 g     F .text	000000c0 _puts_r
00015008 g     O .bss	00000100 alt_irq
0000b070 g     F .text	00000060 _lseek_r
0001149a g     O .rodata	00000009 gy_array
0001338c g       *ABS*	00000000 __flash_rwdata_start
0000d0b4 g     F .text	00000088 .hidden __eqdf2
00015108 g       *ABS*	00000000 __alt_heap_start
00002658 g     F .text	0000003c printf
0000b288 g     F .text	0000009c _wcrtomb_r
000093b4 g     F .text	0000005c __sseek
00006af8 g     F .text	00000010 __sinit
0000b130 g     F .text	00000140 __swbuf_r
000075c0 g     F .text	0000007c _setlocale_r
00006960 g     F .text	00000068 __sfmoreglue
0000eb28 g     F .text	00000024 __malloc_unlock
00000a7c g     F .text	00000014 LCD_Write_Command
00014f88 g     O .bss	00000004 sobel_width
00014fcc g     O .bss	00000004 altera_avalon_timer_ts_freq
00007a84 g     F .text	0000015c memmove
00000a90 g     F .text	00000014 LCD_Write_Data
00006ae0 g     F .text	00000018 _cleanup
00007d08 g     F .text	000000a8 _Balloc
0000d13c g     F .text	000000dc .hidden __gtdf2
000108a8 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000598 g     F .text	00000024 cam_get_xsize
0000afc0 g     F .text	0000005c _fstat_r
00014fac g     O .bss	00000004 errno
00009330 g     F .text	00000008 __seofread
00014fc0 g     O .bss	00000004 alt_argv
0001b34c g       *ABS*	00000000 _gp
0000ed98 g     F .text	00000030 usleep
00000658 g     F .text	00000074 cam_set_image_pointer
0001216c g     O .rwdata	00000180 alt_fd_list
00001c20 g     F .text	00000010 vga_set_pointer
000108cc g     F .text	00000090 alt_find_dev
0000793c g     F .text	00000148 memcpy
000067b0 g     F .text	0000000c _cleanup_r
0000e3a0 g     F .text	000000dc .hidden __floatsidf
00010434 g     F .text	0000007c alt_io_redirect
0000d218 g     F .text	000000f4 .hidden __ltdf2
00010fc8 g       *ABS*	00000000 __DTOR_END__
00002754 g     F .text	00000014 puts
00010b98 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009268 g     F .text	00000074 __fpclassifyd
00008ae8 g     F .text	000000a4 __ratio
0000aa64 g     F .text	0000001c __vfiprintf_internal
0000f60c g     F .text	0000021c altera_avalon_jtag_uart_read
00001df4 g     F .text	00000014 malloc
00002628 g     F .text	00000030 _printf_r
000008d0 g     F .text	00000008 get_grayscale_picture
00001d38 g     F .text	00000064 .hidden __udivsi3
00011028 g     O .rodata	00000128 lens_roll_off_tbl
00000280 g     F .text	00000318 init_camera
0000e7e8 g     F .text	000000a4 isatty
0001158c g     O .rodata	000000c8 __mprec_tens
0000763c g     F .text	0000000c __locale_charset
00010b08 g     F .text	00000090 alt_icache_flush
00014fa8 g     O .bss	00000004 __malloc_top_pad
0001335c g     O .rwdata	00000004 __mb_cur_max
0000766c g     F .text	0000000c _localeconv_r
0000161c g     F .text	00000138 sobel_x
00008114 g     F .text	0000003c __i2b
00006f7c g     F .text	000004bc __sfvwrite_r
00000aa4 g     F .text	00000414 init_LCD
00002768 g     F .text	00000054 _sbrk_r
000005e0 g     F .text	00000078 cam_get_profiling
0000b0d0 g     F .text	00000060 _read_r
00014f8c g     O .bss	00000004 sobel_result
00013374 g     O .rwdata	00000004 alt_max_fd
0000acb4 g     F .text	000000f0 _fclose_r
00006778 g     F .text	00000030 fflush
00014fa4 g     O .bss	00000004 __malloc_max_sbrked_mem
00014f80 g     O .bss	00000004 grayscale_array
0000bf20 g     F .text	000008ac .hidden __adddf3
000005bc g     F .text	00000024 cam_get_ysize
00008890 g     F .text	0000010c __b2d
0000b9e8 g     F .text	00000538 .hidden __umoddi3
0000e9b4 g     F .text	000000d4 lseek
00000998 g     F .text	0000008c i2c_short_read
00013354 g     O .rwdata	00000004 _global_impure_ptr
00008d04 g     F .text	00000564 _realloc_r
00015108 g       *ABS*	00000000 __bss_end
00010280 g     F .text	000000f0 alt_iic_isr_register
000107a0 g     F .text	00000108 alt_tick
0000b470 g     F .text	00000578 .hidden __udivdi3
0000af1c g     F .text	00000024 _fputwc_r
00011564 g     O .rodata	00000028 __mprec_bigtens
00007ef8 g     F .text	00000104 __s2b
0000e47c g     F .text	000000a8 .hidden __floatunsidf
000085d0 g     F .text	00000060 __mcmp
00006b18 g     F .text	00000018 __fp_lock_all
00010234 g     F .text	0000004c alt_ic_irq_enabled
00014f78 g     O .bss	00000004 grayscape_height
00010704 g     F .text	0000009c alt_alarm_stop
00014fd0 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012144 g     O .rwdata	00000028 alt_dev_null
00000f44 g     F .text	00000078 transfer_LCD_with_dma
0000fedc g     F .text	00000020 alt_dcache_flush_all
00007ffc g     F .text	00000068 __hi0bits
0000e320 g     F .text	00000080 .hidden __fixdfsi
0001338c g       *ABS*	00000000 __ram_rwdata_end
0001336c g     O .rwdata	00000008 alt_dev_list
0000ee04 g     F .text	000000f8 write
0000fc38 g     F .text	00000020 alt_timestamp_freq
000117a0 g       *ABS*	00000000 __ram_rodata_end
0000e6fc g     F .text	000000b0 fstat
0000d218 g     F .text	000000f4 .hidden __ledf2
00008348 g     F .text	00000140 __pow5mult
00009608 g     F .text	0000145c ___vfiprintf_internal_r
00014fb8 g     O .bss	00000004 __nlocale_changed
00001d9c g     F .text	00000058 .hidden __umodsi3
00001c10 g     F .text	00000008 GetSobel_rgb
00015108 g       *ABS*	00000000 end
00001c18 g     F .text	00000008 GetSobelResult
000006f0 g     F .text	00000020 take_picture_blocking
00000750 g     F .text	00000014 DIPSW_get_value
000019d8 g     F .text	00000184 sobel_y_with_rgb
0000f148 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006e0 g     F .text	00000010 current_image_pointer
00010fc8 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000fac4 g     F .text	0000007c alt_avalon_timer_sc_init
0000e524 g     F .text	00000064 .hidden __clzsi2
0000f828 g     F .text	00000224 altera_avalon_jtag_uart_write
00006b08 g     F .text	00000004 __sfp_lock_acquire
00007858 g     F .text	000000e4 memchr
00002854 g     F .text	000021f8 ___vfprintf_internal_r
00006c6c g     F .text	00000310 _free_r
00007648 g     F .text	00000010 __locale_mb_cur_max
000018bc g     F .text	0000011c sobel_y
00011150 g     O .rodata	00000140 noise_reduction_reg_settings_array
00010e14 g     F .text	00000180 __call_exitprocs
00014fb4 g     O .bss	00000004 __mlocale_changed
0001334c g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00014fd4 g     O .bss	00000004 _alt_tick_rate
00008488 g     F .text	00000148 __lshift
00014fd8 g     O .bss	00000004 _alt_nticks
0000eb88 g     F .text	000000fc read
0000ef68 g     F .text	0000007c alt_sys_init
00001754 g     F .text	00000168 sobel_x_with_rgb
00010cfc g     F .text	00000118 __register_exitproc
00008150 g     F .text	000001f8 __multiply
0000f4b4 g     F .text	00000068 altera_avalon_jtag_uart_close
000117a0 g       *ABS*	00000000 __ram_rwdata_start
00010fc8 g       *ABS*	00000000 __ram_rodata_start
00014fe0 g     O .bss	00000028 __malloc_current_mallinfo
0000899c g     F .text	0000014c __d2b
00014f90 g     O .bss	00000004 sobel_height
00000710 g     F .text	00000014 enable_continues_mode
0000efe4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001410 g     F .text	000000e4 init_sobel_arrays
00010a64 g     F .text	000000a4 alt_get_fd
0000fd84 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000ab9c g     F .text	00000054 _close_r
00010c80 g     F .text	0000007c memcmp
0000f0a4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015108 g       *ABS*	00000000 __alt_stack_base
0000f0f4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00004b24 g     F .text	00000154 __swsetup_r
0000c7cc g     F .text	000008e8 .hidden __divdf3
000069c8 g     F .text	00000118 __sfp
00008c00 g     F .text	00000078 __copybits
000118a0 g     O .rwdata	00000408 __malloc_av_
00006b14 g     F .text	00000004 __sinit_lock_release
0000d30c g     F .text	00000718 .hidden __muldf3
000092dc g     F .text	00000054 __sread
0001095c g     F .text	00000108 alt_find_file
0000ff38 g     F .text	000000a4 alt_dev_llist_insert
0000eb04 g     F .text	00000024 __malloc_lock
0000ece8 g     F .text	000000b0 sbrk
0000671c g     F .text	0000005c _fflush_r
0000abf0 g     F .text	000000c4 _calloc_r
000117a0 g     O .rwdata	00000100 .hidden __divsi3_table
00014f78 g       *ABS*	00000000 __bss_start
00007be0 g     F .text	00000128 memset
00000fbc g     F .text	00000454 main
00014fc4 g     O .bss	00000004 alt_envp
00014fa0 g     O .bss	00000004 __malloc_max_total_mem
000008c0 g     F .text	00000008 get_grayscale_width
0000f044 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000b270 g     F .text	00000018 __swbuf
00014f94 g     O .bss	00000004 sobel_x_result
00009410 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000ada4 g     F .text	00000014 fclose
0000fb40 g     F .text	00000078 alt_timestamp_start
00004e78 g     F .text	00001688 _dtoa_r
00001e1c g     F .text	0000080c _malloc_r
0000b3e4 g     F .text	00000030 __ascii_wctomb
00013378 g     O .rwdata	00000004 alt_errno
00007438 g     F .text	000000c4 _fwalk
00001c40 g     F .text	00000084 .hidden __divsi3
00006b48 g     F .text	00000124 _malloc_trim_r
00010fc8 g       *ABS*	00000000 __CTOR_END__
00014f7c g     O .bss	00000004 grayscale_width
00009418 g     F .text	000000dc strcmp
00000eb8 g     F .text	0000008c transfer_LCD_no_dma
00010fc8 g       *ABS*	00000000 __flash_rodata_start
00010fc8 g       *ABS*	00000000 __DTOR_LIST__
0000d0b4 g     F .text	00000088 .hidden __nedf2
00011290 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000ef30 g     F .text	00000038 alt_irq_init
0000ec84 g     F .text	00000064 alt_release_fd
000008f0 g     F .text	000000a8 i2c_auto_detect
00011674 g     O .rodata	00000100 .hidden __clz_tab
000006cc g     F .text	00000014 current_image_valid
00014fb0 g     O .bss	00000004 _PathLocale
000008d8 g     F .text	00000018 i2c_busy_wait
00010c34 g     F .text	00000014 atexit
0000ab3c g     F .text	00000060 _write_r
00007678 g     F .text	00000018 setlocale
00013358 g     O .rwdata	00000004 _impure_ptr
00014fbc g     O .bss	00000004 alt_argc
00006500 g     F .text	0000021c __sflush_r
00014fc8 g     O .bss	00000004 altera_avalon_timer_ts_base
0001003c g     F .text	00000060 _do_dtors
00007664 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000882c g     F .text	00000064 __ulp
00006b30 g     F .text	00000018 __fp_unlock_all
00013364 g     O .rwdata	00000008 alt_fs_list
00014f98 g     O .bss	00000004 sobel_y_result
00000a24 g     F .text	00000058 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00014f84 g     O .bss	00000002 LCD_height
00007690 g     F .text	0000000c localeconv
0000fbb8 g     F .text	00000080 alt_timestamp
00001c30 g     F .text	00000010 vga_set_swap
000100d0 g     F .text	00000050 alt_ic_isr_register
00001b5c g     F .text	000000b4 sobel_threshold
0001338c g       *ABS*	00000000 _edata
00015108 g       *ABS*	00000000 _end
0000adb8 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000f51c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000114a3 g     O .rodata	00000009 gx_array
000101a8 g     F .text	0000008c alt_ic_irq_disable
00009338 g     F .text	0000007c __swrite
00013350 g     O .rwdata	00000004 __malloc_trim_threshold
00014f86 g     O .bss	00000002 LCD_width
00000764 g     F .text	0000015c conv_grayscale
00007658 g     F .text	0000000c __locale_msgcharset
00010c48 g     F .text	00000038 exit
000074fc g     F .text	000000c4 _fwalk_reent
00008630 g     F .text	000001fc __mdiff
00001cc4 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006b0c g     F .text	00000004 __sfp_lock_release
000008c8 g     F .text	00000008 get_grayscale_height
00010f94 g     F .text	00000034 _exit
000014f4 g     F .text	00000128 sobel_mac
0000fc58 g     F .text	0000012c alt_alarm_start
0000769c g     F .text	000001bc __smakebuf_r
00014f9c g     O .bss	00000004 sobel_rgb565
000027bc g     F .text	00000098 strlen
000105b0 g     F .text	00000154 open
0000d13c g     F .text	000000dc .hidden __gedf2
00013360 g     O .rwdata	00000004 __wctomb
000095f0 g     F .text	00000018 __sprint_r
0001009c g     F .text	00000034 alt_icache_flush_all
00013380 g     O .rwdata	00000004 alt_priority_mask
00010120 g     F .text	00000088 alt_ic_irq_enable
00004a4c g     F .text	0000001c __vfprintf_internal
0000b414 g     F .text	0000005c _wctomb_r
0000da24 g     F .text	000008fc .hidden __subdf3
00008064 g     F .text	000000b0 __lo0bits
00013384 g     O .rwdata	00000008 alt_alarm_list
0000ffdc g     F .text	00000060 _do_ctors
0000b324 g     F .text	000000c0 wcrtomb
0000e5c4 g     F .text	000000d0 close
0000e8f4 g     F .text	00000084 alt_load
0000af40 g     F .text	00000080 fputwc
00001e08 g     F .text	00000014 free
00006b10 g     F .text	00000004 __sinit_lock_acquire
00007dd8 g     F .text	00000120 __multadd
00007db0 g     F .text	00000028 _Bfree
00000724 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10940204 	addi	r2,r2,20488
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10940204 	addi	r2,r2,20488
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a72417 	ldw	r2,-25456(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a72417 	ldw	r2,-25456(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     250:	d6acd314 	ori	gp,gp,45900
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	1093de14 	ori	r2,r2,20344

    movhi r3, %hi(__bss_end)
     25c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     260:	18d44214 	ori	r3,r3,20744

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_data_end+0xff000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000e8f40 	call	e8f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000ea880 	call	ea88 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_data_end+0xff00027c>

00000280 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     280:	00804034 	movhi	r2,256
     284:	10842744 	addi	r2,r2,4253
     288:	00c00084 	movi	r3,2
     28c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     290:	00804034 	movhi	r2,256
     294:	10841304 	addi	r2,r2,4172
     298:	00c00044 	movi	r3,1
     29c:	10c00025 	stbio	r3,0(r2)
     2a0:	008003f4 	movhi	r2,15
     2a4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2a8:	0001883a 	nop
     2ac:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2b0:	103ffd1e 	bne	r2,zero,2a8 <__alt_data_end+0xff0002a8>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2b4:	00804034 	movhi	r2,256
     2b8:	10841304 	addi	r2,r2,4172
     2bc:	10000025 	stbio	zero,0(r2)
     2c0:	008003f4 	movhi	r2,15
     2c4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2c8:	0001883a 	nop
     2cc:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2d0:	103ffd1e 	bne	r2,zero,2c8 <__alt_data_end+0xff0002c8>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2d4:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     2d8:	01800044 	movi	r6,1
     2dc:	014ce184 	movi	r5,13190
     2e0:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2e4:	dfc00315 	stw	ra,12(sp)
     2e8:	dc800215 	stw	r18,8(sp)
     2ec:	dc400115 	stw	r17,4(sp)
     2f0:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     2f4:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     2f8:	000d883a 	mov	r6,zero
     2fc:	014ce184 	movi	r5,13190
     300:	01001e04 	movi	r4,120
     304:	0000a240 	call	a24 <i2c_short_write>
     308:	008003f4 	movhi	r2,15
     30c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     310:	0001883a 	nop
     314:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     318:	103ffd1e 	bne	r2,zero,310 <__alt_data_end+0xff000310>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     31c:	01803104 	movi	r6,196
     320:	014c0684 	movi	r5,12314
     324:	01001e04 	movi	r4,120
     328:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     32c:	01800204 	movi	r6,8
     330:	014c8084 	movi	r5,12802
     334:	01001e04 	movi	r4,120
     338:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     33c:	0180c744 	movi	r6,797
     340:	014cfd04 	movi	r5,13300
     344:	01001e04 	movi	r4,120
     348:	0000a240 	call	a24 <i2c_short_write>
     34c:	008000b4 	movhi	r2,2
     350:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     354:	0001883a 	nop
     358:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     35c:	103ffd1e 	bne	r2,zero,354 <__alt_data_end+0xff000354>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     360:	01a3c254 	movui	r6,36617
     364:	014d0784 	movi	r5,13342
     368:	01001e04 	movi	r4,120
     36c:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     370:	01805404 	movi	r6,336
     374:	014d0704 	movi	r5,13340
     378:	01001e04 	movi	r4,120
     37c:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     380:	01a3c254 	movui	r6,36617
     384:	014d0784 	movi	r5,13342
     388:	01001e04 	movi	r4,120
     38c:	0000a240 	call	a24 <i2c_short_write>
     390:	008000b4 	movhi	r2,2
     394:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     398:	0001883a 	nop
     39c:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3a0:	103ffd1e 	bne	r2,zero,398 <__alt_data_end+0xff000398>
     3a4:	04000074 	movhi	r16,1
     3a8:	8404a404 	addi	r16,r16,4752
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     3ac:	01a3c214 	movui	r6,36616
     3b0:	014d0784 	movi	r5,13342
     3b4:	01001e04 	movi	r4,120
     3b8:	0000a240 	call	a24 <i2c_short_write>
     3bc:	84400084 	addi	r17,r16,2
     3c0:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     3c4:	8980000b 	ldhu	r6,0(r17)
     3c8:	8140000b 	ldhu	r5,0(r16)
     3cc:	01001e04 	movi	r4,120
     3d0:	84000104 	addi	r16,r16,4
     3d4:	0000a240 	call	a24 <i2c_short_write>
     3d8:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     3dc:	84bff91e 	bne	r16,r18,3c4 <__alt_data_end+0xff0003c4>
     3e0:	04000074 	movhi	r16,1
     3e4:	84045404 	addi	r16,r16,4432
     3e8:	84400084 	addi	r17,r16,2
     3ec:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     3f0:	8980000b 	ldhu	r6,0(r17)
     3f4:	8140000b 	ldhu	r5,0(r16)
     3f8:	01001e04 	movi	r4,120
     3fc:	84000104 	addi	r16,r16,4
     400:	0000a240 	call	a24 <i2c_short_write>
     404:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     408:	943ff91e 	bne	r18,r16,3f0 <__alt_data_end+0xff0003f0>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     40c:	018164c4 	movi	r6,1427
     410:	014d6904 	movi	r5,13732
     414:	01001e04 	movi	r4,120
     418:	0000a240 	call	a24 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     41c:	0189e644 	movi	r6,10137
     420:	014ce304 	movi	r5,13196
     424:	01001e04 	movi	r4,120
     428:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     42c:	01991004 	movi	r6,25664
     430:	014ce404 	movi	r5,13200
     434:	01001e04 	movi	r4,120
     438:	0000a240 	call	a24 <i2c_short_write>
     43c:	008000b4 	movhi	r2,2
     440:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     444:	0001883a 	nop
     448:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     44c:	103ffd1e 	bne	r2,zero,444 <__alt_data_end+0xff000444>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     450:	0189e6c4 	movi	r6,10139
     454:	014ce304 	movi	r5,13196
     458:	01001e04 	movi	r4,120
     45c:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     460:	01991004 	movi	r6,25664
     464:	014ce404 	movi	r5,13200
     468:	01001e04 	movi	r4,120
     46c:	0000a240 	call	a24 <i2c_short_write>
     470:	008000b4 	movhi	r2,2
     474:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     478:	0001883a 	nop
     47c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     480:	103ffd1e 	bne	r2,zero,478 <__alt_data_end+0xff000478>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     484:	01a840d4 	movui	r6,41219
     488:	014ce304 	movi	r5,13196
     48c:	01001e04 	movi	r4,120
     490:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     494:	01800144 	movi	r6,5
     498:	014ce404 	movi	r5,13200
     49c:	01001e04 	movi	r4,120
     4a0:	0000a240 	call	a24 <i2c_short_write>
     4a4:	008000b4 	movhi	r2,2
     4a8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4ac:	0001883a 	nop
     4b0:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     4b4:	103ffd1e 	bne	r2,zero,4ac <__alt_data_end+0xff0004ac>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     4b8:	01a840d4 	movui	r6,41219
     4bc:	014ce304 	movi	r5,13196
     4c0:	01001e04 	movi	r4,120
     4c4:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     4c8:	01800184 	movi	r6,6
     4cc:	014ce404 	movi	r5,13200
     4d0:	01001e04 	movi	r4,120
     4d4:	0000a240 	call	a24 <i2c_short_write>
     4d8:	008000b4 	movhi	r2,2
     4dc:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4e0:	0001883a 	nop
     4e4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     4e8:	103ffd1e 	bne	r2,zero,4e0 <__alt_data_end+0xff0004e0>
     4ec:	04000074 	movhi	r16,1
     4f0:	84040a04 	addi	r16,r16,4136
     4f4:	84400084 	addi	r17,r16,2
     4f8:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     4fc:	8980000b 	ldhu	r6,0(r17)
     500:	8140000b 	ldhu	r5,0(r16)
     504:	01001e04 	movi	r4,120
     508:	84000104 	addi	r16,r16,4
     50c:	0000a240 	call	a24 <i2c_short_write>
     510:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     514:	943ff91e 	bne	r18,r16,4fc <__alt_data_end+0xff0004fc>
     518:	008003f4 	movhi	r2,15
     51c:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     520:	0001883a 	nop
     524:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     528:	103ffd1e 	bne	r2,zero,520 <__alt_data_end+0xff000520>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     52c:	01800804 	movi	r6,32
     530:	014ccb84 	movi	r5,13102
     534:	01001e04 	movi	r4,120
     538:	0000a240 	call	a24 <i2c_short_write>
     53c:	008003f4 	movhi	r2,15
     540:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     544:	0001883a 	nop
     548:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     54c:	103ffd1e 	bne	r2,zero,544 <__alt_data_end+0xff000544>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     550:	01800884 	movi	r6,34
     554:	014d0104 	movi	r5,13316
     558:	01001e04 	movi	r4,120
     55c:	0000a240 	call	a24 <i2c_short_write>
     560:	008003f4 	movhi	r2,15
     564:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     568:	0001883a 	nop
     56c:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     570:	103ffd1e 	bne	r2,zero,568 <__alt_data_end+0xff000568>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     574:	018009c4 	movi	r6,39
     578:	014c1004 	movi	r5,12352
     57c:	01001e04 	movi	r4,120
}
     580:	dfc00317 	ldw	ra,12(sp)
     584:	dc800217 	ldw	r18,8(sp)
     588:	dc400117 	ldw	r17,4(sp)
     58c:	dc000017 	ldw	r16,0(sp)
     590:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     594:	0000a241 	jmpi	a24 <i2c_short_write>

00000598 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     598:	00c04034 	movhi	r3,256
     59c:	18c41304 	addi	r3,r3,4172
     5a0:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5a4:	1080010c 	andi	r2,r2,4
     5a8:	103ffd26 	beq	r2,zero,5a0 <__alt_data_end+0xff0005a0>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     5ac:	00804034 	movhi	r2,256
     5b0:	10841004 	addi	r2,r2,4160
}
     5b4:	1080002b 	ldhuio	r2,0(r2)
     5b8:	f800283a 	ret

000005bc <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5bc:	00c04034 	movhi	r3,256
     5c0:	18c41304 	addi	r3,r3,4172
     5c4:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5c8:	1080010c 	andi	r2,r2,4
     5cc:	103ffd26 	beq	r2,zero,5c4 <__alt_data_end+0xff0005c4>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     5d0:	00804034 	movhi	r2,256
     5d4:	10841104 	addi	r2,r2,4164
}
     5d8:	1080002b 	ldhuio	r2,0(r2)
     5dc:	f800283a 	ret

000005e0 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5e0:	00c04034 	movhi	r3,256
     5e4:	18c41304 	addi	r3,r3,4172
     5e8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5ec:	1080010c 	andi	r2,r2,4
     5f0:	103ffd26 	beq	r2,zero,5e8 <__alt_data_end+0xff0005e8>
	printf("Nr. of bytes each line    : %d\n",
     5f4:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     5f8:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     5fc:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     600:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     604:	1140002b 	ldhuio	r5,0(r2)
     608:	01000074 	movhi	r4,1
     60c:	2103f204 	addi	r4,r4,4040
     610:	297fffcc 	andi	r5,r5,65535
     614:	00026580 	call	2658 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     618:	00804034 	movhi	r2,256
     61c:	10841104 	addi	r2,r2,4164
     620:	1140002b 	ldhuio	r5,0(r2)
     624:	01000074 	movhi	r4,1
     628:	2103fa04 	addi	r4,r4,4072
     62c:	297fffcc 	andi	r5,r5,65535
     630:	00026580 	call	2658 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     634:	00804034 	movhi	r2,256
     638:	10841204 	addi	r2,r2,4168
     63c:	1140002b 	ldhuio	r5,0(r2)
     640:	01000074 	movhi	r4,1
     644:	21040204 	addi	r4,r4,4104
     648:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     64c:	dfc00017 	ldw	ra,0(sp)
     650:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     654:	00026581 	jmpi	2658 <printf>

00000658 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     658:	21003fcc 	andi	r4,r4,255
     65c:	2100201c 	xori	r4,r4,128
     660:	213fe004 	addi	r4,r4,-128
     664:	00800044 	movi	r2,1
     668:	20801226 	beq	r4,r2,6b4 <cam_set_image_pointer+0x5c>
     66c:	11000c0e 	bge	r2,r4,6a0 <cam_set_image_pointer+0x48>
     670:	00800084 	movi	r2,2
     674:	20800626 	beq	r4,r2,690 <cam_set_image_pointer+0x38>
     678:	008000c4 	movi	r2,3
     67c:	2080111e 	bne	r4,r2,6c4 <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     680:	00804034 	movhi	r2,256
     684:	10841704 	addi	r2,r2,4188
     688:	11400035 	stwio	r5,0(r2)
     68c:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     690:	00804034 	movhi	r2,256
     694:	10841604 	addi	r2,r2,4184
     698:	11400035 	stwio	r5,0(r2)
                break;
     69c:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     6a0:	2000091e 	bne	r4,zero,6c8 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     6a4:	00804034 	movhi	r2,256
     6a8:	10841404 	addi	r2,r2,4176
     6ac:	11400035 	stwio	r5,0(r2)
	            break;
     6b0:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     6b4:	00804034 	movhi	r2,256
     6b8:	10841504 	addi	r2,r2,4180
     6bc:	11400035 	stwio	r5,0(r2)
                break;
     6c0:	f800283a 	ret
     6c4:	f800283a 	ret
     6c8:	f800283a 	ret

000006cc <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     6cc:	00804034 	movhi	r2,256
     6d0:	10841304 	addi	r2,r2,4172
     6d4:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     6d8:	1080800c 	andi	r2,r2,512
     6dc:	f800283a 	ret

000006e0 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     6e0:	00804034 	movhi	r2,256
     6e4:	10841404 	addi	r2,r2,4176
}
     6e8:	10800037 	ldwio	r2,0(r2)
     6ec:	f800283a 	ret

000006f0 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     6f0:	00c04034 	movhi	r3,256
     6f4:	18c41304 	addi	r3,r3,4172
     6f8:	00800204 	movi	r2,8
     6fc:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     700:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     704:	1080020c 	andi	r2,r2,8
     708:	103ffd1e 	bne	r2,zero,700 <__alt_data_end+0xff000700>
}
     70c:	f800283a 	ret

00000710 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     710:	00804034 	movhi	r2,256
     714:	10841304 	addi	r2,r2,4172
     718:	00c00404 	movi	r3,16
     71c:	10c0002d 	sthio	r3,0(r2)
     720:	f800283a 	ret

00000724 <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     724:	00c04034 	movhi	r3,256
     728:	18c41304 	addi	r3,r3,4172
     72c:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     730:	1080200c 	andi	r2,r2,128
     734:	1000021e 	bne	r2,zero,740 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     738:	0005883a 	mov	r2,zero
}
     73c:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     740:	00804004 	movi	r2,256
     744:	1880002d 	sthio	r2,0(r3)
		return 1;
     748:	00800044 	movi	r2,1
     74c:	f800283a 	ret

00000750 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     750:	00804034 	movhi	r2,256
     754:	10842804 	addi	r2,r2,4256
     758:	10800023 	ldbuio	r2,0(r2)
}
     75c:	0084303a 	nor	r2,zero,r2
     760:	f800283a 	ret

00000764 <conv_grayscale>:
		            int height) {
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     764:	d0a70d17 	ldw	r2,-25548(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     768:	defff404 	addi	sp,sp,-48
     76c:	dc400315 	stw	r17,12(sp)
     770:	dc000215 	stw	r16,8(sp)
     774:	dfc00b15 	stw	ra,44(sp)
     778:	df000a15 	stw	fp,40(sp)
     77c:	ddc00915 	stw	r23,36(sp)
     780:	dd800815 	stw	r22,32(sp)
     784:	dd400715 	stw	r21,28(sp)
     788:	dd000615 	stw	r20,24(sp)
     78c:	dcc00515 	stw	r19,20(sp)
     790:	dc800415 	stw	r18,16(sp)
     794:	d9800015 	stw	r6,0(sp)
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
     798:	d1670c15 	stw	r5,-25552(gp)
	grayscape_height = height;
     79c:	d1a70b15 	stw	r6,-25556(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     7a0:	2821883a 	mov	r16,r5
     7a4:	2023883a 	mov	r17,r4
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     7a8:	10000226 	beq	r2,zero,7b4 <conv_grayscale+0x50>
		free(grayscale_array);
     7ac:	1009883a 	mov	r4,r2
     7b0:	0001e080 	call	1e08 <free>
	grayscale_array = (unsigned char *) malloc(width*height);
     7b4:	d8c00017 	ldw	r3,0(sp)
     7b8:	80c9383a 	mul	r4,r16,r3
     7bc:	0001df40 	call	1df4 <malloc>
	for (y = 0 ; y < height ; y++) {
     7c0:	d8c00017 	ldw	r3,0(sp)
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
     7c4:	d0a70d15 	stw	r2,-25548(gp)
	for (y = 0 ; y < height ; y++) {
     7c8:	00c0310e 	bge	zero,r3,890 <conv_grayscale+0x12c>
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     7cc:	05000074 	movhi	r20,1
     7d0:	8407883a 	add	r3,r16,r16
     7d4:	a505e804 	addi	r20,r20,6048
     7d8:	d8c00115 	stw	r3,4(sp)
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     7dc:	802f883a 	mov	r23,r16
     7e0:	0025883a 	mov	r18,zero
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     7e4:	070003c4 	movi	fp,15
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     7e8:	0400230e 	bge	zero,r16,878 <conv_grayscale+0x114>
     7ec:	bc2bc83a 	sub	r21,r23,r16
     7f0:	882d883a 	mov	r22,r17
     7f4:	00000506 	br	80c <conv_grayscale+0xa8>
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     7f8:	10800003 	ldbu	r2,0(r2)
     7fc:	98800025 	stbio	r2,0(r19)
     800:	ad400044 	addi	r21,r21,1
     804:	b5800084 	addi	r22,r22,2
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     808:	bd401b26 	beq	r23,r21,878 <conv_grayscale+0x114>
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     80c:	b100000b 	ldhu	r4,0(r22)
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     810:	01401904 	movi	r5,100
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     814:	2006d2fa 	srli	r3,r4,11
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     818:	2004d17a 	srli	r2,r4,5
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
     81c:	200890fa 	slli	r4,r4,3
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     820:	180690fa 	slli	r3,r3,3
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     824:	1085883a 	add	r2,r2,r2
     828:	1085883a 	add	r2,r2,r2
     82c:	10803fcc 	andi	r2,r2,255
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     830:	18c00564 	muli	r3,r3,21
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     834:	10801224 	muli	r2,r2,72
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
     838:	21003fcc 	andi	r4,r4,255
     83c:	210001e4 	muli	r4,r4,7
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     840:	10c5883a 	add	r2,r2,r3
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     844:	d0e70d17 	ldw	r3,-25548(gp)
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
     848:	2089883a 	add	r4,r4,r2
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     84c:	2004913a 	slli	r2,r4,4
     850:	214eb03a 	or	r7,r4,r5
     854:	1d67883a 	add	r19,r3,r21
     858:	1144b03a 	or	r2,r2,r5
     85c:	1505883a 	add	r2,r2,r20
     860:	e1ffe52e 	bgeu	fp,r7,7f8 <__alt_data_end+0xff0007f8>
     864:	0001c400 	call	1c40 <__divsi3>
     868:	98800025 	stbio	r2,0(r19)
     86c:	ad400044 	addi	r21,r21,1
     870:	b5800084 	addi	r22,r22,2
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     874:	bd7fe51e 	bne	r23,r21,80c <__alt_data_end+0xff00080c>
     878:	d8c00117 	ldw	r3,4(sp)
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     87c:	94800044 	addi	r18,r18,1
     880:	bc2f883a 	add	r23,r23,r16
     884:	88e3883a 	add	r17,r17,r3
     888:	d8c00017 	ldw	r3,0(sp)
     88c:	1cbfd61e 	bne	r3,r18,7e8 <__alt_data_end+0xff0007e8>
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
		}
	}
}
     890:	dfc00b17 	ldw	ra,44(sp)
     894:	df000a17 	ldw	fp,40(sp)
     898:	ddc00917 	ldw	r23,36(sp)
     89c:	dd800817 	ldw	r22,32(sp)
     8a0:	dd400717 	ldw	r21,28(sp)
     8a4:	dd000617 	ldw	r20,24(sp)
     8a8:	dcc00517 	ldw	r19,20(sp)
     8ac:	dc800417 	ldw	r18,16(sp)
     8b0:	dc400317 	ldw	r17,12(sp)
     8b4:	dc000217 	ldw	r16,8(sp)
     8b8:	dec00c04 	addi	sp,sp,48
     8bc:	f800283a 	ret

000008c0 <get_grayscale_width>:


int get_grayscale_width() {
	return grayscale_width;
}
     8c0:	d0a70c17 	ldw	r2,-25552(gp)
     8c4:	f800283a 	ret

000008c8 <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     8c8:	d0a70b17 	ldw	r2,-25556(gp)
     8cc:	f800283a 	ret

000008d0 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     8d0:	d0a70d17 	ldw	r2,-25548(gp)
     8d4:	f800283a 	ret

000008d8 <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8d8:	00c04034 	movhi	r3,256
     8dc:	18c42704 	addi	r3,r3,4252
     8e0:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8e4:	108000cc 	andi	r2,r2,3
     8e8:	103ffd1e 	bne	r2,zero,8e0 <__alt_data_end+0xff0008e0>
}
     8ec:	f800283a 	ret

000008f0 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8f0:	01004034 	movhi	r4,256
     8f4:	21042704 	addi	r4,r4,4252
     8f8:	00c04034 	movhi	r3,256
     8fc:	18c42704 	addi	r3,r3,4252
     900:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     904:	108000cc 	andi	r2,r2,3
     908:	103ffb1e 	bne	r2,zero,8f8 <__alt_data_end+0xff0008f8>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     90c:	00800104 	movi	r2,4
     910:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     914:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     918:	108000cc 	andi	r2,r2,3
     91c:	103ffd1e 	bne	r2,zero,914 <__alt_data_end+0xff000914>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     920:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     924:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     928:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     92c:	dfc00315 	stw	ra,12(sp)
     930:	dc800215 	stw	r18,8(sp)
     934:	dc400115 	stw	r17,4(sp)
     938:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     93c:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     940:	01000074 	movhi	r4,1
     944:	2104ea04 	addi	r4,r4,5032
     948:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     94c:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     950:	00026580 	call	2658 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     954:	04800a0e 	bge	zero,r18,980 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     958:	04404034 	movhi	r17,256
     95c:	8c442404 	addi	r17,r17,4240
     960:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     964:	89800037 	ldwio	r6,0(r17)
     968:	01000074 	movhi	r4,1
     96c:	800b883a 	mov	r5,r16
     970:	2104f304 	addi	r4,r4,5068
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     974:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     978:	00026580 	call	2658 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     97c:	943ff81e 	bne	r18,r16,960 <__alt_data_end+0xff000960>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     980:	dfc00317 	ldw	ra,12(sp)
     984:	dc800217 	ldw	r18,8(sp)
     988:	dc400117 	ldw	r17,4(sp)
     98c:	dc000017 	ldw	r16,0(sp)
     990:	dec00404 	addi	sp,sp,16
     994:	f800283a 	ret

00000998 <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     998:	01804034 	movhi	r6,256
     99c:	31842704 	addi	r6,r6,4252
     9a0:	00c04034 	movhi	r3,256
     9a4:	18c42704 	addi	r3,r3,4252
     9a8:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9ac:	108000cc 	andi	r2,r2,3
     9b0:	103ffb1e 	bne	r2,zero,9a0 <__alt_data_end+0xff0009a0>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     9b4:	00804034 	movhi	r2,256
     9b8:	21003fcc 	andi	r4,r4,255
     9bc:	10842404 	addi	r2,r2,4240
     9c0:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     9c4:	00804034 	movhi	r2,256
     9c8:	10842504 	addi	r2,r2,4244
     9cc:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     9d0:	008010c4 	movi	r2,67
     9d4:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9d8:	180b883a 	mov	r5,r3
     9dc:	00c04034 	movhi	r3,256
     9e0:	18c42704 	addi	r3,r3,4252
     9e4:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9e8:	108000cc 	andi	r2,r2,3
     9ec:	103ffb1e 	bne	r2,zero,9dc <__alt_data_end+0xff0009dc>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     9f0:	00804034 	movhi	r2,256
     9f4:	21000044 	addi	r4,r4,1
     9f8:	10842404 	addi	r2,r2,4240
     9fc:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     a00:	00800884 	movi	r2,34
     a04:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     a08:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     a0c:	108000cc 	andi	r2,r2,3
     a10:	103ffd1e 	bne	r2,zero,a08 <__alt_data_end+0xff000a08>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     a14:	00804034 	movhi	r2,256
     a18:	10842604 	addi	r2,r2,4248
}
     a1c:	10800037 	ldwio	r2,0(r2)
     a20:	f800283a 	ret

00000a24 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     a24:	01c04034 	movhi	r7,256
     a28:	39c42704 	addi	r7,r7,4252
     a2c:	00c04034 	movhi	r3,256
     a30:	18c42704 	addi	r3,r3,4252
     a34:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     a38:	108000cc 	andi	r2,r2,3
     a3c:	103ffb1e 	bne	r2,zero,a2c <__alt_data_end+0xff000a2c>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     a40:	00804034 	movhi	r2,256
     a44:	10842404 	addi	r2,r2,4240
     a48:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     a4c:	00804034 	movhi	r2,256
     a50:	10842504 	addi	r2,r2,4244
     a54:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     a58:	00804034 	movhi	r2,256
     a5c:	10842604 	addi	r2,r2,4248
     a60:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     a64:	00801084 	movi	r2,66
     a68:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     a6c:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     a70:	108000cc 	andi	r2,r2,3
     a74:	103ffd1e 	bne	r2,zero,a6c <__alt_data_end+0xff000a6c>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     a78:	f800283a 	ret

00000a7c <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a7c:	00804034 	movhi	r2,256
     a80:	10841804 	addi	r2,r2,4192
     a84:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a88:	01000284 	movi	r4,10
     a8c:	000ed981 	jmpi	ed98 <usleep>

00000a90 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a90:	00804034 	movhi	r2,256
     a94:	10841904 	addi	r2,r2,4196
     a98:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a9c:	01000284 	movi	r4,10
     aa0:	000ed981 	jmpi	ed98 <usleep>

00000aa4 <init_LCD>:
}


void init_LCD() {
     aa4:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     aa8:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     aac:	dd400515 	stw	r21,20(sp)
     ab0:	dfc00815 	stw	ra,32(sp)
     ab4:	ddc00715 	stw	r23,28(sp)
     ab8:	dd800615 	stw	r22,24(sp)
     abc:	dd000415 	stw	r20,16(sp)
     ac0:	dcc00315 	stw	r19,12(sp)
     ac4:	dc800215 	stw	r18,8(sp)
     ac8:	dc400115 	stw	r17,4(sp)
     acc:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     ad0:	05400084 	movi	r21,2
     ad4:	10841a04 	addi	r2,r2,4200
     ad8:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     adc:	04804034 	movhi	r18,256
     ae0:	94841804 	addi	r18,r18,4192
     ae4:	00800a04 	movi	r2,40
     ae8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     aec:	04000284 	movi	r16,10
     af0:	8009883a 	mov	r4,r16
     af4:	000ed980 	call	ed98 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     af8:	05c00444 	movi	r23,17
     afc:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     b00:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b04:	04404034 	movhi	r17,256
     b08:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     b0c:	000ed980 	call	ed98 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b10:	0027883a 	mov	r19,zero
     b14:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b18:	8009883a 	mov	r4,r16
     b1c:	000ed980 	call	ed98 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b20:	008032c4 	movi	r2,203
     b24:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b28:	8009883a 	mov	r4,r16
     b2c:	000ed980 	call	ed98 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b30:	00800e44 	movi	r2,57
     b34:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b38:	8009883a 	mov	r4,r16
     b3c:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b40:	00800b04 	movi	r2,44
     b44:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b48:	8009883a 	mov	r4,r16
     b4c:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b50:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b54:	8009883a 	mov	r4,r16
     b58:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b5c:	00800d04 	movi	r2,52
     b60:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b64:	8009883a 	mov	r4,r16
     b68:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b6c:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     b70:	8009883a 	mov	r4,r16
     b74:	000ed980 	call	ed98 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b78:	008033c4 	movi	r2,207
     b7c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b80:	8009883a 	mov	r4,r16
     b84:	000ed980 	call	ed98 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b88:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b8c:	8009883a 	mov	r4,r16
     b90:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b94:	05802044 	movi	r22,129
     b98:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     b9c:	8009883a 	mov	r4,r16
     ba0:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ba4:	00800c04 	movi	r2,48
     ba8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bac:	8009883a 	mov	r4,r16
     bb0:	000ed980 	call	ed98 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bb4:	00803a04 	movi	r2,232
     bb8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bbc:	8009883a 	mov	r4,r16
     bc0:	000ed980 	call	ed98 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bc4:	00802144 	movi	r2,133
     bc8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bcc:	8009883a 	mov	r4,r16
     bd0:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bd4:	05000044 	movi	r20,1
     bd8:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     bdc:	8009883a 	mov	r4,r16
     be0:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     be4:	00801e44 	movi	r2,121
     be8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bec:	8009883a 	mov	r4,r16
     bf0:	000ed980 	call	ed98 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bf4:	00803a84 	movi	r2,234
     bf8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bfc:	8009883a 	mov	r4,r16
     c00:	000ed980 	call	ed98 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c04:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c08:	8009883a 	mov	r4,r16
     c0c:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c10:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c14:	8009883a 	mov	r4,r16
     c18:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c1c:	00801904 	movi	r2,100
     c20:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c24:	8009883a 	mov	r4,r16
     c28:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c2c:	008000c4 	movi	r2,3
     c30:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c34:	8009883a 	mov	r4,r16
     c38:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c3c:	00800484 	movi	r2,18
     c40:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c44:	8009883a 	mov	r4,r16
     c48:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c4c:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     c50:	8009883a 	mov	r4,r16
     c54:	000ed980 	call	ed98 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c58:	00803dc4 	movi	r2,247
     c5c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c60:	8009883a 	mov	r4,r16
     c64:	000ed980 	call	ed98 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c68:	00800804 	movi	r2,32
     c6c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c70:	8009883a 	mov	r4,r16
     c74:	000ed980 	call	ed98 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c78:	00803004 	movi	r2,192
     c7c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c80:	8009883a 	mov	r4,r16
     c84:	000ed980 	call	ed98 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c88:	05800984 	movi	r22,38
     c8c:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     c90:	8009883a 	mov	r4,r16
     c94:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c98:	00800104 	movi	r2,4
     c9c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ca0:	8009883a 	mov	r4,r16
     ca4:	000ed980 	call	ed98 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ca8:	00803044 	movi	r2,193
     cac:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cb0:	8009883a 	mov	r4,r16
     cb4:	000ed980 	call	ed98 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cb8:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     cbc:	8009883a 	mov	r4,r16
     cc0:	000ed980 	call	ed98 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cc4:	00803144 	movi	r2,197
     cc8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ccc:	8009883a 	mov	r4,r16
     cd0:	000ed980 	call	ed98 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cd4:	00800d44 	movi	r2,53
     cd8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cdc:	8009883a 	mov	r4,r16
     ce0:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ce4:	00800f84 	movi	r2,62
     ce8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cec:	8009883a 	mov	r4,r16
     cf0:	000ed980 	call	ed98 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cf4:	008031c4 	movi	r2,199
     cf8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cfc:	8009883a 	mov	r4,r16
     d00:	000ed980 	call	ed98 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d04:	00802f84 	movi	r2,190
     d08:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d0c:	8009883a 	mov	r4,r16
     d10:	000ed980 	call	ed98 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d14:	00802c44 	movi	r2,177
     d18:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d1c:	8009883a 	mov	r4,r16
     d20:	000ed980 	call	ed98 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d24:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d28:	8009883a 	mov	r4,r16
     d2c:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d30:	00800404 	movi	r2,16
     d34:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d38:	8009883a 	mov	r4,r16
     d3c:	000ed980 	call	ed98 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d40:	00800e84 	movi	r2,58
     d44:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d48:	8009883a 	mov	r4,r16
     d4c:	000ed980 	call	ed98 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d50:	00801544 	movi	r2,85
     d54:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d58:	8009883a 	mov	r4,r16
     d5c:	000ed980 	call	ed98 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d60:	00802d84 	movi	r2,182
     d64:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d68:	8009883a 	mov	r4,r16
     d6c:	000ed980 	call	ed98 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d70:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     d74:	8009883a 	mov	r4,r16
     d78:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d7c:	00802884 	movi	r2,162
     d80:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d84:	8009883a 	mov	r4,r16
     d88:	000ed980 	call	ed98 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d8c:	00803c84 	movi	r2,242
     d90:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d94:	8009883a 	mov	r4,r16
     d98:	000ed980 	call	ed98 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d9c:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     da0:	8009883a 	mov	r4,r16
     da4:	000ed980 	call	ed98 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     da8:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     dac:	8009883a 	mov	r4,r16
     db0:	000ed980 	call	ed98 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     db4:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     db8:	8009883a 	mov	r4,r16
     dbc:	000ed980 	call	ed98 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     dc0:	00800d84 	movi	r2,54
     dc4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     dc8:	8009883a 	mov	r4,r16
     dcc:	000ed980 	call	ed98 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dd0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dd4:	8009883a 	mov	r4,r16
     dd8:	000ed980 	call	ed98 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ddc:	00800a84 	movi	r2,42
     de0:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     de4:	8009883a 	mov	r4,r16
     de8:	000ed980 	call	ed98 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dec:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     df0:	8009883a 	mov	r4,r16
     df4:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     df8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dfc:	8009883a 	mov	r4,r16
     e00:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e04:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     e08:	8009883a 	mov	r4,r16
     e0c:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e10:	00803bc4 	movi	r2,239
     e14:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     e18:	8009883a 	mov	r4,r16
     e1c:	000ed980 	call	ed98 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e20:	00800ac4 	movi	r2,43
     e24:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     e28:	8009883a 	mov	r4,r16
     e2c:	000ed980 	call	ed98 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e30:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     e34:	8009883a 	mov	r4,r16
     e38:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e3c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     e40:	8009883a 	mov	r4,r16
     e44:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e48:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     e4c:	8009883a 	mov	r4,r16
     e50:	000ed980 	call	ed98 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e54:	00800fc4 	movi	r2,63
     e58:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     e5c:	8009883a 	mov	r4,r16
     e60:	000ed980 	call	ed98 <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     e64:	00c04034 	movhi	r3,256
     e68:	00803c04 	movi	r2,240
     e6c:	18c41d04 	addi	r3,r3,4212
     e70:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     e74:	d0a70e8d 	sth	r2,-25542(gp)
	LCD_height = 320;
     e78:	00805004 	movi	r2,320
     e7c:	d0a70e0d 	sth	r2,-25544(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e80:	00800a44 	movi	r2,41
     e84:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     e88:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     e8c:	dfc00817 	ldw	ra,32(sp)
     e90:	ddc00717 	ldw	r23,28(sp)
     e94:	dd800617 	ldw	r22,24(sp)
     e98:	dd400517 	ldw	r21,20(sp)
     e9c:	dd000417 	ldw	r20,16(sp)
     ea0:	dcc00317 	ldw	r19,12(sp)
     ea4:	dc800217 	ldw	r18,8(sp)
     ea8:	dc400117 	ldw	r17,4(sp)
     eac:	dc000017 	ldw	r16,0(sp)
     eb0:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     eb4:	000ed981 	jmpi	ed98 <usleep>

00000eb8 <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     eb8:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     ebc:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     ec0:	dc000015 	stw	r16,0(sp)
     ec4:	dfc00415 	stw	ra,16(sp)
     ec8:	dcc00315 	stw	r19,12(sp)
     ecc:	dc800215 	stw	r18,8(sp)
     ed0:	dc400115 	stw	r17,4(sp)
     ed4:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     ed8:	10841e04 	addi	r2,r2,4216
     edc:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ee0:	00804034 	movhi	r2,256
     ee4:	10841804 	addi	r2,r2,4192
     ee8:	00c00b04 	movi	r3,44
     eec:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ef0:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     ef4:	01000284 	movi	r4,10
     ef8:	000ed980 	call	ed98 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     efc:	90000a26 	beq	r18,zero,f28 <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     f00:	04c04034 	movhi	r19,256
     f04:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     f08:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     f0c:	8080000b 	ldhu	r2,0(r16)
     f10:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     f14:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     f18:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     f1c:	000ed980 	call	ed98 <usleep>
     f20:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     f24:	8cbff91e 	bne	r17,r18,f0c <__alt_data_end+0xff000f0c>
		LCD_Write_Data(data_array[pixels]);
}
     f28:	dfc00417 	ldw	ra,16(sp)
     f2c:	dcc00317 	ldw	r19,12(sp)
     f30:	dc800217 	ldw	r18,8(sp)
     f34:	dc400117 	ldw	r17,4(sp)
     f38:	dc000017 	ldw	r16,0(sp)
     f3c:	dec00504 	addi	sp,sp,20
     f40:	f800283a 	ret

00000f44 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     f44:	d0a70e0b 	ldhu	r2,-25544(gp)
     f48:	3080010e 	bge	r6,r2,f50 <transfer_LCD_with_dma+0xc>
     f4c:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     f50:	d0e70e8b 	ldhu	r3,-25542(gp)
     f54:	28c0010e 	bge	r5,r3,f5c <transfer_LCD_with_dma+0x18>
     f58:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     f5c:	01804034 	movhi	r6,256
     f60:	31841e04 	addi	r6,r6,4216
     f64:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     f68:	01404034 	movhi	r5,256
     f6c:	29441b04 	addi	r5,r5,4204
     f70:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     f74:	18ffffcc 	andi	r3,r3,65535
     f78:	10bfffcc 	andi	r2,r2,65535
     f7c:	1885383a 	mul	r2,r3,r2
     f80:	00c04034 	movhi	r3,256
     f84:	18c41c04 	addi	r3,r3,4208
     f88:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     f8c:	39c03fcc 	andi	r7,r7,255
     f90:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f94:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f98:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f9c:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     fa0:	38000326 	beq	r7,zero,fb0 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     fa4:	00c04404 	movi	r3,272
     fa8:	10c0002d 	sthio	r3,0(r2)
     fac:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     fb0:	00c04004 	movi	r3,256
     fb4:	10c0002d 	sthio	r3,0(r2)
     fb8:	f800283a 	ret

00000fbc <main>:
#include "sobel.h"
#include "sys/alt_timestamp.h"
#include "alt_types.h"

int main()
{
     fbc:	defff604 	addi	sp,sp,-40
     fc0:	dfc00915 	stw	ra,36(sp)
     fc4:	dd400515 	stw	r21,20(sp)
     fc8:	dd000415 	stw	r20,16(sp)
     fcc:	dcc00315 	stw	r19,12(sp)
     fd0:	dc800215 	stw	r18,8(sp)
     fd4:	dc400115 	stw	r17,4(sp)
     fd8:	dc000015 	stw	r16,0(sp)
     fdc:	df000815 	stw	fp,32(sp)
     fe0:	ddc00715 	stw	r23,28(sp)
     fe4:	dd800615 	stw	r22,24(sp)
  alt_u32 start_sobel_y;
  alt_u32 stop_sobel_y;
  alt_u32 start_sobel_threshold;
  alt_u32 stop_sobel_threshold;

  init_LCD();
     fe8:	0000aa40 	call	aa4 <init_LCD>
  init_camera();
     fec:	00002800 	call	280 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     ff0:	01000604 	movi	r4,24
     ff4:	0001c300 	call	1c30 <vga_set_swap>
  alt_timestamp_start();
     ff8:	000fb400 	call	fb40 <alt_timestamp_start>

  printf("Hello from Nios II!\n");
     ffc:	01000074 	movhi	r4,1
    1000:	2104fc04 	addi	r4,r4,5104
    1004:	00027540 	call	2754 <puts>
  cam_get_profiling();
    1008:	00005e00 	call	5e0 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    100c:	00005980 	call	598 <cam_get_xsize>
    1010:	1021883a 	mov	r16,r2
    1014:	00005bc0 	call	5bc <cam_get_ysize>
    1018:	10bfffcc 	andi	r2,r2,65535
    101c:	813fffcc 	andi	r4,r16,65535
    1020:	2089383a 	mul	r4,r4,r2
	  if (new_image_available() != 0) {
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
    1024:	04800044 	movi	r18,1
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1028:	04e04414 	movui	r19,33040
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  alt_timestamp_start();

  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    102c:	0001df40 	call	1df4 <malloc>
    1030:	102b883a 	mov	r21,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1034:	00005980 	call	598 <cam_get_xsize>
    1038:	1021883a 	mov	r16,r2
    103c:	00005bc0 	call	5bc <cam_get_ysize>
    1040:	10bfffcc 	andi	r2,r2,65535
    1044:	813fffcc 	andi	r4,r16,65535
    1048:	2089383a 	mul	r4,r4,r2
    104c:	0001df40 	call	1df4 <malloc>
    1050:	1029883a 	mov	r20,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1054:	00005980 	call	598 <cam_get_xsize>
    1058:	1021883a 	mov	r16,r2
    105c:	00005bc0 	call	5bc <cam_get_ysize>
    1060:	10bfffcc 	andi	r2,r2,65535
    1064:	813fffcc 	andi	r4,r16,65535
    1068:	2089383a 	mul	r4,r4,r2
    106c:	0001df40 	call	1df4 <malloc>
    1070:	1023883a 	mov	r17,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1074:	00005980 	call	598 <cam_get_xsize>
    1078:	1021883a 	mov	r16,r2
    107c:	00005bc0 	call	5bc <cam_get_ysize>
    1080:	10bfffcc 	andi	r2,r2,65535
    1084:	813fffcc 	andi	r4,r16,65535
    1088:	2089383a 	mul	r4,r4,r2
    108c:	0001df40 	call	1df4 <malloc>
  cam_set_image_pointer(0,buffer1);
    1090:	a80b883a 	mov	r5,r21
    1094:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1098:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
    109c:	00006580 	call	658 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    10a0:	a00b883a 	mov	r5,r20
    10a4:	9009883a 	mov	r4,r18
    10a8:	00006580 	call	658 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    10ac:	880b883a 	mov	r5,r17
    10b0:	01000084 	movi	r4,2
    10b4:	00006580 	call	658 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    10b8:	800b883a 	mov	r5,r16
    10bc:	010000c4 	movi	r4,3
    10c0:	00006580 	call	658 <cam_set_image_pointer>
  enable_continues_mode();
    10c4:	00007100 	call	710 <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    10c8:	00005980 	call	598 <cam_get_xsize>
    10cc:	1021883a 	mov	r16,r2
    10d0:	00005bc0 	call	5bc <cam_get_ysize>
    10d4:	813fffcc 	andi	r4,r16,65535
    10d8:	2488d83a 	srl	r4,r4,r18
    10dc:	117fffcc 	andi	r5,r2,65535
    10e0:	00014100 	call	1410 <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
    10e4:	00007240 	call	724 <new_image_available>
    10e8:	10803fcc 	andi	r2,r2,255
    10ec:	1080201c 	xori	r2,r2,128
    10f0:	10bfe004 	addi	r2,r2,-128
    10f4:	103ffb26 	beq	r2,zero,10e4 <__alt_data_end+0xff0010e4>
		  if (current_image_valid()!=0) {
    10f8:	00006cc0 	call	6cc <current_image_valid>
    10fc:	10bfffcc 	andi	r2,r2,65535
    1100:	10a0001c 	xori	r2,r2,32768
    1104:	10a00004 	addi	r2,r2,-32768
    1108:	103ff626 	beq	r2,zero,10e4 <__alt_data_end+0xff0010e4>
			  current_mode = DIPSW_get_value();
    110c:	00007500 	call	750 <DIPSW_get_value>
    1110:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
    1114:	00006e00 	call	6e0 <current_image_pointer>
    1118:	1023883a 	mov	r17,r2
		      switch (mode) {
    111c:	808001cc 	andi	r2,r16,7
    1120:	14809a26 	beq	r2,r18,138c <main+0x3d0>
    1124:	10008726 	beq	r2,zero,1344 <main+0x388>
    1128:	00c00084 	movi	r3,2
    112c:	10c07926 	beq	r2,r3,1314 <main+0x358>
    1130:	00c000c4 	movi	r3,3
    1134:	10c0221e 	bne	r2,r3,11c0 <main+0x204>
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1138:	00005980 	call	598 <cam_get_xsize>
    113c:	1029883a 	mov	r20,r2
		    		                  cam_get_ysize());
    1140:	00005bc0 	call	5bc <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : conv_grayscale((void *)image,
    1144:	a17fffcc 	andi	r5,r20,65535
    1148:	280ad07a 	srli	r5,r5,1
    114c:	8809883a 	mov	r4,r17
    1150:	11bfffcc 	andi	r6,r2,65535
    1154:	00007640 	call	764 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    1158:	00008d00 	call	8d0 <get_grayscale_picture>
		               sobel_x(grayscale);
    115c:	1009883a 	mov	r4,r2
		      	  	   }
		      	  	   break;
		      case 3 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    1160:	1023883a 	mov	r17,r2
		               sobel_x(grayscale);
    1164:	000161c0 	call	161c <sobel_x>
		               sobel_y_with_rgb(grayscale);
    1168:	8809883a 	mov	r4,r17
    116c:	00019d80 	call	19d8 <sobel_y_with_rgb>
		               image = GetSobel_rgb();
    1170:	0001c100 	call	1c10 <GetSobel_rgb>
    1174:	1029883a 	mov	r20,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    1178:	00005980 	call	598 <cam_get_xsize>
    117c:	1023883a 	mov	r17,r2
		      		                	cam_get_ysize(),0);
    1180:	00005bc0 	call	5bc <cam_get_ysize>
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x(grayscale);
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1184:	897fffcc 	andi	r5,r17,65535
    1188:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    118c:	84003fcc 	andi	r16,r16,255
    1190:	8400201c 	xori	r16,r16,128
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x(grayscale);
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1194:	000f883a 	mov	r7,zero
    1198:	11bfffcc 	andi	r6,r2,65535
    119c:	a4c9883a 	add	r4,r20,r19
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11a0:	843fe004 	addi	r16,r16,-128
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x(grayscale);
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    11a4:	0000f440 	call	f44 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11a8:	803fce0e 	bge	r16,zero,10e4 <__alt_data_end+0xff0010e4>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    11ac:	01000204 	movi	r4,8
    11b0:	0001c300 	call	1c30 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    11b4:	a009883a 	mov	r4,r20
    11b8:	0001c200 	call	1c20 <vga_set_pointer>
    11bc:	003fc906 	br	10e4 <__alt_data_end+0xff0010e4>
		      	  	   }
		      	  	   break;
		      default: start_grayscale = alt_timestamp();
    11c0:	000fbb80 	call	fbb8 <alt_timestamp>
    11c4:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    11c8:	00005980 	call	598 <cam_get_xsize>
    11cc:	1029883a 	mov	r20,r2
	                                  cam_get_ysize());
    11d0:	00005bc0 	call	5bc <cam_get_ysize>
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    11d4:	a17fffcc 	andi	r5,r20,65535
    11d8:	280ad07a 	srli	r5,r5,1
    11dc:	11bfffcc 	andi	r6,r2,65535
    11e0:	8809883a 	mov	r4,r17
    11e4:	00007640 	call	764 <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
                       grayscale = get_grayscale_picture();
    11e8:	00008d00 	call	8d0 <get_grayscale_picture>
    11ec:	102b883a 	mov	r21,r2
		    	  	   stop_grayscale = alt_timestamp();
    11f0:	000fbb80 	call	fbb8 <alt_timestamp>
		    	  	   printf("Grayscale : %d cycles/pixel\n", ((stop_grayscale - start_grayscale) / 196608));
    11f4:	15adc83a 	sub	r22,r2,r22
    11f8:	b009883a 	mov	r4,r22
    11fc:	014000f4 	movhi	r5,3
    1200:	0001d380 	call	1d38 <__udivsi3>
    1204:	01000074 	movhi	r4,1
    1208:	100b883a 	mov	r5,r2
    120c:	21050104 	addi	r4,r4,5124
    1210:	00026580 	call	2658 <printf>

		    	  	   start_sobel_x = alt_timestamp();
    1214:	000fbb80 	call	fbb8 <alt_timestamp>
                       sobel_x(grayscale);
    1218:	a809883a 	mov	r4,r21
	                                  cam_get_ysize());
                       grayscale = get_grayscale_picture();
		    	  	   stop_grayscale = alt_timestamp();
		    	  	   printf("Grayscale : %d cycles/pixel\n", ((stop_grayscale - start_grayscale) / 196608));

		    	  	   start_sobel_x = alt_timestamp();
    121c:	1029883a 	mov	r20,r2
                       sobel_x(grayscale);
    1220:	000161c0 	call	161c <sobel_x>
                       stop_sobel_x = alt_timestamp();
    1224:	000fbb80 	call	fbb8 <alt_timestamp>
                       printf("Sobel x : %d cycles/pixel \n", ((stop_sobel_x - start_sobel_x) / 196608));
    1228:	1529c83a 	sub	r20,r2,r20
    122c:	a009883a 	mov	r4,r20
    1230:	014000f4 	movhi	r5,3
    1234:	0001d380 	call	1d38 <__udivsi3>
    1238:	01000074 	movhi	r4,1
    123c:	100b883a 	mov	r5,r2
    1240:	21050904 	addi	r4,r4,5156
    1244:	00026580 	call	2658 <printf>

                       start_sobel_y = alt_timestamp();
    1248:	000fbb80 	call	fbb8 <alt_timestamp>
					   sobel_y(grayscale);
    124c:	a809883a 	mov	r4,r21
		    	  	   start_sobel_x = alt_timestamp();
                       sobel_x(grayscale);
                       stop_sobel_x = alt_timestamp();
                       printf("Sobel x : %d cycles/pixel \n", ((stop_sobel_x - start_sobel_x) / 196608));

                       start_sobel_y = alt_timestamp();
    1250:	1023883a 	mov	r17,r2
					   sobel_y(grayscale);
    1254:	00018bc0 	call	18bc <sobel_y>
					   stop_sobel_y = alt_timestamp();
    1258:	000fbb80 	call	fbb8 <alt_timestamp>
					   printf("Sobel y : %d cycles/pixel \n", ((stop_sobel_y - start_sobel_y) / 196608));
    125c:	1463c83a 	sub	r17,r2,r17
    1260:	8809883a 	mov	r4,r17
    1264:	014000f4 	movhi	r5,3
    1268:	0001d380 	call	1d38 <__udivsi3>
    126c:	01000074 	movhi	r4,1
    1270:	100b883a 	mov	r5,r2
    1274:	21051004 	addi	r4,r4,5184
    1278:	00026580 	call	2658 <printf>

					   start_sobel_threshold = alt_timestamp();
    127c:	000fbb80 	call	fbb8 <alt_timestamp>
					   sobel_threshold(128);
    1280:	01002004 	movi	r4,128
                       start_sobel_y = alt_timestamp();
					   sobel_y(grayscale);
					   stop_sobel_y = alt_timestamp();
					   printf("Sobel y : %d cycles/pixel \n", ((stop_sobel_y - start_sobel_y) / 196608));

					   start_sobel_threshold = alt_timestamp();
    1284:	102b883a 	mov	r21,r2
					   sobel_threshold(128);
    1288:	0001b5c0 	call	1b5c <sobel_threshold>
					   stop_sobel_threshold = alt_timestamp();
    128c:	000fbb80 	call	fbb8 <alt_timestamp>
					   printf("Sobel threshold : %d cycles/pixel \n", ((stop_sobel_threshold - start_sobel_threshold) / 196608));
    1290:	156bc83a 	sub	r21,r2,r21
    1294:	a809883a 	mov	r4,r21
    1298:	014000f4 	movhi	r5,3
    129c:	0001d380 	call	1d38 <__udivsi3>
    12a0:	01000074 	movhi	r4,1
    12a4:	100b883a 	mov	r5,r2
    12a8:	21051704 	addi	r4,r4,5212
    12ac:	00026580 	call	2658 <printf>

                       grayscale=GetSobelResult();
    12b0:	0001c180 	call	1c18 <GetSobelResult>
    12b4:	102f883a 	mov	r23,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    12b8:	00005980 	call	598 <cam_get_xsize>
    12bc:	1039883a 	mov	fp,r2
		      		                	cam_get_ysize(),1);
    12c0:	00005bc0 	call	5bc <cam_get_ysize>
					   sobel_threshold(128);
					   stop_sobel_threshold = alt_timestamp();
					   printf("Sobel threshold : %d cycles/pixel \n", ((stop_sobel_threshold - start_sobel_threshold) / 196608));

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    12c4:	e17fffcc 	andi	r5,fp,65535
    12c8:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12cc:	84003fcc 	andi	r16,r16,255
    12d0:	8400201c 	xori	r16,r16,128
					   sobel_threshold(128);
					   stop_sobel_threshold = alt_timestamp();
					   printf("Sobel threshold : %d cycles/pixel \n", ((stop_sobel_threshold - start_sobel_threshold) / 196608));

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    12d4:	01c00044 	movi	r7,1
    12d8:	11bfffcc 	andi	r6,r2,65535
    12dc:	b9102204 	addi	r4,r23,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12e0:	843fe004 	addi	r16,r16,-128
					   sobel_threshold(128);
					   stop_sobel_threshold = alt_timestamp();
					   printf("Sobel threshold : %d cycles/pixel \n", ((stop_sobel_threshold - start_sobel_threshold) / 196608));

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    12e4:	0000f440 	call	f44 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12e8:	80004416 	blt	r16,zero,13fc <main+0x440>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }

		      	  	   printf("Total : %d cycles/pixel\n\n", ((stop_grayscale - start_grayscale)+(stop_sobel_x - start_sobel_x)+(stop_sobel_y - start_sobel_y)+(stop_sobel_threshold - start_sobel_threshold)) / 196608);
    12ec:	b509883a 	add	r4,r22,r20
    12f0:	2449883a 	add	r4,r4,r17
    12f4:	2549883a 	add	r4,r4,r21
    12f8:	014000f4 	movhi	r5,3
    12fc:	0001d380 	call	1d38 <__udivsi3>
    1300:	01000074 	movhi	r4,1
    1304:	100b883a 	mov	r5,r2
    1308:	21052004 	addi	r4,r4,5248
    130c:	00026580 	call	2658 <printf>
		      	  	   break;
    1310:	003f7406 	br	10e4 <__alt_data_end+0xff0010e4>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1314:	00005980 	call	598 <cam_get_xsize>
    1318:	1029883a 	mov	r20,r2
		    		                  cam_get_ysize());
    131c:	00005bc0 	call	5bc <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : conv_grayscale((void *)image,
    1320:	a17fffcc 	andi	r5,r20,65535
    1324:	280ad07a 	srli	r5,r5,1
    1328:	8809883a 	mov	r4,r17
    132c:	11bfffcc 	andi	r6,r2,65535
    1330:	00007640 	call	764 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    1334:	00008d00 	call	8d0 <get_grayscale_picture>
		               sobel_x_with_rgb(grayscale);
    1338:	1009883a 	mov	r4,r2
    133c:	00017540 	call	1754 <sobel_x_with_rgb>
    1340:	003f8b06 	br	1170 <__alt_data_end+0xff001170>
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    1344:	00005980 	call	598 <cam_get_xsize>
    1348:	1029883a 	mov	r20,r2
		                	cam_get_ysize(),0);
    134c:	00005bc0 	call	5bc <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1350:	a17fffcc 	andi	r5,r20,65535
    1354:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1358:	84003fcc 	andi	r16,r16,255
    135c:	8400201c 	xori	r16,r16,128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1360:	000f883a 	mov	r7,zero
    1364:	11bfffcc 	andi	r6,r2,65535
    1368:	8cc9883a 	add	r4,r17,r19
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    136c:	843fe004 	addi	r16,r16,-128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1370:	0000f440 	call	f44 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1374:	803f5b0e 	bge	r16,zero,10e4 <__alt_data_end+0xff0010e4>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1378:	01000204 	movi	r4,8
    137c:	0001c300 	call	1c30 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1380:	8809883a 	mov	r4,r17
    1384:	0001c200 	call	1c20 <vga_set_pointer>
    1388:	003f5606 	br	10e4 <__alt_data_end+0xff0010e4>
		      	  	   }
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    138c:	00005980 	call	598 <cam_get_xsize>
    1390:	1029883a 	mov	r20,r2
		    		                  cam_get_ysize());
    1394:	00005bc0 	call	5bc <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
    1398:	a17fffcc 	andi	r5,r20,65535
    139c:	280ad07a 	srli	r5,r5,1
    13a0:	8809883a 	mov	r4,r17
    13a4:	11bfffcc 	andi	r6,r2,65535
    13a8:	00007640 	call	764 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    13ac:	00008d00 	call	8d0 <get_grayscale_picture>
    13b0:	1029883a 	mov	r20,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    13b4:	00005980 	call	598 <cam_get_xsize>
    13b8:	1023883a 	mov	r17,r2
		      		                	cam_get_ysize(),1);
    13bc:	00005bc0 	call	5bc <cam_get_ysize>
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    13c0:	897fffcc 	andi	r5,r17,65535
    13c4:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    13c8:	84003fcc 	andi	r16,r16,255
    13cc:	8400201c 	xori	r16,r16,128
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    13d0:	900f883a 	mov	r7,r18
    13d4:	11bfffcc 	andi	r6,r2,65535
    13d8:	a1102204 	addi	r4,r20,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    13dc:	843fe004 	addi	r16,r16,-128
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    13e0:	0000f440 	call	f44 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    13e4:	803f3f0e 	bge	r16,zero,10e4 <__alt_data_end+0xff0010e4>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    13e8:	01000604 	movi	r4,24
    13ec:	0001c300 	call	1c30 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    13f0:	a009883a 	mov	r4,r20
    13f4:	0001c200 	call	1c20 <vga_set_pointer>
    13f8:	003f3a06 	br	10e4 <__alt_data_end+0xff0010e4>
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    13fc:	01000604 	movi	r4,24
    1400:	0001c300 	call	1c30 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    1404:	b809883a 	mov	r4,r23
    1408:	0001c200 	call	1c20 <vga_set_pointer>
    140c:	003fb706 	br	12ec <__alt_data_end+0xff0012ec>

00001410 <init_sobel_arrays>:

void init_sobel_arrays(int width , int height) {
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    1410:	d0a71217 	ldw	r2,-25528(gp)
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1414:	defffd04 	addi	sp,sp,-12
    1418:	dc400115 	stw	r17,4(sp)
    141c:	dc000015 	stw	r16,0(sp)
    1420:	dfc00215 	stw	ra,8(sp)
	int loop;
	sobel_width = width;
    1424:	d1270f15 	stw	r4,-25540(gp)
	sobel_height = height;
    1428:	d1671115 	stw	r5,-25532(gp)
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    142c:	2023883a 	mov	r17,r4
    1430:	2821883a 	mov	r16,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    1434:	10000226 	beq	r2,zero,1440 <init_sobel_arrays+0x30>
		free(sobel_x_result);
    1438:	1009883a 	mov	r4,r2
    143c:	0001e080 	call	1e08 <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    1440:	8c21383a 	mul	r16,r17,r16
    1444:	8423883a 	add	r17,r16,r16
    1448:	8809883a 	mov	r4,r17
    144c:	0001df40 	call	1df4 <malloc>
	if (sobel_y_result != NULL)
    1450:	d1271317 	ldw	r4,-25524(gp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    1454:	d0a71215 	stw	r2,-25528(gp)
	if (sobel_y_result != NULL)
    1458:	20000126 	beq	r4,zero,1460 <init_sobel_arrays+0x50>
		free(sobel_y_result);
    145c:	0001e080 	call	1e08 <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    1460:	8809883a 	mov	r4,r17
    1464:	0001df40 	call	1df4 <malloc>
	if (sobel_result != NULL)
    1468:	d1271017 	ldw	r4,-25536(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    146c:	d0a71315 	stw	r2,-25524(gp)
	if (sobel_result != NULL)
    1470:	20000126 	beq	r4,zero,1478 <init_sobel_arrays+0x68>
		free(sobel_result);
    1474:	0001e080 	call	1e08 <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    1478:	8009883a 	mov	r4,r16
    147c:	0001df40 	call	1df4 <malloc>
	if (sobel_rgb565 != NULL)
    1480:	d1271417 	ldw	r4,-25520(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    1484:	d0a71015 	stw	r2,-25536(gp)
	if (sobel_rgb565 != NULL)
    1488:	20000126 	beq	r4,zero,1490 <init_sobel_arrays+0x80>
		free(sobel_rgb565);
    148c:	0001e080 	call	1e08 <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    1490:	8809883a 	mov	r4,r17
    1494:	0001df40 	call	1df4 <malloc>
    1498:	d0a71415 	stw	r2,-25520(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    149c:	0005883a 	mov	r2,zero
    14a0:	04000f0e 	bge	zero,r16,14e0 <init_sobel_arrays+0xd0>
		sobel_x_result[loop] = 0;
    14a4:	d2271217 	ldw	r8,-25528(gp)
		sobel_y_result[loop] = 0;
    14a8:	d1e71317 	ldw	r7,-25524(gp)
		sobel_result[loop] = 0;
    14ac:	d1a71017 	ldw	r6,-25536(gp)
    14b0:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    14b4:	40d1883a 	add	r8,r8,r3
    14b8:	4000000d 	sth	zero,0(r8)
		sobel_y_result[loop] = 0;
    14bc:	38cf883a 	add	r7,r7,r3
		sobel_result[loop] = 0;
    14c0:	308d883a 	add	r6,r6,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    14c4:	3800000d 	sth	zero,0(r7)
		sobel_result[loop] = 0;
    14c8:	30000005 	stb	zero,0(r6)
		sobel_rgb565[loop] = 0;
    14cc:	d1a71417 	ldw	r6,-25520(gp)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    14d0:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    14d4:	30c7883a 	add	r3,r6,r3
    14d8:	1800000d 	sth	zero,0(r3)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    14dc:	80bff11e 	bne	r16,r2,14a4 <__alt_data_end+0xff0014a4>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    14e0:	dfc00217 	ldw	ra,8(sp)
    14e4:	dc400117 	ldw	r17,4(sp)
    14e8:	dc000017 	ldw	r16,0(sp)
    14ec:	dec00304 	addi	sp,sp,12
    14f0:	f800283a 	ret

000014f4 <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    14f4:	defff904 	addi	sp,sp,-28
    14f8:	da400717 	ldw	r9,28(sp)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    14fc:	30ffffc4 	addi	r3,r6,-1
    1500:	30800044 	addi	r2,r6,1
    1504:	3251383a 	mul	r8,r6,r9
    1508:	1a47383a 	mul	r3,r3,r9
    150c:	1245383a 	mul	r2,r2,r9
    1510:	29bfffc4 	addi	r6,r5,-1
    1514:	2b000044 	addi	r12,r5,1
    1518:	2211883a 	add	r8,r4,r8
    151c:	2155883a 	add	r10,r4,r5
    1520:	2193883a 	add	r9,r4,r6

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    1524:	dfc00615 	stw	ra,24(sp)
    1528:	dd400515 	stw	r21,20(sp)
    152c:	dd000415 	stw	r20,16(sp)
    1530:	dcc00315 	stw	r19,12(sp)
    1534:	dc800215 	stw	r18,8(sp)
    1538:	dc400115 	stw	r17,4(sp)
    153c:	dc000015 	stw	r16,0(sp)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    1540:	2085883a 	add	r2,r4,r2
    1544:	415b883a 	add	r13,r8,r5
    1548:	4197883a 	add	r11,r8,r6
    154c:	50d5883a 	add	r10,r10,r3
    1550:	48d3883a 	add	r9,r9,r3
    1554:	2309883a 	add	r4,r4,r12
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1558:	54400003 	ldbu	r17,0(r10)
    155c:	4c000003 	ldbu	r16,0(r9)
    1560:	3a800007 	ldb	r10,0(r7)
                   pixels[(y+dy)*width+(x+dx)];
    1564:	20c9883a 	add	r4,r4,r3
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1568:	6c800003 	ldbu	r18,0(r13)
    156c:	5fc00003 	ldbu	ra,0(r11)
    1570:	3b400107 	ldb	r13,4(r7)
                   pixels[(y+dy)*width+(x+dx)];
    1574:	4317883a 	add	r11,r8,r12
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1578:	3a4000c7 	ldb	r9,3(r7)
                   pixels[(y+dy)*width+(x+dx)];
    157c:	118d883a 	add	r6,r2,r6
    1580:	114b883a 	add	r5,r2,r5
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1584:	3b800047 	ldb	r14,1(r7)
    1588:	25000003 	ldbu	r20,0(r4)
    158c:	3a000087 	ldb	r8,2(r7)
    1590:	5cc00003 	ldbu	r19,0(r11)
    1594:	39000147 	ldb	r4,5(r7)
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    1598:	33c00003 	ldbu	r15,0(r6)
    159c:	3ac00187 	ldb	r11,6(r7)
    15a0:	2d400003 	ldbu	r21,0(r5)
    15a4:	398001c7 	ldb	r6,7(r7)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    15a8:	130b883a 	add	r5,r2,r12
      }
   }
   return result;
    15ac:	2b000003 	ldbu	r12,0(r5)
    15b0:	39400207 	ldb	r5,8(r7)
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    15b4:	8295383a 	mul	r10,r16,r10
    15b8:	8b8f383a 	mul	r7,r17,r14
    15bc:	9347383a 	mul	r3,r18,r13
    15c0:	fa53383a 	mul	r9,ra,r9
    15c4:	a211383a 	mul	r8,r20,r8
    15c8:	9909383a 	mul	r4,r19,r4
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    15cc:	7ac5383a 	mul	r2,r15,r11
    15d0:	a98d383a 	mul	r6,r21,r6
    15d4:	614b383a 	mul	r5,r12,r5
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    15d8:	3a8f883a 	add	r7,r7,r10
    15dc:	1a47883a 	add	r3,r3,r9
    15e0:	3a0f883a 	add	r7,r7,r8
    15e4:	1907883a 	add	r3,r3,r4
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    15e8:	1185883a 	add	r2,r2,r6
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    15ec:	38c7883a 	add	r3,r7,r3
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    15f0:	1145883a 	add	r2,r2,r5
}
    15f4:	1885883a 	add	r2,r3,r2
    15f8:	dfc00617 	ldw	ra,24(sp)
    15fc:	dd400517 	ldw	r21,20(sp)
    1600:	dd000417 	ldw	r20,16(sp)
    1604:	dcc00317 	ldw	r19,12(sp)
    1608:	dc800217 	ldw	r18,8(sp)
    160c:	dc400117 	ldw	r17,4(sp)
    1610:	dc000017 	ldw	r16,0(sp)
    1614:	dec00704 	addi	sp,sp,28
    1618:	f800283a 	ret

0000161c <sobel_x>:

void sobel_x( unsigned char *source ) {
    161c:	defff704 	addi	sp,sp,-36
    1620:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1624:	d4671117 	ldw	r17,-25532(gp)
      }
   }
   return result;
}

void sobel_x( unsigned char *source ) {
    1628:	dfc00815 	stw	ra,32(sp)
    162c:	ddc00715 	stw	r23,28(sp)
    1630:	dd800615 	stw	r22,24(sp)
    1634:	dd400515 	stw	r21,20(sp)
    1638:	dd000415 	stw	r20,16(sp)
    163c:	dcc00315 	stw	r19,12(sp)
    1640:	dc800215 	stw	r18,8(sp)
    1644:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1648:	8c7fffc4 	addi	r17,r17,-1
    164c:	00800044 	movi	r2,1
    1650:	14402e0e 	bge	r2,r17,170c <sobel_x+0xf0>
    1654:	d3670f17 	ldw	r13,-25540(gp)
    1658:	d3e71217 	ldw	r15,-25528(gp)
    165c:	03800084 	movi	r14,2
    1660:	6b65883a 	add	r18,r13,r13
    1664:	9385883a 	add	r2,r18,r14
    1668:	2359883a 	add	r12,r4,r13
    166c:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1670:	7027883a 	mov	r19,r14
    1674:	736bc83a 	sub	r21,r14,r13
    1678:	6ba9883a 	add	r20,r13,r14
    167c:	9b402e0e 	bge	r19,r13,1738 <sobel_x+0x11c>
    1680:	637f883a 	add	ra,r12,r13
    1684:	7021883a 	mov	r16,r14
    1688:	6357c83a 	sub	r11,r12,r13
    168c:	ab0b883a 	add	r5,r21,r12
    1690:	62800084 	addi	r10,r12,2
    1694:	f813883a 	mov	r9,ra
    1698:	a311883a 	add	r8,r20,r12
    169c:	780f883a 	mov	r7,r15
    16a0:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    16a4:	2d800003 	ldbu	r22,0(r5)
    16a8:	40c00003 	ldbu	r3,0(r8)
    16ac:	31000003 	ldbu	r4,0(r6)
    16b0:	50800003 	ldbu	r2,0(r10)
    16b4:	b0c7883a 	add	r3,r22,r3
    16b8:	5dc00003 	ldbu	r23,0(r11)
    16bc:	1907c83a 	sub	r3,r3,r4
    16c0:	4d800003 	ldbu	r22,0(r9)
    16c4:	1909c83a 	sub	r4,r3,r4
    16c8:	1087883a 	add	r3,r2,r2
    16cc:	20c7883a 	add	r3,r4,r3
    16d0:	1dc5c83a 	sub	r2,r3,r23
    16d4:	1585c83a 	sub	r2,r2,r22
    16d8:	3880000d 	sth	r2,0(r7)
    16dc:	29400044 	addi	r5,r5,1
    16e0:	5ac00044 	addi	r11,r11,1
    16e4:	31800044 	addi	r6,r6,1
    16e8:	52800044 	addi	r10,r10,1
    16ec:	4a400044 	addi	r9,r9,1
    16f0:	42000044 	addi	r8,r8,1
    16f4:	39c00084 	addi	r7,r7,2

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    16f8:	617fea1e 	bne	r12,r5,16a4 <__alt_data_end+0xff0016a4>
    16fc:	73800044 	addi	r14,r14,1
    1700:	f819883a 	mov	r12,ra
    1704:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1708:	847fdc16 	blt	r16,r17,167c <__alt_data_end+0xff00167c>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    170c:	dfc00817 	ldw	ra,32(sp)
    1710:	ddc00717 	ldw	r23,28(sp)
    1714:	dd800617 	ldw	r22,24(sp)
    1718:	dd400517 	ldw	r21,20(sp)
    171c:	dd000417 	ldw	r20,16(sp)
    1720:	dcc00317 	ldw	r19,12(sp)
    1724:	dc800217 	ldw	r18,8(sp)
    1728:	dc400117 	ldw	r17,4(sp)
    172c:	dc000017 	ldw	r16,0(sp)
    1730:	dec00904 	addi	sp,sp,36
    1734:	f800283a 	ret
    1738:	7021883a 	mov	r16,r14
    173c:	637f883a 	add	ra,r12,r13
    1740:	73800044 	addi	r14,r14,1
    1744:	f819883a 	mov	r12,ra
    1748:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    174c:	847fcb16 	blt	r16,r17,167c <__alt_data_end+0xff00167c>
    1750:	003fee06 	br	170c <__alt_data_end+0xff00170c>

00001754 <sobel_x_with_rgb>:
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1754:	defff604 	addi	sp,sp,-40
    1758:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    175c:	d4e71117 	ldw	r19,-25532(gp)
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1760:	dfc00915 	stw	ra,36(sp)
    1764:	df000815 	stw	fp,32(sp)
    1768:	ddc00715 	stw	r23,28(sp)
    176c:	dd800615 	stw	r22,24(sp)
    1770:	dd400515 	stw	r21,20(sp)
    1774:	dd000415 	stw	r20,16(sp)
    1778:	dc800215 	stw	r18,8(sp)
    177c:	dc400115 	stw	r17,4(sp)
    1780:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1784:	00800084 	movi	r2,2
    1788:	14c03b0e 	bge	r2,r19,1878 <sobel_x_with_rgb+0x124>
    178c:	2025883a 	mov	r18,r4
    1790:	d1270f17 	ldw	r4,-25540(gp)
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    1794:	d5671217 	ldw	r21,-25528(gp)
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1798:	d5271417 	ldw	r20,-25520(gp)
    179c:	23ffffc4 	addi	r15,r4,-1
    17a0:	908f883a 	add	r7,r18,r2
    17a4:	9cffffc4 	addi	r19,r19,-1
    17a8:	200d883a 	mov	r6,r4
    17ac:	04000044 	movi	r16,1
    17b0:	31400044 	addi	r5,r6,1
    17b4:	294b883a 	add	r5,r5,r5
    17b8:	393f883a 	add	ra,r7,r4
    17bc:	a15b883a 	add	r13,r20,r5
    17c0:	3123883a 	add	r17,r6,r4
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    17c4:	02000044 	movi	r8,1
    17c8:	84000044 	addi	r16,r16,1
    17cc:	3b3fff84 	addi	r12,r7,-2
    17d0:	918d883a 	add	r6,r18,r6
    17d4:	9457883a 	add	r11,r18,r17
    17d8:	27d5883a 	add	r10,r4,ra
    17dc:	a94b883a 	add	r5,r21,r5
    17e0:	f813883a 	mov	r9,ra
    17e4:	681d883a 	mov	r14,r13
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    17e8:	43c0200e 	bge	r8,r15,186c <sobel_x_with_rgb+0x118>
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    17ec:	50800003 	ldbu	r2,0(r10)
    17f0:	3dc00003 	ldbu	r23,0(r7)
    17f4:	37000003 	ldbu	fp,0(r6)
    17f8:	48c00003 	ldbu	r3,0(r9)
    17fc:	b8af883a 	add	r23,r23,r2
    1800:	65800003 	ldbu	r22,0(r12)
    1804:	bf2fc83a 	sub	r23,r23,fp
    1808:	58800003 	ldbu	r2,0(r11)
    180c:	bf2fc83a 	sub	r23,r23,fp
    1810:	18c7883a 	add	r3,r3,r3
    1814:	b8c7883a 	add	r3,r23,r3
    1818:	1d87c83a 	sub	r3,r3,r22
    181c:	1885c83a 	sub	r2,r3,r2
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    1820:	2880000d 	sth	r2,0(r5)
          if (result < 0) {
    1824:	10bfffcc 	andi	r2,r2,65535
    1828:	10a0001c 	xori	r2,r2,32768
    182c:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1830:	1007d0fa 	srai	r3,r2,3
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    1834:	42000044 	addi	r8,r8,1

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    1838:	10001b16 	blt	r2,zero,18a8 <sobel_x_with_rgb+0x154>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    183c:	180692fa 	slli	r3,r3,11
    1840:	68c0000d 	sth	r3,0(r13)
    1844:	73800084 	addi	r14,r14,2
    1848:	6b400084 	addi	r13,r13,2
    184c:	63000044 	addi	r12,r12,1
    1850:	39c00044 	addi	r7,r7,1
    1854:	31800044 	addi	r6,r6,1
    1858:	4a400044 	addi	r9,r9,1
    185c:	5ac00044 	addi	r11,r11,1
    1860:	52800044 	addi	r10,r10,1
    1864:	29400084 	addi	r5,r5,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1868:	43ffe016 	blt	r8,r15,17ec <__alt_data_end+0xff0017ec>
    186c:	880d883a 	mov	r6,r17
    1870:	f80f883a 	mov	r7,ra

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1874:	9c3fce1e 	bne	r19,r16,17b0 <__alt_data_end+0xff0017b0>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    1878:	dfc00917 	ldw	ra,36(sp)
    187c:	df000817 	ldw	fp,32(sp)
    1880:	ddc00717 	ldw	r23,28(sp)
    1884:	dd800617 	ldw	r22,24(sp)
    1888:	dd400517 	ldw	r21,20(sp)
    188c:	dd000417 	ldw	r20,16(sp)
    1890:	dcc00317 	ldw	r19,12(sp)
    1894:	dc800217 	ldw	r18,8(sp)
    1898:	dc400117 	ldw	r17,4(sp)
    189c:	dc000017 	ldw	r16,0(sp)
    18a0:	dec00a04 	addi	sp,sp,40
    18a4:	f800283a 	ret
   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    18a8:	0085c83a 	sub	r2,zero,r2
    18ac:	1005d0ba 	srai	r2,r2,2
    18b0:	1004917a 	slli	r2,r2,5
    18b4:	7080000d 	sth	r2,0(r14)
    18b8:	003fe206 	br	1844 <__alt_data_end+0xff001844>

000018bc <sobel_y>:
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    18bc:	defff704 	addi	sp,sp,-36
    18c0:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18c4:	d4671117 	ldw	r17,-25532(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    18c8:	dfc00815 	stw	ra,32(sp)
    18cc:	ddc00715 	stw	r23,28(sp)
    18d0:	dd800615 	stw	r22,24(sp)
    18d4:	dd400515 	stw	r21,20(sp)
    18d8:	dd000415 	stw	r20,16(sp)
    18dc:	dcc00315 	stw	r19,12(sp)
    18e0:	dc800215 	stw	r18,8(sp)
    18e4:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18e8:	8c7fffc4 	addi	r17,r17,-1
    18ec:	00800044 	movi	r2,1
    18f0:	14402e0e 	bge	r2,r17,19ac <sobel_y+0xf0>
    18f4:	d3e70f17 	ldw	r15,-25540(gp)
    18f8:	d3a71317 	ldw	r14,-25524(gp)
    18fc:	03400084 	movi	r13,2
    1900:	7bff883a 	add	ra,r15,r15
    1904:	fb67883a 	add	r19,ra,r13
    1908:	2019883a 	mov	r12,r4
    190c:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1910:	6825883a 	mov	r18,r13
    1914:	f8a9883a 	add	r20,ra,r2
    1918:	6821883a 	mov	r16,r13
    191c:	93c01f0e 	bge	r18,r15,199c <sobel_y+0xe0>
    1920:	67cb883a 	add	r5,r12,ra
    1924:	6821883a 	mov	r16,r13
    1928:	62800044 	addi	r10,r12,1
    192c:	61000084 	addi	r4,r12,2
    1930:	a313883a 	add	r9,r20,r12
    1934:	9b11883a 	add	r8,r19,r12
    1938:	2bd7c83a 	sub	r11,r5,r15
    193c:	700f883a 	mov	r7,r14
    1940:	600d883a 	mov	r6,r12
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    1944:	35800003 	ldbu	r22,0(r6)
    1948:	20c00003 	ldbu	r3,0(r4)
    194c:	50800003 	ldbu	r2,0(r10)
    1950:	4d400003 	ldbu	r21,0(r9)
    1954:	b0c7883a 	add	r3,r22,r3
    1958:	1085883a 	add	r2,r2,r2
    195c:	2dc00003 	ldbu	r23,0(r5)
    1960:	1887883a 	add	r3,r3,r2
    1964:	45800003 	ldbu	r22,0(r8)
    1968:	1d47c83a 	sub	r3,r3,r21
    196c:	1d47c83a 	sub	r3,r3,r21
    1970:	1dc5c83a 	sub	r2,r3,r23
    1974:	1585c83a 	sub	r2,r2,r22
    1978:	3880000d 	sth	r2,0(r7)
    197c:	21000044 	addi	r4,r4,1
    1980:	31800044 	addi	r6,r6,1
    1984:	52800044 	addi	r10,r10,1
    1988:	29400044 	addi	r5,r5,1
    198c:	4a400044 	addi	r9,r9,1
    1990:	42000044 	addi	r8,r8,1
    1994:	39c00084 	addi	r7,r7,2

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1998:	593fea1e 	bne	r11,r4,1944 <__alt_data_end+0xff001944>
    199c:	6b400044 	addi	r13,r13,1
    19a0:	63d9883a 	add	r12,r12,r15
    19a4:	77dd883a 	add	r14,r14,ra
}

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    19a8:	847fdb16 	blt	r16,r17,1918 <__alt_data_end+0xff001918>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    19ac:	dfc00817 	ldw	ra,32(sp)
    19b0:	ddc00717 	ldw	r23,28(sp)
    19b4:	dd800617 	ldw	r22,24(sp)
    19b8:	dd400517 	ldw	r21,20(sp)
    19bc:	dd000417 	ldw	r20,16(sp)
    19c0:	dcc00317 	ldw	r19,12(sp)
    19c4:	dc800217 	ldw	r18,8(sp)
    19c8:	dc400117 	ldw	r17,4(sp)
    19cc:	dc000017 	ldw	r16,0(sp)
    19d0:	dec00904 	addi	sp,sp,36
    19d4:	f800283a 	ret

000019d8 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    19d8:	defff504 	addi	sp,sp,-44
    19dc:	dd400615 	stw	r21,24(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    19e0:	d5671117 	ldw	r21,-25532(gp)
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    19e4:	dfc00a15 	stw	ra,40(sp)
    19e8:	df000915 	stw	fp,36(sp)
    19ec:	ddc00815 	stw	r23,32(sp)
    19f0:	dd800715 	stw	r22,28(sp)
    19f4:	dd000515 	stw	r20,20(sp)
    19f8:	dcc00415 	stw	r19,16(sp)
    19fc:	dc800315 	stw	r18,12(sp)
    1a00:	dc400215 	stw	r17,8(sp)
    1a04:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a08:	00800084 	movi	r2,2
    1a0c:	1540470e 	bge	r2,r21,1b2c <sobel_y_with_rgb+0x154>
    1a10:	d4270f17 	ldw	r16,-25540(gp)
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    1a14:	d7271317 	ldw	fp,-25524(gp)
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1a18:	d5e71417 	ldw	r23,-25520(gp)
    1a1c:	842d883a 	add	r22,r16,r16
    1a20:	2029883a 	mov	r20,r4
    1a24:	25bf883a 	add	ra,r4,r22
    1a28:	80c00084 	addi	r3,r16,2
    1a2c:	813fffc4 	addi	r4,r16,-1
    1a30:	a2800044 	addi	r10,r20,1
    1a34:	07ffc83a 	sub	ra,zero,ra
    1a38:	ad7fffc4 	addi	r21,r21,-1
    1a3c:	8005883a 	mov	r2,r16
    1a40:	04400044 	movi	r17,1
    1a44:	d8c00015 	stw	r3,0(sp)
    1a48:	d8c00017 	ldw	r3,0(sp)
    1a4c:	12000044 	addi	r8,r2,1
    1a50:	4211883a 	add	r8,r8,r8
    1a54:	ba1d883a 	add	r14,r23,r8
    1a58:	1427883a 	add	r19,r2,r16
    1a5c:	55a5883a 	add	r18,r10,r22
    1a60:	1885883a 	add	r2,r3,r2
    1a64:	8c400044 	addi	r17,r17,1
    1a68:	537fffc4 	addi	r13,r10,-1
    1a6c:	53000044 	addi	r12,r10,1
    1a70:	a4d7883a 	add	r11,r20,r19
    1a74:	a093883a 	add	r9,r20,r2
    1a78:	e211883a 	add	r8,fp,r8
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    1a7c:	900f883a 	mov	r7,r18
    1a80:	701f883a 	mov	r15,r14
    1a84:	00000b06 	br	1ab4 <sobel_y_with_rgb+0xdc>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1a88:	180692fa 	slli	r3,r3,11
    1a8c:	70c0000d 	sth	r3,0(r14)
    1a90:	7bc00084 	addi	r15,r15,2
    1a94:	73800084 	addi	r14,r14,2
    1a98:	6b400044 	addi	r13,r13,1
    1a9c:	52800044 	addi	r10,r10,1
    1aa0:	63000044 	addi	r12,r12,1
    1aa4:	5ac00044 	addi	r11,r11,1
    1aa8:	39c00044 	addi	r7,r7,1
    1aac:	4a400044 	addi	r9,r9,1
    1ab0:	42000084 	addi	r8,r8,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1ab4:	3fc5883a 	add	r2,r7,ra
    1ab8:	1100180e 	bge	r2,r4,1b1c <sobel_y_with_rgb+0x144>
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1abc:	60800003 	ldbu	r2,0(r12)
    1ac0:	69800003 	ldbu	r6,0(r13)
    1ac4:	50c00003 	ldbu	r3,0(r10)
    1ac8:	39400003 	ldbu	r5,0(r7)
    1acc:	308d883a 	add	r6,r6,r2
    1ad0:	18c7883a 	add	r3,r3,r3
    1ad4:	58800003 	ldbu	r2,0(r11)
    1ad8:	30c7883a 	add	r3,r6,r3
    1adc:	1947c83a 	sub	r3,r3,r5
    1ae0:	49800003 	ldbu	r6,0(r9)
    1ae4:	1947c83a 	sub	r3,r3,r5
    1ae8:	1885c83a 	sub	r2,r3,r2
    1aec:	1185c83a 	sub	r2,r2,r6
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    1af0:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    1af4:	10bfffcc 	andi	r2,r2,65535
    1af8:	10a0001c 	xori	r2,r2,32768
    1afc:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1b00:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    1b04:	103fe00e 	bge	r2,zero,1a88 <__alt_data_end+0xff001a88>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1b08:	0085c83a 	sub	r2,zero,r2
    1b0c:	1005d0ba 	srai	r2,r2,2
    1b10:	1004917a 	slli	r2,r2,5
    1b14:	7880000d 	sth	r2,0(r15)
    1b18:	003fdd06 	br	1a90 <__alt_data_end+0xff001a90>
    1b1c:	9415c83a 	sub	r10,r18,r16
    1b20:	fc3fc83a 	sub	ra,ra,r16
    1b24:	9805883a 	mov	r2,r19

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b28:	ac7fc71e 	bne	r21,r17,1a48 <__alt_data_end+0xff001a48>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    1b2c:	dfc00a17 	ldw	ra,40(sp)
    1b30:	df000917 	ldw	fp,36(sp)
    1b34:	ddc00817 	ldw	r23,32(sp)
    1b38:	dd800717 	ldw	r22,28(sp)
    1b3c:	dd400617 	ldw	r21,24(sp)
    1b40:	dd000517 	ldw	r20,20(sp)
    1b44:	dcc00417 	ldw	r19,16(sp)
    1b48:	dc800317 	ldw	r18,12(sp)
    1b4c:	dc400217 	ldw	r17,8(sp)
    1b50:	dc000117 	ldw	r16,4(sp)
    1b54:	dec00b04 	addi	sp,sp,44
    1b58:	f800283a 	ret

00001b5c <sobel_threshold>:

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b5c:	d0a71117 	ldw	r2,-25532(gp)
    1b60:	02400084 	movi	r9,2
    1b64:	4880290e 	bge	r9,r2,1c0c <sobel_threshold+0xb0>
    1b68:	223fffcc 	andi	r8,r4,65535
    1b6c:	d0e70f17 	ldw	r3,-25540(gp)
    1b70:	4220001c 	xori	r8,r8,32768
    1b74:	01c00044 	movi	r7,1
    1b78:	42200004 	addi	r8,r8,-32768
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1b7c:	48c0200e 	bge	r9,r3,1c00 <sobel_threshold+0xa4>
    1b80:	01400044 	movi	r5,1
    1b84:	00000c06 	br	1bb8 <sobel_threshold+0x5c>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1b88:	2080000f 	ldh	r2,0(r4)
    1b8c:	10001916 	blt	r2,zero,1bf4 <sobel_threshold+0x98>
    1b90:	3085883a 	add	r2,r6,r2
    1b94:	10bfffcc 	andi	r2,r2,65535
    1b98:	10a0001c 	xori	r2,r2,32768
    1b9c:	10a00004 	addi	r2,r2,-32768
    1ba0:	4084803a 	cmplt	r2,r8,r2
    1ba4:	0085c83a 	sub	r2,zero,r2
    1ba8:	18800005 	stb	r2,0(r3)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1bac:	d0e70f17 	ldw	r3,-25540(gp)
    1bb0:	18bfffc4 	addi	r2,r3,-1
    1bb4:	2880110e 	bge	r5,r2,1bfc <sobel_threshold+0xa0>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1bb8:	38c7383a 	mul	r3,r7,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    1bbc:	d1a71317 	ldw	r6,-25524(gp)
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1bc0:	d1271217 	ldw	r4,-25528(gp)
    1bc4:	1947883a 	add	r3,r3,r5
    1bc8:	18c5883a 	add	r2,r3,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    1bcc:	308d883a 	add	r6,r6,r2
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1bd0:	2089883a 	add	r4,r4,r2
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1bd4:	3180000f 	ldh	r6,0(r6)
    1bd8:	d0a71017 	ldw	r2,-25536(gp)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1bdc:	29400044 	addi	r5,r5,1
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1be0:	10c7883a 	add	r3,r2,r3
    1be4:	303fe80e 	bge	r6,zero,1b88 <__alt_data_end+0xff001b88>
    1be8:	2080000f 	ldh	r2,0(r4)
    1bec:	018dc83a 	sub	r6,zero,r6
    1bf0:	103fe70e 	bge	r2,zero,1b90 <__alt_data_end+0xff001b90>
    1bf4:	0085c83a 	sub	r2,zero,r2
    1bf8:	003fe506 	br	1b90 <__alt_data_end+0xff001b90>
    1bfc:	d0a71117 	ldw	r2,-25532(gp)
}

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1c00:	39c00044 	addi	r7,r7,1
    1c04:	113fffc4 	addi	r4,r2,-1
    1c08:	393fdc16 	blt	r7,r4,1b7c <__alt_data_end+0xff001b7c>
    1c0c:	f800283a 	ret

00001c10 <GetSobel_rgb>:
	}
}

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1c10:	d0a71417 	ldw	r2,-25520(gp)
    1c14:	f800283a 	ret

00001c18 <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1c18:	d0a71017 	ldw	r2,-25536(gp)
    1c1c:	f800283a 	ret

00001c20 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    1c20:	00804034 	movhi	r2,256
    1c24:	10843404 	addi	r2,r2,4304
    1c28:	11000035 	stwio	r4,0(r2)
    1c2c:	f800283a 	ret

00001c30 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    1c30:	00804034 	movhi	r2,256
    1c34:	10843504 	addi	r2,r2,4308
    1c38:	11000025 	stbio	r4,0(r2)
    1c3c:	f800283a 	ret

00001c40 <__divsi3>:
    1c40:	20001b16 	blt	r4,zero,1cb0 <__divsi3+0x70>
    1c44:	000f883a 	mov	r7,zero
    1c48:	28001616 	blt	r5,zero,1ca4 <__divsi3+0x64>
    1c4c:	200d883a 	mov	r6,r4
    1c50:	29001a2e 	bgeu	r5,r4,1cbc <__divsi3+0x7c>
    1c54:	00800804 	movi	r2,32
    1c58:	00c00044 	movi	r3,1
    1c5c:	00000106 	br	1c64 <__divsi3+0x24>
    1c60:	10000d26 	beq	r2,zero,1c98 <__divsi3+0x58>
    1c64:	294b883a 	add	r5,r5,r5
    1c68:	10bfffc4 	addi	r2,r2,-1
    1c6c:	18c7883a 	add	r3,r3,r3
    1c70:	293ffb36 	bltu	r5,r4,1c60 <__alt_data_end+0xff001c60>
    1c74:	0005883a 	mov	r2,zero
    1c78:	18000726 	beq	r3,zero,1c98 <__divsi3+0x58>
    1c7c:	0005883a 	mov	r2,zero
    1c80:	31400236 	bltu	r6,r5,1c8c <__divsi3+0x4c>
    1c84:	314dc83a 	sub	r6,r6,r5
    1c88:	10c4b03a 	or	r2,r2,r3
    1c8c:	1806d07a 	srli	r3,r3,1
    1c90:	280ad07a 	srli	r5,r5,1
    1c94:	183ffa1e 	bne	r3,zero,1c80 <__alt_data_end+0xff001c80>
    1c98:	38000126 	beq	r7,zero,1ca0 <__divsi3+0x60>
    1c9c:	0085c83a 	sub	r2,zero,r2
    1ca0:	f800283a 	ret
    1ca4:	014bc83a 	sub	r5,zero,r5
    1ca8:	39c0005c 	xori	r7,r7,1
    1cac:	003fe706 	br	1c4c <__alt_data_end+0xff001c4c>
    1cb0:	0109c83a 	sub	r4,zero,r4
    1cb4:	01c00044 	movi	r7,1
    1cb8:	003fe306 	br	1c48 <__alt_data_end+0xff001c48>
    1cbc:	00c00044 	movi	r3,1
    1cc0:	003fee06 	br	1c7c <__alt_data_end+0xff001c7c>

00001cc4 <__modsi3>:
    1cc4:	20001716 	blt	r4,zero,1d24 <__modsi3+0x60>
    1cc8:	000f883a 	mov	r7,zero
    1ccc:	2005883a 	mov	r2,r4
    1cd0:	28001216 	blt	r5,zero,1d1c <__modsi3+0x58>
    1cd4:	2900162e 	bgeu	r5,r4,1d30 <__modsi3+0x6c>
    1cd8:	01800804 	movi	r6,32
    1cdc:	00c00044 	movi	r3,1
    1ce0:	00000106 	br	1ce8 <__modsi3+0x24>
    1ce4:	30000a26 	beq	r6,zero,1d10 <__modsi3+0x4c>
    1ce8:	294b883a 	add	r5,r5,r5
    1cec:	31bfffc4 	addi	r6,r6,-1
    1cf0:	18c7883a 	add	r3,r3,r3
    1cf4:	293ffb36 	bltu	r5,r4,1ce4 <__alt_data_end+0xff001ce4>
    1cf8:	18000526 	beq	r3,zero,1d10 <__modsi3+0x4c>
    1cfc:	1806d07a 	srli	r3,r3,1
    1d00:	11400136 	bltu	r2,r5,1d08 <__modsi3+0x44>
    1d04:	1145c83a 	sub	r2,r2,r5
    1d08:	280ad07a 	srli	r5,r5,1
    1d0c:	183ffb1e 	bne	r3,zero,1cfc <__alt_data_end+0xff001cfc>
    1d10:	38000126 	beq	r7,zero,1d18 <__modsi3+0x54>
    1d14:	0085c83a 	sub	r2,zero,r2
    1d18:	f800283a 	ret
    1d1c:	014bc83a 	sub	r5,zero,r5
    1d20:	003fec06 	br	1cd4 <__alt_data_end+0xff001cd4>
    1d24:	0109c83a 	sub	r4,zero,r4
    1d28:	01c00044 	movi	r7,1
    1d2c:	003fe706 	br	1ccc <__alt_data_end+0xff001ccc>
    1d30:	00c00044 	movi	r3,1
    1d34:	003ff106 	br	1cfc <__alt_data_end+0xff001cfc>

00001d38 <__udivsi3>:
    1d38:	200d883a 	mov	r6,r4
    1d3c:	2900152e 	bgeu	r5,r4,1d94 <__udivsi3+0x5c>
    1d40:	28001416 	blt	r5,zero,1d94 <__udivsi3+0x5c>
    1d44:	00800804 	movi	r2,32
    1d48:	00c00044 	movi	r3,1
    1d4c:	00000206 	br	1d58 <__udivsi3+0x20>
    1d50:	10000e26 	beq	r2,zero,1d8c <__udivsi3+0x54>
    1d54:	28000516 	blt	r5,zero,1d6c <__udivsi3+0x34>
    1d58:	294b883a 	add	r5,r5,r5
    1d5c:	10bfffc4 	addi	r2,r2,-1
    1d60:	18c7883a 	add	r3,r3,r3
    1d64:	293ffa36 	bltu	r5,r4,1d50 <__alt_data_end+0xff001d50>
    1d68:	18000826 	beq	r3,zero,1d8c <__udivsi3+0x54>
    1d6c:	0005883a 	mov	r2,zero
    1d70:	31400236 	bltu	r6,r5,1d7c <__udivsi3+0x44>
    1d74:	314dc83a 	sub	r6,r6,r5
    1d78:	10c4b03a 	or	r2,r2,r3
    1d7c:	1806d07a 	srli	r3,r3,1
    1d80:	280ad07a 	srli	r5,r5,1
    1d84:	183ffa1e 	bne	r3,zero,1d70 <__alt_data_end+0xff001d70>
    1d88:	f800283a 	ret
    1d8c:	0005883a 	mov	r2,zero
    1d90:	f800283a 	ret
    1d94:	00c00044 	movi	r3,1
    1d98:	003ff406 	br	1d6c <__alt_data_end+0xff001d6c>

00001d9c <__umodsi3>:
    1d9c:	2005883a 	mov	r2,r4
    1da0:	2900122e 	bgeu	r5,r4,1dec <__umodsi3+0x50>
    1da4:	28001116 	blt	r5,zero,1dec <__umodsi3+0x50>
    1da8:	01800804 	movi	r6,32
    1dac:	00c00044 	movi	r3,1
    1db0:	00000206 	br	1dbc <__umodsi3+0x20>
    1db4:	30000c26 	beq	r6,zero,1de8 <__umodsi3+0x4c>
    1db8:	28000516 	blt	r5,zero,1dd0 <__umodsi3+0x34>
    1dbc:	294b883a 	add	r5,r5,r5
    1dc0:	31bfffc4 	addi	r6,r6,-1
    1dc4:	18c7883a 	add	r3,r3,r3
    1dc8:	293ffa36 	bltu	r5,r4,1db4 <__alt_data_end+0xff001db4>
    1dcc:	18000626 	beq	r3,zero,1de8 <__umodsi3+0x4c>
    1dd0:	1806d07a 	srli	r3,r3,1
    1dd4:	11400136 	bltu	r2,r5,1ddc <__umodsi3+0x40>
    1dd8:	1145c83a 	sub	r2,r2,r5
    1ddc:	280ad07a 	srli	r5,r5,1
    1de0:	183ffb1e 	bne	r3,zero,1dd0 <__alt_data_end+0xff001dd0>
    1de4:	f800283a 	ret
    1de8:	f800283a 	ret
    1dec:	00c00044 	movi	r3,1
    1df0:	003ff706 	br	1dd0 <__alt_data_end+0xff001dd0>

00001df4 <malloc>:
    1df4:	00800074 	movhi	r2,1
    1df8:	108cd604 	addi	r2,r2,13144
    1dfc:	200b883a 	mov	r5,r4
    1e00:	11000017 	ldw	r4,0(r2)
    1e04:	0001e1c1 	jmpi	1e1c <_malloc_r>

00001e08 <free>:
    1e08:	00800074 	movhi	r2,1
    1e0c:	108cd604 	addi	r2,r2,13144
    1e10:	200b883a 	mov	r5,r4
    1e14:	11000017 	ldw	r4,0(r2)
    1e18:	0006c6c1 	jmpi	6c6c <_free_r>

00001e1c <_malloc_r>:
    1e1c:	defff504 	addi	sp,sp,-44
    1e20:	dc800315 	stw	r18,12(sp)
    1e24:	dfc00a15 	stw	ra,40(sp)
    1e28:	df000915 	stw	fp,36(sp)
    1e2c:	ddc00815 	stw	r23,32(sp)
    1e30:	dd800715 	stw	r22,28(sp)
    1e34:	dd400615 	stw	r21,24(sp)
    1e38:	dd000515 	stw	r20,20(sp)
    1e3c:	dcc00415 	stw	r19,16(sp)
    1e40:	dc400215 	stw	r17,8(sp)
    1e44:	dc000115 	stw	r16,4(sp)
    1e48:	288002c4 	addi	r2,r5,11
    1e4c:	00c00584 	movi	r3,22
    1e50:	2025883a 	mov	r18,r4
    1e54:	18807f2e 	bgeu	r3,r2,2054 <_malloc_r+0x238>
    1e58:	047ffe04 	movi	r17,-8
    1e5c:	1462703a 	and	r17,r2,r17
    1e60:	8800a316 	blt	r17,zero,20f0 <_malloc_r+0x2d4>
    1e64:	8940a236 	bltu	r17,r5,20f0 <_malloc_r+0x2d4>
    1e68:	000eb040 	call	eb04 <__malloc_lock>
    1e6c:	00807dc4 	movi	r2,503
    1e70:	1441e92e 	bgeu	r2,r17,2618 <_malloc_r+0x7fc>
    1e74:	8804d27a 	srli	r2,r17,9
    1e78:	1000a126 	beq	r2,zero,2100 <_malloc_r+0x2e4>
    1e7c:	00c00104 	movi	r3,4
    1e80:	18811e36 	bltu	r3,r2,22fc <_malloc_r+0x4e0>
    1e84:	8804d1ba 	srli	r2,r17,6
    1e88:	12000e44 	addi	r8,r2,57
    1e8c:	11c00e04 	addi	r7,r2,56
    1e90:	4209883a 	add	r4,r8,r8
    1e94:	04c00074 	movhi	r19,1
    1e98:	2109883a 	add	r4,r4,r4
    1e9c:	9cc62804 	addi	r19,r19,6304
    1ea0:	2109883a 	add	r4,r4,r4
    1ea4:	9909883a 	add	r4,r19,r4
    1ea8:	24000117 	ldw	r16,4(r4)
    1eac:	213ffe04 	addi	r4,r4,-8
    1eb0:	24009726 	beq	r4,r16,2110 <_malloc_r+0x2f4>
    1eb4:	80800117 	ldw	r2,4(r16)
    1eb8:	01bfff04 	movi	r6,-4
    1ebc:	014003c4 	movi	r5,15
    1ec0:	1184703a 	and	r2,r2,r6
    1ec4:	1447c83a 	sub	r3,r2,r17
    1ec8:	28c00716 	blt	r5,r3,1ee8 <_malloc_r+0xcc>
    1ecc:	1800920e 	bge	r3,zero,2118 <_malloc_r+0x2fc>
    1ed0:	84000317 	ldw	r16,12(r16)
    1ed4:	24008e26 	beq	r4,r16,2110 <_malloc_r+0x2f4>
    1ed8:	80800117 	ldw	r2,4(r16)
    1edc:	1184703a 	and	r2,r2,r6
    1ee0:	1447c83a 	sub	r3,r2,r17
    1ee4:	28fff90e 	bge	r5,r3,1ecc <__alt_data_end+0xff001ecc>
    1ee8:	3809883a 	mov	r4,r7
    1eec:	01800074 	movhi	r6,1
    1ef0:	9c000417 	ldw	r16,16(r19)
    1ef4:	31862804 	addi	r6,r6,6304
    1ef8:	32000204 	addi	r8,r6,8
    1efc:	82013426 	beq	r16,r8,23d0 <_malloc_r+0x5b4>
    1f00:	80c00117 	ldw	r3,4(r16)
    1f04:	00bfff04 	movi	r2,-4
    1f08:	188e703a 	and	r7,r3,r2
    1f0c:	3c45c83a 	sub	r2,r7,r17
    1f10:	00c003c4 	movi	r3,15
    1f14:	18811f16 	blt	r3,r2,2394 <_malloc_r+0x578>
    1f18:	32000515 	stw	r8,20(r6)
    1f1c:	32000415 	stw	r8,16(r6)
    1f20:	10007f0e 	bge	r2,zero,2120 <_malloc_r+0x304>
    1f24:	00807fc4 	movi	r2,511
    1f28:	11c0fd36 	bltu	r2,r7,2320 <_malloc_r+0x504>
    1f2c:	3806d0fa 	srli	r3,r7,3
    1f30:	01c00044 	movi	r7,1
    1f34:	30800117 	ldw	r2,4(r6)
    1f38:	19400044 	addi	r5,r3,1
    1f3c:	294b883a 	add	r5,r5,r5
    1f40:	1807d0ba 	srai	r3,r3,2
    1f44:	294b883a 	add	r5,r5,r5
    1f48:	294b883a 	add	r5,r5,r5
    1f4c:	298b883a 	add	r5,r5,r6
    1f50:	38c6983a 	sll	r3,r7,r3
    1f54:	29c00017 	ldw	r7,0(r5)
    1f58:	2a7ffe04 	addi	r9,r5,-8
    1f5c:	1886b03a 	or	r3,r3,r2
    1f60:	82400315 	stw	r9,12(r16)
    1f64:	81c00215 	stw	r7,8(r16)
    1f68:	30c00115 	stw	r3,4(r6)
    1f6c:	2c000015 	stw	r16,0(r5)
    1f70:	3c000315 	stw	r16,12(r7)
    1f74:	2005d0ba 	srai	r2,r4,2
    1f78:	01400044 	movi	r5,1
    1f7c:	288a983a 	sll	r5,r5,r2
    1f80:	19406f36 	bltu	r3,r5,2140 <_malloc_r+0x324>
    1f84:	28c4703a 	and	r2,r5,r3
    1f88:	10000a1e 	bne	r2,zero,1fb4 <_malloc_r+0x198>
    1f8c:	00bfff04 	movi	r2,-4
    1f90:	294b883a 	add	r5,r5,r5
    1f94:	2088703a 	and	r4,r4,r2
    1f98:	28c4703a 	and	r2,r5,r3
    1f9c:	21000104 	addi	r4,r4,4
    1fa0:	1000041e 	bne	r2,zero,1fb4 <_malloc_r+0x198>
    1fa4:	294b883a 	add	r5,r5,r5
    1fa8:	28c4703a 	and	r2,r5,r3
    1fac:	21000104 	addi	r4,r4,4
    1fb0:	103ffc26 	beq	r2,zero,1fa4 <__alt_data_end+0xff001fa4>
    1fb4:	02bfff04 	movi	r10,-4
    1fb8:	024003c4 	movi	r9,15
    1fbc:	21800044 	addi	r6,r4,1
    1fc0:	318d883a 	add	r6,r6,r6
    1fc4:	318d883a 	add	r6,r6,r6
    1fc8:	318d883a 	add	r6,r6,r6
    1fcc:	998d883a 	add	r6,r19,r6
    1fd0:	333ffe04 	addi	r12,r6,-8
    1fd4:	2017883a 	mov	r11,r4
    1fd8:	31800104 	addi	r6,r6,4
    1fdc:	34000017 	ldw	r16,0(r6)
    1fe0:	31fffd04 	addi	r7,r6,-12
    1fe4:	81c0041e 	bne	r16,r7,1ff8 <_malloc_r+0x1dc>
    1fe8:	0000fb06 	br	23d8 <_malloc_r+0x5bc>
    1fec:	1801030e 	bge	r3,zero,23fc <_malloc_r+0x5e0>
    1ff0:	84000317 	ldw	r16,12(r16)
    1ff4:	81c0f826 	beq	r16,r7,23d8 <_malloc_r+0x5bc>
    1ff8:	80800117 	ldw	r2,4(r16)
    1ffc:	1284703a 	and	r2,r2,r10
    2000:	1447c83a 	sub	r3,r2,r17
    2004:	48fff90e 	bge	r9,r3,1fec <__alt_data_end+0xff001fec>
    2008:	80800317 	ldw	r2,12(r16)
    200c:	81000217 	ldw	r4,8(r16)
    2010:	89400054 	ori	r5,r17,1
    2014:	81400115 	stw	r5,4(r16)
    2018:	20800315 	stw	r2,12(r4)
    201c:	11000215 	stw	r4,8(r2)
    2020:	8463883a 	add	r17,r16,r17
    2024:	9c400515 	stw	r17,20(r19)
    2028:	9c400415 	stw	r17,16(r19)
    202c:	18800054 	ori	r2,r3,1
    2030:	88800115 	stw	r2,4(r17)
    2034:	8a000315 	stw	r8,12(r17)
    2038:	8a000215 	stw	r8,8(r17)
    203c:	88e3883a 	add	r17,r17,r3
    2040:	88c00015 	stw	r3,0(r17)
    2044:	9009883a 	mov	r4,r18
    2048:	000eb280 	call	eb28 <__malloc_unlock>
    204c:	80800204 	addi	r2,r16,8
    2050:	00001b06 	br	20c0 <_malloc_r+0x2a4>
    2054:	04400404 	movi	r17,16
    2058:	89402536 	bltu	r17,r5,20f0 <_malloc_r+0x2d4>
    205c:	000eb040 	call	eb04 <__malloc_lock>
    2060:	00800184 	movi	r2,6
    2064:	01000084 	movi	r4,2
    2068:	04c00074 	movhi	r19,1
    206c:	1085883a 	add	r2,r2,r2
    2070:	9cc62804 	addi	r19,r19,6304
    2074:	1085883a 	add	r2,r2,r2
    2078:	9885883a 	add	r2,r19,r2
    207c:	14000117 	ldw	r16,4(r2)
    2080:	10fffe04 	addi	r3,r2,-8
    2084:	80c0d926 	beq	r16,r3,23ec <_malloc_r+0x5d0>
    2088:	80c00117 	ldw	r3,4(r16)
    208c:	81000317 	ldw	r4,12(r16)
    2090:	00bfff04 	movi	r2,-4
    2094:	1884703a 	and	r2,r3,r2
    2098:	81400217 	ldw	r5,8(r16)
    209c:	8085883a 	add	r2,r16,r2
    20a0:	10c00117 	ldw	r3,4(r2)
    20a4:	29000315 	stw	r4,12(r5)
    20a8:	21400215 	stw	r5,8(r4)
    20ac:	18c00054 	ori	r3,r3,1
    20b0:	10c00115 	stw	r3,4(r2)
    20b4:	9009883a 	mov	r4,r18
    20b8:	000eb280 	call	eb28 <__malloc_unlock>
    20bc:	80800204 	addi	r2,r16,8
    20c0:	dfc00a17 	ldw	ra,40(sp)
    20c4:	df000917 	ldw	fp,36(sp)
    20c8:	ddc00817 	ldw	r23,32(sp)
    20cc:	dd800717 	ldw	r22,28(sp)
    20d0:	dd400617 	ldw	r21,24(sp)
    20d4:	dd000517 	ldw	r20,20(sp)
    20d8:	dcc00417 	ldw	r19,16(sp)
    20dc:	dc800317 	ldw	r18,12(sp)
    20e0:	dc400217 	ldw	r17,8(sp)
    20e4:	dc000117 	ldw	r16,4(sp)
    20e8:	dec00b04 	addi	sp,sp,44
    20ec:	f800283a 	ret
    20f0:	00800304 	movi	r2,12
    20f4:	90800015 	stw	r2,0(r18)
    20f8:	0005883a 	mov	r2,zero
    20fc:	003ff006 	br	20c0 <__alt_data_end+0xff0020c0>
    2100:	01002004 	movi	r4,128
    2104:	02001004 	movi	r8,64
    2108:	01c00fc4 	movi	r7,63
    210c:	003f6106 	br	1e94 <__alt_data_end+0xff001e94>
    2110:	4009883a 	mov	r4,r8
    2114:	003f7506 	br	1eec <__alt_data_end+0xff001eec>
    2118:	81000317 	ldw	r4,12(r16)
    211c:	003fde06 	br	2098 <__alt_data_end+0xff002098>
    2120:	81c5883a 	add	r2,r16,r7
    2124:	11400117 	ldw	r5,4(r2)
    2128:	9009883a 	mov	r4,r18
    212c:	29400054 	ori	r5,r5,1
    2130:	11400115 	stw	r5,4(r2)
    2134:	000eb280 	call	eb28 <__malloc_unlock>
    2138:	80800204 	addi	r2,r16,8
    213c:	003fe006 	br	20c0 <__alt_data_end+0xff0020c0>
    2140:	9c000217 	ldw	r16,8(r19)
    2144:	00bfff04 	movi	r2,-4
    2148:	85800117 	ldw	r22,4(r16)
    214c:	b0ac703a 	and	r22,r22,r2
    2150:	b4400336 	bltu	r22,r17,2160 <_malloc_r+0x344>
    2154:	b445c83a 	sub	r2,r22,r17
    2158:	00c003c4 	movi	r3,15
    215c:	18805d16 	blt	r3,r2,22d4 <_malloc_r+0x4b8>
    2160:	05c00074 	movhi	r23,1
    2164:	00800074 	movhi	r2,1
    2168:	1093ea04 	addi	r2,r2,20392
    216c:	bdccd304 	addi	r23,r23,13132
    2170:	15400017 	ldw	r21,0(r2)
    2174:	b8c00017 	ldw	r3,0(r23)
    2178:	00bfffc4 	movi	r2,-1
    217c:	858d883a 	add	r6,r16,r22
    2180:	8d6b883a 	add	r21,r17,r21
    2184:	1880ea26 	beq	r3,r2,2530 <_malloc_r+0x714>
    2188:	ad4403c4 	addi	r21,r21,4111
    218c:	00bc0004 	movi	r2,-4096
    2190:	a8aa703a 	and	r21,r21,r2
    2194:	a80b883a 	mov	r5,r21
    2198:	9009883a 	mov	r4,r18
    219c:	d9800015 	stw	r6,0(sp)
    21a0:	00027680 	call	2768 <_sbrk_r>
    21a4:	1029883a 	mov	r20,r2
    21a8:	00bfffc4 	movi	r2,-1
    21ac:	d9800017 	ldw	r6,0(sp)
    21b0:	a080e826 	beq	r20,r2,2554 <_malloc_r+0x738>
    21b4:	a180a636 	bltu	r20,r6,2450 <_malloc_r+0x634>
    21b8:	07000074 	movhi	fp,1
    21bc:	e713f804 	addi	fp,fp,20448
    21c0:	e0800017 	ldw	r2,0(fp)
    21c4:	a887883a 	add	r3,r21,r2
    21c8:	e0c00015 	stw	r3,0(fp)
    21cc:	3500e626 	beq	r6,r20,2568 <_malloc_r+0x74c>
    21d0:	b9000017 	ldw	r4,0(r23)
    21d4:	00bfffc4 	movi	r2,-1
    21d8:	2080ee26 	beq	r4,r2,2594 <_malloc_r+0x778>
    21dc:	a185c83a 	sub	r2,r20,r6
    21e0:	10c5883a 	add	r2,r2,r3
    21e4:	e0800015 	stw	r2,0(fp)
    21e8:	a0c001cc 	andi	r3,r20,7
    21ec:	1800bc26 	beq	r3,zero,24e0 <_malloc_r+0x6c4>
    21f0:	a0e9c83a 	sub	r20,r20,r3
    21f4:	00840204 	movi	r2,4104
    21f8:	a5000204 	addi	r20,r20,8
    21fc:	10c7c83a 	sub	r3,r2,r3
    2200:	a545883a 	add	r2,r20,r21
    2204:	1083ffcc 	andi	r2,r2,4095
    2208:	18abc83a 	sub	r21,r3,r2
    220c:	a80b883a 	mov	r5,r21
    2210:	9009883a 	mov	r4,r18
    2214:	00027680 	call	2768 <_sbrk_r>
    2218:	00ffffc4 	movi	r3,-1
    221c:	10c0e126 	beq	r2,r3,25a4 <_malloc_r+0x788>
    2220:	1505c83a 	sub	r2,r2,r20
    2224:	1545883a 	add	r2,r2,r21
    2228:	10800054 	ori	r2,r2,1
    222c:	e0c00017 	ldw	r3,0(fp)
    2230:	9d000215 	stw	r20,8(r19)
    2234:	a0800115 	stw	r2,4(r20)
    2238:	a8c7883a 	add	r3,r21,r3
    223c:	e0c00015 	stw	r3,0(fp)
    2240:	84c00e26 	beq	r16,r19,227c <_malloc_r+0x460>
    2244:	018003c4 	movi	r6,15
    2248:	3580a72e 	bgeu	r6,r22,24e8 <_malloc_r+0x6cc>
    224c:	81400117 	ldw	r5,4(r16)
    2250:	013ffe04 	movi	r4,-8
    2254:	b0bffd04 	addi	r2,r22,-12
    2258:	1104703a 	and	r2,r2,r4
    225c:	2900004c 	andi	r4,r5,1
    2260:	2088b03a 	or	r4,r4,r2
    2264:	81000115 	stw	r4,4(r16)
    2268:	01400144 	movi	r5,5
    226c:	8089883a 	add	r4,r16,r2
    2270:	21400115 	stw	r5,4(r4)
    2274:	21400215 	stw	r5,8(r4)
    2278:	3080cd36 	bltu	r6,r2,25b0 <_malloc_r+0x794>
    227c:	00800074 	movhi	r2,1
    2280:	1093e904 	addi	r2,r2,20388
    2284:	11000017 	ldw	r4,0(r2)
    2288:	20c0012e 	bgeu	r4,r3,2290 <_malloc_r+0x474>
    228c:	10c00015 	stw	r3,0(r2)
    2290:	00800074 	movhi	r2,1
    2294:	1093e804 	addi	r2,r2,20384
    2298:	11000017 	ldw	r4,0(r2)
    229c:	9c000217 	ldw	r16,8(r19)
    22a0:	20c0012e 	bgeu	r4,r3,22a8 <_malloc_r+0x48c>
    22a4:	10c00015 	stw	r3,0(r2)
    22a8:	80c00117 	ldw	r3,4(r16)
    22ac:	00bfff04 	movi	r2,-4
    22b0:	1886703a 	and	r3,r3,r2
    22b4:	1c45c83a 	sub	r2,r3,r17
    22b8:	1c400236 	bltu	r3,r17,22c4 <_malloc_r+0x4a8>
    22bc:	00c003c4 	movi	r3,15
    22c0:	18800416 	blt	r3,r2,22d4 <_malloc_r+0x4b8>
    22c4:	9009883a 	mov	r4,r18
    22c8:	000eb280 	call	eb28 <__malloc_unlock>
    22cc:	0005883a 	mov	r2,zero
    22d0:	003f7b06 	br	20c0 <__alt_data_end+0xff0020c0>
    22d4:	88c00054 	ori	r3,r17,1
    22d8:	80c00115 	stw	r3,4(r16)
    22dc:	8463883a 	add	r17,r16,r17
    22e0:	10800054 	ori	r2,r2,1
    22e4:	9c400215 	stw	r17,8(r19)
    22e8:	88800115 	stw	r2,4(r17)
    22ec:	9009883a 	mov	r4,r18
    22f0:	000eb280 	call	eb28 <__malloc_unlock>
    22f4:	80800204 	addi	r2,r16,8
    22f8:	003f7106 	br	20c0 <__alt_data_end+0xff0020c0>
    22fc:	00c00504 	movi	r3,20
    2300:	18804a2e 	bgeu	r3,r2,242c <_malloc_r+0x610>
    2304:	00c01504 	movi	r3,84
    2308:	18806e36 	bltu	r3,r2,24c4 <_malloc_r+0x6a8>
    230c:	8804d33a 	srli	r2,r17,12
    2310:	12001bc4 	addi	r8,r2,111
    2314:	11c01b84 	addi	r7,r2,110
    2318:	4209883a 	add	r4,r8,r8
    231c:	003edd06 	br	1e94 <__alt_data_end+0xff001e94>
    2320:	3804d27a 	srli	r2,r7,9
    2324:	00c00104 	movi	r3,4
    2328:	1880442e 	bgeu	r3,r2,243c <_malloc_r+0x620>
    232c:	00c00504 	movi	r3,20
    2330:	18808136 	bltu	r3,r2,2538 <_malloc_r+0x71c>
    2334:	11401704 	addi	r5,r2,92
    2338:	10c016c4 	addi	r3,r2,91
    233c:	294b883a 	add	r5,r5,r5
    2340:	294b883a 	add	r5,r5,r5
    2344:	294b883a 	add	r5,r5,r5
    2348:	994b883a 	add	r5,r19,r5
    234c:	28800017 	ldw	r2,0(r5)
    2350:	01800074 	movhi	r6,1
    2354:	297ffe04 	addi	r5,r5,-8
    2358:	31862804 	addi	r6,r6,6304
    235c:	28806526 	beq	r5,r2,24f4 <_malloc_r+0x6d8>
    2360:	01bfff04 	movi	r6,-4
    2364:	10c00117 	ldw	r3,4(r2)
    2368:	1986703a 	and	r3,r3,r6
    236c:	38c0022e 	bgeu	r7,r3,2378 <_malloc_r+0x55c>
    2370:	10800217 	ldw	r2,8(r2)
    2374:	28bffb1e 	bne	r5,r2,2364 <__alt_data_end+0xff002364>
    2378:	11400317 	ldw	r5,12(r2)
    237c:	98c00117 	ldw	r3,4(r19)
    2380:	81400315 	stw	r5,12(r16)
    2384:	80800215 	stw	r2,8(r16)
    2388:	2c000215 	stw	r16,8(r5)
    238c:	14000315 	stw	r16,12(r2)
    2390:	003ef806 	br	1f74 <__alt_data_end+0xff001f74>
    2394:	88c00054 	ori	r3,r17,1
    2398:	80c00115 	stw	r3,4(r16)
    239c:	8463883a 	add	r17,r16,r17
    23a0:	34400515 	stw	r17,20(r6)
    23a4:	34400415 	stw	r17,16(r6)
    23a8:	10c00054 	ori	r3,r2,1
    23ac:	8a000315 	stw	r8,12(r17)
    23b0:	8a000215 	stw	r8,8(r17)
    23b4:	88c00115 	stw	r3,4(r17)
    23b8:	88a3883a 	add	r17,r17,r2
    23bc:	88800015 	stw	r2,0(r17)
    23c0:	9009883a 	mov	r4,r18
    23c4:	000eb280 	call	eb28 <__malloc_unlock>
    23c8:	80800204 	addi	r2,r16,8
    23cc:	003f3c06 	br	20c0 <__alt_data_end+0xff0020c0>
    23d0:	30c00117 	ldw	r3,4(r6)
    23d4:	003ee706 	br	1f74 <__alt_data_end+0xff001f74>
    23d8:	5ac00044 	addi	r11,r11,1
    23dc:	588000cc 	andi	r2,r11,3
    23e0:	31800204 	addi	r6,r6,8
    23e4:	103efd1e 	bne	r2,zero,1fdc <__alt_data_end+0xff001fdc>
    23e8:	00002406 	br	247c <_malloc_r+0x660>
    23ec:	14000317 	ldw	r16,12(r2)
    23f0:	143f251e 	bne	r2,r16,2088 <__alt_data_end+0xff002088>
    23f4:	21000084 	addi	r4,r4,2
    23f8:	003ebc06 	br	1eec <__alt_data_end+0xff001eec>
    23fc:	8085883a 	add	r2,r16,r2
    2400:	10c00117 	ldw	r3,4(r2)
    2404:	81000317 	ldw	r4,12(r16)
    2408:	81400217 	ldw	r5,8(r16)
    240c:	18c00054 	ori	r3,r3,1
    2410:	10c00115 	stw	r3,4(r2)
    2414:	29000315 	stw	r4,12(r5)
    2418:	21400215 	stw	r5,8(r4)
    241c:	9009883a 	mov	r4,r18
    2420:	000eb280 	call	eb28 <__malloc_unlock>
    2424:	80800204 	addi	r2,r16,8
    2428:	003f2506 	br	20c0 <__alt_data_end+0xff0020c0>
    242c:	12001704 	addi	r8,r2,92
    2430:	11c016c4 	addi	r7,r2,91
    2434:	4209883a 	add	r4,r8,r8
    2438:	003e9606 	br	1e94 <__alt_data_end+0xff001e94>
    243c:	3804d1ba 	srli	r2,r7,6
    2440:	11400e44 	addi	r5,r2,57
    2444:	10c00e04 	addi	r3,r2,56
    2448:	294b883a 	add	r5,r5,r5
    244c:	003fbc06 	br	2340 <__alt_data_end+0xff002340>
    2450:	84ff5926 	beq	r16,r19,21b8 <__alt_data_end+0xff0021b8>
    2454:	00800074 	movhi	r2,1
    2458:	10862804 	addi	r2,r2,6304
    245c:	14000217 	ldw	r16,8(r2)
    2460:	00bfff04 	movi	r2,-4
    2464:	80c00117 	ldw	r3,4(r16)
    2468:	1886703a 	and	r3,r3,r2
    246c:	003f9106 	br	22b4 <__alt_data_end+0xff0022b4>
    2470:	60800217 	ldw	r2,8(r12)
    2474:	213fffc4 	addi	r4,r4,-1
    2478:	1300651e 	bne	r2,r12,2610 <_malloc_r+0x7f4>
    247c:	208000cc 	andi	r2,r4,3
    2480:	633ffe04 	addi	r12,r12,-8
    2484:	103ffa1e 	bne	r2,zero,2470 <__alt_data_end+0xff002470>
    2488:	98800117 	ldw	r2,4(r19)
    248c:	0146303a 	nor	r3,zero,r5
    2490:	1884703a 	and	r2,r3,r2
    2494:	98800115 	stw	r2,4(r19)
    2498:	294b883a 	add	r5,r5,r5
    249c:	117f2836 	bltu	r2,r5,2140 <__alt_data_end+0xff002140>
    24a0:	283f2726 	beq	r5,zero,2140 <__alt_data_end+0xff002140>
    24a4:	2886703a 	and	r3,r5,r2
    24a8:	5809883a 	mov	r4,r11
    24ac:	183ec31e 	bne	r3,zero,1fbc <__alt_data_end+0xff001fbc>
    24b0:	294b883a 	add	r5,r5,r5
    24b4:	2886703a 	and	r3,r5,r2
    24b8:	21000104 	addi	r4,r4,4
    24bc:	183ffc26 	beq	r3,zero,24b0 <__alt_data_end+0xff0024b0>
    24c0:	003ebe06 	br	1fbc <__alt_data_end+0xff001fbc>
    24c4:	00c05504 	movi	r3,340
    24c8:	18801236 	bltu	r3,r2,2514 <_malloc_r+0x6f8>
    24cc:	8804d3fa 	srli	r2,r17,15
    24d0:	12001e04 	addi	r8,r2,120
    24d4:	11c01dc4 	addi	r7,r2,119
    24d8:	4209883a 	add	r4,r8,r8
    24dc:	003e6d06 	br	1e94 <__alt_data_end+0xff001e94>
    24e0:	00c40004 	movi	r3,4096
    24e4:	003f4606 	br	2200 <__alt_data_end+0xff002200>
    24e8:	00800044 	movi	r2,1
    24ec:	a0800115 	stw	r2,4(r20)
    24f0:	003f7406 	br	22c4 <__alt_data_end+0xff0022c4>
    24f4:	1805d0ba 	srai	r2,r3,2
    24f8:	01c00044 	movi	r7,1
    24fc:	30c00117 	ldw	r3,4(r6)
    2500:	388e983a 	sll	r7,r7,r2
    2504:	2805883a 	mov	r2,r5
    2508:	38c6b03a 	or	r3,r7,r3
    250c:	30c00115 	stw	r3,4(r6)
    2510:	003f9b06 	br	2380 <__alt_data_end+0xff002380>
    2514:	00c15504 	movi	r3,1364
    2518:	18801a36 	bltu	r3,r2,2584 <_malloc_r+0x768>
    251c:	8804d4ba 	srli	r2,r17,18
    2520:	12001f44 	addi	r8,r2,125
    2524:	11c01f04 	addi	r7,r2,124
    2528:	4209883a 	add	r4,r8,r8
    252c:	003e5906 	br	1e94 <__alt_data_end+0xff001e94>
    2530:	ad400404 	addi	r21,r21,16
    2534:	003f1706 	br	2194 <__alt_data_end+0xff002194>
    2538:	00c01504 	movi	r3,84
    253c:	18802336 	bltu	r3,r2,25cc <_malloc_r+0x7b0>
    2540:	3804d33a 	srli	r2,r7,12
    2544:	11401bc4 	addi	r5,r2,111
    2548:	10c01b84 	addi	r3,r2,110
    254c:	294b883a 	add	r5,r5,r5
    2550:	003f7b06 	br	2340 <__alt_data_end+0xff002340>
    2554:	9c000217 	ldw	r16,8(r19)
    2558:	00bfff04 	movi	r2,-4
    255c:	80c00117 	ldw	r3,4(r16)
    2560:	1886703a 	and	r3,r3,r2
    2564:	003f5306 	br	22b4 <__alt_data_end+0xff0022b4>
    2568:	3083ffcc 	andi	r2,r6,4095
    256c:	103f181e 	bne	r2,zero,21d0 <__alt_data_end+0xff0021d0>
    2570:	99000217 	ldw	r4,8(r19)
    2574:	b545883a 	add	r2,r22,r21
    2578:	10800054 	ori	r2,r2,1
    257c:	20800115 	stw	r2,4(r4)
    2580:	003f3e06 	br	227c <__alt_data_end+0xff00227c>
    2584:	01003f84 	movi	r4,254
    2588:	02001fc4 	movi	r8,127
    258c:	01c01f84 	movi	r7,126
    2590:	003e4006 	br	1e94 <__alt_data_end+0xff001e94>
    2594:	00800074 	movhi	r2,1
    2598:	108cd304 	addi	r2,r2,13132
    259c:	15000015 	stw	r20,0(r2)
    25a0:	003f1106 	br	21e8 <__alt_data_end+0xff0021e8>
    25a4:	00800044 	movi	r2,1
    25a8:	002b883a 	mov	r21,zero
    25ac:	003f1f06 	br	222c <__alt_data_end+0xff00222c>
    25b0:	81400204 	addi	r5,r16,8
    25b4:	9009883a 	mov	r4,r18
    25b8:	0006c6c0 	call	6c6c <_free_r>
    25bc:	00800074 	movhi	r2,1
    25c0:	1093f804 	addi	r2,r2,20448
    25c4:	10c00017 	ldw	r3,0(r2)
    25c8:	003f2c06 	br	227c <__alt_data_end+0xff00227c>
    25cc:	00c05504 	movi	r3,340
    25d0:	18800536 	bltu	r3,r2,25e8 <_malloc_r+0x7cc>
    25d4:	3804d3fa 	srli	r2,r7,15
    25d8:	11401e04 	addi	r5,r2,120
    25dc:	10c01dc4 	addi	r3,r2,119
    25e0:	294b883a 	add	r5,r5,r5
    25e4:	003f5606 	br	2340 <__alt_data_end+0xff002340>
    25e8:	00c15504 	movi	r3,1364
    25ec:	18800536 	bltu	r3,r2,2604 <_malloc_r+0x7e8>
    25f0:	3804d4ba 	srli	r2,r7,18
    25f4:	11401f44 	addi	r5,r2,125
    25f8:	10c01f04 	addi	r3,r2,124
    25fc:	294b883a 	add	r5,r5,r5
    2600:	003f4f06 	br	2340 <__alt_data_end+0xff002340>
    2604:	01403f84 	movi	r5,254
    2608:	00c01f84 	movi	r3,126
    260c:	003f4c06 	br	2340 <__alt_data_end+0xff002340>
    2610:	98800117 	ldw	r2,4(r19)
    2614:	003fa006 	br	2498 <__alt_data_end+0xff002498>
    2618:	8808d0fa 	srli	r4,r17,3
    261c:	20800044 	addi	r2,r4,1
    2620:	1085883a 	add	r2,r2,r2
    2624:	003e9006 	br	2068 <__alt_data_end+0xff002068>

00002628 <_printf_r>:
    2628:	defffd04 	addi	sp,sp,-12
    262c:	2805883a 	mov	r2,r5
    2630:	dfc00015 	stw	ra,0(sp)
    2634:	d9800115 	stw	r6,4(sp)
    2638:	d9c00215 	stw	r7,8(sp)
    263c:	21400217 	ldw	r5,8(r4)
    2640:	d9c00104 	addi	r7,sp,4
    2644:	100d883a 	mov	r6,r2
    2648:	00028540 	call	2854 <___vfprintf_internal_r>
    264c:	dfc00017 	ldw	ra,0(sp)
    2650:	dec00304 	addi	sp,sp,12
    2654:	f800283a 	ret

00002658 <printf>:
    2658:	defffc04 	addi	sp,sp,-16
    265c:	dfc00015 	stw	ra,0(sp)
    2660:	d9400115 	stw	r5,4(sp)
    2664:	d9800215 	stw	r6,8(sp)
    2668:	d9c00315 	stw	r7,12(sp)
    266c:	00800074 	movhi	r2,1
    2670:	108cd604 	addi	r2,r2,13144
    2674:	10800017 	ldw	r2,0(r2)
    2678:	200b883a 	mov	r5,r4
    267c:	d9800104 	addi	r6,sp,4
    2680:	11000217 	ldw	r4,8(r2)
    2684:	0004a4c0 	call	4a4c <__vfprintf_internal>
    2688:	dfc00017 	ldw	ra,0(sp)
    268c:	dec00404 	addi	sp,sp,16
    2690:	f800283a 	ret

00002694 <_puts_r>:
    2694:	defff604 	addi	sp,sp,-40
    2698:	dc000715 	stw	r16,28(sp)
    269c:	2021883a 	mov	r16,r4
    26a0:	2809883a 	mov	r4,r5
    26a4:	dc400815 	stw	r17,32(sp)
    26a8:	dfc00915 	stw	ra,36(sp)
    26ac:	2823883a 	mov	r17,r5
    26b0:	00027bc0 	call	27bc <strlen>
    26b4:	10c00044 	addi	r3,r2,1
    26b8:	d8800115 	stw	r2,4(sp)
    26bc:	00800074 	movhi	r2,1
    26c0:	10852604 	addi	r2,r2,5272
    26c4:	d8800215 	stw	r2,8(sp)
    26c8:	00800044 	movi	r2,1
    26cc:	d8800315 	stw	r2,12(sp)
    26d0:	00800084 	movi	r2,2
    26d4:	dc400015 	stw	r17,0(sp)
    26d8:	d8c00615 	stw	r3,24(sp)
    26dc:	dec00415 	stw	sp,16(sp)
    26e0:	d8800515 	stw	r2,20(sp)
    26e4:	80000226 	beq	r16,zero,26f0 <_puts_r+0x5c>
    26e8:	80800e17 	ldw	r2,56(r16)
    26ec:	10001426 	beq	r2,zero,2740 <_puts_r+0xac>
    26f0:	81400217 	ldw	r5,8(r16)
    26f4:	2880030b 	ldhu	r2,12(r5)
    26f8:	10c8000c 	andi	r3,r2,8192
    26fc:	1800061e 	bne	r3,zero,2718 <_puts_r+0x84>
    2700:	29001917 	ldw	r4,100(r5)
    2704:	00f7ffc4 	movi	r3,-8193
    2708:	10880014 	ori	r2,r2,8192
    270c:	20c6703a 	and	r3,r4,r3
    2710:	2880030d 	sth	r2,12(r5)
    2714:	28c01915 	stw	r3,100(r5)
    2718:	d9800404 	addi	r6,sp,16
    271c:	8009883a 	mov	r4,r16
    2720:	0006f7c0 	call	6f7c <__sfvwrite_r>
    2724:	1000091e 	bne	r2,zero,274c <_puts_r+0xb8>
    2728:	00800284 	movi	r2,10
    272c:	dfc00917 	ldw	ra,36(sp)
    2730:	dc400817 	ldw	r17,32(sp)
    2734:	dc000717 	ldw	r16,28(sp)
    2738:	dec00a04 	addi	sp,sp,40
    273c:	f800283a 	ret
    2740:	8009883a 	mov	r4,r16
    2744:	0006af80 	call	6af8 <__sinit>
    2748:	003fe906 	br	26f0 <__alt_data_end+0xff0026f0>
    274c:	00bfffc4 	movi	r2,-1
    2750:	003ff606 	br	272c <__alt_data_end+0xff00272c>

00002754 <puts>:
    2754:	00800074 	movhi	r2,1
    2758:	108cd604 	addi	r2,r2,13144
    275c:	200b883a 	mov	r5,r4
    2760:	11000017 	ldw	r4,0(r2)
    2764:	00026941 	jmpi	2694 <_puts_r>

00002768 <_sbrk_r>:
    2768:	defffd04 	addi	sp,sp,-12
    276c:	dc000015 	stw	r16,0(sp)
    2770:	04000074 	movhi	r16,1
    2774:	dc400115 	stw	r17,4(sp)
    2778:	8413eb04 	addi	r16,r16,20396
    277c:	2023883a 	mov	r17,r4
    2780:	2809883a 	mov	r4,r5
    2784:	dfc00215 	stw	ra,8(sp)
    2788:	80000015 	stw	zero,0(r16)
    278c:	000ece80 	call	ece8 <sbrk>
    2790:	00ffffc4 	movi	r3,-1
    2794:	10c00526 	beq	r2,r3,27ac <_sbrk_r+0x44>
    2798:	dfc00217 	ldw	ra,8(sp)
    279c:	dc400117 	ldw	r17,4(sp)
    27a0:	dc000017 	ldw	r16,0(sp)
    27a4:	dec00304 	addi	sp,sp,12
    27a8:	f800283a 	ret
    27ac:	80c00017 	ldw	r3,0(r16)
    27b0:	183ff926 	beq	r3,zero,2798 <__alt_data_end+0xff002798>
    27b4:	88c00015 	stw	r3,0(r17)
    27b8:	003ff706 	br	2798 <__alt_data_end+0xff002798>

000027bc <strlen>:
    27bc:	208000cc 	andi	r2,r4,3
    27c0:	10002026 	beq	r2,zero,2844 <strlen+0x88>
    27c4:	20800007 	ldb	r2,0(r4)
    27c8:	10002026 	beq	r2,zero,284c <strlen+0x90>
    27cc:	2005883a 	mov	r2,r4
    27d0:	00000206 	br	27dc <strlen+0x20>
    27d4:	10c00007 	ldb	r3,0(r2)
    27d8:	18001826 	beq	r3,zero,283c <strlen+0x80>
    27dc:	10800044 	addi	r2,r2,1
    27e0:	10c000cc 	andi	r3,r2,3
    27e4:	183ffb1e 	bne	r3,zero,27d4 <__alt_data_end+0xff0027d4>
    27e8:	10c00017 	ldw	r3,0(r2)
    27ec:	01ffbff4 	movhi	r7,65279
    27f0:	39ffbfc4 	addi	r7,r7,-257
    27f4:	00ca303a 	nor	r5,zero,r3
    27f8:	01a02074 	movhi	r6,32897
    27fc:	19c7883a 	add	r3,r3,r7
    2800:	31a02004 	addi	r6,r6,-32640
    2804:	1946703a 	and	r3,r3,r5
    2808:	1986703a 	and	r3,r3,r6
    280c:	1800091e 	bne	r3,zero,2834 <strlen+0x78>
    2810:	10800104 	addi	r2,r2,4
    2814:	10c00017 	ldw	r3,0(r2)
    2818:	19cb883a 	add	r5,r3,r7
    281c:	00c6303a 	nor	r3,zero,r3
    2820:	28c6703a 	and	r3,r5,r3
    2824:	1986703a 	and	r3,r3,r6
    2828:	183ff926 	beq	r3,zero,2810 <__alt_data_end+0xff002810>
    282c:	00000106 	br	2834 <strlen+0x78>
    2830:	10800044 	addi	r2,r2,1
    2834:	10c00007 	ldb	r3,0(r2)
    2838:	183ffd1e 	bne	r3,zero,2830 <__alt_data_end+0xff002830>
    283c:	1105c83a 	sub	r2,r2,r4
    2840:	f800283a 	ret
    2844:	2005883a 	mov	r2,r4
    2848:	003fe706 	br	27e8 <__alt_data_end+0xff0027e8>
    284c:	0005883a 	mov	r2,zero
    2850:	f800283a 	ret

00002854 <___vfprintf_internal_r>:
    2854:	deffb804 	addi	sp,sp,-288
    2858:	dfc04715 	stw	ra,284(sp)
    285c:	ddc04515 	stw	r23,276(sp)
    2860:	dd404315 	stw	r21,268(sp)
    2864:	d9002c15 	stw	r4,176(sp)
    2868:	282f883a 	mov	r23,r5
    286c:	302b883a 	mov	r21,r6
    2870:	d9c02d15 	stw	r7,180(sp)
    2874:	df004615 	stw	fp,280(sp)
    2878:	dd804415 	stw	r22,272(sp)
    287c:	dd004215 	stw	r20,264(sp)
    2880:	dcc04115 	stw	r19,260(sp)
    2884:	dc804015 	stw	r18,256(sp)
    2888:	dc403f15 	stw	r17,252(sp)
    288c:	dc003e15 	stw	r16,248(sp)
    2890:	000766c0 	call	766c <_localeconv_r>
    2894:	10800017 	ldw	r2,0(r2)
    2898:	1009883a 	mov	r4,r2
    289c:	d8803415 	stw	r2,208(sp)
    28a0:	00027bc0 	call	27bc <strlen>
    28a4:	d8803715 	stw	r2,220(sp)
    28a8:	d8802c17 	ldw	r2,176(sp)
    28ac:	10000226 	beq	r2,zero,28b8 <___vfprintf_internal_r+0x64>
    28b0:	10800e17 	ldw	r2,56(r2)
    28b4:	1000f926 	beq	r2,zero,2c9c <___vfprintf_internal_r+0x448>
    28b8:	b880030b 	ldhu	r2,12(r23)
    28bc:	10c8000c 	andi	r3,r2,8192
    28c0:	1800061e 	bne	r3,zero,28dc <___vfprintf_internal_r+0x88>
    28c4:	b9001917 	ldw	r4,100(r23)
    28c8:	00f7ffc4 	movi	r3,-8193
    28cc:	10880014 	ori	r2,r2,8192
    28d0:	20c6703a 	and	r3,r4,r3
    28d4:	b880030d 	sth	r2,12(r23)
    28d8:	b8c01915 	stw	r3,100(r23)
    28dc:	10c0020c 	andi	r3,r2,8
    28e0:	1800c126 	beq	r3,zero,2be8 <___vfprintf_internal_r+0x394>
    28e4:	b8c00417 	ldw	r3,16(r23)
    28e8:	1800bf26 	beq	r3,zero,2be8 <___vfprintf_internal_r+0x394>
    28ec:	1080068c 	andi	r2,r2,26
    28f0:	00c00284 	movi	r3,10
    28f4:	10c0c426 	beq	r2,r3,2c08 <___vfprintf_internal_r+0x3b4>
    28f8:	d8c00404 	addi	r3,sp,16
    28fc:	05000074 	movhi	r20,1
    2900:	d9001e04 	addi	r4,sp,120
    2904:	a5053b84 	addi	r20,r20,5358
    2908:	d8c01e15 	stw	r3,120(sp)
    290c:	d8002015 	stw	zero,128(sp)
    2910:	d8001f15 	stw	zero,124(sp)
    2914:	d8003315 	stw	zero,204(sp)
    2918:	d8003615 	stw	zero,216(sp)
    291c:	d8003815 	stw	zero,224(sp)
    2920:	1811883a 	mov	r8,r3
    2924:	d8003915 	stw	zero,228(sp)
    2928:	d8003a15 	stw	zero,232(sp)
    292c:	d8002f15 	stw	zero,188(sp)
    2930:	d9002815 	stw	r4,160(sp)
    2934:	a8800007 	ldb	r2,0(r21)
    2938:	10027b26 	beq	r2,zero,3328 <___vfprintf_internal_r+0xad4>
    293c:	00c00944 	movi	r3,37
    2940:	a821883a 	mov	r16,r21
    2944:	10c0021e 	bne	r2,r3,2950 <___vfprintf_internal_r+0xfc>
    2948:	00001406 	br	299c <___vfprintf_internal_r+0x148>
    294c:	10c00326 	beq	r2,r3,295c <___vfprintf_internal_r+0x108>
    2950:	84000044 	addi	r16,r16,1
    2954:	80800007 	ldb	r2,0(r16)
    2958:	103ffc1e 	bne	r2,zero,294c <__alt_data_end+0xff00294c>
    295c:	8563c83a 	sub	r17,r16,r21
    2960:	88000e26 	beq	r17,zero,299c <___vfprintf_internal_r+0x148>
    2964:	d8c02017 	ldw	r3,128(sp)
    2968:	d8801f17 	ldw	r2,124(sp)
    296c:	45400015 	stw	r21,0(r8)
    2970:	1c47883a 	add	r3,r3,r17
    2974:	10800044 	addi	r2,r2,1
    2978:	d8c02015 	stw	r3,128(sp)
    297c:	44400115 	stw	r17,4(r8)
    2980:	d8801f15 	stw	r2,124(sp)
    2984:	00c001c4 	movi	r3,7
    2988:	1880a716 	blt	r3,r2,2c28 <___vfprintf_internal_r+0x3d4>
    298c:	42000204 	addi	r8,r8,8
    2990:	d9402f17 	ldw	r5,188(sp)
    2994:	2c4b883a 	add	r5,r5,r17
    2998:	d9402f15 	stw	r5,188(sp)
    299c:	80800007 	ldb	r2,0(r16)
    29a0:	1000a826 	beq	r2,zero,2c44 <___vfprintf_internal_r+0x3f0>
    29a4:	84400047 	ldb	r17,1(r16)
    29a8:	00bfffc4 	movi	r2,-1
    29ac:	85400044 	addi	r21,r16,1
    29b0:	d8002785 	stb	zero,158(sp)
    29b4:	0007883a 	mov	r3,zero
    29b8:	000f883a 	mov	r7,zero
    29bc:	d8802915 	stw	r2,164(sp)
    29c0:	d8003115 	stw	zero,196(sp)
    29c4:	0025883a 	mov	r18,zero
    29c8:	01401604 	movi	r5,88
    29cc:	01800244 	movi	r6,9
    29d0:	02800a84 	movi	r10,42
    29d4:	02401b04 	movi	r9,108
    29d8:	ad400044 	addi	r21,r21,1
    29dc:	88bff804 	addi	r2,r17,-32
    29e0:	28830436 	bltu	r5,r2,35f4 <___vfprintf_internal_r+0xda0>
    29e4:	100490ba 	slli	r2,r2,2
    29e8:	01000034 	movhi	r4,0
    29ec:	210a7f04 	addi	r4,r4,10748
    29f0:	1105883a 	add	r2,r2,r4
    29f4:	10800017 	ldw	r2,0(r2)
    29f8:	1000683a 	jmp	r2
    29fc:	00003514 	movui	zero,212
    2a00:	000035f4 	movhi	zero,215
    2a04:	000035f4 	movhi	zero,215
    2a08:	00003534 	movhi	zero,212
    2a0c:	000035f4 	movhi	zero,215
    2a10:	000035f4 	movhi	zero,215
    2a14:	000035f4 	movhi	zero,215
    2a18:	000035f4 	movhi	zero,215
    2a1c:	000035f4 	movhi	zero,215
    2a20:	000035f4 	movhi	zero,215
    2a24:	00002ca8 	cmpgeui	zero,zero,178
    2a28:	00003450 	cmplti	zero,zero,209
    2a2c:	000035f4 	movhi	zero,215
    2a30:	00002b70 	cmpltui	zero,zero,173
    2a34:	00002cd0 	cmplti	zero,zero,179
    2a38:	000035f4 	movhi	zero,215
    2a3c:	00002d10 	cmplti	zero,zero,180
    2a40:	00002d1c 	xori	zero,zero,180
    2a44:	00002d1c 	xori	zero,zero,180
    2a48:	00002d1c 	xori	zero,zero,180
    2a4c:	00002d1c 	xori	zero,zero,180
    2a50:	00002d1c 	xori	zero,zero,180
    2a54:	00002d1c 	xori	zero,zero,180
    2a58:	00002d1c 	xori	zero,zero,180
    2a5c:	00002d1c 	xori	zero,zero,180
    2a60:	00002d1c 	xori	zero,zero,180
    2a64:	000035f4 	movhi	zero,215
    2a68:	000035f4 	movhi	zero,215
    2a6c:	000035f4 	movhi	zero,215
    2a70:	000035f4 	movhi	zero,215
    2a74:	000035f4 	movhi	zero,215
    2a78:	000035f4 	movhi	zero,215
    2a7c:	000035f4 	movhi	zero,215
    2a80:	000035f4 	movhi	zero,215
    2a84:	000035f4 	movhi	zero,215
    2a88:	000035f4 	movhi	zero,215
    2a8c:	00002d50 	cmplti	zero,zero,181
    2a90:	00002e0c 	andi	zero,zero,184
    2a94:	000035f4 	movhi	zero,215
    2a98:	00002e0c 	andi	zero,zero,184
    2a9c:	000035f4 	movhi	zero,215
    2aa0:	000035f4 	movhi	zero,215
    2aa4:	000035f4 	movhi	zero,215
    2aa8:	000035f4 	movhi	zero,215
    2aac:	00002eac 	andhi	zero,zero,186
    2ab0:	000035f4 	movhi	zero,215
    2ab4:	000035f4 	movhi	zero,215
    2ab8:	00002eb8 	rdprs	zero,zero,186
    2abc:	000035f4 	movhi	zero,215
    2ac0:	000035f4 	movhi	zero,215
    2ac4:	000035f4 	movhi	zero,215
    2ac8:	000035f4 	movhi	zero,215
    2acc:	000035f4 	movhi	zero,215
    2ad0:	00003330 	cmpltui	zero,zero,204
    2ad4:	000035f4 	movhi	zero,215
    2ad8:	000035f4 	movhi	zero,215
    2adc:	00003390 	cmplti	zero,zero,206
    2ae0:	000035f4 	movhi	zero,215
    2ae4:	000035f4 	movhi	zero,215
    2ae8:	000035f4 	movhi	zero,215
    2aec:	000035f4 	movhi	zero,215
    2af0:	000035f4 	movhi	zero,215
    2af4:	000035f4 	movhi	zero,215
    2af8:	000035f4 	movhi	zero,215
    2afc:	000035f4 	movhi	zero,215
    2b00:	000035f4 	movhi	zero,215
    2b04:	000035f4 	movhi	zero,215
    2b08:	000035a0 	cmpeqi	zero,zero,214
    2b0c:	00003540 	call	354 <init_camera+0xd4>
    2b10:	00002e0c 	andi	zero,zero,184
    2b14:	00002e0c 	andi	zero,zero,184
    2b18:	00002e0c 	andi	zero,zero,184
    2b1c:	00003550 	cmplti	zero,zero,213
    2b20:	00003540 	call	354 <init_camera+0xd4>
    2b24:	000035f4 	movhi	zero,215
    2b28:	000035f4 	movhi	zero,215
    2b2c:	0000355c 	xori	zero,zero,213
    2b30:	000035f4 	movhi	zero,215
    2b34:	0000356c 	andhi	zero,zero,213
    2b38:	00003440 	call	344 <init_camera+0xc4>
    2b3c:	00002b7c 	xorhi	zero,zero,173
    2b40:	00003460 	cmpeqi	zero,zero,209
    2b44:	000035f4 	movhi	zero,215
    2b48:	0000346c 	andhi	zero,zero,209
    2b4c:	000035f4 	movhi	zero,215
    2b50:	000034c8 	cmpgei	zero,zero,211
    2b54:	000035f4 	movhi	zero,215
    2b58:	000035f4 	movhi	zero,215
    2b5c:	000034d8 	cmpnei	zero,zero,211
    2b60:	d9003117 	ldw	r4,196(sp)
    2b64:	d8802d15 	stw	r2,180(sp)
    2b68:	0109c83a 	sub	r4,zero,r4
    2b6c:	d9003115 	stw	r4,196(sp)
    2b70:	94800114 	ori	r18,r18,4
    2b74:	ac400007 	ldb	r17,0(r21)
    2b78:	003f9706 	br	29d8 <__alt_data_end+0xff0029d8>
    2b7c:	00800c04 	movi	r2,48
    2b80:	d9002d17 	ldw	r4,180(sp)
    2b84:	d9402917 	ldw	r5,164(sp)
    2b88:	d8802705 	stb	r2,156(sp)
    2b8c:	00801e04 	movi	r2,120
    2b90:	d8802745 	stb	r2,157(sp)
    2b94:	d8002785 	stb	zero,158(sp)
    2b98:	20c00104 	addi	r3,r4,4
    2b9c:	24c00017 	ldw	r19,0(r4)
    2ba0:	002d883a 	mov	r22,zero
    2ba4:	90800094 	ori	r2,r18,2
    2ba8:	28029a16 	blt	r5,zero,3614 <___vfprintf_internal_r+0xdc0>
    2bac:	00bfdfc4 	movi	r2,-129
    2bb0:	90a4703a 	and	r18,r18,r2
    2bb4:	d8c02d15 	stw	r3,180(sp)
    2bb8:	94800094 	ori	r18,r18,2
    2bbc:	9802871e 	bne	r19,zero,35dc <___vfprintf_internal_r+0xd88>
    2bc0:	00800074 	movhi	r2,1
    2bc4:	10853404 	addi	r2,r2,5328
    2bc8:	d8803915 	stw	r2,228(sp)
    2bcc:	04401e04 	movi	r17,120
    2bd0:	d8802917 	ldw	r2,164(sp)
    2bd4:	0039883a 	mov	fp,zero
    2bd8:	1001e926 	beq	r2,zero,3380 <___vfprintf_internal_r+0xb2c>
    2bdc:	0027883a 	mov	r19,zero
    2be0:	002d883a 	mov	r22,zero
    2be4:	00020506 	br	33fc <___vfprintf_internal_r+0xba8>
    2be8:	d9002c17 	ldw	r4,176(sp)
    2bec:	b80b883a 	mov	r5,r23
    2bf0:	0004b240 	call	4b24 <__swsetup_r>
    2bf4:	1005ac1e 	bne	r2,zero,42a8 <___vfprintf_internal_r+0x1a54>
    2bf8:	b880030b 	ldhu	r2,12(r23)
    2bfc:	00c00284 	movi	r3,10
    2c00:	1080068c 	andi	r2,r2,26
    2c04:	10ff3c1e 	bne	r2,r3,28f8 <__alt_data_end+0xff0028f8>
    2c08:	b880038f 	ldh	r2,14(r23)
    2c0c:	103f3a16 	blt	r2,zero,28f8 <__alt_data_end+0xff0028f8>
    2c10:	d9c02d17 	ldw	r7,180(sp)
    2c14:	d9002c17 	ldw	r4,176(sp)
    2c18:	a80d883a 	mov	r6,r21
    2c1c:	b80b883a 	mov	r5,r23
    2c20:	0004a680 	call	4a68 <__sbprintf>
    2c24:	00001106 	br	2c6c <___vfprintf_internal_r+0x418>
    2c28:	d9002c17 	ldw	r4,176(sp)
    2c2c:	d9801e04 	addi	r6,sp,120
    2c30:	b80b883a 	mov	r5,r23
    2c34:	00095f00 	call	95f0 <__sprint_r>
    2c38:	1000081e 	bne	r2,zero,2c5c <___vfprintf_internal_r+0x408>
    2c3c:	da000404 	addi	r8,sp,16
    2c40:	003f5306 	br	2990 <__alt_data_end+0xff002990>
    2c44:	d8802017 	ldw	r2,128(sp)
    2c48:	10000426 	beq	r2,zero,2c5c <___vfprintf_internal_r+0x408>
    2c4c:	d9002c17 	ldw	r4,176(sp)
    2c50:	d9801e04 	addi	r6,sp,120
    2c54:	b80b883a 	mov	r5,r23
    2c58:	00095f00 	call	95f0 <__sprint_r>
    2c5c:	b880030b 	ldhu	r2,12(r23)
    2c60:	1080100c 	andi	r2,r2,64
    2c64:	1005901e 	bne	r2,zero,42a8 <___vfprintf_internal_r+0x1a54>
    2c68:	d8802f17 	ldw	r2,188(sp)
    2c6c:	dfc04717 	ldw	ra,284(sp)
    2c70:	df004617 	ldw	fp,280(sp)
    2c74:	ddc04517 	ldw	r23,276(sp)
    2c78:	dd804417 	ldw	r22,272(sp)
    2c7c:	dd404317 	ldw	r21,268(sp)
    2c80:	dd004217 	ldw	r20,264(sp)
    2c84:	dcc04117 	ldw	r19,260(sp)
    2c88:	dc804017 	ldw	r18,256(sp)
    2c8c:	dc403f17 	ldw	r17,252(sp)
    2c90:	dc003e17 	ldw	r16,248(sp)
    2c94:	dec04804 	addi	sp,sp,288
    2c98:	f800283a 	ret
    2c9c:	d9002c17 	ldw	r4,176(sp)
    2ca0:	0006af80 	call	6af8 <__sinit>
    2ca4:	003f0406 	br	28b8 <__alt_data_end+0xff0028b8>
    2ca8:	d8802d17 	ldw	r2,180(sp)
    2cac:	d9002d17 	ldw	r4,180(sp)
    2cb0:	10800017 	ldw	r2,0(r2)
    2cb4:	d8803115 	stw	r2,196(sp)
    2cb8:	20800104 	addi	r2,r4,4
    2cbc:	d9003117 	ldw	r4,196(sp)
    2cc0:	203fa716 	blt	r4,zero,2b60 <__alt_data_end+0xff002b60>
    2cc4:	d8802d15 	stw	r2,180(sp)
    2cc8:	ac400007 	ldb	r17,0(r21)
    2ccc:	003f4206 	br	29d8 <__alt_data_end+0xff0029d8>
    2cd0:	ac400007 	ldb	r17,0(r21)
    2cd4:	aac00044 	addi	r11,r21,1
    2cd8:	8a872826 	beq	r17,r10,497c <___vfprintf_internal_r+0x2128>
    2cdc:	88bff404 	addi	r2,r17,-48
    2ce0:	0009883a 	mov	r4,zero
    2ce4:	30867d36 	bltu	r6,r2,46dc <___vfprintf_internal_r+0x1e88>
    2ce8:	5c400007 	ldb	r17,0(r11)
    2cec:	210002a4 	muli	r4,r4,10
    2cf0:	5d400044 	addi	r21,r11,1
    2cf4:	a817883a 	mov	r11,r21
    2cf8:	2089883a 	add	r4,r4,r2
    2cfc:	88bff404 	addi	r2,r17,-48
    2d00:	30bff92e 	bgeu	r6,r2,2ce8 <__alt_data_end+0xff002ce8>
    2d04:	2005c916 	blt	r4,zero,442c <___vfprintf_internal_r+0x1bd8>
    2d08:	d9002915 	stw	r4,164(sp)
    2d0c:	003f3306 	br	29dc <__alt_data_end+0xff0029dc>
    2d10:	94802014 	ori	r18,r18,128
    2d14:	ac400007 	ldb	r17,0(r21)
    2d18:	003f2f06 	br	29d8 <__alt_data_end+0xff0029d8>
    2d1c:	a809883a 	mov	r4,r21
    2d20:	d8003115 	stw	zero,196(sp)
    2d24:	88bff404 	addi	r2,r17,-48
    2d28:	0017883a 	mov	r11,zero
    2d2c:	24400007 	ldb	r17,0(r4)
    2d30:	5ac002a4 	muli	r11,r11,10
    2d34:	ad400044 	addi	r21,r21,1
    2d38:	a809883a 	mov	r4,r21
    2d3c:	12d7883a 	add	r11,r2,r11
    2d40:	88bff404 	addi	r2,r17,-48
    2d44:	30bff92e 	bgeu	r6,r2,2d2c <__alt_data_end+0xff002d2c>
    2d48:	dac03115 	stw	r11,196(sp)
    2d4c:	003f2306 	br	29dc <__alt_data_end+0xff0029dc>
    2d50:	18c03fcc 	andi	r3,r3,255
    2d54:	18072b1e 	bne	r3,zero,4a04 <___vfprintf_internal_r+0x21b0>
    2d58:	94800414 	ori	r18,r18,16
    2d5c:	9080080c 	andi	r2,r18,32
    2d60:	10037b26 	beq	r2,zero,3b50 <___vfprintf_internal_r+0x12fc>
    2d64:	d9402d17 	ldw	r5,180(sp)
    2d68:	28800117 	ldw	r2,4(r5)
    2d6c:	2cc00017 	ldw	r19,0(r5)
    2d70:	29400204 	addi	r5,r5,8
    2d74:	d9402d15 	stw	r5,180(sp)
    2d78:	102d883a 	mov	r22,r2
    2d7c:	10044b16 	blt	r2,zero,3eac <___vfprintf_internal_r+0x1658>
    2d80:	d9402917 	ldw	r5,164(sp)
    2d84:	df002783 	ldbu	fp,158(sp)
    2d88:	2803bc16 	blt	r5,zero,3c7c <___vfprintf_internal_r+0x1428>
    2d8c:	00ffdfc4 	movi	r3,-129
    2d90:	9d84b03a 	or	r2,r19,r22
    2d94:	90e4703a 	and	r18,r18,r3
    2d98:	10017726 	beq	r2,zero,3378 <___vfprintf_internal_r+0xb24>
    2d9c:	b0038326 	beq	r22,zero,3bac <___vfprintf_internal_r+0x1358>
    2da0:	dc402a15 	stw	r17,168(sp)
    2da4:	dc001e04 	addi	r16,sp,120
    2da8:	b023883a 	mov	r17,r22
    2dac:	402d883a 	mov	r22,r8
    2db0:	9809883a 	mov	r4,r19
    2db4:	880b883a 	mov	r5,r17
    2db8:	01800284 	movi	r6,10
    2dbc:	000f883a 	mov	r7,zero
    2dc0:	000b9e80 	call	b9e8 <__umoddi3>
    2dc4:	10800c04 	addi	r2,r2,48
    2dc8:	843fffc4 	addi	r16,r16,-1
    2dcc:	9809883a 	mov	r4,r19
    2dd0:	880b883a 	mov	r5,r17
    2dd4:	80800005 	stb	r2,0(r16)
    2dd8:	01800284 	movi	r6,10
    2ddc:	000f883a 	mov	r7,zero
    2de0:	000b4700 	call	b470 <__udivdi3>
    2de4:	1027883a 	mov	r19,r2
    2de8:	10c4b03a 	or	r2,r2,r3
    2dec:	1823883a 	mov	r17,r3
    2df0:	103fef1e 	bne	r2,zero,2db0 <__alt_data_end+0xff002db0>
    2df4:	d8c02817 	ldw	r3,160(sp)
    2df8:	dc402a17 	ldw	r17,168(sp)
    2dfc:	b011883a 	mov	r8,r22
    2e00:	1c07c83a 	sub	r3,r3,r16
    2e04:	d8c02e15 	stw	r3,184(sp)
    2e08:	00005906 	br	2f70 <___vfprintf_internal_r+0x71c>
    2e0c:	18c03fcc 	andi	r3,r3,255
    2e10:	1806fa1e 	bne	r3,zero,49fc <___vfprintf_internal_r+0x21a8>
    2e14:	9080020c 	andi	r2,r18,8
    2e18:	10048a26 	beq	r2,zero,4044 <___vfprintf_internal_r+0x17f0>
    2e1c:	d8c02d17 	ldw	r3,180(sp)
    2e20:	d9002d17 	ldw	r4,180(sp)
    2e24:	d9402d17 	ldw	r5,180(sp)
    2e28:	18c00017 	ldw	r3,0(r3)
    2e2c:	21000117 	ldw	r4,4(r4)
    2e30:	29400204 	addi	r5,r5,8
    2e34:	d8c03615 	stw	r3,216(sp)
    2e38:	d9003815 	stw	r4,224(sp)
    2e3c:	d9402d15 	stw	r5,180(sp)
    2e40:	d9003617 	ldw	r4,216(sp)
    2e44:	d9403817 	ldw	r5,224(sp)
    2e48:	da003d15 	stw	r8,244(sp)
    2e4c:	04000044 	movi	r16,1
    2e50:	00092680 	call	9268 <__fpclassifyd>
    2e54:	da003d17 	ldw	r8,244(sp)
    2e58:	14041f1e 	bne	r2,r16,3ed8 <___vfprintf_internal_r+0x1684>
    2e5c:	d9003617 	ldw	r4,216(sp)
    2e60:	d9403817 	ldw	r5,224(sp)
    2e64:	000d883a 	mov	r6,zero
    2e68:	000f883a 	mov	r7,zero
    2e6c:	000d2180 	call	d218 <__ledf2>
    2e70:	da003d17 	ldw	r8,244(sp)
    2e74:	1005be16 	blt	r2,zero,4570 <___vfprintf_internal_r+0x1d1c>
    2e78:	df002783 	ldbu	fp,158(sp)
    2e7c:	008011c4 	movi	r2,71
    2e80:	1445330e 	bge	r2,r17,4350 <___vfprintf_internal_r+0x1afc>
    2e84:	04000074 	movhi	r16,1
    2e88:	84052c04 	addi	r16,r16,5296
    2e8c:	00c000c4 	movi	r3,3
    2e90:	00bfdfc4 	movi	r2,-129
    2e94:	d8c02a15 	stw	r3,168(sp)
    2e98:	90a4703a 	and	r18,r18,r2
    2e9c:	d8c02e15 	stw	r3,184(sp)
    2ea0:	d8002915 	stw	zero,164(sp)
    2ea4:	d8003215 	stw	zero,200(sp)
    2ea8:	00003706 	br	2f88 <___vfprintf_internal_r+0x734>
    2eac:	94800214 	ori	r18,r18,8
    2eb0:	ac400007 	ldb	r17,0(r21)
    2eb4:	003ec806 	br	29d8 <__alt_data_end+0xff0029d8>
    2eb8:	18c03fcc 	andi	r3,r3,255
    2ebc:	1806db1e 	bne	r3,zero,4a2c <___vfprintf_internal_r+0x21d8>
    2ec0:	94800414 	ori	r18,r18,16
    2ec4:	9080080c 	andi	r2,r18,32
    2ec8:	1002d826 	beq	r2,zero,3a2c <___vfprintf_internal_r+0x11d8>
    2ecc:	d9402d17 	ldw	r5,180(sp)
    2ed0:	d8c02917 	ldw	r3,164(sp)
    2ed4:	d8002785 	stb	zero,158(sp)
    2ed8:	28800204 	addi	r2,r5,8
    2edc:	2cc00017 	ldw	r19,0(r5)
    2ee0:	2d800117 	ldw	r22,4(r5)
    2ee4:	18048f16 	blt	r3,zero,4124 <___vfprintf_internal_r+0x18d0>
    2ee8:	013fdfc4 	movi	r4,-129
    2eec:	9d86b03a 	or	r3,r19,r22
    2ef0:	d8802d15 	stw	r2,180(sp)
    2ef4:	9124703a 	and	r18,r18,r4
    2ef8:	1802d91e 	bne	r3,zero,3a60 <___vfprintf_internal_r+0x120c>
    2efc:	d8c02917 	ldw	r3,164(sp)
    2f00:	0039883a 	mov	fp,zero
    2f04:	1805c326 	beq	r3,zero,4614 <___vfprintf_internal_r+0x1dc0>
    2f08:	0027883a 	mov	r19,zero
    2f0c:	002d883a 	mov	r22,zero
    2f10:	dc001e04 	addi	r16,sp,120
    2f14:	9806d0fa 	srli	r3,r19,3
    2f18:	b008977a 	slli	r4,r22,29
    2f1c:	b02cd0fa 	srli	r22,r22,3
    2f20:	9cc001cc 	andi	r19,r19,7
    2f24:	98800c04 	addi	r2,r19,48
    2f28:	843fffc4 	addi	r16,r16,-1
    2f2c:	20e6b03a 	or	r19,r4,r3
    2f30:	80800005 	stb	r2,0(r16)
    2f34:	9d86b03a 	or	r3,r19,r22
    2f38:	183ff61e 	bne	r3,zero,2f14 <__alt_data_end+0xff002f14>
    2f3c:	90c0004c 	andi	r3,r18,1
    2f40:	18013b26 	beq	r3,zero,3430 <___vfprintf_internal_r+0xbdc>
    2f44:	10803fcc 	andi	r2,r2,255
    2f48:	1080201c 	xori	r2,r2,128
    2f4c:	10bfe004 	addi	r2,r2,-128
    2f50:	00c00c04 	movi	r3,48
    2f54:	10c13626 	beq	r2,r3,3430 <___vfprintf_internal_r+0xbdc>
    2f58:	80ffffc5 	stb	r3,-1(r16)
    2f5c:	d8c02817 	ldw	r3,160(sp)
    2f60:	80bfffc4 	addi	r2,r16,-1
    2f64:	1021883a 	mov	r16,r2
    2f68:	1887c83a 	sub	r3,r3,r2
    2f6c:	d8c02e15 	stw	r3,184(sp)
    2f70:	d8802e17 	ldw	r2,184(sp)
    2f74:	d9002917 	ldw	r4,164(sp)
    2f78:	1100010e 	bge	r2,r4,2f80 <___vfprintf_internal_r+0x72c>
    2f7c:	2005883a 	mov	r2,r4
    2f80:	d8802a15 	stw	r2,168(sp)
    2f84:	d8003215 	stw	zero,200(sp)
    2f88:	e7003fcc 	andi	fp,fp,255
    2f8c:	e700201c 	xori	fp,fp,128
    2f90:	e73fe004 	addi	fp,fp,-128
    2f94:	e0000326 	beq	fp,zero,2fa4 <___vfprintf_internal_r+0x750>
    2f98:	d8c02a17 	ldw	r3,168(sp)
    2f9c:	18c00044 	addi	r3,r3,1
    2fa0:	d8c02a15 	stw	r3,168(sp)
    2fa4:	90c0008c 	andi	r3,r18,2
    2fa8:	d8c02b15 	stw	r3,172(sp)
    2fac:	18000326 	beq	r3,zero,2fbc <___vfprintf_internal_r+0x768>
    2fb0:	d8c02a17 	ldw	r3,168(sp)
    2fb4:	18c00084 	addi	r3,r3,2
    2fb8:	d8c02a15 	stw	r3,168(sp)
    2fbc:	90c0210c 	andi	r3,r18,132
    2fc0:	d8c03015 	stw	r3,192(sp)
    2fc4:	1801a31e 	bne	r3,zero,3654 <___vfprintf_internal_r+0xe00>
    2fc8:	d9003117 	ldw	r4,196(sp)
    2fcc:	d8c02a17 	ldw	r3,168(sp)
    2fd0:	20e7c83a 	sub	r19,r4,r3
    2fd4:	04c19f0e 	bge	zero,r19,3654 <___vfprintf_internal_r+0xe00>
    2fd8:	02400404 	movi	r9,16
    2fdc:	d8c02017 	ldw	r3,128(sp)
    2fe0:	d8801f17 	ldw	r2,124(sp)
    2fe4:	4cc50d0e 	bge	r9,r19,441c <___vfprintf_internal_r+0x1bc8>
    2fe8:	01400074 	movhi	r5,1
    2fec:	29453f84 	addi	r5,r5,5374
    2ff0:	dc403b15 	stw	r17,236(sp)
    2ff4:	d9403515 	stw	r5,212(sp)
    2ff8:	9823883a 	mov	r17,r19
    2ffc:	482d883a 	mov	r22,r9
    3000:	9027883a 	mov	r19,r18
    3004:	070001c4 	movi	fp,7
    3008:	8025883a 	mov	r18,r16
    300c:	dc002c17 	ldw	r16,176(sp)
    3010:	00000306 	br	3020 <___vfprintf_internal_r+0x7cc>
    3014:	8c7ffc04 	addi	r17,r17,-16
    3018:	42000204 	addi	r8,r8,8
    301c:	b440130e 	bge	r22,r17,306c <___vfprintf_internal_r+0x818>
    3020:	01000074 	movhi	r4,1
    3024:	18c00404 	addi	r3,r3,16
    3028:	10800044 	addi	r2,r2,1
    302c:	21053f84 	addi	r4,r4,5374
    3030:	41000015 	stw	r4,0(r8)
    3034:	45800115 	stw	r22,4(r8)
    3038:	d8c02015 	stw	r3,128(sp)
    303c:	d8801f15 	stw	r2,124(sp)
    3040:	e0bff40e 	bge	fp,r2,3014 <__alt_data_end+0xff003014>
    3044:	d9801e04 	addi	r6,sp,120
    3048:	b80b883a 	mov	r5,r23
    304c:	8009883a 	mov	r4,r16
    3050:	00095f00 	call	95f0 <__sprint_r>
    3054:	103f011e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    3058:	8c7ffc04 	addi	r17,r17,-16
    305c:	d8c02017 	ldw	r3,128(sp)
    3060:	d8801f17 	ldw	r2,124(sp)
    3064:	da000404 	addi	r8,sp,16
    3068:	b47fed16 	blt	r22,r17,3020 <__alt_data_end+0xff003020>
    306c:	9021883a 	mov	r16,r18
    3070:	9825883a 	mov	r18,r19
    3074:	8827883a 	mov	r19,r17
    3078:	dc403b17 	ldw	r17,236(sp)
    307c:	d9403517 	ldw	r5,212(sp)
    3080:	98c7883a 	add	r3,r19,r3
    3084:	10800044 	addi	r2,r2,1
    3088:	41400015 	stw	r5,0(r8)
    308c:	44c00115 	stw	r19,4(r8)
    3090:	d8c02015 	stw	r3,128(sp)
    3094:	d8801f15 	stw	r2,124(sp)
    3098:	010001c4 	movi	r4,7
    309c:	2082a316 	blt	r4,r2,3b2c <___vfprintf_internal_r+0x12d8>
    30a0:	df002787 	ldb	fp,158(sp)
    30a4:	42000204 	addi	r8,r8,8
    30a8:	e0000c26 	beq	fp,zero,30dc <___vfprintf_internal_r+0x888>
    30ac:	d8801f17 	ldw	r2,124(sp)
    30b0:	d9002784 	addi	r4,sp,158
    30b4:	18c00044 	addi	r3,r3,1
    30b8:	10800044 	addi	r2,r2,1
    30bc:	41000015 	stw	r4,0(r8)
    30c0:	01000044 	movi	r4,1
    30c4:	41000115 	stw	r4,4(r8)
    30c8:	d8c02015 	stw	r3,128(sp)
    30cc:	d8801f15 	stw	r2,124(sp)
    30d0:	010001c4 	movi	r4,7
    30d4:	20823c16 	blt	r4,r2,39c8 <___vfprintf_internal_r+0x1174>
    30d8:	42000204 	addi	r8,r8,8
    30dc:	d8802b17 	ldw	r2,172(sp)
    30e0:	10000c26 	beq	r2,zero,3114 <___vfprintf_internal_r+0x8c0>
    30e4:	d8801f17 	ldw	r2,124(sp)
    30e8:	d9002704 	addi	r4,sp,156
    30ec:	18c00084 	addi	r3,r3,2
    30f0:	10800044 	addi	r2,r2,1
    30f4:	41000015 	stw	r4,0(r8)
    30f8:	01000084 	movi	r4,2
    30fc:	41000115 	stw	r4,4(r8)
    3100:	d8c02015 	stw	r3,128(sp)
    3104:	d8801f15 	stw	r2,124(sp)
    3108:	010001c4 	movi	r4,7
    310c:	20823616 	blt	r4,r2,39e8 <___vfprintf_internal_r+0x1194>
    3110:	42000204 	addi	r8,r8,8
    3114:	d9003017 	ldw	r4,192(sp)
    3118:	00802004 	movi	r2,128
    311c:	20819926 	beq	r4,r2,3784 <___vfprintf_internal_r+0xf30>
    3120:	d9402917 	ldw	r5,164(sp)
    3124:	d8802e17 	ldw	r2,184(sp)
    3128:	28adc83a 	sub	r22,r5,r2
    312c:	0580310e 	bge	zero,r22,31f4 <___vfprintf_internal_r+0x9a0>
    3130:	07000404 	movi	fp,16
    3134:	d8801f17 	ldw	r2,124(sp)
    3138:	e584140e 	bge	fp,r22,418c <___vfprintf_internal_r+0x1938>
    313c:	01400074 	movhi	r5,1
    3140:	29453b84 	addi	r5,r5,5358
    3144:	dc402915 	stw	r17,164(sp)
    3148:	d9402b15 	stw	r5,172(sp)
    314c:	b023883a 	mov	r17,r22
    3150:	04c001c4 	movi	r19,7
    3154:	a82d883a 	mov	r22,r21
    3158:	902b883a 	mov	r21,r18
    315c:	8025883a 	mov	r18,r16
    3160:	dc002c17 	ldw	r16,176(sp)
    3164:	00000306 	br	3174 <___vfprintf_internal_r+0x920>
    3168:	8c7ffc04 	addi	r17,r17,-16
    316c:	42000204 	addi	r8,r8,8
    3170:	e440110e 	bge	fp,r17,31b8 <___vfprintf_internal_r+0x964>
    3174:	18c00404 	addi	r3,r3,16
    3178:	10800044 	addi	r2,r2,1
    317c:	45000015 	stw	r20,0(r8)
    3180:	47000115 	stw	fp,4(r8)
    3184:	d8c02015 	stw	r3,128(sp)
    3188:	d8801f15 	stw	r2,124(sp)
    318c:	98bff60e 	bge	r19,r2,3168 <__alt_data_end+0xff003168>
    3190:	d9801e04 	addi	r6,sp,120
    3194:	b80b883a 	mov	r5,r23
    3198:	8009883a 	mov	r4,r16
    319c:	00095f00 	call	95f0 <__sprint_r>
    31a0:	103eae1e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    31a4:	8c7ffc04 	addi	r17,r17,-16
    31a8:	d8c02017 	ldw	r3,128(sp)
    31ac:	d8801f17 	ldw	r2,124(sp)
    31b0:	da000404 	addi	r8,sp,16
    31b4:	e47fef16 	blt	fp,r17,3174 <__alt_data_end+0xff003174>
    31b8:	9021883a 	mov	r16,r18
    31bc:	a825883a 	mov	r18,r21
    31c0:	b02b883a 	mov	r21,r22
    31c4:	882d883a 	mov	r22,r17
    31c8:	dc402917 	ldw	r17,164(sp)
    31cc:	d9002b17 	ldw	r4,172(sp)
    31d0:	1d87883a 	add	r3,r3,r22
    31d4:	10800044 	addi	r2,r2,1
    31d8:	41000015 	stw	r4,0(r8)
    31dc:	45800115 	stw	r22,4(r8)
    31e0:	d8c02015 	stw	r3,128(sp)
    31e4:	d8801f15 	stw	r2,124(sp)
    31e8:	010001c4 	movi	r4,7
    31ec:	2081ee16 	blt	r4,r2,39a8 <___vfprintf_internal_r+0x1154>
    31f0:	42000204 	addi	r8,r8,8
    31f4:	9080400c 	andi	r2,r18,256
    31f8:	1001181e 	bne	r2,zero,365c <___vfprintf_internal_r+0xe08>
    31fc:	d9402e17 	ldw	r5,184(sp)
    3200:	d8801f17 	ldw	r2,124(sp)
    3204:	44000015 	stw	r16,0(r8)
    3208:	1947883a 	add	r3,r3,r5
    320c:	10800044 	addi	r2,r2,1
    3210:	41400115 	stw	r5,4(r8)
    3214:	d8c02015 	stw	r3,128(sp)
    3218:	d8801f15 	stw	r2,124(sp)
    321c:	010001c4 	movi	r4,7
    3220:	2081d316 	blt	r4,r2,3970 <___vfprintf_internal_r+0x111c>
    3224:	42000204 	addi	r8,r8,8
    3228:	9480010c 	andi	r18,r18,4
    322c:	90003226 	beq	r18,zero,32f8 <___vfprintf_internal_r+0xaa4>
    3230:	d9403117 	ldw	r5,196(sp)
    3234:	d8802a17 	ldw	r2,168(sp)
    3238:	28a1c83a 	sub	r16,r5,r2
    323c:	04002e0e 	bge	zero,r16,32f8 <___vfprintf_internal_r+0xaa4>
    3240:	04400404 	movi	r17,16
    3244:	d8801f17 	ldw	r2,124(sp)
    3248:	8c04a20e 	bge	r17,r16,44d4 <___vfprintf_internal_r+0x1c80>
    324c:	01400074 	movhi	r5,1
    3250:	29453f84 	addi	r5,r5,5374
    3254:	d9403515 	stw	r5,212(sp)
    3258:	048001c4 	movi	r18,7
    325c:	dcc02c17 	ldw	r19,176(sp)
    3260:	00000306 	br	3270 <___vfprintf_internal_r+0xa1c>
    3264:	843ffc04 	addi	r16,r16,-16
    3268:	42000204 	addi	r8,r8,8
    326c:	8c00130e 	bge	r17,r16,32bc <___vfprintf_internal_r+0xa68>
    3270:	01000074 	movhi	r4,1
    3274:	18c00404 	addi	r3,r3,16
    3278:	10800044 	addi	r2,r2,1
    327c:	21053f84 	addi	r4,r4,5374
    3280:	41000015 	stw	r4,0(r8)
    3284:	44400115 	stw	r17,4(r8)
    3288:	d8c02015 	stw	r3,128(sp)
    328c:	d8801f15 	stw	r2,124(sp)
    3290:	90bff40e 	bge	r18,r2,3264 <__alt_data_end+0xff003264>
    3294:	d9801e04 	addi	r6,sp,120
    3298:	b80b883a 	mov	r5,r23
    329c:	9809883a 	mov	r4,r19
    32a0:	00095f00 	call	95f0 <__sprint_r>
    32a4:	103e6d1e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    32a8:	843ffc04 	addi	r16,r16,-16
    32ac:	d8c02017 	ldw	r3,128(sp)
    32b0:	d8801f17 	ldw	r2,124(sp)
    32b4:	da000404 	addi	r8,sp,16
    32b8:	8c3fed16 	blt	r17,r16,3270 <__alt_data_end+0xff003270>
    32bc:	d9403517 	ldw	r5,212(sp)
    32c0:	1c07883a 	add	r3,r3,r16
    32c4:	10800044 	addi	r2,r2,1
    32c8:	41400015 	stw	r5,0(r8)
    32cc:	44000115 	stw	r16,4(r8)
    32d0:	d8c02015 	stw	r3,128(sp)
    32d4:	d8801f15 	stw	r2,124(sp)
    32d8:	010001c4 	movi	r4,7
    32dc:	2080060e 	bge	r4,r2,32f8 <___vfprintf_internal_r+0xaa4>
    32e0:	d9002c17 	ldw	r4,176(sp)
    32e4:	d9801e04 	addi	r6,sp,120
    32e8:	b80b883a 	mov	r5,r23
    32ec:	00095f00 	call	95f0 <__sprint_r>
    32f0:	103e5a1e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    32f4:	d8c02017 	ldw	r3,128(sp)
    32f8:	d8803117 	ldw	r2,196(sp)
    32fc:	d9002a17 	ldw	r4,168(sp)
    3300:	1100010e 	bge	r2,r4,3308 <___vfprintf_internal_r+0xab4>
    3304:	2005883a 	mov	r2,r4
    3308:	d9402f17 	ldw	r5,188(sp)
    330c:	288b883a 	add	r5,r5,r2
    3310:	d9402f15 	stw	r5,188(sp)
    3314:	18019e1e 	bne	r3,zero,3990 <___vfprintf_internal_r+0x113c>
    3318:	a8800007 	ldb	r2,0(r21)
    331c:	d8001f15 	stw	zero,124(sp)
    3320:	da000404 	addi	r8,sp,16
    3324:	103d851e 	bne	r2,zero,293c <__alt_data_end+0xff00293c>
    3328:	a821883a 	mov	r16,r21
    332c:	003d9b06 	br	299c <__alt_data_end+0xff00299c>
    3330:	18c03fcc 	andi	r3,r3,255
    3334:	1805c11e 	bne	r3,zero,4a3c <___vfprintf_internal_r+0x21e8>
    3338:	94800414 	ori	r18,r18,16
    333c:	9080080c 	andi	r2,r18,32
    3340:	10020c26 	beq	r2,zero,3b74 <___vfprintf_internal_r+0x1320>
    3344:	d8802d17 	ldw	r2,180(sp)
    3348:	d9002917 	ldw	r4,164(sp)
    334c:	d8002785 	stb	zero,158(sp)
    3350:	10c00204 	addi	r3,r2,8
    3354:	14c00017 	ldw	r19,0(r2)
    3358:	15800117 	ldw	r22,4(r2)
    335c:	20040f16 	blt	r4,zero,439c <___vfprintf_internal_r+0x1b48>
    3360:	013fdfc4 	movi	r4,-129
    3364:	9d84b03a 	or	r2,r19,r22
    3368:	d8c02d15 	stw	r3,180(sp)
    336c:	9124703a 	and	r18,r18,r4
    3370:	0039883a 	mov	fp,zero
    3374:	103e891e 	bne	r2,zero,2d9c <__alt_data_end+0xff002d9c>
    3378:	d9002917 	ldw	r4,164(sp)
    337c:	2002c11e 	bne	r4,zero,3e84 <___vfprintf_internal_r+0x1630>
    3380:	d8002915 	stw	zero,164(sp)
    3384:	d8002e15 	stw	zero,184(sp)
    3388:	dc001e04 	addi	r16,sp,120
    338c:	003ef806 	br	2f70 <__alt_data_end+0xff002f70>
    3390:	18c03fcc 	andi	r3,r3,255
    3394:	18059d1e 	bne	r3,zero,4a0c <___vfprintf_internal_r+0x21b8>
    3398:	01400074 	movhi	r5,1
    339c:	29452f04 	addi	r5,r5,5308
    33a0:	d9403915 	stw	r5,228(sp)
    33a4:	9080080c 	andi	r2,r18,32
    33a8:	10005226 	beq	r2,zero,34f4 <___vfprintf_internal_r+0xca0>
    33ac:	d8802d17 	ldw	r2,180(sp)
    33b0:	14c00017 	ldw	r19,0(r2)
    33b4:	15800117 	ldw	r22,4(r2)
    33b8:	10800204 	addi	r2,r2,8
    33bc:	d8802d15 	stw	r2,180(sp)
    33c0:	9080004c 	andi	r2,r18,1
    33c4:	10019026 	beq	r2,zero,3a08 <___vfprintf_internal_r+0x11b4>
    33c8:	9d84b03a 	or	r2,r19,r22
    33cc:	10036926 	beq	r2,zero,4174 <___vfprintf_internal_r+0x1920>
    33d0:	d8c02917 	ldw	r3,164(sp)
    33d4:	00800c04 	movi	r2,48
    33d8:	d8802705 	stb	r2,156(sp)
    33dc:	dc402745 	stb	r17,157(sp)
    33e0:	d8002785 	stb	zero,158(sp)
    33e4:	90800094 	ori	r2,r18,2
    33e8:	18045d16 	blt	r3,zero,4560 <___vfprintf_internal_r+0x1d0c>
    33ec:	00bfdfc4 	movi	r2,-129
    33f0:	90a4703a 	and	r18,r18,r2
    33f4:	94800094 	ori	r18,r18,2
    33f8:	0039883a 	mov	fp,zero
    33fc:	d9003917 	ldw	r4,228(sp)
    3400:	dc001e04 	addi	r16,sp,120
    3404:	988003cc 	andi	r2,r19,15
    3408:	b006973a 	slli	r3,r22,28
    340c:	2085883a 	add	r2,r4,r2
    3410:	9826d13a 	srli	r19,r19,4
    3414:	10800003 	ldbu	r2,0(r2)
    3418:	b02cd13a 	srli	r22,r22,4
    341c:	843fffc4 	addi	r16,r16,-1
    3420:	1ce6b03a 	or	r19,r3,r19
    3424:	80800005 	stb	r2,0(r16)
    3428:	9d84b03a 	or	r2,r19,r22
    342c:	103ff51e 	bne	r2,zero,3404 <__alt_data_end+0xff003404>
    3430:	d8c02817 	ldw	r3,160(sp)
    3434:	1c07c83a 	sub	r3,r3,r16
    3438:	d8c02e15 	stw	r3,184(sp)
    343c:	003ecc06 	br	2f70 <__alt_data_end+0xff002f70>
    3440:	18c03fcc 	andi	r3,r3,255
    3444:	183e9f26 	beq	r3,zero,2ec4 <__alt_data_end+0xff002ec4>
    3448:	d9c02785 	stb	r7,158(sp)
    344c:	003e9d06 	br	2ec4 <__alt_data_end+0xff002ec4>
    3450:	00c00044 	movi	r3,1
    3454:	01c00ac4 	movi	r7,43
    3458:	ac400007 	ldb	r17,0(r21)
    345c:	003d5e06 	br	29d8 <__alt_data_end+0xff0029d8>
    3460:	94800814 	ori	r18,r18,32
    3464:	ac400007 	ldb	r17,0(r21)
    3468:	003d5b06 	br	29d8 <__alt_data_end+0xff0029d8>
    346c:	d8c02d17 	ldw	r3,180(sp)
    3470:	d8002785 	stb	zero,158(sp)
    3474:	1c000017 	ldw	r16,0(r3)
    3478:	1cc00104 	addi	r19,r3,4
    347c:	80041926 	beq	r16,zero,44e4 <___vfprintf_internal_r+0x1c90>
    3480:	d9002917 	ldw	r4,164(sp)
    3484:	2003d016 	blt	r4,zero,43c8 <___vfprintf_internal_r+0x1b74>
    3488:	200d883a 	mov	r6,r4
    348c:	000b883a 	mov	r5,zero
    3490:	8009883a 	mov	r4,r16
    3494:	da003d15 	stw	r8,244(sp)
    3498:	00078580 	call	7858 <memchr>
    349c:	da003d17 	ldw	r8,244(sp)
    34a0:	10045426 	beq	r2,zero,45f4 <___vfprintf_internal_r+0x1da0>
    34a4:	1405c83a 	sub	r2,r2,r16
    34a8:	d8802e15 	stw	r2,184(sp)
    34ac:	1003cc16 	blt	r2,zero,43e0 <___vfprintf_internal_r+0x1b8c>
    34b0:	df002783 	ldbu	fp,158(sp)
    34b4:	d8802a15 	stw	r2,168(sp)
    34b8:	dcc02d15 	stw	r19,180(sp)
    34bc:	d8002915 	stw	zero,164(sp)
    34c0:	d8003215 	stw	zero,200(sp)
    34c4:	003eb006 	br	2f88 <__alt_data_end+0xff002f88>
    34c8:	18c03fcc 	andi	r3,r3,255
    34cc:	183f9b26 	beq	r3,zero,333c <__alt_data_end+0xff00333c>
    34d0:	d9c02785 	stb	r7,158(sp)
    34d4:	003f9906 	br	333c <__alt_data_end+0xff00333c>
    34d8:	18c03fcc 	andi	r3,r3,255
    34dc:	1805551e 	bne	r3,zero,4a34 <___vfprintf_internal_r+0x21e0>
    34e0:	01400074 	movhi	r5,1
    34e4:	29453404 	addi	r5,r5,5328
    34e8:	d9403915 	stw	r5,228(sp)
    34ec:	9080080c 	andi	r2,r18,32
    34f0:	103fae1e 	bne	r2,zero,33ac <__alt_data_end+0xff0033ac>
    34f4:	9080040c 	andi	r2,r18,16
    34f8:	1002de26 	beq	r2,zero,4074 <___vfprintf_internal_r+0x1820>
    34fc:	d8c02d17 	ldw	r3,180(sp)
    3500:	002d883a 	mov	r22,zero
    3504:	1cc00017 	ldw	r19,0(r3)
    3508:	18c00104 	addi	r3,r3,4
    350c:	d8c02d15 	stw	r3,180(sp)
    3510:	003fab06 	br	33c0 <__alt_data_end+0xff0033c0>
    3514:	38803fcc 	andi	r2,r7,255
    3518:	1080201c 	xori	r2,r2,128
    351c:	10bfe004 	addi	r2,r2,-128
    3520:	1002d21e 	bne	r2,zero,406c <___vfprintf_internal_r+0x1818>
    3524:	00c00044 	movi	r3,1
    3528:	01c00804 	movi	r7,32
    352c:	ac400007 	ldb	r17,0(r21)
    3530:	003d2906 	br	29d8 <__alt_data_end+0xff0029d8>
    3534:	94800054 	ori	r18,r18,1
    3538:	ac400007 	ldb	r17,0(r21)
    353c:	003d2606 	br	29d8 <__alt_data_end+0xff0029d8>
    3540:	18c03fcc 	andi	r3,r3,255
    3544:	183e0526 	beq	r3,zero,2d5c <__alt_data_end+0xff002d5c>
    3548:	d9c02785 	stb	r7,158(sp)
    354c:	003e0306 	br	2d5c <__alt_data_end+0xff002d5c>
    3550:	94801014 	ori	r18,r18,64
    3554:	ac400007 	ldb	r17,0(r21)
    3558:	003d1f06 	br	29d8 <__alt_data_end+0xff0029d8>
    355c:	ac400007 	ldb	r17,0(r21)
    3560:	8a438726 	beq	r17,r9,4380 <___vfprintf_internal_r+0x1b2c>
    3564:	94800414 	ori	r18,r18,16
    3568:	003d1b06 	br	29d8 <__alt_data_end+0xff0029d8>
    356c:	18c03fcc 	andi	r3,r3,255
    3570:	1805341e 	bne	r3,zero,4a44 <___vfprintf_internal_r+0x21f0>
    3574:	9080080c 	andi	r2,r18,32
    3578:	1002cd26 	beq	r2,zero,40b0 <___vfprintf_internal_r+0x185c>
    357c:	d9402d17 	ldw	r5,180(sp)
    3580:	d9002f17 	ldw	r4,188(sp)
    3584:	28800017 	ldw	r2,0(r5)
    3588:	2007d7fa 	srai	r3,r4,31
    358c:	29400104 	addi	r5,r5,4
    3590:	d9402d15 	stw	r5,180(sp)
    3594:	11000015 	stw	r4,0(r2)
    3598:	10c00115 	stw	r3,4(r2)
    359c:	003ce506 	br	2934 <__alt_data_end+0xff002934>
    35a0:	d8c02d17 	ldw	r3,180(sp)
    35a4:	d9002d17 	ldw	r4,180(sp)
    35a8:	d8002785 	stb	zero,158(sp)
    35ac:	18800017 	ldw	r2,0(r3)
    35b0:	21000104 	addi	r4,r4,4
    35b4:	00c00044 	movi	r3,1
    35b8:	d8c02a15 	stw	r3,168(sp)
    35bc:	d8801405 	stb	r2,80(sp)
    35c0:	d9002d15 	stw	r4,180(sp)
    35c4:	d8c02e15 	stw	r3,184(sp)
    35c8:	d8002915 	stw	zero,164(sp)
    35cc:	d8003215 	stw	zero,200(sp)
    35d0:	dc001404 	addi	r16,sp,80
    35d4:	0039883a 	mov	fp,zero
    35d8:	003e7206 	br	2fa4 <__alt_data_end+0xff002fa4>
    35dc:	01000074 	movhi	r4,1
    35e0:	21053404 	addi	r4,r4,5328
    35e4:	0039883a 	mov	fp,zero
    35e8:	d9003915 	stw	r4,228(sp)
    35ec:	04401e04 	movi	r17,120
    35f0:	003f8206 	br	33fc <__alt_data_end+0xff0033fc>
    35f4:	18c03fcc 	andi	r3,r3,255
    35f8:	1805061e 	bne	r3,zero,4a14 <___vfprintf_internal_r+0x21c0>
    35fc:	883d9126 	beq	r17,zero,2c44 <__alt_data_end+0xff002c44>
    3600:	00c00044 	movi	r3,1
    3604:	d8c02a15 	stw	r3,168(sp)
    3608:	dc401405 	stb	r17,80(sp)
    360c:	d8002785 	stb	zero,158(sp)
    3610:	003fec06 	br	35c4 <__alt_data_end+0xff0035c4>
    3614:	01400074 	movhi	r5,1
    3618:	29453404 	addi	r5,r5,5328
    361c:	d9403915 	stw	r5,228(sp)
    3620:	d8c02d15 	stw	r3,180(sp)
    3624:	1025883a 	mov	r18,r2
    3628:	04401e04 	movi	r17,120
    362c:	9d84b03a 	or	r2,r19,r22
    3630:	1000fc1e 	bne	r2,zero,3a24 <___vfprintf_internal_r+0x11d0>
    3634:	0039883a 	mov	fp,zero
    3638:	00800084 	movi	r2,2
    363c:	10803fcc 	andi	r2,r2,255
    3640:	00c00044 	movi	r3,1
    3644:	10c20f26 	beq	r2,r3,3e84 <___vfprintf_internal_r+0x1630>
    3648:	00c00084 	movi	r3,2
    364c:	10fd6326 	beq	r2,r3,2bdc <__alt_data_end+0xff002bdc>
    3650:	003e2d06 	br	2f08 <__alt_data_end+0xff002f08>
    3654:	d8c02017 	ldw	r3,128(sp)
    3658:	003e9306 	br	30a8 <__alt_data_end+0xff0030a8>
    365c:	00801944 	movi	r2,101
    3660:	14407e0e 	bge	r2,r17,385c <___vfprintf_internal_r+0x1008>
    3664:	d9003617 	ldw	r4,216(sp)
    3668:	d9403817 	ldw	r5,224(sp)
    366c:	000d883a 	mov	r6,zero
    3670:	000f883a 	mov	r7,zero
    3674:	d8c03c15 	stw	r3,240(sp)
    3678:	da003d15 	stw	r8,244(sp)
    367c:	000d0b40 	call	d0b4 <__eqdf2>
    3680:	d8c03c17 	ldw	r3,240(sp)
    3684:	da003d17 	ldw	r8,244(sp)
    3688:	1000f71e 	bne	r2,zero,3a68 <___vfprintf_internal_r+0x1214>
    368c:	d8801f17 	ldw	r2,124(sp)
    3690:	01000074 	movhi	r4,1
    3694:	21053b04 	addi	r4,r4,5356
    3698:	18c00044 	addi	r3,r3,1
    369c:	10800044 	addi	r2,r2,1
    36a0:	41000015 	stw	r4,0(r8)
    36a4:	01000044 	movi	r4,1
    36a8:	41000115 	stw	r4,4(r8)
    36ac:	d8c02015 	stw	r3,128(sp)
    36b0:	d8801f15 	stw	r2,124(sp)
    36b4:	010001c4 	movi	r4,7
    36b8:	2082b816 	blt	r4,r2,419c <___vfprintf_internal_r+0x1948>
    36bc:	42000204 	addi	r8,r8,8
    36c0:	d8802617 	ldw	r2,152(sp)
    36c4:	d9403317 	ldw	r5,204(sp)
    36c8:	11400216 	blt	r2,r5,36d4 <___vfprintf_internal_r+0xe80>
    36cc:	9080004c 	andi	r2,r18,1
    36d0:	103ed526 	beq	r2,zero,3228 <__alt_data_end+0xff003228>
    36d4:	d8803717 	ldw	r2,220(sp)
    36d8:	d9003417 	ldw	r4,208(sp)
    36dc:	d9403717 	ldw	r5,220(sp)
    36e0:	1887883a 	add	r3,r3,r2
    36e4:	d8801f17 	ldw	r2,124(sp)
    36e8:	41000015 	stw	r4,0(r8)
    36ec:	41400115 	stw	r5,4(r8)
    36f0:	10800044 	addi	r2,r2,1
    36f4:	d8c02015 	stw	r3,128(sp)
    36f8:	d8801f15 	stw	r2,124(sp)
    36fc:	010001c4 	movi	r4,7
    3700:	20832916 	blt	r4,r2,43a8 <___vfprintf_internal_r+0x1b54>
    3704:	42000204 	addi	r8,r8,8
    3708:	d8803317 	ldw	r2,204(sp)
    370c:	143fffc4 	addi	r16,r2,-1
    3710:	043ec50e 	bge	zero,r16,3228 <__alt_data_end+0xff003228>
    3714:	04400404 	movi	r17,16
    3718:	d8801f17 	ldw	r2,124(sp)
    371c:	8c00880e 	bge	r17,r16,3940 <___vfprintf_internal_r+0x10ec>
    3720:	01400074 	movhi	r5,1
    3724:	29453b84 	addi	r5,r5,5358
    3728:	d9402b15 	stw	r5,172(sp)
    372c:	058001c4 	movi	r22,7
    3730:	dcc02c17 	ldw	r19,176(sp)
    3734:	00000306 	br	3744 <___vfprintf_internal_r+0xef0>
    3738:	42000204 	addi	r8,r8,8
    373c:	843ffc04 	addi	r16,r16,-16
    3740:	8c00820e 	bge	r17,r16,394c <___vfprintf_internal_r+0x10f8>
    3744:	18c00404 	addi	r3,r3,16
    3748:	10800044 	addi	r2,r2,1
    374c:	45000015 	stw	r20,0(r8)
    3750:	44400115 	stw	r17,4(r8)
    3754:	d8c02015 	stw	r3,128(sp)
    3758:	d8801f15 	stw	r2,124(sp)
    375c:	b0bff60e 	bge	r22,r2,3738 <__alt_data_end+0xff003738>
    3760:	d9801e04 	addi	r6,sp,120
    3764:	b80b883a 	mov	r5,r23
    3768:	9809883a 	mov	r4,r19
    376c:	00095f00 	call	95f0 <__sprint_r>
    3770:	103d3a1e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    3774:	d8c02017 	ldw	r3,128(sp)
    3778:	d8801f17 	ldw	r2,124(sp)
    377c:	da000404 	addi	r8,sp,16
    3780:	003fee06 	br	373c <__alt_data_end+0xff00373c>
    3784:	d9403117 	ldw	r5,196(sp)
    3788:	d8802a17 	ldw	r2,168(sp)
    378c:	28adc83a 	sub	r22,r5,r2
    3790:	05be630e 	bge	zero,r22,3120 <__alt_data_end+0xff003120>
    3794:	07000404 	movi	fp,16
    3798:	d8801f17 	ldw	r2,124(sp)
    379c:	e5838f0e 	bge	fp,r22,45dc <___vfprintf_internal_r+0x1d88>
    37a0:	01400074 	movhi	r5,1
    37a4:	29453b84 	addi	r5,r5,5358
    37a8:	dc403015 	stw	r17,192(sp)
    37ac:	d9402b15 	stw	r5,172(sp)
    37b0:	b023883a 	mov	r17,r22
    37b4:	04c001c4 	movi	r19,7
    37b8:	a82d883a 	mov	r22,r21
    37bc:	902b883a 	mov	r21,r18
    37c0:	8025883a 	mov	r18,r16
    37c4:	dc002c17 	ldw	r16,176(sp)
    37c8:	00000306 	br	37d8 <___vfprintf_internal_r+0xf84>
    37cc:	8c7ffc04 	addi	r17,r17,-16
    37d0:	42000204 	addi	r8,r8,8
    37d4:	e440110e 	bge	fp,r17,381c <___vfprintf_internal_r+0xfc8>
    37d8:	18c00404 	addi	r3,r3,16
    37dc:	10800044 	addi	r2,r2,1
    37e0:	45000015 	stw	r20,0(r8)
    37e4:	47000115 	stw	fp,4(r8)
    37e8:	d8c02015 	stw	r3,128(sp)
    37ec:	d8801f15 	stw	r2,124(sp)
    37f0:	98bff60e 	bge	r19,r2,37cc <__alt_data_end+0xff0037cc>
    37f4:	d9801e04 	addi	r6,sp,120
    37f8:	b80b883a 	mov	r5,r23
    37fc:	8009883a 	mov	r4,r16
    3800:	00095f00 	call	95f0 <__sprint_r>
    3804:	103d151e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    3808:	8c7ffc04 	addi	r17,r17,-16
    380c:	d8c02017 	ldw	r3,128(sp)
    3810:	d8801f17 	ldw	r2,124(sp)
    3814:	da000404 	addi	r8,sp,16
    3818:	e47fef16 	blt	fp,r17,37d8 <__alt_data_end+0xff0037d8>
    381c:	9021883a 	mov	r16,r18
    3820:	a825883a 	mov	r18,r21
    3824:	b02b883a 	mov	r21,r22
    3828:	882d883a 	mov	r22,r17
    382c:	dc403017 	ldw	r17,192(sp)
    3830:	d9002b17 	ldw	r4,172(sp)
    3834:	1d87883a 	add	r3,r3,r22
    3838:	10800044 	addi	r2,r2,1
    383c:	41000015 	stw	r4,0(r8)
    3840:	45800115 	stw	r22,4(r8)
    3844:	d8c02015 	stw	r3,128(sp)
    3848:	d8801f15 	stw	r2,124(sp)
    384c:	010001c4 	movi	r4,7
    3850:	20818e16 	blt	r4,r2,3e8c <___vfprintf_internal_r+0x1638>
    3854:	42000204 	addi	r8,r8,8
    3858:	003e3106 	br	3120 <__alt_data_end+0xff003120>
    385c:	d9403317 	ldw	r5,204(sp)
    3860:	00800044 	movi	r2,1
    3864:	18c00044 	addi	r3,r3,1
    3868:	1141530e 	bge	r2,r5,3db8 <___vfprintf_internal_r+0x1564>
    386c:	dc401f17 	ldw	r17,124(sp)
    3870:	00800044 	movi	r2,1
    3874:	40800115 	stw	r2,4(r8)
    3878:	8c400044 	addi	r17,r17,1
    387c:	44000015 	stw	r16,0(r8)
    3880:	d8c02015 	stw	r3,128(sp)
    3884:	dc401f15 	stw	r17,124(sp)
    3888:	008001c4 	movi	r2,7
    388c:	14416b16 	blt	r2,r17,3e3c <___vfprintf_internal_r+0x15e8>
    3890:	42000204 	addi	r8,r8,8
    3894:	d8803717 	ldw	r2,220(sp)
    3898:	d9003417 	ldw	r4,208(sp)
    389c:	8c400044 	addi	r17,r17,1
    38a0:	10c7883a 	add	r3,r2,r3
    38a4:	40800115 	stw	r2,4(r8)
    38a8:	41000015 	stw	r4,0(r8)
    38ac:	d8c02015 	stw	r3,128(sp)
    38b0:	dc401f15 	stw	r17,124(sp)
    38b4:	008001c4 	movi	r2,7
    38b8:	14416916 	blt	r2,r17,3e60 <___vfprintf_internal_r+0x160c>
    38bc:	45800204 	addi	r22,r8,8
    38c0:	d9003617 	ldw	r4,216(sp)
    38c4:	d9403817 	ldw	r5,224(sp)
    38c8:	000d883a 	mov	r6,zero
    38cc:	000f883a 	mov	r7,zero
    38d0:	d8c03c15 	stw	r3,240(sp)
    38d4:	000d0b40 	call	d0b4 <__eqdf2>
    38d8:	d8c03c17 	ldw	r3,240(sp)
    38dc:	1000bc26 	beq	r2,zero,3bd0 <___vfprintf_internal_r+0x137c>
    38e0:	d9403317 	ldw	r5,204(sp)
    38e4:	84000044 	addi	r16,r16,1
    38e8:	8c400044 	addi	r17,r17,1
    38ec:	28bfffc4 	addi	r2,r5,-1
    38f0:	1887883a 	add	r3,r3,r2
    38f4:	b0800115 	stw	r2,4(r22)
    38f8:	b4000015 	stw	r16,0(r22)
    38fc:	d8c02015 	stw	r3,128(sp)
    3900:	dc401f15 	stw	r17,124(sp)
    3904:	008001c4 	movi	r2,7
    3908:	14414316 	blt	r2,r17,3e18 <___vfprintf_internal_r+0x15c4>
    390c:	b5800204 	addi	r22,r22,8
    3910:	d9003a17 	ldw	r4,232(sp)
    3914:	df0022c4 	addi	fp,sp,139
    3918:	8c400044 	addi	r17,r17,1
    391c:	20c7883a 	add	r3,r4,r3
    3920:	b7000015 	stw	fp,0(r22)
    3924:	b1000115 	stw	r4,4(r22)
    3928:	d8c02015 	stw	r3,128(sp)
    392c:	dc401f15 	stw	r17,124(sp)
    3930:	008001c4 	movi	r2,7
    3934:	14400e16 	blt	r2,r17,3970 <___vfprintf_internal_r+0x111c>
    3938:	b2000204 	addi	r8,r22,8
    393c:	003e3a06 	br	3228 <__alt_data_end+0xff003228>
    3940:	01000074 	movhi	r4,1
    3944:	21053b84 	addi	r4,r4,5358
    3948:	d9002b15 	stw	r4,172(sp)
    394c:	d9002b17 	ldw	r4,172(sp)
    3950:	1c07883a 	add	r3,r3,r16
    3954:	44000115 	stw	r16,4(r8)
    3958:	41000015 	stw	r4,0(r8)
    395c:	10800044 	addi	r2,r2,1
    3960:	d8c02015 	stw	r3,128(sp)
    3964:	d8801f15 	stw	r2,124(sp)
    3968:	010001c4 	movi	r4,7
    396c:	20be2d0e 	bge	r4,r2,3224 <__alt_data_end+0xff003224>
    3970:	d9002c17 	ldw	r4,176(sp)
    3974:	d9801e04 	addi	r6,sp,120
    3978:	b80b883a 	mov	r5,r23
    397c:	00095f00 	call	95f0 <__sprint_r>
    3980:	103cb61e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    3984:	d8c02017 	ldw	r3,128(sp)
    3988:	da000404 	addi	r8,sp,16
    398c:	003e2606 	br	3228 <__alt_data_end+0xff003228>
    3990:	d9002c17 	ldw	r4,176(sp)
    3994:	d9801e04 	addi	r6,sp,120
    3998:	b80b883a 	mov	r5,r23
    399c:	00095f00 	call	95f0 <__sprint_r>
    39a0:	103e5d26 	beq	r2,zero,3318 <__alt_data_end+0xff003318>
    39a4:	003cad06 	br	2c5c <__alt_data_end+0xff002c5c>
    39a8:	d9002c17 	ldw	r4,176(sp)
    39ac:	d9801e04 	addi	r6,sp,120
    39b0:	b80b883a 	mov	r5,r23
    39b4:	00095f00 	call	95f0 <__sprint_r>
    39b8:	103ca81e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    39bc:	d8c02017 	ldw	r3,128(sp)
    39c0:	da000404 	addi	r8,sp,16
    39c4:	003e0b06 	br	31f4 <__alt_data_end+0xff0031f4>
    39c8:	d9002c17 	ldw	r4,176(sp)
    39cc:	d9801e04 	addi	r6,sp,120
    39d0:	b80b883a 	mov	r5,r23
    39d4:	00095f00 	call	95f0 <__sprint_r>
    39d8:	103ca01e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    39dc:	d8c02017 	ldw	r3,128(sp)
    39e0:	da000404 	addi	r8,sp,16
    39e4:	003dbd06 	br	30dc <__alt_data_end+0xff0030dc>
    39e8:	d9002c17 	ldw	r4,176(sp)
    39ec:	d9801e04 	addi	r6,sp,120
    39f0:	b80b883a 	mov	r5,r23
    39f4:	00095f00 	call	95f0 <__sprint_r>
    39f8:	103c981e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    39fc:	d8c02017 	ldw	r3,128(sp)
    3a00:	da000404 	addi	r8,sp,16
    3a04:	003dc306 	br	3114 <__alt_data_end+0xff003114>
    3a08:	d8802917 	ldw	r2,164(sp)
    3a0c:	d8002785 	stb	zero,158(sp)
    3a10:	103f0616 	blt	r2,zero,362c <__alt_data_end+0xff00362c>
    3a14:	00ffdfc4 	movi	r3,-129
    3a18:	9d84b03a 	or	r2,r19,r22
    3a1c:	90e4703a 	and	r18,r18,r3
    3a20:	103c6b26 	beq	r2,zero,2bd0 <__alt_data_end+0xff002bd0>
    3a24:	0039883a 	mov	fp,zero
    3a28:	003e7406 	br	33fc <__alt_data_end+0xff0033fc>
    3a2c:	9080040c 	andi	r2,r18,16
    3a30:	1001b326 	beq	r2,zero,4100 <___vfprintf_internal_r+0x18ac>
    3a34:	d9002d17 	ldw	r4,180(sp)
    3a38:	d9402917 	ldw	r5,164(sp)
    3a3c:	d8002785 	stb	zero,158(sp)
    3a40:	20800104 	addi	r2,r4,4
    3a44:	24c00017 	ldw	r19,0(r4)
    3a48:	002d883a 	mov	r22,zero
    3a4c:	2801b516 	blt	r5,zero,4124 <___vfprintf_internal_r+0x18d0>
    3a50:	00ffdfc4 	movi	r3,-129
    3a54:	d8802d15 	stw	r2,180(sp)
    3a58:	90e4703a 	and	r18,r18,r3
    3a5c:	983d2726 	beq	r19,zero,2efc <__alt_data_end+0xff002efc>
    3a60:	0039883a 	mov	fp,zero
    3a64:	003d2a06 	br	2f10 <__alt_data_end+0xff002f10>
    3a68:	dc402617 	ldw	r17,152(sp)
    3a6c:	0441d30e 	bge	zero,r17,41bc <___vfprintf_internal_r+0x1968>
    3a70:	dc403217 	ldw	r17,200(sp)
    3a74:	d8803317 	ldw	r2,204(sp)
    3a78:	1440010e 	bge	r2,r17,3a80 <___vfprintf_internal_r+0x122c>
    3a7c:	1023883a 	mov	r17,r2
    3a80:	04400a0e 	bge	zero,r17,3aac <___vfprintf_internal_r+0x1258>
    3a84:	d8801f17 	ldw	r2,124(sp)
    3a88:	1c47883a 	add	r3,r3,r17
    3a8c:	44000015 	stw	r16,0(r8)
    3a90:	10800044 	addi	r2,r2,1
    3a94:	44400115 	stw	r17,4(r8)
    3a98:	d8c02015 	stw	r3,128(sp)
    3a9c:	d8801f15 	stw	r2,124(sp)
    3aa0:	010001c4 	movi	r4,7
    3aa4:	20826516 	blt	r4,r2,443c <___vfprintf_internal_r+0x1be8>
    3aa8:	42000204 	addi	r8,r8,8
    3aac:	88026116 	blt	r17,zero,4434 <___vfprintf_internal_r+0x1be0>
    3ab0:	d9003217 	ldw	r4,200(sp)
    3ab4:	2463c83a 	sub	r17,r4,r17
    3ab8:	04407b0e 	bge	zero,r17,3ca8 <___vfprintf_internal_r+0x1454>
    3abc:	05800404 	movi	r22,16
    3ac0:	d8801f17 	ldw	r2,124(sp)
    3ac4:	b4419d0e 	bge	r22,r17,413c <___vfprintf_internal_r+0x18e8>
    3ac8:	01000074 	movhi	r4,1
    3acc:	21053b84 	addi	r4,r4,5358
    3ad0:	d9002b15 	stw	r4,172(sp)
    3ad4:	070001c4 	movi	fp,7
    3ad8:	dcc02c17 	ldw	r19,176(sp)
    3adc:	00000306 	br	3aec <___vfprintf_internal_r+0x1298>
    3ae0:	42000204 	addi	r8,r8,8
    3ae4:	8c7ffc04 	addi	r17,r17,-16
    3ae8:	b441970e 	bge	r22,r17,4148 <___vfprintf_internal_r+0x18f4>
    3aec:	18c00404 	addi	r3,r3,16
    3af0:	10800044 	addi	r2,r2,1
    3af4:	45000015 	stw	r20,0(r8)
    3af8:	45800115 	stw	r22,4(r8)
    3afc:	d8c02015 	stw	r3,128(sp)
    3b00:	d8801f15 	stw	r2,124(sp)
    3b04:	e0bff60e 	bge	fp,r2,3ae0 <__alt_data_end+0xff003ae0>
    3b08:	d9801e04 	addi	r6,sp,120
    3b0c:	b80b883a 	mov	r5,r23
    3b10:	9809883a 	mov	r4,r19
    3b14:	00095f00 	call	95f0 <__sprint_r>
    3b18:	103c501e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    3b1c:	d8c02017 	ldw	r3,128(sp)
    3b20:	d8801f17 	ldw	r2,124(sp)
    3b24:	da000404 	addi	r8,sp,16
    3b28:	003fee06 	br	3ae4 <__alt_data_end+0xff003ae4>
    3b2c:	d9002c17 	ldw	r4,176(sp)
    3b30:	d9801e04 	addi	r6,sp,120
    3b34:	b80b883a 	mov	r5,r23
    3b38:	00095f00 	call	95f0 <__sprint_r>
    3b3c:	103c471e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    3b40:	d8c02017 	ldw	r3,128(sp)
    3b44:	df002787 	ldb	fp,158(sp)
    3b48:	da000404 	addi	r8,sp,16
    3b4c:	003d5606 	br	30a8 <__alt_data_end+0xff0030a8>
    3b50:	9080040c 	andi	r2,r18,16
    3b54:	10016126 	beq	r2,zero,40dc <___vfprintf_internal_r+0x1888>
    3b58:	d8802d17 	ldw	r2,180(sp)
    3b5c:	14c00017 	ldw	r19,0(r2)
    3b60:	10800104 	addi	r2,r2,4
    3b64:	d8802d15 	stw	r2,180(sp)
    3b68:	982dd7fa 	srai	r22,r19,31
    3b6c:	b005883a 	mov	r2,r22
    3b70:	003c8206 	br	2d7c <__alt_data_end+0xff002d7c>
    3b74:	9080040c 	andi	r2,r18,16
    3b78:	10003526 	beq	r2,zero,3c50 <___vfprintf_internal_r+0x13fc>
    3b7c:	d9402d17 	ldw	r5,180(sp)
    3b80:	d8c02917 	ldw	r3,164(sp)
    3b84:	d8002785 	stb	zero,158(sp)
    3b88:	28800104 	addi	r2,r5,4
    3b8c:	2cc00017 	ldw	r19,0(r5)
    3b90:	002d883a 	mov	r22,zero
    3b94:	18003716 	blt	r3,zero,3c74 <___vfprintf_internal_r+0x1420>
    3b98:	00ffdfc4 	movi	r3,-129
    3b9c:	d8802d15 	stw	r2,180(sp)
    3ba0:	90e4703a 	and	r18,r18,r3
    3ba4:	0039883a 	mov	fp,zero
    3ba8:	983df326 	beq	r19,zero,3378 <__alt_data_end+0xff003378>
    3bac:	00800244 	movi	r2,9
    3bb0:	14fc7b36 	bltu	r2,r19,2da0 <__alt_data_end+0xff002da0>
    3bb4:	d8c02817 	ldw	r3,160(sp)
    3bb8:	dc001dc4 	addi	r16,sp,119
    3bbc:	9cc00c04 	addi	r19,r19,48
    3bc0:	1c07c83a 	sub	r3,r3,r16
    3bc4:	dcc01dc5 	stb	r19,119(sp)
    3bc8:	d8c02e15 	stw	r3,184(sp)
    3bcc:	003ce806 	br	2f70 <__alt_data_end+0xff002f70>
    3bd0:	d8803317 	ldw	r2,204(sp)
    3bd4:	143fffc4 	addi	r16,r2,-1
    3bd8:	043f4d0e 	bge	zero,r16,3910 <__alt_data_end+0xff003910>
    3bdc:	07000404 	movi	fp,16
    3be0:	e400810e 	bge	fp,r16,3de8 <___vfprintf_internal_r+0x1594>
    3be4:	01400074 	movhi	r5,1
    3be8:	29453b84 	addi	r5,r5,5358
    3bec:	d9402b15 	stw	r5,172(sp)
    3bf0:	01c001c4 	movi	r7,7
    3bf4:	dcc02c17 	ldw	r19,176(sp)
    3bf8:	00000306 	br	3c08 <___vfprintf_internal_r+0x13b4>
    3bfc:	b5800204 	addi	r22,r22,8
    3c00:	843ffc04 	addi	r16,r16,-16
    3c04:	e4007b0e 	bge	fp,r16,3df4 <___vfprintf_internal_r+0x15a0>
    3c08:	18c00404 	addi	r3,r3,16
    3c0c:	8c400044 	addi	r17,r17,1
    3c10:	b5000015 	stw	r20,0(r22)
    3c14:	b7000115 	stw	fp,4(r22)
    3c18:	d8c02015 	stw	r3,128(sp)
    3c1c:	dc401f15 	stw	r17,124(sp)
    3c20:	3c7ff60e 	bge	r7,r17,3bfc <__alt_data_end+0xff003bfc>
    3c24:	d9801e04 	addi	r6,sp,120
    3c28:	b80b883a 	mov	r5,r23
    3c2c:	9809883a 	mov	r4,r19
    3c30:	d9c03c15 	stw	r7,240(sp)
    3c34:	00095f00 	call	95f0 <__sprint_r>
    3c38:	d9c03c17 	ldw	r7,240(sp)
    3c3c:	103c071e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    3c40:	d8c02017 	ldw	r3,128(sp)
    3c44:	dc401f17 	ldw	r17,124(sp)
    3c48:	dd800404 	addi	r22,sp,16
    3c4c:	003fec06 	br	3c00 <__alt_data_end+0xff003c00>
    3c50:	9080100c 	andi	r2,r18,64
    3c54:	d8002785 	stb	zero,158(sp)
    3c58:	10010e26 	beq	r2,zero,4094 <___vfprintf_internal_r+0x1840>
    3c5c:	d9002d17 	ldw	r4,180(sp)
    3c60:	d9402917 	ldw	r5,164(sp)
    3c64:	002d883a 	mov	r22,zero
    3c68:	20800104 	addi	r2,r4,4
    3c6c:	24c0000b 	ldhu	r19,0(r4)
    3c70:	283fc90e 	bge	r5,zero,3b98 <__alt_data_end+0xff003b98>
    3c74:	d8802d15 	stw	r2,180(sp)
    3c78:	0039883a 	mov	fp,zero
    3c7c:	9d84b03a 	or	r2,r19,r22
    3c80:	103c461e 	bne	r2,zero,2d9c <__alt_data_end+0xff002d9c>
    3c84:	00800044 	movi	r2,1
    3c88:	003e6c06 	br	363c <__alt_data_end+0xff00363c>
    3c8c:	d9002c17 	ldw	r4,176(sp)
    3c90:	d9801e04 	addi	r6,sp,120
    3c94:	b80b883a 	mov	r5,r23
    3c98:	00095f00 	call	95f0 <__sprint_r>
    3c9c:	103bef1e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    3ca0:	d8c02017 	ldw	r3,128(sp)
    3ca4:	da000404 	addi	r8,sp,16
    3ca8:	d9003217 	ldw	r4,200(sp)
    3cac:	d8802617 	ldw	r2,152(sp)
    3cb0:	d9403317 	ldw	r5,204(sp)
    3cb4:	8123883a 	add	r17,r16,r4
    3cb8:	11400216 	blt	r2,r5,3cc4 <___vfprintf_internal_r+0x1470>
    3cbc:	9100004c 	andi	r4,r18,1
    3cc0:	20000d26 	beq	r4,zero,3cf8 <___vfprintf_internal_r+0x14a4>
    3cc4:	d9003717 	ldw	r4,220(sp)
    3cc8:	d9403417 	ldw	r5,208(sp)
    3ccc:	1907883a 	add	r3,r3,r4
    3cd0:	d9001f17 	ldw	r4,124(sp)
    3cd4:	41400015 	stw	r5,0(r8)
    3cd8:	d9403717 	ldw	r5,220(sp)
    3cdc:	21000044 	addi	r4,r4,1
    3ce0:	d8c02015 	stw	r3,128(sp)
    3ce4:	41400115 	stw	r5,4(r8)
    3ce8:	d9001f15 	stw	r4,124(sp)
    3cec:	014001c4 	movi	r5,7
    3cf0:	2901e816 	blt	r5,r4,4494 <___vfprintf_internal_r+0x1c40>
    3cf4:	42000204 	addi	r8,r8,8
    3cf8:	d9003317 	ldw	r4,204(sp)
    3cfc:	8121883a 	add	r16,r16,r4
    3d00:	2085c83a 	sub	r2,r4,r2
    3d04:	8461c83a 	sub	r16,r16,r17
    3d08:	1400010e 	bge	r2,r16,3d10 <___vfprintf_internal_r+0x14bc>
    3d0c:	1021883a 	mov	r16,r2
    3d10:	04000a0e 	bge	zero,r16,3d3c <___vfprintf_internal_r+0x14e8>
    3d14:	d9001f17 	ldw	r4,124(sp)
    3d18:	1c07883a 	add	r3,r3,r16
    3d1c:	44400015 	stw	r17,0(r8)
    3d20:	21000044 	addi	r4,r4,1
    3d24:	44000115 	stw	r16,4(r8)
    3d28:	d8c02015 	stw	r3,128(sp)
    3d2c:	d9001f15 	stw	r4,124(sp)
    3d30:	014001c4 	movi	r5,7
    3d34:	2901fb16 	blt	r5,r4,4524 <___vfprintf_internal_r+0x1cd0>
    3d38:	42000204 	addi	r8,r8,8
    3d3c:	8001f716 	blt	r16,zero,451c <___vfprintf_internal_r+0x1cc8>
    3d40:	1421c83a 	sub	r16,r2,r16
    3d44:	043d380e 	bge	zero,r16,3228 <__alt_data_end+0xff003228>
    3d48:	04400404 	movi	r17,16
    3d4c:	d8801f17 	ldw	r2,124(sp)
    3d50:	8c3efb0e 	bge	r17,r16,3940 <__alt_data_end+0xff003940>
    3d54:	01400074 	movhi	r5,1
    3d58:	29453b84 	addi	r5,r5,5358
    3d5c:	d9402b15 	stw	r5,172(sp)
    3d60:	058001c4 	movi	r22,7
    3d64:	dcc02c17 	ldw	r19,176(sp)
    3d68:	00000306 	br	3d78 <___vfprintf_internal_r+0x1524>
    3d6c:	42000204 	addi	r8,r8,8
    3d70:	843ffc04 	addi	r16,r16,-16
    3d74:	8c3ef50e 	bge	r17,r16,394c <__alt_data_end+0xff00394c>
    3d78:	18c00404 	addi	r3,r3,16
    3d7c:	10800044 	addi	r2,r2,1
    3d80:	45000015 	stw	r20,0(r8)
    3d84:	44400115 	stw	r17,4(r8)
    3d88:	d8c02015 	stw	r3,128(sp)
    3d8c:	d8801f15 	stw	r2,124(sp)
    3d90:	b0bff60e 	bge	r22,r2,3d6c <__alt_data_end+0xff003d6c>
    3d94:	d9801e04 	addi	r6,sp,120
    3d98:	b80b883a 	mov	r5,r23
    3d9c:	9809883a 	mov	r4,r19
    3da0:	00095f00 	call	95f0 <__sprint_r>
    3da4:	103bad1e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    3da8:	d8c02017 	ldw	r3,128(sp)
    3dac:	d8801f17 	ldw	r2,124(sp)
    3db0:	da000404 	addi	r8,sp,16
    3db4:	003fee06 	br	3d70 <__alt_data_end+0xff003d70>
    3db8:	9088703a 	and	r4,r18,r2
    3dbc:	203eab1e 	bne	r4,zero,386c <__alt_data_end+0xff00386c>
    3dc0:	dc401f17 	ldw	r17,124(sp)
    3dc4:	40800115 	stw	r2,4(r8)
    3dc8:	44000015 	stw	r16,0(r8)
    3dcc:	8c400044 	addi	r17,r17,1
    3dd0:	d8c02015 	stw	r3,128(sp)
    3dd4:	dc401f15 	stw	r17,124(sp)
    3dd8:	008001c4 	movi	r2,7
    3ddc:	14400e16 	blt	r2,r17,3e18 <___vfprintf_internal_r+0x15c4>
    3de0:	45800204 	addi	r22,r8,8
    3de4:	003eca06 	br	3910 <__alt_data_end+0xff003910>
    3de8:	01000074 	movhi	r4,1
    3dec:	21053b84 	addi	r4,r4,5358
    3df0:	d9002b15 	stw	r4,172(sp)
    3df4:	d8802b17 	ldw	r2,172(sp)
    3df8:	1c07883a 	add	r3,r3,r16
    3dfc:	8c400044 	addi	r17,r17,1
    3e00:	b0800015 	stw	r2,0(r22)
    3e04:	b4000115 	stw	r16,4(r22)
    3e08:	d8c02015 	stw	r3,128(sp)
    3e0c:	dc401f15 	stw	r17,124(sp)
    3e10:	008001c4 	movi	r2,7
    3e14:	147ebd0e 	bge	r2,r17,390c <__alt_data_end+0xff00390c>
    3e18:	d9002c17 	ldw	r4,176(sp)
    3e1c:	d9801e04 	addi	r6,sp,120
    3e20:	b80b883a 	mov	r5,r23
    3e24:	00095f00 	call	95f0 <__sprint_r>
    3e28:	103b8c1e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    3e2c:	d8c02017 	ldw	r3,128(sp)
    3e30:	dc401f17 	ldw	r17,124(sp)
    3e34:	dd800404 	addi	r22,sp,16
    3e38:	003eb506 	br	3910 <__alt_data_end+0xff003910>
    3e3c:	d9002c17 	ldw	r4,176(sp)
    3e40:	d9801e04 	addi	r6,sp,120
    3e44:	b80b883a 	mov	r5,r23
    3e48:	00095f00 	call	95f0 <__sprint_r>
    3e4c:	103b831e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    3e50:	d8c02017 	ldw	r3,128(sp)
    3e54:	dc401f17 	ldw	r17,124(sp)
    3e58:	da000404 	addi	r8,sp,16
    3e5c:	003e8d06 	br	3894 <__alt_data_end+0xff003894>
    3e60:	d9002c17 	ldw	r4,176(sp)
    3e64:	d9801e04 	addi	r6,sp,120
    3e68:	b80b883a 	mov	r5,r23
    3e6c:	00095f00 	call	95f0 <__sprint_r>
    3e70:	103b7a1e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    3e74:	d8c02017 	ldw	r3,128(sp)
    3e78:	dc401f17 	ldw	r17,124(sp)
    3e7c:	dd800404 	addi	r22,sp,16
    3e80:	003e8f06 	br	38c0 <__alt_data_end+0xff0038c0>
    3e84:	0027883a 	mov	r19,zero
    3e88:	003f4a06 	br	3bb4 <__alt_data_end+0xff003bb4>
    3e8c:	d9002c17 	ldw	r4,176(sp)
    3e90:	d9801e04 	addi	r6,sp,120
    3e94:	b80b883a 	mov	r5,r23
    3e98:	00095f00 	call	95f0 <__sprint_r>
    3e9c:	103b6f1e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    3ea0:	d8c02017 	ldw	r3,128(sp)
    3ea4:	da000404 	addi	r8,sp,16
    3ea8:	003c9d06 	br	3120 <__alt_data_end+0xff003120>
    3eac:	04e7c83a 	sub	r19,zero,r19
    3eb0:	9804c03a 	cmpne	r2,r19,zero
    3eb4:	05adc83a 	sub	r22,zero,r22
    3eb8:	b0adc83a 	sub	r22,r22,r2
    3ebc:	d8802917 	ldw	r2,164(sp)
    3ec0:	07000b44 	movi	fp,45
    3ec4:	df002785 	stb	fp,158(sp)
    3ec8:	10017b16 	blt	r2,zero,44b8 <___vfprintf_internal_r+0x1c64>
    3ecc:	00bfdfc4 	movi	r2,-129
    3ed0:	90a4703a 	and	r18,r18,r2
    3ed4:	003bb106 	br	2d9c <__alt_data_end+0xff002d9c>
    3ed8:	d9003617 	ldw	r4,216(sp)
    3edc:	d9403817 	ldw	r5,224(sp)
    3ee0:	da003d15 	stw	r8,244(sp)
    3ee4:	00092680 	call	9268 <__fpclassifyd>
    3ee8:	da003d17 	ldw	r8,244(sp)
    3eec:	1000f026 	beq	r2,zero,42b0 <___vfprintf_internal_r+0x1a5c>
    3ef0:	d9002917 	ldw	r4,164(sp)
    3ef4:	05bff7c4 	movi	r22,-33
    3ef8:	00bfffc4 	movi	r2,-1
    3efc:	8dac703a 	and	r22,r17,r22
    3f00:	20820026 	beq	r4,r2,4704 <___vfprintf_internal_r+0x1eb0>
    3f04:	008011c4 	movi	r2,71
    3f08:	b081f726 	beq	r22,r2,46e8 <___vfprintf_internal_r+0x1e94>
    3f0c:	d9003817 	ldw	r4,224(sp)
    3f10:	90c04014 	ori	r3,r18,256
    3f14:	d8c02b15 	stw	r3,172(sp)
    3f18:	20021516 	blt	r4,zero,4770 <___vfprintf_internal_r+0x1f1c>
    3f1c:	dcc03817 	ldw	r19,224(sp)
    3f20:	d8002a05 	stb	zero,168(sp)
    3f24:	00801984 	movi	r2,102
    3f28:	8881f926 	beq	r17,r2,4710 <___vfprintf_internal_r+0x1ebc>
    3f2c:	00801184 	movi	r2,70
    3f30:	88821c26 	beq	r17,r2,47a4 <___vfprintf_internal_r+0x1f50>
    3f34:	00801144 	movi	r2,69
    3f38:	b081ef26 	beq	r22,r2,46f8 <___vfprintf_internal_r+0x1ea4>
    3f3c:	d8c02917 	ldw	r3,164(sp)
    3f40:	d8802104 	addi	r2,sp,132
    3f44:	d8800315 	stw	r2,12(sp)
    3f48:	d9403617 	ldw	r5,216(sp)
    3f4c:	d8802504 	addi	r2,sp,148
    3f50:	d9002c17 	ldw	r4,176(sp)
    3f54:	d8800215 	stw	r2,8(sp)
    3f58:	d8802604 	addi	r2,sp,152
    3f5c:	d8c00015 	stw	r3,0(sp)
    3f60:	d8800115 	stw	r2,4(sp)
    3f64:	01c00084 	movi	r7,2
    3f68:	980d883a 	mov	r6,r19
    3f6c:	d8c03c15 	stw	r3,240(sp)
    3f70:	da003d15 	stw	r8,244(sp)
    3f74:	0004e780 	call	4e78 <_dtoa_r>
    3f78:	1021883a 	mov	r16,r2
    3f7c:	008019c4 	movi	r2,103
    3f80:	d8c03c17 	ldw	r3,240(sp)
    3f84:	da003d17 	ldw	r8,244(sp)
    3f88:	88817126 	beq	r17,r2,4550 <___vfprintf_internal_r+0x1cfc>
    3f8c:	008011c4 	movi	r2,71
    3f90:	88829226 	beq	r17,r2,49dc <___vfprintf_internal_r+0x2188>
    3f94:	80f9883a 	add	fp,r16,r3
    3f98:	d9003617 	ldw	r4,216(sp)
    3f9c:	000d883a 	mov	r6,zero
    3fa0:	000f883a 	mov	r7,zero
    3fa4:	980b883a 	mov	r5,r19
    3fa8:	da003d15 	stw	r8,244(sp)
    3fac:	000d0b40 	call	d0b4 <__eqdf2>
    3fb0:	da003d17 	ldw	r8,244(sp)
    3fb4:	10018d26 	beq	r2,zero,45ec <___vfprintf_internal_r+0x1d98>
    3fb8:	d8802117 	ldw	r2,132(sp)
    3fbc:	1700062e 	bgeu	r2,fp,3fd8 <___vfprintf_internal_r+0x1784>
    3fc0:	01000c04 	movi	r4,48
    3fc4:	10c00044 	addi	r3,r2,1
    3fc8:	d8c02115 	stw	r3,132(sp)
    3fcc:	11000005 	stb	r4,0(r2)
    3fd0:	d8802117 	ldw	r2,132(sp)
    3fd4:	173ffb36 	bltu	r2,fp,3fc4 <__alt_data_end+0xff003fc4>
    3fd8:	1405c83a 	sub	r2,r2,r16
    3fdc:	d8803315 	stw	r2,204(sp)
    3fe0:	008011c4 	movi	r2,71
    3fe4:	b0817626 	beq	r22,r2,45c0 <___vfprintf_internal_r+0x1d6c>
    3fe8:	00801944 	movi	r2,101
    3fec:	1442810e 	bge	r2,r17,49f4 <___vfprintf_internal_r+0x21a0>
    3ff0:	d8c02617 	ldw	r3,152(sp)
    3ff4:	00801984 	movi	r2,102
    3ff8:	d8c03215 	stw	r3,200(sp)
    3ffc:	8881fe26 	beq	r17,r2,47f8 <___vfprintf_internal_r+0x1fa4>
    4000:	d8c03217 	ldw	r3,200(sp)
    4004:	d9003317 	ldw	r4,204(sp)
    4008:	1901dd16 	blt	r3,r4,4780 <___vfprintf_internal_r+0x1f2c>
    400c:	9480004c 	andi	r18,r18,1
    4010:	90022b1e 	bne	r18,zero,48c0 <___vfprintf_internal_r+0x206c>
    4014:	1805883a 	mov	r2,r3
    4018:	18028016 	blt	r3,zero,4a1c <___vfprintf_internal_r+0x21c8>
    401c:	d8c03217 	ldw	r3,200(sp)
    4020:	044019c4 	movi	r17,103
    4024:	d8c02e15 	stw	r3,184(sp)
    4028:	df002a07 	ldb	fp,168(sp)
    402c:	e001531e 	bne	fp,zero,457c <___vfprintf_internal_r+0x1d28>
    4030:	df002783 	ldbu	fp,158(sp)
    4034:	d8802a15 	stw	r2,168(sp)
    4038:	dc802b17 	ldw	r18,172(sp)
    403c:	d8002915 	stw	zero,164(sp)
    4040:	003bd106 	br	2f88 <__alt_data_end+0xff002f88>
    4044:	d8802d17 	ldw	r2,180(sp)
    4048:	d8c02d17 	ldw	r3,180(sp)
    404c:	d9002d17 	ldw	r4,180(sp)
    4050:	10800017 	ldw	r2,0(r2)
    4054:	18c00117 	ldw	r3,4(r3)
    4058:	21000204 	addi	r4,r4,8
    405c:	d8803615 	stw	r2,216(sp)
    4060:	d8c03815 	stw	r3,224(sp)
    4064:	d9002d15 	stw	r4,180(sp)
    4068:	003b7506 	br	2e40 <__alt_data_end+0xff002e40>
    406c:	ac400007 	ldb	r17,0(r21)
    4070:	003a5906 	br	29d8 <__alt_data_end+0xff0029d8>
    4074:	9080100c 	andi	r2,r18,64
    4078:	1000a826 	beq	r2,zero,431c <___vfprintf_internal_r+0x1ac8>
    407c:	d9002d17 	ldw	r4,180(sp)
    4080:	002d883a 	mov	r22,zero
    4084:	24c0000b 	ldhu	r19,0(r4)
    4088:	21000104 	addi	r4,r4,4
    408c:	d9002d15 	stw	r4,180(sp)
    4090:	003ccb06 	br	33c0 <__alt_data_end+0xff0033c0>
    4094:	d8c02d17 	ldw	r3,180(sp)
    4098:	d9002917 	ldw	r4,164(sp)
    409c:	002d883a 	mov	r22,zero
    40a0:	18800104 	addi	r2,r3,4
    40a4:	1cc00017 	ldw	r19,0(r3)
    40a8:	203ebb0e 	bge	r4,zero,3b98 <__alt_data_end+0xff003b98>
    40ac:	003ef106 	br	3c74 <__alt_data_end+0xff003c74>
    40b0:	9080040c 	andi	r2,r18,16
    40b4:	1000921e 	bne	r2,zero,4300 <___vfprintf_internal_r+0x1aac>
    40b8:	9480100c 	andi	r18,r18,64
    40bc:	90013926 	beq	r18,zero,45a4 <___vfprintf_internal_r+0x1d50>
    40c0:	d9002d17 	ldw	r4,180(sp)
    40c4:	d9402f17 	ldw	r5,188(sp)
    40c8:	20800017 	ldw	r2,0(r4)
    40cc:	21000104 	addi	r4,r4,4
    40d0:	d9002d15 	stw	r4,180(sp)
    40d4:	1140000d 	sth	r5,0(r2)
    40d8:	003a1606 	br	2934 <__alt_data_end+0xff002934>
    40dc:	9080100c 	andi	r2,r18,64
    40e0:	10008026 	beq	r2,zero,42e4 <___vfprintf_internal_r+0x1a90>
    40e4:	d8c02d17 	ldw	r3,180(sp)
    40e8:	1cc0000f 	ldh	r19,0(r3)
    40ec:	18c00104 	addi	r3,r3,4
    40f0:	d8c02d15 	stw	r3,180(sp)
    40f4:	982dd7fa 	srai	r22,r19,31
    40f8:	b005883a 	mov	r2,r22
    40fc:	003b1f06 	br	2d7c <__alt_data_end+0xff002d7c>
    4100:	9080100c 	andi	r2,r18,64
    4104:	d8002785 	stb	zero,158(sp)
    4108:	10008a1e 	bne	r2,zero,4334 <___vfprintf_internal_r+0x1ae0>
    410c:	d9402d17 	ldw	r5,180(sp)
    4110:	d8c02917 	ldw	r3,164(sp)
    4114:	002d883a 	mov	r22,zero
    4118:	28800104 	addi	r2,r5,4
    411c:	2cc00017 	ldw	r19,0(r5)
    4120:	183e4b0e 	bge	r3,zero,3a50 <__alt_data_end+0xff003a50>
    4124:	9d86b03a 	or	r3,r19,r22
    4128:	d8802d15 	stw	r2,180(sp)
    412c:	183e4c1e 	bne	r3,zero,3a60 <__alt_data_end+0xff003a60>
    4130:	0039883a 	mov	fp,zero
    4134:	0005883a 	mov	r2,zero
    4138:	003d4006 	br	363c <__alt_data_end+0xff00363c>
    413c:	01400074 	movhi	r5,1
    4140:	29453b84 	addi	r5,r5,5358
    4144:	d9402b15 	stw	r5,172(sp)
    4148:	d9402b17 	ldw	r5,172(sp)
    414c:	1c47883a 	add	r3,r3,r17
    4150:	10800044 	addi	r2,r2,1
    4154:	41400015 	stw	r5,0(r8)
    4158:	44400115 	stw	r17,4(r8)
    415c:	d8c02015 	stw	r3,128(sp)
    4160:	d8801f15 	stw	r2,124(sp)
    4164:	010001c4 	movi	r4,7
    4168:	20bec816 	blt	r4,r2,3c8c <__alt_data_end+0xff003c8c>
    416c:	42000204 	addi	r8,r8,8
    4170:	003ecd06 	br	3ca8 <__alt_data_end+0xff003ca8>
    4174:	d9002917 	ldw	r4,164(sp)
    4178:	d8002785 	stb	zero,158(sp)
    417c:	203d2d16 	blt	r4,zero,3634 <__alt_data_end+0xff003634>
    4180:	00bfdfc4 	movi	r2,-129
    4184:	90a4703a 	and	r18,r18,r2
    4188:	003a9106 	br	2bd0 <__alt_data_end+0xff002bd0>
    418c:	01000074 	movhi	r4,1
    4190:	21053b84 	addi	r4,r4,5358
    4194:	d9002b15 	stw	r4,172(sp)
    4198:	003c0c06 	br	31cc <__alt_data_end+0xff0031cc>
    419c:	d9002c17 	ldw	r4,176(sp)
    41a0:	d9801e04 	addi	r6,sp,120
    41a4:	b80b883a 	mov	r5,r23
    41a8:	00095f00 	call	95f0 <__sprint_r>
    41ac:	103aab1e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    41b0:	d8c02017 	ldw	r3,128(sp)
    41b4:	da000404 	addi	r8,sp,16
    41b8:	003d4106 	br	36c0 <__alt_data_end+0xff0036c0>
    41bc:	d8801f17 	ldw	r2,124(sp)
    41c0:	01400074 	movhi	r5,1
    41c4:	01000044 	movi	r4,1
    41c8:	18c00044 	addi	r3,r3,1
    41cc:	10800044 	addi	r2,r2,1
    41d0:	29453b04 	addi	r5,r5,5356
    41d4:	41000115 	stw	r4,4(r8)
    41d8:	41400015 	stw	r5,0(r8)
    41dc:	d8c02015 	stw	r3,128(sp)
    41e0:	d8801f15 	stw	r2,124(sp)
    41e4:	010001c4 	movi	r4,7
    41e8:	20805c16 	blt	r4,r2,435c <___vfprintf_internal_r+0x1b08>
    41ec:	42000204 	addi	r8,r8,8
    41f0:	8800041e 	bne	r17,zero,4204 <___vfprintf_internal_r+0x19b0>
    41f4:	d8803317 	ldw	r2,204(sp)
    41f8:	1000021e 	bne	r2,zero,4204 <___vfprintf_internal_r+0x19b0>
    41fc:	9080004c 	andi	r2,r18,1
    4200:	103c0926 	beq	r2,zero,3228 <__alt_data_end+0xff003228>
    4204:	d9003717 	ldw	r4,220(sp)
    4208:	d8801f17 	ldw	r2,124(sp)
    420c:	d9403417 	ldw	r5,208(sp)
    4210:	20c7883a 	add	r3,r4,r3
    4214:	10800044 	addi	r2,r2,1
    4218:	41000115 	stw	r4,4(r8)
    421c:	41400015 	stw	r5,0(r8)
    4220:	d8c02015 	stw	r3,128(sp)
    4224:	d8801f15 	stw	r2,124(sp)
    4228:	010001c4 	movi	r4,7
    422c:	20812116 	blt	r4,r2,46b4 <___vfprintf_internal_r+0x1e60>
    4230:	42000204 	addi	r8,r8,8
    4234:	0463c83a 	sub	r17,zero,r17
    4238:	0440730e 	bge	zero,r17,4408 <___vfprintf_internal_r+0x1bb4>
    423c:	05800404 	movi	r22,16
    4240:	b440860e 	bge	r22,r17,445c <___vfprintf_internal_r+0x1c08>
    4244:	01400074 	movhi	r5,1
    4248:	29453b84 	addi	r5,r5,5358
    424c:	d9402b15 	stw	r5,172(sp)
    4250:	070001c4 	movi	fp,7
    4254:	dcc02c17 	ldw	r19,176(sp)
    4258:	00000306 	br	4268 <___vfprintf_internal_r+0x1a14>
    425c:	42000204 	addi	r8,r8,8
    4260:	8c7ffc04 	addi	r17,r17,-16
    4264:	b440800e 	bge	r22,r17,4468 <___vfprintf_internal_r+0x1c14>
    4268:	18c00404 	addi	r3,r3,16
    426c:	10800044 	addi	r2,r2,1
    4270:	45000015 	stw	r20,0(r8)
    4274:	45800115 	stw	r22,4(r8)
    4278:	d8c02015 	stw	r3,128(sp)
    427c:	d8801f15 	stw	r2,124(sp)
    4280:	e0bff60e 	bge	fp,r2,425c <__alt_data_end+0xff00425c>
    4284:	d9801e04 	addi	r6,sp,120
    4288:	b80b883a 	mov	r5,r23
    428c:	9809883a 	mov	r4,r19
    4290:	00095f00 	call	95f0 <__sprint_r>
    4294:	103a711e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    4298:	d8c02017 	ldw	r3,128(sp)
    429c:	d8801f17 	ldw	r2,124(sp)
    42a0:	da000404 	addi	r8,sp,16
    42a4:	003fee06 	br	4260 <__alt_data_end+0xff004260>
    42a8:	00bfffc4 	movi	r2,-1
    42ac:	003a6f06 	br	2c6c <__alt_data_end+0xff002c6c>
    42b0:	008011c4 	movi	r2,71
    42b4:	1440b816 	blt	r2,r17,4598 <___vfprintf_internal_r+0x1d44>
    42b8:	04000074 	movhi	r16,1
    42bc:	84052d04 	addi	r16,r16,5300
    42c0:	00c000c4 	movi	r3,3
    42c4:	00bfdfc4 	movi	r2,-129
    42c8:	d8c02a15 	stw	r3,168(sp)
    42cc:	90a4703a 	and	r18,r18,r2
    42d0:	df002783 	ldbu	fp,158(sp)
    42d4:	d8c02e15 	stw	r3,184(sp)
    42d8:	d8002915 	stw	zero,164(sp)
    42dc:	d8003215 	stw	zero,200(sp)
    42e0:	003b2906 	br	2f88 <__alt_data_end+0xff002f88>
    42e4:	d9002d17 	ldw	r4,180(sp)
    42e8:	24c00017 	ldw	r19,0(r4)
    42ec:	21000104 	addi	r4,r4,4
    42f0:	d9002d15 	stw	r4,180(sp)
    42f4:	982dd7fa 	srai	r22,r19,31
    42f8:	b005883a 	mov	r2,r22
    42fc:	003a9f06 	br	2d7c <__alt_data_end+0xff002d7c>
    4300:	d9402d17 	ldw	r5,180(sp)
    4304:	d8c02f17 	ldw	r3,188(sp)
    4308:	28800017 	ldw	r2,0(r5)
    430c:	29400104 	addi	r5,r5,4
    4310:	d9402d15 	stw	r5,180(sp)
    4314:	10c00015 	stw	r3,0(r2)
    4318:	00398606 	br	2934 <__alt_data_end+0xff002934>
    431c:	d9402d17 	ldw	r5,180(sp)
    4320:	002d883a 	mov	r22,zero
    4324:	2cc00017 	ldw	r19,0(r5)
    4328:	29400104 	addi	r5,r5,4
    432c:	d9402d15 	stw	r5,180(sp)
    4330:	003c2306 	br	33c0 <__alt_data_end+0xff0033c0>
    4334:	d8c02d17 	ldw	r3,180(sp)
    4338:	d9002917 	ldw	r4,164(sp)
    433c:	002d883a 	mov	r22,zero
    4340:	18800104 	addi	r2,r3,4
    4344:	1cc0000b 	ldhu	r19,0(r3)
    4348:	203dc10e 	bge	r4,zero,3a50 <__alt_data_end+0xff003a50>
    434c:	003f7506 	br	4124 <__alt_data_end+0xff004124>
    4350:	04000074 	movhi	r16,1
    4354:	84052b04 	addi	r16,r16,5292
    4358:	003acc06 	br	2e8c <__alt_data_end+0xff002e8c>
    435c:	d9002c17 	ldw	r4,176(sp)
    4360:	d9801e04 	addi	r6,sp,120
    4364:	b80b883a 	mov	r5,r23
    4368:	00095f00 	call	95f0 <__sprint_r>
    436c:	103a3b1e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    4370:	dc402617 	ldw	r17,152(sp)
    4374:	d8c02017 	ldw	r3,128(sp)
    4378:	da000404 	addi	r8,sp,16
    437c:	003f9c06 	br	41f0 <__alt_data_end+0xff0041f0>
    4380:	ac400043 	ldbu	r17,1(r21)
    4384:	94800814 	ori	r18,r18,32
    4388:	ad400044 	addi	r21,r21,1
    438c:	8c403fcc 	andi	r17,r17,255
    4390:	8c40201c 	xori	r17,r17,128
    4394:	8c7fe004 	addi	r17,r17,-128
    4398:	00398f06 	br	29d8 <__alt_data_end+0xff0029d8>
    439c:	d8c02d15 	stw	r3,180(sp)
    43a0:	0039883a 	mov	fp,zero
    43a4:	003e3506 	br	3c7c <__alt_data_end+0xff003c7c>
    43a8:	d9002c17 	ldw	r4,176(sp)
    43ac:	d9801e04 	addi	r6,sp,120
    43b0:	b80b883a 	mov	r5,r23
    43b4:	00095f00 	call	95f0 <__sprint_r>
    43b8:	103a281e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    43bc:	d8c02017 	ldw	r3,128(sp)
    43c0:	da000404 	addi	r8,sp,16
    43c4:	003cd006 	br	3708 <__alt_data_end+0xff003708>
    43c8:	8009883a 	mov	r4,r16
    43cc:	da003d15 	stw	r8,244(sp)
    43d0:	00027bc0 	call	27bc <strlen>
    43d4:	d8802e15 	stw	r2,184(sp)
    43d8:	da003d17 	ldw	r8,244(sp)
    43dc:	103c340e 	bge	r2,zero,34b0 <__alt_data_end+0xff0034b0>
    43e0:	0005883a 	mov	r2,zero
    43e4:	003c3206 	br	34b0 <__alt_data_end+0xff0034b0>
    43e8:	d9002c17 	ldw	r4,176(sp)
    43ec:	d9801e04 	addi	r6,sp,120
    43f0:	b80b883a 	mov	r5,r23
    43f4:	00095f00 	call	95f0 <__sprint_r>
    43f8:	103a181e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    43fc:	d8c02017 	ldw	r3,128(sp)
    4400:	d8801f17 	ldw	r2,124(sp)
    4404:	da000404 	addi	r8,sp,16
    4408:	d9403317 	ldw	r5,204(sp)
    440c:	10800044 	addi	r2,r2,1
    4410:	44000015 	stw	r16,0(r8)
    4414:	28c7883a 	add	r3,r5,r3
    4418:	003b7d06 	br	3210 <__alt_data_end+0xff003210>
    441c:	01000074 	movhi	r4,1
    4420:	21053f84 	addi	r4,r4,5374
    4424:	d9003515 	stw	r4,212(sp)
    4428:	003b1406 	br	307c <__alt_data_end+0xff00307c>
    442c:	013fffc4 	movi	r4,-1
    4430:	003a3506 	br	2d08 <__alt_data_end+0xff002d08>
    4434:	0023883a 	mov	r17,zero
    4438:	003d9d06 	br	3ab0 <__alt_data_end+0xff003ab0>
    443c:	d9002c17 	ldw	r4,176(sp)
    4440:	d9801e04 	addi	r6,sp,120
    4444:	b80b883a 	mov	r5,r23
    4448:	00095f00 	call	95f0 <__sprint_r>
    444c:	103a031e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    4450:	d8c02017 	ldw	r3,128(sp)
    4454:	da000404 	addi	r8,sp,16
    4458:	003d9406 	br	3aac <__alt_data_end+0xff003aac>
    445c:	01000074 	movhi	r4,1
    4460:	21053b84 	addi	r4,r4,5358
    4464:	d9002b15 	stw	r4,172(sp)
    4468:	d9002b17 	ldw	r4,172(sp)
    446c:	1c47883a 	add	r3,r3,r17
    4470:	10800044 	addi	r2,r2,1
    4474:	41000015 	stw	r4,0(r8)
    4478:	44400115 	stw	r17,4(r8)
    447c:	d8c02015 	stw	r3,128(sp)
    4480:	d8801f15 	stw	r2,124(sp)
    4484:	010001c4 	movi	r4,7
    4488:	20bfd716 	blt	r4,r2,43e8 <__alt_data_end+0xff0043e8>
    448c:	42000204 	addi	r8,r8,8
    4490:	003fdd06 	br	4408 <__alt_data_end+0xff004408>
    4494:	d9002c17 	ldw	r4,176(sp)
    4498:	d9801e04 	addi	r6,sp,120
    449c:	b80b883a 	mov	r5,r23
    44a0:	00095f00 	call	95f0 <__sprint_r>
    44a4:	1039ed1e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    44a8:	d8802617 	ldw	r2,152(sp)
    44ac:	d8c02017 	ldw	r3,128(sp)
    44b0:	da000404 	addi	r8,sp,16
    44b4:	003e1006 	br	3cf8 <__alt_data_end+0xff003cf8>
    44b8:	00800044 	movi	r2,1
    44bc:	10803fcc 	andi	r2,r2,255
    44c0:	00c00044 	movi	r3,1
    44c4:	10fa3526 	beq	r2,r3,2d9c <__alt_data_end+0xff002d9c>
    44c8:	00c00084 	movi	r3,2
    44cc:	10fbcb26 	beq	r2,r3,33fc <__alt_data_end+0xff0033fc>
    44d0:	003a8f06 	br	2f10 <__alt_data_end+0xff002f10>
    44d4:	01000074 	movhi	r4,1
    44d8:	21053f84 	addi	r4,r4,5374
    44dc:	d9003515 	stw	r4,212(sp)
    44e0:	003b7606 	br	32bc <__alt_data_end+0xff0032bc>
    44e4:	d8802917 	ldw	r2,164(sp)
    44e8:	00c00184 	movi	r3,6
    44ec:	1880012e 	bgeu	r3,r2,44f4 <___vfprintf_internal_r+0x1ca0>
    44f0:	1805883a 	mov	r2,r3
    44f4:	d8802e15 	stw	r2,184(sp)
    44f8:	1000ef16 	blt	r2,zero,48b8 <___vfprintf_internal_r+0x2064>
    44fc:	04000074 	movhi	r16,1
    4500:	d8802a15 	stw	r2,168(sp)
    4504:	dcc02d15 	stw	r19,180(sp)
    4508:	d8002915 	stw	zero,164(sp)
    450c:	d8003215 	stw	zero,200(sp)
    4510:	84053904 	addi	r16,r16,5348
    4514:	0039883a 	mov	fp,zero
    4518:	003aa206 	br	2fa4 <__alt_data_end+0xff002fa4>
    451c:	0021883a 	mov	r16,zero
    4520:	003e0706 	br	3d40 <__alt_data_end+0xff003d40>
    4524:	d9002c17 	ldw	r4,176(sp)
    4528:	d9801e04 	addi	r6,sp,120
    452c:	b80b883a 	mov	r5,r23
    4530:	00095f00 	call	95f0 <__sprint_r>
    4534:	1039c91e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    4538:	d8802617 	ldw	r2,152(sp)
    453c:	d9403317 	ldw	r5,204(sp)
    4540:	d8c02017 	ldw	r3,128(sp)
    4544:	da000404 	addi	r8,sp,16
    4548:	2885c83a 	sub	r2,r5,r2
    454c:	003dfb06 	br	3d3c <__alt_data_end+0xff003d3c>
    4550:	9080004c 	andi	r2,r18,1
    4554:	103e8f1e 	bne	r2,zero,3f94 <__alt_data_end+0xff003f94>
    4558:	d8802117 	ldw	r2,132(sp)
    455c:	003e9e06 	br	3fd8 <__alt_data_end+0xff003fd8>
    4560:	1025883a 	mov	r18,r2
    4564:	0039883a 	mov	fp,zero
    4568:	00800084 	movi	r2,2
    456c:	003fd306 	br	44bc <__alt_data_end+0xff0044bc>
    4570:	07000b44 	movi	fp,45
    4574:	df002785 	stb	fp,158(sp)
    4578:	003a4006 	br	2e7c <__alt_data_end+0xff002e7c>
    457c:	00c00b44 	movi	r3,45
    4580:	d8c02785 	stb	r3,158(sp)
    4584:	d8802a15 	stw	r2,168(sp)
    4588:	dc802b17 	ldw	r18,172(sp)
    458c:	d8002915 	stw	zero,164(sp)
    4590:	07000b44 	movi	fp,45
    4594:	003a8006 	br	2f98 <__alt_data_end+0xff002f98>
    4598:	04000074 	movhi	r16,1
    459c:	84052e04 	addi	r16,r16,5304
    45a0:	003f4706 	br	42c0 <__alt_data_end+0xff0042c0>
    45a4:	d8c02d17 	ldw	r3,180(sp)
    45a8:	d9002f17 	ldw	r4,188(sp)
    45ac:	18800017 	ldw	r2,0(r3)
    45b0:	18c00104 	addi	r3,r3,4
    45b4:	d8c02d15 	stw	r3,180(sp)
    45b8:	11000015 	stw	r4,0(r2)
    45bc:	0038dd06 	br	2934 <__alt_data_end+0xff002934>
    45c0:	dd802617 	ldw	r22,152(sp)
    45c4:	00bfff44 	movi	r2,-3
    45c8:	b0801c16 	blt	r22,r2,463c <___vfprintf_internal_r+0x1de8>
    45cc:	d9402917 	ldw	r5,164(sp)
    45d0:	2d801a16 	blt	r5,r22,463c <___vfprintf_internal_r+0x1de8>
    45d4:	dd803215 	stw	r22,200(sp)
    45d8:	003e8906 	br	4000 <__alt_data_end+0xff004000>
    45dc:	01000074 	movhi	r4,1
    45e0:	21053b84 	addi	r4,r4,5358
    45e4:	d9002b15 	stw	r4,172(sp)
    45e8:	003c9106 	br	3830 <__alt_data_end+0xff003830>
    45ec:	e005883a 	mov	r2,fp
    45f0:	003e7906 	br	3fd8 <__alt_data_end+0xff003fd8>
    45f4:	d9402917 	ldw	r5,164(sp)
    45f8:	df002783 	ldbu	fp,158(sp)
    45fc:	dcc02d15 	stw	r19,180(sp)
    4600:	d9402a15 	stw	r5,168(sp)
    4604:	d9402e15 	stw	r5,184(sp)
    4608:	d8002915 	stw	zero,164(sp)
    460c:	d8003215 	stw	zero,200(sp)
    4610:	003a5d06 	br	2f88 <__alt_data_end+0xff002f88>
    4614:	9080004c 	andi	r2,r18,1
    4618:	0039883a 	mov	fp,zero
    461c:	10000426 	beq	r2,zero,4630 <___vfprintf_internal_r+0x1ddc>
    4620:	00800c04 	movi	r2,48
    4624:	dc001dc4 	addi	r16,sp,119
    4628:	d8801dc5 	stb	r2,119(sp)
    462c:	003b8006 	br	3430 <__alt_data_end+0xff003430>
    4630:	d8002e15 	stw	zero,184(sp)
    4634:	dc001e04 	addi	r16,sp,120
    4638:	003a4d06 	br	2f70 <__alt_data_end+0xff002f70>
    463c:	8c7fff84 	addi	r17,r17,-2
    4640:	b5bfffc4 	addi	r22,r22,-1
    4644:	dd802615 	stw	r22,152(sp)
    4648:	dc4022c5 	stb	r17,139(sp)
    464c:	b000bf16 	blt	r22,zero,494c <___vfprintf_internal_r+0x20f8>
    4650:	00800ac4 	movi	r2,43
    4654:	d8802305 	stb	r2,140(sp)
    4658:	00800244 	movi	r2,9
    465c:	15807016 	blt	r2,r22,4820 <___vfprintf_internal_r+0x1fcc>
    4660:	00800c04 	movi	r2,48
    4664:	b5800c04 	addi	r22,r22,48
    4668:	d8802345 	stb	r2,141(sp)
    466c:	dd802385 	stb	r22,142(sp)
    4670:	d88023c4 	addi	r2,sp,143
    4674:	df0022c4 	addi	fp,sp,139
    4678:	d8c03317 	ldw	r3,204(sp)
    467c:	1739c83a 	sub	fp,r2,fp
    4680:	d9003317 	ldw	r4,204(sp)
    4684:	e0c7883a 	add	r3,fp,r3
    4688:	df003a15 	stw	fp,232(sp)
    468c:	d8c02e15 	stw	r3,184(sp)
    4690:	00800044 	movi	r2,1
    4694:	1100b30e 	bge	r2,r4,4964 <___vfprintf_internal_r+0x2110>
    4698:	d8c02e17 	ldw	r3,184(sp)
    469c:	18c00044 	addi	r3,r3,1
    46a0:	d8c02e15 	stw	r3,184(sp)
    46a4:	1805883a 	mov	r2,r3
    46a8:	1800ac16 	blt	r3,zero,495c <___vfprintf_internal_r+0x2108>
    46ac:	d8003215 	stw	zero,200(sp)
    46b0:	003e5d06 	br	4028 <__alt_data_end+0xff004028>
    46b4:	d9002c17 	ldw	r4,176(sp)
    46b8:	d9801e04 	addi	r6,sp,120
    46bc:	b80b883a 	mov	r5,r23
    46c0:	00095f00 	call	95f0 <__sprint_r>
    46c4:	1039651e 	bne	r2,zero,2c5c <__alt_data_end+0xff002c5c>
    46c8:	dc402617 	ldw	r17,152(sp)
    46cc:	d8c02017 	ldw	r3,128(sp)
    46d0:	d8801f17 	ldw	r2,124(sp)
    46d4:	da000404 	addi	r8,sp,16
    46d8:	003ed606 	br	4234 <__alt_data_end+0xff004234>
    46dc:	582b883a 	mov	r21,r11
    46e0:	d8002915 	stw	zero,164(sp)
    46e4:	0038bd06 	br	29dc <__alt_data_end+0xff0029dc>
    46e8:	d8802917 	ldw	r2,164(sp)
    46ec:	103e071e 	bne	r2,zero,3f0c <__alt_data_end+0xff003f0c>
    46f0:	dc002915 	stw	r16,164(sp)
    46f4:	003e0506 	br	3f0c <__alt_data_end+0xff003f0c>
    46f8:	d9002917 	ldw	r4,164(sp)
    46fc:	20c00044 	addi	r3,r4,1
    4700:	003e0f06 	br	3f40 <__alt_data_end+0xff003f40>
    4704:	01400184 	movi	r5,6
    4708:	d9402915 	stw	r5,164(sp)
    470c:	003dff06 	br	3f0c <__alt_data_end+0xff003f0c>
    4710:	d8802104 	addi	r2,sp,132
    4714:	d8800315 	stw	r2,12(sp)
    4718:	d8802504 	addi	r2,sp,148
    471c:	d8800215 	stw	r2,8(sp)
    4720:	d8802604 	addi	r2,sp,152
    4724:	d8800115 	stw	r2,4(sp)
    4728:	d8802917 	ldw	r2,164(sp)
    472c:	d9403617 	ldw	r5,216(sp)
    4730:	d9002c17 	ldw	r4,176(sp)
    4734:	d8800015 	stw	r2,0(sp)
    4738:	01c000c4 	movi	r7,3
    473c:	980d883a 	mov	r6,r19
    4740:	da003d15 	stw	r8,244(sp)
    4744:	0004e780 	call	4e78 <_dtoa_r>
    4748:	d8c02917 	ldw	r3,164(sp)
    474c:	da003d17 	ldw	r8,244(sp)
    4750:	1021883a 	mov	r16,r2
    4754:	10f9883a 	add	fp,r2,r3
    4758:	81000007 	ldb	r4,0(r16)
    475c:	00800c04 	movi	r2,48
    4760:	20805e26 	beq	r4,r2,48dc <___vfprintf_internal_r+0x2088>
    4764:	d8c02617 	ldw	r3,152(sp)
    4768:	e0f9883a 	add	fp,fp,r3
    476c:	003e0a06 	br	3f98 <__alt_data_end+0xff003f98>
    4770:	00c00b44 	movi	r3,45
    4774:	24e0003c 	xorhi	r19,r4,32768
    4778:	d8c02a05 	stb	r3,168(sp)
    477c:	003de906 	br	3f24 <__alt_data_end+0xff003f24>
    4780:	d8c03217 	ldw	r3,200(sp)
    4784:	00c07a0e 	bge	zero,r3,4970 <___vfprintf_internal_r+0x211c>
    4788:	00800044 	movi	r2,1
    478c:	d9003317 	ldw	r4,204(sp)
    4790:	1105883a 	add	r2,r2,r4
    4794:	d8802e15 	stw	r2,184(sp)
    4798:	10004e16 	blt	r2,zero,48d4 <___vfprintf_internal_r+0x2080>
    479c:	044019c4 	movi	r17,103
    47a0:	003e2106 	br	4028 <__alt_data_end+0xff004028>
    47a4:	d9002917 	ldw	r4,164(sp)
    47a8:	d8802104 	addi	r2,sp,132
    47ac:	d8800315 	stw	r2,12(sp)
    47b0:	d9000015 	stw	r4,0(sp)
    47b4:	d8802504 	addi	r2,sp,148
    47b8:	d9403617 	ldw	r5,216(sp)
    47bc:	d9002c17 	ldw	r4,176(sp)
    47c0:	d8800215 	stw	r2,8(sp)
    47c4:	d8802604 	addi	r2,sp,152
    47c8:	d8800115 	stw	r2,4(sp)
    47cc:	01c000c4 	movi	r7,3
    47d0:	980d883a 	mov	r6,r19
    47d4:	da003d15 	stw	r8,244(sp)
    47d8:	0004e780 	call	4e78 <_dtoa_r>
    47dc:	d8c02917 	ldw	r3,164(sp)
    47e0:	da003d17 	ldw	r8,244(sp)
    47e4:	1021883a 	mov	r16,r2
    47e8:	00801184 	movi	r2,70
    47ec:	80f9883a 	add	fp,r16,r3
    47f0:	88bfd926 	beq	r17,r2,4758 <__alt_data_end+0xff004758>
    47f4:	003de806 	br	3f98 <__alt_data_end+0xff003f98>
    47f8:	d9002917 	ldw	r4,164(sp)
    47fc:	00c04d0e 	bge	zero,r3,4934 <___vfprintf_internal_r+0x20e0>
    4800:	2000441e 	bne	r4,zero,4914 <___vfprintf_internal_r+0x20c0>
    4804:	9480004c 	andi	r18,r18,1
    4808:	9000421e 	bne	r18,zero,4914 <___vfprintf_internal_r+0x20c0>
    480c:	1805883a 	mov	r2,r3
    4810:	18007016 	blt	r3,zero,49d4 <___vfprintf_internal_r+0x2180>
    4814:	d8c03217 	ldw	r3,200(sp)
    4818:	d8c02e15 	stw	r3,184(sp)
    481c:	003e0206 	br	4028 <__alt_data_end+0xff004028>
    4820:	df0022c4 	addi	fp,sp,139
    4824:	dc002915 	stw	r16,164(sp)
    4828:	4027883a 	mov	r19,r8
    482c:	e021883a 	mov	r16,fp
    4830:	b009883a 	mov	r4,r22
    4834:	01400284 	movi	r5,10
    4838:	0001cc40 	call	1cc4 <__modsi3>
    483c:	10800c04 	addi	r2,r2,48
    4840:	843fffc4 	addi	r16,r16,-1
    4844:	b009883a 	mov	r4,r22
    4848:	01400284 	movi	r5,10
    484c:	80800005 	stb	r2,0(r16)
    4850:	0001c400 	call	1c40 <__divsi3>
    4854:	102d883a 	mov	r22,r2
    4858:	00800244 	movi	r2,9
    485c:	15bff416 	blt	r2,r22,4830 <__alt_data_end+0xff004830>
    4860:	9811883a 	mov	r8,r19
    4864:	b0800c04 	addi	r2,r22,48
    4868:	8027883a 	mov	r19,r16
    486c:	997fffc4 	addi	r5,r19,-1
    4870:	98bfffc5 	stb	r2,-1(r19)
    4874:	dc002917 	ldw	r16,164(sp)
    4878:	2f006a2e 	bgeu	r5,fp,4a24 <___vfprintf_internal_r+0x21d0>
    487c:	d9c02384 	addi	r7,sp,142
    4880:	3ccfc83a 	sub	r7,r7,r19
    4884:	d9002344 	addi	r4,sp,141
    4888:	e1cf883a 	add	r7,fp,r7
    488c:	00000106 	br	4894 <___vfprintf_internal_r+0x2040>
    4890:	28800003 	ldbu	r2,0(r5)
    4894:	20800005 	stb	r2,0(r4)
    4898:	21000044 	addi	r4,r4,1
    489c:	29400044 	addi	r5,r5,1
    48a0:	393ffb1e 	bne	r7,r4,4890 <__alt_data_end+0xff004890>
    48a4:	d8802304 	addi	r2,sp,140
    48a8:	14c5c83a 	sub	r2,r2,r19
    48ac:	d8c02344 	addi	r3,sp,141
    48b0:	1885883a 	add	r2,r3,r2
    48b4:	003f7006 	br	4678 <__alt_data_end+0xff004678>
    48b8:	0005883a 	mov	r2,zero
    48bc:	003f0f06 	br	44fc <__alt_data_end+0xff0044fc>
    48c0:	d8c03217 	ldw	r3,200(sp)
    48c4:	18c00044 	addi	r3,r3,1
    48c8:	d8c02e15 	stw	r3,184(sp)
    48cc:	1805883a 	mov	r2,r3
    48d0:	183fb20e 	bge	r3,zero,479c <__alt_data_end+0xff00479c>
    48d4:	0005883a 	mov	r2,zero
    48d8:	003fb006 	br	479c <__alt_data_end+0xff00479c>
    48dc:	d9003617 	ldw	r4,216(sp)
    48e0:	000d883a 	mov	r6,zero
    48e4:	000f883a 	mov	r7,zero
    48e8:	980b883a 	mov	r5,r19
    48ec:	d8c03c15 	stw	r3,240(sp)
    48f0:	da003d15 	stw	r8,244(sp)
    48f4:	000d0b40 	call	d0b4 <__eqdf2>
    48f8:	d8c03c17 	ldw	r3,240(sp)
    48fc:	da003d17 	ldw	r8,244(sp)
    4900:	103f9826 	beq	r2,zero,4764 <__alt_data_end+0xff004764>
    4904:	00800044 	movi	r2,1
    4908:	10c7c83a 	sub	r3,r2,r3
    490c:	d8c02615 	stw	r3,152(sp)
    4910:	003f9506 	br	4768 <__alt_data_end+0xff004768>
    4914:	d9002917 	ldw	r4,164(sp)
    4918:	d8c03217 	ldw	r3,200(sp)
    491c:	20800044 	addi	r2,r4,1
    4920:	1885883a 	add	r2,r3,r2
    4924:	d8802e15 	stw	r2,184(sp)
    4928:	103dbf0e 	bge	r2,zero,4028 <__alt_data_end+0xff004028>
    492c:	0005883a 	mov	r2,zero
    4930:	003dbd06 	br	4028 <__alt_data_end+0xff004028>
    4934:	2000211e 	bne	r4,zero,49bc <___vfprintf_internal_r+0x2168>
    4938:	9480004c 	andi	r18,r18,1
    493c:	90001f1e 	bne	r18,zero,49bc <___vfprintf_internal_r+0x2168>
    4940:	00800044 	movi	r2,1
    4944:	d8802e15 	stw	r2,184(sp)
    4948:	003db706 	br	4028 <__alt_data_end+0xff004028>
    494c:	00800b44 	movi	r2,45
    4950:	05adc83a 	sub	r22,zero,r22
    4954:	d8802305 	stb	r2,140(sp)
    4958:	003f3f06 	br	4658 <__alt_data_end+0xff004658>
    495c:	0005883a 	mov	r2,zero
    4960:	003f5206 	br	46ac <__alt_data_end+0xff0046ac>
    4964:	90a4703a 	and	r18,r18,r2
    4968:	903f4e26 	beq	r18,zero,46a4 <__alt_data_end+0xff0046a4>
    496c:	003f4a06 	br	4698 <__alt_data_end+0xff004698>
    4970:	00800084 	movi	r2,2
    4974:	10c5c83a 	sub	r2,r2,r3
    4978:	003f8406 	br	478c <__alt_data_end+0xff00478c>
    497c:	d8802d17 	ldw	r2,180(sp)
    4980:	d9002d17 	ldw	r4,180(sp)
    4984:	ac400043 	ldbu	r17,1(r21)
    4988:	10800017 	ldw	r2,0(r2)
    498c:	582b883a 	mov	r21,r11
    4990:	d8802915 	stw	r2,164(sp)
    4994:	20800104 	addi	r2,r4,4
    4998:	d9002917 	ldw	r4,164(sp)
    499c:	d8802d15 	stw	r2,180(sp)
    49a0:	203e7a0e 	bge	r4,zero,438c <__alt_data_end+0xff00438c>
    49a4:	8c403fcc 	andi	r17,r17,255
    49a8:	00bfffc4 	movi	r2,-1
    49ac:	8c40201c 	xori	r17,r17,128
    49b0:	d8802915 	stw	r2,164(sp)
    49b4:	8c7fe004 	addi	r17,r17,-128
    49b8:	00380706 	br	29d8 <__alt_data_end+0xff0029d8>
    49bc:	d8c02917 	ldw	r3,164(sp)
    49c0:	18c00084 	addi	r3,r3,2
    49c4:	d8c02e15 	stw	r3,184(sp)
    49c8:	1805883a 	mov	r2,r3
    49cc:	183d960e 	bge	r3,zero,4028 <__alt_data_end+0xff004028>
    49d0:	003fd606 	br	492c <__alt_data_end+0xff00492c>
    49d4:	0005883a 	mov	r2,zero
    49d8:	003f8e06 	br	4814 <__alt_data_end+0xff004814>
    49dc:	9080004c 	andi	r2,r18,1
    49e0:	103f811e 	bne	r2,zero,47e8 <__alt_data_end+0xff0047e8>
    49e4:	d8802117 	ldw	r2,132(sp)
    49e8:	1405c83a 	sub	r2,r2,r16
    49ec:	d8803315 	stw	r2,204(sp)
    49f0:	b47ef326 	beq	r22,r17,45c0 <__alt_data_end+0xff0045c0>
    49f4:	dd802617 	ldw	r22,152(sp)
    49f8:	003f1106 	br	4640 <__alt_data_end+0xff004640>
    49fc:	d9c02785 	stb	r7,158(sp)
    4a00:	00390406 	br	2e14 <__alt_data_end+0xff002e14>
    4a04:	d9c02785 	stb	r7,158(sp)
    4a08:	0038d306 	br	2d58 <__alt_data_end+0xff002d58>
    4a0c:	d9c02785 	stb	r7,158(sp)
    4a10:	003a6106 	br	3398 <__alt_data_end+0xff003398>
    4a14:	d9c02785 	stb	r7,158(sp)
    4a18:	003af806 	br	35fc <__alt_data_end+0xff0035fc>
    4a1c:	0005883a 	mov	r2,zero
    4a20:	003d7e06 	br	401c <__alt_data_end+0xff00401c>
    4a24:	d8802344 	addi	r2,sp,141
    4a28:	003f1306 	br	4678 <__alt_data_end+0xff004678>
    4a2c:	d9c02785 	stb	r7,158(sp)
    4a30:	00392306 	br	2ec0 <__alt_data_end+0xff002ec0>
    4a34:	d9c02785 	stb	r7,158(sp)
    4a38:	003aa906 	br	34e0 <__alt_data_end+0xff0034e0>
    4a3c:	d9c02785 	stb	r7,158(sp)
    4a40:	003a3d06 	br	3338 <__alt_data_end+0xff003338>
    4a44:	d9c02785 	stb	r7,158(sp)
    4a48:	003aca06 	br	3574 <__alt_data_end+0xff003574>

00004a4c <__vfprintf_internal>:
    4a4c:	00800074 	movhi	r2,1
    4a50:	108cd604 	addi	r2,r2,13144
    4a54:	300f883a 	mov	r7,r6
    4a58:	280d883a 	mov	r6,r5
    4a5c:	200b883a 	mov	r5,r4
    4a60:	11000017 	ldw	r4,0(r2)
    4a64:	00028541 	jmpi	2854 <___vfprintf_internal_r>

00004a68 <__sbprintf>:
    4a68:	2880030b 	ldhu	r2,12(r5)
    4a6c:	2ac01917 	ldw	r11,100(r5)
    4a70:	2a80038b 	ldhu	r10,14(r5)
    4a74:	2a400717 	ldw	r9,28(r5)
    4a78:	2a000917 	ldw	r8,36(r5)
    4a7c:	defee204 	addi	sp,sp,-1144
    4a80:	00c10004 	movi	r3,1024
    4a84:	dc011a15 	stw	r16,1128(sp)
    4a88:	10bfff4c 	andi	r2,r2,65533
    4a8c:	2821883a 	mov	r16,r5
    4a90:	d8cb883a 	add	r5,sp,r3
    4a94:	dc811c15 	stw	r18,1136(sp)
    4a98:	dc411b15 	stw	r17,1132(sp)
    4a9c:	dfc11d15 	stw	ra,1140(sp)
    4aa0:	2025883a 	mov	r18,r4
    4aa4:	d881030d 	sth	r2,1036(sp)
    4aa8:	dac11915 	stw	r11,1124(sp)
    4aac:	da81038d 	sth	r10,1038(sp)
    4ab0:	da410715 	stw	r9,1052(sp)
    4ab4:	da010915 	stw	r8,1060(sp)
    4ab8:	dec10015 	stw	sp,1024(sp)
    4abc:	dec10415 	stw	sp,1040(sp)
    4ac0:	d8c10215 	stw	r3,1032(sp)
    4ac4:	d8c10515 	stw	r3,1044(sp)
    4ac8:	d8010615 	stw	zero,1048(sp)
    4acc:	00028540 	call	2854 <___vfprintf_internal_r>
    4ad0:	1023883a 	mov	r17,r2
    4ad4:	10000416 	blt	r2,zero,4ae8 <__sbprintf+0x80>
    4ad8:	d9410004 	addi	r5,sp,1024
    4adc:	9009883a 	mov	r4,r18
    4ae0:	000671c0 	call	671c <_fflush_r>
    4ae4:	10000d1e 	bne	r2,zero,4b1c <__sbprintf+0xb4>
    4ae8:	d881030b 	ldhu	r2,1036(sp)
    4aec:	1080100c 	andi	r2,r2,64
    4af0:	10000326 	beq	r2,zero,4b00 <__sbprintf+0x98>
    4af4:	8080030b 	ldhu	r2,12(r16)
    4af8:	10801014 	ori	r2,r2,64
    4afc:	8080030d 	sth	r2,12(r16)
    4b00:	8805883a 	mov	r2,r17
    4b04:	dfc11d17 	ldw	ra,1140(sp)
    4b08:	dc811c17 	ldw	r18,1136(sp)
    4b0c:	dc411b17 	ldw	r17,1132(sp)
    4b10:	dc011a17 	ldw	r16,1128(sp)
    4b14:	dec11e04 	addi	sp,sp,1144
    4b18:	f800283a 	ret
    4b1c:	047fffc4 	movi	r17,-1
    4b20:	003ff106 	br	4ae8 <__alt_data_end+0xff004ae8>

00004b24 <__swsetup_r>:
    4b24:	00800074 	movhi	r2,1
    4b28:	defffd04 	addi	sp,sp,-12
    4b2c:	108cd604 	addi	r2,r2,13144
    4b30:	dc400115 	stw	r17,4(sp)
    4b34:	2023883a 	mov	r17,r4
    4b38:	11000017 	ldw	r4,0(r2)
    4b3c:	dc000015 	stw	r16,0(sp)
    4b40:	dfc00215 	stw	ra,8(sp)
    4b44:	2821883a 	mov	r16,r5
    4b48:	20000226 	beq	r4,zero,4b54 <__swsetup_r+0x30>
    4b4c:	20800e17 	ldw	r2,56(r4)
    4b50:	10003126 	beq	r2,zero,4c18 <__swsetup_r+0xf4>
    4b54:	8080030b 	ldhu	r2,12(r16)
    4b58:	10c0020c 	andi	r3,r2,8
    4b5c:	1009883a 	mov	r4,r2
    4b60:	18000f26 	beq	r3,zero,4ba0 <__swsetup_r+0x7c>
    4b64:	80c00417 	ldw	r3,16(r16)
    4b68:	18001526 	beq	r3,zero,4bc0 <__swsetup_r+0x9c>
    4b6c:	1100004c 	andi	r4,r2,1
    4b70:	20001c1e 	bne	r4,zero,4be4 <__swsetup_r+0xc0>
    4b74:	1080008c 	andi	r2,r2,2
    4b78:	1000291e 	bne	r2,zero,4c20 <__swsetup_r+0xfc>
    4b7c:	80800517 	ldw	r2,20(r16)
    4b80:	80800215 	stw	r2,8(r16)
    4b84:	18001c26 	beq	r3,zero,4bf8 <__swsetup_r+0xd4>
    4b88:	0005883a 	mov	r2,zero
    4b8c:	dfc00217 	ldw	ra,8(sp)
    4b90:	dc400117 	ldw	r17,4(sp)
    4b94:	dc000017 	ldw	r16,0(sp)
    4b98:	dec00304 	addi	sp,sp,12
    4b9c:	f800283a 	ret
    4ba0:	2080040c 	andi	r2,r4,16
    4ba4:	10002e26 	beq	r2,zero,4c60 <__swsetup_r+0x13c>
    4ba8:	2080010c 	andi	r2,r4,4
    4bac:	10001e1e 	bne	r2,zero,4c28 <__swsetup_r+0x104>
    4bb0:	80c00417 	ldw	r3,16(r16)
    4bb4:	20800214 	ori	r2,r4,8
    4bb8:	8080030d 	sth	r2,12(r16)
    4bbc:	183feb1e 	bne	r3,zero,4b6c <__alt_data_end+0xff004b6c>
    4bc0:	1100a00c 	andi	r4,r2,640
    4bc4:	01408004 	movi	r5,512
    4bc8:	217fe826 	beq	r4,r5,4b6c <__alt_data_end+0xff004b6c>
    4bcc:	800b883a 	mov	r5,r16
    4bd0:	8809883a 	mov	r4,r17
    4bd4:	000769c0 	call	769c <__smakebuf_r>
    4bd8:	8080030b 	ldhu	r2,12(r16)
    4bdc:	80c00417 	ldw	r3,16(r16)
    4be0:	003fe206 	br	4b6c <__alt_data_end+0xff004b6c>
    4be4:	80800517 	ldw	r2,20(r16)
    4be8:	80000215 	stw	zero,8(r16)
    4bec:	0085c83a 	sub	r2,zero,r2
    4bf0:	80800615 	stw	r2,24(r16)
    4bf4:	183fe41e 	bne	r3,zero,4b88 <__alt_data_end+0xff004b88>
    4bf8:	80c0030b 	ldhu	r3,12(r16)
    4bfc:	0005883a 	mov	r2,zero
    4c00:	1900200c 	andi	r4,r3,128
    4c04:	203fe126 	beq	r4,zero,4b8c <__alt_data_end+0xff004b8c>
    4c08:	18c01014 	ori	r3,r3,64
    4c0c:	80c0030d 	sth	r3,12(r16)
    4c10:	00bfffc4 	movi	r2,-1
    4c14:	003fdd06 	br	4b8c <__alt_data_end+0xff004b8c>
    4c18:	0006af80 	call	6af8 <__sinit>
    4c1c:	003fcd06 	br	4b54 <__alt_data_end+0xff004b54>
    4c20:	0005883a 	mov	r2,zero
    4c24:	003fd606 	br	4b80 <__alt_data_end+0xff004b80>
    4c28:	81400c17 	ldw	r5,48(r16)
    4c2c:	28000626 	beq	r5,zero,4c48 <__swsetup_r+0x124>
    4c30:	80801004 	addi	r2,r16,64
    4c34:	28800326 	beq	r5,r2,4c44 <__swsetup_r+0x120>
    4c38:	8809883a 	mov	r4,r17
    4c3c:	0006c6c0 	call	6c6c <_free_r>
    4c40:	8100030b 	ldhu	r4,12(r16)
    4c44:	80000c15 	stw	zero,48(r16)
    4c48:	80c00417 	ldw	r3,16(r16)
    4c4c:	00bff6c4 	movi	r2,-37
    4c50:	1108703a 	and	r4,r2,r4
    4c54:	80000115 	stw	zero,4(r16)
    4c58:	80c00015 	stw	r3,0(r16)
    4c5c:	003fd506 	br	4bb4 <__alt_data_end+0xff004bb4>
    4c60:	00800244 	movi	r2,9
    4c64:	88800015 	stw	r2,0(r17)
    4c68:	20801014 	ori	r2,r4,64
    4c6c:	8080030d 	sth	r2,12(r16)
    4c70:	00bfffc4 	movi	r2,-1
    4c74:	003fc506 	br	4b8c <__alt_data_end+0xff004b8c>

00004c78 <quorem>:
    4c78:	defff704 	addi	sp,sp,-36
    4c7c:	dc800215 	stw	r18,8(sp)
    4c80:	20800417 	ldw	r2,16(r4)
    4c84:	2c800417 	ldw	r18,16(r5)
    4c88:	dfc00815 	stw	ra,32(sp)
    4c8c:	ddc00715 	stw	r23,28(sp)
    4c90:	dd800615 	stw	r22,24(sp)
    4c94:	dd400515 	stw	r21,20(sp)
    4c98:	dd000415 	stw	r20,16(sp)
    4c9c:	dcc00315 	stw	r19,12(sp)
    4ca0:	dc400115 	stw	r17,4(sp)
    4ca4:	dc000015 	stw	r16,0(sp)
    4ca8:	14807116 	blt	r2,r18,4e70 <quorem+0x1f8>
    4cac:	94bfffc4 	addi	r18,r18,-1
    4cb0:	94ad883a 	add	r22,r18,r18
    4cb4:	b5ad883a 	add	r22,r22,r22
    4cb8:	2c400504 	addi	r17,r5,20
    4cbc:	8da9883a 	add	r20,r17,r22
    4cc0:	25400504 	addi	r21,r4,20
    4cc4:	282f883a 	mov	r23,r5
    4cc8:	adad883a 	add	r22,r21,r22
    4ccc:	a1400017 	ldw	r5,0(r20)
    4cd0:	2021883a 	mov	r16,r4
    4cd4:	b1000017 	ldw	r4,0(r22)
    4cd8:	29400044 	addi	r5,r5,1
    4cdc:	0001d380 	call	1d38 <__udivsi3>
    4ce0:	1027883a 	mov	r19,r2
    4ce4:	10002c26 	beq	r2,zero,4d98 <quorem+0x120>
    4ce8:	a813883a 	mov	r9,r21
    4cec:	880b883a 	mov	r5,r17
    4cf0:	0009883a 	mov	r4,zero
    4cf4:	000d883a 	mov	r6,zero
    4cf8:	2a000017 	ldw	r8,0(r5)
    4cfc:	49c00017 	ldw	r7,0(r9)
    4d00:	29400104 	addi	r5,r5,4
    4d04:	40bfffcc 	andi	r2,r8,65535
    4d08:	14c5383a 	mul	r2,r2,r19
    4d0c:	4010d43a 	srli	r8,r8,16
    4d10:	38ffffcc 	andi	r3,r7,65535
    4d14:	1105883a 	add	r2,r2,r4
    4d18:	1008d43a 	srli	r4,r2,16
    4d1c:	44d1383a 	mul	r8,r8,r19
    4d20:	198d883a 	add	r6,r3,r6
    4d24:	10ffffcc 	andi	r3,r2,65535
    4d28:	30c7c83a 	sub	r3,r6,r3
    4d2c:	380ed43a 	srli	r7,r7,16
    4d30:	4105883a 	add	r2,r8,r4
    4d34:	180dd43a 	srai	r6,r3,16
    4d38:	113fffcc 	andi	r4,r2,65535
    4d3c:	390fc83a 	sub	r7,r7,r4
    4d40:	398d883a 	add	r6,r7,r6
    4d44:	300e943a 	slli	r7,r6,16
    4d48:	18ffffcc 	andi	r3,r3,65535
    4d4c:	1008d43a 	srli	r4,r2,16
    4d50:	38ceb03a 	or	r7,r7,r3
    4d54:	49c00015 	stw	r7,0(r9)
    4d58:	300dd43a 	srai	r6,r6,16
    4d5c:	4a400104 	addi	r9,r9,4
    4d60:	a17fe52e 	bgeu	r20,r5,4cf8 <__alt_data_end+0xff004cf8>
    4d64:	b0800017 	ldw	r2,0(r22)
    4d68:	10000b1e 	bne	r2,zero,4d98 <quorem+0x120>
    4d6c:	b0bfff04 	addi	r2,r22,-4
    4d70:	a880082e 	bgeu	r21,r2,4d94 <quorem+0x11c>
    4d74:	b0ffff17 	ldw	r3,-4(r22)
    4d78:	18000326 	beq	r3,zero,4d88 <quorem+0x110>
    4d7c:	00000506 	br	4d94 <quorem+0x11c>
    4d80:	10c00017 	ldw	r3,0(r2)
    4d84:	1800031e 	bne	r3,zero,4d94 <quorem+0x11c>
    4d88:	10bfff04 	addi	r2,r2,-4
    4d8c:	94bfffc4 	addi	r18,r18,-1
    4d90:	a8bffb36 	bltu	r21,r2,4d80 <__alt_data_end+0xff004d80>
    4d94:	84800415 	stw	r18,16(r16)
    4d98:	b80b883a 	mov	r5,r23
    4d9c:	8009883a 	mov	r4,r16
    4da0:	00085d00 	call	85d0 <__mcmp>
    4da4:	10002616 	blt	r2,zero,4e40 <quorem+0x1c8>
    4da8:	9cc00044 	addi	r19,r19,1
    4dac:	a805883a 	mov	r2,r21
    4db0:	000b883a 	mov	r5,zero
    4db4:	11000017 	ldw	r4,0(r2)
    4db8:	89800017 	ldw	r6,0(r17)
    4dbc:	10800104 	addi	r2,r2,4
    4dc0:	20ffffcc 	andi	r3,r4,65535
    4dc4:	194b883a 	add	r5,r3,r5
    4dc8:	30ffffcc 	andi	r3,r6,65535
    4dcc:	28c7c83a 	sub	r3,r5,r3
    4dd0:	300cd43a 	srli	r6,r6,16
    4dd4:	2008d43a 	srli	r4,r4,16
    4dd8:	180bd43a 	srai	r5,r3,16
    4ddc:	18ffffcc 	andi	r3,r3,65535
    4de0:	2189c83a 	sub	r4,r4,r6
    4de4:	2149883a 	add	r4,r4,r5
    4de8:	200c943a 	slli	r6,r4,16
    4dec:	8c400104 	addi	r17,r17,4
    4df0:	200bd43a 	srai	r5,r4,16
    4df4:	30c6b03a 	or	r3,r6,r3
    4df8:	10ffff15 	stw	r3,-4(r2)
    4dfc:	a47fed2e 	bgeu	r20,r17,4db4 <__alt_data_end+0xff004db4>
    4e00:	9485883a 	add	r2,r18,r18
    4e04:	1085883a 	add	r2,r2,r2
    4e08:	a887883a 	add	r3,r21,r2
    4e0c:	18800017 	ldw	r2,0(r3)
    4e10:	10000b1e 	bne	r2,zero,4e40 <quorem+0x1c8>
    4e14:	18bfff04 	addi	r2,r3,-4
    4e18:	a880082e 	bgeu	r21,r2,4e3c <quorem+0x1c4>
    4e1c:	18ffff17 	ldw	r3,-4(r3)
    4e20:	18000326 	beq	r3,zero,4e30 <quorem+0x1b8>
    4e24:	00000506 	br	4e3c <quorem+0x1c4>
    4e28:	10c00017 	ldw	r3,0(r2)
    4e2c:	1800031e 	bne	r3,zero,4e3c <quorem+0x1c4>
    4e30:	10bfff04 	addi	r2,r2,-4
    4e34:	94bfffc4 	addi	r18,r18,-1
    4e38:	a8bffb36 	bltu	r21,r2,4e28 <__alt_data_end+0xff004e28>
    4e3c:	84800415 	stw	r18,16(r16)
    4e40:	9805883a 	mov	r2,r19
    4e44:	dfc00817 	ldw	ra,32(sp)
    4e48:	ddc00717 	ldw	r23,28(sp)
    4e4c:	dd800617 	ldw	r22,24(sp)
    4e50:	dd400517 	ldw	r21,20(sp)
    4e54:	dd000417 	ldw	r20,16(sp)
    4e58:	dcc00317 	ldw	r19,12(sp)
    4e5c:	dc800217 	ldw	r18,8(sp)
    4e60:	dc400117 	ldw	r17,4(sp)
    4e64:	dc000017 	ldw	r16,0(sp)
    4e68:	dec00904 	addi	sp,sp,36
    4e6c:	f800283a 	ret
    4e70:	0005883a 	mov	r2,zero
    4e74:	003ff306 	br	4e44 <__alt_data_end+0xff004e44>

00004e78 <_dtoa_r>:
    4e78:	20801017 	ldw	r2,64(r4)
    4e7c:	deffde04 	addi	sp,sp,-136
    4e80:	df002015 	stw	fp,128(sp)
    4e84:	dcc01b15 	stw	r19,108(sp)
    4e88:	dc801a15 	stw	r18,104(sp)
    4e8c:	dc401915 	stw	r17,100(sp)
    4e90:	dc001815 	stw	r16,96(sp)
    4e94:	dfc02115 	stw	ra,132(sp)
    4e98:	ddc01f15 	stw	r23,124(sp)
    4e9c:	dd801e15 	stw	r22,120(sp)
    4ea0:	dd401d15 	stw	r21,116(sp)
    4ea4:	dd001c15 	stw	r20,112(sp)
    4ea8:	d9c00315 	stw	r7,12(sp)
    4eac:	2039883a 	mov	fp,r4
    4eb0:	3023883a 	mov	r17,r6
    4eb4:	2825883a 	mov	r18,r5
    4eb8:	dc002417 	ldw	r16,144(sp)
    4ebc:	3027883a 	mov	r19,r6
    4ec0:	10000826 	beq	r2,zero,4ee4 <_dtoa_r+0x6c>
    4ec4:	21801117 	ldw	r6,68(r4)
    4ec8:	00c00044 	movi	r3,1
    4ecc:	100b883a 	mov	r5,r2
    4ed0:	1986983a 	sll	r3,r3,r6
    4ed4:	11800115 	stw	r6,4(r2)
    4ed8:	10c00215 	stw	r3,8(r2)
    4edc:	0007db00 	call	7db0 <_Bfree>
    4ee0:	e0001015 	stw	zero,64(fp)
    4ee4:	88002e16 	blt	r17,zero,4fa0 <_dtoa_r+0x128>
    4ee8:	80000015 	stw	zero,0(r16)
    4eec:	889ffc2c 	andhi	r2,r17,32752
    4ef0:	00dffc34 	movhi	r3,32752
    4ef4:	10c01c26 	beq	r2,r3,4f68 <_dtoa_r+0xf0>
    4ef8:	000d883a 	mov	r6,zero
    4efc:	000f883a 	mov	r7,zero
    4f00:	9009883a 	mov	r4,r18
    4f04:	980b883a 	mov	r5,r19
    4f08:	000d0b40 	call	d0b4 <__eqdf2>
    4f0c:	10002b1e 	bne	r2,zero,4fbc <_dtoa_r+0x144>
    4f10:	d9c02317 	ldw	r7,140(sp)
    4f14:	00800044 	movi	r2,1
    4f18:	38800015 	stw	r2,0(r7)
    4f1c:	d8802517 	ldw	r2,148(sp)
    4f20:	10019e26 	beq	r2,zero,559c <_dtoa_r+0x724>
    4f24:	d8c02517 	ldw	r3,148(sp)
    4f28:	00800074 	movhi	r2,1
    4f2c:	10853b44 	addi	r2,r2,5357
    4f30:	18800015 	stw	r2,0(r3)
    4f34:	10bfffc4 	addi	r2,r2,-1
    4f38:	dfc02117 	ldw	ra,132(sp)
    4f3c:	df002017 	ldw	fp,128(sp)
    4f40:	ddc01f17 	ldw	r23,124(sp)
    4f44:	dd801e17 	ldw	r22,120(sp)
    4f48:	dd401d17 	ldw	r21,116(sp)
    4f4c:	dd001c17 	ldw	r20,112(sp)
    4f50:	dcc01b17 	ldw	r19,108(sp)
    4f54:	dc801a17 	ldw	r18,104(sp)
    4f58:	dc401917 	ldw	r17,100(sp)
    4f5c:	dc001817 	ldw	r16,96(sp)
    4f60:	dec02204 	addi	sp,sp,136
    4f64:	f800283a 	ret
    4f68:	d8c02317 	ldw	r3,140(sp)
    4f6c:	0089c3c4 	movi	r2,9999
    4f70:	18800015 	stw	r2,0(r3)
    4f74:	90017726 	beq	r18,zero,5554 <_dtoa_r+0x6dc>
    4f78:	00800074 	movhi	r2,1
    4f7c:	10854704 	addi	r2,r2,5404
    4f80:	d9002517 	ldw	r4,148(sp)
    4f84:	203fec26 	beq	r4,zero,4f38 <__alt_data_end+0xff004f38>
    4f88:	10c000c7 	ldb	r3,3(r2)
    4f8c:	1801781e 	bne	r3,zero,5570 <_dtoa_r+0x6f8>
    4f90:	10c000c4 	addi	r3,r2,3
    4f94:	d9802517 	ldw	r6,148(sp)
    4f98:	30c00015 	stw	r3,0(r6)
    4f9c:	003fe606 	br	4f38 <__alt_data_end+0xff004f38>
    4fa0:	04e00034 	movhi	r19,32768
    4fa4:	9cffffc4 	addi	r19,r19,-1
    4fa8:	00800044 	movi	r2,1
    4fac:	8ce6703a 	and	r19,r17,r19
    4fb0:	80800015 	stw	r2,0(r16)
    4fb4:	9823883a 	mov	r17,r19
    4fb8:	003fcc06 	br	4eec <__alt_data_end+0xff004eec>
    4fbc:	d8800204 	addi	r2,sp,8
    4fc0:	d8800015 	stw	r2,0(sp)
    4fc4:	d9c00104 	addi	r7,sp,4
    4fc8:	900b883a 	mov	r5,r18
    4fcc:	980d883a 	mov	r6,r19
    4fd0:	e009883a 	mov	r4,fp
    4fd4:	8820d53a 	srli	r16,r17,20
    4fd8:	000899c0 	call	899c <__d2b>
    4fdc:	d8800915 	stw	r2,36(sp)
    4fe0:	8001651e 	bne	r16,zero,5578 <_dtoa_r+0x700>
    4fe4:	dd800217 	ldw	r22,8(sp)
    4fe8:	dc000117 	ldw	r16,4(sp)
    4fec:	00800804 	movi	r2,32
    4ff0:	b421883a 	add	r16,r22,r16
    4ff4:	80c10c84 	addi	r3,r16,1074
    4ff8:	10c2d10e 	bge	r2,r3,5b40 <_dtoa_r+0xcc8>
    4ffc:	00801004 	movi	r2,64
    5000:	81010484 	addi	r4,r16,1042
    5004:	10c7c83a 	sub	r3,r2,r3
    5008:	9108d83a 	srl	r4,r18,r4
    500c:	88e2983a 	sll	r17,r17,r3
    5010:	2448b03a 	or	r4,r4,r17
    5014:	000e47c0 	call	e47c <__floatunsidf>
    5018:	017f8434 	movhi	r5,65040
    501c:	01800044 	movi	r6,1
    5020:	1009883a 	mov	r4,r2
    5024:	194b883a 	add	r5,r3,r5
    5028:	843fffc4 	addi	r16,r16,-1
    502c:	d9801115 	stw	r6,68(sp)
    5030:	000d883a 	mov	r6,zero
    5034:	01cffe34 	movhi	r7,16376
    5038:	000da240 	call	da24 <__subdf3>
    503c:	0198dbf4 	movhi	r6,25455
    5040:	01cff4f4 	movhi	r7,16339
    5044:	3190d844 	addi	r6,r6,17249
    5048:	39e1e9c4 	addi	r7,r7,-30809
    504c:	1009883a 	mov	r4,r2
    5050:	180b883a 	mov	r5,r3
    5054:	000d30c0 	call	d30c <__muldf3>
    5058:	01a2d874 	movhi	r6,35681
    505c:	01cff1f4 	movhi	r7,16327
    5060:	31b22cc4 	addi	r6,r6,-14157
    5064:	39e28a04 	addi	r7,r7,-30168
    5068:	180b883a 	mov	r5,r3
    506c:	1009883a 	mov	r4,r2
    5070:	000bf200 	call	bf20 <__adddf3>
    5074:	8009883a 	mov	r4,r16
    5078:	1029883a 	mov	r20,r2
    507c:	1823883a 	mov	r17,r3
    5080:	000e3a00 	call	e3a0 <__floatsidf>
    5084:	019427f4 	movhi	r6,20639
    5088:	01cff4f4 	movhi	r7,16339
    508c:	319e7ec4 	addi	r6,r6,31227
    5090:	39d104c4 	addi	r7,r7,17427
    5094:	1009883a 	mov	r4,r2
    5098:	180b883a 	mov	r5,r3
    509c:	000d30c0 	call	d30c <__muldf3>
    50a0:	100d883a 	mov	r6,r2
    50a4:	180f883a 	mov	r7,r3
    50a8:	a009883a 	mov	r4,r20
    50ac:	880b883a 	mov	r5,r17
    50b0:	000bf200 	call	bf20 <__adddf3>
    50b4:	1009883a 	mov	r4,r2
    50b8:	180b883a 	mov	r5,r3
    50bc:	1029883a 	mov	r20,r2
    50c0:	1823883a 	mov	r17,r3
    50c4:	000e3200 	call	e320 <__fixdfsi>
    50c8:	000d883a 	mov	r6,zero
    50cc:	000f883a 	mov	r7,zero
    50d0:	a009883a 	mov	r4,r20
    50d4:	880b883a 	mov	r5,r17
    50d8:	d8800515 	stw	r2,20(sp)
    50dc:	000d2180 	call	d218 <__ledf2>
    50e0:	10028716 	blt	r2,zero,5b00 <_dtoa_r+0xc88>
    50e4:	d8c00517 	ldw	r3,20(sp)
    50e8:	00800584 	movi	r2,22
    50ec:	10c27536 	bltu	r2,r3,5ac4 <_dtoa_r+0xc4c>
    50f0:	180490fa 	slli	r2,r3,3
    50f4:	00c00074 	movhi	r3,1
    50f8:	18c56304 	addi	r3,r3,5516
    50fc:	1885883a 	add	r2,r3,r2
    5100:	11000017 	ldw	r4,0(r2)
    5104:	11400117 	ldw	r5,4(r2)
    5108:	900d883a 	mov	r6,r18
    510c:	980f883a 	mov	r7,r19
    5110:	000d13c0 	call	d13c <__gedf2>
    5114:	00828d0e 	bge	zero,r2,5b4c <_dtoa_r+0xcd4>
    5118:	d9000517 	ldw	r4,20(sp)
    511c:	d8000e15 	stw	zero,56(sp)
    5120:	213fffc4 	addi	r4,r4,-1
    5124:	d9000515 	stw	r4,20(sp)
    5128:	b42dc83a 	sub	r22,r22,r16
    512c:	b5bfffc4 	addi	r22,r22,-1
    5130:	b0026f16 	blt	r22,zero,5af0 <_dtoa_r+0xc78>
    5134:	d8000815 	stw	zero,32(sp)
    5138:	d9c00517 	ldw	r7,20(sp)
    513c:	38026416 	blt	r7,zero,5ad0 <_dtoa_r+0xc58>
    5140:	b1ed883a 	add	r22,r22,r7
    5144:	d9c00d15 	stw	r7,52(sp)
    5148:	d8000a15 	stw	zero,40(sp)
    514c:	d9800317 	ldw	r6,12(sp)
    5150:	00800244 	movi	r2,9
    5154:	11811436 	bltu	r2,r6,55a8 <_dtoa_r+0x730>
    5158:	00800144 	movi	r2,5
    515c:	1184e10e 	bge	r2,r6,64e4 <_dtoa_r+0x166c>
    5160:	31bfff04 	addi	r6,r6,-4
    5164:	d9800315 	stw	r6,12(sp)
    5168:	0023883a 	mov	r17,zero
    516c:	d9800317 	ldw	r6,12(sp)
    5170:	008000c4 	movi	r2,3
    5174:	30836726 	beq	r6,r2,5f14 <_dtoa_r+0x109c>
    5178:	1183410e 	bge	r2,r6,5e80 <_dtoa_r+0x1008>
    517c:	d9c00317 	ldw	r7,12(sp)
    5180:	00800104 	movi	r2,4
    5184:	38827c26 	beq	r7,r2,5b78 <_dtoa_r+0xd00>
    5188:	00800144 	movi	r2,5
    518c:	3884c41e 	bne	r7,r2,64a0 <_dtoa_r+0x1628>
    5190:	00800044 	movi	r2,1
    5194:	d8800b15 	stw	r2,44(sp)
    5198:	d8c00517 	ldw	r3,20(sp)
    519c:	d9002217 	ldw	r4,136(sp)
    51a0:	1907883a 	add	r3,r3,r4
    51a4:	19800044 	addi	r6,r3,1
    51a8:	d8c00c15 	stw	r3,48(sp)
    51ac:	d9800615 	stw	r6,24(sp)
    51b0:	0183a40e 	bge	zero,r6,6044 <_dtoa_r+0x11cc>
    51b4:	d9800617 	ldw	r6,24(sp)
    51b8:	3021883a 	mov	r16,r6
    51bc:	e0001115 	stw	zero,68(fp)
    51c0:	008005c4 	movi	r2,23
    51c4:	1184c92e 	bgeu	r2,r6,64ec <_dtoa_r+0x1674>
    51c8:	00c00044 	movi	r3,1
    51cc:	00800104 	movi	r2,4
    51d0:	1085883a 	add	r2,r2,r2
    51d4:	11000504 	addi	r4,r2,20
    51d8:	180b883a 	mov	r5,r3
    51dc:	18c00044 	addi	r3,r3,1
    51e0:	313ffb2e 	bgeu	r6,r4,51d0 <__alt_data_end+0xff0051d0>
    51e4:	e1401115 	stw	r5,68(fp)
    51e8:	e009883a 	mov	r4,fp
    51ec:	0007d080 	call	7d08 <_Balloc>
    51f0:	d8800715 	stw	r2,28(sp)
    51f4:	e0801015 	stw	r2,64(fp)
    51f8:	00800384 	movi	r2,14
    51fc:	1400f736 	bltu	r2,r16,55dc <_dtoa_r+0x764>
    5200:	8800f626 	beq	r17,zero,55dc <_dtoa_r+0x764>
    5204:	d9c00517 	ldw	r7,20(sp)
    5208:	01c39a0e 	bge	zero,r7,6074 <_dtoa_r+0x11fc>
    520c:	388003cc 	andi	r2,r7,15
    5210:	100490fa 	slli	r2,r2,3
    5214:	382bd13a 	srai	r21,r7,4
    5218:	00c00074 	movhi	r3,1
    521c:	18c56304 	addi	r3,r3,5516
    5220:	1885883a 	add	r2,r3,r2
    5224:	a8c0040c 	andi	r3,r21,16
    5228:	12400017 	ldw	r9,0(r2)
    522c:	12000117 	ldw	r8,4(r2)
    5230:	18037926 	beq	r3,zero,6018 <_dtoa_r+0x11a0>
    5234:	00800074 	movhi	r2,1
    5238:	10855904 	addi	r2,r2,5476
    523c:	11800817 	ldw	r6,32(r2)
    5240:	11c00917 	ldw	r7,36(r2)
    5244:	9009883a 	mov	r4,r18
    5248:	980b883a 	mov	r5,r19
    524c:	da001715 	stw	r8,92(sp)
    5250:	da401615 	stw	r9,88(sp)
    5254:	000c7cc0 	call	c7cc <__divdf3>
    5258:	da001717 	ldw	r8,92(sp)
    525c:	da401617 	ldw	r9,88(sp)
    5260:	ad4003cc 	andi	r21,r21,15
    5264:	040000c4 	movi	r16,3
    5268:	1023883a 	mov	r17,r2
    526c:	1829883a 	mov	r20,r3
    5270:	a8001126 	beq	r21,zero,52b8 <_dtoa_r+0x440>
    5274:	05c00074 	movhi	r23,1
    5278:	bdc55904 	addi	r23,r23,5476
    527c:	4805883a 	mov	r2,r9
    5280:	4007883a 	mov	r3,r8
    5284:	a980004c 	andi	r6,r21,1
    5288:	1009883a 	mov	r4,r2
    528c:	a82bd07a 	srai	r21,r21,1
    5290:	180b883a 	mov	r5,r3
    5294:	30000426 	beq	r6,zero,52a8 <_dtoa_r+0x430>
    5298:	b9800017 	ldw	r6,0(r23)
    529c:	b9c00117 	ldw	r7,4(r23)
    52a0:	84000044 	addi	r16,r16,1
    52a4:	000d30c0 	call	d30c <__muldf3>
    52a8:	bdc00204 	addi	r23,r23,8
    52ac:	a83ff51e 	bne	r21,zero,5284 <__alt_data_end+0xff005284>
    52b0:	1013883a 	mov	r9,r2
    52b4:	1811883a 	mov	r8,r3
    52b8:	480d883a 	mov	r6,r9
    52bc:	400f883a 	mov	r7,r8
    52c0:	8809883a 	mov	r4,r17
    52c4:	a00b883a 	mov	r5,r20
    52c8:	000c7cc0 	call	c7cc <__divdf3>
    52cc:	d8800f15 	stw	r2,60(sp)
    52d0:	d8c01015 	stw	r3,64(sp)
    52d4:	d8c00e17 	ldw	r3,56(sp)
    52d8:	18000626 	beq	r3,zero,52f4 <_dtoa_r+0x47c>
    52dc:	d9000f17 	ldw	r4,60(sp)
    52e0:	d9401017 	ldw	r5,64(sp)
    52e4:	000d883a 	mov	r6,zero
    52e8:	01cffc34 	movhi	r7,16368
    52ec:	000d2180 	call	d218 <__ledf2>
    52f0:	10040b16 	blt	r2,zero,6320 <_dtoa_r+0x14a8>
    52f4:	8009883a 	mov	r4,r16
    52f8:	000e3a00 	call	e3a0 <__floatsidf>
    52fc:	d9800f17 	ldw	r6,60(sp)
    5300:	d9c01017 	ldw	r7,64(sp)
    5304:	1009883a 	mov	r4,r2
    5308:	180b883a 	mov	r5,r3
    530c:	000d30c0 	call	d30c <__muldf3>
    5310:	000d883a 	mov	r6,zero
    5314:	01d00734 	movhi	r7,16412
    5318:	1009883a 	mov	r4,r2
    531c:	180b883a 	mov	r5,r3
    5320:	000bf200 	call	bf20 <__adddf3>
    5324:	1021883a 	mov	r16,r2
    5328:	d8800617 	ldw	r2,24(sp)
    532c:	047f3034 	movhi	r17,64704
    5330:	1c63883a 	add	r17,r3,r17
    5334:	10031826 	beq	r2,zero,5f98 <_dtoa_r+0x1120>
    5338:	d8c00517 	ldw	r3,20(sp)
    533c:	db000617 	ldw	r12,24(sp)
    5340:	d8c01315 	stw	r3,76(sp)
    5344:	d9000b17 	ldw	r4,44(sp)
    5348:	20038f26 	beq	r4,zero,6188 <_dtoa_r+0x1310>
    534c:	60bfffc4 	addi	r2,r12,-1
    5350:	100490fa 	slli	r2,r2,3
    5354:	00c00074 	movhi	r3,1
    5358:	18c56304 	addi	r3,r3,5516
    535c:	1885883a 	add	r2,r3,r2
    5360:	11800017 	ldw	r6,0(r2)
    5364:	11c00117 	ldw	r7,4(r2)
    5368:	d8800717 	ldw	r2,28(sp)
    536c:	0009883a 	mov	r4,zero
    5370:	014ff834 	movhi	r5,16352
    5374:	db001615 	stw	r12,88(sp)
    5378:	15c00044 	addi	r23,r2,1
    537c:	000c7cc0 	call	c7cc <__divdf3>
    5380:	800d883a 	mov	r6,r16
    5384:	880f883a 	mov	r7,r17
    5388:	1009883a 	mov	r4,r2
    538c:	180b883a 	mov	r5,r3
    5390:	000da240 	call	da24 <__subdf3>
    5394:	d9401017 	ldw	r5,64(sp)
    5398:	d9000f17 	ldw	r4,60(sp)
    539c:	102b883a 	mov	r21,r2
    53a0:	d8c01215 	stw	r3,72(sp)
    53a4:	000e3200 	call	e320 <__fixdfsi>
    53a8:	1009883a 	mov	r4,r2
    53ac:	1029883a 	mov	r20,r2
    53b0:	000e3a00 	call	e3a0 <__floatsidf>
    53b4:	d9000f17 	ldw	r4,60(sp)
    53b8:	d9401017 	ldw	r5,64(sp)
    53bc:	100d883a 	mov	r6,r2
    53c0:	180f883a 	mov	r7,r3
    53c4:	000da240 	call	da24 <__subdf3>
    53c8:	1823883a 	mov	r17,r3
    53cc:	d8c00717 	ldw	r3,28(sp)
    53d0:	d9401217 	ldw	r5,72(sp)
    53d4:	a2000c04 	addi	r8,r20,48
    53d8:	1021883a 	mov	r16,r2
    53dc:	1a000005 	stb	r8,0(r3)
    53e0:	800d883a 	mov	r6,r16
    53e4:	880f883a 	mov	r7,r17
    53e8:	a809883a 	mov	r4,r21
    53ec:	4029883a 	mov	r20,r8
    53f0:	000d13c0 	call	d13c <__gedf2>
    53f4:	00841d16 	blt	zero,r2,646c <_dtoa_r+0x15f4>
    53f8:	800d883a 	mov	r6,r16
    53fc:	880f883a 	mov	r7,r17
    5400:	0009883a 	mov	r4,zero
    5404:	014ffc34 	movhi	r5,16368
    5408:	000da240 	call	da24 <__subdf3>
    540c:	d9401217 	ldw	r5,72(sp)
    5410:	100d883a 	mov	r6,r2
    5414:	180f883a 	mov	r7,r3
    5418:	a809883a 	mov	r4,r21
    541c:	000d13c0 	call	d13c <__gedf2>
    5420:	db001617 	ldw	r12,88(sp)
    5424:	00840e16 	blt	zero,r2,6460 <_dtoa_r+0x15e8>
    5428:	00800044 	movi	r2,1
    542c:	13006b0e 	bge	r2,r12,55dc <_dtoa_r+0x764>
    5430:	d9000717 	ldw	r4,28(sp)
    5434:	dd800f15 	stw	r22,60(sp)
    5438:	dcc01015 	stw	r19,64(sp)
    543c:	2319883a 	add	r12,r4,r12
    5440:	dcc01217 	ldw	r19,72(sp)
    5444:	602d883a 	mov	r22,r12
    5448:	dc801215 	stw	r18,72(sp)
    544c:	b825883a 	mov	r18,r23
    5450:	00000906 	br	5478 <_dtoa_r+0x600>
    5454:	000da240 	call	da24 <__subdf3>
    5458:	a80d883a 	mov	r6,r21
    545c:	980f883a 	mov	r7,r19
    5460:	1009883a 	mov	r4,r2
    5464:	180b883a 	mov	r5,r3
    5468:	000d2180 	call	d218 <__ledf2>
    546c:	1003e816 	blt	r2,zero,6410 <_dtoa_r+0x1598>
    5470:	b825883a 	mov	r18,r23
    5474:	bd83e926 	beq	r23,r22,641c <_dtoa_r+0x15a4>
    5478:	a809883a 	mov	r4,r21
    547c:	980b883a 	mov	r5,r19
    5480:	000d883a 	mov	r6,zero
    5484:	01d00934 	movhi	r7,16420
    5488:	000d30c0 	call	d30c <__muldf3>
    548c:	000d883a 	mov	r6,zero
    5490:	01d00934 	movhi	r7,16420
    5494:	8009883a 	mov	r4,r16
    5498:	880b883a 	mov	r5,r17
    549c:	102b883a 	mov	r21,r2
    54a0:	1827883a 	mov	r19,r3
    54a4:	000d30c0 	call	d30c <__muldf3>
    54a8:	180b883a 	mov	r5,r3
    54ac:	1009883a 	mov	r4,r2
    54b0:	1821883a 	mov	r16,r3
    54b4:	1023883a 	mov	r17,r2
    54b8:	000e3200 	call	e320 <__fixdfsi>
    54bc:	1009883a 	mov	r4,r2
    54c0:	1029883a 	mov	r20,r2
    54c4:	000e3a00 	call	e3a0 <__floatsidf>
    54c8:	8809883a 	mov	r4,r17
    54cc:	800b883a 	mov	r5,r16
    54d0:	100d883a 	mov	r6,r2
    54d4:	180f883a 	mov	r7,r3
    54d8:	000da240 	call	da24 <__subdf3>
    54dc:	a5000c04 	addi	r20,r20,48
    54e0:	a80d883a 	mov	r6,r21
    54e4:	980f883a 	mov	r7,r19
    54e8:	1009883a 	mov	r4,r2
    54ec:	180b883a 	mov	r5,r3
    54f0:	95000005 	stb	r20,0(r18)
    54f4:	1021883a 	mov	r16,r2
    54f8:	1823883a 	mov	r17,r3
    54fc:	000d2180 	call	d218 <__ledf2>
    5500:	bdc00044 	addi	r23,r23,1
    5504:	800d883a 	mov	r6,r16
    5508:	880f883a 	mov	r7,r17
    550c:	0009883a 	mov	r4,zero
    5510:	014ffc34 	movhi	r5,16368
    5514:	103fcf0e 	bge	r2,zero,5454 <__alt_data_end+0xff005454>
    5518:	d8c01317 	ldw	r3,76(sp)
    551c:	d8c00515 	stw	r3,20(sp)
    5520:	d9400917 	ldw	r5,36(sp)
    5524:	e009883a 	mov	r4,fp
    5528:	0007db00 	call	7db0 <_Bfree>
    552c:	d9000517 	ldw	r4,20(sp)
    5530:	d9802317 	ldw	r6,140(sp)
    5534:	d9c02517 	ldw	r7,148(sp)
    5538:	b8000005 	stb	zero,0(r23)
    553c:	20800044 	addi	r2,r4,1
    5540:	30800015 	stw	r2,0(r6)
    5544:	3802aa26 	beq	r7,zero,5ff0 <_dtoa_r+0x1178>
    5548:	3dc00015 	stw	r23,0(r7)
    554c:	d8800717 	ldw	r2,28(sp)
    5550:	003e7906 	br	4f38 <__alt_data_end+0xff004f38>
    5554:	00800434 	movhi	r2,16
    5558:	10bfffc4 	addi	r2,r2,-1
    555c:	88a2703a 	and	r17,r17,r2
    5560:	883e851e 	bne	r17,zero,4f78 <__alt_data_end+0xff004f78>
    5564:	00800074 	movhi	r2,1
    5568:	10854404 	addi	r2,r2,5392
    556c:	003e8406 	br	4f80 <__alt_data_end+0xff004f80>
    5570:	10c00204 	addi	r3,r2,8
    5574:	003e8706 	br	4f94 <__alt_data_end+0xff004f94>
    5578:	01400434 	movhi	r5,16
    557c:	297fffc4 	addi	r5,r5,-1
    5580:	994a703a 	and	r5,r19,r5
    5584:	9009883a 	mov	r4,r18
    5588:	843f0044 	addi	r16,r16,-1023
    558c:	294ffc34 	orhi	r5,r5,16368
    5590:	dd800217 	ldw	r22,8(sp)
    5594:	d8001115 	stw	zero,68(sp)
    5598:	003ea506 	br	5030 <__alt_data_end+0xff005030>
    559c:	00800074 	movhi	r2,1
    55a0:	10853b04 	addi	r2,r2,5356
    55a4:	003e6406 	br	4f38 <__alt_data_end+0xff004f38>
    55a8:	e0001115 	stw	zero,68(fp)
    55ac:	000b883a 	mov	r5,zero
    55b0:	e009883a 	mov	r4,fp
    55b4:	0007d080 	call	7d08 <_Balloc>
    55b8:	01bfffc4 	movi	r6,-1
    55bc:	01c00044 	movi	r7,1
    55c0:	d8800715 	stw	r2,28(sp)
    55c4:	d9800c15 	stw	r6,48(sp)
    55c8:	e0801015 	stw	r2,64(fp)
    55cc:	d8000315 	stw	zero,12(sp)
    55d0:	d9c00b15 	stw	r7,44(sp)
    55d4:	d9800615 	stw	r6,24(sp)
    55d8:	d8002215 	stw	zero,136(sp)
    55dc:	d8800117 	ldw	r2,4(sp)
    55e0:	10008916 	blt	r2,zero,5808 <_dtoa_r+0x990>
    55e4:	d9000517 	ldw	r4,20(sp)
    55e8:	00c00384 	movi	r3,14
    55ec:	19008616 	blt	r3,r4,5808 <_dtoa_r+0x990>
    55f0:	200490fa 	slli	r2,r4,3
    55f4:	00c00074 	movhi	r3,1
    55f8:	d9802217 	ldw	r6,136(sp)
    55fc:	18c56304 	addi	r3,r3,5516
    5600:	1885883a 	add	r2,r3,r2
    5604:	14000017 	ldw	r16,0(r2)
    5608:	14400117 	ldw	r17,4(r2)
    560c:	30016316 	blt	r6,zero,5b9c <_dtoa_r+0xd24>
    5610:	800d883a 	mov	r6,r16
    5614:	880f883a 	mov	r7,r17
    5618:	9009883a 	mov	r4,r18
    561c:	980b883a 	mov	r5,r19
    5620:	000c7cc0 	call	c7cc <__divdf3>
    5624:	180b883a 	mov	r5,r3
    5628:	1009883a 	mov	r4,r2
    562c:	000e3200 	call	e320 <__fixdfsi>
    5630:	1009883a 	mov	r4,r2
    5634:	102b883a 	mov	r21,r2
    5638:	000e3a00 	call	e3a0 <__floatsidf>
    563c:	800d883a 	mov	r6,r16
    5640:	880f883a 	mov	r7,r17
    5644:	1009883a 	mov	r4,r2
    5648:	180b883a 	mov	r5,r3
    564c:	000d30c0 	call	d30c <__muldf3>
    5650:	100d883a 	mov	r6,r2
    5654:	180f883a 	mov	r7,r3
    5658:	9009883a 	mov	r4,r18
    565c:	980b883a 	mov	r5,r19
    5660:	000da240 	call	da24 <__subdf3>
    5664:	d9c00717 	ldw	r7,28(sp)
    5668:	1009883a 	mov	r4,r2
    566c:	a8800c04 	addi	r2,r21,48
    5670:	38800005 	stb	r2,0(r7)
    5674:	3dc00044 	addi	r23,r7,1
    5678:	d9c00617 	ldw	r7,24(sp)
    567c:	01800044 	movi	r6,1
    5680:	180b883a 	mov	r5,r3
    5684:	2005883a 	mov	r2,r4
    5688:	39803826 	beq	r7,r6,576c <_dtoa_r+0x8f4>
    568c:	000d883a 	mov	r6,zero
    5690:	01d00934 	movhi	r7,16420
    5694:	000d30c0 	call	d30c <__muldf3>
    5698:	000d883a 	mov	r6,zero
    569c:	000f883a 	mov	r7,zero
    56a0:	1009883a 	mov	r4,r2
    56a4:	180b883a 	mov	r5,r3
    56a8:	1025883a 	mov	r18,r2
    56ac:	1827883a 	mov	r19,r3
    56b0:	000d0b40 	call	d0b4 <__eqdf2>
    56b4:	103f9a26 	beq	r2,zero,5520 <__alt_data_end+0xff005520>
    56b8:	d9c00617 	ldw	r7,24(sp)
    56bc:	d8c00717 	ldw	r3,28(sp)
    56c0:	b829883a 	mov	r20,r23
    56c4:	38bfffc4 	addi	r2,r7,-1
    56c8:	18ad883a 	add	r22,r3,r2
    56cc:	00000a06 	br	56f8 <_dtoa_r+0x880>
    56d0:	000d30c0 	call	d30c <__muldf3>
    56d4:	000d883a 	mov	r6,zero
    56d8:	000f883a 	mov	r7,zero
    56dc:	1009883a 	mov	r4,r2
    56e0:	180b883a 	mov	r5,r3
    56e4:	1025883a 	mov	r18,r2
    56e8:	1827883a 	mov	r19,r3
    56ec:	b829883a 	mov	r20,r23
    56f0:	000d0b40 	call	d0b4 <__eqdf2>
    56f4:	103f8a26 	beq	r2,zero,5520 <__alt_data_end+0xff005520>
    56f8:	800d883a 	mov	r6,r16
    56fc:	880f883a 	mov	r7,r17
    5700:	9009883a 	mov	r4,r18
    5704:	980b883a 	mov	r5,r19
    5708:	000c7cc0 	call	c7cc <__divdf3>
    570c:	180b883a 	mov	r5,r3
    5710:	1009883a 	mov	r4,r2
    5714:	000e3200 	call	e320 <__fixdfsi>
    5718:	1009883a 	mov	r4,r2
    571c:	102b883a 	mov	r21,r2
    5720:	000e3a00 	call	e3a0 <__floatsidf>
    5724:	800d883a 	mov	r6,r16
    5728:	880f883a 	mov	r7,r17
    572c:	1009883a 	mov	r4,r2
    5730:	180b883a 	mov	r5,r3
    5734:	000d30c0 	call	d30c <__muldf3>
    5738:	100d883a 	mov	r6,r2
    573c:	180f883a 	mov	r7,r3
    5740:	9009883a 	mov	r4,r18
    5744:	980b883a 	mov	r5,r19
    5748:	000da240 	call	da24 <__subdf3>
    574c:	aa000c04 	addi	r8,r21,48
    5750:	a2000005 	stb	r8,0(r20)
    5754:	000d883a 	mov	r6,zero
    5758:	01d00934 	movhi	r7,16420
    575c:	1009883a 	mov	r4,r2
    5760:	180b883a 	mov	r5,r3
    5764:	a5c00044 	addi	r23,r20,1
    5768:	b53fd91e 	bne	r22,r20,56d0 <__alt_data_end+0xff0056d0>
    576c:	100d883a 	mov	r6,r2
    5770:	180f883a 	mov	r7,r3
    5774:	1009883a 	mov	r4,r2
    5778:	180b883a 	mov	r5,r3
    577c:	000bf200 	call	bf20 <__adddf3>
    5780:	100d883a 	mov	r6,r2
    5784:	180f883a 	mov	r7,r3
    5788:	8009883a 	mov	r4,r16
    578c:	880b883a 	mov	r5,r17
    5790:	1027883a 	mov	r19,r2
    5794:	1825883a 	mov	r18,r3
    5798:	000d2180 	call	d218 <__ledf2>
    579c:	10000816 	blt	r2,zero,57c0 <_dtoa_r+0x948>
    57a0:	980d883a 	mov	r6,r19
    57a4:	900f883a 	mov	r7,r18
    57a8:	8009883a 	mov	r4,r16
    57ac:	880b883a 	mov	r5,r17
    57b0:	000d0b40 	call	d0b4 <__eqdf2>
    57b4:	103f5a1e 	bne	r2,zero,5520 <__alt_data_end+0xff005520>
    57b8:	ad40004c 	andi	r21,r21,1
    57bc:	a83f5826 	beq	r21,zero,5520 <__alt_data_end+0xff005520>
    57c0:	bd3fffc3 	ldbu	r20,-1(r23)
    57c4:	b8bfffc4 	addi	r2,r23,-1
    57c8:	1007883a 	mov	r3,r2
    57cc:	01400e44 	movi	r5,57
    57d0:	d9800717 	ldw	r6,28(sp)
    57d4:	00000506 	br	57ec <_dtoa_r+0x974>
    57d8:	18ffffc4 	addi	r3,r3,-1
    57dc:	11824726 	beq	r2,r6,60fc <_dtoa_r+0x1284>
    57e0:	1d000003 	ldbu	r20,0(r3)
    57e4:	102f883a 	mov	r23,r2
    57e8:	10bfffc4 	addi	r2,r2,-1
    57ec:	a1003fcc 	andi	r4,r20,255
    57f0:	2100201c 	xori	r4,r4,128
    57f4:	213fe004 	addi	r4,r4,-128
    57f8:	217ff726 	beq	r4,r5,57d8 <__alt_data_end+0xff0057d8>
    57fc:	a2000044 	addi	r8,r20,1
    5800:	12000005 	stb	r8,0(r2)
    5804:	003f4606 	br	5520 <__alt_data_end+0xff005520>
    5808:	d9000b17 	ldw	r4,44(sp)
    580c:	2000c826 	beq	r4,zero,5b30 <_dtoa_r+0xcb8>
    5810:	d9800317 	ldw	r6,12(sp)
    5814:	00c00044 	movi	r3,1
    5818:	1980f90e 	bge	r3,r6,5c00 <_dtoa_r+0xd88>
    581c:	d8800617 	ldw	r2,24(sp)
    5820:	d8c00a17 	ldw	r3,40(sp)
    5824:	157fffc4 	addi	r21,r2,-1
    5828:	1d41f316 	blt	r3,r21,5ff8 <_dtoa_r+0x1180>
    582c:	1d6bc83a 	sub	r21,r3,r21
    5830:	d9c00617 	ldw	r7,24(sp)
    5834:	3802aa16 	blt	r7,zero,62e0 <_dtoa_r+0x1468>
    5838:	dd000817 	ldw	r20,32(sp)
    583c:	d8800617 	ldw	r2,24(sp)
    5840:	d8c00817 	ldw	r3,32(sp)
    5844:	01400044 	movi	r5,1
    5848:	e009883a 	mov	r4,fp
    584c:	1887883a 	add	r3,r3,r2
    5850:	d8c00815 	stw	r3,32(sp)
    5854:	b0ad883a 	add	r22,r22,r2
    5858:	00081140 	call	8114 <__i2b>
    585c:	1023883a 	mov	r17,r2
    5860:	a0000826 	beq	r20,zero,5884 <_dtoa_r+0xa0c>
    5864:	0580070e 	bge	zero,r22,5884 <_dtoa_r+0xa0c>
    5868:	a005883a 	mov	r2,r20
    586c:	b500b916 	blt	r22,r20,5b54 <_dtoa_r+0xcdc>
    5870:	d9000817 	ldw	r4,32(sp)
    5874:	a0a9c83a 	sub	r20,r20,r2
    5878:	b0adc83a 	sub	r22,r22,r2
    587c:	2089c83a 	sub	r4,r4,r2
    5880:	d9000815 	stw	r4,32(sp)
    5884:	d9800a17 	ldw	r6,40(sp)
    5888:	0181810e 	bge	zero,r6,5e90 <_dtoa_r+0x1018>
    588c:	d9c00b17 	ldw	r7,44(sp)
    5890:	3800b326 	beq	r7,zero,5b60 <_dtoa_r+0xce8>
    5894:	a800b226 	beq	r21,zero,5b60 <_dtoa_r+0xce8>
    5898:	880b883a 	mov	r5,r17
    589c:	a80d883a 	mov	r6,r21
    58a0:	e009883a 	mov	r4,fp
    58a4:	00083480 	call	8348 <__pow5mult>
    58a8:	d9800917 	ldw	r6,36(sp)
    58ac:	100b883a 	mov	r5,r2
    58b0:	e009883a 	mov	r4,fp
    58b4:	1023883a 	mov	r17,r2
    58b8:	00081500 	call	8150 <__multiply>
    58bc:	1021883a 	mov	r16,r2
    58c0:	d8800a17 	ldw	r2,40(sp)
    58c4:	d9400917 	ldw	r5,36(sp)
    58c8:	e009883a 	mov	r4,fp
    58cc:	1545c83a 	sub	r2,r2,r21
    58d0:	d8800a15 	stw	r2,40(sp)
    58d4:	0007db00 	call	7db0 <_Bfree>
    58d8:	d8c00a17 	ldw	r3,40(sp)
    58dc:	18009f1e 	bne	r3,zero,5b5c <_dtoa_r+0xce4>
    58e0:	05c00044 	movi	r23,1
    58e4:	e009883a 	mov	r4,fp
    58e8:	b80b883a 	mov	r5,r23
    58ec:	00081140 	call	8114 <__i2b>
    58f0:	d9000d17 	ldw	r4,52(sp)
    58f4:	102b883a 	mov	r21,r2
    58f8:	2000ce26 	beq	r4,zero,5c34 <_dtoa_r+0xdbc>
    58fc:	200d883a 	mov	r6,r4
    5900:	100b883a 	mov	r5,r2
    5904:	e009883a 	mov	r4,fp
    5908:	00083480 	call	8348 <__pow5mult>
    590c:	d9800317 	ldw	r6,12(sp)
    5910:	102b883a 	mov	r21,r2
    5914:	b981810e 	bge	r23,r6,5f1c <_dtoa_r+0x10a4>
    5918:	0027883a 	mov	r19,zero
    591c:	a8800417 	ldw	r2,16(r21)
    5920:	05c00804 	movi	r23,32
    5924:	10800104 	addi	r2,r2,4
    5928:	1085883a 	add	r2,r2,r2
    592c:	1085883a 	add	r2,r2,r2
    5930:	a885883a 	add	r2,r21,r2
    5934:	11000017 	ldw	r4,0(r2)
    5938:	0007ffc0 	call	7ffc <__hi0bits>
    593c:	b885c83a 	sub	r2,r23,r2
    5940:	1585883a 	add	r2,r2,r22
    5944:	108007cc 	andi	r2,r2,31
    5948:	1000b326 	beq	r2,zero,5c18 <_dtoa_r+0xda0>
    594c:	00c00804 	movi	r3,32
    5950:	1887c83a 	sub	r3,r3,r2
    5954:	01000104 	movi	r4,4
    5958:	20c2cd0e 	bge	r4,r3,6490 <_dtoa_r+0x1618>
    595c:	00c00704 	movi	r3,28
    5960:	1885c83a 	sub	r2,r3,r2
    5964:	d8c00817 	ldw	r3,32(sp)
    5968:	a0a9883a 	add	r20,r20,r2
    596c:	b0ad883a 	add	r22,r22,r2
    5970:	1887883a 	add	r3,r3,r2
    5974:	d8c00815 	stw	r3,32(sp)
    5978:	d9800817 	ldw	r6,32(sp)
    597c:	0180040e 	bge	zero,r6,5990 <_dtoa_r+0xb18>
    5980:	800b883a 	mov	r5,r16
    5984:	e009883a 	mov	r4,fp
    5988:	00084880 	call	8488 <__lshift>
    598c:	1021883a 	mov	r16,r2
    5990:	0580050e 	bge	zero,r22,59a8 <_dtoa_r+0xb30>
    5994:	a80b883a 	mov	r5,r21
    5998:	b00d883a 	mov	r6,r22
    599c:	e009883a 	mov	r4,fp
    59a0:	00084880 	call	8488 <__lshift>
    59a4:	102b883a 	mov	r21,r2
    59a8:	d9c00e17 	ldw	r7,56(sp)
    59ac:	3801211e 	bne	r7,zero,5e34 <_dtoa_r+0xfbc>
    59b0:	d9800617 	ldw	r6,24(sp)
    59b4:	0181380e 	bge	zero,r6,5e98 <_dtoa_r+0x1020>
    59b8:	d8c00b17 	ldw	r3,44(sp)
    59bc:	1800ab1e 	bne	r3,zero,5c6c <_dtoa_r+0xdf4>
    59c0:	dc800717 	ldw	r18,28(sp)
    59c4:	dcc00617 	ldw	r19,24(sp)
    59c8:	9029883a 	mov	r20,r18
    59cc:	00000206 	br	59d8 <_dtoa_r+0xb60>
    59d0:	0007dd80 	call	7dd8 <__multadd>
    59d4:	1021883a 	mov	r16,r2
    59d8:	a80b883a 	mov	r5,r21
    59dc:	8009883a 	mov	r4,r16
    59e0:	0004c780 	call	4c78 <quorem>
    59e4:	10800c04 	addi	r2,r2,48
    59e8:	90800005 	stb	r2,0(r18)
    59ec:	94800044 	addi	r18,r18,1
    59f0:	9507c83a 	sub	r3,r18,r20
    59f4:	000f883a 	mov	r7,zero
    59f8:	01800284 	movi	r6,10
    59fc:	800b883a 	mov	r5,r16
    5a00:	e009883a 	mov	r4,fp
    5a04:	1cfff216 	blt	r3,r19,59d0 <__alt_data_end+0xff0059d0>
    5a08:	1011883a 	mov	r8,r2
    5a0c:	d8800617 	ldw	r2,24(sp)
    5a10:	0082370e 	bge	zero,r2,62f0 <_dtoa_r+0x1478>
    5a14:	d9000717 	ldw	r4,28(sp)
    5a18:	0025883a 	mov	r18,zero
    5a1c:	20af883a 	add	r23,r4,r2
    5a20:	01800044 	movi	r6,1
    5a24:	800b883a 	mov	r5,r16
    5a28:	e009883a 	mov	r4,fp
    5a2c:	da001715 	stw	r8,92(sp)
    5a30:	00084880 	call	8488 <__lshift>
    5a34:	a80b883a 	mov	r5,r21
    5a38:	1009883a 	mov	r4,r2
    5a3c:	d8800915 	stw	r2,36(sp)
    5a40:	00085d00 	call	85d0 <__mcmp>
    5a44:	da001717 	ldw	r8,92(sp)
    5a48:	0081800e 	bge	zero,r2,604c <_dtoa_r+0x11d4>
    5a4c:	b93fffc3 	ldbu	r4,-1(r23)
    5a50:	b8bfffc4 	addi	r2,r23,-1
    5a54:	1007883a 	mov	r3,r2
    5a58:	01800e44 	movi	r6,57
    5a5c:	d9c00717 	ldw	r7,28(sp)
    5a60:	00000506 	br	5a78 <_dtoa_r+0xc00>
    5a64:	18ffffc4 	addi	r3,r3,-1
    5a68:	11c12326 	beq	r2,r7,5ef8 <_dtoa_r+0x1080>
    5a6c:	19000003 	ldbu	r4,0(r3)
    5a70:	102f883a 	mov	r23,r2
    5a74:	10bfffc4 	addi	r2,r2,-1
    5a78:	21403fcc 	andi	r5,r4,255
    5a7c:	2940201c 	xori	r5,r5,128
    5a80:	297fe004 	addi	r5,r5,-128
    5a84:	29bff726 	beq	r5,r6,5a64 <__alt_data_end+0xff005a64>
    5a88:	21000044 	addi	r4,r4,1
    5a8c:	11000005 	stb	r4,0(r2)
    5a90:	a80b883a 	mov	r5,r21
    5a94:	e009883a 	mov	r4,fp
    5a98:	0007db00 	call	7db0 <_Bfree>
    5a9c:	883ea026 	beq	r17,zero,5520 <__alt_data_end+0xff005520>
    5aa0:	90000426 	beq	r18,zero,5ab4 <_dtoa_r+0xc3c>
    5aa4:	94400326 	beq	r18,r17,5ab4 <_dtoa_r+0xc3c>
    5aa8:	900b883a 	mov	r5,r18
    5aac:	e009883a 	mov	r4,fp
    5ab0:	0007db00 	call	7db0 <_Bfree>
    5ab4:	880b883a 	mov	r5,r17
    5ab8:	e009883a 	mov	r4,fp
    5abc:	0007db00 	call	7db0 <_Bfree>
    5ac0:	003e9706 	br	5520 <__alt_data_end+0xff005520>
    5ac4:	01800044 	movi	r6,1
    5ac8:	d9800e15 	stw	r6,56(sp)
    5acc:	003d9606 	br	5128 <__alt_data_end+0xff005128>
    5ad0:	d8800817 	ldw	r2,32(sp)
    5ad4:	d8c00517 	ldw	r3,20(sp)
    5ad8:	d8000d15 	stw	zero,52(sp)
    5adc:	10c5c83a 	sub	r2,r2,r3
    5ae0:	00c9c83a 	sub	r4,zero,r3
    5ae4:	d8800815 	stw	r2,32(sp)
    5ae8:	d9000a15 	stw	r4,40(sp)
    5aec:	003d9706 	br	514c <__alt_data_end+0xff00514c>
    5af0:	05adc83a 	sub	r22,zero,r22
    5af4:	dd800815 	stw	r22,32(sp)
    5af8:	002d883a 	mov	r22,zero
    5afc:	003d8e06 	br	5138 <__alt_data_end+0xff005138>
    5b00:	d9000517 	ldw	r4,20(sp)
    5b04:	000e3a00 	call	e3a0 <__floatsidf>
    5b08:	100d883a 	mov	r6,r2
    5b0c:	180f883a 	mov	r7,r3
    5b10:	a009883a 	mov	r4,r20
    5b14:	880b883a 	mov	r5,r17
    5b18:	000d0b40 	call	d0b4 <__eqdf2>
    5b1c:	103d7126 	beq	r2,zero,50e4 <__alt_data_end+0xff0050e4>
    5b20:	d9c00517 	ldw	r7,20(sp)
    5b24:	39ffffc4 	addi	r7,r7,-1
    5b28:	d9c00515 	stw	r7,20(sp)
    5b2c:	003d6d06 	br	50e4 <__alt_data_end+0xff0050e4>
    5b30:	dd400a17 	ldw	r21,40(sp)
    5b34:	dd000817 	ldw	r20,32(sp)
    5b38:	0023883a 	mov	r17,zero
    5b3c:	003f4806 	br	5860 <__alt_data_end+0xff005860>
    5b40:	10e3c83a 	sub	r17,r2,r3
    5b44:	9448983a 	sll	r4,r18,r17
    5b48:	003d3206 	br	5014 <__alt_data_end+0xff005014>
    5b4c:	d8000e15 	stw	zero,56(sp)
    5b50:	003d7506 	br	5128 <__alt_data_end+0xff005128>
    5b54:	b005883a 	mov	r2,r22
    5b58:	003f4506 	br	5870 <__alt_data_end+0xff005870>
    5b5c:	dc000915 	stw	r16,36(sp)
    5b60:	d9800a17 	ldw	r6,40(sp)
    5b64:	d9400917 	ldw	r5,36(sp)
    5b68:	e009883a 	mov	r4,fp
    5b6c:	00083480 	call	8348 <__pow5mult>
    5b70:	1021883a 	mov	r16,r2
    5b74:	003f5a06 	br	58e0 <__alt_data_end+0xff0058e0>
    5b78:	01c00044 	movi	r7,1
    5b7c:	d9c00b15 	stw	r7,44(sp)
    5b80:	d8802217 	ldw	r2,136(sp)
    5b84:	0081280e 	bge	zero,r2,6028 <_dtoa_r+0x11b0>
    5b88:	100d883a 	mov	r6,r2
    5b8c:	1021883a 	mov	r16,r2
    5b90:	d8800c15 	stw	r2,48(sp)
    5b94:	d8800615 	stw	r2,24(sp)
    5b98:	003d8806 	br	51bc <__alt_data_end+0xff0051bc>
    5b9c:	d8800617 	ldw	r2,24(sp)
    5ba0:	00be9b16 	blt	zero,r2,5610 <__alt_data_end+0xff005610>
    5ba4:	10010f1e 	bne	r2,zero,5fe4 <_dtoa_r+0x116c>
    5ba8:	880b883a 	mov	r5,r17
    5bac:	000d883a 	mov	r6,zero
    5bb0:	01d00534 	movhi	r7,16404
    5bb4:	8009883a 	mov	r4,r16
    5bb8:	000d30c0 	call	d30c <__muldf3>
    5bbc:	900d883a 	mov	r6,r18
    5bc0:	980f883a 	mov	r7,r19
    5bc4:	1009883a 	mov	r4,r2
    5bc8:	180b883a 	mov	r5,r3
    5bcc:	000d13c0 	call	d13c <__gedf2>
    5bd0:	002b883a 	mov	r21,zero
    5bd4:	0023883a 	mov	r17,zero
    5bd8:	1000bf16 	blt	r2,zero,5ed8 <_dtoa_r+0x1060>
    5bdc:	d9802217 	ldw	r6,136(sp)
    5be0:	ddc00717 	ldw	r23,28(sp)
    5be4:	018c303a 	nor	r6,zero,r6
    5be8:	d9800515 	stw	r6,20(sp)
    5bec:	a80b883a 	mov	r5,r21
    5bf0:	e009883a 	mov	r4,fp
    5bf4:	0007db00 	call	7db0 <_Bfree>
    5bf8:	883e4926 	beq	r17,zero,5520 <__alt_data_end+0xff005520>
    5bfc:	003fad06 	br	5ab4 <__alt_data_end+0xff005ab4>
    5c00:	d9c01117 	ldw	r7,68(sp)
    5c04:	3801bc26 	beq	r7,zero,62f8 <_dtoa_r+0x1480>
    5c08:	10810cc4 	addi	r2,r2,1075
    5c0c:	dd400a17 	ldw	r21,40(sp)
    5c10:	dd000817 	ldw	r20,32(sp)
    5c14:	003f0a06 	br	5840 <__alt_data_end+0xff005840>
    5c18:	00800704 	movi	r2,28
    5c1c:	d9000817 	ldw	r4,32(sp)
    5c20:	a0a9883a 	add	r20,r20,r2
    5c24:	b0ad883a 	add	r22,r22,r2
    5c28:	2089883a 	add	r4,r4,r2
    5c2c:	d9000815 	stw	r4,32(sp)
    5c30:	003f5106 	br	5978 <__alt_data_end+0xff005978>
    5c34:	d8c00317 	ldw	r3,12(sp)
    5c38:	b8c1fc0e 	bge	r23,r3,642c <_dtoa_r+0x15b4>
    5c3c:	0027883a 	mov	r19,zero
    5c40:	b805883a 	mov	r2,r23
    5c44:	003f3e06 	br	5940 <__alt_data_end+0xff005940>
    5c48:	880b883a 	mov	r5,r17
    5c4c:	e009883a 	mov	r4,fp
    5c50:	000f883a 	mov	r7,zero
    5c54:	01800284 	movi	r6,10
    5c58:	0007dd80 	call	7dd8 <__multadd>
    5c5c:	d9000c17 	ldw	r4,48(sp)
    5c60:	1023883a 	mov	r17,r2
    5c64:	0102040e 	bge	zero,r4,6478 <_dtoa_r+0x1600>
    5c68:	d9000615 	stw	r4,24(sp)
    5c6c:	0500050e 	bge	zero,r20,5c84 <_dtoa_r+0xe0c>
    5c70:	880b883a 	mov	r5,r17
    5c74:	a00d883a 	mov	r6,r20
    5c78:	e009883a 	mov	r4,fp
    5c7c:	00084880 	call	8488 <__lshift>
    5c80:	1023883a 	mov	r17,r2
    5c84:	9801241e 	bne	r19,zero,6118 <_dtoa_r+0x12a0>
    5c88:	8829883a 	mov	r20,r17
    5c8c:	d9000617 	ldw	r4,24(sp)
    5c90:	dcc00717 	ldw	r19,28(sp)
    5c94:	9480004c 	andi	r18,r18,1
    5c98:	20bfffc4 	addi	r2,r4,-1
    5c9c:	9885883a 	add	r2,r19,r2
    5ca0:	d8800415 	stw	r2,16(sp)
    5ca4:	dc800615 	stw	r18,24(sp)
    5ca8:	a80b883a 	mov	r5,r21
    5cac:	8009883a 	mov	r4,r16
    5cb0:	0004c780 	call	4c78 <quorem>
    5cb4:	880b883a 	mov	r5,r17
    5cb8:	8009883a 	mov	r4,r16
    5cbc:	102f883a 	mov	r23,r2
    5cc0:	00085d00 	call	85d0 <__mcmp>
    5cc4:	a80b883a 	mov	r5,r21
    5cc8:	a00d883a 	mov	r6,r20
    5ccc:	e009883a 	mov	r4,fp
    5cd0:	102d883a 	mov	r22,r2
    5cd4:	00086300 	call	8630 <__mdiff>
    5cd8:	1007883a 	mov	r3,r2
    5cdc:	10800317 	ldw	r2,12(r2)
    5ce0:	bc800c04 	addi	r18,r23,48
    5ce4:	180b883a 	mov	r5,r3
    5ce8:	10004e1e 	bne	r2,zero,5e24 <_dtoa_r+0xfac>
    5cec:	8009883a 	mov	r4,r16
    5cf0:	d8c01615 	stw	r3,88(sp)
    5cf4:	00085d00 	call	85d0 <__mcmp>
    5cf8:	d8c01617 	ldw	r3,88(sp)
    5cfc:	e009883a 	mov	r4,fp
    5d00:	d8801615 	stw	r2,88(sp)
    5d04:	180b883a 	mov	r5,r3
    5d08:	0007db00 	call	7db0 <_Bfree>
    5d0c:	d8801617 	ldw	r2,88(sp)
    5d10:	1000041e 	bne	r2,zero,5d24 <_dtoa_r+0xeac>
    5d14:	d9800317 	ldw	r6,12(sp)
    5d18:	3000021e 	bne	r6,zero,5d24 <_dtoa_r+0xeac>
    5d1c:	d8c00617 	ldw	r3,24(sp)
    5d20:	18003726 	beq	r3,zero,5e00 <_dtoa_r+0xf88>
    5d24:	b0002016 	blt	r22,zero,5da8 <_dtoa_r+0xf30>
    5d28:	b000041e 	bne	r22,zero,5d3c <_dtoa_r+0xec4>
    5d2c:	d9000317 	ldw	r4,12(sp)
    5d30:	2000021e 	bne	r4,zero,5d3c <_dtoa_r+0xec4>
    5d34:	d8c00617 	ldw	r3,24(sp)
    5d38:	18001b26 	beq	r3,zero,5da8 <_dtoa_r+0xf30>
    5d3c:	00810716 	blt	zero,r2,615c <_dtoa_r+0x12e4>
    5d40:	d8c00417 	ldw	r3,16(sp)
    5d44:	9d800044 	addi	r22,r19,1
    5d48:	9c800005 	stb	r18,0(r19)
    5d4c:	b02f883a 	mov	r23,r22
    5d50:	98c10626 	beq	r19,r3,616c <_dtoa_r+0x12f4>
    5d54:	800b883a 	mov	r5,r16
    5d58:	000f883a 	mov	r7,zero
    5d5c:	01800284 	movi	r6,10
    5d60:	e009883a 	mov	r4,fp
    5d64:	0007dd80 	call	7dd8 <__multadd>
    5d68:	1021883a 	mov	r16,r2
    5d6c:	000f883a 	mov	r7,zero
    5d70:	01800284 	movi	r6,10
    5d74:	880b883a 	mov	r5,r17
    5d78:	e009883a 	mov	r4,fp
    5d7c:	8d002526 	beq	r17,r20,5e14 <_dtoa_r+0xf9c>
    5d80:	0007dd80 	call	7dd8 <__multadd>
    5d84:	a00b883a 	mov	r5,r20
    5d88:	000f883a 	mov	r7,zero
    5d8c:	01800284 	movi	r6,10
    5d90:	e009883a 	mov	r4,fp
    5d94:	1023883a 	mov	r17,r2
    5d98:	0007dd80 	call	7dd8 <__multadd>
    5d9c:	1029883a 	mov	r20,r2
    5da0:	b027883a 	mov	r19,r22
    5da4:	003fc006 	br	5ca8 <__alt_data_end+0xff005ca8>
    5da8:	9011883a 	mov	r8,r18
    5dac:	00800e0e 	bge	zero,r2,5de8 <_dtoa_r+0xf70>
    5db0:	800b883a 	mov	r5,r16
    5db4:	01800044 	movi	r6,1
    5db8:	e009883a 	mov	r4,fp
    5dbc:	da001715 	stw	r8,92(sp)
    5dc0:	00084880 	call	8488 <__lshift>
    5dc4:	a80b883a 	mov	r5,r21
    5dc8:	1009883a 	mov	r4,r2
    5dcc:	1021883a 	mov	r16,r2
    5dd0:	00085d00 	call	85d0 <__mcmp>
    5dd4:	da001717 	ldw	r8,92(sp)
    5dd8:	0081960e 	bge	zero,r2,6434 <_dtoa_r+0x15bc>
    5ddc:	00800e44 	movi	r2,57
    5de0:	40817026 	beq	r8,r2,63a4 <_dtoa_r+0x152c>
    5de4:	ba000c44 	addi	r8,r23,49
    5de8:	8825883a 	mov	r18,r17
    5dec:	9dc00044 	addi	r23,r19,1
    5df0:	9a000005 	stb	r8,0(r19)
    5df4:	a023883a 	mov	r17,r20
    5df8:	dc000915 	stw	r16,36(sp)
    5dfc:	003f2406 	br	5a90 <__alt_data_end+0xff005a90>
    5e00:	00800e44 	movi	r2,57
    5e04:	9011883a 	mov	r8,r18
    5e08:	90816626 	beq	r18,r2,63a4 <_dtoa_r+0x152c>
    5e0c:	05bff516 	blt	zero,r22,5de4 <__alt_data_end+0xff005de4>
    5e10:	003ff506 	br	5de8 <__alt_data_end+0xff005de8>
    5e14:	0007dd80 	call	7dd8 <__multadd>
    5e18:	1023883a 	mov	r17,r2
    5e1c:	1029883a 	mov	r20,r2
    5e20:	003fdf06 	br	5da0 <__alt_data_end+0xff005da0>
    5e24:	e009883a 	mov	r4,fp
    5e28:	0007db00 	call	7db0 <_Bfree>
    5e2c:	00800044 	movi	r2,1
    5e30:	003fbc06 	br	5d24 <__alt_data_end+0xff005d24>
    5e34:	a80b883a 	mov	r5,r21
    5e38:	8009883a 	mov	r4,r16
    5e3c:	00085d00 	call	85d0 <__mcmp>
    5e40:	103edb0e 	bge	r2,zero,59b0 <__alt_data_end+0xff0059b0>
    5e44:	800b883a 	mov	r5,r16
    5e48:	000f883a 	mov	r7,zero
    5e4c:	01800284 	movi	r6,10
    5e50:	e009883a 	mov	r4,fp
    5e54:	0007dd80 	call	7dd8 <__multadd>
    5e58:	1021883a 	mov	r16,r2
    5e5c:	d8800517 	ldw	r2,20(sp)
    5e60:	d8c00b17 	ldw	r3,44(sp)
    5e64:	10bfffc4 	addi	r2,r2,-1
    5e68:	d8800515 	stw	r2,20(sp)
    5e6c:	183f761e 	bne	r3,zero,5c48 <__alt_data_end+0xff005c48>
    5e70:	d9000c17 	ldw	r4,48(sp)
    5e74:	0101730e 	bge	zero,r4,6444 <_dtoa_r+0x15cc>
    5e78:	d9000615 	stw	r4,24(sp)
    5e7c:	003ed006 	br	59c0 <__alt_data_end+0xff0059c0>
    5e80:	00800084 	movi	r2,2
    5e84:	3081861e 	bne	r6,r2,64a0 <_dtoa_r+0x1628>
    5e88:	d8000b15 	stw	zero,44(sp)
    5e8c:	003f3c06 	br	5b80 <__alt_data_end+0xff005b80>
    5e90:	dc000917 	ldw	r16,36(sp)
    5e94:	003e9206 	br	58e0 <__alt_data_end+0xff0058e0>
    5e98:	d9c00317 	ldw	r7,12(sp)
    5e9c:	00800084 	movi	r2,2
    5ea0:	11fec50e 	bge	r2,r7,59b8 <__alt_data_end+0xff0059b8>
    5ea4:	d9000617 	ldw	r4,24(sp)
    5ea8:	20013c1e 	bne	r4,zero,639c <_dtoa_r+0x1524>
    5eac:	a80b883a 	mov	r5,r21
    5eb0:	000f883a 	mov	r7,zero
    5eb4:	01800144 	movi	r6,5
    5eb8:	e009883a 	mov	r4,fp
    5ebc:	0007dd80 	call	7dd8 <__multadd>
    5ec0:	100b883a 	mov	r5,r2
    5ec4:	8009883a 	mov	r4,r16
    5ec8:	102b883a 	mov	r21,r2
    5ecc:	00085d00 	call	85d0 <__mcmp>
    5ed0:	dc000915 	stw	r16,36(sp)
    5ed4:	00bf410e 	bge	zero,r2,5bdc <__alt_data_end+0xff005bdc>
    5ed8:	d9c00717 	ldw	r7,28(sp)
    5edc:	00800c44 	movi	r2,49
    5ee0:	38800005 	stb	r2,0(r7)
    5ee4:	d8800517 	ldw	r2,20(sp)
    5ee8:	3dc00044 	addi	r23,r7,1
    5eec:	10800044 	addi	r2,r2,1
    5ef0:	d8800515 	stw	r2,20(sp)
    5ef4:	003f3d06 	br	5bec <__alt_data_end+0xff005bec>
    5ef8:	d9800517 	ldw	r6,20(sp)
    5efc:	d9c00717 	ldw	r7,28(sp)
    5f00:	00800c44 	movi	r2,49
    5f04:	31800044 	addi	r6,r6,1
    5f08:	d9800515 	stw	r6,20(sp)
    5f0c:	38800005 	stb	r2,0(r7)
    5f10:	003edf06 	br	5a90 <__alt_data_end+0xff005a90>
    5f14:	d8000b15 	stw	zero,44(sp)
    5f18:	003c9f06 	br	5198 <__alt_data_end+0xff005198>
    5f1c:	903e7e1e 	bne	r18,zero,5918 <__alt_data_end+0xff005918>
    5f20:	00800434 	movhi	r2,16
    5f24:	10bfffc4 	addi	r2,r2,-1
    5f28:	9884703a 	and	r2,r19,r2
    5f2c:	1000ea1e 	bne	r2,zero,62d8 <_dtoa_r+0x1460>
    5f30:	9cdffc2c 	andhi	r19,r19,32752
    5f34:	9800e826 	beq	r19,zero,62d8 <_dtoa_r+0x1460>
    5f38:	d9c00817 	ldw	r7,32(sp)
    5f3c:	b5800044 	addi	r22,r22,1
    5f40:	04c00044 	movi	r19,1
    5f44:	39c00044 	addi	r7,r7,1
    5f48:	d9c00815 	stw	r7,32(sp)
    5f4c:	d8800d17 	ldw	r2,52(sp)
    5f50:	103e721e 	bne	r2,zero,591c <__alt_data_end+0xff00591c>
    5f54:	00800044 	movi	r2,1
    5f58:	003e7906 	br	5940 <__alt_data_end+0xff005940>
    5f5c:	8009883a 	mov	r4,r16
    5f60:	000e3a00 	call	e3a0 <__floatsidf>
    5f64:	d9800f17 	ldw	r6,60(sp)
    5f68:	d9c01017 	ldw	r7,64(sp)
    5f6c:	1009883a 	mov	r4,r2
    5f70:	180b883a 	mov	r5,r3
    5f74:	000d30c0 	call	d30c <__muldf3>
    5f78:	000d883a 	mov	r6,zero
    5f7c:	01d00734 	movhi	r7,16412
    5f80:	1009883a 	mov	r4,r2
    5f84:	180b883a 	mov	r5,r3
    5f88:	000bf200 	call	bf20 <__adddf3>
    5f8c:	047f3034 	movhi	r17,64704
    5f90:	1021883a 	mov	r16,r2
    5f94:	1c63883a 	add	r17,r3,r17
    5f98:	d9000f17 	ldw	r4,60(sp)
    5f9c:	d9401017 	ldw	r5,64(sp)
    5fa0:	000d883a 	mov	r6,zero
    5fa4:	01d00534 	movhi	r7,16404
    5fa8:	000da240 	call	da24 <__subdf3>
    5fac:	800d883a 	mov	r6,r16
    5fb0:	880f883a 	mov	r7,r17
    5fb4:	1009883a 	mov	r4,r2
    5fb8:	180b883a 	mov	r5,r3
    5fbc:	102b883a 	mov	r21,r2
    5fc0:	1829883a 	mov	r20,r3
    5fc4:	000d13c0 	call	d13c <__gedf2>
    5fc8:	00806c16 	blt	zero,r2,617c <_dtoa_r+0x1304>
    5fcc:	89e0003c 	xorhi	r7,r17,32768
    5fd0:	800d883a 	mov	r6,r16
    5fd4:	a809883a 	mov	r4,r21
    5fd8:	a00b883a 	mov	r5,r20
    5fdc:	000d2180 	call	d218 <__ledf2>
    5fe0:	103d7e0e 	bge	r2,zero,55dc <__alt_data_end+0xff0055dc>
    5fe4:	002b883a 	mov	r21,zero
    5fe8:	0023883a 	mov	r17,zero
    5fec:	003efb06 	br	5bdc <__alt_data_end+0xff005bdc>
    5ff0:	d8800717 	ldw	r2,28(sp)
    5ff4:	003bd006 	br	4f38 <__alt_data_end+0xff004f38>
    5ff8:	d9000a17 	ldw	r4,40(sp)
    5ffc:	d9800d17 	ldw	r6,52(sp)
    6000:	dd400a15 	stw	r21,40(sp)
    6004:	a905c83a 	sub	r2,r21,r4
    6008:	308d883a 	add	r6,r6,r2
    600c:	d9800d15 	stw	r6,52(sp)
    6010:	002b883a 	mov	r21,zero
    6014:	003e0606 	br	5830 <__alt_data_end+0xff005830>
    6018:	9023883a 	mov	r17,r18
    601c:	9829883a 	mov	r20,r19
    6020:	04000084 	movi	r16,2
    6024:	003c9206 	br	5270 <__alt_data_end+0xff005270>
    6028:	04000044 	movi	r16,1
    602c:	dc000c15 	stw	r16,48(sp)
    6030:	dc000615 	stw	r16,24(sp)
    6034:	dc002215 	stw	r16,136(sp)
    6038:	e0001115 	stw	zero,68(fp)
    603c:	000b883a 	mov	r5,zero
    6040:	003c6906 	br	51e8 <__alt_data_end+0xff0051e8>
    6044:	3021883a 	mov	r16,r6
    6048:	003ffb06 	br	6038 <__alt_data_end+0xff006038>
    604c:	1000021e 	bne	r2,zero,6058 <_dtoa_r+0x11e0>
    6050:	4200004c 	andi	r8,r8,1
    6054:	403e7d1e 	bne	r8,zero,5a4c <__alt_data_end+0xff005a4c>
    6058:	01000c04 	movi	r4,48
    605c:	00000106 	br	6064 <_dtoa_r+0x11ec>
    6060:	102f883a 	mov	r23,r2
    6064:	b8bfffc4 	addi	r2,r23,-1
    6068:	10c00007 	ldb	r3,0(r2)
    606c:	193ffc26 	beq	r3,r4,6060 <__alt_data_end+0xff006060>
    6070:	003e8706 	br	5a90 <__alt_data_end+0xff005a90>
    6074:	d8800517 	ldw	r2,20(sp)
    6078:	00a3c83a 	sub	r17,zero,r2
    607c:	8800a426 	beq	r17,zero,6310 <_dtoa_r+0x1498>
    6080:	888003cc 	andi	r2,r17,15
    6084:	100490fa 	slli	r2,r2,3
    6088:	00c00074 	movhi	r3,1
    608c:	18c56304 	addi	r3,r3,5516
    6090:	1885883a 	add	r2,r3,r2
    6094:	11800017 	ldw	r6,0(r2)
    6098:	11c00117 	ldw	r7,4(r2)
    609c:	9009883a 	mov	r4,r18
    60a0:	980b883a 	mov	r5,r19
    60a4:	8823d13a 	srai	r17,r17,4
    60a8:	000d30c0 	call	d30c <__muldf3>
    60ac:	d8800f15 	stw	r2,60(sp)
    60b0:	d8c01015 	stw	r3,64(sp)
    60b4:	8800e826 	beq	r17,zero,6458 <_dtoa_r+0x15e0>
    60b8:	05000074 	movhi	r20,1
    60bc:	a5055904 	addi	r20,r20,5476
    60c0:	04000084 	movi	r16,2
    60c4:	8980004c 	andi	r6,r17,1
    60c8:	1009883a 	mov	r4,r2
    60cc:	8823d07a 	srai	r17,r17,1
    60d0:	180b883a 	mov	r5,r3
    60d4:	30000426 	beq	r6,zero,60e8 <_dtoa_r+0x1270>
    60d8:	a1800017 	ldw	r6,0(r20)
    60dc:	a1c00117 	ldw	r7,4(r20)
    60e0:	84000044 	addi	r16,r16,1
    60e4:	000d30c0 	call	d30c <__muldf3>
    60e8:	a5000204 	addi	r20,r20,8
    60ec:	883ff51e 	bne	r17,zero,60c4 <__alt_data_end+0xff0060c4>
    60f0:	d8800f15 	stw	r2,60(sp)
    60f4:	d8c01015 	stw	r3,64(sp)
    60f8:	003c7606 	br	52d4 <__alt_data_end+0xff0052d4>
    60fc:	00c00c04 	movi	r3,48
    6100:	10c00005 	stb	r3,0(r2)
    6104:	d8c00517 	ldw	r3,20(sp)
    6108:	bd3fffc3 	ldbu	r20,-1(r23)
    610c:	18c00044 	addi	r3,r3,1
    6110:	d8c00515 	stw	r3,20(sp)
    6114:	003db906 	br	57fc <__alt_data_end+0xff0057fc>
    6118:	89400117 	ldw	r5,4(r17)
    611c:	e009883a 	mov	r4,fp
    6120:	0007d080 	call	7d08 <_Balloc>
    6124:	89800417 	ldw	r6,16(r17)
    6128:	89400304 	addi	r5,r17,12
    612c:	11000304 	addi	r4,r2,12
    6130:	31800084 	addi	r6,r6,2
    6134:	318d883a 	add	r6,r6,r6
    6138:	318d883a 	add	r6,r6,r6
    613c:	1027883a 	mov	r19,r2
    6140:	000793c0 	call	793c <memcpy>
    6144:	01800044 	movi	r6,1
    6148:	980b883a 	mov	r5,r19
    614c:	e009883a 	mov	r4,fp
    6150:	00084880 	call	8488 <__lshift>
    6154:	1029883a 	mov	r20,r2
    6158:	003ecc06 	br	5c8c <__alt_data_end+0xff005c8c>
    615c:	00800e44 	movi	r2,57
    6160:	90809026 	beq	r18,r2,63a4 <_dtoa_r+0x152c>
    6164:	92000044 	addi	r8,r18,1
    6168:	003f1f06 	br	5de8 <__alt_data_end+0xff005de8>
    616c:	9011883a 	mov	r8,r18
    6170:	8825883a 	mov	r18,r17
    6174:	a023883a 	mov	r17,r20
    6178:	003e2906 	br	5a20 <__alt_data_end+0xff005a20>
    617c:	002b883a 	mov	r21,zero
    6180:	0023883a 	mov	r17,zero
    6184:	003f5406 	br	5ed8 <__alt_data_end+0xff005ed8>
    6188:	61bfffc4 	addi	r6,r12,-1
    618c:	300490fa 	slli	r2,r6,3
    6190:	00c00074 	movhi	r3,1
    6194:	18c56304 	addi	r3,r3,5516
    6198:	1885883a 	add	r2,r3,r2
    619c:	11000017 	ldw	r4,0(r2)
    61a0:	11400117 	ldw	r5,4(r2)
    61a4:	d8800717 	ldw	r2,28(sp)
    61a8:	880f883a 	mov	r7,r17
    61ac:	d9801215 	stw	r6,72(sp)
    61b0:	800d883a 	mov	r6,r16
    61b4:	db001615 	stw	r12,88(sp)
    61b8:	15c00044 	addi	r23,r2,1
    61bc:	000d30c0 	call	d30c <__muldf3>
    61c0:	d9401017 	ldw	r5,64(sp)
    61c4:	d9000f17 	ldw	r4,60(sp)
    61c8:	d8c01515 	stw	r3,84(sp)
    61cc:	d8801415 	stw	r2,80(sp)
    61d0:	000e3200 	call	e320 <__fixdfsi>
    61d4:	1009883a 	mov	r4,r2
    61d8:	1021883a 	mov	r16,r2
    61dc:	000e3a00 	call	e3a0 <__floatsidf>
    61e0:	d9000f17 	ldw	r4,60(sp)
    61e4:	d9401017 	ldw	r5,64(sp)
    61e8:	100d883a 	mov	r6,r2
    61ec:	180f883a 	mov	r7,r3
    61f0:	000da240 	call	da24 <__subdf3>
    61f4:	1829883a 	mov	r20,r3
    61f8:	d8c00717 	ldw	r3,28(sp)
    61fc:	84000c04 	addi	r16,r16,48
    6200:	1023883a 	mov	r17,r2
    6204:	1c000005 	stb	r16,0(r3)
    6208:	db001617 	ldw	r12,88(sp)
    620c:	00800044 	movi	r2,1
    6210:	60802226 	beq	r12,r2,629c <_dtoa_r+0x1424>
    6214:	d9c00717 	ldw	r7,28(sp)
    6218:	8805883a 	mov	r2,r17
    621c:	b82b883a 	mov	r21,r23
    6220:	3b19883a 	add	r12,r7,r12
    6224:	6023883a 	mov	r17,r12
    6228:	a007883a 	mov	r3,r20
    622c:	dc800f15 	stw	r18,60(sp)
    6230:	000d883a 	mov	r6,zero
    6234:	01d00934 	movhi	r7,16420
    6238:	1009883a 	mov	r4,r2
    623c:	180b883a 	mov	r5,r3
    6240:	000d30c0 	call	d30c <__muldf3>
    6244:	180b883a 	mov	r5,r3
    6248:	1009883a 	mov	r4,r2
    624c:	1829883a 	mov	r20,r3
    6250:	1025883a 	mov	r18,r2
    6254:	000e3200 	call	e320 <__fixdfsi>
    6258:	1009883a 	mov	r4,r2
    625c:	1021883a 	mov	r16,r2
    6260:	000e3a00 	call	e3a0 <__floatsidf>
    6264:	100d883a 	mov	r6,r2
    6268:	180f883a 	mov	r7,r3
    626c:	9009883a 	mov	r4,r18
    6270:	a00b883a 	mov	r5,r20
    6274:	84000c04 	addi	r16,r16,48
    6278:	000da240 	call	da24 <__subdf3>
    627c:	ad400044 	addi	r21,r21,1
    6280:	ac3fffc5 	stb	r16,-1(r21)
    6284:	ac7fea1e 	bne	r21,r17,6230 <__alt_data_end+0xff006230>
    6288:	1023883a 	mov	r17,r2
    628c:	d8801217 	ldw	r2,72(sp)
    6290:	dc800f17 	ldw	r18,60(sp)
    6294:	1829883a 	mov	r20,r3
    6298:	b8af883a 	add	r23,r23,r2
    629c:	d9001417 	ldw	r4,80(sp)
    62a0:	d9401517 	ldw	r5,84(sp)
    62a4:	000d883a 	mov	r6,zero
    62a8:	01cff834 	movhi	r7,16352
    62ac:	000bf200 	call	bf20 <__adddf3>
    62b0:	880d883a 	mov	r6,r17
    62b4:	a00f883a 	mov	r7,r20
    62b8:	1009883a 	mov	r4,r2
    62bc:	180b883a 	mov	r5,r3
    62c0:	000d2180 	call	d218 <__ledf2>
    62c4:	10003e0e 	bge	r2,zero,63c0 <_dtoa_r+0x1548>
    62c8:	d9001317 	ldw	r4,76(sp)
    62cc:	bd3fffc3 	ldbu	r20,-1(r23)
    62d0:	d9000515 	stw	r4,20(sp)
    62d4:	003d3b06 	br	57c4 <__alt_data_end+0xff0057c4>
    62d8:	0027883a 	mov	r19,zero
    62dc:	003f1b06 	br	5f4c <__alt_data_end+0xff005f4c>
    62e0:	d8800817 	ldw	r2,32(sp)
    62e4:	11e9c83a 	sub	r20,r2,r7
    62e8:	0005883a 	mov	r2,zero
    62ec:	003d5406 	br	5840 <__alt_data_end+0xff005840>
    62f0:	00800044 	movi	r2,1
    62f4:	003dc706 	br	5a14 <__alt_data_end+0xff005a14>
    62f8:	d8c00217 	ldw	r3,8(sp)
    62fc:	00800d84 	movi	r2,54
    6300:	dd400a17 	ldw	r21,40(sp)
    6304:	10c5c83a 	sub	r2,r2,r3
    6308:	dd000817 	ldw	r20,32(sp)
    630c:	003d4c06 	br	5840 <__alt_data_end+0xff005840>
    6310:	dc800f15 	stw	r18,60(sp)
    6314:	dcc01015 	stw	r19,64(sp)
    6318:	04000084 	movi	r16,2
    631c:	003bed06 	br	52d4 <__alt_data_end+0xff0052d4>
    6320:	d9000617 	ldw	r4,24(sp)
    6324:	203f0d26 	beq	r4,zero,5f5c <__alt_data_end+0xff005f5c>
    6328:	d9800c17 	ldw	r6,48(sp)
    632c:	01bcab0e 	bge	zero,r6,55dc <__alt_data_end+0xff0055dc>
    6330:	d9401017 	ldw	r5,64(sp)
    6334:	d9000f17 	ldw	r4,60(sp)
    6338:	000d883a 	mov	r6,zero
    633c:	01d00934 	movhi	r7,16420
    6340:	000d30c0 	call	d30c <__muldf3>
    6344:	81000044 	addi	r4,r16,1
    6348:	d8800f15 	stw	r2,60(sp)
    634c:	d8c01015 	stw	r3,64(sp)
    6350:	000e3a00 	call	e3a0 <__floatsidf>
    6354:	d9800f17 	ldw	r6,60(sp)
    6358:	d9c01017 	ldw	r7,64(sp)
    635c:	1009883a 	mov	r4,r2
    6360:	180b883a 	mov	r5,r3
    6364:	000d30c0 	call	d30c <__muldf3>
    6368:	01d00734 	movhi	r7,16412
    636c:	000d883a 	mov	r6,zero
    6370:	1009883a 	mov	r4,r2
    6374:	180b883a 	mov	r5,r3
    6378:	000bf200 	call	bf20 <__adddf3>
    637c:	d9c00517 	ldw	r7,20(sp)
    6380:	047f3034 	movhi	r17,64704
    6384:	1021883a 	mov	r16,r2
    6388:	39ffffc4 	addi	r7,r7,-1
    638c:	d9c01315 	stw	r7,76(sp)
    6390:	1c63883a 	add	r17,r3,r17
    6394:	db000c17 	ldw	r12,48(sp)
    6398:	003bea06 	br	5344 <__alt_data_end+0xff005344>
    639c:	dc000915 	stw	r16,36(sp)
    63a0:	003e0e06 	br	5bdc <__alt_data_end+0xff005bdc>
    63a4:	01000e44 	movi	r4,57
    63a8:	8825883a 	mov	r18,r17
    63ac:	9dc00044 	addi	r23,r19,1
    63b0:	99000005 	stb	r4,0(r19)
    63b4:	a023883a 	mov	r17,r20
    63b8:	dc000915 	stw	r16,36(sp)
    63bc:	003da406 	br	5a50 <__alt_data_end+0xff005a50>
    63c0:	d9801417 	ldw	r6,80(sp)
    63c4:	d9c01517 	ldw	r7,84(sp)
    63c8:	0009883a 	mov	r4,zero
    63cc:	014ff834 	movhi	r5,16352
    63d0:	000da240 	call	da24 <__subdf3>
    63d4:	880d883a 	mov	r6,r17
    63d8:	a00f883a 	mov	r7,r20
    63dc:	1009883a 	mov	r4,r2
    63e0:	180b883a 	mov	r5,r3
    63e4:	000d13c0 	call	d13c <__gedf2>
    63e8:	00bc7c0e 	bge	zero,r2,55dc <__alt_data_end+0xff0055dc>
    63ec:	01000c04 	movi	r4,48
    63f0:	00000106 	br	63f8 <_dtoa_r+0x1580>
    63f4:	102f883a 	mov	r23,r2
    63f8:	b8bfffc4 	addi	r2,r23,-1
    63fc:	10c00007 	ldb	r3,0(r2)
    6400:	193ffc26 	beq	r3,r4,63f4 <__alt_data_end+0xff0063f4>
    6404:	d9801317 	ldw	r6,76(sp)
    6408:	d9800515 	stw	r6,20(sp)
    640c:	003c4406 	br	5520 <__alt_data_end+0xff005520>
    6410:	d9801317 	ldw	r6,76(sp)
    6414:	d9800515 	stw	r6,20(sp)
    6418:	003cea06 	br	57c4 <__alt_data_end+0xff0057c4>
    641c:	dd800f17 	ldw	r22,60(sp)
    6420:	dcc01017 	ldw	r19,64(sp)
    6424:	dc801217 	ldw	r18,72(sp)
    6428:	003c6c06 	br	55dc <__alt_data_end+0xff0055dc>
    642c:	903e031e 	bne	r18,zero,5c3c <__alt_data_end+0xff005c3c>
    6430:	003ebb06 	br	5f20 <__alt_data_end+0xff005f20>
    6434:	103e6c1e 	bne	r2,zero,5de8 <__alt_data_end+0xff005de8>
    6438:	4080004c 	andi	r2,r8,1
    643c:	103e6a26 	beq	r2,zero,5de8 <__alt_data_end+0xff005de8>
    6440:	003e6606 	br	5ddc <__alt_data_end+0xff005ddc>
    6444:	d8c00317 	ldw	r3,12(sp)
    6448:	00800084 	movi	r2,2
    644c:	10c02916 	blt	r2,r3,64f4 <_dtoa_r+0x167c>
    6450:	d9000c17 	ldw	r4,48(sp)
    6454:	003e8806 	br	5e78 <__alt_data_end+0xff005e78>
    6458:	04000084 	movi	r16,2
    645c:	003b9d06 	br	52d4 <__alt_data_end+0xff0052d4>
    6460:	d9001317 	ldw	r4,76(sp)
    6464:	d9000515 	stw	r4,20(sp)
    6468:	003cd606 	br	57c4 <__alt_data_end+0xff0057c4>
    646c:	d8801317 	ldw	r2,76(sp)
    6470:	d8800515 	stw	r2,20(sp)
    6474:	003c2a06 	br	5520 <__alt_data_end+0xff005520>
    6478:	d9800317 	ldw	r6,12(sp)
    647c:	00800084 	movi	r2,2
    6480:	11801516 	blt	r2,r6,64d8 <_dtoa_r+0x1660>
    6484:	d9c00c17 	ldw	r7,48(sp)
    6488:	d9c00615 	stw	r7,24(sp)
    648c:	003df706 	br	5c6c <__alt_data_end+0xff005c6c>
    6490:	193d3926 	beq	r3,r4,5978 <__alt_data_end+0xff005978>
    6494:	00c00f04 	movi	r3,60
    6498:	1885c83a 	sub	r2,r3,r2
    649c:	003ddf06 	br	5c1c <__alt_data_end+0xff005c1c>
    64a0:	e009883a 	mov	r4,fp
    64a4:	e0001115 	stw	zero,68(fp)
    64a8:	000b883a 	mov	r5,zero
    64ac:	0007d080 	call	7d08 <_Balloc>
    64b0:	d8800715 	stw	r2,28(sp)
    64b4:	d8c00717 	ldw	r3,28(sp)
    64b8:	00bfffc4 	movi	r2,-1
    64bc:	01000044 	movi	r4,1
    64c0:	d8800c15 	stw	r2,48(sp)
    64c4:	e0c01015 	stw	r3,64(fp)
    64c8:	d9000b15 	stw	r4,44(sp)
    64cc:	d8800615 	stw	r2,24(sp)
    64d0:	d8002215 	stw	zero,136(sp)
    64d4:	003c4106 	br	55dc <__alt_data_end+0xff0055dc>
    64d8:	d8c00c17 	ldw	r3,48(sp)
    64dc:	d8c00615 	stw	r3,24(sp)
    64e0:	003e7006 	br	5ea4 <__alt_data_end+0xff005ea4>
    64e4:	04400044 	movi	r17,1
    64e8:	003b2006 	br	516c <__alt_data_end+0xff00516c>
    64ec:	000b883a 	mov	r5,zero
    64f0:	003b3d06 	br	51e8 <__alt_data_end+0xff0051e8>
    64f4:	d8800c17 	ldw	r2,48(sp)
    64f8:	d8800615 	stw	r2,24(sp)
    64fc:	003e6906 	br	5ea4 <__alt_data_end+0xff005ea4>

00006500 <__sflush_r>:
    6500:	2880030b 	ldhu	r2,12(r5)
    6504:	defffb04 	addi	sp,sp,-20
    6508:	dcc00315 	stw	r19,12(sp)
    650c:	dc400115 	stw	r17,4(sp)
    6510:	dfc00415 	stw	ra,16(sp)
    6514:	dc800215 	stw	r18,8(sp)
    6518:	dc000015 	stw	r16,0(sp)
    651c:	10c0020c 	andi	r3,r2,8
    6520:	2823883a 	mov	r17,r5
    6524:	2027883a 	mov	r19,r4
    6528:	1800311e 	bne	r3,zero,65f0 <__sflush_r+0xf0>
    652c:	28c00117 	ldw	r3,4(r5)
    6530:	10820014 	ori	r2,r2,2048
    6534:	2880030d 	sth	r2,12(r5)
    6538:	00c04b0e 	bge	zero,r3,6668 <__sflush_r+0x168>
    653c:	8a000a17 	ldw	r8,40(r17)
    6540:	40002326 	beq	r8,zero,65d0 <__sflush_r+0xd0>
    6544:	9c000017 	ldw	r16,0(r19)
    6548:	10c4000c 	andi	r3,r2,4096
    654c:	98000015 	stw	zero,0(r19)
    6550:	18004826 	beq	r3,zero,6674 <__sflush_r+0x174>
    6554:	89801417 	ldw	r6,80(r17)
    6558:	10c0010c 	andi	r3,r2,4
    655c:	18000626 	beq	r3,zero,6578 <__sflush_r+0x78>
    6560:	88c00117 	ldw	r3,4(r17)
    6564:	88800c17 	ldw	r2,48(r17)
    6568:	30cdc83a 	sub	r6,r6,r3
    656c:	10000226 	beq	r2,zero,6578 <__sflush_r+0x78>
    6570:	88800f17 	ldw	r2,60(r17)
    6574:	308dc83a 	sub	r6,r6,r2
    6578:	89400717 	ldw	r5,28(r17)
    657c:	000f883a 	mov	r7,zero
    6580:	9809883a 	mov	r4,r19
    6584:	403ee83a 	callr	r8
    6588:	00ffffc4 	movi	r3,-1
    658c:	10c04426 	beq	r2,r3,66a0 <__sflush_r+0x1a0>
    6590:	88c0030b 	ldhu	r3,12(r17)
    6594:	89000417 	ldw	r4,16(r17)
    6598:	88000115 	stw	zero,4(r17)
    659c:	197dffcc 	andi	r5,r3,63487
    65a0:	8940030d 	sth	r5,12(r17)
    65a4:	89000015 	stw	r4,0(r17)
    65a8:	18c4000c 	andi	r3,r3,4096
    65ac:	18002c1e 	bne	r3,zero,6660 <__sflush_r+0x160>
    65b0:	89400c17 	ldw	r5,48(r17)
    65b4:	9c000015 	stw	r16,0(r19)
    65b8:	28000526 	beq	r5,zero,65d0 <__sflush_r+0xd0>
    65bc:	88801004 	addi	r2,r17,64
    65c0:	28800226 	beq	r5,r2,65cc <__sflush_r+0xcc>
    65c4:	9809883a 	mov	r4,r19
    65c8:	0006c6c0 	call	6c6c <_free_r>
    65cc:	88000c15 	stw	zero,48(r17)
    65d0:	0005883a 	mov	r2,zero
    65d4:	dfc00417 	ldw	ra,16(sp)
    65d8:	dcc00317 	ldw	r19,12(sp)
    65dc:	dc800217 	ldw	r18,8(sp)
    65e0:	dc400117 	ldw	r17,4(sp)
    65e4:	dc000017 	ldw	r16,0(sp)
    65e8:	dec00504 	addi	sp,sp,20
    65ec:	f800283a 	ret
    65f0:	2c800417 	ldw	r18,16(r5)
    65f4:	903ff626 	beq	r18,zero,65d0 <__alt_data_end+0xff0065d0>
    65f8:	2c000017 	ldw	r16,0(r5)
    65fc:	108000cc 	andi	r2,r2,3
    6600:	2c800015 	stw	r18,0(r5)
    6604:	84a1c83a 	sub	r16,r16,r18
    6608:	1000131e 	bne	r2,zero,6658 <__sflush_r+0x158>
    660c:	28800517 	ldw	r2,20(r5)
    6610:	88800215 	stw	r2,8(r17)
    6614:	04000316 	blt	zero,r16,6624 <__sflush_r+0x124>
    6618:	003fed06 	br	65d0 <__alt_data_end+0xff0065d0>
    661c:	90a5883a 	add	r18,r18,r2
    6620:	043feb0e 	bge	zero,r16,65d0 <__alt_data_end+0xff0065d0>
    6624:	88800917 	ldw	r2,36(r17)
    6628:	89400717 	ldw	r5,28(r17)
    662c:	800f883a 	mov	r7,r16
    6630:	900d883a 	mov	r6,r18
    6634:	9809883a 	mov	r4,r19
    6638:	103ee83a 	callr	r2
    663c:	80a1c83a 	sub	r16,r16,r2
    6640:	00bff616 	blt	zero,r2,661c <__alt_data_end+0xff00661c>
    6644:	88c0030b 	ldhu	r3,12(r17)
    6648:	00bfffc4 	movi	r2,-1
    664c:	18c01014 	ori	r3,r3,64
    6650:	88c0030d 	sth	r3,12(r17)
    6654:	003fdf06 	br	65d4 <__alt_data_end+0xff0065d4>
    6658:	0005883a 	mov	r2,zero
    665c:	003fec06 	br	6610 <__alt_data_end+0xff006610>
    6660:	88801415 	stw	r2,80(r17)
    6664:	003fd206 	br	65b0 <__alt_data_end+0xff0065b0>
    6668:	28c00f17 	ldw	r3,60(r5)
    666c:	00ffb316 	blt	zero,r3,653c <__alt_data_end+0xff00653c>
    6670:	003fd706 	br	65d0 <__alt_data_end+0xff0065d0>
    6674:	89400717 	ldw	r5,28(r17)
    6678:	000d883a 	mov	r6,zero
    667c:	01c00044 	movi	r7,1
    6680:	9809883a 	mov	r4,r19
    6684:	403ee83a 	callr	r8
    6688:	100d883a 	mov	r6,r2
    668c:	00bfffc4 	movi	r2,-1
    6690:	30801426 	beq	r6,r2,66e4 <__sflush_r+0x1e4>
    6694:	8880030b 	ldhu	r2,12(r17)
    6698:	8a000a17 	ldw	r8,40(r17)
    669c:	003fae06 	br	6558 <__alt_data_end+0xff006558>
    66a0:	98c00017 	ldw	r3,0(r19)
    66a4:	183fba26 	beq	r3,zero,6590 <__alt_data_end+0xff006590>
    66a8:	01000744 	movi	r4,29
    66ac:	19000626 	beq	r3,r4,66c8 <__sflush_r+0x1c8>
    66b0:	01000584 	movi	r4,22
    66b4:	19000426 	beq	r3,r4,66c8 <__sflush_r+0x1c8>
    66b8:	88c0030b 	ldhu	r3,12(r17)
    66bc:	18c01014 	ori	r3,r3,64
    66c0:	88c0030d 	sth	r3,12(r17)
    66c4:	003fc306 	br	65d4 <__alt_data_end+0xff0065d4>
    66c8:	8880030b 	ldhu	r2,12(r17)
    66cc:	88c00417 	ldw	r3,16(r17)
    66d0:	88000115 	stw	zero,4(r17)
    66d4:	10bdffcc 	andi	r2,r2,63487
    66d8:	8880030d 	sth	r2,12(r17)
    66dc:	88c00015 	stw	r3,0(r17)
    66e0:	003fb306 	br	65b0 <__alt_data_end+0xff0065b0>
    66e4:	98800017 	ldw	r2,0(r19)
    66e8:	103fea26 	beq	r2,zero,6694 <__alt_data_end+0xff006694>
    66ec:	00c00744 	movi	r3,29
    66f0:	10c00226 	beq	r2,r3,66fc <__sflush_r+0x1fc>
    66f4:	00c00584 	movi	r3,22
    66f8:	10c0031e 	bne	r2,r3,6708 <__sflush_r+0x208>
    66fc:	9c000015 	stw	r16,0(r19)
    6700:	0005883a 	mov	r2,zero
    6704:	003fb306 	br	65d4 <__alt_data_end+0xff0065d4>
    6708:	88c0030b 	ldhu	r3,12(r17)
    670c:	3005883a 	mov	r2,r6
    6710:	18c01014 	ori	r3,r3,64
    6714:	88c0030d 	sth	r3,12(r17)
    6718:	003fae06 	br	65d4 <__alt_data_end+0xff0065d4>

0000671c <_fflush_r>:
    671c:	defffd04 	addi	sp,sp,-12
    6720:	dc000115 	stw	r16,4(sp)
    6724:	dfc00215 	stw	ra,8(sp)
    6728:	2021883a 	mov	r16,r4
    672c:	20000226 	beq	r4,zero,6738 <_fflush_r+0x1c>
    6730:	20800e17 	ldw	r2,56(r4)
    6734:	10000c26 	beq	r2,zero,6768 <_fflush_r+0x4c>
    6738:	2880030f 	ldh	r2,12(r5)
    673c:	1000051e 	bne	r2,zero,6754 <_fflush_r+0x38>
    6740:	0005883a 	mov	r2,zero
    6744:	dfc00217 	ldw	ra,8(sp)
    6748:	dc000117 	ldw	r16,4(sp)
    674c:	dec00304 	addi	sp,sp,12
    6750:	f800283a 	ret
    6754:	8009883a 	mov	r4,r16
    6758:	dfc00217 	ldw	ra,8(sp)
    675c:	dc000117 	ldw	r16,4(sp)
    6760:	dec00304 	addi	sp,sp,12
    6764:	00065001 	jmpi	6500 <__sflush_r>
    6768:	d9400015 	stw	r5,0(sp)
    676c:	0006af80 	call	6af8 <__sinit>
    6770:	d9400017 	ldw	r5,0(sp)
    6774:	003ff006 	br	6738 <__alt_data_end+0xff006738>

00006778 <fflush>:
    6778:	20000526 	beq	r4,zero,6790 <fflush+0x18>
    677c:	00800074 	movhi	r2,1
    6780:	108cd604 	addi	r2,r2,13144
    6784:	200b883a 	mov	r5,r4
    6788:	11000017 	ldw	r4,0(r2)
    678c:	000671c1 	jmpi	671c <_fflush_r>
    6790:	00800074 	movhi	r2,1
    6794:	108cd504 	addi	r2,r2,13140
    6798:	11000017 	ldw	r4,0(r2)
    679c:	01400034 	movhi	r5,0
    67a0:	2959c704 	addi	r5,r5,26396
    67a4:	00074fc1 	jmpi	74fc <_fwalk_reent>

000067a8 <__fp_unlock>:
    67a8:	0005883a 	mov	r2,zero
    67ac:	f800283a 	ret

000067b0 <_cleanup_r>:
    67b0:	01400074 	movhi	r5,1
    67b4:	296b2d04 	addi	r5,r5,-21324
    67b8:	00074fc1 	jmpi	74fc <_fwalk_reent>

000067bc <__sinit.part.1>:
    67bc:	defff704 	addi	sp,sp,-36
    67c0:	00c00034 	movhi	r3,0
    67c4:	dfc00815 	stw	ra,32(sp)
    67c8:	ddc00715 	stw	r23,28(sp)
    67cc:	dd800615 	stw	r22,24(sp)
    67d0:	dd400515 	stw	r21,20(sp)
    67d4:	dd000415 	stw	r20,16(sp)
    67d8:	dcc00315 	stw	r19,12(sp)
    67dc:	dc800215 	stw	r18,8(sp)
    67e0:	dc400115 	stw	r17,4(sp)
    67e4:	dc000015 	stw	r16,0(sp)
    67e8:	18d9ec04 	addi	r3,r3,26544
    67ec:	24000117 	ldw	r16,4(r4)
    67f0:	20c00f15 	stw	r3,60(r4)
    67f4:	2080bb04 	addi	r2,r4,748
    67f8:	00c000c4 	movi	r3,3
    67fc:	20c0b915 	stw	r3,740(r4)
    6800:	2080ba15 	stw	r2,744(r4)
    6804:	2000b815 	stw	zero,736(r4)
    6808:	05c00204 	movi	r23,8
    680c:	00800104 	movi	r2,4
    6810:	2025883a 	mov	r18,r4
    6814:	b80d883a 	mov	r6,r23
    6818:	81001704 	addi	r4,r16,92
    681c:	000b883a 	mov	r5,zero
    6820:	80000015 	stw	zero,0(r16)
    6824:	80000115 	stw	zero,4(r16)
    6828:	80000215 	stw	zero,8(r16)
    682c:	8080030d 	sth	r2,12(r16)
    6830:	80001915 	stw	zero,100(r16)
    6834:	8000038d 	sth	zero,14(r16)
    6838:	80000415 	stw	zero,16(r16)
    683c:	80000515 	stw	zero,20(r16)
    6840:	80000615 	stw	zero,24(r16)
    6844:	0007be00 	call	7be0 <memset>
    6848:	05800074 	movhi	r22,1
    684c:	94400217 	ldw	r17,8(r18)
    6850:	05400074 	movhi	r21,1
    6854:	05000074 	movhi	r20,1
    6858:	04c00074 	movhi	r19,1
    685c:	b5a4b704 	addi	r22,r22,-27940
    6860:	ad64ce04 	addi	r21,r21,-27848
    6864:	a524ed04 	addi	r20,r20,-27724
    6868:	9ce50404 	addi	r19,r19,-27632
    686c:	85800815 	stw	r22,32(r16)
    6870:	85400915 	stw	r21,36(r16)
    6874:	85000a15 	stw	r20,40(r16)
    6878:	84c00b15 	stw	r19,44(r16)
    687c:	84000715 	stw	r16,28(r16)
    6880:	00800284 	movi	r2,10
    6884:	8880030d 	sth	r2,12(r17)
    6888:	00800044 	movi	r2,1
    688c:	b80d883a 	mov	r6,r23
    6890:	89001704 	addi	r4,r17,92
    6894:	000b883a 	mov	r5,zero
    6898:	88000015 	stw	zero,0(r17)
    689c:	88000115 	stw	zero,4(r17)
    68a0:	88000215 	stw	zero,8(r17)
    68a4:	88001915 	stw	zero,100(r17)
    68a8:	8880038d 	sth	r2,14(r17)
    68ac:	88000415 	stw	zero,16(r17)
    68b0:	88000515 	stw	zero,20(r17)
    68b4:	88000615 	stw	zero,24(r17)
    68b8:	0007be00 	call	7be0 <memset>
    68bc:	94000317 	ldw	r16,12(r18)
    68c0:	00800484 	movi	r2,18
    68c4:	8c400715 	stw	r17,28(r17)
    68c8:	8d800815 	stw	r22,32(r17)
    68cc:	8d400915 	stw	r21,36(r17)
    68d0:	8d000a15 	stw	r20,40(r17)
    68d4:	8cc00b15 	stw	r19,44(r17)
    68d8:	8080030d 	sth	r2,12(r16)
    68dc:	00800084 	movi	r2,2
    68e0:	80000015 	stw	zero,0(r16)
    68e4:	80000115 	stw	zero,4(r16)
    68e8:	80000215 	stw	zero,8(r16)
    68ec:	80001915 	stw	zero,100(r16)
    68f0:	8080038d 	sth	r2,14(r16)
    68f4:	80000415 	stw	zero,16(r16)
    68f8:	80000515 	stw	zero,20(r16)
    68fc:	80000615 	stw	zero,24(r16)
    6900:	b80d883a 	mov	r6,r23
    6904:	000b883a 	mov	r5,zero
    6908:	81001704 	addi	r4,r16,92
    690c:	0007be00 	call	7be0 <memset>
    6910:	00800044 	movi	r2,1
    6914:	84000715 	stw	r16,28(r16)
    6918:	85800815 	stw	r22,32(r16)
    691c:	85400915 	stw	r21,36(r16)
    6920:	85000a15 	stw	r20,40(r16)
    6924:	84c00b15 	stw	r19,44(r16)
    6928:	90800e15 	stw	r2,56(r18)
    692c:	dfc00817 	ldw	ra,32(sp)
    6930:	ddc00717 	ldw	r23,28(sp)
    6934:	dd800617 	ldw	r22,24(sp)
    6938:	dd400517 	ldw	r21,20(sp)
    693c:	dd000417 	ldw	r20,16(sp)
    6940:	dcc00317 	ldw	r19,12(sp)
    6944:	dc800217 	ldw	r18,8(sp)
    6948:	dc400117 	ldw	r17,4(sp)
    694c:	dc000017 	ldw	r16,0(sp)
    6950:	dec00904 	addi	sp,sp,36
    6954:	f800283a 	ret

00006958 <__fp_lock>:
    6958:	0005883a 	mov	r2,zero
    695c:	f800283a 	ret

00006960 <__sfmoreglue>:
    6960:	defffc04 	addi	sp,sp,-16
    6964:	dc400115 	stw	r17,4(sp)
    6968:	2c7fffc4 	addi	r17,r5,-1
    696c:	8c401a24 	muli	r17,r17,104
    6970:	dc800215 	stw	r18,8(sp)
    6974:	2825883a 	mov	r18,r5
    6978:	89401d04 	addi	r5,r17,116
    697c:	dc000015 	stw	r16,0(sp)
    6980:	dfc00315 	stw	ra,12(sp)
    6984:	0001e1c0 	call	1e1c <_malloc_r>
    6988:	1021883a 	mov	r16,r2
    698c:	10000726 	beq	r2,zero,69ac <__sfmoreglue+0x4c>
    6990:	11000304 	addi	r4,r2,12
    6994:	10000015 	stw	zero,0(r2)
    6998:	14800115 	stw	r18,4(r2)
    699c:	11000215 	stw	r4,8(r2)
    69a0:	89801a04 	addi	r6,r17,104
    69a4:	000b883a 	mov	r5,zero
    69a8:	0007be00 	call	7be0 <memset>
    69ac:	8005883a 	mov	r2,r16
    69b0:	dfc00317 	ldw	ra,12(sp)
    69b4:	dc800217 	ldw	r18,8(sp)
    69b8:	dc400117 	ldw	r17,4(sp)
    69bc:	dc000017 	ldw	r16,0(sp)
    69c0:	dec00404 	addi	sp,sp,16
    69c4:	f800283a 	ret

000069c8 <__sfp>:
    69c8:	defffb04 	addi	sp,sp,-20
    69cc:	dc000015 	stw	r16,0(sp)
    69d0:	04000074 	movhi	r16,1
    69d4:	840cd504 	addi	r16,r16,13140
    69d8:	dcc00315 	stw	r19,12(sp)
    69dc:	2027883a 	mov	r19,r4
    69e0:	81000017 	ldw	r4,0(r16)
    69e4:	dfc00415 	stw	ra,16(sp)
    69e8:	dc800215 	stw	r18,8(sp)
    69ec:	20800e17 	ldw	r2,56(r4)
    69f0:	dc400115 	stw	r17,4(sp)
    69f4:	1000021e 	bne	r2,zero,6a00 <__sfp+0x38>
    69f8:	00067bc0 	call	67bc <__sinit.part.1>
    69fc:	81000017 	ldw	r4,0(r16)
    6a00:	2480b804 	addi	r18,r4,736
    6a04:	047fffc4 	movi	r17,-1
    6a08:	91000117 	ldw	r4,4(r18)
    6a0c:	94000217 	ldw	r16,8(r18)
    6a10:	213fffc4 	addi	r4,r4,-1
    6a14:	20000a16 	blt	r4,zero,6a40 <__sfp+0x78>
    6a18:	8080030f 	ldh	r2,12(r16)
    6a1c:	10000c26 	beq	r2,zero,6a50 <__sfp+0x88>
    6a20:	80c01d04 	addi	r3,r16,116
    6a24:	00000206 	br	6a30 <__sfp+0x68>
    6a28:	18bfe60f 	ldh	r2,-104(r3)
    6a2c:	10000826 	beq	r2,zero,6a50 <__sfp+0x88>
    6a30:	213fffc4 	addi	r4,r4,-1
    6a34:	1c3ffd04 	addi	r16,r3,-12
    6a38:	18c01a04 	addi	r3,r3,104
    6a3c:	247ffa1e 	bne	r4,r17,6a28 <__alt_data_end+0xff006a28>
    6a40:	90800017 	ldw	r2,0(r18)
    6a44:	10001d26 	beq	r2,zero,6abc <__sfp+0xf4>
    6a48:	1025883a 	mov	r18,r2
    6a4c:	003fee06 	br	6a08 <__alt_data_end+0xff006a08>
    6a50:	00bfffc4 	movi	r2,-1
    6a54:	8080038d 	sth	r2,14(r16)
    6a58:	00800044 	movi	r2,1
    6a5c:	8080030d 	sth	r2,12(r16)
    6a60:	80001915 	stw	zero,100(r16)
    6a64:	80000015 	stw	zero,0(r16)
    6a68:	80000215 	stw	zero,8(r16)
    6a6c:	80000115 	stw	zero,4(r16)
    6a70:	80000415 	stw	zero,16(r16)
    6a74:	80000515 	stw	zero,20(r16)
    6a78:	80000615 	stw	zero,24(r16)
    6a7c:	01800204 	movi	r6,8
    6a80:	000b883a 	mov	r5,zero
    6a84:	81001704 	addi	r4,r16,92
    6a88:	0007be00 	call	7be0 <memset>
    6a8c:	8005883a 	mov	r2,r16
    6a90:	80000c15 	stw	zero,48(r16)
    6a94:	80000d15 	stw	zero,52(r16)
    6a98:	80001115 	stw	zero,68(r16)
    6a9c:	80001215 	stw	zero,72(r16)
    6aa0:	dfc00417 	ldw	ra,16(sp)
    6aa4:	dcc00317 	ldw	r19,12(sp)
    6aa8:	dc800217 	ldw	r18,8(sp)
    6aac:	dc400117 	ldw	r17,4(sp)
    6ab0:	dc000017 	ldw	r16,0(sp)
    6ab4:	dec00504 	addi	sp,sp,20
    6ab8:	f800283a 	ret
    6abc:	01400104 	movi	r5,4
    6ac0:	9809883a 	mov	r4,r19
    6ac4:	00069600 	call	6960 <__sfmoreglue>
    6ac8:	90800015 	stw	r2,0(r18)
    6acc:	103fde1e 	bne	r2,zero,6a48 <__alt_data_end+0xff006a48>
    6ad0:	00800304 	movi	r2,12
    6ad4:	98800015 	stw	r2,0(r19)
    6ad8:	0005883a 	mov	r2,zero
    6adc:	003ff006 	br	6aa0 <__alt_data_end+0xff006aa0>

00006ae0 <_cleanup>:
    6ae0:	00800074 	movhi	r2,1
    6ae4:	108cd504 	addi	r2,r2,13140
    6ae8:	11000017 	ldw	r4,0(r2)
    6aec:	01400074 	movhi	r5,1
    6af0:	296b2d04 	addi	r5,r5,-21324
    6af4:	00074fc1 	jmpi	74fc <_fwalk_reent>

00006af8 <__sinit>:
    6af8:	20800e17 	ldw	r2,56(r4)
    6afc:	10000126 	beq	r2,zero,6b04 <__sinit+0xc>
    6b00:	f800283a 	ret
    6b04:	00067bc1 	jmpi	67bc <__sinit.part.1>

00006b08 <__sfp_lock_acquire>:
    6b08:	f800283a 	ret

00006b0c <__sfp_lock_release>:
    6b0c:	f800283a 	ret

00006b10 <__sinit_lock_acquire>:
    6b10:	f800283a 	ret

00006b14 <__sinit_lock_release>:
    6b14:	f800283a 	ret

00006b18 <__fp_lock_all>:
    6b18:	00800074 	movhi	r2,1
    6b1c:	108cd604 	addi	r2,r2,13144
    6b20:	11000017 	ldw	r4,0(r2)
    6b24:	01400034 	movhi	r5,0
    6b28:	295a5604 	addi	r5,r5,26968
    6b2c:	00074381 	jmpi	7438 <_fwalk>

00006b30 <__fp_unlock_all>:
    6b30:	00800074 	movhi	r2,1
    6b34:	108cd604 	addi	r2,r2,13144
    6b38:	11000017 	ldw	r4,0(r2)
    6b3c:	01400034 	movhi	r5,0
    6b40:	2959ea04 	addi	r5,r5,26536
    6b44:	00074381 	jmpi	7438 <_fwalk>

00006b48 <_malloc_trim_r>:
    6b48:	defffb04 	addi	sp,sp,-20
    6b4c:	dcc00315 	stw	r19,12(sp)
    6b50:	04c00074 	movhi	r19,1
    6b54:	dc800215 	stw	r18,8(sp)
    6b58:	dc400115 	stw	r17,4(sp)
    6b5c:	dc000015 	stw	r16,0(sp)
    6b60:	dfc00415 	stw	ra,16(sp)
    6b64:	2821883a 	mov	r16,r5
    6b68:	9cc62804 	addi	r19,r19,6304
    6b6c:	2025883a 	mov	r18,r4
    6b70:	000eb040 	call	eb04 <__malloc_lock>
    6b74:	98800217 	ldw	r2,8(r19)
    6b78:	14400117 	ldw	r17,4(r2)
    6b7c:	00bfff04 	movi	r2,-4
    6b80:	88a2703a 	and	r17,r17,r2
    6b84:	8c21c83a 	sub	r16,r17,r16
    6b88:	8403fbc4 	addi	r16,r16,4079
    6b8c:	8020d33a 	srli	r16,r16,12
    6b90:	0083ffc4 	movi	r2,4095
    6b94:	843fffc4 	addi	r16,r16,-1
    6b98:	8020933a 	slli	r16,r16,12
    6b9c:	1400060e 	bge	r2,r16,6bb8 <_malloc_trim_r+0x70>
    6ba0:	000b883a 	mov	r5,zero
    6ba4:	9009883a 	mov	r4,r18
    6ba8:	00027680 	call	2768 <_sbrk_r>
    6bac:	98c00217 	ldw	r3,8(r19)
    6bb0:	1c47883a 	add	r3,r3,r17
    6bb4:	10c00a26 	beq	r2,r3,6be0 <_malloc_trim_r+0x98>
    6bb8:	9009883a 	mov	r4,r18
    6bbc:	000eb280 	call	eb28 <__malloc_unlock>
    6bc0:	0005883a 	mov	r2,zero
    6bc4:	dfc00417 	ldw	ra,16(sp)
    6bc8:	dcc00317 	ldw	r19,12(sp)
    6bcc:	dc800217 	ldw	r18,8(sp)
    6bd0:	dc400117 	ldw	r17,4(sp)
    6bd4:	dc000017 	ldw	r16,0(sp)
    6bd8:	dec00504 	addi	sp,sp,20
    6bdc:	f800283a 	ret
    6be0:	040bc83a 	sub	r5,zero,r16
    6be4:	9009883a 	mov	r4,r18
    6be8:	00027680 	call	2768 <_sbrk_r>
    6bec:	00ffffc4 	movi	r3,-1
    6bf0:	10c00d26 	beq	r2,r3,6c28 <_malloc_trim_r+0xe0>
    6bf4:	00c00074 	movhi	r3,1
    6bf8:	18d3f804 	addi	r3,r3,20448
    6bfc:	18800017 	ldw	r2,0(r3)
    6c00:	99000217 	ldw	r4,8(r19)
    6c04:	8c23c83a 	sub	r17,r17,r16
    6c08:	8c400054 	ori	r17,r17,1
    6c0c:	1421c83a 	sub	r16,r2,r16
    6c10:	24400115 	stw	r17,4(r4)
    6c14:	9009883a 	mov	r4,r18
    6c18:	1c000015 	stw	r16,0(r3)
    6c1c:	000eb280 	call	eb28 <__malloc_unlock>
    6c20:	00800044 	movi	r2,1
    6c24:	003fe706 	br	6bc4 <__alt_data_end+0xff006bc4>
    6c28:	000b883a 	mov	r5,zero
    6c2c:	9009883a 	mov	r4,r18
    6c30:	00027680 	call	2768 <_sbrk_r>
    6c34:	99000217 	ldw	r4,8(r19)
    6c38:	014003c4 	movi	r5,15
    6c3c:	1107c83a 	sub	r3,r2,r4
    6c40:	28ffdd0e 	bge	r5,r3,6bb8 <__alt_data_end+0xff006bb8>
    6c44:	01400074 	movhi	r5,1
    6c48:	294cd304 	addi	r5,r5,13132
    6c4c:	29400017 	ldw	r5,0(r5)
    6c50:	18c00054 	ori	r3,r3,1
    6c54:	20c00115 	stw	r3,4(r4)
    6c58:	00c00074 	movhi	r3,1
    6c5c:	1145c83a 	sub	r2,r2,r5
    6c60:	18d3f804 	addi	r3,r3,20448
    6c64:	18800015 	stw	r2,0(r3)
    6c68:	003fd306 	br	6bb8 <__alt_data_end+0xff006bb8>

00006c6c <_free_r>:
    6c6c:	28004126 	beq	r5,zero,6d74 <_free_r+0x108>
    6c70:	defffd04 	addi	sp,sp,-12
    6c74:	dc400115 	stw	r17,4(sp)
    6c78:	dc000015 	stw	r16,0(sp)
    6c7c:	2023883a 	mov	r17,r4
    6c80:	2821883a 	mov	r16,r5
    6c84:	dfc00215 	stw	ra,8(sp)
    6c88:	000eb040 	call	eb04 <__malloc_lock>
    6c8c:	81ffff17 	ldw	r7,-4(r16)
    6c90:	00bfff84 	movi	r2,-2
    6c94:	01000074 	movhi	r4,1
    6c98:	81bffe04 	addi	r6,r16,-8
    6c9c:	3884703a 	and	r2,r7,r2
    6ca0:	21062804 	addi	r4,r4,6304
    6ca4:	308b883a 	add	r5,r6,r2
    6ca8:	2a400117 	ldw	r9,4(r5)
    6cac:	22000217 	ldw	r8,8(r4)
    6cb0:	00ffff04 	movi	r3,-4
    6cb4:	48c6703a 	and	r3,r9,r3
    6cb8:	2a005726 	beq	r5,r8,6e18 <_free_r+0x1ac>
    6cbc:	28c00115 	stw	r3,4(r5)
    6cc0:	39c0004c 	andi	r7,r7,1
    6cc4:	3800091e 	bne	r7,zero,6cec <_free_r+0x80>
    6cc8:	823ffe17 	ldw	r8,-8(r16)
    6ccc:	22400204 	addi	r9,r4,8
    6cd0:	320dc83a 	sub	r6,r6,r8
    6cd4:	31c00217 	ldw	r7,8(r6)
    6cd8:	1205883a 	add	r2,r2,r8
    6cdc:	3a406526 	beq	r7,r9,6e74 <_free_r+0x208>
    6ce0:	32000317 	ldw	r8,12(r6)
    6ce4:	3a000315 	stw	r8,12(r7)
    6ce8:	41c00215 	stw	r7,8(r8)
    6cec:	28cf883a 	add	r7,r5,r3
    6cf0:	39c00117 	ldw	r7,4(r7)
    6cf4:	39c0004c 	andi	r7,r7,1
    6cf8:	38003a26 	beq	r7,zero,6de4 <_free_r+0x178>
    6cfc:	10c00054 	ori	r3,r2,1
    6d00:	30c00115 	stw	r3,4(r6)
    6d04:	3087883a 	add	r3,r6,r2
    6d08:	18800015 	stw	r2,0(r3)
    6d0c:	00c07fc4 	movi	r3,511
    6d10:	18801936 	bltu	r3,r2,6d78 <_free_r+0x10c>
    6d14:	1004d0fa 	srli	r2,r2,3
    6d18:	01c00044 	movi	r7,1
    6d1c:	21400117 	ldw	r5,4(r4)
    6d20:	10c00044 	addi	r3,r2,1
    6d24:	18c7883a 	add	r3,r3,r3
    6d28:	1005d0ba 	srai	r2,r2,2
    6d2c:	18c7883a 	add	r3,r3,r3
    6d30:	18c7883a 	add	r3,r3,r3
    6d34:	1907883a 	add	r3,r3,r4
    6d38:	3884983a 	sll	r2,r7,r2
    6d3c:	19c00017 	ldw	r7,0(r3)
    6d40:	1a3ffe04 	addi	r8,r3,-8
    6d44:	1144b03a 	or	r2,r2,r5
    6d48:	32000315 	stw	r8,12(r6)
    6d4c:	31c00215 	stw	r7,8(r6)
    6d50:	20800115 	stw	r2,4(r4)
    6d54:	19800015 	stw	r6,0(r3)
    6d58:	39800315 	stw	r6,12(r7)
    6d5c:	8809883a 	mov	r4,r17
    6d60:	dfc00217 	ldw	ra,8(sp)
    6d64:	dc400117 	ldw	r17,4(sp)
    6d68:	dc000017 	ldw	r16,0(sp)
    6d6c:	dec00304 	addi	sp,sp,12
    6d70:	000eb281 	jmpi	eb28 <__malloc_unlock>
    6d74:	f800283a 	ret
    6d78:	100ad27a 	srli	r5,r2,9
    6d7c:	00c00104 	movi	r3,4
    6d80:	19404a36 	bltu	r3,r5,6eac <_free_r+0x240>
    6d84:	100ad1ba 	srli	r5,r2,6
    6d88:	28c00e44 	addi	r3,r5,57
    6d8c:	18c7883a 	add	r3,r3,r3
    6d90:	29400e04 	addi	r5,r5,56
    6d94:	18c7883a 	add	r3,r3,r3
    6d98:	18c7883a 	add	r3,r3,r3
    6d9c:	1909883a 	add	r4,r3,r4
    6da0:	20c00017 	ldw	r3,0(r4)
    6da4:	01c00074 	movhi	r7,1
    6da8:	213ffe04 	addi	r4,r4,-8
    6dac:	39c62804 	addi	r7,r7,6304
    6db0:	20c04426 	beq	r4,r3,6ec4 <_free_r+0x258>
    6db4:	01ffff04 	movi	r7,-4
    6db8:	19400117 	ldw	r5,4(r3)
    6dbc:	29ca703a 	and	r5,r5,r7
    6dc0:	1140022e 	bgeu	r2,r5,6dcc <_free_r+0x160>
    6dc4:	18c00217 	ldw	r3,8(r3)
    6dc8:	20fffb1e 	bne	r4,r3,6db8 <__alt_data_end+0xff006db8>
    6dcc:	19000317 	ldw	r4,12(r3)
    6dd0:	31000315 	stw	r4,12(r6)
    6dd4:	30c00215 	stw	r3,8(r6)
    6dd8:	21800215 	stw	r6,8(r4)
    6ddc:	19800315 	stw	r6,12(r3)
    6de0:	003fde06 	br	6d5c <__alt_data_end+0xff006d5c>
    6de4:	29c00217 	ldw	r7,8(r5)
    6de8:	10c5883a 	add	r2,r2,r3
    6dec:	00c00074 	movhi	r3,1
    6df0:	18c62a04 	addi	r3,r3,6312
    6df4:	38c03b26 	beq	r7,r3,6ee4 <_free_r+0x278>
    6df8:	2a000317 	ldw	r8,12(r5)
    6dfc:	11400054 	ori	r5,r2,1
    6e00:	3087883a 	add	r3,r6,r2
    6e04:	3a000315 	stw	r8,12(r7)
    6e08:	41c00215 	stw	r7,8(r8)
    6e0c:	31400115 	stw	r5,4(r6)
    6e10:	18800015 	stw	r2,0(r3)
    6e14:	003fbd06 	br	6d0c <__alt_data_end+0xff006d0c>
    6e18:	39c0004c 	andi	r7,r7,1
    6e1c:	10c5883a 	add	r2,r2,r3
    6e20:	3800071e 	bne	r7,zero,6e40 <_free_r+0x1d4>
    6e24:	81fffe17 	ldw	r7,-8(r16)
    6e28:	31cdc83a 	sub	r6,r6,r7
    6e2c:	30c00317 	ldw	r3,12(r6)
    6e30:	31400217 	ldw	r5,8(r6)
    6e34:	11c5883a 	add	r2,r2,r7
    6e38:	28c00315 	stw	r3,12(r5)
    6e3c:	19400215 	stw	r5,8(r3)
    6e40:	10c00054 	ori	r3,r2,1
    6e44:	30c00115 	stw	r3,4(r6)
    6e48:	00c00074 	movhi	r3,1
    6e4c:	18ccd404 	addi	r3,r3,13136
    6e50:	18c00017 	ldw	r3,0(r3)
    6e54:	21800215 	stw	r6,8(r4)
    6e58:	10ffc036 	bltu	r2,r3,6d5c <__alt_data_end+0xff006d5c>
    6e5c:	00800074 	movhi	r2,1
    6e60:	1093ea04 	addi	r2,r2,20392
    6e64:	11400017 	ldw	r5,0(r2)
    6e68:	8809883a 	mov	r4,r17
    6e6c:	0006b480 	call	6b48 <_malloc_trim_r>
    6e70:	003fba06 	br	6d5c <__alt_data_end+0xff006d5c>
    6e74:	28c9883a 	add	r4,r5,r3
    6e78:	21000117 	ldw	r4,4(r4)
    6e7c:	2100004c 	andi	r4,r4,1
    6e80:	2000391e 	bne	r4,zero,6f68 <_free_r+0x2fc>
    6e84:	29c00217 	ldw	r7,8(r5)
    6e88:	29000317 	ldw	r4,12(r5)
    6e8c:	1885883a 	add	r2,r3,r2
    6e90:	10c00054 	ori	r3,r2,1
    6e94:	39000315 	stw	r4,12(r7)
    6e98:	21c00215 	stw	r7,8(r4)
    6e9c:	30c00115 	stw	r3,4(r6)
    6ea0:	308d883a 	add	r6,r6,r2
    6ea4:	30800015 	stw	r2,0(r6)
    6ea8:	003fac06 	br	6d5c <__alt_data_end+0xff006d5c>
    6eac:	00c00504 	movi	r3,20
    6eb0:	19401536 	bltu	r3,r5,6f08 <_free_r+0x29c>
    6eb4:	28c01704 	addi	r3,r5,92
    6eb8:	18c7883a 	add	r3,r3,r3
    6ebc:	294016c4 	addi	r5,r5,91
    6ec0:	003fb406 	br	6d94 <__alt_data_end+0xff006d94>
    6ec4:	280bd0ba 	srai	r5,r5,2
    6ec8:	00c00044 	movi	r3,1
    6ecc:	38800117 	ldw	r2,4(r7)
    6ed0:	194a983a 	sll	r5,r3,r5
    6ed4:	2007883a 	mov	r3,r4
    6ed8:	2884b03a 	or	r2,r5,r2
    6edc:	38800115 	stw	r2,4(r7)
    6ee0:	003fbb06 	br	6dd0 <__alt_data_end+0xff006dd0>
    6ee4:	21800515 	stw	r6,20(r4)
    6ee8:	21800415 	stw	r6,16(r4)
    6eec:	10c00054 	ori	r3,r2,1
    6ef0:	31c00315 	stw	r7,12(r6)
    6ef4:	31c00215 	stw	r7,8(r6)
    6ef8:	30c00115 	stw	r3,4(r6)
    6efc:	308d883a 	add	r6,r6,r2
    6f00:	30800015 	stw	r2,0(r6)
    6f04:	003f9506 	br	6d5c <__alt_data_end+0xff006d5c>
    6f08:	00c01504 	movi	r3,84
    6f0c:	19400536 	bltu	r3,r5,6f24 <_free_r+0x2b8>
    6f10:	100ad33a 	srli	r5,r2,12
    6f14:	28c01bc4 	addi	r3,r5,111
    6f18:	18c7883a 	add	r3,r3,r3
    6f1c:	29401b84 	addi	r5,r5,110
    6f20:	003f9c06 	br	6d94 <__alt_data_end+0xff006d94>
    6f24:	00c05504 	movi	r3,340
    6f28:	19400536 	bltu	r3,r5,6f40 <_free_r+0x2d4>
    6f2c:	100ad3fa 	srli	r5,r2,15
    6f30:	28c01e04 	addi	r3,r5,120
    6f34:	18c7883a 	add	r3,r3,r3
    6f38:	29401dc4 	addi	r5,r5,119
    6f3c:	003f9506 	br	6d94 <__alt_data_end+0xff006d94>
    6f40:	00c15504 	movi	r3,1364
    6f44:	19400536 	bltu	r3,r5,6f5c <_free_r+0x2f0>
    6f48:	100ad4ba 	srli	r5,r2,18
    6f4c:	28c01f44 	addi	r3,r5,125
    6f50:	18c7883a 	add	r3,r3,r3
    6f54:	29401f04 	addi	r5,r5,124
    6f58:	003f8e06 	br	6d94 <__alt_data_end+0xff006d94>
    6f5c:	00c03f84 	movi	r3,254
    6f60:	01401f84 	movi	r5,126
    6f64:	003f8b06 	br	6d94 <__alt_data_end+0xff006d94>
    6f68:	10c00054 	ori	r3,r2,1
    6f6c:	30c00115 	stw	r3,4(r6)
    6f70:	308d883a 	add	r6,r6,r2
    6f74:	30800015 	stw	r2,0(r6)
    6f78:	003f7806 	br	6d5c <__alt_data_end+0xff006d5c>

00006f7c <__sfvwrite_r>:
    6f7c:	30800217 	ldw	r2,8(r6)
    6f80:	10006726 	beq	r2,zero,7120 <__sfvwrite_r+0x1a4>
    6f84:	28c0030b 	ldhu	r3,12(r5)
    6f88:	defff404 	addi	sp,sp,-48
    6f8c:	dd400715 	stw	r21,28(sp)
    6f90:	dd000615 	stw	r20,24(sp)
    6f94:	dc000215 	stw	r16,8(sp)
    6f98:	dfc00b15 	stw	ra,44(sp)
    6f9c:	df000a15 	stw	fp,40(sp)
    6fa0:	ddc00915 	stw	r23,36(sp)
    6fa4:	dd800815 	stw	r22,32(sp)
    6fa8:	dcc00515 	stw	r19,20(sp)
    6fac:	dc800415 	stw	r18,16(sp)
    6fb0:	dc400315 	stw	r17,12(sp)
    6fb4:	1880020c 	andi	r2,r3,8
    6fb8:	2821883a 	mov	r16,r5
    6fbc:	202b883a 	mov	r21,r4
    6fc0:	3029883a 	mov	r20,r6
    6fc4:	10002726 	beq	r2,zero,7064 <__sfvwrite_r+0xe8>
    6fc8:	28800417 	ldw	r2,16(r5)
    6fcc:	10002526 	beq	r2,zero,7064 <__sfvwrite_r+0xe8>
    6fd0:	1880008c 	andi	r2,r3,2
    6fd4:	a4400017 	ldw	r17,0(r20)
    6fd8:	10002a26 	beq	r2,zero,7084 <__sfvwrite_r+0x108>
    6fdc:	05a00034 	movhi	r22,32768
    6fe0:	0027883a 	mov	r19,zero
    6fe4:	0025883a 	mov	r18,zero
    6fe8:	b5bf0004 	addi	r22,r22,-1024
    6fec:	980d883a 	mov	r6,r19
    6ff0:	a809883a 	mov	r4,r21
    6ff4:	90004626 	beq	r18,zero,7110 <__sfvwrite_r+0x194>
    6ff8:	900f883a 	mov	r7,r18
    6ffc:	b480022e 	bgeu	r22,r18,7008 <__sfvwrite_r+0x8c>
    7000:	01e00034 	movhi	r7,32768
    7004:	39ff0004 	addi	r7,r7,-1024
    7008:	80800917 	ldw	r2,36(r16)
    700c:	81400717 	ldw	r5,28(r16)
    7010:	103ee83a 	callr	r2
    7014:	0080570e 	bge	zero,r2,7174 <__sfvwrite_r+0x1f8>
    7018:	a0c00217 	ldw	r3,8(r20)
    701c:	98a7883a 	add	r19,r19,r2
    7020:	90a5c83a 	sub	r18,r18,r2
    7024:	1885c83a 	sub	r2,r3,r2
    7028:	a0800215 	stw	r2,8(r20)
    702c:	103fef1e 	bne	r2,zero,6fec <__alt_data_end+0xff006fec>
    7030:	0005883a 	mov	r2,zero
    7034:	dfc00b17 	ldw	ra,44(sp)
    7038:	df000a17 	ldw	fp,40(sp)
    703c:	ddc00917 	ldw	r23,36(sp)
    7040:	dd800817 	ldw	r22,32(sp)
    7044:	dd400717 	ldw	r21,28(sp)
    7048:	dd000617 	ldw	r20,24(sp)
    704c:	dcc00517 	ldw	r19,20(sp)
    7050:	dc800417 	ldw	r18,16(sp)
    7054:	dc400317 	ldw	r17,12(sp)
    7058:	dc000217 	ldw	r16,8(sp)
    705c:	dec00c04 	addi	sp,sp,48
    7060:	f800283a 	ret
    7064:	800b883a 	mov	r5,r16
    7068:	a809883a 	mov	r4,r21
    706c:	0004b240 	call	4b24 <__swsetup_r>
    7070:	1000eb1e 	bne	r2,zero,7420 <__sfvwrite_r+0x4a4>
    7074:	80c0030b 	ldhu	r3,12(r16)
    7078:	a4400017 	ldw	r17,0(r20)
    707c:	1880008c 	andi	r2,r3,2
    7080:	103fd61e 	bne	r2,zero,6fdc <__alt_data_end+0xff006fdc>
    7084:	1880004c 	andi	r2,r3,1
    7088:	10003f1e 	bne	r2,zero,7188 <__sfvwrite_r+0x20c>
    708c:	0039883a 	mov	fp,zero
    7090:	0025883a 	mov	r18,zero
    7094:	90001a26 	beq	r18,zero,7100 <__sfvwrite_r+0x184>
    7098:	1880800c 	andi	r2,r3,512
    709c:	84c00217 	ldw	r19,8(r16)
    70a0:	10002126 	beq	r2,zero,7128 <__sfvwrite_r+0x1ac>
    70a4:	982f883a 	mov	r23,r19
    70a8:	94c09336 	bltu	r18,r19,72f8 <__sfvwrite_r+0x37c>
    70ac:	1881200c 	andi	r2,r3,1152
    70b0:	10009e1e 	bne	r2,zero,732c <__sfvwrite_r+0x3b0>
    70b4:	81000017 	ldw	r4,0(r16)
    70b8:	b80d883a 	mov	r6,r23
    70bc:	e00b883a 	mov	r5,fp
    70c0:	0007a840 	call	7a84 <memmove>
    70c4:	80c00217 	ldw	r3,8(r16)
    70c8:	81000017 	ldw	r4,0(r16)
    70cc:	9005883a 	mov	r2,r18
    70d0:	1ce7c83a 	sub	r19,r3,r19
    70d4:	25cf883a 	add	r7,r4,r23
    70d8:	84c00215 	stw	r19,8(r16)
    70dc:	81c00015 	stw	r7,0(r16)
    70e0:	a0c00217 	ldw	r3,8(r20)
    70e4:	e0b9883a 	add	fp,fp,r2
    70e8:	90a5c83a 	sub	r18,r18,r2
    70ec:	18a7c83a 	sub	r19,r3,r2
    70f0:	a4c00215 	stw	r19,8(r20)
    70f4:	983fce26 	beq	r19,zero,7030 <__alt_data_end+0xff007030>
    70f8:	80c0030b 	ldhu	r3,12(r16)
    70fc:	903fe61e 	bne	r18,zero,7098 <__alt_data_end+0xff007098>
    7100:	8f000017 	ldw	fp,0(r17)
    7104:	8c800117 	ldw	r18,4(r17)
    7108:	8c400204 	addi	r17,r17,8
    710c:	003fe106 	br	7094 <__alt_data_end+0xff007094>
    7110:	8cc00017 	ldw	r19,0(r17)
    7114:	8c800117 	ldw	r18,4(r17)
    7118:	8c400204 	addi	r17,r17,8
    711c:	003fb306 	br	6fec <__alt_data_end+0xff006fec>
    7120:	0005883a 	mov	r2,zero
    7124:	f800283a 	ret
    7128:	81000017 	ldw	r4,0(r16)
    712c:	80800417 	ldw	r2,16(r16)
    7130:	11005736 	bltu	r2,r4,7290 <__sfvwrite_r+0x314>
    7134:	85c00517 	ldw	r23,20(r16)
    7138:	95c05536 	bltu	r18,r23,7290 <__sfvwrite_r+0x314>
    713c:	00a00034 	movhi	r2,32768
    7140:	10bfffc4 	addi	r2,r2,-1
    7144:	9009883a 	mov	r4,r18
    7148:	1480012e 	bgeu	r2,r18,7150 <__sfvwrite_r+0x1d4>
    714c:	1009883a 	mov	r4,r2
    7150:	b80b883a 	mov	r5,r23
    7154:	0001c400 	call	1c40 <__divsi3>
    7158:	15cf383a 	mul	r7,r2,r23
    715c:	81400717 	ldw	r5,28(r16)
    7160:	80800917 	ldw	r2,36(r16)
    7164:	e00d883a 	mov	r6,fp
    7168:	a809883a 	mov	r4,r21
    716c:	103ee83a 	callr	r2
    7170:	00bfdb16 	blt	zero,r2,70e0 <__alt_data_end+0xff0070e0>
    7174:	8080030b 	ldhu	r2,12(r16)
    7178:	10801014 	ori	r2,r2,64
    717c:	8080030d 	sth	r2,12(r16)
    7180:	00bfffc4 	movi	r2,-1
    7184:	003fab06 	br	7034 <__alt_data_end+0xff007034>
    7188:	0027883a 	mov	r19,zero
    718c:	0011883a 	mov	r8,zero
    7190:	0039883a 	mov	fp,zero
    7194:	0025883a 	mov	r18,zero
    7198:	90001f26 	beq	r18,zero,7218 <__sfvwrite_r+0x29c>
    719c:	40005a26 	beq	r8,zero,7308 <__sfvwrite_r+0x38c>
    71a0:	982d883a 	mov	r22,r19
    71a4:	94c0012e 	bgeu	r18,r19,71ac <__sfvwrite_r+0x230>
    71a8:	902d883a 	mov	r22,r18
    71ac:	81000017 	ldw	r4,0(r16)
    71b0:	80800417 	ldw	r2,16(r16)
    71b4:	b02f883a 	mov	r23,r22
    71b8:	81c00517 	ldw	r7,20(r16)
    71bc:	1100032e 	bgeu	r2,r4,71cc <__sfvwrite_r+0x250>
    71c0:	80c00217 	ldw	r3,8(r16)
    71c4:	38c7883a 	add	r3,r7,r3
    71c8:	1d801816 	blt	r3,r22,722c <__sfvwrite_r+0x2b0>
    71cc:	b1c03e16 	blt	r22,r7,72c8 <__sfvwrite_r+0x34c>
    71d0:	80800917 	ldw	r2,36(r16)
    71d4:	81400717 	ldw	r5,28(r16)
    71d8:	e00d883a 	mov	r6,fp
    71dc:	da000115 	stw	r8,4(sp)
    71e0:	a809883a 	mov	r4,r21
    71e4:	103ee83a 	callr	r2
    71e8:	102f883a 	mov	r23,r2
    71ec:	da000117 	ldw	r8,4(sp)
    71f0:	00bfe00e 	bge	zero,r2,7174 <__alt_data_end+0xff007174>
    71f4:	9de7c83a 	sub	r19,r19,r23
    71f8:	98001f26 	beq	r19,zero,7278 <__sfvwrite_r+0x2fc>
    71fc:	a0800217 	ldw	r2,8(r20)
    7200:	e5f9883a 	add	fp,fp,r23
    7204:	95e5c83a 	sub	r18,r18,r23
    7208:	15efc83a 	sub	r23,r2,r23
    720c:	a5c00215 	stw	r23,8(r20)
    7210:	b83f8726 	beq	r23,zero,7030 <__alt_data_end+0xff007030>
    7214:	903fe11e 	bne	r18,zero,719c <__alt_data_end+0xff00719c>
    7218:	8f000017 	ldw	fp,0(r17)
    721c:	8c800117 	ldw	r18,4(r17)
    7220:	0011883a 	mov	r8,zero
    7224:	8c400204 	addi	r17,r17,8
    7228:	003fdb06 	br	7198 <__alt_data_end+0xff007198>
    722c:	180d883a 	mov	r6,r3
    7230:	e00b883a 	mov	r5,fp
    7234:	da000115 	stw	r8,4(sp)
    7238:	d8c00015 	stw	r3,0(sp)
    723c:	0007a840 	call	7a84 <memmove>
    7240:	d8c00017 	ldw	r3,0(sp)
    7244:	80800017 	ldw	r2,0(r16)
    7248:	800b883a 	mov	r5,r16
    724c:	a809883a 	mov	r4,r21
    7250:	10c5883a 	add	r2,r2,r3
    7254:	80800015 	stw	r2,0(r16)
    7258:	d8c00015 	stw	r3,0(sp)
    725c:	000671c0 	call	671c <_fflush_r>
    7260:	d8c00017 	ldw	r3,0(sp)
    7264:	da000117 	ldw	r8,4(sp)
    7268:	103fc21e 	bne	r2,zero,7174 <__alt_data_end+0xff007174>
    726c:	182f883a 	mov	r23,r3
    7270:	9de7c83a 	sub	r19,r19,r23
    7274:	983fe11e 	bne	r19,zero,71fc <__alt_data_end+0xff0071fc>
    7278:	800b883a 	mov	r5,r16
    727c:	a809883a 	mov	r4,r21
    7280:	000671c0 	call	671c <_fflush_r>
    7284:	103fbb1e 	bne	r2,zero,7174 <__alt_data_end+0xff007174>
    7288:	0011883a 	mov	r8,zero
    728c:	003fdb06 	br	71fc <__alt_data_end+0xff0071fc>
    7290:	94c0012e 	bgeu	r18,r19,7298 <__sfvwrite_r+0x31c>
    7294:	9027883a 	mov	r19,r18
    7298:	980d883a 	mov	r6,r19
    729c:	e00b883a 	mov	r5,fp
    72a0:	0007a840 	call	7a84 <memmove>
    72a4:	80800217 	ldw	r2,8(r16)
    72a8:	80c00017 	ldw	r3,0(r16)
    72ac:	14c5c83a 	sub	r2,r2,r19
    72b0:	1cc7883a 	add	r3,r3,r19
    72b4:	80800215 	stw	r2,8(r16)
    72b8:	80c00015 	stw	r3,0(r16)
    72bc:	10004326 	beq	r2,zero,73cc <__sfvwrite_r+0x450>
    72c0:	9805883a 	mov	r2,r19
    72c4:	003f8606 	br	70e0 <__alt_data_end+0xff0070e0>
    72c8:	b00d883a 	mov	r6,r22
    72cc:	e00b883a 	mov	r5,fp
    72d0:	da000115 	stw	r8,4(sp)
    72d4:	0007a840 	call	7a84 <memmove>
    72d8:	80800217 	ldw	r2,8(r16)
    72dc:	80c00017 	ldw	r3,0(r16)
    72e0:	da000117 	ldw	r8,4(sp)
    72e4:	1585c83a 	sub	r2,r2,r22
    72e8:	1dad883a 	add	r22,r3,r22
    72ec:	80800215 	stw	r2,8(r16)
    72f0:	85800015 	stw	r22,0(r16)
    72f4:	003fbf06 	br	71f4 <__alt_data_end+0xff0071f4>
    72f8:	81000017 	ldw	r4,0(r16)
    72fc:	9027883a 	mov	r19,r18
    7300:	902f883a 	mov	r23,r18
    7304:	003f6c06 	br	70b8 <__alt_data_end+0xff0070b8>
    7308:	900d883a 	mov	r6,r18
    730c:	01400284 	movi	r5,10
    7310:	e009883a 	mov	r4,fp
    7314:	00078580 	call	7858 <memchr>
    7318:	10003e26 	beq	r2,zero,7414 <__sfvwrite_r+0x498>
    731c:	10800044 	addi	r2,r2,1
    7320:	1727c83a 	sub	r19,r2,fp
    7324:	02000044 	movi	r8,1
    7328:	003f9d06 	br	71a0 <__alt_data_end+0xff0071a0>
    732c:	80800517 	ldw	r2,20(r16)
    7330:	81400417 	ldw	r5,16(r16)
    7334:	81c00017 	ldw	r7,0(r16)
    7338:	10a7883a 	add	r19,r2,r2
    733c:	9885883a 	add	r2,r19,r2
    7340:	1026d7fa 	srli	r19,r2,31
    7344:	396dc83a 	sub	r22,r7,r5
    7348:	b1000044 	addi	r4,r22,1
    734c:	9885883a 	add	r2,r19,r2
    7350:	1027d07a 	srai	r19,r2,1
    7354:	2485883a 	add	r2,r4,r18
    7358:	980d883a 	mov	r6,r19
    735c:	9880022e 	bgeu	r19,r2,7368 <__sfvwrite_r+0x3ec>
    7360:	1027883a 	mov	r19,r2
    7364:	100d883a 	mov	r6,r2
    7368:	18c1000c 	andi	r3,r3,1024
    736c:	18001c26 	beq	r3,zero,73e0 <__sfvwrite_r+0x464>
    7370:	300b883a 	mov	r5,r6
    7374:	a809883a 	mov	r4,r21
    7378:	0001e1c0 	call	1e1c <_malloc_r>
    737c:	102f883a 	mov	r23,r2
    7380:	10002926 	beq	r2,zero,7428 <__sfvwrite_r+0x4ac>
    7384:	81400417 	ldw	r5,16(r16)
    7388:	b00d883a 	mov	r6,r22
    738c:	1009883a 	mov	r4,r2
    7390:	000793c0 	call	793c <memcpy>
    7394:	8080030b 	ldhu	r2,12(r16)
    7398:	00fedfc4 	movi	r3,-1153
    739c:	10c4703a 	and	r2,r2,r3
    73a0:	10802014 	ori	r2,r2,128
    73a4:	8080030d 	sth	r2,12(r16)
    73a8:	bd89883a 	add	r4,r23,r22
    73ac:	9d8fc83a 	sub	r7,r19,r22
    73b0:	85c00415 	stw	r23,16(r16)
    73b4:	84c00515 	stw	r19,20(r16)
    73b8:	81000015 	stw	r4,0(r16)
    73bc:	9027883a 	mov	r19,r18
    73c0:	81c00215 	stw	r7,8(r16)
    73c4:	902f883a 	mov	r23,r18
    73c8:	003f3b06 	br	70b8 <__alt_data_end+0xff0070b8>
    73cc:	800b883a 	mov	r5,r16
    73d0:	a809883a 	mov	r4,r21
    73d4:	000671c0 	call	671c <_fflush_r>
    73d8:	103fb926 	beq	r2,zero,72c0 <__alt_data_end+0xff0072c0>
    73dc:	003f6506 	br	7174 <__alt_data_end+0xff007174>
    73e0:	a809883a 	mov	r4,r21
    73e4:	0008d040 	call	8d04 <_realloc_r>
    73e8:	102f883a 	mov	r23,r2
    73ec:	103fee1e 	bne	r2,zero,73a8 <__alt_data_end+0xff0073a8>
    73f0:	81400417 	ldw	r5,16(r16)
    73f4:	a809883a 	mov	r4,r21
    73f8:	0006c6c0 	call	6c6c <_free_r>
    73fc:	8080030b 	ldhu	r2,12(r16)
    7400:	00ffdfc4 	movi	r3,-129
    7404:	1884703a 	and	r2,r3,r2
    7408:	00c00304 	movi	r3,12
    740c:	a8c00015 	stw	r3,0(r21)
    7410:	003f5906 	br	7178 <__alt_data_end+0xff007178>
    7414:	94c00044 	addi	r19,r18,1
    7418:	02000044 	movi	r8,1
    741c:	003f6006 	br	71a0 <__alt_data_end+0xff0071a0>
    7420:	00bfffc4 	movi	r2,-1
    7424:	003f0306 	br	7034 <__alt_data_end+0xff007034>
    7428:	00800304 	movi	r2,12
    742c:	a8800015 	stw	r2,0(r21)
    7430:	8080030b 	ldhu	r2,12(r16)
    7434:	003f5006 	br	7178 <__alt_data_end+0xff007178>

00007438 <_fwalk>:
    7438:	defff704 	addi	sp,sp,-36
    743c:	dd000415 	stw	r20,16(sp)
    7440:	dfc00815 	stw	ra,32(sp)
    7444:	ddc00715 	stw	r23,28(sp)
    7448:	dd800615 	stw	r22,24(sp)
    744c:	dd400515 	stw	r21,20(sp)
    7450:	dcc00315 	stw	r19,12(sp)
    7454:	dc800215 	stw	r18,8(sp)
    7458:	dc400115 	stw	r17,4(sp)
    745c:	dc000015 	stw	r16,0(sp)
    7460:	2500b804 	addi	r20,r4,736
    7464:	a0002326 	beq	r20,zero,74f4 <_fwalk+0xbc>
    7468:	282b883a 	mov	r21,r5
    746c:	002f883a 	mov	r23,zero
    7470:	05800044 	movi	r22,1
    7474:	04ffffc4 	movi	r19,-1
    7478:	a4400117 	ldw	r17,4(r20)
    747c:	a4800217 	ldw	r18,8(r20)
    7480:	8c7fffc4 	addi	r17,r17,-1
    7484:	88000d16 	blt	r17,zero,74bc <_fwalk+0x84>
    7488:	94000304 	addi	r16,r18,12
    748c:	94800384 	addi	r18,r18,14
    7490:	8080000b 	ldhu	r2,0(r16)
    7494:	8c7fffc4 	addi	r17,r17,-1
    7498:	813ffd04 	addi	r4,r16,-12
    749c:	b080042e 	bgeu	r22,r2,74b0 <_fwalk+0x78>
    74a0:	9080000f 	ldh	r2,0(r18)
    74a4:	14c00226 	beq	r2,r19,74b0 <_fwalk+0x78>
    74a8:	a83ee83a 	callr	r21
    74ac:	b8aeb03a 	or	r23,r23,r2
    74b0:	84001a04 	addi	r16,r16,104
    74b4:	94801a04 	addi	r18,r18,104
    74b8:	8cfff51e 	bne	r17,r19,7490 <__alt_data_end+0xff007490>
    74bc:	a5000017 	ldw	r20,0(r20)
    74c0:	a03fed1e 	bne	r20,zero,7478 <__alt_data_end+0xff007478>
    74c4:	b805883a 	mov	r2,r23
    74c8:	dfc00817 	ldw	ra,32(sp)
    74cc:	ddc00717 	ldw	r23,28(sp)
    74d0:	dd800617 	ldw	r22,24(sp)
    74d4:	dd400517 	ldw	r21,20(sp)
    74d8:	dd000417 	ldw	r20,16(sp)
    74dc:	dcc00317 	ldw	r19,12(sp)
    74e0:	dc800217 	ldw	r18,8(sp)
    74e4:	dc400117 	ldw	r17,4(sp)
    74e8:	dc000017 	ldw	r16,0(sp)
    74ec:	dec00904 	addi	sp,sp,36
    74f0:	f800283a 	ret
    74f4:	002f883a 	mov	r23,zero
    74f8:	003ff206 	br	74c4 <__alt_data_end+0xff0074c4>

000074fc <_fwalk_reent>:
    74fc:	defff704 	addi	sp,sp,-36
    7500:	dd000415 	stw	r20,16(sp)
    7504:	dfc00815 	stw	ra,32(sp)
    7508:	ddc00715 	stw	r23,28(sp)
    750c:	dd800615 	stw	r22,24(sp)
    7510:	dd400515 	stw	r21,20(sp)
    7514:	dcc00315 	stw	r19,12(sp)
    7518:	dc800215 	stw	r18,8(sp)
    751c:	dc400115 	stw	r17,4(sp)
    7520:	dc000015 	stw	r16,0(sp)
    7524:	2500b804 	addi	r20,r4,736
    7528:	a0002326 	beq	r20,zero,75b8 <_fwalk_reent+0xbc>
    752c:	282b883a 	mov	r21,r5
    7530:	2027883a 	mov	r19,r4
    7534:	002f883a 	mov	r23,zero
    7538:	05800044 	movi	r22,1
    753c:	04bfffc4 	movi	r18,-1
    7540:	a4400117 	ldw	r17,4(r20)
    7544:	a4000217 	ldw	r16,8(r20)
    7548:	8c7fffc4 	addi	r17,r17,-1
    754c:	88000c16 	blt	r17,zero,7580 <_fwalk_reent+0x84>
    7550:	84000304 	addi	r16,r16,12
    7554:	8080000b 	ldhu	r2,0(r16)
    7558:	8c7fffc4 	addi	r17,r17,-1
    755c:	817ffd04 	addi	r5,r16,-12
    7560:	b080052e 	bgeu	r22,r2,7578 <_fwalk_reent+0x7c>
    7564:	8080008f 	ldh	r2,2(r16)
    7568:	9809883a 	mov	r4,r19
    756c:	14800226 	beq	r2,r18,7578 <_fwalk_reent+0x7c>
    7570:	a83ee83a 	callr	r21
    7574:	b8aeb03a 	or	r23,r23,r2
    7578:	84001a04 	addi	r16,r16,104
    757c:	8cbff51e 	bne	r17,r18,7554 <__alt_data_end+0xff007554>
    7580:	a5000017 	ldw	r20,0(r20)
    7584:	a03fee1e 	bne	r20,zero,7540 <__alt_data_end+0xff007540>
    7588:	b805883a 	mov	r2,r23
    758c:	dfc00817 	ldw	ra,32(sp)
    7590:	ddc00717 	ldw	r23,28(sp)
    7594:	dd800617 	ldw	r22,24(sp)
    7598:	dd400517 	ldw	r21,20(sp)
    759c:	dd000417 	ldw	r20,16(sp)
    75a0:	dcc00317 	ldw	r19,12(sp)
    75a4:	dc800217 	ldw	r18,8(sp)
    75a8:	dc400117 	ldw	r17,4(sp)
    75ac:	dc000017 	ldw	r16,0(sp)
    75b0:	dec00904 	addi	sp,sp,36
    75b4:	f800283a 	ret
    75b8:	002f883a 	mov	r23,zero
    75bc:	003ff206 	br	7588 <__alt_data_end+0xff007588>

000075c0 <_setlocale_r>:
    75c0:	30001b26 	beq	r6,zero,7630 <_setlocale_r+0x70>
    75c4:	01400074 	movhi	r5,1
    75c8:	defffe04 	addi	sp,sp,-8
    75cc:	29454904 	addi	r5,r5,5412
    75d0:	3009883a 	mov	r4,r6
    75d4:	dc000015 	stw	r16,0(sp)
    75d8:	dfc00115 	stw	ra,4(sp)
    75dc:	3021883a 	mov	r16,r6
    75e0:	00094180 	call	9418 <strcmp>
    75e4:	1000061e 	bne	r2,zero,7600 <_setlocale_r+0x40>
    75e8:	00800074 	movhi	r2,1
    75ec:	10854804 	addi	r2,r2,5408
    75f0:	dfc00117 	ldw	ra,4(sp)
    75f4:	dc000017 	ldw	r16,0(sp)
    75f8:	dec00204 	addi	sp,sp,8
    75fc:	f800283a 	ret
    7600:	01400074 	movhi	r5,1
    7604:	29454804 	addi	r5,r5,5408
    7608:	8009883a 	mov	r4,r16
    760c:	00094180 	call	9418 <strcmp>
    7610:	103ff526 	beq	r2,zero,75e8 <__alt_data_end+0xff0075e8>
    7614:	01400074 	movhi	r5,1
    7618:	29450804 	addi	r5,r5,5152
    761c:	8009883a 	mov	r4,r16
    7620:	00094180 	call	9418 <strcmp>
    7624:	103ff026 	beq	r2,zero,75e8 <__alt_data_end+0xff0075e8>
    7628:	0005883a 	mov	r2,zero
    762c:	003ff006 	br	75f0 <__alt_data_end+0xff0075f0>
    7630:	00800074 	movhi	r2,1
    7634:	10854804 	addi	r2,r2,5408
    7638:	f800283a 	ret

0000763c <__locale_charset>:
    763c:	00800074 	movhi	r2,1
    7640:	10883b04 	addi	r2,r2,8428
    7644:	f800283a 	ret

00007648 <__locale_mb_cur_max>:
    7648:	00800074 	movhi	r2,1
    764c:	108cd704 	addi	r2,r2,13148
    7650:	10800017 	ldw	r2,0(r2)
    7654:	f800283a 	ret

00007658 <__locale_msgcharset>:
    7658:	00800074 	movhi	r2,1
    765c:	10883304 	addi	r2,r2,8396
    7660:	f800283a 	ret

00007664 <__locale_cjk_lang>:
    7664:	0005883a 	mov	r2,zero
    7668:	f800283a 	ret

0000766c <_localeconv_r>:
    766c:	00800074 	movhi	r2,1
    7670:	10884304 	addi	r2,r2,8460
    7674:	f800283a 	ret

00007678 <setlocale>:
    7678:	00800074 	movhi	r2,1
    767c:	108cd604 	addi	r2,r2,13144
    7680:	280d883a 	mov	r6,r5
    7684:	200b883a 	mov	r5,r4
    7688:	11000017 	ldw	r4,0(r2)
    768c:	00075c01 	jmpi	75c0 <_setlocale_r>

00007690 <localeconv>:
    7690:	00800074 	movhi	r2,1
    7694:	10884304 	addi	r2,r2,8460
    7698:	f800283a 	ret

0000769c <__smakebuf_r>:
    769c:	2880030b 	ldhu	r2,12(r5)
    76a0:	10c0008c 	andi	r3,r2,2
    76a4:	1800411e 	bne	r3,zero,77ac <__smakebuf_r+0x110>
    76a8:	deffec04 	addi	sp,sp,-80
    76ac:	dc000f15 	stw	r16,60(sp)
    76b0:	2821883a 	mov	r16,r5
    76b4:	2940038f 	ldh	r5,14(r5)
    76b8:	dc401015 	stw	r17,64(sp)
    76bc:	dfc01315 	stw	ra,76(sp)
    76c0:	dcc01215 	stw	r19,72(sp)
    76c4:	dc801115 	stw	r18,68(sp)
    76c8:	2023883a 	mov	r17,r4
    76cc:	28001c16 	blt	r5,zero,7740 <__smakebuf_r+0xa4>
    76d0:	d80d883a 	mov	r6,sp
    76d4:	000afc00 	call	afc0 <_fstat_r>
    76d8:	10001816 	blt	r2,zero,773c <__smakebuf_r+0xa0>
    76dc:	d8800117 	ldw	r2,4(sp)
    76e0:	00e00014 	movui	r3,32768
    76e4:	10bc000c 	andi	r2,r2,61440
    76e8:	14c80020 	cmpeqi	r19,r2,8192
    76ec:	10c03726 	beq	r2,r3,77cc <__smakebuf_r+0x130>
    76f0:	80c0030b 	ldhu	r3,12(r16)
    76f4:	18c20014 	ori	r3,r3,2048
    76f8:	80c0030d 	sth	r3,12(r16)
    76fc:	00c80004 	movi	r3,8192
    7700:	10c0521e 	bne	r2,r3,784c <__smakebuf_r+0x1b0>
    7704:	8140038f 	ldh	r5,14(r16)
    7708:	8809883a 	mov	r4,r17
    770c:	000b01c0 	call	b01c <_isatty_r>
    7710:	10004c26 	beq	r2,zero,7844 <__smakebuf_r+0x1a8>
    7714:	8080030b 	ldhu	r2,12(r16)
    7718:	80c010c4 	addi	r3,r16,67
    771c:	80c00015 	stw	r3,0(r16)
    7720:	10800054 	ori	r2,r2,1
    7724:	8080030d 	sth	r2,12(r16)
    7728:	00800044 	movi	r2,1
    772c:	80c00415 	stw	r3,16(r16)
    7730:	80800515 	stw	r2,20(r16)
    7734:	04810004 	movi	r18,1024
    7738:	00000706 	br	7758 <__smakebuf_r+0xbc>
    773c:	8080030b 	ldhu	r2,12(r16)
    7740:	10c0200c 	andi	r3,r2,128
    7744:	18001f1e 	bne	r3,zero,77c4 <__smakebuf_r+0x128>
    7748:	04810004 	movi	r18,1024
    774c:	10820014 	ori	r2,r2,2048
    7750:	8080030d 	sth	r2,12(r16)
    7754:	0027883a 	mov	r19,zero
    7758:	900b883a 	mov	r5,r18
    775c:	8809883a 	mov	r4,r17
    7760:	0001e1c0 	call	1e1c <_malloc_r>
    7764:	10002c26 	beq	r2,zero,7818 <__smakebuf_r+0x17c>
    7768:	80c0030b 	ldhu	r3,12(r16)
    776c:	01000034 	movhi	r4,0
    7770:	2119ec04 	addi	r4,r4,26544
    7774:	89000f15 	stw	r4,60(r17)
    7778:	18c02014 	ori	r3,r3,128
    777c:	80c0030d 	sth	r3,12(r16)
    7780:	80800015 	stw	r2,0(r16)
    7784:	80800415 	stw	r2,16(r16)
    7788:	84800515 	stw	r18,20(r16)
    778c:	98001a1e 	bne	r19,zero,77f8 <__smakebuf_r+0x15c>
    7790:	dfc01317 	ldw	ra,76(sp)
    7794:	dcc01217 	ldw	r19,72(sp)
    7798:	dc801117 	ldw	r18,68(sp)
    779c:	dc401017 	ldw	r17,64(sp)
    77a0:	dc000f17 	ldw	r16,60(sp)
    77a4:	dec01404 	addi	sp,sp,80
    77a8:	f800283a 	ret
    77ac:	288010c4 	addi	r2,r5,67
    77b0:	28800015 	stw	r2,0(r5)
    77b4:	28800415 	stw	r2,16(r5)
    77b8:	00800044 	movi	r2,1
    77bc:	28800515 	stw	r2,20(r5)
    77c0:	f800283a 	ret
    77c4:	04801004 	movi	r18,64
    77c8:	003fe006 	br	774c <__alt_data_end+0xff00774c>
    77cc:	81000a17 	ldw	r4,40(r16)
    77d0:	00c00074 	movhi	r3,1
    77d4:	18e4ed04 	addi	r3,r3,-27724
    77d8:	20ffc51e 	bne	r4,r3,76f0 <__alt_data_end+0xff0076f0>
    77dc:	8080030b 	ldhu	r2,12(r16)
    77e0:	04810004 	movi	r18,1024
    77e4:	84801315 	stw	r18,76(r16)
    77e8:	1484b03a 	or	r2,r2,r18
    77ec:	8080030d 	sth	r2,12(r16)
    77f0:	0027883a 	mov	r19,zero
    77f4:	003fd806 	br	7758 <__alt_data_end+0xff007758>
    77f8:	8140038f 	ldh	r5,14(r16)
    77fc:	8809883a 	mov	r4,r17
    7800:	000b01c0 	call	b01c <_isatty_r>
    7804:	103fe226 	beq	r2,zero,7790 <__alt_data_end+0xff007790>
    7808:	8080030b 	ldhu	r2,12(r16)
    780c:	10800054 	ori	r2,r2,1
    7810:	8080030d 	sth	r2,12(r16)
    7814:	003fde06 	br	7790 <__alt_data_end+0xff007790>
    7818:	8080030b 	ldhu	r2,12(r16)
    781c:	10c0800c 	andi	r3,r2,512
    7820:	183fdb1e 	bne	r3,zero,7790 <__alt_data_end+0xff007790>
    7824:	10800094 	ori	r2,r2,2
    7828:	80c010c4 	addi	r3,r16,67
    782c:	8080030d 	sth	r2,12(r16)
    7830:	00800044 	movi	r2,1
    7834:	80c00015 	stw	r3,0(r16)
    7838:	80c00415 	stw	r3,16(r16)
    783c:	80800515 	stw	r2,20(r16)
    7840:	003fd306 	br	7790 <__alt_data_end+0xff007790>
    7844:	04810004 	movi	r18,1024
    7848:	003fc306 	br	7758 <__alt_data_end+0xff007758>
    784c:	0027883a 	mov	r19,zero
    7850:	04810004 	movi	r18,1024
    7854:	003fc006 	br	7758 <__alt_data_end+0xff007758>

00007858 <memchr>:
    7858:	208000cc 	andi	r2,r4,3
    785c:	280f883a 	mov	r7,r5
    7860:	10003426 	beq	r2,zero,7934 <memchr+0xdc>
    7864:	30bfffc4 	addi	r2,r6,-1
    7868:	30001a26 	beq	r6,zero,78d4 <memchr+0x7c>
    786c:	20c00003 	ldbu	r3,0(r4)
    7870:	29803fcc 	andi	r6,r5,255
    7874:	30c0051e 	bne	r6,r3,788c <memchr+0x34>
    7878:	00001806 	br	78dc <memchr+0x84>
    787c:	10001526 	beq	r2,zero,78d4 <memchr+0x7c>
    7880:	20c00003 	ldbu	r3,0(r4)
    7884:	10bfffc4 	addi	r2,r2,-1
    7888:	30c01426 	beq	r6,r3,78dc <memchr+0x84>
    788c:	21000044 	addi	r4,r4,1
    7890:	20c000cc 	andi	r3,r4,3
    7894:	183ff91e 	bne	r3,zero,787c <__alt_data_end+0xff00787c>
    7898:	020000c4 	movi	r8,3
    789c:	40801136 	bltu	r8,r2,78e4 <memchr+0x8c>
    78a0:	10000c26 	beq	r2,zero,78d4 <memchr+0x7c>
    78a4:	20c00003 	ldbu	r3,0(r4)
    78a8:	29403fcc 	andi	r5,r5,255
    78ac:	28c00b26 	beq	r5,r3,78dc <memchr+0x84>
    78b0:	20c00044 	addi	r3,r4,1
    78b4:	39803fcc 	andi	r6,r7,255
    78b8:	2089883a 	add	r4,r4,r2
    78bc:	00000306 	br	78cc <memchr+0x74>
    78c0:	18c00044 	addi	r3,r3,1
    78c4:	197fffc3 	ldbu	r5,-1(r3)
    78c8:	31400526 	beq	r6,r5,78e0 <memchr+0x88>
    78cc:	1805883a 	mov	r2,r3
    78d0:	20fffb1e 	bne	r4,r3,78c0 <__alt_data_end+0xff0078c0>
    78d4:	0005883a 	mov	r2,zero
    78d8:	f800283a 	ret
    78dc:	2005883a 	mov	r2,r4
    78e0:	f800283a 	ret
    78e4:	28c03fcc 	andi	r3,r5,255
    78e8:	1812923a 	slli	r9,r3,8
    78ec:	02ffbff4 	movhi	r11,65279
    78f0:	02a02074 	movhi	r10,32897
    78f4:	48d2b03a 	or	r9,r9,r3
    78f8:	4806943a 	slli	r3,r9,16
    78fc:	5affbfc4 	addi	r11,r11,-257
    7900:	52a02004 	addi	r10,r10,-32640
    7904:	48d2b03a 	or	r9,r9,r3
    7908:	20c00017 	ldw	r3,0(r4)
    790c:	48c6f03a 	xor	r3,r9,r3
    7910:	1acd883a 	add	r6,r3,r11
    7914:	00c6303a 	nor	r3,zero,r3
    7918:	30c6703a 	and	r3,r6,r3
    791c:	1a86703a 	and	r3,r3,r10
    7920:	183fe01e 	bne	r3,zero,78a4 <__alt_data_end+0xff0078a4>
    7924:	10bfff04 	addi	r2,r2,-4
    7928:	21000104 	addi	r4,r4,4
    792c:	40bff636 	bltu	r8,r2,7908 <__alt_data_end+0xff007908>
    7930:	003fdb06 	br	78a0 <__alt_data_end+0xff0078a0>
    7934:	3005883a 	mov	r2,r6
    7938:	003fd706 	br	7898 <__alt_data_end+0xff007898>

0000793c <memcpy>:
    793c:	defffd04 	addi	sp,sp,-12
    7940:	dfc00215 	stw	ra,8(sp)
    7944:	dc400115 	stw	r17,4(sp)
    7948:	dc000015 	stw	r16,0(sp)
    794c:	00c003c4 	movi	r3,15
    7950:	2005883a 	mov	r2,r4
    7954:	1980452e 	bgeu	r3,r6,7a6c <memcpy+0x130>
    7958:	2906b03a 	or	r3,r5,r4
    795c:	18c000cc 	andi	r3,r3,3
    7960:	1800441e 	bne	r3,zero,7a74 <memcpy+0x138>
    7964:	347ffc04 	addi	r17,r6,-16
    7968:	8822d13a 	srli	r17,r17,4
    796c:	28c00104 	addi	r3,r5,4
    7970:	23400104 	addi	r13,r4,4
    7974:	8820913a 	slli	r16,r17,4
    7978:	2b000204 	addi	r12,r5,8
    797c:	22c00204 	addi	r11,r4,8
    7980:	84000504 	addi	r16,r16,20
    7984:	2a800304 	addi	r10,r5,12
    7988:	22400304 	addi	r9,r4,12
    798c:	2c21883a 	add	r16,r5,r16
    7990:	2811883a 	mov	r8,r5
    7994:	200f883a 	mov	r7,r4
    7998:	41000017 	ldw	r4,0(r8)
    799c:	1fc00017 	ldw	ra,0(r3)
    79a0:	63c00017 	ldw	r15,0(r12)
    79a4:	39000015 	stw	r4,0(r7)
    79a8:	53800017 	ldw	r14,0(r10)
    79ac:	6fc00015 	stw	ra,0(r13)
    79b0:	5bc00015 	stw	r15,0(r11)
    79b4:	4b800015 	stw	r14,0(r9)
    79b8:	18c00404 	addi	r3,r3,16
    79bc:	39c00404 	addi	r7,r7,16
    79c0:	42000404 	addi	r8,r8,16
    79c4:	6b400404 	addi	r13,r13,16
    79c8:	63000404 	addi	r12,r12,16
    79cc:	5ac00404 	addi	r11,r11,16
    79d0:	52800404 	addi	r10,r10,16
    79d4:	4a400404 	addi	r9,r9,16
    79d8:	1c3fef1e 	bne	r3,r16,7998 <__alt_data_end+0xff007998>
    79dc:	89c00044 	addi	r7,r17,1
    79e0:	380e913a 	slli	r7,r7,4
    79e4:	310003cc 	andi	r4,r6,15
    79e8:	02c000c4 	movi	r11,3
    79ec:	11c7883a 	add	r3,r2,r7
    79f0:	29cb883a 	add	r5,r5,r7
    79f4:	5900212e 	bgeu	r11,r4,7a7c <memcpy+0x140>
    79f8:	1813883a 	mov	r9,r3
    79fc:	2811883a 	mov	r8,r5
    7a00:	200f883a 	mov	r7,r4
    7a04:	42800017 	ldw	r10,0(r8)
    7a08:	4a400104 	addi	r9,r9,4
    7a0c:	39ffff04 	addi	r7,r7,-4
    7a10:	4abfff15 	stw	r10,-4(r9)
    7a14:	42000104 	addi	r8,r8,4
    7a18:	59fffa36 	bltu	r11,r7,7a04 <__alt_data_end+0xff007a04>
    7a1c:	213fff04 	addi	r4,r4,-4
    7a20:	2008d0ba 	srli	r4,r4,2
    7a24:	318000cc 	andi	r6,r6,3
    7a28:	21000044 	addi	r4,r4,1
    7a2c:	2109883a 	add	r4,r4,r4
    7a30:	2109883a 	add	r4,r4,r4
    7a34:	1907883a 	add	r3,r3,r4
    7a38:	290b883a 	add	r5,r5,r4
    7a3c:	30000626 	beq	r6,zero,7a58 <memcpy+0x11c>
    7a40:	198d883a 	add	r6,r3,r6
    7a44:	29c00003 	ldbu	r7,0(r5)
    7a48:	18c00044 	addi	r3,r3,1
    7a4c:	29400044 	addi	r5,r5,1
    7a50:	19ffffc5 	stb	r7,-1(r3)
    7a54:	19bffb1e 	bne	r3,r6,7a44 <__alt_data_end+0xff007a44>
    7a58:	dfc00217 	ldw	ra,8(sp)
    7a5c:	dc400117 	ldw	r17,4(sp)
    7a60:	dc000017 	ldw	r16,0(sp)
    7a64:	dec00304 	addi	sp,sp,12
    7a68:	f800283a 	ret
    7a6c:	2007883a 	mov	r3,r4
    7a70:	003ff206 	br	7a3c <__alt_data_end+0xff007a3c>
    7a74:	2007883a 	mov	r3,r4
    7a78:	003ff106 	br	7a40 <__alt_data_end+0xff007a40>
    7a7c:	200d883a 	mov	r6,r4
    7a80:	003fee06 	br	7a3c <__alt_data_end+0xff007a3c>

00007a84 <memmove>:
    7a84:	2005883a 	mov	r2,r4
    7a88:	29000b2e 	bgeu	r5,r4,7ab8 <memmove+0x34>
    7a8c:	298f883a 	add	r7,r5,r6
    7a90:	21c0092e 	bgeu	r4,r7,7ab8 <memmove+0x34>
    7a94:	2187883a 	add	r3,r4,r6
    7a98:	198bc83a 	sub	r5,r3,r6
    7a9c:	30004826 	beq	r6,zero,7bc0 <memmove+0x13c>
    7aa0:	39ffffc4 	addi	r7,r7,-1
    7aa4:	39000003 	ldbu	r4,0(r7)
    7aa8:	18ffffc4 	addi	r3,r3,-1
    7aac:	19000005 	stb	r4,0(r3)
    7ab0:	28fffb1e 	bne	r5,r3,7aa0 <__alt_data_end+0xff007aa0>
    7ab4:	f800283a 	ret
    7ab8:	00c003c4 	movi	r3,15
    7abc:	1980412e 	bgeu	r3,r6,7bc4 <memmove+0x140>
    7ac0:	2886b03a 	or	r3,r5,r2
    7ac4:	18c000cc 	andi	r3,r3,3
    7ac8:	1800401e 	bne	r3,zero,7bcc <memmove+0x148>
    7acc:	33fffc04 	addi	r15,r6,-16
    7ad0:	781ed13a 	srli	r15,r15,4
    7ad4:	28c00104 	addi	r3,r5,4
    7ad8:	13400104 	addi	r13,r2,4
    7adc:	781c913a 	slli	r14,r15,4
    7ae0:	2b000204 	addi	r12,r5,8
    7ae4:	12c00204 	addi	r11,r2,8
    7ae8:	73800504 	addi	r14,r14,20
    7aec:	2a800304 	addi	r10,r5,12
    7af0:	12400304 	addi	r9,r2,12
    7af4:	2b9d883a 	add	r14,r5,r14
    7af8:	2811883a 	mov	r8,r5
    7afc:	100f883a 	mov	r7,r2
    7b00:	41000017 	ldw	r4,0(r8)
    7b04:	39c00404 	addi	r7,r7,16
    7b08:	18c00404 	addi	r3,r3,16
    7b0c:	393ffc15 	stw	r4,-16(r7)
    7b10:	193ffc17 	ldw	r4,-16(r3)
    7b14:	6b400404 	addi	r13,r13,16
    7b18:	5ac00404 	addi	r11,r11,16
    7b1c:	693ffc15 	stw	r4,-16(r13)
    7b20:	61000017 	ldw	r4,0(r12)
    7b24:	4a400404 	addi	r9,r9,16
    7b28:	42000404 	addi	r8,r8,16
    7b2c:	593ffc15 	stw	r4,-16(r11)
    7b30:	51000017 	ldw	r4,0(r10)
    7b34:	63000404 	addi	r12,r12,16
    7b38:	52800404 	addi	r10,r10,16
    7b3c:	493ffc15 	stw	r4,-16(r9)
    7b40:	1bbfef1e 	bne	r3,r14,7b00 <__alt_data_end+0xff007b00>
    7b44:	79000044 	addi	r4,r15,1
    7b48:	2008913a 	slli	r4,r4,4
    7b4c:	328003cc 	andi	r10,r6,15
    7b50:	02c000c4 	movi	r11,3
    7b54:	1107883a 	add	r3,r2,r4
    7b58:	290b883a 	add	r5,r5,r4
    7b5c:	5a801e2e 	bgeu	r11,r10,7bd8 <memmove+0x154>
    7b60:	1813883a 	mov	r9,r3
    7b64:	2811883a 	mov	r8,r5
    7b68:	500f883a 	mov	r7,r10
    7b6c:	41000017 	ldw	r4,0(r8)
    7b70:	4a400104 	addi	r9,r9,4
    7b74:	39ffff04 	addi	r7,r7,-4
    7b78:	493fff15 	stw	r4,-4(r9)
    7b7c:	42000104 	addi	r8,r8,4
    7b80:	59fffa36 	bltu	r11,r7,7b6c <__alt_data_end+0xff007b6c>
    7b84:	513fff04 	addi	r4,r10,-4
    7b88:	2008d0ba 	srli	r4,r4,2
    7b8c:	318000cc 	andi	r6,r6,3
    7b90:	21000044 	addi	r4,r4,1
    7b94:	2109883a 	add	r4,r4,r4
    7b98:	2109883a 	add	r4,r4,r4
    7b9c:	1907883a 	add	r3,r3,r4
    7ba0:	290b883a 	add	r5,r5,r4
    7ba4:	30000b26 	beq	r6,zero,7bd4 <memmove+0x150>
    7ba8:	198d883a 	add	r6,r3,r6
    7bac:	29c00003 	ldbu	r7,0(r5)
    7bb0:	18c00044 	addi	r3,r3,1
    7bb4:	29400044 	addi	r5,r5,1
    7bb8:	19ffffc5 	stb	r7,-1(r3)
    7bbc:	19bffb1e 	bne	r3,r6,7bac <__alt_data_end+0xff007bac>
    7bc0:	f800283a 	ret
    7bc4:	1007883a 	mov	r3,r2
    7bc8:	003ff606 	br	7ba4 <__alt_data_end+0xff007ba4>
    7bcc:	1007883a 	mov	r3,r2
    7bd0:	003ff506 	br	7ba8 <__alt_data_end+0xff007ba8>
    7bd4:	f800283a 	ret
    7bd8:	500d883a 	mov	r6,r10
    7bdc:	003ff106 	br	7ba4 <__alt_data_end+0xff007ba4>

00007be0 <memset>:
    7be0:	20c000cc 	andi	r3,r4,3
    7be4:	2005883a 	mov	r2,r4
    7be8:	18004426 	beq	r3,zero,7cfc <memset+0x11c>
    7bec:	31ffffc4 	addi	r7,r6,-1
    7bf0:	30004026 	beq	r6,zero,7cf4 <memset+0x114>
    7bf4:	2813883a 	mov	r9,r5
    7bf8:	200d883a 	mov	r6,r4
    7bfc:	2007883a 	mov	r3,r4
    7c00:	00000406 	br	7c14 <memset+0x34>
    7c04:	3a3fffc4 	addi	r8,r7,-1
    7c08:	31800044 	addi	r6,r6,1
    7c0c:	38003926 	beq	r7,zero,7cf4 <memset+0x114>
    7c10:	400f883a 	mov	r7,r8
    7c14:	18c00044 	addi	r3,r3,1
    7c18:	32400005 	stb	r9,0(r6)
    7c1c:	1a0000cc 	andi	r8,r3,3
    7c20:	403ff81e 	bne	r8,zero,7c04 <__alt_data_end+0xff007c04>
    7c24:	010000c4 	movi	r4,3
    7c28:	21c02d2e 	bgeu	r4,r7,7ce0 <memset+0x100>
    7c2c:	29003fcc 	andi	r4,r5,255
    7c30:	200c923a 	slli	r6,r4,8
    7c34:	3108b03a 	or	r4,r6,r4
    7c38:	200c943a 	slli	r6,r4,16
    7c3c:	218cb03a 	or	r6,r4,r6
    7c40:	010003c4 	movi	r4,15
    7c44:	21c0182e 	bgeu	r4,r7,7ca8 <memset+0xc8>
    7c48:	3b3ffc04 	addi	r12,r7,-16
    7c4c:	6018d13a 	srli	r12,r12,4
    7c50:	1a000104 	addi	r8,r3,4
    7c54:	1ac00204 	addi	r11,r3,8
    7c58:	6008913a 	slli	r4,r12,4
    7c5c:	1a800304 	addi	r10,r3,12
    7c60:	1813883a 	mov	r9,r3
    7c64:	21000504 	addi	r4,r4,20
    7c68:	1909883a 	add	r4,r3,r4
    7c6c:	49800015 	stw	r6,0(r9)
    7c70:	41800015 	stw	r6,0(r8)
    7c74:	59800015 	stw	r6,0(r11)
    7c78:	51800015 	stw	r6,0(r10)
    7c7c:	42000404 	addi	r8,r8,16
    7c80:	4a400404 	addi	r9,r9,16
    7c84:	5ac00404 	addi	r11,r11,16
    7c88:	52800404 	addi	r10,r10,16
    7c8c:	413ff71e 	bne	r8,r4,7c6c <__alt_data_end+0xff007c6c>
    7c90:	63000044 	addi	r12,r12,1
    7c94:	6018913a 	slli	r12,r12,4
    7c98:	39c003cc 	andi	r7,r7,15
    7c9c:	010000c4 	movi	r4,3
    7ca0:	1b07883a 	add	r3,r3,r12
    7ca4:	21c00e2e 	bgeu	r4,r7,7ce0 <memset+0x100>
    7ca8:	1813883a 	mov	r9,r3
    7cac:	3811883a 	mov	r8,r7
    7cb0:	010000c4 	movi	r4,3
    7cb4:	49800015 	stw	r6,0(r9)
    7cb8:	423fff04 	addi	r8,r8,-4
    7cbc:	4a400104 	addi	r9,r9,4
    7cc0:	223ffc36 	bltu	r4,r8,7cb4 <__alt_data_end+0xff007cb4>
    7cc4:	393fff04 	addi	r4,r7,-4
    7cc8:	2008d0ba 	srli	r4,r4,2
    7ccc:	39c000cc 	andi	r7,r7,3
    7cd0:	21000044 	addi	r4,r4,1
    7cd4:	2109883a 	add	r4,r4,r4
    7cd8:	2109883a 	add	r4,r4,r4
    7cdc:	1907883a 	add	r3,r3,r4
    7ce0:	38000526 	beq	r7,zero,7cf8 <memset+0x118>
    7ce4:	19cf883a 	add	r7,r3,r7
    7ce8:	19400005 	stb	r5,0(r3)
    7cec:	18c00044 	addi	r3,r3,1
    7cf0:	38fffd1e 	bne	r7,r3,7ce8 <__alt_data_end+0xff007ce8>
    7cf4:	f800283a 	ret
    7cf8:	f800283a 	ret
    7cfc:	2007883a 	mov	r3,r4
    7d00:	300f883a 	mov	r7,r6
    7d04:	003fc706 	br	7c24 <__alt_data_end+0xff007c24>

00007d08 <_Balloc>:
    7d08:	20801317 	ldw	r2,76(r4)
    7d0c:	defffc04 	addi	sp,sp,-16
    7d10:	dc400115 	stw	r17,4(sp)
    7d14:	dc000015 	stw	r16,0(sp)
    7d18:	dfc00315 	stw	ra,12(sp)
    7d1c:	dc800215 	stw	r18,8(sp)
    7d20:	2023883a 	mov	r17,r4
    7d24:	2821883a 	mov	r16,r5
    7d28:	10000f26 	beq	r2,zero,7d68 <_Balloc+0x60>
    7d2c:	8407883a 	add	r3,r16,r16
    7d30:	18c7883a 	add	r3,r3,r3
    7d34:	10c7883a 	add	r3,r2,r3
    7d38:	18800017 	ldw	r2,0(r3)
    7d3c:	10001126 	beq	r2,zero,7d84 <_Balloc+0x7c>
    7d40:	11000017 	ldw	r4,0(r2)
    7d44:	19000015 	stw	r4,0(r3)
    7d48:	10000415 	stw	zero,16(r2)
    7d4c:	10000315 	stw	zero,12(r2)
    7d50:	dfc00317 	ldw	ra,12(sp)
    7d54:	dc800217 	ldw	r18,8(sp)
    7d58:	dc400117 	ldw	r17,4(sp)
    7d5c:	dc000017 	ldw	r16,0(sp)
    7d60:	dec00404 	addi	sp,sp,16
    7d64:	f800283a 	ret
    7d68:	01800844 	movi	r6,33
    7d6c:	01400104 	movi	r5,4
    7d70:	000abf00 	call	abf0 <_calloc_r>
    7d74:	88801315 	stw	r2,76(r17)
    7d78:	103fec1e 	bne	r2,zero,7d2c <__alt_data_end+0xff007d2c>
    7d7c:	0005883a 	mov	r2,zero
    7d80:	003ff306 	br	7d50 <__alt_data_end+0xff007d50>
    7d84:	01400044 	movi	r5,1
    7d88:	2c24983a 	sll	r18,r5,r16
    7d8c:	8809883a 	mov	r4,r17
    7d90:	91800144 	addi	r6,r18,5
    7d94:	318d883a 	add	r6,r6,r6
    7d98:	318d883a 	add	r6,r6,r6
    7d9c:	000abf00 	call	abf0 <_calloc_r>
    7da0:	103ff626 	beq	r2,zero,7d7c <__alt_data_end+0xff007d7c>
    7da4:	14000115 	stw	r16,4(r2)
    7da8:	14800215 	stw	r18,8(r2)
    7dac:	003fe606 	br	7d48 <__alt_data_end+0xff007d48>

00007db0 <_Bfree>:
    7db0:	28000826 	beq	r5,zero,7dd4 <_Bfree+0x24>
    7db4:	28c00117 	ldw	r3,4(r5)
    7db8:	20801317 	ldw	r2,76(r4)
    7dbc:	18c7883a 	add	r3,r3,r3
    7dc0:	18c7883a 	add	r3,r3,r3
    7dc4:	10c5883a 	add	r2,r2,r3
    7dc8:	10c00017 	ldw	r3,0(r2)
    7dcc:	28c00015 	stw	r3,0(r5)
    7dd0:	11400015 	stw	r5,0(r2)
    7dd4:	f800283a 	ret

00007dd8 <__multadd>:
    7dd8:	defffa04 	addi	sp,sp,-24
    7ddc:	dc800315 	stw	r18,12(sp)
    7de0:	dc400215 	stw	r17,8(sp)
    7de4:	dc000115 	stw	r16,4(sp)
    7de8:	2823883a 	mov	r17,r5
    7dec:	2c000417 	ldw	r16,16(r5)
    7df0:	dfc00515 	stw	ra,20(sp)
    7df4:	dcc00415 	stw	r19,16(sp)
    7df8:	2025883a 	mov	r18,r4
    7dfc:	29400504 	addi	r5,r5,20
    7e00:	0011883a 	mov	r8,zero
    7e04:	28c00017 	ldw	r3,0(r5)
    7e08:	29400104 	addi	r5,r5,4
    7e0c:	42000044 	addi	r8,r8,1
    7e10:	18bfffcc 	andi	r2,r3,65535
    7e14:	1185383a 	mul	r2,r2,r6
    7e18:	1806d43a 	srli	r3,r3,16
    7e1c:	11cf883a 	add	r7,r2,r7
    7e20:	3808d43a 	srli	r4,r7,16
    7e24:	1987383a 	mul	r3,r3,r6
    7e28:	38bfffcc 	andi	r2,r7,65535
    7e2c:	1907883a 	add	r3,r3,r4
    7e30:	1808943a 	slli	r4,r3,16
    7e34:	180ed43a 	srli	r7,r3,16
    7e38:	2085883a 	add	r2,r4,r2
    7e3c:	28bfff15 	stw	r2,-4(r5)
    7e40:	443ff016 	blt	r8,r16,7e04 <__alt_data_end+0xff007e04>
    7e44:	38000926 	beq	r7,zero,7e6c <__multadd+0x94>
    7e48:	88800217 	ldw	r2,8(r17)
    7e4c:	80800f0e 	bge	r16,r2,7e8c <__multadd+0xb4>
    7e50:	80800144 	addi	r2,r16,5
    7e54:	1085883a 	add	r2,r2,r2
    7e58:	1085883a 	add	r2,r2,r2
    7e5c:	8885883a 	add	r2,r17,r2
    7e60:	11c00015 	stw	r7,0(r2)
    7e64:	84000044 	addi	r16,r16,1
    7e68:	8c000415 	stw	r16,16(r17)
    7e6c:	8805883a 	mov	r2,r17
    7e70:	dfc00517 	ldw	ra,20(sp)
    7e74:	dcc00417 	ldw	r19,16(sp)
    7e78:	dc800317 	ldw	r18,12(sp)
    7e7c:	dc400217 	ldw	r17,8(sp)
    7e80:	dc000117 	ldw	r16,4(sp)
    7e84:	dec00604 	addi	sp,sp,24
    7e88:	f800283a 	ret
    7e8c:	89400117 	ldw	r5,4(r17)
    7e90:	9009883a 	mov	r4,r18
    7e94:	d9c00015 	stw	r7,0(sp)
    7e98:	29400044 	addi	r5,r5,1
    7e9c:	0007d080 	call	7d08 <_Balloc>
    7ea0:	89800417 	ldw	r6,16(r17)
    7ea4:	89400304 	addi	r5,r17,12
    7ea8:	11000304 	addi	r4,r2,12
    7eac:	31800084 	addi	r6,r6,2
    7eb0:	318d883a 	add	r6,r6,r6
    7eb4:	318d883a 	add	r6,r6,r6
    7eb8:	1027883a 	mov	r19,r2
    7ebc:	000793c0 	call	793c <memcpy>
    7ec0:	d9c00017 	ldw	r7,0(sp)
    7ec4:	88000a26 	beq	r17,zero,7ef0 <__multadd+0x118>
    7ec8:	88c00117 	ldw	r3,4(r17)
    7ecc:	90801317 	ldw	r2,76(r18)
    7ed0:	18c7883a 	add	r3,r3,r3
    7ed4:	18c7883a 	add	r3,r3,r3
    7ed8:	10c5883a 	add	r2,r2,r3
    7edc:	10c00017 	ldw	r3,0(r2)
    7ee0:	88c00015 	stw	r3,0(r17)
    7ee4:	14400015 	stw	r17,0(r2)
    7ee8:	9823883a 	mov	r17,r19
    7eec:	003fd806 	br	7e50 <__alt_data_end+0xff007e50>
    7ef0:	9823883a 	mov	r17,r19
    7ef4:	003fd606 	br	7e50 <__alt_data_end+0xff007e50>

00007ef8 <__s2b>:
    7ef8:	defff904 	addi	sp,sp,-28
    7efc:	dc400115 	stw	r17,4(sp)
    7f00:	dc000015 	stw	r16,0(sp)
    7f04:	2023883a 	mov	r17,r4
    7f08:	2821883a 	mov	r16,r5
    7f0c:	39000204 	addi	r4,r7,8
    7f10:	01400244 	movi	r5,9
    7f14:	dcc00315 	stw	r19,12(sp)
    7f18:	dc800215 	stw	r18,8(sp)
    7f1c:	dfc00615 	stw	ra,24(sp)
    7f20:	dd400515 	stw	r21,20(sp)
    7f24:	dd000415 	stw	r20,16(sp)
    7f28:	3825883a 	mov	r18,r7
    7f2c:	3027883a 	mov	r19,r6
    7f30:	0001c400 	call	1c40 <__divsi3>
    7f34:	00c00044 	movi	r3,1
    7f38:	000b883a 	mov	r5,zero
    7f3c:	1880030e 	bge	r3,r2,7f4c <__s2b+0x54>
    7f40:	18c7883a 	add	r3,r3,r3
    7f44:	29400044 	addi	r5,r5,1
    7f48:	18bffd16 	blt	r3,r2,7f40 <__alt_data_end+0xff007f40>
    7f4c:	8809883a 	mov	r4,r17
    7f50:	0007d080 	call	7d08 <_Balloc>
    7f54:	d8c00717 	ldw	r3,28(sp)
    7f58:	10c00515 	stw	r3,20(r2)
    7f5c:	00c00044 	movi	r3,1
    7f60:	10c00415 	stw	r3,16(r2)
    7f64:	00c00244 	movi	r3,9
    7f68:	1cc0210e 	bge	r3,r19,7ff0 <__s2b+0xf8>
    7f6c:	80eb883a 	add	r21,r16,r3
    7f70:	a829883a 	mov	r20,r21
    7f74:	84e1883a 	add	r16,r16,r19
    7f78:	a1c00007 	ldb	r7,0(r20)
    7f7c:	01800284 	movi	r6,10
    7f80:	a5000044 	addi	r20,r20,1
    7f84:	100b883a 	mov	r5,r2
    7f88:	39fff404 	addi	r7,r7,-48
    7f8c:	8809883a 	mov	r4,r17
    7f90:	0007dd80 	call	7dd8 <__multadd>
    7f94:	a43ff81e 	bne	r20,r16,7f78 <__alt_data_end+0xff007f78>
    7f98:	ace1883a 	add	r16,r21,r19
    7f9c:	843ffe04 	addi	r16,r16,-8
    7fa0:	9c800a0e 	bge	r19,r18,7fcc <__s2b+0xd4>
    7fa4:	94e5c83a 	sub	r18,r18,r19
    7fa8:	84a5883a 	add	r18,r16,r18
    7fac:	81c00007 	ldb	r7,0(r16)
    7fb0:	01800284 	movi	r6,10
    7fb4:	84000044 	addi	r16,r16,1
    7fb8:	100b883a 	mov	r5,r2
    7fbc:	39fff404 	addi	r7,r7,-48
    7fc0:	8809883a 	mov	r4,r17
    7fc4:	0007dd80 	call	7dd8 <__multadd>
    7fc8:	84bff81e 	bne	r16,r18,7fac <__alt_data_end+0xff007fac>
    7fcc:	dfc00617 	ldw	ra,24(sp)
    7fd0:	dd400517 	ldw	r21,20(sp)
    7fd4:	dd000417 	ldw	r20,16(sp)
    7fd8:	dcc00317 	ldw	r19,12(sp)
    7fdc:	dc800217 	ldw	r18,8(sp)
    7fe0:	dc400117 	ldw	r17,4(sp)
    7fe4:	dc000017 	ldw	r16,0(sp)
    7fe8:	dec00704 	addi	sp,sp,28
    7fec:	f800283a 	ret
    7ff0:	84000284 	addi	r16,r16,10
    7ff4:	1827883a 	mov	r19,r3
    7ff8:	003fe906 	br	7fa0 <__alt_data_end+0xff007fa0>

00007ffc <__hi0bits>:
    7ffc:	20bfffec 	andhi	r2,r4,65535
    8000:	1000141e 	bne	r2,zero,8054 <__hi0bits+0x58>
    8004:	2008943a 	slli	r4,r4,16
    8008:	00800404 	movi	r2,16
    800c:	20ffc02c 	andhi	r3,r4,65280
    8010:	1800021e 	bne	r3,zero,801c <__hi0bits+0x20>
    8014:	2008923a 	slli	r4,r4,8
    8018:	10800204 	addi	r2,r2,8
    801c:	20fc002c 	andhi	r3,r4,61440
    8020:	1800021e 	bne	r3,zero,802c <__hi0bits+0x30>
    8024:	2008913a 	slli	r4,r4,4
    8028:	10800104 	addi	r2,r2,4
    802c:	20f0002c 	andhi	r3,r4,49152
    8030:	1800031e 	bne	r3,zero,8040 <__hi0bits+0x44>
    8034:	2109883a 	add	r4,r4,r4
    8038:	10800084 	addi	r2,r2,2
    803c:	2109883a 	add	r4,r4,r4
    8040:	20000316 	blt	r4,zero,8050 <__hi0bits+0x54>
    8044:	2110002c 	andhi	r4,r4,16384
    8048:	2000041e 	bne	r4,zero,805c <__hi0bits+0x60>
    804c:	00800804 	movi	r2,32
    8050:	f800283a 	ret
    8054:	0005883a 	mov	r2,zero
    8058:	003fec06 	br	800c <__alt_data_end+0xff00800c>
    805c:	10800044 	addi	r2,r2,1
    8060:	f800283a 	ret

00008064 <__lo0bits>:
    8064:	20c00017 	ldw	r3,0(r4)
    8068:	188001cc 	andi	r2,r3,7
    806c:	10000826 	beq	r2,zero,8090 <__lo0bits+0x2c>
    8070:	1880004c 	andi	r2,r3,1
    8074:	1000211e 	bne	r2,zero,80fc <__lo0bits+0x98>
    8078:	1880008c 	andi	r2,r3,2
    807c:	1000211e 	bne	r2,zero,8104 <__lo0bits+0xa0>
    8080:	1806d0ba 	srli	r3,r3,2
    8084:	00800084 	movi	r2,2
    8088:	20c00015 	stw	r3,0(r4)
    808c:	f800283a 	ret
    8090:	18bfffcc 	andi	r2,r3,65535
    8094:	10001326 	beq	r2,zero,80e4 <__lo0bits+0x80>
    8098:	0005883a 	mov	r2,zero
    809c:	19403fcc 	andi	r5,r3,255
    80a0:	2800021e 	bne	r5,zero,80ac <__lo0bits+0x48>
    80a4:	1806d23a 	srli	r3,r3,8
    80a8:	10800204 	addi	r2,r2,8
    80ac:	194003cc 	andi	r5,r3,15
    80b0:	2800021e 	bne	r5,zero,80bc <__lo0bits+0x58>
    80b4:	1806d13a 	srli	r3,r3,4
    80b8:	10800104 	addi	r2,r2,4
    80bc:	194000cc 	andi	r5,r3,3
    80c0:	2800021e 	bne	r5,zero,80cc <__lo0bits+0x68>
    80c4:	1806d0ba 	srli	r3,r3,2
    80c8:	10800084 	addi	r2,r2,2
    80cc:	1940004c 	andi	r5,r3,1
    80d0:	2800081e 	bne	r5,zero,80f4 <__lo0bits+0x90>
    80d4:	1806d07a 	srli	r3,r3,1
    80d8:	1800051e 	bne	r3,zero,80f0 <__lo0bits+0x8c>
    80dc:	00800804 	movi	r2,32
    80e0:	f800283a 	ret
    80e4:	1806d43a 	srli	r3,r3,16
    80e8:	00800404 	movi	r2,16
    80ec:	003feb06 	br	809c <__alt_data_end+0xff00809c>
    80f0:	10800044 	addi	r2,r2,1
    80f4:	20c00015 	stw	r3,0(r4)
    80f8:	f800283a 	ret
    80fc:	0005883a 	mov	r2,zero
    8100:	f800283a 	ret
    8104:	1806d07a 	srli	r3,r3,1
    8108:	00800044 	movi	r2,1
    810c:	20c00015 	stw	r3,0(r4)
    8110:	f800283a 	ret

00008114 <__i2b>:
    8114:	defffd04 	addi	sp,sp,-12
    8118:	dc000015 	stw	r16,0(sp)
    811c:	04000044 	movi	r16,1
    8120:	dc400115 	stw	r17,4(sp)
    8124:	2823883a 	mov	r17,r5
    8128:	800b883a 	mov	r5,r16
    812c:	dfc00215 	stw	ra,8(sp)
    8130:	0007d080 	call	7d08 <_Balloc>
    8134:	14400515 	stw	r17,20(r2)
    8138:	14000415 	stw	r16,16(r2)
    813c:	dfc00217 	ldw	ra,8(sp)
    8140:	dc400117 	ldw	r17,4(sp)
    8144:	dc000017 	ldw	r16,0(sp)
    8148:	dec00304 	addi	sp,sp,12
    814c:	f800283a 	ret

00008150 <__multiply>:
    8150:	defffa04 	addi	sp,sp,-24
    8154:	dcc00315 	stw	r19,12(sp)
    8158:	dc800215 	stw	r18,8(sp)
    815c:	34c00417 	ldw	r19,16(r6)
    8160:	2c800417 	ldw	r18,16(r5)
    8164:	dd000415 	stw	r20,16(sp)
    8168:	dc400115 	stw	r17,4(sp)
    816c:	dfc00515 	stw	ra,20(sp)
    8170:	dc000015 	stw	r16,0(sp)
    8174:	2829883a 	mov	r20,r5
    8178:	3023883a 	mov	r17,r6
    817c:	94c0050e 	bge	r18,r19,8194 <__multiply+0x44>
    8180:	9007883a 	mov	r3,r18
    8184:	3029883a 	mov	r20,r6
    8188:	9825883a 	mov	r18,r19
    818c:	2823883a 	mov	r17,r5
    8190:	1827883a 	mov	r19,r3
    8194:	a0800217 	ldw	r2,8(r20)
    8198:	94e1883a 	add	r16,r18,r19
    819c:	a1400117 	ldw	r5,4(r20)
    81a0:	1400010e 	bge	r2,r16,81a8 <__multiply+0x58>
    81a4:	29400044 	addi	r5,r5,1
    81a8:	0007d080 	call	7d08 <_Balloc>
    81ac:	8415883a 	add	r10,r16,r16
    81b0:	12c00504 	addi	r11,r2,20
    81b4:	5295883a 	add	r10,r10,r10
    81b8:	5a95883a 	add	r10,r11,r10
    81bc:	5807883a 	mov	r3,r11
    81c0:	5a80032e 	bgeu	r11,r10,81d0 <__multiply+0x80>
    81c4:	18000015 	stw	zero,0(r3)
    81c8:	18c00104 	addi	r3,r3,4
    81cc:	1abffd36 	bltu	r3,r10,81c4 <__alt_data_end+0xff0081c4>
    81d0:	9ce7883a 	add	r19,r19,r19
    81d4:	94a5883a 	add	r18,r18,r18
    81d8:	89800504 	addi	r6,r17,20
    81dc:	9ce7883a 	add	r19,r19,r19
    81e0:	a3400504 	addi	r13,r20,20
    81e4:	94a5883a 	add	r18,r18,r18
    81e8:	34d9883a 	add	r12,r6,r19
    81ec:	6c93883a 	add	r9,r13,r18
    81f0:	3300422e 	bgeu	r6,r12,82fc <__multiply+0x1ac>
    81f4:	37c00017 	ldw	ra,0(r6)
    81f8:	fbffffcc 	andi	r15,ra,65535
    81fc:	78001b26 	beq	r15,zero,826c <__multiply+0x11c>
    8200:	5811883a 	mov	r8,r11
    8204:	681d883a 	mov	r14,r13
    8208:	000f883a 	mov	r7,zero
    820c:	71000017 	ldw	r4,0(r14)
    8210:	40c00017 	ldw	r3,0(r8)
    8214:	73800104 	addi	r14,r14,4
    8218:	217fffcc 	andi	r5,r4,65535
    821c:	2bcb383a 	mul	r5,r5,r15
    8220:	2008d43a 	srli	r4,r4,16
    8224:	1c7fffcc 	andi	r17,r3,65535
    8228:	2c4b883a 	add	r5,r5,r17
    822c:	29cb883a 	add	r5,r5,r7
    8230:	23c9383a 	mul	r4,r4,r15
    8234:	1806d43a 	srli	r3,r3,16
    8238:	280ed43a 	srli	r7,r5,16
    823c:	297fffcc 	andi	r5,r5,65535
    8240:	20c7883a 	add	r3,r4,r3
    8244:	19c7883a 	add	r3,r3,r7
    8248:	1808943a 	slli	r4,r3,16
    824c:	4023883a 	mov	r17,r8
    8250:	180ed43a 	srli	r7,r3,16
    8254:	214ab03a 	or	r5,r4,r5
    8258:	41400015 	stw	r5,0(r8)
    825c:	42000104 	addi	r8,r8,4
    8260:	727fea36 	bltu	r14,r9,820c <__alt_data_end+0xff00820c>
    8264:	89c00115 	stw	r7,4(r17)
    8268:	37c00017 	ldw	ra,0(r6)
    826c:	f83ed43a 	srli	ra,ra,16
    8270:	f8001f26 	beq	ra,zero,82f0 <__multiply+0x1a0>
    8274:	58c00017 	ldw	r3,0(r11)
    8278:	681d883a 	mov	r14,r13
    827c:	581f883a 	mov	r15,r11
    8280:	1811883a 	mov	r8,r3
    8284:	5825883a 	mov	r18,r11
    8288:	000f883a 	mov	r7,zero
    828c:	00000106 	br	8294 <__multiply+0x144>
    8290:	8825883a 	mov	r18,r17
    8294:	7140000b 	ldhu	r5,0(r14)
    8298:	4010d43a 	srli	r8,r8,16
    829c:	193fffcc 	andi	r4,r3,65535
    82a0:	2fcb383a 	mul	r5,r5,ra
    82a4:	7bc00104 	addi	r15,r15,4
    82a8:	73800104 	addi	r14,r14,4
    82ac:	2a0b883a 	add	r5,r5,r8
    82b0:	29cb883a 	add	r5,r5,r7
    82b4:	2806943a 	slli	r3,r5,16
    82b8:	94400104 	addi	r17,r18,4
    82bc:	280ad43a 	srli	r5,r5,16
    82c0:	1908b03a 	or	r4,r3,r4
    82c4:	793fff15 	stw	r4,-4(r15)
    82c8:	70ffff17 	ldw	r3,-4(r14)
    82cc:	8a000017 	ldw	r8,0(r17)
    82d0:	1806d43a 	srli	r3,r3,16
    82d4:	413fffcc 	andi	r4,r8,65535
    82d8:	1fc7383a 	mul	r3,r3,ra
    82dc:	1907883a 	add	r3,r3,r4
    82e0:	1947883a 	add	r3,r3,r5
    82e4:	180ed43a 	srli	r7,r3,16
    82e8:	727fe936 	bltu	r14,r9,8290 <__alt_data_end+0xff008290>
    82ec:	90c00115 	stw	r3,4(r18)
    82f0:	31800104 	addi	r6,r6,4
    82f4:	5ac00104 	addi	r11,r11,4
    82f8:	333fbe36 	bltu	r6,r12,81f4 <__alt_data_end+0xff0081f4>
    82fc:	0400090e 	bge	zero,r16,8324 <__multiply+0x1d4>
    8300:	50ffff17 	ldw	r3,-4(r10)
    8304:	52bfff04 	addi	r10,r10,-4
    8308:	18000326 	beq	r3,zero,8318 <__multiply+0x1c8>
    830c:	00000506 	br	8324 <__multiply+0x1d4>
    8310:	50c00017 	ldw	r3,0(r10)
    8314:	1800031e 	bne	r3,zero,8324 <__multiply+0x1d4>
    8318:	843fffc4 	addi	r16,r16,-1
    831c:	52bfff04 	addi	r10,r10,-4
    8320:	803ffb1e 	bne	r16,zero,8310 <__alt_data_end+0xff008310>
    8324:	14000415 	stw	r16,16(r2)
    8328:	dfc00517 	ldw	ra,20(sp)
    832c:	dd000417 	ldw	r20,16(sp)
    8330:	dcc00317 	ldw	r19,12(sp)
    8334:	dc800217 	ldw	r18,8(sp)
    8338:	dc400117 	ldw	r17,4(sp)
    833c:	dc000017 	ldw	r16,0(sp)
    8340:	dec00604 	addi	sp,sp,24
    8344:	f800283a 	ret

00008348 <__pow5mult>:
    8348:	defffa04 	addi	sp,sp,-24
    834c:	dcc00315 	stw	r19,12(sp)
    8350:	dc000015 	stw	r16,0(sp)
    8354:	dfc00515 	stw	ra,20(sp)
    8358:	dd000415 	stw	r20,16(sp)
    835c:	dc800215 	stw	r18,8(sp)
    8360:	dc400115 	stw	r17,4(sp)
    8364:	308000cc 	andi	r2,r6,3
    8368:	3021883a 	mov	r16,r6
    836c:	2027883a 	mov	r19,r4
    8370:	10002f1e 	bne	r2,zero,8430 <__pow5mult+0xe8>
    8374:	2825883a 	mov	r18,r5
    8378:	8021d0ba 	srai	r16,r16,2
    837c:	80001a26 	beq	r16,zero,83e8 <__pow5mult+0xa0>
    8380:	9c401217 	ldw	r17,72(r19)
    8384:	8800061e 	bne	r17,zero,83a0 <__pow5mult+0x58>
    8388:	00003406 	br	845c <__pow5mult+0x114>
    838c:	8021d07a 	srai	r16,r16,1
    8390:	80001526 	beq	r16,zero,83e8 <__pow5mult+0xa0>
    8394:	88800017 	ldw	r2,0(r17)
    8398:	10001c26 	beq	r2,zero,840c <__pow5mult+0xc4>
    839c:	1023883a 	mov	r17,r2
    83a0:	8080004c 	andi	r2,r16,1
    83a4:	103ff926 	beq	r2,zero,838c <__alt_data_end+0xff00838c>
    83a8:	880d883a 	mov	r6,r17
    83ac:	900b883a 	mov	r5,r18
    83b0:	9809883a 	mov	r4,r19
    83b4:	00081500 	call	8150 <__multiply>
    83b8:	90001b26 	beq	r18,zero,8428 <__pow5mult+0xe0>
    83bc:	91000117 	ldw	r4,4(r18)
    83c0:	98c01317 	ldw	r3,76(r19)
    83c4:	8021d07a 	srai	r16,r16,1
    83c8:	2109883a 	add	r4,r4,r4
    83cc:	2109883a 	add	r4,r4,r4
    83d0:	1907883a 	add	r3,r3,r4
    83d4:	19000017 	ldw	r4,0(r3)
    83d8:	91000015 	stw	r4,0(r18)
    83dc:	1c800015 	stw	r18,0(r3)
    83e0:	1025883a 	mov	r18,r2
    83e4:	803feb1e 	bne	r16,zero,8394 <__alt_data_end+0xff008394>
    83e8:	9005883a 	mov	r2,r18
    83ec:	dfc00517 	ldw	ra,20(sp)
    83f0:	dd000417 	ldw	r20,16(sp)
    83f4:	dcc00317 	ldw	r19,12(sp)
    83f8:	dc800217 	ldw	r18,8(sp)
    83fc:	dc400117 	ldw	r17,4(sp)
    8400:	dc000017 	ldw	r16,0(sp)
    8404:	dec00604 	addi	sp,sp,24
    8408:	f800283a 	ret
    840c:	880d883a 	mov	r6,r17
    8410:	880b883a 	mov	r5,r17
    8414:	9809883a 	mov	r4,r19
    8418:	00081500 	call	8150 <__multiply>
    841c:	88800015 	stw	r2,0(r17)
    8420:	10000015 	stw	zero,0(r2)
    8424:	003fdd06 	br	839c <__alt_data_end+0xff00839c>
    8428:	1025883a 	mov	r18,r2
    842c:	003fd706 	br	838c <__alt_data_end+0xff00838c>
    8430:	10bfffc4 	addi	r2,r2,-1
    8434:	1085883a 	add	r2,r2,r2
    8438:	00c00074 	movhi	r3,1
    843c:	18c54c04 	addi	r3,r3,5424
    8440:	1085883a 	add	r2,r2,r2
    8444:	1885883a 	add	r2,r3,r2
    8448:	11800017 	ldw	r6,0(r2)
    844c:	000f883a 	mov	r7,zero
    8450:	0007dd80 	call	7dd8 <__multadd>
    8454:	1025883a 	mov	r18,r2
    8458:	003fc706 	br	8378 <__alt_data_end+0xff008378>
    845c:	05000044 	movi	r20,1
    8460:	a00b883a 	mov	r5,r20
    8464:	9809883a 	mov	r4,r19
    8468:	0007d080 	call	7d08 <_Balloc>
    846c:	1023883a 	mov	r17,r2
    8470:	00809c44 	movi	r2,625
    8474:	88800515 	stw	r2,20(r17)
    8478:	8d000415 	stw	r20,16(r17)
    847c:	9c401215 	stw	r17,72(r19)
    8480:	88000015 	stw	zero,0(r17)
    8484:	003fc606 	br	83a0 <__alt_data_end+0xff0083a0>

00008488 <__lshift>:
    8488:	defff904 	addi	sp,sp,-28
    848c:	dd400515 	stw	r21,20(sp)
    8490:	dcc00315 	stw	r19,12(sp)
    8494:	302bd17a 	srai	r21,r6,5
    8498:	2cc00417 	ldw	r19,16(r5)
    849c:	28800217 	ldw	r2,8(r5)
    84a0:	dd000415 	stw	r20,16(sp)
    84a4:	ace7883a 	add	r19,r21,r19
    84a8:	dc800215 	stw	r18,8(sp)
    84ac:	dc400115 	stw	r17,4(sp)
    84b0:	dc000015 	stw	r16,0(sp)
    84b4:	dfc00615 	stw	ra,24(sp)
    84b8:	9c000044 	addi	r16,r19,1
    84bc:	2823883a 	mov	r17,r5
    84c0:	3029883a 	mov	r20,r6
    84c4:	2025883a 	mov	r18,r4
    84c8:	29400117 	ldw	r5,4(r5)
    84cc:	1400030e 	bge	r2,r16,84dc <__lshift+0x54>
    84d0:	1085883a 	add	r2,r2,r2
    84d4:	29400044 	addi	r5,r5,1
    84d8:	143ffd16 	blt	r2,r16,84d0 <__alt_data_end+0xff0084d0>
    84dc:	9009883a 	mov	r4,r18
    84e0:	0007d080 	call	7d08 <_Balloc>
    84e4:	10c00504 	addi	r3,r2,20
    84e8:	0540070e 	bge	zero,r21,8508 <__lshift+0x80>
    84ec:	ad6b883a 	add	r21,r21,r21
    84f0:	ad6b883a 	add	r21,r21,r21
    84f4:	1809883a 	mov	r4,r3
    84f8:	1d47883a 	add	r3,r3,r21
    84fc:	20000015 	stw	zero,0(r4)
    8500:	21000104 	addi	r4,r4,4
    8504:	193ffd1e 	bne	r3,r4,84fc <__alt_data_end+0xff0084fc>
    8508:	8a000417 	ldw	r8,16(r17)
    850c:	89000504 	addi	r4,r17,20
    8510:	a18007cc 	andi	r6,r20,31
    8514:	4211883a 	add	r8,r8,r8
    8518:	4211883a 	add	r8,r8,r8
    851c:	2211883a 	add	r8,r4,r8
    8520:	30002326 	beq	r6,zero,85b0 <__lshift+0x128>
    8524:	02400804 	movi	r9,32
    8528:	4993c83a 	sub	r9,r9,r6
    852c:	000b883a 	mov	r5,zero
    8530:	21c00017 	ldw	r7,0(r4)
    8534:	1815883a 	mov	r10,r3
    8538:	18c00104 	addi	r3,r3,4
    853c:	398e983a 	sll	r7,r7,r6
    8540:	21000104 	addi	r4,r4,4
    8544:	394ab03a 	or	r5,r7,r5
    8548:	197fff15 	stw	r5,-4(r3)
    854c:	217fff17 	ldw	r5,-4(r4)
    8550:	2a4ad83a 	srl	r5,r5,r9
    8554:	223ff636 	bltu	r4,r8,8530 <__alt_data_end+0xff008530>
    8558:	51400115 	stw	r5,4(r10)
    855c:	28001a1e 	bne	r5,zero,85c8 <__lshift+0x140>
    8560:	843fffc4 	addi	r16,r16,-1
    8564:	14000415 	stw	r16,16(r2)
    8568:	88000826 	beq	r17,zero,858c <__lshift+0x104>
    856c:	89000117 	ldw	r4,4(r17)
    8570:	90c01317 	ldw	r3,76(r18)
    8574:	2109883a 	add	r4,r4,r4
    8578:	2109883a 	add	r4,r4,r4
    857c:	1907883a 	add	r3,r3,r4
    8580:	19000017 	ldw	r4,0(r3)
    8584:	89000015 	stw	r4,0(r17)
    8588:	1c400015 	stw	r17,0(r3)
    858c:	dfc00617 	ldw	ra,24(sp)
    8590:	dd400517 	ldw	r21,20(sp)
    8594:	dd000417 	ldw	r20,16(sp)
    8598:	dcc00317 	ldw	r19,12(sp)
    859c:	dc800217 	ldw	r18,8(sp)
    85a0:	dc400117 	ldw	r17,4(sp)
    85a4:	dc000017 	ldw	r16,0(sp)
    85a8:	dec00704 	addi	sp,sp,28
    85ac:	f800283a 	ret
    85b0:	21400017 	ldw	r5,0(r4)
    85b4:	18c00104 	addi	r3,r3,4
    85b8:	21000104 	addi	r4,r4,4
    85bc:	197fff15 	stw	r5,-4(r3)
    85c0:	223ffb36 	bltu	r4,r8,85b0 <__alt_data_end+0xff0085b0>
    85c4:	003fe606 	br	8560 <__alt_data_end+0xff008560>
    85c8:	9c000084 	addi	r16,r19,2
    85cc:	003fe406 	br	8560 <__alt_data_end+0xff008560>

000085d0 <__mcmp>:
    85d0:	20800417 	ldw	r2,16(r4)
    85d4:	28c00417 	ldw	r3,16(r5)
    85d8:	10c5c83a 	sub	r2,r2,r3
    85dc:	1000111e 	bne	r2,zero,8624 <__mcmp+0x54>
    85e0:	18c7883a 	add	r3,r3,r3
    85e4:	18c7883a 	add	r3,r3,r3
    85e8:	21000504 	addi	r4,r4,20
    85ec:	29400504 	addi	r5,r5,20
    85f0:	20c5883a 	add	r2,r4,r3
    85f4:	28cb883a 	add	r5,r5,r3
    85f8:	00000106 	br	8600 <__mcmp+0x30>
    85fc:	20800a2e 	bgeu	r4,r2,8628 <__mcmp+0x58>
    8600:	10bfff04 	addi	r2,r2,-4
    8604:	297fff04 	addi	r5,r5,-4
    8608:	11800017 	ldw	r6,0(r2)
    860c:	28c00017 	ldw	r3,0(r5)
    8610:	30fffa26 	beq	r6,r3,85fc <__alt_data_end+0xff0085fc>
    8614:	30c00236 	bltu	r6,r3,8620 <__mcmp+0x50>
    8618:	00800044 	movi	r2,1
    861c:	f800283a 	ret
    8620:	00bfffc4 	movi	r2,-1
    8624:	f800283a 	ret
    8628:	0005883a 	mov	r2,zero
    862c:	f800283a 	ret

00008630 <__mdiff>:
    8630:	28c00417 	ldw	r3,16(r5)
    8634:	30800417 	ldw	r2,16(r6)
    8638:	defffa04 	addi	sp,sp,-24
    863c:	dcc00315 	stw	r19,12(sp)
    8640:	dc800215 	stw	r18,8(sp)
    8644:	dfc00515 	stw	ra,20(sp)
    8648:	dd000415 	stw	r20,16(sp)
    864c:	dc400115 	stw	r17,4(sp)
    8650:	dc000015 	stw	r16,0(sp)
    8654:	1887c83a 	sub	r3,r3,r2
    8658:	2825883a 	mov	r18,r5
    865c:	3027883a 	mov	r19,r6
    8660:	1800141e 	bne	r3,zero,86b4 <__mdiff+0x84>
    8664:	1085883a 	add	r2,r2,r2
    8668:	1085883a 	add	r2,r2,r2
    866c:	2a000504 	addi	r8,r5,20
    8670:	34000504 	addi	r16,r6,20
    8674:	4087883a 	add	r3,r8,r2
    8678:	8085883a 	add	r2,r16,r2
    867c:	00000106 	br	8684 <__mdiff+0x54>
    8680:	40c0592e 	bgeu	r8,r3,87e8 <__mdiff+0x1b8>
    8684:	18ffff04 	addi	r3,r3,-4
    8688:	10bfff04 	addi	r2,r2,-4
    868c:	19c00017 	ldw	r7,0(r3)
    8690:	11400017 	ldw	r5,0(r2)
    8694:	397ffa26 	beq	r7,r5,8680 <__alt_data_end+0xff008680>
    8698:	3940592e 	bgeu	r7,r5,8800 <__mdiff+0x1d0>
    869c:	9005883a 	mov	r2,r18
    86a0:	4023883a 	mov	r17,r8
    86a4:	9825883a 	mov	r18,r19
    86a8:	05000044 	movi	r20,1
    86ac:	1027883a 	mov	r19,r2
    86b0:	00000406 	br	86c4 <__mdiff+0x94>
    86b4:	18005616 	blt	r3,zero,8810 <__mdiff+0x1e0>
    86b8:	34400504 	addi	r17,r6,20
    86bc:	2c000504 	addi	r16,r5,20
    86c0:	0029883a 	mov	r20,zero
    86c4:	91400117 	ldw	r5,4(r18)
    86c8:	0007d080 	call	7d08 <_Balloc>
    86cc:	92400417 	ldw	r9,16(r18)
    86d0:	9b000417 	ldw	r12,16(r19)
    86d4:	12c00504 	addi	r11,r2,20
    86d8:	4a51883a 	add	r8,r9,r9
    86dc:	6319883a 	add	r12,r12,r12
    86e0:	4211883a 	add	r8,r8,r8
    86e4:	6319883a 	add	r12,r12,r12
    86e8:	15000315 	stw	r20,12(r2)
    86ec:	8211883a 	add	r8,r16,r8
    86f0:	8b19883a 	add	r12,r17,r12
    86f4:	0007883a 	mov	r3,zero
    86f8:	81400017 	ldw	r5,0(r16)
    86fc:	89c00017 	ldw	r7,0(r17)
    8700:	59800104 	addi	r6,r11,4
    8704:	293fffcc 	andi	r4,r5,65535
    8708:	20c7883a 	add	r3,r4,r3
    870c:	393fffcc 	andi	r4,r7,65535
    8710:	1909c83a 	sub	r4,r3,r4
    8714:	280ad43a 	srli	r5,r5,16
    8718:	380ed43a 	srli	r7,r7,16
    871c:	2007d43a 	srai	r3,r4,16
    8720:	213fffcc 	andi	r4,r4,65535
    8724:	29cbc83a 	sub	r5,r5,r7
    8728:	28c7883a 	add	r3,r5,r3
    872c:	180a943a 	slli	r5,r3,16
    8730:	8c400104 	addi	r17,r17,4
    8734:	84000104 	addi	r16,r16,4
    8738:	2908b03a 	or	r4,r5,r4
    873c:	59000015 	stw	r4,0(r11)
    8740:	1807d43a 	srai	r3,r3,16
    8744:	3015883a 	mov	r10,r6
    8748:	3017883a 	mov	r11,r6
    874c:	8b3fea36 	bltu	r17,r12,86f8 <__alt_data_end+0xff0086f8>
    8750:	8200162e 	bgeu	r16,r8,87ac <__mdiff+0x17c>
    8754:	8017883a 	mov	r11,r16
    8758:	59400017 	ldw	r5,0(r11)
    875c:	31800104 	addi	r6,r6,4
    8760:	5ac00104 	addi	r11,r11,4
    8764:	293fffcc 	andi	r4,r5,65535
    8768:	20c7883a 	add	r3,r4,r3
    876c:	280ed43a 	srli	r7,r5,16
    8770:	180bd43a 	srai	r5,r3,16
    8774:	193fffcc 	andi	r4,r3,65535
    8778:	3947883a 	add	r3,r7,r5
    877c:	180a943a 	slli	r5,r3,16
    8780:	1807d43a 	srai	r3,r3,16
    8784:	2908b03a 	or	r4,r5,r4
    8788:	313fff15 	stw	r4,-4(r6)
    878c:	5a3ff236 	bltu	r11,r8,8758 <__alt_data_end+0xff008758>
    8790:	0406303a 	nor	r3,zero,r16
    8794:	1a07883a 	add	r3,r3,r8
    8798:	1806d0ba 	srli	r3,r3,2
    879c:	18c00044 	addi	r3,r3,1
    87a0:	18c7883a 	add	r3,r3,r3
    87a4:	18c7883a 	add	r3,r3,r3
    87a8:	50d5883a 	add	r10,r10,r3
    87ac:	50ffff04 	addi	r3,r10,-4
    87b0:	2000041e 	bne	r4,zero,87c4 <__mdiff+0x194>
    87b4:	18ffff04 	addi	r3,r3,-4
    87b8:	19000017 	ldw	r4,0(r3)
    87bc:	4a7fffc4 	addi	r9,r9,-1
    87c0:	203ffc26 	beq	r4,zero,87b4 <__alt_data_end+0xff0087b4>
    87c4:	12400415 	stw	r9,16(r2)
    87c8:	dfc00517 	ldw	ra,20(sp)
    87cc:	dd000417 	ldw	r20,16(sp)
    87d0:	dcc00317 	ldw	r19,12(sp)
    87d4:	dc800217 	ldw	r18,8(sp)
    87d8:	dc400117 	ldw	r17,4(sp)
    87dc:	dc000017 	ldw	r16,0(sp)
    87e0:	dec00604 	addi	sp,sp,24
    87e4:	f800283a 	ret
    87e8:	000b883a 	mov	r5,zero
    87ec:	0007d080 	call	7d08 <_Balloc>
    87f0:	00c00044 	movi	r3,1
    87f4:	10c00415 	stw	r3,16(r2)
    87f8:	10000515 	stw	zero,20(r2)
    87fc:	003ff206 	br	87c8 <__alt_data_end+0xff0087c8>
    8800:	8023883a 	mov	r17,r16
    8804:	0029883a 	mov	r20,zero
    8808:	4021883a 	mov	r16,r8
    880c:	003fad06 	br	86c4 <__alt_data_end+0xff0086c4>
    8810:	9005883a 	mov	r2,r18
    8814:	94400504 	addi	r17,r18,20
    8818:	9c000504 	addi	r16,r19,20
    881c:	9825883a 	mov	r18,r19
    8820:	05000044 	movi	r20,1
    8824:	1027883a 	mov	r19,r2
    8828:	003fa606 	br	86c4 <__alt_data_end+0xff0086c4>

0000882c <__ulp>:
    882c:	295ffc2c 	andhi	r5,r5,32752
    8830:	00bf3034 	movhi	r2,64704
    8834:	2887883a 	add	r3,r5,r2
    8838:	00c0020e 	bge	zero,r3,8844 <__ulp+0x18>
    883c:	0005883a 	mov	r2,zero
    8840:	f800283a 	ret
    8844:	00c7c83a 	sub	r3,zero,r3
    8848:	1807d53a 	srai	r3,r3,20
    884c:	008004c4 	movi	r2,19
    8850:	10c00b0e 	bge	r2,r3,8880 <__ulp+0x54>
    8854:	18bffb04 	addi	r2,r3,-20
    8858:	01000784 	movi	r4,30
    885c:	0007883a 	mov	r3,zero
    8860:	20800516 	blt	r4,r2,8878 <__ulp+0x4c>
    8864:	010007c4 	movi	r4,31
    8868:	2089c83a 	sub	r4,r4,r2
    886c:	00800044 	movi	r2,1
    8870:	1104983a 	sll	r2,r2,r4
    8874:	f800283a 	ret
    8878:	00800044 	movi	r2,1
    887c:	f800283a 	ret
    8880:	01400234 	movhi	r5,8
    8884:	28c7d83a 	sra	r3,r5,r3
    8888:	0005883a 	mov	r2,zero
    888c:	f800283a 	ret

00008890 <__b2d>:
    8890:	defffa04 	addi	sp,sp,-24
    8894:	dc000015 	stw	r16,0(sp)
    8898:	24000417 	ldw	r16,16(r4)
    889c:	dc400115 	stw	r17,4(sp)
    88a0:	24400504 	addi	r17,r4,20
    88a4:	8421883a 	add	r16,r16,r16
    88a8:	8421883a 	add	r16,r16,r16
    88ac:	8c21883a 	add	r16,r17,r16
    88b0:	dc800215 	stw	r18,8(sp)
    88b4:	84bfff17 	ldw	r18,-4(r16)
    88b8:	dd000415 	stw	r20,16(sp)
    88bc:	dcc00315 	stw	r19,12(sp)
    88c0:	9009883a 	mov	r4,r18
    88c4:	2829883a 	mov	r20,r5
    88c8:	dfc00515 	stw	ra,20(sp)
    88cc:	0007ffc0 	call	7ffc <__hi0bits>
    88d0:	00c00804 	movi	r3,32
    88d4:	1889c83a 	sub	r4,r3,r2
    88d8:	a1000015 	stw	r4,0(r20)
    88dc:	01000284 	movi	r4,10
    88e0:	84ffff04 	addi	r19,r16,-4
    88e4:	20801216 	blt	r4,r2,8930 <__b2d+0xa0>
    88e8:	018002c4 	movi	r6,11
    88ec:	308dc83a 	sub	r6,r6,r2
    88f0:	9186d83a 	srl	r3,r18,r6
    88f4:	18cffc34 	orhi	r3,r3,16368
    88f8:	8cc0212e 	bgeu	r17,r19,8980 <__b2d+0xf0>
    88fc:	813ffe17 	ldw	r4,-8(r16)
    8900:	218cd83a 	srl	r6,r4,r6
    8904:	10800544 	addi	r2,r2,21
    8908:	9084983a 	sll	r2,r18,r2
    890c:	1184b03a 	or	r2,r2,r6
    8910:	dfc00517 	ldw	ra,20(sp)
    8914:	dd000417 	ldw	r20,16(sp)
    8918:	dcc00317 	ldw	r19,12(sp)
    891c:	dc800217 	ldw	r18,8(sp)
    8920:	dc400117 	ldw	r17,4(sp)
    8924:	dc000017 	ldw	r16,0(sp)
    8928:	dec00604 	addi	sp,sp,24
    892c:	f800283a 	ret
    8930:	8cc00f2e 	bgeu	r17,r19,8970 <__b2d+0xe0>
    8934:	117ffd44 	addi	r5,r2,-11
    8938:	80bffe17 	ldw	r2,-8(r16)
    893c:	28000e26 	beq	r5,zero,8978 <__b2d+0xe8>
    8940:	1949c83a 	sub	r4,r3,r5
    8944:	9164983a 	sll	r18,r18,r5
    8948:	1106d83a 	srl	r3,r2,r4
    894c:	81bffe04 	addi	r6,r16,-8
    8950:	948ffc34 	orhi	r18,r18,16368
    8954:	90c6b03a 	or	r3,r18,r3
    8958:	89800e2e 	bgeu	r17,r6,8994 <__b2d+0x104>
    895c:	81bffd17 	ldw	r6,-12(r16)
    8960:	1144983a 	sll	r2,r2,r5
    8964:	310ad83a 	srl	r5,r6,r4
    8968:	2884b03a 	or	r2,r5,r2
    896c:	003fe806 	br	8910 <__alt_data_end+0xff008910>
    8970:	10bffd44 	addi	r2,r2,-11
    8974:	1000041e 	bne	r2,zero,8988 <__b2d+0xf8>
    8978:	90cffc34 	orhi	r3,r18,16368
    897c:	003fe406 	br	8910 <__alt_data_end+0xff008910>
    8980:	000d883a 	mov	r6,zero
    8984:	003fdf06 	br	8904 <__alt_data_end+0xff008904>
    8988:	90a4983a 	sll	r18,r18,r2
    898c:	0005883a 	mov	r2,zero
    8990:	003ff906 	br	8978 <__alt_data_end+0xff008978>
    8994:	1144983a 	sll	r2,r2,r5
    8998:	003fdd06 	br	8910 <__alt_data_end+0xff008910>

0000899c <__d2b>:
    899c:	defff804 	addi	sp,sp,-32
    89a0:	dc000215 	stw	r16,8(sp)
    89a4:	3021883a 	mov	r16,r6
    89a8:	dc400315 	stw	r17,12(sp)
    89ac:	8022907a 	slli	r17,r16,1
    89b0:	dd000615 	stw	r20,24(sp)
    89b4:	2829883a 	mov	r20,r5
    89b8:	01400044 	movi	r5,1
    89bc:	dcc00515 	stw	r19,20(sp)
    89c0:	dc800415 	stw	r18,16(sp)
    89c4:	dfc00715 	stw	ra,28(sp)
    89c8:	3825883a 	mov	r18,r7
    89cc:	8822d57a 	srli	r17,r17,21
    89d0:	0007d080 	call	7d08 <_Balloc>
    89d4:	1027883a 	mov	r19,r2
    89d8:	00800434 	movhi	r2,16
    89dc:	10bfffc4 	addi	r2,r2,-1
    89e0:	808c703a 	and	r6,r16,r2
    89e4:	88000126 	beq	r17,zero,89ec <__d2b+0x50>
    89e8:	31800434 	orhi	r6,r6,16
    89ec:	d9800015 	stw	r6,0(sp)
    89f0:	a0002426 	beq	r20,zero,8a84 <__d2b+0xe8>
    89f4:	d9000104 	addi	r4,sp,4
    89f8:	dd000115 	stw	r20,4(sp)
    89fc:	00080640 	call	8064 <__lo0bits>
    8a00:	d8c00017 	ldw	r3,0(sp)
    8a04:	10002f1e 	bne	r2,zero,8ac4 <__d2b+0x128>
    8a08:	d9000117 	ldw	r4,4(sp)
    8a0c:	99000515 	stw	r4,20(r19)
    8a10:	1821003a 	cmpeq	r16,r3,zero
    8a14:	01000084 	movi	r4,2
    8a18:	2421c83a 	sub	r16,r4,r16
    8a1c:	98c00615 	stw	r3,24(r19)
    8a20:	9c000415 	stw	r16,16(r19)
    8a24:	88001f1e 	bne	r17,zero,8aa4 <__d2b+0x108>
    8a28:	10bef384 	addi	r2,r2,-1074
    8a2c:	90800015 	stw	r2,0(r18)
    8a30:	00900034 	movhi	r2,16384
    8a34:	10bfffc4 	addi	r2,r2,-1
    8a38:	8085883a 	add	r2,r16,r2
    8a3c:	1085883a 	add	r2,r2,r2
    8a40:	1085883a 	add	r2,r2,r2
    8a44:	9885883a 	add	r2,r19,r2
    8a48:	11000517 	ldw	r4,20(r2)
    8a4c:	8020917a 	slli	r16,r16,5
    8a50:	0007ffc0 	call	7ffc <__hi0bits>
    8a54:	d8c00817 	ldw	r3,32(sp)
    8a58:	8085c83a 	sub	r2,r16,r2
    8a5c:	18800015 	stw	r2,0(r3)
    8a60:	9805883a 	mov	r2,r19
    8a64:	dfc00717 	ldw	ra,28(sp)
    8a68:	dd000617 	ldw	r20,24(sp)
    8a6c:	dcc00517 	ldw	r19,20(sp)
    8a70:	dc800417 	ldw	r18,16(sp)
    8a74:	dc400317 	ldw	r17,12(sp)
    8a78:	dc000217 	ldw	r16,8(sp)
    8a7c:	dec00804 	addi	sp,sp,32
    8a80:	f800283a 	ret
    8a84:	d809883a 	mov	r4,sp
    8a88:	00080640 	call	8064 <__lo0bits>
    8a8c:	d8c00017 	ldw	r3,0(sp)
    8a90:	04000044 	movi	r16,1
    8a94:	9c000415 	stw	r16,16(r19)
    8a98:	98c00515 	stw	r3,20(r19)
    8a9c:	10800804 	addi	r2,r2,32
    8aa0:	883fe126 	beq	r17,zero,8a28 <__alt_data_end+0xff008a28>
    8aa4:	00c00d44 	movi	r3,53
    8aa8:	8c7ef344 	addi	r17,r17,-1075
    8aac:	88a3883a 	add	r17,r17,r2
    8ab0:	1885c83a 	sub	r2,r3,r2
    8ab4:	d8c00817 	ldw	r3,32(sp)
    8ab8:	94400015 	stw	r17,0(r18)
    8abc:	18800015 	stw	r2,0(r3)
    8ac0:	003fe706 	br	8a60 <__alt_data_end+0xff008a60>
    8ac4:	01000804 	movi	r4,32
    8ac8:	2089c83a 	sub	r4,r4,r2
    8acc:	1908983a 	sll	r4,r3,r4
    8ad0:	d9400117 	ldw	r5,4(sp)
    8ad4:	1886d83a 	srl	r3,r3,r2
    8ad8:	2148b03a 	or	r4,r4,r5
    8adc:	99000515 	stw	r4,20(r19)
    8ae0:	d8c00015 	stw	r3,0(sp)
    8ae4:	003fca06 	br	8a10 <__alt_data_end+0xff008a10>

00008ae8 <__ratio>:
    8ae8:	defff904 	addi	sp,sp,-28
    8aec:	dc400315 	stw	r17,12(sp)
    8af0:	2823883a 	mov	r17,r5
    8af4:	d9400104 	addi	r5,sp,4
    8af8:	dfc00615 	stw	ra,24(sp)
    8afc:	dcc00515 	stw	r19,20(sp)
    8b00:	dc800415 	stw	r18,16(sp)
    8b04:	2027883a 	mov	r19,r4
    8b08:	dc000215 	stw	r16,8(sp)
    8b0c:	00088900 	call	8890 <__b2d>
    8b10:	d80b883a 	mov	r5,sp
    8b14:	8809883a 	mov	r4,r17
    8b18:	1025883a 	mov	r18,r2
    8b1c:	1821883a 	mov	r16,r3
    8b20:	00088900 	call	8890 <__b2d>
    8b24:	8a000417 	ldw	r8,16(r17)
    8b28:	99000417 	ldw	r4,16(r19)
    8b2c:	d9400117 	ldw	r5,4(sp)
    8b30:	2209c83a 	sub	r4,r4,r8
    8b34:	2010917a 	slli	r8,r4,5
    8b38:	d9000017 	ldw	r4,0(sp)
    8b3c:	2909c83a 	sub	r4,r5,r4
    8b40:	4109883a 	add	r4,r8,r4
    8b44:	01000e0e 	bge	zero,r4,8b80 <__ratio+0x98>
    8b48:	2008953a 	slli	r4,r4,20
    8b4c:	2421883a 	add	r16,r4,r16
    8b50:	100d883a 	mov	r6,r2
    8b54:	180f883a 	mov	r7,r3
    8b58:	9009883a 	mov	r4,r18
    8b5c:	800b883a 	mov	r5,r16
    8b60:	000c7cc0 	call	c7cc <__divdf3>
    8b64:	dfc00617 	ldw	ra,24(sp)
    8b68:	dcc00517 	ldw	r19,20(sp)
    8b6c:	dc800417 	ldw	r18,16(sp)
    8b70:	dc400317 	ldw	r17,12(sp)
    8b74:	dc000217 	ldw	r16,8(sp)
    8b78:	dec00704 	addi	sp,sp,28
    8b7c:	f800283a 	ret
    8b80:	2008953a 	slli	r4,r4,20
    8b84:	1907c83a 	sub	r3,r3,r4
    8b88:	003ff106 	br	8b50 <__alt_data_end+0xff008b50>

00008b8c <_mprec_log10>:
    8b8c:	defffe04 	addi	sp,sp,-8
    8b90:	dc000015 	stw	r16,0(sp)
    8b94:	dfc00115 	stw	ra,4(sp)
    8b98:	008005c4 	movi	r2,23
    8b9c:	2021883a 	mov	r16,r4
    8ba0:	11000d0e 	bge	r2,r4,8bd8 <_mprec_log10+0x4c>
    8ba4:	0005883a 	mov	r2,zero
    8ba8:	00cffc34 	movhi	r3,16368
    8bac:	843fffc4 	addi	r16,r16,-1
    8bb0:	000d883a 	mov	r6,zero
    8bb4:	01d00934 	movhi	r7,16420
    8bb8:	1009883a 	mov	r4,r2
    8bbc:	180b883a 	mov	r5,r3
    8bc0:	000d30c0 	call	d30c <__muldf3>
    8bc4:	803ff91e 	bne	r16,zero,8bac <__alt_data_end+0xff008bac>
    8bc8:	dfc00117 	ldw	ra,4(sp)
    8bcc:	dc000017 	ldw	r16,0(sp)
    8bd0:	dec00204 	addi	sp,sp,8
    8bd4:	f800283a 	ret
    8bd8:	202090fa 	slli	r16,r4,3
    8bdc:	00800074 	movhi	r2,1
    8be0:	10856304 	addi	r2,r2,5516
    8be4:	1421883a 	add	r16,r2,r16
    8be8:	80800017 	ldw	r2,0(r16)
    8bec:	80c00117 	ldw	r3,4(r16)
    8bf0:	dfc00117 	ldw	ra,4(sp)
    8bf4:	dc000017 	ldw	r16,0(sp)
    8bf8:	dec00204 	addi	sp,sp,8
    8bfc:	f800283a 	ret

00008c00 <__copybits>:
    8c00:	297fffc4 	addi	r5,r5,-1
    8c04:	280fd17a 	srai	r7,r5,5
    8c08:	30c00417 	ldw	r3,16(r6)
    8c0c:	30800504 	addi	r2,r6,20
    8c10:	39c00044 	addi	r7,r7,1
    8c14:	18c7883a 	add	r3,r3,r3
    8c18:	39cf883a 	add	r7,r7,r7
    8c1c:	18c7883a 	add	r3,r3,r3
    8c20:	39cf883a 	add	r7,r7,r7
    8c24:	10c7883a 	add	r3,r2,r3
    8c28:	21cf883a 	add	r7,r4,r7
    8c2c:	10c00d2e 	bgeu	r2,r3,8c64 <__copybits+0x64>
    8c30:	200b883a 	mov	r5,r4
    8c34:	12000017 	ldw	r8,0(r2)
    8c38:	29400104 	addi	r5,r5,4
    8c3c:	10800104 	addi	r2,r2,4
    8c40:	2a3fff15 	stw	r8,-4(r5)
    8c44:	10fffb36 	bltu	r2,r3,8c34 <__alt_data_end+0xff008c34>
    8c48:	1985c83a 	sub	r2,r3,r6
    8c4c:	10bffac4 	addi	r2,r2,-21
    8c50:	1004d0ba 	srli	r2,r2,2
    8c54:	10800044 	addi	r2,r2,1
    8c58:	1085883a 	add	r2,r2,r2
    8c5c:	1085883a 	add	r2,r2,r2
    8c60:	2089883a 	add	r4,r4,r2
    8c64:	21c0032e 	bgeu	r4,r7,8c74 <__copybits+0x74>
    8c68:	20000015 	stw	zero,0(r4)
    8c6c:	21000104 	addi	r4,r4,4
    8c70:	21fffd36 	bltu	r4,r7,8c68 <__alt_data_end+0xff008c68>
    8c74:	f800283a 	ret

00008c78 <__any_on>:
    8c78:	20c00417 	ldw	r3,16(r4)
    8c7c:	2805d17a 	srai	r2,r5,5
    8c80:	21000504 	addi	r4,r4,20
    8c84:	18800d0e 	bge	r3,r2,8cbc <__any_on+0x44>
    8c88:	18c7883a 	add	r3,r3,r3
    8c8c:	18c7883a 	add	r3,r3,r3
    8c90:	20c7883a 	add	r3,r4,r3
    8c94:	20c0192e 	bgeu	r4,r3,8cfc <__any_on+0x84>
    8c98:	18bfff17 	ldw	r2,-4(r3)
    8c9c:	18ffff04 	addi	r3,r3,-4
    8ca0:	1000041e 	bne	r2,zero,8cb4 <__any_on+0x3c>
    8ca4:	20c0142e 	bgeu	r4,r3,8cf8 <__any_on+0x80>
    8ca8:	18ffff04 	addi	r3,r3,-4
    8cac:	19400017 	ldw	r5,0(r3)
    8cb0:	283ffc26 	beq	r5,zero,8ca4 <__alt_data_end+0xff008ca4>
    8cb4:	00800044 	movi	r2,1
    8cb8:	f800283a 	ret
    8cbc:	10c00a0e 	bge	r2,r3,8ce8 <__any_on+0x70>
    8cc0:	1085883a 	add	r2,r2,r2
    8cc4:	1085883a 	add	r2,r2,r2
    8cc8:	294007cc 	andi	r5,r5,31
    8ccc:	2087883a 	add	r3,r4,r2
    8cd0:	283ff026 	beq	r5,zero,8c94 <__alt_data_end+0xff008c94>
    8cd4:	19800017 	ldw	r6,0(r3)
    8cd8:	3144d83a 	srl	r2,r6,r5
    8cdc:	114a983a 	sll	r5,r2,r5
    8ce0:	317ff41e 	bne	r6,r5,8cb4 <__alt_data_end+0xff008cb4>
    8ce4:	003feb06 	br	8c94 <__alt_data_end+0xff008c94>
    8ce8:	1085883a 	add	r2,r2,r2
    8cec:	1085883a 	add	r2,r2,r2
    8cf0:	2087883a 	add	r3,r4,r2
    8cf4:	003fe706 	br	8c94 <__alt_data_end+0xff008c94>
    8cf8:	f800283a 	ret
    8cfc:	0005883a 	mov	r2,zero
    8d00:	f800283a 	ret

00008d04 <_realloc_r>:
    8d04:	defff604 	addi	sp,sp,-40
    8d08:	dc800215 	stw	r18,8(sp)
    8d0c:	dfc00915 	stw	ra,36(sp)
    8d10:	df000815 	stw	fp,32(sp)
    8d14:	ddc00715 	stw	r23,28(sp)
    8d18:	dd800615 	stw	r22,24(sp)
    8d1c:	dd400515 	stw	r21,20(sp)
    8d20:	dd000415 	stw	r20,16(sp)
    8d24:	dcc00315 	stw	r19,12(sp)
    8d28:	dc400115 	stw	r17,4(sp)
    8d2c:	dc000015 	stw	r16,0(sp)
    8d30:	3025883a 	mov	r18,r6
    8d34:	2800b726 	beq	r5,zero,9014 <_realloc_r+0x310>
    8d38:	282b883a 	mov	r21,r5
    8d3c:	2029883a 	mov	r20,r4
    8d40:	000eb040 	call	eb04 <__malloc_lock>
    8d44:	a8bfff17 	ldw	r2,-4(r21)
    8d48:	043fff04 	movi	r16,-4
    8d4c:	90c002c4 	addi	r3,r18,11
    8d50:	01000584 	movi	r4,22
    8d54:	acfffe04 	addi	r19,r21,-8
    8d58:	1420703a 	and	r16,r2,r16
    8d5c:	20c0332e 	bgeu	r4,r3,8e2c <_realloc_r+0x128>
    8d60:	047ffe04 	movi	r17,-8
    8d64:	1c62703a 	and	r17,r3,r17
    8d68:	8807883a 	mov	r3,r17
    8d6c:	88005816 	blt	r17,zero,8ed0 <_realloc_r+0x1cc>
    8d70:	8c805736 	bltu	r17,r18,8ed0 <_realloc_r+0x1cc>
    8d74:	80c0300e 	bge	r16,r3,8e38 <_realloc_r+0x134>
    8d78:	07000074 	movhi	fp,1
    8d7c:	e7062804 	addi	fp,fp,6304
    8d80:	e1c00217 	ldw	r7,8(fp)
    8d84:	9c09883a 	add	r4,r19,r16
    8d88:	22000117 	ldw	r8,4(r4)
    8d8c:	21c06326 	beq	r4,r7,8f1c <_realloc_r+0x218>
    8d90:	017fff84 	movi	r5,-2
    8d94:	414a703a 	and	r5,r8,r5
    8d98:	214b883a 	add	r5,r4,r5
    8d9c:	29800117 	ldw	r6,4(r5)
    8da0:	3180004c 	andi	r6,r6,1
    8da4:	30003f26 	beq	r6,zero,8ea4 <_realloc_r+0x1a0>
    8da8:	1080004c 	andi	r2,r2,1
    8dac:	10008326 	beq	r2,zero,8fbc <_realloc_r+0x2b8>
    8db0:	900b883a 	mov	r5,r18
    8db4:	a009883a 	mov	r4,r20
    8db8:	0001e1c0 	call	1e1c <_malloc_r>
    8dbc:	1025883a 	mov	r18,r2
    8dc0:	10011e26 	beq	r2,zero,923c <_realloc_r+0x538>
    8dc4:	a93fff17 	ldw	r4,-4(r21)
    8dc8:	10fffe04 	addi	r3,r2,-8
    8dcc:	00bfff84 	movi	r2,-2
    8dd0:	2084703a 	and	r2,r4,r2
    8dd4:	9885883a 	add	r2,r19,r2
    8dd8:	1880ee26 	beq	r3,r2,9194 <_realloc_r+0x490>
    8ddc:	81bfff04 	addi	r6,r16,-4
    8de0:	00800904 	movi	r2,36
    8de4:	1180b836 	bltu	r2,r6,90c8 <_realloc_r+0x3c4>
    8de8:	00c004c4 	movi	r3,19
    8dec:	19809636 	bltu	r3,r6,9048 <_realloc_r+0x344>
    8df0:	9005883a 	mov	r2,r18
    8df4:	a807883a 	mov	r3,r21
    8df8:	19000017 	ldw	r4,0(r3)
    8dfc:	11000015 	stw	r4,0(r2)
    8e00:	19000117 	ldw	r4,4(r3)
    8e04:	11000115 	stw	r4,4(r2)
    8e08:	18c00217 	ldw	r3,8(r3)
    8e0c:	10c00215 	stw	r3,8(r2)
    8e10:	a80b883a 	mov	r5,r21
    8e14:	a009883a 	mov	r4,r20
    8e18:	0006c6c0 	call	6c6c <_free_r>
    8e1c:	a009883a 	mov	r4,r20
    8e20:	000eb280 	call	eb28 <__malloc_unlock>
    8e24:	9005883a 	mov	r2,r18
    8e28:	00001206 	br	8e74 <_realloc_r+0x170>
    8e2c:	00c00404 	movi	r3,16
    8e30:	1823883a 	mov	r17,r3
    8e34:	003fce06 	br	8d70 <__alt_data_end+0xff008d70>
    8e38:	a825883a 	mov	r18,r21
    8e3c:	8445c83a 	sub	r2,r16,r17
    8e40:	00c003c4 	movi	r3,15
    8e44:	18802636 	bltu	r3,r2,8ee0 <_realloc_r+0x1dc>
    8e48:	99800117 	ldw	r6,4(r19)
    8e4c:	9c07883a 	add	r3,r19,r16
    8e50:	3180004c 	andi	r6,r6,1
    8e54:	3420b03a 	or	r16,r6,r16
    8e58:	9c000115 	stw	r16,4(r19)
    8e5c:	18800117 	ldw	r2,4(r3)
    8e60:	10800054 	ori	r2,r2,1
    8e64:	18800115 	stw	r2,4(r3)
    8e68:	a009883a 	mov	r4,r20
    8e6c:	000eb280 	call	eb28 <__malloc_unlock>
    8e70:	9005883a 	mov	r2,r18
    8e74:	dfc00917 	ldw	ra,36(sp)
    8e78:	df000817 	ldw	fp,32(sp)
    8e7c:	ddc00717 	ldw	r23,28(sp)
    8e80:	dd800617 	ldw	r22,24(sp)
    8e84:	dd400517 	ldw	r21,20(sp)
    8e88:	dd000417 	ldw	r20,16(sp)
    8e8c:	dcc00317 	ldw	r19,12(sp)
    8e90:	dc800217 	ldw	r18,8(sp)
    8e94:	dc400117 	ldw	r17,4(sp)
    8e98:	dc000017 	ldw	r16,0(sp)
    8e9c:	dec00a04 	addi	sp,sp,40
    8ea0:	f800283a 	ret
    8ea4:	017fff04 	movi	r5,-4
    8ea8:	414a703a 	and	r5,r8,r5
    8eac:	814d883a 	add	r6,r16,r5
    8eb0:	30c01f16 	blt	r6,r3,8f30 <_realloc_r+0x22c>
    8eb4:	20800317 	ldw	r2,12(r4)
    8eb8:	20c00217 	ldw	r3,8(r4)
    8ebc:	a825883a 	mov	r18,r21
    8ec0:	3021883a 	mov	r16,r6
    8ec4:	18800315 	stw	r2,12(r3)
    8ec8:	10c00215 	stw	r3,8(r2)
    8ecc:	003fdb06 	br	8e3c <__alt_data_end+0xff008e3c>
    8ed0:	00800304 	movi	r2,12
    8ed4:	a0800015 	stw	r2,0(r20)
    8ed8:	0005883a 	mov	r2,zero
    8edc:	003fe506 	br	8e74 <__alt_data_end+0xff008e74>
    8ee0:	98c00117 	ldw	r3,4(r19)
    8ee4:	9c4b883a 	add	r5,r19,r17
    8ee8:	11000054 	ori	r4,r2,1
    8eec:	18c0004c 	andi	r3,r3,1
    8ef0:	1c62b03a 	or	r17,r3,r17
    8ef4:	9c400115 	stw	r17,4(r19)
    8ef8:	29000115 	stw	r4,4(r5)
    8efc:	2885883a 	add	r2,r5,r2
    8f00:	10c00117 	ldw	r3,4(r2)
    8f04:	29400204 	addi	r5,r5,8
    8f08:	a009883a 	mov	r4,r20
    8f0c:	18c00054 	ori	r3,r3,1
    8f10:	10c00115 	stw	r3,4(r2)
    8f14:	0006c6c0 	call	6c6c <_free_r>
    8f18:	003fd306 	br	8e68 <__alt_data_end+0xff008e68>
    8f1c:	017fff04 	movi	r5,-4
    8f20:	414a703a 	and	r5,r8,r5
    8f24:	89800404 	addi	r6,r17,16
    8f28:	8151883a 	add	r8,r16,r5
    8f2c:	4180590e 	bge	r8,r6,9094 <_realloc_r+0x390>
    8f30:	1080004c 	andi	r2,r2,1
    8f34:	103f9e1e 	bne	r2,zero,8db0 <__alt_data_end+0xff008db0>
    8f38:	adbffe17 	ldw	r22,-8(r21)
    8f3c:	00bfff04 	movi	r2,-4
    8f40:	9dadc83a 	sub	r22,r19,r22
    8f44:	b1800117 	ldw	r6,4(r22)
    8f48:	3084703a 	and	r2,r6,r2
    8f4c:	20002026 	beq	r4,zero,8fd0 <_realloc_r+0x2cc>
    8f50:	80af883a 	add	r23,r16,r2
    8f54:	b96f883a 	add	r23,r23,r5
    8f58:	21c05f26 	beq	r4,r7,90d8 <_realloc_r+0x3d4>
    8f5c:	b8c01c16 	blt	r23,r3,8fd0 <_realloc_r+0x2cc>
    8f60:	20800317 	ldw	r2,12(r4)
    8f64:	20c00217 	ldw	r3,8(r4)
    8f68:	81bfff04 	addi	r6,r16,-4
    8f6c:	01000904 	movi	r4,36
    8f70:	18800315 	stw	r2,12(r3)
    8f74:	10c00215 	stw	r3,8(r2)
    8f78:	b0c00217 	ldw	r3,8(r22)
    8f7c:	b0800317 	ldw	r2,12(r22)
    8f80:	b4800204 	addi	r18,r22,8
    8f84:	18800315 	stw	r2,12(r3)
    8f88:	10c00215 	stw	r3,8(r2)
    8f8c:	21801b36 	bltu	r4,r6,8ffc <_realloc_r+0x2f8>
    8f90:	008004c4 	movi	r2,19
    8f94:	1180352e 	bgeu	r2,r6,906c <_realloc_r+0x368>
    8f98:	a8800017 	ldw	r2,0(r21)
    8f9c:	b0800215 	stw	r2,8(r22)
    8fa0:	a8800117 	ldw	r2,4(r21)
    8fa4:	b0800315 	stw	r2,12(r22)
    8fa8:	008006c4 	movi	r2,27
    8fac:	11807f36 	bltu	r2,r6,91ac <_realloc_r+0x4a8>
    8fb0:	b0800404 	addi	r2,r22,16
    8fb4:	ad400204 	addi	r21,r21,8
    8fb8:	00002d06 	br	9070 <_realloc_r+0x36c>
    8fbc:	adbffe17 	ldw	r22,-8(r21)
    8fc0:	00bfff04 	movi	r2,-4
    8fc4:	9dadc83a 	sub	r22,r19,r22
    8fc8:	b1000117 	ldw	r4,4(r22)
    8fcc:	2084703a 	and	r2,r4,r2
    8fd0:	b03f7726 	beq	r22,zero,8db0 <__alt_data_end+0xff008db0>
    8fd4:	80af883a 	add	r23,r16,r2
    8fd8:	b8ff7516 	blt	r23,r3,8db0 <__alt_data_end+0xff008db0>
    8fdc:	b0800317 	ldw	r2,12(r22)
    8fe0:	b0c00217 	ldw	r3,8(r22)
    8fe4:	81bfff04 	addi	r6,r16,-4
    8fe8:	01000904 	movi	r4,36
    8fec:	18800315 	stw	r2,12(r3)
    8ff0:	10c00215 	stw	r3,8(r2)
    8ff4:	b4800204 	addi	r18,r22,8
    8ff8:	21bfe52e 	bgeu	r4,r6,8f90 <__alt_data_end+0xff008f90>
    8ffc:	a80b883a 	mov	r5,r21
    9000:	9009883a 	mov	r4,r18
    9004:	0007a840 	call	7a84 <memmove>
    9008:	b821883a 	mov	r16,r23
    900c:	b027883a 	mov	r19,r22
    9010:	003f8a06 	br	8e3c <__alt_data_end+0xff008e3c>
    9014:	300b883a 	mov	r5,r6
    9018:	dfc00917 	ldw	ra,36(sp)
    901c:	df000817 	ldw	fp,32(sp)
    9020:	ddc00717 	ldw	r23,28(sp)
    9024:	dd800617 	ldw	r22,24(sp)
    9028:	dd400517 	ldw	r21,20(sp)
    902c:	dd000417 	ldw	r20,16(sp)
    9030:	dcc00317 	ldw	r19,12(sp)
    9034:	dc800217 	ldw	r18,8(sp)
    9038:	dc400117 	ldw	r17,4(sp)
    903c:	dc000017 	ldw	r16,0(sp)
    9040:	dec00a04 	addi	sp,sp,40
    9044:	0001e1c1 	jmpi	1e1c <_malloc_r>
    9048:	a8c00017 	ldw	r3,0(r21)
    904c:	90c00015 	stw	r3,0(r18)
    9050:	a8c00117 	ldw	r3,4(r21)
    9054:	90c00115 	stw	r3,4(r18)
    9058:	00c006c4 	movi	r3,27
    905c:	19804536 	bltu	r3,r6,9174 <_realloc_r+0x470>
    9060:	90800204 	addi	r2,r18,8
    9064:	a8c00204 	addi	r3,r21,8
    9068:	003f6306 	br	8df8 <__alt_data_end+0xff008df8>
    906c:	9005883a 	mov	r2,r18
    9070:	a8c00017 	ldw	r3,0(r21)
    9074:	b821883a 	mov	r16,r23
    9078:	b027883a 	mov	r19,r22
    907c:	10c00015 	stw	r3,0(r2)
    9080:	a8c00117 	ldw	r3,4(r21)
    9084:	10c00115 	stw	r3,4(r2)
    9088:	a8c00217 	ldw	r3,8(r21)
    908c:	10c00215 	stw	r3,8(r2)
    9090:	003f6a06 	br	8e3c <__alt_data_end+0xff008e3c>
    9094:	9c67883a 	add	r19,r19,r17
    9098:	4445c83a 	sub	r2,r8,r17
    909c:	e4c00215 	stw	r19,8(fp)
    90a0:	10800054 	ori	r2,r2,1
    90a4:	98800115 	stw	r2,4(r19)
    90a8:	a8bfff17 	ldw	r2,-4(r21)
    90ac:	a009883a 	mov	r4,r20
    90b0:	1080004c 	andi	r2,r2,1
    90b4:	1462b03a 	or	r17,r2,r17
    90b8:	ac7fff15 	stw	r17,-4(r21)
    90bc:	000eb280 	call	eb28 <__malloc_unlock>
    90c0:	a805883a 	mov	r2,r21
    90c4:	003f6b06 	br	8e74 <__alt_data_end+0xff008e74>
    90c8:	a80b883a 	mov	r5,r21
    90cc:	9009883a 	mov	r4,r18
    90d0:	0007a840 	call	7a84 <memmove>
    90d4:	003f4e06 	br	8e10 <__alt_data_end+0xff008e10>
    90d8:	89000404 	addi	r4,r17,16
    90dc:	b93fbc16 	blt	r23,r4,8fd0 <__alt_data_end+0xff008fd0>
    90e0:	b0800317 	ldw	r2,12(r22)
    90e4:	b0c00217 	ldw	r3,8(r22)
    90e8:	81bfff04 	addi	r6,r16,-4
    90ec:	01000904 	movi	r4,36
    90f0:	18800315 	stw	r2,12(r3)
    90f4:	10c00215 	stw	r3,8(r2)
    90f8:	b4800204 	addi	r18,r22,8
    90fc:	21804336 	bltu	r4,r6,920c <_realloc_r+0x508>
    9100:	008004c4 	movi	r2,19
    9104:	11803f2e 	bgeu	r2,r6,9204 <_realloc_r+0x500>
    9108:	a8800017 	ldw	r2,0(r21)
    910c:	b0800215 	stw	r2,8(r22)
    9110:	a8800117 	ldw	r2,4(r21)
    9114:	b0800315 	stw	r2,12(r22)
    9118:	008006c4 	movi	r2,27
    911c:	11803f36 	bltu	r2,r6,921c <_realloc_r+0x518>
    9120:	b0800404 	addi	r2,r22,16
    9124:	ad400204 	addi	r21,r21,8
    9128:	a8c00017 	ldw	r3,0(r21)
    912c:	10c00015 	stw	r3,0(r2)
    9130:	a8c00117 	ldw	r3,4(r21)
    9134:	10c00115 	stw	r3,4(r2)
    9138:	a8c00217 	ldw	r3,8(r21)
    913c:	10c00215 	stw	r3,8(r2)
    9140:	b447883a 	add	r3,r22,r17
    9144:	bc45c83a 	sub	r2,r23,r17
    9148:	e0c00215 	stw	r3,8(fp)
    914c:	10800054 	ori	r2,r2,1
    9150:	18800115 	stw	r2,4(r3)
    9154:	b0800117 	ldw	r2,4(r22)
    9158:	a009883a 	mov	r4,r20
    915c:	1080004c 	andi	r2,r2,1
    9160:	1462b03a 	or	r17,r2,r17
    9164:	b4400115 	stw	r17,4(r22)
    9168:	000eb280 	call	eb28 <__malloc_unlock>
    916c:	9005883a 	mov	r2,r18
    9170:	003f4006 	br	8e74 <__alt_data_end+0xff008e74>
    9174:	a8c00217 	ldw	r3,8(r21)
    9178:	90c00215 	stw	r3,8(r18)
    917c:	a8c00317 	ldw	r3,12(r21)
    9180:	90c00315 	stw	r3,12(r18)
    9184:	30801126 	beq	r6,r2,91cc <_realloc_r+0x4c8>
    9188:	90800404 	addi	r2,r18,16
    918c:	a8c00404 	addi	r3,r21,16
    9190:	003f1906 	br	8df8 <__alt_data_end+0xff008df8>
    9194:	90ffff17 	ldw	r3,-4(r18)
    9198:	00bfff04 	movi	r2,-4
    919c:	a825883a 	mov	r18,r21
    91a0:	1884703a 	and	r2,r3,r2
    91a4:	80a1883a 	add	r16,r16,r2
    91a8:	003f2406 	br	8e3c <__alt_data_end+0xff008e3c>
    91ac:	a8800217 	ldw	r2,8(r21)
    91b0:	b0800415 	stw	r2,16(r22)
    91b4:	a8800317 	ldw	r2,12(r21)
    91b8:	b0800515 	stw	r2,20(r22)
    91bc:	31000a26 	beq	r6,r4,91e8 <_realloc_r+0x4e4>
    91c0:	b0800604 	addi	r2,r22,24
    91c4:	ad400404 	addi	r21,r21,16
    91c8:	003fa906 	br	9070 <__alt_data_end+0xff009070>
    91cc:	a9000417 	ldw	r4,16(r21)
    91d0:	90800604 	addi	r2,r18,24
    91d4:	a8c00604 	addi	r3,r21,24
    91d8:	91000415 	stw	r4,16(r18)
    91dc:	a9000517 	ldw	r4,20(r21)
    91e0:	91000515 	stw	r4,20(r18)
    91e4:	003f0406 	br	8df8 <__alt_data_end+0xff008df8>
    91e8:	a8c00417 	ldw	r3,16(r21)
    91ec:	ad400604 	addi	r21,r21,24
    91f0:	b0800804 	addi	r2,r22,32
    91f4:	b0c00615 	stw	r3,24(r22)
    91f8:	a8ffff17 	ldw	r3,-4(r21)
    91fc:	b0c00715 	stw	r3,28(r22)
    9200:	003f9b06 	br	9070 <__alt_data_end+0xff009070>
    9204:	9005883a 	mov	r2,r18
    9208:	003fc706 	br	9128 <__alt_data_end+0xff009128>
    920c:	a80b883a 	mov	r5,r21
    9210:	9009883a 	mov	r4,r18
    9214:	0007a840 	call	7a84 <memmove>
    9218:	003fc906 	br	9140 <__alt_data_end+0xff009140>
    921c:	a8800217 	ldw	r2,8(r21)
    9220:	b0800415 	stw	r2,16(r22)
    9224:	a8800317 	ldw	r2,12(r21)
    9228:	b0800515 	stw	r2,20(r22)
    922c:	31000726 	beq	r6,r4,924c <_realloc_r+0x548>
    9230:	b0800604 	addi	r2,r22,24
    9234:	ad400404 	addi	r21,r21,16
    9238:	003fbb06 	br	9128 <__alt_data_end+0xff009128>
    923c:	a009883a 	mov	r4,r20
    9240:	000eb280 	call	eb28 <__malloc_unlock>
    9244:	0005883a 	mov	r2,zero
    9248:	003f0a06 	br	8e74 <__alt_data_end+0xff008e74>
    924c:	a8c00417 	ldw	r3,16(r21)
    9250:	ad400604 	addi	r21,r21,24
    9254:	b0800804 	addi	r2,r22,32
    9258:	b0c00615 	stw	r3,24(r22)
    925c:	a8ffff17 	ldw	r3,-4(r21)
    9260:	b0c00715 	stw	r3,28(r22)
    9264:	003fb006 	br	9128 <__alt_data_end+0xff009128>

00009268 <__fpclassifyd>:
    9268:	00a00034 	movhi	r2,32768
    926c:	10bfffc4 	addi	r2,r2,-1
    9270:	2884703a 	and	r2,r5,r2
    9274:	10000726 	beq	r2,zero,9294 <__fpclassifyd+0x2c>
    9278:	00fffc34 	movhi	r3,65520
    927c:	019ff834 	movhi	r6,32736
    9280:	28c7883a 	add	r3,r5,r3
    9284:	31bfffc4 	addi	r6,r6,-1
    9288:	30c00536 	bltu	r6,r3,92a0 <__fpclassifyd+0x38>
    928c:	00800104 	movi	r2,4
    9290:	f800283a 	ret
    9294:	2000021e 	bne	r4,zero,92a0 <__fpclassifyd+0x38>
    9298:	00800084 	movi	r2,2
    929c:	f800283a 	ret
    92a0:	00dffc34 	movhi	r3,32752
    92a4:	019ff834 	movhi	r6,32736
    92a8:	28cb883a 	add	r5,r5,r3
    92ac:	31bfffc4 	addi	r6,r6,-1
    92b0:	317ff62e 	bgeu	r6,r5,928c <__alt_data_end+0xff00928c>
    92b4:	01400434 	movhi	r5,16
    92b8:	297fffc4 	addi	r5,r5,-1
    92bc:	28800236 	bltu	r5,r2,92c8 <__fpclassifyd+0x60>
    92c0:	008000c4 	movi	r2,3
    92c4:	f800283a 	ret
    92c8:	10c00226 	beq	r2,r3,92d4 <__fpclassifyd+0x6c>
    92cc:	0005883a 	mov	r2,zero
    92d0:	f800283a 	ret
    92d4:	2005003a 	cmpeq	r2,r4,zero
    92d8:	f800283a 	ret

000092dc <__sread>:
    92dc:	defffe04 	addi	sp,sp,-8
    92e0:	dc000015 	stw	r16,0(sp)
    92e4:	2821883a 	mov	r16,r5
    92e8:	2940038f 	ldh	r5,14(r5)
    92ec:	dfc00115 	stw	ra,4(sp)
    92f0:	000b0d00 	call	b0d0 <_read_r>
    92f4:	10000716 	blt	r2,zero,9314 <__sread+0x38>
    92f8:	80c01417 	ldw	r3,80(r16)
    92fc:	1887883a 	add	r3,r3,r2
    9300:	80c01415 	stw	r3,80(r16)
    9304:	dfc00117 	ldw	ra,4(sp)
    9308:	dc000017 	ldw	r16,0(sp)
    930c:	dec00204 	addi	sp,sp,8
    9310:	f800283a 	ret
    9314:	80c0030b 	ldhu	r3,12(r16)
    9318:	18fbffcc 	andi	r3,r3,61439
    931c:	80c0030d 	sth	r3,12(r16)
    9320:	dfc00117 	ldw	ra,4(sp)
    9324:	dc000017 	ldw	r16,0(sp)
    9328:	dec00204 	addi	sp,sp,8
    932c:	f800283a 	ret

00009330 <__seofread>:
    9330:	0005883a 	mov	r2,zero
    9334:	f800283a 	ret

00009338 <__swrite>:
    9338:	2880030b 	ldhu	r2,12(r5)
    933c:	defffb04 	addi	sp,sp,-20
    9340:	dcc00315 	stw	r19,12(sp)
    9344:	dc800215 	stw	r18,8(sp)
    9348:	dc400115 	stw	r17,4(sp)
    934c:	dc000015 	stw	r16,0(sp)
    9350:	dfc00415 	stw	ra,16(sp)
    9354:	10c0400c 	andi	r3,r2,256
    9358:	2821883a 	mov	r16,r5
    935c:	2023883a 	mov	r17,r4
    9360:	3025883a 	mov	r18,r6
    9364:	3827883a 	mov	r19,r7
    9368:	18000526 	beq	r3,zero,9380 <__swrite+0x48>
    936c:	2940038f 	ldh	r5,14(r5)
    9370:	01c00084 	movi	r7,2
    9374:	000d883a 	mov	r6,zero
    9378:	000b0700 	call	b070 <_lseek_r>
    937c:	8080030b 	ldhu	r2,12(r16)
    9380:	8140038f 	ldh	r5,14(r16)
    9384:	10bbffcc 	andi	r2,r2,61439
    9388:	980f883a 	mov	r7,r19
    938c:	900d883a 	mov	r6,r18
    9390:	8809883a 	mov	r4,r17
    9394:	8080030d 	sth	r2,12(r16)
    9398:	dfc00417 	ldw	ra,16(sp)
    939c:	dcc00317 	ldw	r19,12(sp)
    93a0:	dc800217 	ldw	r18,8(sp)
    93a4:	dc400117 	ldw	r17,4(sp)
    93a8:	dc000017 	ldw	r16,0(sp)
    93ac:	dec00504 	addi	sp,sp,20
    93b0:	000ab3c1 	jmpi	ab3c <_write_r>

000093b4 <__sseek>:
    93b4:	defffe04 	addi	sp,sp,-8
    93b8:	dc000015 	stw	r16,0(sp)
    93bc:	2821883a 	mov	r16,r5
    93c0:	2940038f 	ldh	r5,14(r5)
    93c4:	dfc00115 	stw	ra,4(sp)
    93c8:	000b0700 	call	b070 <_lseek_r>
    93cc:	00ffffc4 	movi	r3,-1
    93d0:	10c00826 	beq	r2,r3,93f4 <__sseek+0x40>
    93d4:	80c0030b 	ldhu	r3,12(r16)
    93d8:	80801415 	stw	r2,80(r16)
    93dc:	18c40014 	ori	r3,r3,4096
    93e0:	80c0030d 	sth	r3,12(r16)
    93e4:	dfc00117 	ldw	ra,4(sp)
    93e8:	dc000017 	ldw	r16,0(sp)
    93ec:	dec00204 	addi	sp,sp,8
    93f0:	f800283a 	ret
    93f4:	80c0030b 	ldhu	r3,12(r16)
    93f8:	18fbffcc 	andi	r3,r3,61439
    93fc:	80c0030d 	sth	r3,12(r16)
    9400:	dfc00117 	ldw	ra,4(sp)
    9404:	dc000017 	ldw	r16,0(sp)
    9408:	dec00204 	addi	sp,sp,8
    940c:	f800283a 	ret

00009410 <__sclose>:
    9410:	2940038f 	ldh	r5,14(r5)
    9414:	000ab9c1 	jmpi	ab9c <_close_r>

00009418 <strcmp>:
    9418:	2144b03a 	or	r2,r4,r5
    941c:	108000cc 	andi	r2,r2,3
    9420:	1000171e 	bne	r2,zero,9480 <strcmp+0x68>
    9424:	20800017 	ldw	r2,0(r4)
    9428:	28c00017 	ldw	r3,0(r5)
    942c:	10c0141e 	bne	r2,r3,9480 <strcmp+0x68>
    9430:	027fbff4 	movhi	r9,65279
    9434:	4a7fbfc4 	addi	r9,r9,-257
    9438:	0086303a 	nor	r3,zero,r2
    943c:	02202074 	movhi	r8,32897
    9440:	1245883a 	add	r2,r2,r9
    9444:	42202004 	addi	r8,r8,-32640
    9448:	10c4703a 	and	r2,r2,r3
    944c:	1204703a 	and	r2,r2,r8
    9450:	10000226 	beq	r2,zero,945c <strcmp+0x44>
    9454:	00002306 	br	94e4 <strcmp+0xcc>
    9458:	1000221e 	bne	r2,zero,94e4 <strcmp+0xcc>
    945c:	21000104 	addi	r4,r4,4
    9460:	20c00017 	ldw	r3,0(r4)
    9464:	29400104 	addi	r5,r5,4
    9468:	29800017 	ldw	r6,0(r5)
    946c:	1a4f883a 	add	r7,r3,r9
    9470:	00c4303a 	nor	r2,zero,r3
    9474:	3884703a 	and	r2,r7,r2
    9478:	1204703a 	and	r2,r2,r8
    947c:	19bff626 	beq	r3,r6,9458 <__alt_data_end+0xff009458>
    9480:	20800003 	ldbu	r2,0(r4)
    9484:	10c03fcc 	andi	r3,r2,255
    9488:	18c0201c 	xori	r3,r3,128
    948c:	18ffe004 	addi	r3,r3,-128
    9490:	18000c26 	beq	r3,zero,94c4 <strcmp+0xac>
    9494:	29800007 	ldb	r6,0(r5)
    9498:	19800326 	beq	r3,r6,94a8 <strcmp+0x90>
    949c:	00001306 	br	94ec <strcmp+0xd4>
    94a0:	29800007 	ldb	r6,0(r5)
    94a4:	11800b1e 	bne	r2,r6,94d4 <strcmp+0xbc>
    94a8:	21000044 	addi	r4,r4,1
    94ac:	20c00003 	ldbu	r3,0(r4)
    94b0:	29400044 	addi	r5,r5,1
    94b4:	18803fcc 	andi	r2,r3,255
    94b8:	1080201c 	xori	r2,r2,128
    94bc:	10bfe004 	addi	r2,r2,-128
    94c0:	103ff71e 	bne	r2,zero,94a0 <__alt_data_end+0xff0094a0>
    94c4:	0007883a 	mov	r3,zero
    94c8:	28800003 	ldbu	r2,0(r5)
    94cc:	1885c83a 	sub	r2,r3,r2
    94d0:	f800283a 	ret
    94d4:	28800003 	ldbu	r2,0(r5)
    94d8:	18c03fcc 	andi	r3,r3,255
    94dc:	1885c83a 	sub	r2,r3,r2
    94e0:	f800283a 	ret
    94e4:	0005883a 	mov	r2,zero
    94e8:	f800283a 	ret
    94ec:	10c03fcc 	andi	r3,r2,255
    94f0:	003ff506 	br	94c8 <__alt_data_end+0xff0094c8>

000094f4 <__sprint_r.part.0>:
    94f4:	28801917 	ldw	r2,100(r5)
    94f8:	defff604 	addi	sp,sp,-40
    94fc:	dd400515 	stw	r21,20(sp)
    9500:	dfc00915 	stw	ra,36(sp)
    9504:	df000815 	stw	fp,32(sp)
    9508:	ddc00715 	stw	r23,28(sp)
    950c:	dd800615 	stw	r22,24(sp)
    9510:	dd000415 	stw	r20,16(sp)
    9514:	dcc00315 	stw	r19,12(sp)
    9518:	dc800215 	stw	r18,8(sp)
    951c:	dc400115 	stw	r17,4(sp)
    9520:	dc000015 	stw	r16,0(sp)
    9524:	1088000c 	andi	r2,r2,8192
    9528:	302b883a 	mov	r21,r6
    952c:	10002e26 	beq	r2,zero,95e8 <__sprint_r.part.0+0xf4>
    9530:	30800217 	ldw	r2,8(r6)
    9534:	35800017 	ldw	r22,0(r6)
    9538:	10002926 	beq	r2,zero,95e0 <__sprint_r.part.0+0xec>
    953c:	2827883a 	mov	r19,r5
    9540:	2029883a 	mov	r20,r4
    9544:	b5c00104 	addi	r23,r22,4
    9548:	04bfffc4 	movi	r18,-1
    954c:	bc400017 	ldw	r17,0(r23)
    9550:	b4000017 	ldw	r16,0(r22)
    9554:	0039883a 	mov	fp,zero
    9558:	8822d0ba 	srli	r17,r17,2
    955c:	8800031e 	bne	r17,zero,956c <__sprint_r.part.0+0x78>
    9560:	00001806 	br	95c4 <__sprint_r.part.0+0xd0>
    9564:	84000104 	addi	r16,r16,4
    9568:	8f001526 	beq	r17,fp,95c0 <__sprint_r.part.0+0xcc>
    956c:	81400017 	ldw	r5,0(r16)
    9570:	980d883a 	mov	r6,r19
    9574:	a009883a 	mov	r4,r20
    9578:	000af1c0 	call	af1c <_fputwc_r>
    957c:	e7000044 	addi	fp,fp,1
    9580:	14bff81e 	bne	r2,r18,9564 <__alt_data_end+0xff009564>
    9584:	9005883a 	mov	r2,r18
    9588:	a8000215 	stw	zero,8(r21)
    958c:	a8000115 	stw	zero,4(r21)
    9590:	dfc00917 	ldw	ra,36(sp)
    9594:	df000817 	ldw	fp,32(sp)
    9598:	ddc00717 	ldw	r23,28(sp)
    959c:	dd800617 	ldw	r22,24(sp)
    95a0:	dd400517 	ldw	r21,20(sp)
    95a4:	dd000417 	ldw	r20,16(sp)
    95a8:	dcc00317 	ldw	r19,12(sp)
    95ac:	dc800217 	ldw	r18,8(sp)
    95b0:	dc400117 	ldw	r17,4(sp)
    95b4:	dc000017 	ldw	r16,0(sp)
    95b8:	dec00a04 	addi	sp,sp,40
    95bc:	f800283a 	ret
    95c0:	a8800217 	ldw	r2,8(r21)
    95c4:	8c63883a 	add	r17,r17,r17
    95c8:	8c63883a 	add	r17,r17,r17
    95cc:	1445c83a 	sub	r2,r2,r17
    95d0:	a8800215 	stw	r2,8(r21)
    95d4:	b5800204 	addi	r22,r22,8
    95d8:	bdc00204 	addi	r23,r23,8
    95dc:	103fdb1e 	bne	r2,zero,954c <__alt_data_end+0xff00954c>
    95e0:	0005883a 	mov	r2,zero
    95e4:	003fe806 	br	9588 <__alt_data_end+0xff009588>
    95e8:	0006f7c0 	call	6f7c <__sfvwrite_r>
    95ec:	003fe606 	br	9588 <__alt_data_end+0xff009588>

000095f0 <__sprint_r>:
    95f0:	30c00217 	ldw	r3,8(r6)
    95f4:	18000126 	beq	r3,zero,95fc <__sprint_r+0xc>
    95f8:	00094f41 	jmpi	94f4 <__sprint_r.part.0>
    95fc:	30000115 	stw	zero,4(r6)
    9600:	0005883a 	mov	r2,zero
    9604:	f800283a 	ret

00009608 <___vfiprintf_internal_r>:
    9608:	deffc904 	addi	sp,sp,-220
    960c:	df003515 	stw	fp,212(sp)
    9610:	dd003115 	stw	r20,196(sp)
    9614:	dfc03615 	stw	ra,216(sp)
    9618:	ddc03415 	stw	r23,208(sp)
    961c:	dd803315 	stw	r22,204(sp)
    9620:	dd403215 	stw	r21,200(sp)
    9624:	dcc03015 	stw	r19,192(sp)
    9628:	dc802f15 	stw	r18,188(sp)
    962c:	dc402e15 	stw	r17,184(sp)
    9630:	dc002d15 	stw	r16,180(sp)
    9634:	d9002015 	stw	r4,128(sp)
    9638:	d9c02215 	stw	r7,136(sp)
    963c:	2829883a 	mov	r20,r5
    9640:	3039883a 	mov	fp,r6
    9644:	20000226 	beq	r4,zero,9650 <___vfiprintf_internal_r+0x48>
    9648:	20800e17 	ldw	r2,56(r4)
    964c:	1000cf26 	beq	r2,zero,998c <___vfiprintf_internal_r+0x384>
    9650:	a080030b 	ldhu	r2,12(r20)
    9654:	10c8000c 	andi	r3,r2,8192
    9658:	1800061e 	bne	r3,zero,9674 <___vfiprintf_internal_r+0x6c>
    965c:	a1001917 	ldw	r4,100(r20)
    9660:	00f7ffc4 	movi	r3,-8193
    9664:	10880014 	ori	r2,r2,8192
    9668:	20c6703a 	and	r3,r4,r3
    966c:	a080030d 	sth	r2,12(r20)
    9670:	a0c01915 	stw	r3,100(r20)
    9674:	10c0020c 	andi	r3,r2,8
    9678:	1800a926 	beq	r3,zero,9920 <___vfiprintf_internal_r+0x318>
    967c:	a0c00417 	ldw	r3,16(r20)
    9680:	1800a726 	beq	r3,zero,9920 <___vfiprintf_internal_r+0x318>
    9684:	1080068c 	andi	r2,r2,26
    9688:	00c00284 	movi	r3,10
    968c:	10c0ac26 	beq	r2,r3,9940 <___vfiprintf_internal_r+0x338>
    9690:	da801a04 	addi	r10,sp,104
    9694:	da801e15 	stw	r10,120(sp)
    9698:	d8801e17 	ldw	r2,120(sp)
    969c:	da8019c4 	addi	r10,sp,103
    96a0:	05800074 	movhi	r22,1
    96a4:	05c00074 	movhi	r23,1
    96a8:	da801f15 	stw	r10,124(sp)
    96ac:	1295c83a 	sub	r10,r2,r10
    96b0:	b5859904 	addi	r22,r22,5732
    96b4:	bdc59504 	addi	r23,r23,5716
    96b8:	dec01a15 	stw	sp,104(sp)
    96bc:	d8001c15 	stw	zero,112(sp)
    96c0:	d8001b15 	stw	zero,108(sp)
    96c4:	d8002615 	stw	zero,152(sp)
    96c8:	d8002315 	stw	zero,140(sp)
    96cc:	da802715 	stw	r10,156(sp)
    96d0:	d811883a 	mov	r8,sp
    96d4:	dd002115 	stw	r20,132(sp)
    96d8:	e021883a 	mov	r16,fp
    96dc:	80800007 	ldb	r2,0(r16)
    96e0:	1003ea26 	beq	r2,zero,a68c <___vfiprintf_internal_r+0x1084>
    96e4:	00c00944 	movi	r3,37
    96e8:	8025883a 	mov	r18,r16
    96ec:	10c0021e 	bne	r2,r3,96f8 <___vfiprintf_internal_r+0xf0>
    96f0:	00001606 	br	974c <___vfiprintf_internal_r+0x144>
    96f4:	10c00326 	beq	r2,r3,9704 <___vfiprintf_internal_r+0xfc>
    96f8:	94800044 	addi	r18,r18,1
    96fc:	90800007 	ldb	r2,0(r18)
    9700:	103ffc1e 	bne	r2,zero,96f4 <__alt_data_end+0xff0096f4>
    9704:	9423c83a 	sub	r17,r18,r16
    9708:	88001026 	beq	r17,zero,974c <___vfiprintf_internal_r+0x144>
    970c:	d8c01c17 	ldw	r3,112(sp)
    9710:	d8801b17 	ldw	r2,108(sp)
    9714:	44000015 	stw	r16,0(r8)
    9718:	88c7883a 	add	r3,r17,r3
    971c:	10800044 	addi	r2,r2,1
    9720:	44400115 	stw	r17,4(r8)
    9724:	d8c01c15 	stw	r3,112(sp)
    9728:	d8801b15 	stw	r2,108(sp)
    972c:	010001c4 	movi	r4,7
    9730:	2080760e 	bge	r4,r2,990c <___vfiprintf_internal_r+0x304>
    9734:	1803821e 	bne	r3,zero,a540 <___vfiprintf_internal_r+0xf38>
    9738:	da802317 	ldw	r10,140(sp)
    973c:	d8001b15 	stw	zero,108(sp)
    9740:	d811883a 	mov	r8,sp
    9744:	5455883a 	add	r10,r10,r17
    9748:	da802315 	stw	r10,140(sp)
    974c:	90800007 	ldb	r2,0(r18)
    9750:	10044626 	beq	r2,zero,a86c <___vfiprintf_internal_r+0x1264>
    9754:	90c00047 	ldb	r3,1(r18)
    9758:	94000044 	addi	r16,r18,1
    975c:	d8001d85 	stb	zero,118(sp)
    9760:	0009883a 	mov	r4,zero
    9764:	000f883a 	mov	r7,zero
    9768:	027fffc4 	movi	r9,-1
    976c:	0023883a 	mov	r17,zero
    9770:	0029883a 	mov	r20,zero
    9774:	01401604 	movi	r5,88
    9778:	01800244 	movi	r6,9
    977c:	03400a84 	movi	r13,42
    9780:	03001b04 	movi	r12,108
    9784:	84000044 	addi	r16,r16,1
    9788:	18bff804 	addi	r2,r3,-32
    978c:	28827336 	bltu	r5,r2,a15c <___vfiprintf_internal_r+0xb54>
    9790:	100490ba 	slli	r2,r2,2
    9794:	02800074 	movhi	r10,1
    9798:	52a5ea04 	addi	r10,r10,-26712
    979c:	1285883a 	add	r2,r2,r10
    97a0:	10800017 	ldw	r2,0(r2)
    97a4:	1000683a 	jmp	r2
    97a8:	00009e90 	cmplti	zero,zero,634
    97ac:	0000a15c 	xori	zero,zero,645
    97b0:	0000a15c 	xori	zero,zero,645
    97b4:	00009eb0 	cmpltui	zero,zero,634
    97b8:	0000a15c 	xori	zero,zero,645
    97bc:	0000a15c 	xori	zero,zero,645
    97c0:	0000a15c 	xori	zero,zero,645
    97c4:	0000a15c 	xori	zero,zero,645
    97c8:	0000a15c 	xori	zero,zero,645
    97cc:	0000a15c 	xori	zero,zero,645
    97d0:	0000a098 	cmpnei	zero,zero,642
    97d4:	0000a0b4 	movhi	zero,642
    97d8:	0000a15c 	xori	zero,zero,645
    97dc:	0000999c 	xori	zero,zero,614
    97e0:	0000a0c4 	movi	zero,643
    97e4:	0000a15c 	xori	zero,zero,645
    97e8:	00009ebc 	xorhi	zero,zero,634
    97ec:	00009ec8 	cmpgei	zero,zero,635
    97f0:	00009ec8 	cmpgei	zero,zero,635
    97f4:	00009ec8 	cmpgei	zero,zero,635
    97f8:	00009ec8 	cmpgei	zero,zero,635
    97fc:	00009ec8 	cmpgei	zero,zero,635
    9800:	00009ec8 	cmpgei	zero,zero,635
    9804:	00009ec8 	cmpgei	zero,zero,635
    9808:	00009ec8 	cmpgei	zero,zero,635
    980c:	00009ec8 	cmpgei	zero,zero,635
    9810:	0000a15c 	xori	zero,zero,645
    9814:	0000a15c 	xori	zero,zero,645
    9818:	0000a15c 	xori	zero,zero,645
    981c:	0000a15c 	xori	zero,zero,645
    9820:	0000a15c 	xori	zero,zero,645
    9824:	0000a15c 	xori	zero,zero,645
    9828:	0000a15c 	xori	zero,zero,645
    982c:	0000a15c 	xori	zero,zero,645
    9830:	0000a15c 	xori	zero,zero,645
    9834:	0000a15c 	xori	zero,zero,645
    9838:	00009ef4 	movhi	zero,635
    983c:	0000a15c 	xori	zero,zero,645
    9840:	0000a15c 	xori	zero,zero,645
    9844:	0000a15c 	xori	zero,zero,645
    9848:	0000a15c 	xori	zero,zero,645
    984c:	0000a15c 	xori	zero,zero,645
    9850:	0000a15c 	xori	zero,zero,645
    9854:	0000a15c 	xori	zero,zero,645
    9858:	0000a15c 	xori	zero,zero,645
    985c:	0000a15c 	xori	zero,zero,645
    9860:	0000a15c 	xori	zero,zero,645
    9864:	00009f2c 	andhi	zero,zero,636
    9868:	0000a15c 	xori	zero,zero,645
    986c:	0000a15c 	xori	zero,zero,645
    9870:	0000a15c 	xori	zero,zero,645
    9874:	0000a15c 	xori	zero,zero,645
    9878:	0000a15c 	xori	zero,zero,645
    987c:	00009f84 	movi	zero,638
    9880:	0000a15c 	xori	zero,zero,645
    9884:	0000a15c 	xori	zero,zero,645
    9888:	00009ff4 	movhi	zero,639
    988c:	0000a15c 	xori	zero,zero,645
    9890:	0000a15c 	xori	zero,zero,645
    9894:	0000a15c 	xori	zero,zero,645
    9898:	0000a15c 	xori	zero,zero,645
    989c:	0000a15c 	xori	zero,zero,645
    98a0:	0000a15c 	xori	zero,zero,645
    98a4:	0000a15c 	xori	zero,zero,645
    98a8:	0000a15c 	xori	zero,zero,645
    98ac:	0000a15c 	xori	zero,zero,645
    98b0:	0000a15c 	xori	zero,zero,645
    98b4:	00009da0 	cmpeqi	zero,zero,630
    98b8:	00009dcc 	andi	zero,zero,631
    98bc:	0000a15c 	xori	zero,zero,645
    98c0:	0000a15c 	xori	zero,zero,645
    98c4:	0000a15c 	xori	zero,zero,645
    98c8:	0000a104 	movi	zero,644
    98cc:	00009dcc 	andi	zero,zero,631
    98d0:	0000a15c 	xori	zero,zero,645
    98d4:	0000a15c 	xori	zero,zero,645
    98d8:	00009c60 	cmpeqi	zero,zero,625
    98dc:	0000a15c 	xori	zero,zero,645
    98e0:	00009c70 	cmpltui	zero,zero,625
    98e4:	00009cac 	andhi	zero,zero,626
    98e8:	000099a8 	cmpgeui	zero,zero,614
    98ec:	00009c54 	movui	zero,625
    98f0:	0000a15c 	xori	zero,zero,645
    98f4:	0000a030 	cmpltui	zero,zero,640
    98f8:	0000a15c 	xori	zero,zero,645
    98fc:	0000a088 	cmpgei	zero,zero,642
    9900:	0000a15c 	xori	zero,zero,645
    9904:	0000a15c 	xori	zero,zero,645
    9908:	00009d4c 	andi	zero,zero,629
    990c:	42000204 	addi	r8,r8,8
    9910:	da802317 	ldw	r10,140(sp)
    9914:	5455883a 	add	r10,r10,r17
    9918:	da802315 	stw	r10,140(sp)
    991c:	003f8b06 	br	974c <__alt_data_end+0xff00974c>
    9920:	d9002017 	ldw	r4,128(sp)
    9924:	a00b883a 	mov	r5,r20
    9928:	0004b240 	call	4b24 <__swsetup_r>
    992c:	1003b11e 	bne	r2,zero,a7f4 <___vfiprintf_internal_r+0x11ec>
    9930:	a080030b 	ldhu	r2,12(r20)
    9934:	00c00284 	movi	r3,10
    9938:	1080068c 	andi	r2,r2,26
    993c:	10ff541e 	bne	r2,r3,9690 <__alt_data_end+0xff009690>
    9940:	a080038f 	ldh	r2,14(r20)
    9944:	103f5216 	blt	r2,zero,9690 <__alt_data_end+0xff009690>
    9948:	d9c02217 	ldw	r7,136(sp)
    994c:	d9002017 	ldw	r4,128(sp)
    9950:	e00d883a 	mov	r6,fp
    9954:	a00b883a 	mov	r5,r20
    9958:	000aa800 	call	aa80 <__sbprintf>
    995c:	dfc03617 	ldw	ra,216(sp)
    9960:	df003517 	ldw	fp,212(sp)
    9964:	ddc03417 	ldw	r23,208(sp)
    9968:	dd803317 	ldw	r22,204(sp)
    996c:	dd403217 	ldw	r21,200(sp)
    9970:	dd003117 	ldw	r20,196(sp)
    9974:	dcc03017 	ldw	r19,192(sp)
    9978:	dc802f17 	ldw	r18,188(sp)
    997c:	dc402e17 	ldw	r17,184(sp)
    9980:	dc002d17 	ldw	r16,180(sp)
    9984:	dec03704 	addi	sp,sp,220
    9988:	f800283a 	ret
    998c:	0006af80 	call	6af8 <__sinit>
    9990:	003f2f06 	br	9650 <__alt_data_end+0xff009650>
    9994:	0463c83a 	sub	r17,zero,r17
    9998:	d8802215 	stw	r2,136(sp)
    999c:	a5000114 	ori	r20,r20,4
    99a0:	80c00007 	ldb	r3,0(r16)
    99a4:	003f7706 	br	9784 <__alt_data_end+0xff009784>
    99a8:	00800c04 	movi	r2,48
    99ac:	da802217 	ldw	r10,136(sp)
    99b0:	d8801d05 	stb	r2,116(sp)
    99b4:	00801e04 	movi	r2,120
    99b8:	d8801d45 	stb	r2,117(sp)
    99bc:	d8001d85 	stb	zero,118(sp)
    99c0:	50c00104 	addi	r3,r10,4
    99c4:	54800017 	ldw	r18,0(r10)
    99c8:	0027883a 	mov	r19,zero
    99cc:	a0800094 	ori	r2,r20,2
    99d0:	48030b16 	blt	r9,zero,a600 <___vfiprintf_internal_r+0xff8>
    99d4:	00bfdfc4 	movi	r2,-129
    99d8:	a096703a 	and	r11,r20,r2
    99dc:	d8c02215 	stw	r3,136(sp)
    99e0:	5d000094 	ori	r20,r11,2
    99e4:	90032b1e 	bne	r18,zero,a694 <___vfiprintf_internal_r+0x108c>
    99e8:	00800074 	movhi	r2,1
    99ec:	10853404 	addi	r2,r2,5328
    99f0:	d8802615 	stw	r2,152(sp)
    99f4:	0039883a 	mov	fp,zero
    99f8:	48017b1e 	bne	r9,zero,9fe8 <___vfiprintf_internal_r+0x9e0>
    99fc:	0013883a 	mov	r9,zero
    9a00:	0027883a 	mov	r19,zero
    9a04:	dd401a04 	addi	r21,sp,104
    9a08:	4825883a 	mov	r18,r9
    9a0c:	4cc0010e 	bge	r9,r19,9a14 <___vfiprintf_internal_r+0x40c>
    9a10:	9825883a 	mov	r18,r19
    9a14:	e7003fcc 	andi	fp,fp,255
    9a18:	e700201c 	xori	fp,fp,128
    9a1c:	e73fe004 	addi	fp,fp,-128
    9a20:	e0000126 	beq	fp,zero,9a28 <___vfiprintf_internal_r+0x420>
    9a24:	94800044 	addi	r18,r18,1
    9a28:	a380008c 	andi	r14,r20,2
    9a2c:	70000126 	beq	r14,zero,9a34 <___vfiprintf_internal_r+0x42c>
    9a30:	94800084 	addi	r18,r18,2
    9a34:	a700210c 	andi	fp,r20,132
    9a38:	e001df1e 	bne	fp,zero,a1b8 <___vfiprintf_internal_r+0xbb0>
    9a3c:	8c87c83a 	sub	r3,r17,r18
    9a40:	00c1dd0e 	bge	zero,r3,a1b8 <___vfiprintf_internal_r+0xbb0>
    9a44:	01c00404 	movi	r7,16
    9a48:	d8801c17 	ldw	r2,112(sp)
    9a4c:	38c3ad0e 	bge	r7,r3,a904 <___vfiprintf_internal_r+0x12fc>
    9a50:	02800074 	movhi	r10,1
    9a54:	52859904 	addi	r10,r10,5732
    9a58:	dc002915 	stw	r16,164(sp)
    9a5c:	d9801b17 	ldw	r6,108(sp)
    9a60:	da802415 	stw	r10,144(sp)
    9a64:	03c001c4 	movi	r15,7
    9a68:	da402515 	stw	r9,148(sp)
    9a6c:	db802815 	stw	r14,160(sp)
    9a70:	1821883a 	mov	r16,r3
    9a74:	00000506 	br	9a8c <___vfiprintf_internal_r+0x484>
    9a78:	31400084 	addi	r5,r6,2
    9a7c:	42000204 	addi	r8,r8,8
    9a80:	200d883a 	mov	r6,r4
    9a84:	843ffc04 	addi	r16,r16,-16
    9a88:	3c000d0e 	bge	r7,r16,9ac0 <___vfiprintf_internal_r+0x4b8>
    9a8c:	10800404 	addi	r2,r2,16
    9a90:	31000044 	addi	r4,r6,1
    9a94:	45800015 	stw	r22,0(r8)
    9a98:	41c00115 	stw	r7,4(r8)
    9a9c:	d8801c15 	stw	r2,112(sp)
    9aa0:	d9001b15 	stw	r4,108(sp)
    9aa4:	793ff40e 	bge	r15,r4,9a78 <__alt_data_end+0xff009a78>
    9aa8:	1001b51e 	bne	r2,zero,a180 <___vfiprintf_internal_r+0xb78>
    9aac:	843ffc04 	addi	r16,r16,-16
    9ab0:	000d883a 	mov	r6,zero
    9ab4:	01400044 	movi	r5,1
    9ab8:	d811883a 	mov	r8,sp
    9abc:	3c3ff316 	blt	r7,r16,9a8c <__alt_data_end+0xff009a8c>
    9ac0:	8007883a 	mov	r3,r16
    9ac4:	da402517 	ldw	r9,148(sp)
    9ac8:	db802817 	ldw	r14,160(sp)
    9acc:	dc002917 	ldw	r16,164(sp)
    9ad0:	da802417 	ldw	r10,144(sp)
    9ad4:	1885883a 	add	r2,r3,r2
    9ad8:	40c00115 	stw	r3,4(r8)
    9adc:	42800015 	stw	r10,0(r8)
    9ae0:	d8801c15 	stw	r2,112(sp)
    9ae4:	d9401b15 	stw	r5,108(sp)
    9ae8:	00c001c4 	movi	r3,7
    9aec:	19426016 	blt	r3,r5,a470 <___vfiprintf_internal_r+0xe68>
    9af0:	d8c01d87 	ldb	r3,118(sp)
    9af4:	42000204 	addi	r8,r8,8
    9af8:	29000044 	addi	r4,r5,1
    9afc:	1801b31e 	bne	r3,zero,a1cc <___vfiprintf_internal_r+0xbc4>
    9b00:	7001c026 	beq	r14,zero,a204 <___vfiprintf_internal_r+0xbfc>
    9b04:	d8c01d04 	addi	r3,sp,116
    9b08:	10800084 	addi	r2,r2,2
    9b0c:	40c00015 	stw	r3,0(r8)
    9b10:	00c00084 	movi	r3,2
    9b14:	40c00115 	stw	r3,4(r8)
    9b18:	d8801c15 	stw	r2,112(sp)
    9b1c:	d9001b15 	stw	r4,108(sp)
    9b20:	00c001c4 	movi	r3,7
    9b24:	1902650e 	bge	r3,r4,a4bc <___vfiprintf_internal_r+0xeb4>
    9b28:	10029a1e 	bne	r2,zero,a594 <___vfiprintf_internal_r+0xf8c>
    9b2c:	00c02004 	movi	r3,128
    9b30:	01000044 	movi	r4,1
    9b34:	000b883a 	mov	r5,zero
    9b38:	d811883a 	mov	r8,sp
    9b3c:	e0c1b31e 	bne	fp,r3,a20c <___vfiprintf_internal_r+0xc04>
    9b40:	8cb9c83a 	sub	fp,r17,r18
    9b44:	0701b10e 	bge	zero,fp,a20c <___vfiprintf_internal_r+0xc04>
    9b48:	01c00404 	movi	r7,16
    9b4c:	3f03890e 	bge	r7,fp,a974 <___vfiprintf_internal_r+0x136c>
    9b50:	00c00074 	movhi	r3,1
    9b54:	18c59504 	addi	r3,r3,5716
    9b58:	d8c02415 	stw	r3,144(sp)
    9b5c:	8007883a 	mov	r3,r16
    9b60:	034001c4 	movi	r13,7
    9b64:	e021883a 	mov	r16,fp
    9b68:	da402515 	stw	r9,148(sp)
    9b6c:	1839883a 	mov	fp,r3
    9b70:	00000506 	br	9b88 <___vfiprintf_internal_r+0x580>
    9b74:	29800084 	addi	r6,r5,2
    9b78:	42000204 	addi	r8,r8,8
    9b7c:	180b883a 	mov	r5,r3
    9b80:	843ffc04 	addi	r16,r16,-16
    9b84:	3c000d0e 	bge	r7,r16,9bbc <___vfiprintf_internal_r+0x5b4>
    9b88:	10800404 	addi	r2,r2,16
    9b8c:	28c00044 	addi	r3,r5,1
    9b90:	45c00015 	stw	r23,0(r8)
    9b94:	41c00115 	stw	r7,4(r8)
    9b98:	d8801c15 	stw	r2,112(sp)
    9b9c:	d8c01b15 	stw	r3,108(sp)
    9ba0:	68fff40e 	bge	r13,r3,9b74 <__alt_data_end+0xff009b74>
    9ba4:	1002241e 	bne	r2,zero,a438 <___vfiprintf_internal_r+0xe30>
    9ba8:	843ffc04 	addi	r16,r16,-16
    9bac:	01800044 	movi	r6,1
    9bb0:	000b883a 	mov	r5,zero
    9bb4:	d811883a 	mov	r8,sp
    9bb8:	3c3ff316 	blt	r7,r16,9b88 <__alt_data_end+0xff009b88>
    9bbc:	da402517 	ldw	r9,148(sp)
    9bc0:	e007883a 	mov	r3,fp
    9bc4:	8039883a 	mov	fp,r16
    9bc8:	1821883a 	mov	r16,r3
    9bcc:	d8c02417 	ldw	r3,144(sp)
    9bd0:	1705883a 	add	r2,r2,fp
    9bd4:	47000115 	stw	fp,4(r8)
    9bd8:	40c00015 	stw	r3,0(r8)
    9bdc:	d8801c15 	stw	r2,112(sp)
    9be0:	d9801b15 	stw	r6,108(sp)
    9be4:	00c001c4 	movi	r3,7
    9be8:	19827616 	blt	r3,r6,a5c4 <___vfiprintf_internal_r+0xfbc>
    9bec:	4cf9c83a 	sub	fp,r9,r19
    9bf0:	42000204 	addi	r8,r8,8
    9bf4:	31000044 	addi	r4,r6,1
    9bf8:	300b883a 	mov	r5,r6
    9bfc:	07018516 	blt	zero,fp,a214 <___vfiprintf_internal_r+0xc0c>
    9c00:	9885883a 	add	r2,r19,r2
    9c04:	45400015 	stw	r21,0(r8)
    9c08:	44c00115 	stw	r19,4(r8)
    9c0c:	d8801c15 	stw	r2,112(sp)
    9c10:	d9001b15 	stw	r4,108(sp)
    9c14:	00c001c4 	movi	r3,7
    9c18:	1901dd0e 	bge	r3,r4,a390 <___vfiprintf_internal_r+0xd88>
    9c1c:	1002401e 	bne	r2,zero,a520 <___vfiprintf_internal_r+0xf18>
    9c20:	d8001b15 	stw	zero,108(sp)
    9c24:	a2c0010c 	andi	r11,r20,4
    9c28:	58000226 	beq	r11,zero,9c34 <___vfiprintf_internal_r+0x62c>
    9c2c:	8ca7c83a 	sub	r19,r17,r18
    9c30:	04c2f216 	blt	zero,r19,a7fc <___vfiprintf_internal_r+0x11f4>
    9c34:	8c80010e 	bge	r17,r18,9c3c <___vfiprintf_internal_r+0x634>
    9c38:	9023883a 	mov	r17,r18
    9c3c:	da802317 	ldw	r10,140(sp)
    9c40:	5455883a 	add	r10,r10,r17
    9c44:	da802315 	stw	r10,140(sp)
    9c48:	d8001b15 	stw	zero,108(sp)
    9c4c:	d811883a 	mov	r8,sp
    9c50:	003ea206 	br	96dc <__alt_data_end+0xff0096dc>
    9c54:	a5000814 	ori	r20,r20,32
    9c58:	80c00007 	ldb	r3,0(r16)
    9c5c:	003ec906 	br	9784 <__alt_data_end+0xff009784>
    9c60:	80c00007 	ldb	r3,0(r16)
    9c64:	1b030926 	beq	r3,r12,a88c <___vfiprintf_internal_r+0x1284>
    9c68:	a5000414 	ori	r20,r20,16
    9c6c:	003ec506 	br	9784 <__alt_data_end+0xff009784>
    9c70:	21003fcc 	andi	r4,r4,255
    9c74:	20035e1e 	bne	r4,zero,a9f0 <___vfiprintf_internal_r+0x13e8>
    9c78:	a080080c 	andi	r2,r20,32
    9c7c:	1002a526 	beq	r2,zero,a714 <___vfiprintf_internal_r+0x110c>
    9c80:	da802217 	ldw	r10,136(sp)
    9c84:	50800017 	ldw	r2,0(r10)
    9c88:	da802317 	ldw	r10,140(sp)
    9c8c:	5007d7fa 	srai	r3,r10,31
    9c90:	da802217 	ldw	r10,136(sp)
    9c94:	10c00115 	stw	r3,4(r2)
    9c98:	52800104 	addi	r10,r10,4
    9c9c:	da802215 	stw	r10,136(sp)
    9ca0:	da802317 	ldw	r10,140(sp)
    9ca4:	12800015 	stw	r10,0(r2)
    9ca8:	003e8c06 	br	96dc <__alt_data_end+0xff0096dc>
    9cac:	21003fcc 	andi	r4,r4,255
    9cb0:	2003511e 	bne	r4,zero,a9f8 <___vfiprintf_internal_r+0x13f0>
    9cb4:	a080080c 	andi	r2,r20,32
    9cb8:	1000a126 	beq	r2,zero,9f40 <___vfiprintf_internal_r+0x938>
    9cbc:	da802217 	ldw	r10,136(sp)
    9cc0:	d8001d85 	stb	zero,118(sp)
    9cc4:	50800204 	addi	r2,r10,8
    9cc8:	54800017 	ldw	r18,0(r10)
    9ccc:	54c00117 	ldw	r19,4(r10)
    9cd0:	4802b416 	blt	r9,zero,a7a4 <___vfiprintf_internal_r+0x119c>
    9cd4:	013fdfc4 	movi	r4,-129
    9cd8:	94c6b03a 	or	r3,r18,r19
    9cdc:	d8802215 	stw	r2,136(sp)
    9ce0:	a128703a 	and	r20,r20,r4
    9ce4:	1800a226 	beq	r3,zero,9f70 <___vfiprintf_internal_r+0x968>
    9ce8:	0039883a 	mov	fp,zero
    9cec:	dd401a04 	addi	r21,sp,104
    9cf0:	9006d0fa 	srli	r3,r18,3
    9cf4:	9808977a 	slli	r4,r19,29
    9cf8:	9826d0fa 	srli	r19,r19,3
    9cfc:	948001cc 	andi	r18,r18,7
    9d00:	90800c04 	addi	r2,r18,48
    9d04:	ad7fffc4 	addi	r21,r21,-1
    9d08:	20e4b03a 	or	r18,r4,r3
    9d0c:	a8800005 	stb	r2,0(r21)
    9d10:	94c6b03a 	or	r3,r18,r19
    9d14:	183ff61e 	bne	r3,zero,9cf0 <__alt_data_end+0xff009cf0>
    9d18:	a0c0004c 	andi	r3,r20,1
    9d1c:	18005926 	beq	r3,zero,9e84 <___vfiprintf_internal_r+0x87c>
    9d20:	10803fcc 	andi	r2,r2,255
    9d24:	1080201c 	xori	r2,r2,128
    9d28:	10bfe004 	addi	r2,r2,-128
    9d2c:	00c00c04 	movi	r3,48
    9d30:	10c05426 	beq	r2,r3,9e84 <___vfiprintf_internal_r+0x87c>
    9d34:	da801e17 	ldw	r10,120(sp)
    9d38:	a8bfffc4 	addi	r2,r21,-1
    9d3c:	a8ffffc5 	stb	r3,-1(r21)
    9d40:	50a7c83a 	sub	r19,r10,r2
    9d44:	102b883a 	mov	r21,r2
    9d48:	003f2f06 	br	9a08 <__alt_data_end+0xff009a08>
    9d4c:	21003fcc 	andi	r4,r4,255
    9d50:	2003421e 	bne	r4,zero,aa5c <___vfiprintf_internal_r+0x1454>
    9d54:	00800074 	movhi	r2,1
    9d58:	10853404 	addi	r2,r2,5328
    9d5c:	d8802615 	stw	r2,152(sp)
    9d60:	a080080c 	andi	r2,r20,32
    9d64:	1000aa26 	beq	r2,zero,a010 <___vfiprintf_internal_r+0xa08>
    9d68:	da802217 	ldw	r10,136(sp)
    9d6c:	54800017 	ldw	r18,0(r10)
    9d70:	54c00117 	ldw	r19,4(r10)
    9d74:	52800204 	addi	r10,r10,8
    9d78:	da802215 	stw	r10,136(sp)
    9d7c:	a080004c 	andi	r2,r20,1
    9d80:	1001d226 	beq	r2,zero,a4cc <___vfiprintf_internal_r+0xec4>
    9d84:	94c4b03a 	or	r2,r18,r19
    9d88:	1002351e 	bne	r2,zero,a660 <___vfiprintf_internal_r+0x1058>
    9d8c:	d8001d85 	stb	zero,118(sp)
    9d90:	48022216 	blt	r9,zero,a61c <___vfiprintf_internal_r+0x1014>
    9d94:	00bfdfc4 	movi	r2,-129
    9d98:	a0a8703a 	and	r20,r20,r2
    9d9c:	003f1506 	br	99f4 <__alt_data_end+0xff0099f4>
    9da0:	da802217 	ldw	r10,136(sp)
    9da4:	04800044 	movi	r18,1
    9da8:	d8001d85 	stb	zero,118(sp)
    9dac:	50800017 	ldw	r2,0(r10)
    9db0:	52800104 	addi	r10,r10,4
    9db4:	da802215 	stw	r10,136(sp)
    9db8:	d8801005 	stb	r2,64(sp)
    9dbc:	9027883a 	mov	r19,r18
    9dc0:	dd401004 	addi	r21,sp,64
    9dc4:	0013883a 	mov	r9,zero
    9dc8:	003f1706 	br	9a28 <__alt_data_end+0xff009a28>
    9dcc:	21003fcc 	andi	r4,r4,255
    9dd0:	2003201e 	bne	r4,zero,aa54 <___vfiprintf_internal_r+0x144c>
    9dd4:	a080080c 	andi	r2,r20,32
    9dd8:	10004b26 	beq	r2,zero,9f08 <___vfiprintf_internal_r+0x900>
    9ddc:	da802217 	ldw	r10,136(sp)
    9de0:	50800117 	ldw	r2,4(r10)
    9de4:	54800017 	ldw	r18,0(r10)
    9de8:	52800204 	addi	r10,r10,8
    9dec:	da802215 	stw	r10,136(sp)
    9df0:	1027883a 	mov	r19,r2
    9df4:	10022c16 	blt	r2,zero,a6a8 <___vfiprintf_internal_r+0x10a0>
    9df8:	df001d83 	ldbu	fp,118(sp)
    9dfc:	48007216 	blt	r9,zero,9fc8 <___vfiprintf_internal_r+0x9c0>
    9e00:	00ffdfc4 	movi	r3,-129
    9e04:	94c4b03a 	or	r2,r18,r19
    9e08:	a0e8703a 	and	r20,r20,r3
    9e0c:	1000cc26 	beq	r2,zero,a140 <___vfiprintf_internal_r+0xb38>
    9e10:	98021026 	beq	r19,zero,a654 <___vfiprintf_internal_r+0x104c>
    9e14:	dc402415 	stw	r17,144(sp)
    9e18:	dc002515 	stw	r16,148(sp)
    9e1c:	9823883a 	mov	r17,r19
    9e20:	9021883a 	mov	r16,r18
    9e24:	dd401a04 	addi	r21,sp,104
    9e28:	4825883a 	mov	r18,r9
    9e2c:	4027883a 	mov	r19,r8
    9e30:	8009883a 	mov	r4,r16
    9e34:	880b883a 	mov	r5,r17
    9e38:	01800284 	movi	r6,10
    9e3c:	000f883a 	mov	r7,zero
    9e40:	000b9e80 	call	b9e8 <__umoddi3>
    9e44:	10800c04 	addi	r2,r2,48
    9e48:	ad7fffc4 	addi	r21,r21,-1
    9e4c:	8009883a 	mov	r4,r16
    9e50:	880b883a 	mov	r5,r17
    9e54:	a8800005 	stb	r2,0(r21)
    9e58:	01800284 	movi	r6,10
    9e5c:	000f883a 	mov	r7,zero
    9e60:	000b4700 	call	b470 <__udivdi3>
    9e64:	1021883a 	mov	r16,r2
    9e68:	10c4b03a 	or	r2,r2,r3
    9e6c:	1823883a 	mov	r17,r3
    9e70:	103fef1e 	bne	r2,zero,9e30 <__alt_data_end+0xff009e30>
    9e74:	dc402417 	ldw	r17,144(sp)
    9e78:	dc002517 	ldw	r16,148(sp)
    9e7c:	9013883a 	mov	r9,r18
    9e80:	9811883a 	mov	r8,r19
    9e84:	da801e17 	ldw	r10,120(sp)
    9e88:	5567c83a 	sub	r19,r10,r21
    9e8c:	003ede06 	br	9a08 <__alt_data_end+0xff009a08>
    9e90:	38803fcc 	andi	r2,r7,255
    9e94:	1080201c 	xori	r2,r2,128
    9e98:	10bfe004 	addi	r2,r2,-128
    9e9c:	1002371e 	bne	r2,zero,a77c <___vfiprintf_internal_r+0x1174>
    9ea0:	01000044 	movi	r4,1
    9ea4:	01c00804 	movi	r7,32
    9ea8:	80c00007 	ldb	r3,0(r16)
    9eac:	003e3506 	br	9784 <__alt_data_end+0xff009784>
    9eb0:	a5000054 	ori	r20,r20,1
    9eb4:	80c00007 	ldb	r3,0(r16)
    9eb8:	003e3206 	br	9784 <__alt_data_end+0xff009784>
    9ebc:	a5002014 	ori	r20,r20,128
    9ec0:	80c00007 	ldb	r3,0(r16)
    9ec4:	003e2f06 	br	9784 <__alt_data_end+0xff009784>
    9ec8:	8015883a 	mov	r10,r16
    9ecc:	0023883a 	mov	r17,zero
    9ed0:	18bff404 	addi	r2,r3,-48
    9ed4:	50c00007 	ldb	r3,0(r10)
    9ed8:	8c4002a4 	muli	r17,r17,10
    9edc:	84000044 	addi	r16,r16,1
    9ee0:	8015883a 	mov	r10,r16
    9ee4:	1463883a 	add	r17,r2,r17
    9ee8:	18bff404 	addi	r2,r3,-48
    9eec:	30bff92e 	bgeu	r6,r2,9ed4 <__alt_data_end+0xff009ed4>
    9ef0:	003e2506 	br	9788 <__alt_data_end+0xff009788>
    9ef4:	21003fcc 	andi	r4,r4,255
    9ef8:	2002d41e 	bne	r4,zero,aa4c <___vfiprintf_internal_r+0x1444>
    9efc:	a5000414 	ori	r20,r20,16
    9f00:	a080080c 	andi	r2,r20,32
    9f04:	103fb51e 	bne	r2,zero,9ddc <__alt_data_end+0xff009ddc>
    9f08:	a080040c 	andi	r2,r20,16
    9f0c:	1001f826 	beq	r2,zero,a6f0 <___vfiprintf_internal_r+0x10e8>
    9f10:	da802217 	ldw	r10,136(sp)
    9f14:	54800017 	ldw	r18,0(r10)
    9f18:	52800104 	addi	r10,r10,4
    9f1c:	da802215 	stw	r10,136(sp)
    9f20:	9027d7fa 	srai	r19,r18,31
    9f24:	9805883a 	mov	r2,r19
    9f28:	003fb206 	br	9df4 <__alt_data_end+0xff009df4>
    9f2c:	21003fcc 	andi	r4,r4,255
    9f30:	2002c41e 	bne	r4,zero,aa44 <___vfiprintf_internal_r+0x143c>
    9f34:	a5000414 	ori	r20,r20,16
    9f38:	a080080c 	andi	r2,r20,32
    9f3c:	103f5f1e 	bne	r2,zero,9cbc <__alt_data_end+0xff009cbc>
    9f40:	a080040c 	andi	r2,r20,16
    9f44:	10020f26 	beq	r2,zero,a784 <___vfiprintf_internal_r+0x117c>
    9f48:	da802217 	ldw	r10,136(sp)
    9f4c:	d8001d85 	stb	zero,118(sp)
    9f50:	0027883a 	mov	r19,zero
    9f54:	50800104 	addi	r2,r10,4
    9f58:	54800017 	ldw	r18,0(r10)
    9f5c:	48021116 	blt	r9,zero,a7a4 <___vfiprintf_internal_r+0x119c>
    9f60:	00ffdfc4 	movi	r3,-129
    9f64:	d8802215 	stw	r2,136(sp)
    9f68:	a0e8703a 	and	r20,r20,r3
    9f6c:	903f5e1e 	bne	r18,zero,9ce8 <__alt_data_end+0xff009ce8>
    9f70:	0039883a 	mov	fp,zero
    9f74:	4802a626 	beq	r9,zero,aa10 <___vfiprintf_internal_r+0x1408>
    9f78:	0025883a 	mov	r18,zero
    9f7c:	0027883a 	mov	r19,zero
    9f80:	003f5a06 	br	9cec <__alt_data_end+0xff009cec>
    9f84:	21003fcc 	andi	r4,r4,255
    9f88:	20029f1e 	bne	r4,zero,aa08 <___vfiprintf_internal_r+0x1400>
    9f8c:	a5000414 	ori	r20,r20,16
    9f90:	a080080c 	andi	r2,r20,32
    9f94:	10005e1e 	bne	r2,zero,a110 <___vfiprintf_internal_r+0xb08>
    9f98:	a080040c 	andi	r2,r20,16
    9f9c:	1001a21e 	bne	r2,zero,a628 <___vfiprintf_internal_r+0x1020>
    9fa0:	a080100c 	andi	r2,r20,64
    9fa4:	d8001d85 	stb	zero,118(sp)
    9fa8:	da802217 	ldw	r10,136(sp)
    9fac:	1002231e 	bne	r2,zero,a83c <___vfiprintf_internal_r+0x1234>
    9fb0:	50800104 	addi	r2,r10,4
    9fb4:	54800017 	ldw	r18,0(r10)
    9fb8:	0027883a 	mov	r19,zero
    9fbc:	4801a00e 	bge	r9,zero,a640 <___vfiprintf_internal_r+0x1038>
    9fc0:	d8802215 	stw	r2,136(sp)
    9fc4:	0039883a 	mov	fp,zero
    9fc8:	94c4b03a 	or	r2,r18,r19
    9fcc:	103f901e 	bne	r2,zero,9e10 <__alt_data_end+0xff009e10>
    9fd0:	00800044 	movi	r2,1
    9fd4:	10803fcc 	andi	r2,r2,255
    9fd8:	00c00044 	movi	r3,1
    9fdc:	10c05926 	beq	r2,r3,a144 <___vfiprintf_internal_r+0xb3c>
    9fe0:	00c00084 	movi	r3,2
    9fe4:	10ffe41e 	bne	r2,r3,9f78 <__alt_data_end+0xff009f78>
    9fe8:	0025883a 	mov	r18,zero
    9fec:	0027883a 	mov	r19,zero
    9ff0:	00013d06 	br	a4e8 <___vfiprintf_internal_r+0xee0>
    9ff4:	21003fcc 	andi	r4,r4,255
    9ff8:	2002811e 	bne	r4,zero,aa00 <___vfiprintf_internal_r+0x13f8>
    9ffc:	00800074 	movhi	r2,1
    a000:	10852f04 	addi	r2,r2,5308
    a004:	d8802615 	stw	r2,152(sp)
    a008:	a080080c 	andi	r2,r20,32
    a00c:	103f561e 	bne	r2,zero,9d68 <__alt_data_end+0xff009d68>
    a010:	a080040c 	andi	r2,r20,16
    a014:	1001d126 	beq	r2,zero,a75c <___vfiprintf_internal_r+0x1154>
    a018:	da802217 	ldw	r10,136(sp)
    a01c:	0027883a 	mov	r19,zero
    a020:	54800017 	ldw	r18,0(r10)
    a024:	52800104 	addi	r10,r10,4
    a028:	da802215 	stw	r10,136(sp)
    a02c:	003f5306 	br	9d7c <__alt_data_end+0xff009d7c>
    a030:	da802217 	ldw	r10,136(sp)
    a034:	d8001d85 	stb	zero,118(sp)
    a038:	55400017 	ldw	r21,0(r10)
    a03c:	50c00104 	addi	r3,r10,4
    a040:	a8024226 	beq	r21,zero,a94c <___vfiprintf_internal_r+0x1344>
    a044:	48021816 	blt	r9,zero,a8a8 <___vfiprintf_internal_r+0x12a0>
    a048:	480d883a 	mov	r6,r9
    a04c:	000b883a 	mov	r5,zero
    a050:	a809883a 	mov	r4,r21
    a054:	d8c02a15 	stw	r3,168(sp)
    a058:	da002b15 	stw	r8,172(sp)
    a05c:	da402c15 	stw	r9,176(sp)
    a060:	00078580 	call	7858 <memchr>
    a064:	d8c02a17 	ldw	r3,168(sp)
    a068:	da002b17 	ldw	r8,172(sp)
    a06c:	da402c17 	ldw	r9,176(sp)
    a070:	10024826 	beq	r2,zero,a994 <___vfiprintf_internal_r+0x138c>
    a074:	1567c83a 	sub	r19,r2,r21
    a078:	df001d83 	ldbu	fp,118(sp)
    a07c:	d8c02215 	stw	r3,136(sp)
    a080:	0013883a 	mov	r9,zero
    a084:	003e6006 	br	9a08 <__alt_data_end+0xff009a08>
    a088:	21003fcc 	andi	r4,r4,255
    a08c:	203fc026 	beq	r4,zero,9f90 <__alt_data_end+0xff009f90>
    a090:	d9c01d85 	stb	r7,118(sp)
    a094:	003fbe06 	br	9f90 <__alt_data_end+0xff009f90>
    a098:	da802217 	ldw	r10,136(sp)
    a09c:	54400017 	ldw	r17,0(r10)
    a0a0:	50800104 	addi	r2,r10,4
    a0a4:	883e3b16 	blt	r17,zero,9994 <__alt_data_end+0xff009994>
    a0a8:	d8802215 	stw	r2,136(sp)
    a0ac:	80c00007 	ldb	r3,0(r16)
    a0b0:	003db406 	br	9784 <__alt_data_end+0xff009784>
    a0b4:	01000044 	movi	r4,1
    a0b8:	01c00ac4 	movi	r7,43
    a0bc:	80c00007 	ldb	r3,0(r16)
    a0c0:	003db006 	br	9784 <__alt_data_end+0xff009784>
    a0c4:	80c00007 	ldb	r3,0(r16)
    a0c8:	82800044 	addi	r10,r16,1
    a0cc:	1b423c26 	beq	r3,r13,a9c0 <___vfiprintf_internal_r+0x13b8>
    a0d0:	18bff404 	addi	r2,r3,-48
    a0d4:	0013883a 	mov	r9,zero
    a0d8:	30822b36 	bltu	r6,r2,a988 <___vfiprintf_internal_r+0x1380>
    a0dc:	50c00007 	ldb	r3,0(r10)
    a0e0:	4a4002a4 	muli	r9,r9,10
    a0e4:	54000044 	addi	r16,r10,1
    a0e8:	8015883a 	mov	r10,r16
    a0ec:	4893883a 	add	r9,r9,r2
    a0f0:	18bff404 	addi	r2,r3,-48
    a0f4:	30bff92e 	bgeu	r6,r2,a0dc <__alt_data_end+0xff00a0dc>
    a0f8:	483da30e 	bge	r9,zero,9788 <__alt_data_end+0xff009788>
    a0fc:	027fffc4 	movi	r9,-1
    a100:	003da106 	br	9788 <__alt_data_end+0xff009788>
    a104:	a5001014 	ori	r20,r20,64
    a108:	80c00007 	ldb	r3,0(r16)
    a10c:	003d9d06 	br	9784 <__alt_data_end+0xff009784>
    a110:	da802217 	ldw	r10,136(sp)
    a114:	d8001d85 	stb	zero,118(sp)
    a118:	50c00204 	addi	r3,r10,8
    a11c:	54800017 	ldw	r18,0(r10)
    a120:	54c00117 	ldw	r19,4(r10)
    a124:	4801ca16 	blt	r9,zero,a850 <___vfiprintf_internal_r+0x1248>
    a128:	013fdfc4 	movi	r4,-129
    a12c:	94c4b03a 	or	r2,r18,r19
    a130:	d8c02215 	stw	r3,136(sp)
    a134:	a128703a 	and	r20,r20,r4
    a138:	0039883a 	mov	fp,zero
    a13c:	103f341e 	bne	r2,zero,9e10 <__alt_data_end+0xff009e10>
    a140:	483e2e26 	beq	r9,zero,99fc <__alt_data_end+0xff0099fc>
    a144:	0025883a 	mov	r18,zero
    a148:	94800c04 	addi	r18,r18,48
    a14c:	dc8019c5 	stb	r18,103(sp)
    a150:	dcc02717 	ldw	r19,156(sp)
    a154:	dd4019c4 	addi	r21,sp,103
    a158:	003e2b06 	br	9a08 <__alt_data_end+0xff009a08>
    a15c:	21003fcc 	andi	r4,r4,255
    a160:	2002361e 	bne	r4,zero,aa3c <___vfiprintf_internal_r+0x1434>
    a164:	1801c126 	beq	r3,zero,a86c <___vfiprintf_internal_r+0x1264>
    a168:	04800044 	movi	r18,1
    a16c:	d8c01005 	stb	r3,64(sp)
    a170:	d8001d85 	stb	zero,118(sp)
    a174:	9027883a 	mov	r19,r18
    a178:	dd401004 	addi	r21,sp,64
    a17c:	003f1106 	br	9dc4 <__alt_data_end+0xff009dc4>
    a180:	d9402117 	ldw	r5,132(sp)
    a184:	d9002017 	ldw	r4,128(sp)
    a188:	d9801a04 	addi	r6,sp,104
    a18c:	d9c02b15 	stw	r7,172(sp)
    a190:	dbc02a15 	stw	r15,168(sp)
    a194:	00094f40 	call	94f4 <__sprint_r.part.0>
    a198:	d9c02b17 	ldw	r7,172(sp)
    a19c:	dbc02a17 	ldw	r15,168(sp)
    a1a0:	10006d1e 	bne	r2,zero,a358 <___vfiprintf_internal_r+0xd50>
    a1a4:	d9801b17 	ldw	r6,108(sp)
    a1a8:	d8801c17 	ldw	r2,112(sp)
    a1ac:	d811883a 	mov	r8,sp
    a1b0:	31400044 	addi	r5,r6,1
    a1b4:	003e3306 	br	9a84 <__alt_data_end+0xff009a84>
    a1b8:	d9401b17 	ldw	r5,108(sp)
    a1bc:	d8801c17 	ldw	r2,112(sp)
    a1c0:	29000044 	addi	r4,r5,1
    a1c4:	d8c01d87 	ldb	r3,118(sp)
    a1c8:	183e4d26 	beq	r3,zero,9b00 <__alt_data_end+0xff009b00>
    a1cc:	00c00044 	movi	r3,1
    a1d0:	d9401d84 	addi	r5,sp,118
    a1d4:	10c5883a 	add	r2,r2,r3
    a1d8:	41400015 	stw	r5,0(r8)
    a1dc:	40c00115 	stw	r3,4(r8)
    a1e0:	d8801c15 	stw	r2,112(sp)
    a1e4:	d9001b15 	stw	r4,108(sp)
    a1e8:	014001c4 	movi	r5,7
    a1ec:	2900a90e 	bge	r5,r4,a494 <___vfiprintf_internal_r+0xe8c>
    a1f0:	1000da1e 	bne	r2,zero,a55c <___vfiprintf_internal_r+0xf54>
    a1f4:	7000ab1e 	bne	r14,zero,a4a4 <___vfiprintf_internal_r+0xe9c>
    a1f8:	000b883a 	mov	r5,zero
    a1fc:	1809883a 	mov	r4,r3
    a200:	d811883a 	mov	r8,sp
    a204:	00c02004 	movi	r3,128
    a208:	e0fe4d26 	beq	fp,r3,9b40 <__alt_data_end+0xff009b40>
    a20c:	4cf9c83a 	sub	fp,r9,r19
    a210:	073e7b0e 	bge	zero,fp,9c00 <__alt_data_end+0xff009c00>
    a214:	01c00404 	movi	r7,16
    a218:	3f01900e 	bge	r7,fp,a85c <___vfiprintf_internal_r+0x1254>
    a21c:	00c00074 	movhi	r3,1
    a220:	18c59504 	addi	r3,r3,5716
    a224:	d8c02415 	stw	r3,144(sp)
    a228:	034001c4 	movi	r13,7
    a22c:	00000506 	br	a244 <___vfiprintf_internal_r+0xc3c>
    a230:	29000084 	addi	r4,r5,2
    a234:	42000204 	addi	r8,r8,8
    a238:	180b883a 	mov	r5,r3
    a23c:	e73ffc04 	addi	fp,fp,-16
    a240:	3f000d0e 	bge	r7,fp,a278 <___vfiprintf_internal_r+0xc70>
    a244:	10800404 	addi	r2,r2,16
    a248:	28c00044 	addi	r3,r5,1
    a24c:	45c00015 	stw	r23,0(r8)
    a250:	41c00115 	stw	r7,4(r8)
    a254:	d8801c15 	stw	r2,112(sp)
    a258:	d8c01b15 	stw	r3,108(sp)
    a25c:	68fff40e 	bge	r13,r3,a230 <__alt_data_end+0xff00a230>
    a260:	1000101e 	bne	r2,zero,a2a4 <___vfiprintf_internal_r+0xc9c>
    a264:	e73ffc04 	addi	fp,fp,-16
    a268:	01000044 	movi	r4,1
    a26c:	000b883a 	mov	r5,zero
    a270:	d811883a 	mov	r8,sp
    a274:	3f3ff316 	blt	r7,fp,a244 <__alt_data_end+0xff00a244>
    a278:	da802417 	ldw	r10,144(sp)
    a27c:	1705883a 	add	r2,r2,fp
    a280:	47000115 	stw	fp,4(r8)
    a284:	42800015 	stw	r10,0(r8)
    a288:	d8801c15 	stw	r2,112(sp)
    a28c:	d9001b15 	stw	r4,108(sp)
    a290:	00c001c4 	movi	r3,7
    a294:	19003616 	blt	r3,r4,a370 <___vfiprintf_internal_r+0xd68>
    a298:	42000204 	addi	r8,r8,8
    a29c:	21000044 	addi	r4,r4,1
    a2a0:	003e5706 	br	9c00 <__alt_data_end+0xff009c00>
    a2a4:	d9402117 	ldw	r5,132(sp)
    a2a8:	d9002017 	ldw	r4,128(sp)
    a2ac:	d9801a04 	addi	r6,sp,104
    a2b0:	d9c02b15 	stw	r7,172(sp)
    a2b4:	db402a15 	stw	r13,168(sp)
    a2b8:	00094f40 	call	94f4 <__sprint_r.part.0>
    a2bc:	d9c02b17 	ldw	r7,172(sp)
    a2c0:	db402a17 	ldw	r13,168(sp)
    a2c4:	1000241e 	bne	r2,zero,a358 <___vfiprintf_internal_r+0xd50>
    a2c8:	d9401b17 	ldw	r5,108(sp)
    a2cc:	d8801c17 	ldw	r2,112(sp)
    a2d0:	d811883a 	mov	r8,sp
    a2d4:	29000044 	addi	r4,r5,1
    a2d8:	003fd806 	br	a23c <__alt_data_end+0xff00a23c>
    a2dc:	d9401b17 	ldw	r5,108(sp)
    a2e0:	00c00074 	movhi	r3,1
    a2e4:	18c59904 	addi	r3,r3,5732
    a2e8:	d8c02415 	stw	r3,144(sp)
    a2ec:	29400044 	addi	r5,r5,1
    a2f0:	d8c02417 	ldw	r3,144(sp)
    a2f4:	14c5883a 	add	r2,r2,r19
    a2f8:	44c00115 	stw	r19,4(r8)
    a2fc:	40c00015 	stw	r3,0(r8)
    a300:	d8801c15 	stw	r2,112(sp)
    a304:	d9401b15 	stw	r5,108(sp)
    a308:	00c001c4 	movi	r3,7
    a30c:	1940070e 	bge	r3,r5,a32c <___vfiprintf_internal_r+0xd24>
    a310:	103e4826 	beq	r2,zero,9c34 <__alt_data_end+0xff009c34>
    a314:	d9402117 	ldw	r5,132(sp)
    a318:	d9002017 	ldw	r4,128(sp)
    a31c:	d9801a04 	addi	r6,sp,104
    a320:	00094f40 	call	94f4 <__sprint_r.part.0>
    a324:	10000c1e 	bne	r2,zero,a358 <___vfiprintf_internal_r+0xd50>
    a328:	d8801c17 	ldw	r2,112(sp)
    a32c:	8c80010e 	bge	r17,r18,a334 <___vfiprintf_internal_r+0xd2c>
    a330:	9023883a 	mov	r17,r18
    a334:	da802317 	ldw	r10,140(sp)
    a338:	5455883a 	add	r10,r10,r17
    a33c:	da802315 	stw	r10,140(sp)
    a340:	103e4126 	beq	r2,zero,9c48 <__alt_data_end+0xff009c48>
    a344:	d9402117 	ldw	r5,132(sp)
    a348:	d9002017 	ldw	r4,128(sp)
    a34c:	d9801a04 	addi	r6,sp,104
    a350:	00094f40 	call	94f4 <__sprint_r.part.0>
    a354:	103e3c26 	beq	r2,zero,9c48 <__alt_data_end+0xff009c48>
    a358:	dd002117 	ldw	r20,132(sp)
    a35c:	a080030b 	ldhu	r2,12(r20)
    a360:	1080100c 	andi	r2,r2,64
    a364:	1001231e 	bne	r2,zero,a7f4 <___vfiprintf_internal_r+0x11ec>
    a368:	d8802317 	ldw	r2,140(sp)
    a36c:	003d7b06 	br	995c <__alt_data_end+0xff00995c>
    a370:	1000991e 	bne	r2,zero,a5d8 <___vfiprintf_internal_r+0xfd0>
    a374:	00c00044 	movi	r3,1
    a378:	9805883a 	mov	r2,r19
    a37c:	dd400015 	stw	r21,0(sp)
    a380:	dcc00115 	stw	r19,4(sp)
    a384:	dcc01c15 	stw	r19,112(sp)
    a388:	d8c01b15 	stw	r3,108(sp)
    a38c:	d811883a 	mov	r8,sp
    a390:	42000204 	addi	r8,r8,8
    a394:	a2c0010c 	andi	r11,r20,4
    a398:	583fe426 	beq	r11,zero,a32c <__alt_data_end+0xff00a32c>
    a39c:	8ca7c83a 	sub	r19,r17,r18
    a3a0:	04ffe20e 	bge	zero,r19,a32c <__alt_data_end+0xff00a32c>
    a3a4:	01c00404 	movi	r7,16
    a3a8:	3cffcc0e 	bge	r7,r19,a2dc <__alt_data_end+0xff00a2dc>
    a3ac:	02800074 	movhi	r10,1
    a3b0:	52859904 	addi	r10,r10,5732
    a3b4:	d9001b17 	ldw	r4,108(sp)
    a3b8:	da802415 	stw	r10,144(sp)
    a3bc:	382b883a 	mov	r21,r7
    a3c0:	050001c4 	movi	r20,7
    a3c4:	df002017 	ldw	fp,128(sp)
    a3c8:	00000506 	br	a3e0 <___vfiprintf_internal_r+0xdd8>
    a3cc:	21400084 	addi	r5,r4,2
    a3d0:	42000204 	addi	r8,r8,8
    a3d4:	1809883a 	mov	r4,r3
    a3d8:	9cfffc04 	addi	r19,r19,-16
    a3dc:	acffc40e 	bge	r21,r19,a2f0 <__alt_data_end+0xff00a2f0>
    a3e0:	10800404 	addi	r2,r2,16
    a3e4:	20c00044 	addi	r3,r4,1
    a3e8:	45800015 	stw	r22,0(r8)
    a3ec:	45400115 	stw	r21,4(r8)
    a3f0:	d8801c15 	stw	r2,112(sp)
    a3f4:	d8c01b15 	stw	r3,108(sp)
    a3f8:	a0fff40e 	bge	r20,r3,a3cc <__alt_data_end+0xff00a3cc>
    a3fc:	1000041e 	bne	r2,zero,a410 <___vfiprintf_internal_r+0xe08>
    a400:	01400044 	movi	r5,1
    a404:	0009883a 	mov	r4,zero
    a408:	d811883a 	mov	r8,sp
    a40c:	003ff206 	br	a3d8 <__alt_data_end+0xff00a3d8>
    a410:	d9402117 	ldw	r5,132(sp)
    a414:	d9801a04 	addi	r6,sp,104
    a418:	e009883a 	mov	r4,fp
    a41c:	00094f40 	call	94f4 <__sprint_r.part.0>
    a420:	103fcd1e 	bne	r2,zero,a358 <__alt_data_end+0xff00a358>
    a424:	d9001b17 	ldw	r4,108(sp)
    a428:	d8801c17 	ldw	r2,112(sp)
    a42c:	d811883a 	mov	r8,sp
    a430:	21400044 	addi	r5,r4,1
    a434:	003fe806 	br	a3d8 <__alt_data_end+0xff00a3d8>
    a438:	d9402117 	ldw	r5,132(sp)
    a43c:	d9002017 	ldw	r4,128(sp)
    a440:	d9801a04 	addi	r6,sp,104
    a444:	d9c02b15 	stw	r7,172(sp)
    a448:	db402a15 	stw	r13,168(sp)
    a44c:	00094f40 	call	94f4 <__sprint_r.part.0>
    a450:	d9c02b17 	ldw	r7,172(sp)
    a454:	db402a17 	ldw	r13,168(sp)
    a458:	103fbf1e 	bne	r2,zero,a358 <__alt_data_end+0xff00a358>
    a45c:	d9401b17 	ldw	r5,108(sp)
    a460:	d8801c17 	ldw	r2,112(sp)
    a464:	d811883a 	mov	r8,sp
    a468:	29800044 	addi	r6,r5,1
    a46c:	003dc406 	br	9b80 <__alt_data_end+0xff009b80>
    a470:	1000d21e 	bne	r2,zero,a7bc <___vfiprintf_internal_r+0x11b4>
    a474:	d8c01d87 	ldb	r3,118(sp)
    a478:	18009526 	beq	r3,zero,a6d0 <___vfiprintf_internal_r+0x10c8>
    a47c:	00800044 	movi	r2,1
    a480:	d8c01d84 	addi	r3,sp,118
    a484:	1009883a 	mov	r4,r2
    a488:	d8c00015 	stw	r3,0(sp)
    a48c:	d8800115 	stw	r2,4(sp)
    a490:	d811883a 	mov	r8,sp
    a494:	200b883a 	mov	r5,r4
    a498:	42000204 	addi	r8,r8,8
    a49c:	21000044 	addi	r4,r4,1
    a4a0:	003d9706 	br	9b00 <__alt_data_end+0xff009b00>
    a4a4:	d9001d04 	addi	r4,sp,116
    a4a8:	00800084 	movi	r2,2
    a4ac:	d9000015 	stw	r4,0(sp)
    a4b0:	d8800115 	stw	r2,4(sp)
    a4b4:	1809883a 	mov	r4,r3
    a4b8:	d811883a 	mov	r8,sp
    a4bc:	200b883a 	mov	r5,r4
    a4c0:	42000204 	addi	r8,r8,8
    a4c4:	21000044 	addi	r4,r4,1
    a4c8:	003f4e06 	br	a204 <__alt_data_end+0xff00a204>
    a4cc:	d8001d85 	stb	zero,118(sp)
    a4d0:	48005016 	blt	r9,zero,a614 <___vfiprintf_internal_r+0x100c>
    a4d4:	00ffdfc4 	movi	r3,-129
    a4d8:	94c4b03a 	or	r2,r18,r19
    a4dc:	a0e8703a 	and	r20,r20,r3
    a4e0:	103d4426 	beq	r2,zero,99f4 <__alt_data_end+0xff0099f4>
    a4e4:	0039883a 	mov	fp,zero
    a4e8:	d9002617 	ldw	r4,152(sp)
    a4ec:	dd401a04 	addi	r21,sp,104
    a4f0:	908003cc 	andi	r2,r18,15
    a4f4:	9806973a 	slli	r3,r19,28
    a4f8:	2085883a 	add	r2,r4,r2
    a4fc:	9024d13a 	srli	r18,r18,4
    a500:	10800003 	ldbu	r2,0(r2)
    a504:	9826d13a 	srli	r19,r19,4
    a508:	ad7fffc4 	addi	r21,r21,-1
    a50c:	1ca4b03a 	or	r18,r3,r18
    a510:	a8800005 	stb	r2,0(r21)
    a514:	94c4b03a 	or	r2,r18,r19
    a518:	103ff51e 	bne	r2,zero,a4f0 <__alt_data_end+0xff00a4f0>
    a51c:	003e5906 	br	9e84 <__alt_data_end+0xff009e84>
    a520:	d9402117 	ldw	r5,132(sp)
    a524:	d9002017 	ldw	r4,128(sp)
    a528:	d9801a04 	addi	r6,sp,104
    a52c:	00094f40 	call	94f4 <__sprint_r.part.0>
    a530:	103f891e 	bne	r2,zero,a358 <__alt_data_end+0xff00a358>
    a534:	d8801c17 	ldw	r2,112(sp)
    a538:	d811883a 	mov	r8,sp
    a53c:	003f9506 	br	a394 <__alt_data_end+0xff00a394>
    a540:	d9402117 	ldw	r5,132(sp)
    a544:	d9002017 	ldw	r4,128(sp)
    a548:	d9801a04 	addi	r6,sp,104
    a54c:	00094f40 	call	94f4 <__sprint_r.part.0>
    a550:	103f811e 	bne	r2,zero,a358 <__alt_data_end+0xff00a358>
    a554:	d811883a 	mov	r8,sp
    a558:	003ced06 	br	9910 <__alt_data_end+0xff009910>
    a55c:	d9402117 	ldw	r5,132(sp)
    a560:	d9002017 	ldw	r4,128(sp)
    a564:	d9801a04 	addi	r6,sp,104
    a568:	da402c15 	stw	r9,176(sp)
    a56c:	db802a15 	stw	r14,168(sp)
    a570:	00094f40 	call	94f4 <__sprint_r.part.0>
    a574:	da402c17 	ldw	r9,176(sp)
    a578:	db802a17 	ldw	r14,168(sp)
    a57c:	103f761e 	bne	r2,zero,a358 <__alt_data_end+0xff00a358>
    a580:	d9401b17 	ldw	r5,108(sp)
    a584:	d8801c17 	ldw	r2,112(sp)
    a588:	d811883a 	mov	r8,sp
    a58c:	29000044 	addi	r4,r5,1
    a590:	003d5b06 	br	9b00 <__alt_data_end+0xff009b00>
    a594:	d9402117 	ldw	r5,132(sp)
    a598:	d9002017 	ldw	r4,128(sp)
    a59c:	d9801a04 	addi	r6,sp,104
    a5a0:	da402c15 	stw	r9,176(sp)
    a5a4:	00094f40 	call	94f4 <__sprint_r.part.0>
    a5a8:	da402c17 	ldw	r9,176(sp)
    a5ac:	103f6a1e 	bne	r2,zero,a358 <__alt_data_end+0xff00a358>
    a5b0:	d9401b17 	ldw	r5,108(sp)
    a5b4:	d8801c17 	ldw	r2,112(sp)
    a5b8:	d811883a 	mov	r8,sp
    a5bc:	29000044 	addi	r4,r5,1
    a5c0:	003f1006 	br	a204 <__alt_data_end+0xff00a204>
    a5c4:	1000c31e 	bne	r2,zero,a8d4 <___vfiprintf_internal_r+0x12cc>
    a5c8:	01000044 	movi	r4,1
    a5cc:	000b883a 	mov	r5,zero
    a5d0:	d811883a 	mov	r8,sp
    a5d4:	003f0d06 	br	a20c <__alt_data_end+0xff00a20c>
    a5d8:	d9402117 	ldw	r5,132(sp)
    a5dc:	d9002017 	ldw	r4,128(sp)
    a5e0:	d9801a04 	addi	r6,sp,104
    a5e4:	00094f40 	call	94f4 <__sprint_r.part.0>
    a5e8:	103f5b1e 	bne	r2,zero,a358 <__alt_data_end+0xff00a358>
    a5ec:	d9001b17 	ldw	r4,108(sp)
    a5f0:	d8801c17 	ldw	r2,112(sp)
    a5f4:	d811883a 	mov	r8,sp
    a5f8:	21000044 	addi	r4,r4,1
    a5fc:	003d8006 	br	9c00 <__alt_data_end+0xff009c00>
    a600:	01000074 	movhi	r4,1
    a604:	21053404 	addi	r4,r4,5328
    a608:	d9002615 	stw	r4,152(sp)
    a60c:	d8c02215 	stw	r3,136(sp)
    a610:	1029883a 	mov	r20,r2
    a614:	94c4b03a 	or	r2,r18,r19
    a618:	103fb21e 	bne	r2,zero,a4e4 <__alt_data_end+0xff00a4e4>
    a61c:	0039883a 	mov	fp,zero
    a620:	00800084 	movi	r2,2
    a624:	003e6b06 	br	9fd4 <__alt_data_end+0xff009fd4>
    a628:	da802217 	ldw	r10,136(sp)
    a62c:	d8001d85 	stb	zero,118(sp)
    a630:	0027883a 	mov	r19,zero
    a634:	50800104 	addi	r2,r10,4
    a638:	54800017 	ldw	r18,0(r10)
    a63c:	483e6016 	blt	r9,zero,9fc0 <__alt_data_end+0xff009fc0>
    a640:	00ffdfc4 	movi	r3,-129
    a644:	d8802215 	stw	r2,136(sp)
    a648:	a0e8703a 	and	r20,r20,r3
    a64c:	0039883a 	mov	fp,zero
    a650:	903ebb26 	beq	r18,zero,a140 <__alt_data_end+0xff00a140>
    a654:	00800244 	movi	r2,9
    a658:	14bdee36 	bltu	r2,r18,9e14 <__alt_data_end+0xff009e14>
    a65c:	003eba06 	br	a148 <__alt_data_end+0xff00a148>
    a660:	00800c04 	movi	r2,48
    a664:	d8c01d45 	stb	r3,117(sp)
    a668:	d8801d05 	stb	r2,116(sp)
    a66c:	d8001d85 	stb	zero,118(sp)
    a670:	a0c00094 	ori	r3,r20,2
    a674:	4800a916 	blt	r9,zero,a91c <___vfiprintf_internal_r+0x1314>
    a678:	00bfdfc4 	movi	r2,-129
    a67c:	a096703a 	and	r11,r20,r2
    a680:	5d000094 	ori	r20,r11,2
    a684:	0039883a 	mov	fp,zero
    a688:	003f9706 	br	a4e8 <__alt_data_end+0xff00a4e8>
    a68c:	8025883a 	mov	r18,r16
    a690:	003c2e06 	br	974c <__alt_data_end+0xff00974c>
    a694:	00800074 	movhi	r2,1
    a698:	10853404 	addi	r2,r2,5328
    a69c:	0039883a 	mov	fp,zero
    a6a0:	d8802615 	stw	r2,152(sp)
    a6a4:	003f9006 	br	a4e8 <__alt_data_end+0xff00a4e8>
    a6a8:	04a5c83a 	sub	r18,zero,r18
    a6ac:	07000b44 	movi	fp,45
    a6b0:	9004c03a 	cmpne	r2,r18,zero
    a6b4:	04e7c83a 	sub	r19,zero,r19
    a6b8:	df001d85 	stb	fp,118(sp)
    a6bc:	98a7c83a 	sub	r19,r19,r2
    a6c0:	48009f16 	blt	r9,zero,a940 <___vfiprintf_internal_r+0x1338>
    a6c4:	00bfdfc4 	movi	r2,-129
    a6c8:	a0a8703a 	and	r20,r20,r2
    a6cc:	003dd006 	br	9e10 <__alt_data_end+0xff009e10>
    a6d0:	70004c26 	beq	r14,zero,a804 <___vfiprintf_internal_r+0x11fc>
    a6d4:	00800084 	movi	r2,2
    a6d8:	d8c01d04 	addi	r3,sp,116
    a6dc:	d8c00015 	stw	r3,0(sp)
    a6e0:	d8800115 	stw	r2,4(sp)
    a6e4:	01000044 	movi	r4,1
    a6e8:	d811883a 	mov	r8,sp
    a6ec:	003f7306 	br	a4bc <__alt_data_end+0xff00a4bc>
    a6f0:	a080100c 	andi	r2,r20,64
    a6f4:	da802217 	ldw	r10,136(sp)
    a6f8:	103e0626 	beq	r2,zero,9f14 <__alt_data_end+0xff009f14>
    a6fc:	5480000f 	ldh	r18,0(r10)
    a700:	52800104 	addi	r10,r10,4
    a704:	da802215 	stw	r10,136(sp)
    a708:	9027d7fa 	srai	r19,r18,31
    a70c:	9805883a 	mov	r2,r19
    a710:	003db806 	br	9df4 <__alt_data_end+0xff009df4>
    a714:	a080040c 	andi	r2,r20,16
    a718:	1000091e 	bne	r2,zero,a740 <___vfiprintf_internal_r+0x1138>
    a71c:	a2c0100c 	andi	r11,r20,64
    a720:	58000726 	beq	r11,zero,a740 <___vfiprintf_internal_r+0x1138>
    a724:	da802217 	ldw	r10,136(sp)
    a728:	50800017 	ldw	r2,0(r10)
    a72c:	52800104 	addi	r10,r10,4
    a730:	da802215 	stw	r10,136(sp)
    a734:	da802317 	ldw	r10,140(sp)
    a738:	1280000d 	sth	r10,0(r2)
    a73c:	003be706 	br	96dc <__alt_data_end+0xff0096dc>
    a740:	da802217 	ldw	r10,136(sp)
    a744:	50800017 	ldw	r2,0(r10)
    a748:	52800104 	addi	r10,r10,4
    a74c:	da802215 	stw	r10,136(sp)
    a750:	da802317 	ldw	r10,140(sp)
    a754:	12800015 	stw	r10,0(r2)
    a758:	003be006 	br	96dc <__alt_data_end+0xff0096dc>
    a75c:	a080100c 	andi	r2,r20,64
    a760:	da802217 	ldw	r10,136(sp)
    a764:	10003026 	beq	r2,zero,a828 <___vfiprintf_internal_r+0x1220>
    a768:	5480000b 	ldhu	r18,0(r10)
    a76c:	52800104 	addi	r10,r10,4
    a770:	0027883a 	mov	r19,zero
    a774:	da802215 	stw	r10,136(sp)
    a778:	003d8006 	br	9d7c <__alt_data_end+0xff009d7c>
    a77c:	80c00007 	ldb	r3,0(r16)
    a780:	003c0006 	br	9784 <__alt_data_end+0xff009784>
    a784:	a080100c 	andi	r2,r20,64
    a788:	d8001d85 	stb	zero,118(sp)
    a78c:	da802217 	ldw	r10,136(sp)
    a790:	1000201e 	bne	r2,zero,a814 <___vfiprintf_internal_r+0x120c>
    a794:	50800104 	addi	r2,r10,4
    a798:	54800017 	ldw	r18,0(r10)
    a79c:	0027883a 	mov	r19,zero
    a7a0:	483def0e 	bge	r9,zero,9f60 <__alt_data_end+0xff009f60>
    a7a4:	94c6b03a 	or	r3,r18,r19
    a7a8:	d8802215 	stw	r2,136(sp)
    a7ac:	183d4e1e 	bne	r3,zero,9ce8 <__alt_data_end+0xff009ce8>
    a7b0:	0039883a 	mov	fp,zero
    a7b4:	0005883a 	mov	r2,zero
    a7b8:	003e0606 	br	9fd4 <__alt_data_end+0xff009fd4>
    a7bc:	d9402117 	ldw	r5,132(sp)
    a7c0:	d9002017 	ldw	r4,128(sp)
    a7c4:	d9801a04 	addi	r6,sp,104
    a7c8:	da402c15 	stw	r9,176(sp)
    a7cc:	db802a15 	stw	r14,168(sp)
    a7d0:	00094f40 	call	94f4 <__sprint_r.part.0>
    a7d4:	da402c17 	ldw	r9,176(sp)
    a7d8:	db802a17 	ldw	r14,168(sp)
    a7dc:	103ede1e 	bne	r2,zero,a358 <__alt_data_end+0xff00a358>
    a7e0:	d9401b17 	ldw	r5,108(sp)
    a7e4:	d8801c17 	ldw	r2,112(sp)
    a7e8:	d811883a 	mov	r8,sp
    a7ec:	29000044 	addi	r4,r5,1
    a7f0:	003e7406 	br	a1c4 <__alt_data_end+0xff00a1c4>
    a7f4:	00bfffc4 	movi	r2,-1
    a7f8:	003c5806 	br	995c <__alt_data_end+0xff00995c>
    a7fc:	d811883a 	mov	r8,sp
    a800:	003ee806 	br	a3a4 <__alt_data_end+0xff00a3a4>
    a804:	000b883a 	mov	r5,zero
    a808:	01000044 	movi	r4,1
    a80c:	d811883a 	mov	r8,sp
    a810:	003e7c06 	br	a204 <__alt_data_end+0xff00a204>
    a814:	50800104 	addi	r2,r10,4
    a818:	5480000b 	ldhu	r18,0(r10)
    a81c:	0027883a 	mov	r19,zero
    a820:	483dcf0e 	bge	r9,zero,9f60 <__alt_data_end+0xff009f60>
    a824:	003fdf06 	br	a7a4 <__alt_data_end+0xff00a7a4>
    a828:	54800017 	ldw	r18,0(r10)
    a82c:	52800104 	addi	r10,r10,4
    a830:	0027883a 	mov	r19,zero
    a834:	da802215 	stw	r10,136(sp)
    a838:	003d5006 	br	9d7c <__alt_data_end+0xff009d7c>
    a83c:	50800104 	addi	r2,r10,4
    a840:	5480000b 	ldhu	r18,0(r10)
    a844:	0027883a 	mov	r19,zero
    a848:	483f7d0e 	bge	r9,zero,a640 <__alt_data_end+0xff00a640>
    a84c:	003ddc06 	br	9fc0 <__alt_data_end+0xff009fc0>
    a850:	d8c02215 	stw	r3,136(sp)
    a854:	0039883a 	mov	fp,zero
    a858:	003ddb06 	br	9fc8 <__alt_data_end+0xff009fc8>
    a85c:	02800074 	movhi	r10,1
    a860:	52859504 	addi	r10,r10,5716
    a864:	da802415 	stw	r10,144(sp)
    a868:	003e8306 	br	a278 <__alt_data_end+0xff00a278>
    a86c:	d8801c17 	ldw	r2,112(sp)
    a870:	dd002117 	ldw	r20,132(sp)
    a874:	103eb926 	beq	r2,zero,a35c <__alt_data_end+0xff00a35c>
    a878:	d9002017 	ldw	r4,128(sp)
    a87c:	d9801a04 	addi	r6,sp,104
    a880:	a00b883a 	mov	r5,r20
    a884:	00094f40 	call	94f4 <__sprint_r.part.0>
    a888:	003eb406 	br	a35c <__alt_data_end+0xff00a35c>
    a88c:	80c00043 	ldbu	r3,1(r16)
    a890:	a5000814 	ori	r20,r20,32
    a894:	84000044 	addi	r16,r16,1
    a898:	18c03fcc 	andi	r3,r3,255
    a89c:	18c0201c 	xori	r3,r3,128
    a8a0:	18ffe004 	addi	r3,r3,-128
    a8a4:	003bb706 	br	9784 <__alt_data_end+0xff009784>
    a8a8:	a809883a 	mov	r4,r21
    a8ac:	d8c02a15 	stw	r3,168(sp)
    a8b0:	da002b15 	stw	r8,172(sp)
    a8b4:	00027bc0 	call	27bc <strlen>
    a8b8:	d8c02a17 	ldw	r3,168(sp)
    a8bc:	1027883a 	mov	r19,r2
    a8c0:	df001d83 	ldbu	fp,118(sp)
    a8c4:	d8c02215 	stw	r3,136(sp)
    a8c8:	0013883a 	mov	r9,zero
    a8cc:	da002b17 	ldw	r8,172(sp)
    a8d0:	003c4d06 	br	9a08 <__alt_data_end+0xff009a08>
    a8d4:	d9402117 	ldw	r5,132(sp)
    a8d8:	d9002017 	ldw	r4,128(sp)
    a8dc:	d9801a04 	addi	r6,sp,104
    a8e0:	da402c15 	stw	r9,176(sp)
    a8e4:	00094f40 	call	94f4 <__sprint_r.part.0>
    a8e8:	da402c17 	ldw	r9,176(sp)
    a8ec:	103e9a1e 	bne	r2,zero,a358 <__alt_data_end+0xff00a358>
    a8f0:	d9401b17 	ldw	r5,108(sp)
    a8f4:	d8801c17 	ldw	r2,112(sp)
    a8f8:	d811883a 	mov	r8,sp
    a8fc:	29000044 	addi	r4,r5,1
    a900:	003e4206 	br	a20c <__alt_data_end+0xff00a20c>
    a904:	d9401b17 	ldw	r5,108(sp)
    a908:	01000074 	movhi	r4,1
    a90c:	21059904 	addi	r4,r4,5732
    a910:	d9002415 	stw	r4,144(sp)
    a914:	29400044 	addi	r5,r5,1
    a918:	003c6d06 	br	9ad0 <__alt_data_end+0xff009ad0>
    a91c:	0039883a 	mov	fp,zero
    a920:	00800084 	movi	r2,2
    a924:	10803fcc 	andi	r2,r2,255
    a928:	01000044 	movi	r4,1
    a92c:	11001e26 	beq	r2,r4,a9a8 <___vfiprintf_internal_r+0x13a0>
    a930:	01000084 	movi	r4,2
    a934:	11001e1e 	bne	r2,r4,a9b0 <___vfiprintf_internal_r+0x13a8>
    a938:	1829883a 	mov	r20,r3
    a93c:	003eea06 	br	a4e8 <__alt_data_end+0xff00a4e8>
    a940:	a007883a 	mov	r3,r20
    a944:	00800044 	movi	r2,1
    a948:	003ff606 	br	a924 <__alt_data_end+0xff00a924>
    a94c:	00800184 	movi	r2,6
    a950:	1240012e 	bgeu	r2,r9,a958 <___vfiprintf_internal_r+0x1350>
    a954:	1013883a 	mov	r9,r2
    a958:	4827883a 	mov	r19,r9
    a95c:	4825883a 	mov	r18,r9
    a960:	48001516 	blt	r9,zero,a9b8 <___vfiprintf_internal_r+0x13b0>
    a964:	05400074 	movhi	r21,1
    a968:	d8c02215 	stw	r3,136(sp)
    a96c:	ad453904 	addi	r21,r21,5348
    a970:	003d1406 	br	9dc4 <__alt_data_end+0xff009dc4>
    a974:	02800074 	movhi	r10,1
    a978:	52859504 	addi	r10,r10,5716
    a97c:	da802415 	stw	r10,144(sp)
    a980:	200d883a 	mov	r6,r4
    a984:	003c9106 	br	9bcc <__alt_data_end+0xff009bcc>
    a988:	5021883a 	mov	r16,r10
    a98c:	0013883a 	mov	r9,zero
    a990:	003b7d06 	br	9788 <__alt_data_end+0xff009788>
    a994:	4827883a 	mov	r19,r9
    a998:	df001d83 	ldbu	fp,118(sp)
    a99c:	d8c02215 	stw	r3,136(sp)
    a9a0:	0013883a 	mov	r9,zero
    a9a4:	003c1806 	br	9a08 <__alt_data_end+0xff009a08>
    a9a8:	1829883a 	mov	r20,r3
    a9ac:	003d1806 	br	9e10 <__alt_data_end+0xff009e10>
    a9b0:	1829883a 	mov	r20,r3
    a9b4:	003ccd06 	br	9cec <__alt_data_end+0xff009cec>
    a9b8:	0025883a 	mov	r18,zero
    a9bc:	003fe906 	br	a964 <__alt_data_end+0xff00a964>
    a9c0:	d8802217 	ldw	r2,136(sp)
    a9c4:	80c00043 	ldbu	r3,1(r16)
    a9c8:	5021883a 	mov	r16,r10
    a9cc:	12400017 	ldw	r9,0(r2)
    a9d0:	10800104 	addi	r2,r2,4
    a9d4:	d8802215 	stw	r2,136(sp)
    a9d8:	483faf0e 	bge	r9,zero,a898 <__alt_data_end+0xff00a898>
    a9dc:	18c03fcc 	andi	r3,r3,255
    a9e0:	18c0201c 	xori	r3,r3,128
    a9e4:	027fffc4 	movi	r9,-1
    a9e8:	18ffe004 	addi	r3,r3,-128
    a9ec:	003b6506 	br	9784 <__alt_data_end+0xff009784>
    a9f0:	d9c01d85 	stb	r7,118(sp)
    a9f4:	003ca006 	br	9c78 <__alt_data_end+0xff009c78>
    a9f8:	d9c01d85 	stb	r7,118(sp)
    a9fc:	003cad06 	br	9cb4 <__alt_data_end+0xff009cb4>
    aa00:	d9c01d85 	stb	r7,118(sp)
    aa04:	003d7d06 	br	9ffc <__alt_data_end+0xff009ffc>
    aa08:	d9c01d85 	stb	r7,118(sp)
    aa0c:	003d5f06 	br	9f8c <__alt_data_end+0xff009f8c>
    aa10:	a080004c 	andi	r2,r20,1
    aa14:	0039883a 	mov	fp,zero
    aa18:	10000526 	beq	r2,zero,aa30 <___vfiprintf_internal_r+0x1428>
    aa1c:	00800c04 	movi	r2,48
    aa20:	d88019c5 	stb	r2,103(sp)
    aa24:	dcc02717 	ldw	r19,156(sp)
    aa28:	dd4019c4 	addi	r21,sp,103
    aa2c:	003bf606 	br	9a08 <__alt_data_end+0xff009a08>
    aa30:	0027883a 	mov	r19,zero
    aa34:	dd401a04 	addi	r21,sp,104
    aa38:	003bf306 	br	9a08 <__alt_data_end+0xff009a08>
    aa3c:	d9c01d85 	stb	r7,118(sp)
    aa40:	003dc806 	br	a164 <__alt_data_end+0xff00a164>
    aa44:	d9c01d85 	stb	r7,118(sp)
    aa48:	003d3a06 	br	9f34 <__alt_data_end+0xff009f34>
    aa4c:	d9c01d85 	stb	r7,118(sp)
    aa50:	003d2a06 	br	9efc <__alt_data_end+0xff009efc>
    aa54:	d9c01d85 	stb	r7,118(sp)
    aa58:	003cde06 	br	9dd4 <__alt_data_end+0xff009dd4>
    aa5c:	d9c01d85 	stb	r7,118(sp)
    aa60:	003cbc06 	br	9d54 <__alt_data_end+0xff009d54>

0000aa64 <__vfiprintf_internal>:
    aa64:	00800074 	movhi	r2,1
    aa68:	108cd604 	addi	r2,r2,13144
    aa6c:	300f883a 	mov	r7,r6
    aa70:	280d883a 	mov	r6,r5
    aa74:	200b883a 	mov	r5,r4
    aa78:	11000017 	ldw	r4,0(r2)
    aa7c:	00096081 	jmpi	9608 <___vfiprintf_internal_r>

0000aa80 <__sbprintf>:
    aa80:	2880030b 	ldhu	r2,12(r5)
    aa84:	2ac01917 	ldw	r11,100(r5)
    aa88:	2a80038b 	ldhu	r10,14(r5)
    aa8c:	2a400717 	ldw	r9,28(r5)
    aa90:	2a000917 	ldw	r8,36(r5)
    aa94:	defee204 	addi	sp,sp,-1144
    aa98:	00c10004 	movi	r3,1024
    aa9c:	dc011a15 	stw	r16,1128(sp)
    aaa0:	10bfff4c 	andi	r2,r2,65533
    aaa4:	2821883a 	mov	r16,r5
    aaa8:	d8cb883a 	add	r5,sp,r3
    aaac:	dc811c15 	stw	r18,1136(sp)
    aab0:	dc411b15 	stw	r17,1132(sp)
    aab4:	dfc11d15 	stw	ra,1140(sp)
    aab8:	2025883a 	mov	r18,r4
    aabc:	d881030d 	sth	r2,1036(sp)
    aac0:	dac11915 	stw	r11,1124(sp)
    aac4:	da81038d 	sth	r10,1038(sp)
    aac8:	da410715 	stw	r9,1052(sp)
    aacc:	da010915 	stw	r8,1060(sp)
    aad0:	dec10015 	stw	sp,1024(sp)
    aad4:	dec10415 	stw	sp,1040(sp)
    aad8:	d8c10215 	stw	r3,1032(sp)
    aadc:	d8c10515 	stw	r3,1044(sp)
    aae0:	d8010615 	stw	zero,1048(sp)
    aae4:	00096080 	call	9608 <___vfiprintf_internal_r>
    aae8:	1023883a 	mov	r17,r2
    aaec:	10000416 	blt	r2,zero,ab00 <__sbprintf+0x80>
    aaf0:	d9410004 	addi	r5,sp,1024
    aaf4:	9009883a 	mov	r4,r18
    aaf8:	000671c0 	call	671c <_fflush_r>
    aafc:	10000d1e 	bne	r2,zero,ab34 <__sbprintf+0xb4>
    ab00:	d881030b 	ldhu	r2,1036(sp)
    ab04:	1080100c 	andi	r2,r2,64
    ab08:	10000326 	beq	r2,zero,ab18 <__sbprintf+0x98>
    ab0c:	8080030b 	ldhu	r2,12(r16)
    ab10:	10801014 	ori	r2,r2,64
    ab14:	8080030d 	sth	r2,12(r16)
    ab18:	8805883a 	mov	r2,r17
    ab1c:	dfc11d17 	ldw	ra,1140(sp)
    ab20:	dc811c17 	ldw	r18,1136(sp)
    ab24:	dc411b17 	ldw	r17,1132(sp)
    ab28:	dc011a17 	ldw	r16,1128(sp)
    ab2c:	dec11e04 	addi	sp,sp,1144
    ab30:	f800283a 	ret
    ab34:	047fffc4 	movi	r17,-1
    ab38:	003ff106 	br	ab00 <__alt_data_end+0xff00ab00>

0000ab3c <_write_r>:
    ab3c:	defffd04 	addi	sp,sp,-12
    ab40:	2805883a 	mov	r2,r5
    ab44:	dc000015 	stw	r16,0(sp)
    ab48:	04000074 	movhi	r16,1
    ab4c:	dc400115 	stw	r17,4(sp)
    ab50:	300b883a 	mov	r5,r6
    ab54:	8413eb04 	addi	r16,r16,20396
    ab58:	2023883a 	mov	r17,r4
    ab5c:	380d883a 	mov	r6,r7
    ab60:	1009883a 	mov	r4,r2
    ab64:	dfc00215 	stw	ra,8(sp)
    ab68:	80000015 	stw	zero,0(r16)
    ab6c:	000ee040 	call	ee04 <write>
    ab70:	00ffffc4 	movi	r3,-1
    ab74:	10c00526 	beq	r2,r3,ab8c <_write_r+0x50>
    ab78:	dfc00217 	ldw	ra,8(sp)
    ab7c:	dc400117 	ldw	r17,4(sp)
    ab80:	dc000017 	ldw	r16,0(sp)
    ab84:	dec00304 	addi	sp,sp,12
    ab88:	f800283a 	ret
    ab8c:	80c00017 	ldw	r3,0(r16)
    ab90:	183ff926 	beq	r3,zero,ab78 <__alt_data_end+0xff00ab78>
    ab94:	88c00015 	stw	r3,0(r17)
    ab98:	003ff706 	br	ab78 <__alt_data_end+0xff00ab78>

0000ab9c <_close_r>:
    ab9c:	defffd04 	addi	sp,sp,-12
    aba0:	dc000015 	stw	r16,0(sp)
    aba4:	04000074 	movhi	r16,1
    aba8:	dc400115 	stw	r17,4(sp)
    abac:	8413eb04 	addi	r16,r16,20396
    abb0:	2023883a 	mov	r17,r4
    abb4:	2809883a 	mov	r4,r5
    abb8:	dfc00215 	stw	ra,8(sp)
    abbc:	80000015 	stw	zero,0(r16)
    abc0:	000e5c40 	call	e5c4 <close>
    abc4:	00ffffc4 	movi	r3,-1
    abc8:	10c00526 	beq	r2,r3,abe0 <_close_r+0x44>
    abcc:	dfc00217 	ldw	ra,8(sp)
    abd0:	dc400117 	ldw	r17,4(sp)
    abd4:	dc000017 	ldw	r16,0(sp)
    abd8:	dec00304 	addi	sp,sp,12
    abdc:	f800283a 	ret
    abe0:	80c00017 	ldw	r3,0(r16)
    abe4:	183ff926 	beq	r3,zero,abcc <__alt_data_end+0xff00abcc>
    abe8:	88c00015 	stw	r3,0(r17)
    abec:	003ff706 	br	abcc <__alt_data_end+0xff00abcc>

0000abf0 <_calloc_r>:
    abf0:	298b383a 	mul	r5,r5,r6
    abf4:	defffe04 	addi	sp,sp,-8
    abf8:	dfc00115 	stw	ra,4(sp)
    abfc:	dc000015 	stw	r16,0(sp)
    ac00:	0001e1c0 	call	1e1c <_malloc_r>
    ac04:	10002926 	beq	r2,zero,acac <_calloc_r+0xbc>
    ac08:	11bfff17 	ldw	r6,-4(r2)
    ac0c:	1021883a 	mov	r16,r2
    ac10:	00bfff04 	movi	r2,-4
    ac14:	308c703a 	and	r6,r6,r2
    ac18:	00c00904 	movi	r3,36
    ac1c:	308d883a 	add	r6,r6,r2
    ac20:	19801636 	bltu	r3,r6,ac7c <_calloc_r+0x8c>
    ac24:	008004c4 	movi	r2,19
    ac28:	11800b2e 	bgeu	r2,r6,ac58 <_calloc_r+0x68>
    ac2c:	80000015 	stw	zero,0(r16)
    ac30:	80000115 	stw	zero,4(r16)
    ac34:	008006c4 	movi	r2,27
    ac38:	11801a2e 	bgeu	r2,r6,aca4 <_calloc_r+0xb4>
    ac3c:	80000215 	stw	zero,8(r16)
    ac40:	80000315 	stw	zero,12(r16)
    ac44:	30c0151e 	bne	r6,r3,ac9c <_calloc_r+0xac>
    ac48:	80000415 	stw	zero,16(r16)
    ac4c:	80800604 	addi	r2,r16,24
    ac50:	80000515 	stw	zero,20(r16)
    ac54:	00000106 	br	ac5c <_calloc_r+0x6c>
    ac58:	8005883a 	mov	r2,r16
    ac5c:	10000015 	stw	zero,0(r2)
    ac60:	10000115 	stw	zero,4(r2)
    ac64:	10000215 	stw	zero,8(r2)
    ac68:	8005883a 	mov	r2,r16
    ac6c:	dfc00117 	ldw	ra,4(sp)
    ac70:	dc000017 	ldw	r16,0(sp)
    ac74:	dec00204 	addi	sp,sp,8
    ac78:	f800283a 	ret
    ac7c:	000b883a 	mov	r5,zero
    ac80:	8009883a 	mov	r4,r16
    ac84:	0007be00 	call	7be0 <memset>
    ac88:	8005883a 	mov	r2,r16
    ac8c:	dfc00117 	ldw	ra,4(sp)
    ac90:	dc000017 	ldw	r16,0(sp)
    ac94:	dec00204 	addi	sp,sp,8
    ac98:	f800283a 	ret
    ac9c:	80800404 	addi	r2,r16,16
    aca0:	003fee06 	br	ac5c <__alt_data_end+0xff00ac5c>
    aca4:	80800204 	addi	r2,r16,8
    aca8:	003fec06 	br	ac5c <__alt_data_end+0xff00ac5c>
    acac:	0005883a 	mov	r2,zero
    acb0:	003fee06 	br	ac6c <__alt_data_end+0xff00ac6c>

0000acb4 <_fclose_r>:
    acb4:	28003926 	beq	r5,zero,ad9c <_fclose_r+0xe8>
    acb8:	defffc04 	addi	sp,sp,-16
    acbc:	dc400115 	stw	r17,4(sp)
    acc0:	dc000015 	stw	r16,0(sp)
    acc4:	dfc00315 	stw	ra,12(sp)
    acc8:	dc800215 	stw	r18,8(sp)
    accc:	2023883a 	mov	r17,r4
    acd0:	2821883a 	mov	r16,r5
    acd4:	20000226 	beq	r4,zero,ace0 <_fclose_r+0x2c>
    acd8:	20800e17 	ldw	r2,56(r4)
    acdc:	10002726 	beq	r2,zero,ad7c <_fclose_r+0xc8>
    ace0:	8080030f 	ldh	r2,12(r16)
    ace4:	1000071e 	bne	r2,zero,ad04 <_fclose_r+0x50>
    ace8:	0005883a 	mov	r2,zero
    acec:	dfc00317 	ldw	ra,12(sp)
    acf0:	dc800217 	ldw	r18,8(sp)
    acf4:	dc400117 	ldw	r17,4(sp)
    acf8:	dc000017 	ldw	r16,0(sp)
    acfc:	dec00404 	addi	sp,sp,16
    ad00:	f800283a 	ret
    ad04:	800b883a 	mov	r5,r16
    ad08:	8809883a 	mov	r4,r17
    ad0c:	00065000 	call	6500 <__sflush_r>
    ad10:	1025883a 	mov	r18,r2
    ad14:	80800b17 	ldw	r2,44(r16)
    ad18:	10000426 	beq	r2,zero,ad2c <_fclose_r+0x78>
    ad1c:	81400717 	ldw	r5,28(r16)
    ad20:	8809883a 	mov	r4,r17
    ad24:	103ee83a 	callr	r2
    ad28:	10001616 	blt	r2,zero,ad84 <_fclose_r+0xd0>
    ad2c:	8080030b 	ldhu	r2,12(r16)
    ad30:	1080200c 	andi	r2,r2,128
    ad34:	1000151e 	bne	r2,zero,ad8c <_fclose_r+0xd8>
    ad38:	81400c17 	ldw	r5,48(r16)
    ad3c:	28000526 	beq	r5,zero,ad54 <_fclose_r+0xa0>
    ad40:	80801004 	addi	r2,r16,64
    ad44:	28800226 	beq	r5,r2,ad50 <_fclose_r+0x9c>
    ad48:	8809883a 	mov	r4,r17
    ad4c:	0006c6c0 	call	6c6c <_free_r>
    ad50:	80000c15 	stw	zero,48(r16)
    ad54:	81401117 	ldw	r5,68(r16)
    ad58:	28000326 	beq	r5,zero,ad68 <_fclose_r+0xb4>
    ad5c:	8809883a 	mov	r4,r17
    ad60:	0006c6c0 	call	6c6c <_free_r>
    ad64:	80001115 	stw	zero,68(r16)
    ad68:	0006b080 	call	6b08 <__sfp_lock_acquire>
    ad6c:	8000030d 	sth	zero,12(r16)
    ad70:	0006b0c0 	call	6b0c <__sfp_lock_release>
    ad74:	9005883a 	mov	r2,r18
    ad78:	003fdc06 	br	acec <__alt_data_end+0xff00acec>
    ad7c:	0006af80 	call	6af8 <__sinit>
    ad80:	003fd706 	br	ace0 <__alt_data_end+0xff00ace0>
    ad84:	04bfffc4 	movi	r18,-1
    ad88:	003fe806 	br	ad2c <__alt_data_end+0xff00ad2c>
    ad8c:	81400417 	ldw	r5,16(r16)
    ad90:	8809883a 	mov	r4,r17
    ad94:	0006c6c0 	call	6c6c <_free_r>
    ad98:	003fe706 	br	ad38 <__alt_data_end+0xff00ad38>
    ad9c:	0005883a 	mov	r2,zero
    ada0:	f800283a 	ret

0000ada4 <fclose>:
    ada4:	00800074 	movhi	r2,1
    ada8:	108cd604 	addi	r2,r2,13144
    adac:	200b883a 	mov	r5,r4
    adb0:	11000017 	ldw	r4,0(r2)
    adb4:	000acb41 	jmpi	acb4 <_fclose_r>

0000adb8 <__fputwc>:
    adb8:	defff804 	addi	sp,sp,-32
    adbc:	dcc00415 	stw	r19,16(sp)
    adc0:	dc800315 	stw	r18,12(sp)
    adc4:	dc000115 	stw	r16,4(sp)
    adc8:	dfc00715 	stw	ra,28(sp)
    adcc:	dd400615 	stw	r21,24(sp)
    add0:	dd000515 	stw	r20,20(sp)
    add4:	dc400215 	stw	r17,8(sp)
    add8:	2027883a 	mov	r19,r4
    addc:	2825883a 	mov	r18,r5
    ade0:	3021883a 	mov	r16,r6
    ade4:	00076480 	call	7648 <__locale_mb_cur_max>
    ade8:	00c00044 	movi	r3,1
    adec:	10c03e26 	beq	r2,r3,aee8 <__fputwc+0x130>
    adf0:	81c01704 	addi	r7,r16,92
    adf4:	900d883a 	mov	r6,r18
    adf8:	d80b883a 	mov	r5,sp
    adfc:	9809883a 	mov	r4,r19
    ae00:	000b2880 	call	b288 <_wcrtomb_r>
    ae04:	1029883a 	mov	r20,r2
    ae08:	00bfffc4 	movi	r2,-1
    ae0c:	a0802026 	beq	r20,r2,ae90 <__fputwc+0xd8>
    ae10:	d9400003 	ldbu	r5,0(sp)
    ae14:	a0001c26 	beq	r20,zero,ae88 <__fputwc+0xd0>
    ae18:	0023883a 	mov	r17,zero
    ae1c:	05400284 	movi	r21,10
    ae20:	00000906 	br	ae48 <__fputwc+0x90>
    ae24:	80800017 	ldw	r2,0(r16)
    ae28:	11400005 	stb	r5,0(r2)
    ae2c:	80c00017 	ldw	r3,0(r16)
    ae30:	18c00044 	addi	r3,r3,1
    ae34:	80c00015 	stw	r3,0(r16)
    ae38:	8c400044 	addi	r17,r17,1
    ae3c:	dc45883a 	add	r2,sp,r17
    ae40:	8d00112e 	bgeu	r17,r20,ae88 <__fputwc+0xd0>
    ae44:	11400003 	ldbu	r5,0(r2)
    ae48:	80c00217 	ldw	r3,8(r16)
    ae4c:	18ffffc4 	addi	r3,r3,-1
    ae50:	80c00215 	stw	r3,8(r16)
    ae54:	183ff30e 	bge	r3,zero,ae24 <__alt_data_end+0xff00ae24>
    ae58:	80800617 	ldw	r2,24(r16)
    ae5c:	18801916 	blt	r3,r2,aec4 <__fputwc+0x10c>
    ae60:	80800017 	ldw	r2,0(r16)
    ae64:	11400005 	stb	r5,0(r2)
    ae68:	80800017 	ldw	r2,0(r16)
    ae6c:	10c00003 	ldbu	r3,0(r2)
    ae70:	10800044 	addi	r2,r2,1
    ae74:	1d402326 	beq	r3,r21,af04 <__fputwc+0x14c>
    ae78:	80800015 	stw	r2,0(r16)
    ae7c:	8c400044 	addi	r17,r17,1
    ae80:	dc45883a 	add	r2,sp,r17
    ae84:	8d3fef36 	bltu	r17,r20,ae44 <__alt_data_end+0xff00ae44>
    ae88:	9005883a 	mov	r2,r18
    ae8c:	00000406 	br	aea0 <__fputwc+0xe8>
    ae90:	80c0030b 	ldhu	r3,12(r16)
    ae94:	a005883a 	mov	r2,r20
    ae98:	18c01014 	ori	r3,r3,64
    ae9c:	80c0030d 	sth	r3,12(r16)
    aea0:	dfc00717 	ldw	ra,28(sp)
    aea4:	dd400617 	ldw	r21,24(sp)
    aea8:	dd000517 	ldw	r20,20(sp)
    aeac:	dcc00417 	ldw	r19,16(sp)
    aeb0:	dc800317 	ldw	r18,12(sp)
    aeb4:	dc400217 	ldw	r17,8(sp)
    aeb8:	dc000117 	ldw	r16,4(sp)
    aebc:	dec00804 	addi	sp,sp,32
    aec0:	f800283a 	ret
    aec4:	800d883a 	mov	r6,r16
    aec8:	29403fcc 	andi	r5,r5,255
    aecc:	9809883a 	mov	r4,r19
    aed0:	000b1300 	call	b130 <__swbuf_r>
    aed4:	10bfffe0 	cmpeqi	r2,r2,-1
    aed8:	10803fcc 	andi	r2,r2,255
    aedc:	103fd626 	beq	r2,zero,ae38 <__alt_data_end+0xff00ae38>
    aee0:	00bfffc4 	movi	r2,-1
    aee4:	003fee06 	br	aea0 <__alt_data_end+0xff00aea0>
    aee8:	90ffffc4 	addi	r3,r18,-1
    aeec:	01003f84 	movi	r4,254
    aef0:	20ffbf36 	bltu	r4,r3,adf0 <__alt_data_end+0xff00adf0>
    aef4:	900b883a 	mov	r5,r18
    aef8:	dc800005 	stb	r18,0(sp)
    aefc:	1029883a 	mov	r20,r2
    af00:	003fc506 	br	ae18 <__alt_data_end+0xff00ae18>
    af04:	800d883a 	mov	r6,r16
    af08:	a80b883a 	mov	r5,r21
    af0c:	9809883a 	mov	r4,r19
    af10:	000b1300 	call	b130 <__swbuf_r>
    af14:	10bfffe0 	cmpeqi	r2,r2,-1
    af18:	003fef06 	br	aed8 <__alt_data_end+0xff00aed8>

0000af1c <_fputwc_r>:
    af1c:	3080030b 	ldhu	r2,12(r6)
    af20:	10c8000c 	andi	r3,r2,8192
    af24:	1800051e 	bne	r3,zero,af3c <_fputwc_r+0x20>
    af28:	30c01917 	ldw	r3,100(r6)
    af2c:	10880014 	ori	r2,r2,8192
    af30:	3080030d 	sth	r2,12(r6)
    af34:	18880014 	ori	r2,r3,8192
    af38:	30801915 	stw	r2,100(r6)
    af3c:	000adb81 	jmpi	adb8 <__fputwc>

0000af40 <fputwc>:
    af40:	00800074 	movhi	r2,1
    af44:	defffc04 	addi	sp,sp,-16
    af48:	108cd604 	addi	r2,r2,13144
    af4c:	dc000115 	stw	r16,4(sp)
    af50:	14000017 	ldw	r16,0(r2)
    af54:	dc400215 	stw	r17,8(sp)
    af58:	dfc00315 	stw	ra,12(sp)
    af5c:	2023883a 	mov	r17,r4
    af60:	80000226 	beq	r16,zero,af6c <fputwc+0x2c>
    af64:	80800e17 	ldw	r2,56(r16)
    af68:	10001026 	beq	r2,zero,afac <fputwc+0x6c>
    af6c:	2880030b 	ldhu	r2,12(r5)
    af70:	10c8000c 	andi	r3,r2,8192
    af74:	1800051e 	bne	r3,zero,af8c <fputwc+0x4c>
    af78:	28c01917 	ldw	r3,100(r5)
    af7c:	10880014 	ori	r2,r2,8192
    af80:	2880030d 	sth	r2,12(r5)
    af84:	18880014 	ori	r2,r3,8192
    af88:	28801915 	stw	r2,100(r5)
    af8c:	280d883a 	mov	r6,r5
    af90:	8009883a 	mov	r4,r16
    af94:	880b883a 	mov	r5,r17
    af98:	dfc00317 	ldw	ra,12(sp)
    af9c:	dc400217 	ldw	r17,8(sp)
    afa0:	dc000117 	ldw	r16,4(sp)
    afa4:	dec00404 	addi	sp,sp,16
    afa8:	000adb81 	jmpi	adb8 <__fputwc>
    afac:	8009883a 	mov	r4,r16
    afb0:	d9400015 	stw	r5,0(sp)
    afb4:	0006af80 	call	6af8 <__sinit>
    afb8:	d9400017 	ldw	r5,0(sp)
    afbc:	003feb06 	br	af6c <__alt_data_end+0xff00af6c>

0000afc0 <_fstat_r>:
    afc0:	defffd04 	addi	sp,sp,-12
    afc4:	2805883a 	mov	r2,r5
    afc8:	dc000015 	stw	r16,0(sp)
    afcc:	04000074 	movhi	r16,1
    afd0:	dc400115 	stw	r17,4(sp)
    afd4:	8413eb04 	addi	r16,r16,20396
    afd8:	2023883a 	mov	r17,r4
    afdc:	300b883a 	mov	r5,r6
    afe0:	1009883a 	mov	r4,r2
    afe4:	dfc00215 	stw	ra,8(sp)
    afe8:	80000015 	stw	zero,0(r16)
    afec:	000e6fc0 	call	e6fc <fstat>
    aff0:	00ffffc4 	movi	r3,-1
    aff4:	10c00526 	beq	r2,r3,b00c <_fstat_r+0x4c>
    aff8:	dfc00217 	ldw	ra,8(sp)
    affc:	dc400117 	ldw	r17,4(sp)
    b000:	dc000017 	ldw	r16,0(sp)
    b004:	dec00304 	addi	sp,sp,12
    b008:	f800283a 	ret
    b00c:	80c00017 	ldw	r3,0(r16)
    b010:	183ff926 	beq	r3,zero,aff8 <__alt_data_end+0xff00aff8>
    b014:	88c00015 	stw	r3,0(r17)
    b018:	003ff706 	br	aff8 <__alt_data_end+0xff00aff8>

0000b01c <_isatty_r>:
    b01c:	defffd04 	addi	sp,sp,-12
    b020:	dc000015 	stw	r16,0(sp)
    b024:	04000074 	movhi	r16,1
    b028:	dc400115 	stw	r17,4(sp)
    b02c:	8413eb04 	addi	r16,r16,20396
    b030:	2023883a 	mov	r17,r4
    b034:	2809883a 	mov	r4,r5
    b038:	dfc00215 	stw	ra,8(sp)
    b03c:	80000015 	stw	zero,0(r16)
    b040:	000e7e80 	call	e7e8 <isatty>
    b044:	00ffffc4 	movi	r3,-1
    b048:	10c00526 	beq	r2,r3,b060 <_isatty_r+0x44>
    b04c:	dfc00217 	ldw	ra,8(sp)
    b050:	dc400117 	ldw	r17,4(sp)
    b054:	dc000017 	ldw	r16,0(sp)
    b058:	dec00304 	addi	sp,sp,12
    b05c:	f800283a 	ret
    b060:	80c00017 	ldw	r3,0(r16)
    b064:	183ff926 	beq	r3,zero,b04c <__alt_data_end+0xff00b04c>
    b068:	88c00015 	stw	r3,0(r17)
    b06c:	003ff706 	br	b04c <__alt_data_end+0xff00b04c>

0000b070 <_lseek_r>:
    b070:	defffd04 	addi	sp,sp,-12
    b074:	2805883a 	mov	r2,r5
    b078:	dc000015 	stw	r16,0(sp)
    b07c:	04000074 	movhi	r16,1
    b080:	dc400115 	stw	r17,4(sp)
    b084:	300b883a 	mov	r5,r6
    b088:	8413eb04 	addi	r16,r16,20396
    b08c:	2023883a 	mov	r17,r4
    b090:	380d883a 	mov	r6,r7
    b094:	1009883a 	mov	r4,r2
    b098:	dfc00215 	stw	ra,8(sp)
    b09c:	80000015 	stw	zero,0(r16)
    b0a0:	000e9b40 	call	e9b4 <lseek>
    b0a4:	00ffffc4 	movi	r3,-1
    b0a8:	10c00526 	beq	r2,r3,b0c0 <_lseek_r+0x50>
    b0ac:	dfc00217 	ldw	ra,8(sp)
    b0b0:	dc400117 	ldw	r17,4(sp)
    b0b4:	dc000017 	ldw	r16,0(sp)
    b0b8:	dec00304 	addi	sp,sp,12
    b0bc:	f800283a 	ret
    b0c0:	80c00017 	ldw	r3,0(r16)
    b0c4:	183ff926 	beq	r3,zero,b0ac <__alt_data_end+0xff00b0ac>
    b0c8:	88c00015 	stw	r3,0(r17)
    b0cc:	003ff706 	br	b0ac <__alt_data_end+0xff00b0ac>

0000b0d0 <_read_r>:
    b0d0:	defffd04 	addi	sp,sp,-12
    b0d4:	2805883a 	mov	r2,r5
    b0d8:	dc000015 	stw	r16,0(sp)
    b0dc:	04000074 	movhi	r16,1
    b0e0:	dc400115 	stw	r17,4(sp)
    b0e4:	300b883a 	mov	r5,r6
    b0e8:	8413eb04 	addi	r16,r16,20396
    b0ec:	2023883a 	mov	r17,r4
    b0f0:	380d883a 	mov	r6,r7
    b0f4:	1009883a 	mov	r4,r2
    b0f8:	dfc00215 	stw	ra,8(sp)
    b0fc:	80000015 	stw	zero,0(r16)
    b100:	000eb880 	call	eb88 <read>
    b104:	00ffffc4 	movi	r3,-1
    b108:	10c00526 	beq	r2,r3,b120 <_read_r+0x50>
    b10c:	dfc00217 	ldw	ra,8(sp)
    b110:	dc400117 	ldw	r17,4(sp)
    b114:	dc000017 	ldw	r16,0(sp)
    b118:	dec00304 	addi	sp,sp,12
    b11c:	f800283a 	ret
    b120:	80c00017 	ldw	r3,0(r16)
    b124:	183ff926 	beq	r3,zero,b10c <__alt_data_end+0xff00b10c>
    b128:	88c00015 	stw	r3,0(r17)
    b12c:	003ff706 	br	b10c <__alt_data_end+0xff00b10c>

0000b130 <__swbuf_r>:
    b130:	defffb04 	addi	sp,sp,-20
    b134:	dcc00315 	stw	r19,12(sp)
    b138:	dc800215 	stw	r18,8(sp)
    b13c:	dc000015 	stw	r16,0(sp)
    b140:	dfc00415 	stw	ra,16(sp)
    b144:	dc400115 	stw	r17,4(sp)
    b148:	2025883a 	mov	r18,r4
    b14c:	2827883a 	mov	r19,r5
    b150:	3021883a 	mov	r16,r6
    b154:	20000226 	beq	r4,zero,b160 <__swbuf_r+0x30>
    b158:	20800e17 	ldw	r2,56(r4)
    b15c:	10004226 	beq	r2,zero,b268 <__swbuf_r+0x138>
    b160:	80800617 	ldw	r2,24(r16)
    b164:	8100030b 	ldhu	r4,12(r16)
    b168:	80800215 	stw	r2,8(r16)
    b16c:	2080020c 	andi	r2,r4,8
    b170:	10003626 	beq	r2,zero,b24c <__swbuf_r+0x11c>
    b174:	80c00417 	ldw	r3,16(r16)
    b178:	18003426 	beq	r3,zero,b24c <__swbuf_r+0x11c>
    b17c:	2088000c 	andi	r2,r4,8192
    b180:	9c403fcc 	andi	r17,r19,255
    b184:	10001a26 	beq	r2,zero,b1f0 <__swbuf_r+0xc0>
    b188:	80800017 	ldw	r2,0(r16)
    b18c:	81000517 	ldw	r4,20(r16)
    b190:	10c7c83a 	sub	r3,r2,r3
    b194:	1900200e 	bge	r3,r4,b218 <__swbuf_r+0xe8>
    b198:	18c00044 	addi	r3,r3,1
    b19c:	81000217 	ldw	r4,8(r16)
    b1a0:	11400044 	addi	r5,r2,1
    b1a4:	81400015 	stw	r5,0(r16)
    b1a8:	213fffc4 	addi	r4,r4,-1
    b1ac:	81000215 	stw	r4,8(r16)
    b1b0:	14c00005 	stb	r19,0(r2)
    b1b4:	80800517 	ldw	r2,20(r16)
    b1b8:	10c01e26 	beq	r2,r3,b234 <__swbuf_r+0x104>
    b1bc:	8080030b 	ldhu	r2,12(r16)
    b1c0:	1080004c 	andi	r2,r2,1
    b1c4:	10000226 	beq	r2,zero,b1d0 <__swbuf_r+0xa0>
    b1c8:	00800284 	movi	r2,10
    b1cc:	88801926 	beq	r17,r2,b234 <__swbuf_r+0x104>
    b1d0:	8805883a 	mov	r2,r17
    b1d4:	dfc00417 	ldw	ra,16(sp)
    b1d8:	dcc00317 	ldw	r19,12(sp)
    b1dc:	dc800217 	ldw	r18,8(sp)
    b1e0:	dc400117 	ldw	r17,4(sp)
    b1e4:	dc000017 	ldw	r16,0(sp)
    b1e8:	dec00504 	addi	sp,sp,20
    b1ec:	f800283a 	ret
    b1f0:	81401917 	ldw	r5,100(r16)
    b1f4:	00b7ffc4 	movi	r2,-8193
    b1f8:	21080014 	ori	r4,r4,8192
    b1fc:	2884703a 	and	r2,r5,r2
    b200:	80801915 	stw	r2,100(r16)
    b204:	80800017 	ldw	r2,0(r16)
    b208:	8100030d 	sth	r4,12(r16)
    b20c:	81000517 	ldw	r4,20(r16)
    b210:	10c7c83a 	sub	r3,r2,r3
    b214:	193fe016 	blt	r3,r4,b198 <__alt_data_end+0xff00b198>
    b218:	800b883a 	mov	r5,r16
    b21c:	9009883a 	mov	r4,r18
    b220:	000671c0 	call	671c <_fflush_r>
    b224:	1000071e 	bne	r2,zero,b244 <__swbuf_r+0x114>
    b228:	80800017 	ldw	r2,0(r16)
    b22c:	00c00044 	movi	r3,1
    b230:	003fda06 	br	b19c <__alt_data_end+0xff00b19c>
    b234:	800b883a 	mov	r5,r16
    b238:	9009883a 	mov	r4,r18
    b23c:	000671c0 	call	671c <_fflush_r>
    b240:	103fe326 	beq	r2,zero,b1d0 <__alt_data_end+0xff00b1d0>
    b244:	00bfffc4 	movi	r2,-1
    b248:	003fe206 	br	b1d4 <__alt_data_end+0xff00b1d4>
    b24c:	800b883a 	mov	r5,r16
    b250:	9009883a 	mov	r4,r18
    b254:	0004b240 	call	4b24 <__swsetup_r>
    b258:	103ffa1e 	bne	r2,zero,b244 <__alt_data_end+0xff00b244>
    b25c:	8100030b 	ldhu	r4,12(r16)
    b260:	80c00417 	ldw	r3,16(r16)
    b264:	003fc506 	br	b17c <__alt_data_end+0xff00b17c>
    b268:	0006af80 	call	6af8 <__sinit>
    b26c:	003fbc06 	br	b160 <__alt_data_end+0xff00b160>

0000b270 <__swbuf>:
    b270:	00800074 	movhi	r2,1
    b274:	108cd604 	addi	r2,r2,13144
    b278:	280d883a 	mov	r6,r5
    b27c:	200b883a 	mov	r5,r4
    b280:	11000017 	ldw	r4,0(r2)
    b284:	000b1301 	jmpi	b130 <__swbuf_r>

0000b288 <_wcrtomb_r>:
    b288:	defff604 	addi	sp,sp,-40
    b28c:	00800074 	movhi	r2,1
    b290:	dc800815 	stw	r18,32(sp)
    b294:	dc400715 	stw	r17,28(sp)
    b298:	dc000615 	stw	r16,24(sp)
    b29c:	108cd804 	addi	r2,r2,13152
    b2a0:	dfc00915 	stw	ra,36(sp)
    b2a4:	2021883a 	mov	r16,r4
    b2a8:	3823883a 	mov	r17,r7
    b2ac:	14800017 	ldw	r18,0(r2)
    b2b0:	28001426 	beq	r5,zero,b304 <_wcrtomb_r+0x7c>
    b2b4:	d9400415 	stw	r5,16(sp)
    b2b8:	d9800515 	stw	r6,20(sp)
    b2bc:	000763c0 	call	763c <__locale_charset>
    b2c0:	d9800517 	ldw	r6,20(sp)
    b2c4:	d9400417 	ldw	r5,16(sp)
    b2c8:	100f883a 	mov	r7,r2
    b2cc:	dc400015 	stw	r17,0(sp)
    b2d0:	8009883a 	mov	r4,r16
    b2d4:	903ee83a 	callr	r18
    b2d8:	00ffffc4 	movi	r3,-1
    b2dc:	10c0031e 	bne	r2,r3,b2ec <_wcrtomb_r+0x64>
    b2e0:	88000015 	stw	zero,0(r17)
    b2e4:	00c02284 	movi	r3,138
    b2e8:	80c00015 	stw	r3,0(r16)
    b2ec:	dfc00917 	ldw	ra,36(sp)
    b2f0:	dc800817 	ldw	r18,32(sp)
    b2f4:	dc400717 	ldw	r17,28(sp)
    b2f8:	dc000617 	ldw	r16,24(sp)
    b2fc:	dec00a04 	addi	sp,sp,40
    b300:	f800283a 	ret
    b304:	000763c0 	call	763c <__locale_charset>
    b308:	100f883a 	mov	r7,r2
    b30c:	dc400015 	stw	r17,0(sp)
    b310:	000d883a 	mov	r6,zero
    b314:	d9400104 	addi	r5,sp,4
    b318:	8009883a 	mov	r4,r16
    b31c:	903ee83a 	callr	r18
    b320:	003fed06 	br	b2d8 <__alt_data_end+0xff00b2d8>

0000b324 <wcrtomb>:
    b324:	defff604 	addi	sp,sp,-40
    b328:	00800074 	movhi	r2,1
    b32c:	dc800615 	stw	r18,24(sp)
    b330:	dc400515 	stw	r17,20(sp)
    b334:	108cd604 	addi	r2,r2,13144
    b338:	dfc00915 	stw	ra,36(sp)
    b33c:	dd000815 	stw	r20,32(sp)
    b340:	dcc00715 	stw	r19,28(sp)
    b344:	dc000415 	stw	r16,16(sp)
    b348:	3025883a 	mov	r18,r6
    b34c:	14400017 	ldw	r17,0(r2)
    b350:	20001926 	beq	r4,zero,b3b8 <wcrtomb+0x94>
    b354:	00800074 	movhi	r2,1
    b358:	108cd804 	addi	r2,r2,13152
    b35c:	15000017 	ldw	r20,0(r2)
    b360:	2021883a 	mov	r16,r4
    b364:	2827883a 	mov	r19,r5
    b368:	000763c0 	call	763c <__locale_charset>
    b36c:	100f883a 	mov	r7,r2
    b370:	dc800015 	stw	r18,0(sp)
    b374:	980d883a 	mov	r6,r19
    b378:	800b883a 	mov	r5,r16
    b37c:	8809883a 	mov	r4,r17
    b380:	a03ee83a 	callr	r20
    b384:	00ffffc4 	movi	r3,-1
    b388:	10c0031e 	bne	r2,r3,b398 <wcrtomb+0x74>
    b38c:	90000015 	stw	zero,0(r18)
    b390:	00c02284 	movi	r3,138
    b394:	88c00015 	stw	r3,0(r17)
    b398:	dfc00917 	ldw	ra,36(sp)
    b39c:	dd000817 	ldw	r20,32(sp)
    b3a0:	dcc00717 	ldw	r19,28(sp)
    b3a4:	dc800617 	ldw	r18,24(sp)
    b3a8:	dc400517 	ldw	r17,20(sp)
    b3ac:	dc000417 	ldw	r16,16(sp)
    b3b0:	dec00a04 	addi	sp,sp,40
    b3b4:	f800283a 	ret
    b3b8:	00800074 	movhi	r2,1
    b3bc:	108cd804 	addi	r2,r2,13152
    b3c0:	14000017 	ldw	r16,0(r2)
    b3c4:	000763c0 	call	763c <__locale_charset>
    b3c8:	100f883a 	mov	r7,r2
    b3cc:	dc800015 	stw	r18,0(sp)
    b3d0:	000d883a 	mov	r6,zero
    b3d4:	d9400104 	addi	r5,sp,4
    b3d8:	8809883a 	mov	r4,r17
    b3dc:	803ee83a 	callr	r16
    b3e0:	003fe806 	br	b384 <__alt_data_end+0xff00b384>

0000b3e4 <__ascii_wctomb>:
    b3e4:	28000526 	beq	r5,zero,b3fc <__ascii_wctomb+0x18>
    b3e8:	00803fc4 	movi	r2,255
    b3ec:	11800536 	bltu	r2,r6,b404 <__ascii_wctomb+0x20>
    b3f0:	29800005 	stb	r6,0(r5)
    b3f4:	00800044 	movi	r2,1
    b3f8:	f800283a 	ret
    b3fc:	0005883a 	mov	r2,zero
    b400:	f800283a 	ret
    b404:	00802284 	movi	r2,138
    b408:	20800015 	stw	r2,0(r4)
    b40c:	00bfffc4 	movi	r2,-1
    b410:	f800283a 	ret

0000b414 <_wctomb_r>:
    b414:	00800074 	movhi	r2,1
    b418:	defff904 	addi	sp,sp,-28
    b41c:	108cd804 	addi	r2,r2,13152
    b420:	dfc00615 	stw	ra,24(sp)
    b424:	dc400515 	stw	r17,20(sp)
    b428:	dc000415 	stw	r16,16(sp)
    b42c:	3823883a 	mov	r17,r7
    b430:	14000017 	ldw	r16,0(r2)
    b434:	d9000115 	stw	r4,4(sp)
    b438:	d9400215 	stw	r5,8(sp)
    b43c:	d9800315 	stw	r6,12(sp)
    b440:	000763c0 	call	763c <__locale_charset>
    b444:	d9800317 	ldw	r6,12(sp)
    b448:	d9400217 	ldw	r5,8(sp)
    b44c:	d9000117 	ldw	r4,4(sp)
    b450:	100f883a 	mov	r7,r2
    b454:	dc400015 	stw	r17,0(sp)
    b458:	803ee83a 	callr	r16
    b45c:	dfc00617 	ldw	ra,24(sp)
    b460:	dc400517 	ldw	r17,20(sp)
    b464:	dc000417 	ldw	r16,16(sp)
    b468:	dec00704 	addi	sp,sp,28
    b46c:	f800283a 	ret

0000b470 <__udivdi3>:
    b470:	defff504 	addi	sp,sp,-44
    b474:	dcc00415 	stw	r19,16(sp)
    b478:	dc000115 	stw	r16,4(sp)
    b47c:	dfc00a15 	stw	ra,40(sp)
    b480:	df000915 	stw	fp,36(sp)
    b484:	ddc00815 	stw	r23,32(sp)
    b488:	dd800715 	stw	r22,28(sp)
    b48c:	dd400615 	stw	r21,24(sp)
    b490:	dd000515 	stw	r20,20(sp)
    b494:	dc800315 	stw	r18,12(sp)
    b498:	dc400215 	stw	r17,8(sp)
    b49c:	2027883a 	mov	r19,r4
    b4a0:	2821883a 	mov	r16,r5
    b4a4:	3800411e 	bne	r7,zero,b5ac <__udivdi3+0x13c>
    b4a8:	3023883a 	mov	r17,r6
    b4ac:	2025883a 	mov	r18,r4
    b4b0:	2980522e 	bgeu	r5,r6,b5fc <__udivdi3+0x18c>
    b4b4:	00bfffd4 	movui	r2,65535
    b4b8:	282d883a 	mov	r22,r5
    b4bc:	1180a836 	bltu	r2,r6,b760 <__udivdi3+0x2f0>
    b4c0:	00803fc4 	movi	r2,255
    b4c4:	1185803a 	cmpltu	r2,r2,r6
    b4c8:	100490fa 	slli	r2,r2,3
    b4cc:	3086d83a 	srl	r3,r6,r2
    b4d0:	01000074 	movhi	r4,1
    b4d4:	21059d04 	addi	r4,r4,5748
    b4d8:	20c7883a 	add	r3,r4,r3
    b4dc:	18c00003 	ldbu	r3,0(r3)
    b4e0:	1885883a 	add	r2,r3,r2
    b4e4:	00c00804 	movi	r3,32
    b4e8:	1887c83a 	sub	r3,r3,r2
    b4ec:	18000526 	beq	r3,zero,b504 <__udivdi3+0x94>
    b4f0:	80e0983a 	sll	r16,r16,r3
    b4f4:	9884d83a 	srl	r2,r19,r2
    b4f8:	30e2983a 	sll	r17,r6,r3
    b4fc:	98e4983a 	sll	r18,r19,r3
    b500:	142cb03a 	or	r22,r2,r16
    b504:	882ad43a 	srli	r21,r17,16
    b508:	b009883a 	mov	r4,r22
    b50c:	8d3fffcc 	andi	r20,r17,65535
    b510:	a80b883a 	mov	r5,r21
    b514:	0001d9c0 	call	1d9c <__umodsi3>
    b518:	b009883a 	mov	r4,r22
    b51c:	a80b883a 	mov	r5,r21
    b520:	1027883a 	mov	r19,r2
    b524:	0001d380 	call	1d38 <__udivsi3>
    b528:	102d883a 	mov	r22,r2
    b52c:	9826943a 	slli	r19,r19,16
    b530:	9004d43a 	srli	r2,r18,16
    b534:	a5a1383a 	mul	r16,r20,r22
    b538:	14c4b03a 	or	r2,r2,r19
    b53c:	1400052e 	bgeu	r2,r16,b554 <__udivdi3+0xe4>
    b540:	1445883a 	add	r2,r2,r17
    b544:	b0ffffc4 	addi	r3,r22,-1
    b548:	14400136 	bltu	r2,r17,b550 <__udivdi3+0xe0>
    b54c:	14012336 	bltu	r2,r16,b9dc <__udivdi3+0x56c>
    b550:	182d883a 	mov	r22,r3
    b554:	1421c83a 	sub	r16,r2,r16
    b558:	a80b883a 	mov	r5,r21
    b55c:	8009883a 	mov	r4,r16
    b560:	0001d9c0 	call	1d9c <__umodsi3>
    b564:	1027883a 	mov	r19,r2
    b568:	a80b883a 	mov	r5,r21
    b56c:	8009883a 	mov	r4,r16
    b570:	0001d380 	call	1d38 <__udivsi3>
    b574:	9826943a 	slli	r19,r19,16
    b578:	a0a9383a 	mul	r20,r20,r2
    b57c:	94bfffcc 	andi	r18,r18,65535
    b580:	94e4b03a 	or	r18,r18,r19
    b584:	9500052e 	bgeu	r18,r20,b59c <__udivdi3+0x12c>
    b588:	8ca5883a 	add	r18,r17,r18
    b58c:	10ffffc4 	addi	r3,r2,-1
    b590:	9440f136 	bltu	r18,r17,b958 <__udivdi3+0x4e8>
    b594:	9500f02e 	bgeu	r18,r20,b958 <__udivdi3+0x4e8>
    b598:	10bfff84 	addi	r2,r2,-2
    b59c:	b00c943a 	slli	r6,r22,16
    b5a0:	0007883a 	mov	r3,zero
    b5a4:	3084b03a 	or	r2,r6,r2
    b5a8:	00005906 	br	b710 <__udivdi3+0x2a0>
    b5ac:	29c05636 	bltu	r5,r7,b708 <__udivdi3+0x298>
    b5b0:	00bfffd4 	movui	r2,65535
    b5b4:	11c0622e 	bgeu	r2,r7,b740 <__udivdi3+0x2d0>
    b5b8:	00804034 	movhi	r2,256
    b5bc:	10bfffc4 	addi	r2,r2,-1
    b5c0:	11c0ee36 	bltu	r2,r7,b97c <__udivdi3+0x50c>
    b5c4:	00800404 	movi	r2,16
    b5c8:	3886d83a 	srl	r3,r7,r2
    b5cc:	01000074 	movhi	r4,1
    b5d0:	21059d04 	addi	r4,r4,5748
    b5d4:	20c7883a 	add	r3,r4,r3
    b5d8:	18c00003 	ldbu	r3,0(r3)
    b5dc:	05400804 	movi	r21,32
    b5e0:	1885883a 	add	r2,r3,r2
    b5e4:	a8abc83a 	sub	r21,r21,r2
    b5e8:	a800621e 	bne	r21,zero,b774 <__udivdi3+0x304>
    b5ec:	3c00e936 	bltu	r7,r16,b994 <__udivdi3+0x524>
    b5f0:	9985403a 	cmpgeu	r2,r19,r6
    b5f4:	0007883a 	mov	r3,zero
    b5f8:	00004506 	br	b710 <__udivdi3+0x2a0>
    b5fc:	3000041e 	bne	r6,zero,b610 <__udivdi3+0x1a0>
    b600:	000b883a 	mov	r5,zero
    b604:	01000044 	movi	r4,1
    b608:	0001d380 	call	1d38 <__udivsi3>
    b60c:	1023883a 	mov	r17,r2
    b610:	00bfffd4 	movui	r2,65535
    b614:	14404e2e 	bgeu	r2,r17,b750 <__udivdi3+0x2e0>
    b618:	00804034 	movhi	r2,256
    b61c:	10bfffc4 	addi	r2,r2,-1
    b620:	1440d836 	bltu	r2,r17,b984 <__udivdi3+0x514>
    b624:	00800404 	movi	r2,16
    b628:	8886d83a 	srl	r3,r17,r2
    b62c:	01000074 	movhi	r4,1
    b630:	21059d04 	addi	r4,r4,5748
    b634:	20c7883a 	add	r3,r4,r3
    b638:	18c00003 	ldbu	r3,0(r3)
    b63c:	1885883a 	add	r2,r3,r2
    b640:	00c00804 	movi	r3,32
    b644:	1887c83a 	sub	r3,r3,r2
    b648:	18008f1e 	bne	r3,zero,b888 <__udivdi3+0x418>
    b64c:	882ad43a 	srli	r21,r17,16
    b650:	8461c83a 	sub	r16,r16,r17
    b654:	8d3fffcc 	andi	r20,r17,65535
    b658:	00c00044 	movi	r3,1
    b65c:	8009883a 	mov	r4,r16
    b660:	a80b883a 	mov	r5,r21
    b664:	d8c00015 	stw	r3,0(sp)
    b668:	0001d9c0 	call	1d9c <__umodsi3>
    b66c:	8009883a 	mov	r4,r16
    b670:	a80b883a 	mov	r5,r21
    b674:	1027883a 	mov	r19,r2
    b678:	0001d380 	call	1d38 <__udivsi3>
    b67c:	9826943a 	slli	r19,r19,16
    b680:	9008d43a 	srli	r4,r18,16
    b684:	1521383a 	mul	r16,r2,r20
    b688:	102d883a 	mov	r22,r2
    b68c:	24c8b03a 	or	r4,r4,r19
    b690:	d8c00017 	ldw	r3,0(sp)
    b694:	2400052e 	bgeu	r4,r16,b6ac <__udivdi3+0x23c>
    b698:	2449883a 	add	r4,r4,r17
    b69c:	b0bfffc4 	addi	r2,r22,-1
    b6a0:	24400136 	bltu	r4,r17,b6a8 <__udivdi3+0x238>
    b6a4:	2400ca36 	bltu	r4,r16,b9d0 <__udivdi3+0x560>
    b6a8:	102d883a 	mov	r22,r2
    b6ac:	2421c83a 	sub	r16,r4,r16
    b6b0:	a80b883a 	mov	r5,r21
    b6b4:	8009883a 	mov	r4,r16
    b6b8:	d8c00015 	stw	r3,0(sp)
    b6bc:	0001d9c0 	call	1d9c <__umodsi3>
    b6c0:	1027883a 	mov	r19,r2
    b6c4:	a80b883a 	mov	r5,r21
    b6c8:	8009883a 	mov	r4,r16
    b6cc:	0001d380 	call	1d38 <__udivsi3>
    b6d0:	9826943a 	slli	r19,r19,16
    b6d4:	1529383a 	mul	r20,r2,r20
    b6d8:	94bfffcc 	andi	r18,r18,65535
    b6dc:	94e4b03a 	or	r18,r18,r19
    b6e0:	d8c00017 	ldw	r3,0(sp)
    b6e4:	9500052e 	bgeu	r18,r20,b6fc <__udivdi3+0x28c>
    b6e8:	8ca5883a 	add	r18,r17,r18
    b6ec:	113fffc4 	addi	r4,r2,-1
    b6f0:	94409736 	bltu	r18,r17,b950 <__udivdi3+0x4e0>
    b6f4:	9500962e 	bgeu	r18,r20,b950 <__udivdi3+0x4e0>
    b6f8:	10bfff84 	addi	r2,r2,-2
    b6fc:	b00c943a 	slli	r6,r22,16
    b700:	3084b03a 	or	r2,r6,r2
    b704:	00000206 	br	b710 <__udivdi3+0x2a0>
    b708:	0007883a 	mov	r3,zero
    b70c:	0005883a 	mov	r2,zero
    b710:	dfc00a17 	ldw	ra,40(sp)
    b714:	df000917 	ldw	fp,36(sp)
    b718:	ddc00817 	ldw	r23,32(sp)
    b71c:	dd800717 	ldw	r22,28(sp)
    b720:	dd400617 	ldw	r21,24(sp)
    b724:	dd000517 	ldw	r20,20(sp)
    b728:	dcc00417 	ldw	r19,16(sp)
    b72c:	dc800317 	ldw	r18,12(sp)
    b730:	dc400217 	ldw	r17,8(sp)
    b734:	dc000117 	ldw	r16,4(sp)
    b738:	dec00b04 	addi	sp,sp,44
    b73c:	f800283a 	ret
    b740:	00803fc4 	movi	r2,255
    b744:	11c5803a 	cmpltu	r2,r2,r7
    b748:	100490fa 	slli	r2,r2,3
    b74c:	003f9e06 	br	b5c8 <__alt_data_end+0xff00b5c8>
    b750:	00803fc4 	movi	r2,255
    b754:	1445803a 	cmpltu	r2,r2,r17
    b758:	100490fa 	slli	r2,r2,3
    b75c:	003fb206 	br	b628 <__alt_data_end+0xff00b628>
    b760:	00804034 	movhi	r2,256
    b764:	10bfffc4 	addi	r2,r2,-1
    b768:	11808836 	bltu	r2,r6,b98c <__udivdi3+0x51c>
    b76c:	00800404 	movi	r2,16
    b770:	003f5606 	br	b4cc <__alt_data_end+0xff00b4cc>
    b774:	30aed83a 	srl	r23,r6,r2
    b778:	3d4e983a 	sll	r7,r7,r21
    b77c:	80acd83a 	srl	r22,r16,r2
    b780:	9884d83a 	srl	r2,r19,r2
    b784:	3deeb03a 	or	r23,r7,r23
    b788:	b824d43a 	srli	r18,r23,16
    b78c:	8560983a 	sll	r16,r16,r21
    b790:	b009883a 	mov	r4,r22
    b794:	900b883a 	mov	r5,r18
    b798:	3568983a 	sll	r20,r6,r21
    b79c:	1420b03a 	or	r16,r2,r16
    b7a0:	0001d9c0 	call	1d9c <__umodsi3>
    b7a4:	b009883a 	mov	r4,r22
    b7a8:	900b883a 	mov	r5,r18
    b7ac:	1023883a 	mov	r17,r2
    b7b0:	0001d380 	call	1d38 <__udivsi3>
    b7b4:	8808943a 	slli	r4,r17,16
    b7b8:	bf3fffcc 	andi	fp,r23,65535
    b7bc:	8006d43a 	srli	r3,r16,16
    b7c0:	e0a3383a 	mul	r17,fp,r2
    b7c4:	100d883a 	mov	r6,r2
    b7c8:	1906b03a 	or	r3,r3,r4
    b7cc:	1c40042e 	bgeu	r3,r17,b7e0 <__udivdi3+0x370>
    b7d0:	1dc7883a 	add	r3,r3,r23
    b7d4:	10bfffc4 	addi	r2,r2,-1
    b7d8:	1dc0752e 	bgeu	r3,r23,b9b0 <__udivdi3+0x540>
    b7dc:	100d883a 	mov	r6,r2
    b7e0:	1c63c83a 	sub	r17,r3,r17
    b7e4:	900b883a 	mov	r5,r18
    b7e8:	8809883a 	mov	r4,r17
    b7ec:	d9800015 	stw	r6,0(sp)
    b7f0:	0001d9c0 	call	1d9c <__umodsi3>
    b7f4:	102d883a 	mov	r22,r2
    b7f8:	8809883a 	mov	r4,r17
    b7fc:	900b883a 	mov	r5,r18
    b800:	0001d380 	call	1d38 <__udivsi3>
    b804:	b02c943a 	slli	r22,r22,16
    b808:	e089383a 	mul	r4,fp,r2
    b80c:	843fffcc 	andi	r16,r16,65535
    b810:	85a0b03a 	or	r16,r16,r22
    b814:	d9800017 	ldw	r6,0(sp)
    b818:	8100042e 	bgeu	r16,r4,b82c <__udivdi3+0x3bc>
    b81c:	85e1883a 	add	r16,r16,r23
    b820:	10ffffc4 	addi	r3,r2,-1
    b824:	85c05e2e 	bgeu	r16,r23,b9a0 <__udivdi3+0x530>
    b828:	1805883a 	mov	r2,r3
    b82c:	300c943a 	slli	r6,r6,16
    b830:	a17fffcc 	andi	r5,r20,65535
    b834:	a028d43a 	srli	r20,r20,16
    b838:	3084b03a 	or	r2,r6,r2
    b83c:	10ffffcc 	andi	r3,r2,65535
    b840:	100cd43a 	srli	r6,r2,16
    b844:	194f383a 	mul	r7,r3,r5
    b848:	1d07383a 	mul	r3,r3,r20
    b84c:	314b383a 	mul	r5,r6,r5
    b850:	3810d43a 	srli	r8,r7,16
    b854:	8121c83a 	sub	r16,r16,r4
    b858:	1947883a 	add	r3,r3,r5
    b85c:	40c7883a 	add	r3,r8,r3
    b860:	350d383a 	mul	r6,r6,r20
    b864:	1940022e 	bgeu	r3,r5,b870 <__udivdi3+0x400>
    b868:	01000074 	movhi	r4,1
    b86c:	310d883a 	add	r6,r6,r4
    b870:	1828d43a 	srli	r20,r3,16
    b874:	a18d883a 	add	r6,r20,r6
    b878:	81803e36 	bltu	r16,r6,b974 <__udivdi3+0x504>
    b87c:	81803826 	beq	r16,r6,b960 <__udivdi3+0x4f0>
    b880:	0007883a 	mov	r3,zero
    b884:	003fa206 	br	b710 <__alt_data_end+0xff00b710>
    b888:	88e2983a 	sll	r17,r17,r3
    b88c:	80a8d83a 	srl	r20,r16,r2
    b890:	80e0983a 	sll	r16,r16,r3
    b894:	882ad43a 	srli	r21,r17,16
    b898:	9884d83a 	srl	r2,r19,r2
    b89c:	a009883a 	mov	r4,r20
    b8a0:	a80b883a 	mov	r5,r21
    b8a4:	142eb03a 	or	r23,r2,r16
    b8a8:	98e4983a 	sll	r18,r19,r3
    b8ac:	0001d9c0 	call	1d9c <__umodsi3>
    b8b0:	a009883a 	mov	r4,r20
    b8b4:	a80b883a 	mov	r5,r21
    b8b8:	1021883a 	mov	r16,r2
    b8bc:	0001d380 	call	1d38 <__udivsi3>
    b8c0:	1039883a 	mov	fp,r2
    b8c4:	8d3fffcc 	andi	r20,r17,65535
    b8c8:	8020943a 	slli	r16,r16,16
    b8cc:	b804d43a 	srli	r2,r23,16
    b8d0:	a72d383a 	mul	r22,r20,fp
    b8d4:	1404b03a 	or	r2,r2,r16
    b8d8:	1580062e 	bgeu	r2,r22,b8f4 <__udivdi3+0x484>
    b8dc:	1445883a 	add	r2,r2,r17
    b8e0:	e0ffffc4 	addi	r3,fp,-1
    b8e4:	14403836 	bltu	r2,r17,b9c8 <__udivdi3+0x558>
    b8e8:	1580372e 	bgeu	r2,r22,b9c8 <__udivdi3+0x558>
    b8ec:	e73fff84 	addi	fp,fp,-2
    b8f0:	1445883a 	add	r2,r2,r17
    b8f4:	15adc83a 	sub	r22,r2,r22
    b8f8:	a80b883a 	mov	r5,r21
    b8fc:	b009883a 	mov	r4,r22
    b900:	0001d9c0 	call	1d9c <__umodsi3>
    b904:	1027883a 	mov	r19,r2
    b908:	b009883a 	mov	r4,r22
    b90c:	a80b883a 	mov	r5,r21
    b910:	0001d380 	call	1d38 <__udivsi3>
    b914:	9826943a 	slli	r19,r19,16
    b918:	a0a1383a 	mul	r16,r20,r2
    b91c:	b93fffcc 	andi	r4,r23,65535
    b920:	24c8b03a 	or	r4,r4,r19
    b924:	2400062e 	bgeu	r4,r16,b940 <__udivdi3+0x4d0>
    b928:	2449883a 	add	r4,r4,r17
    b92c:	10ffffc4 	addi	r3,r2,-1
    b930:	24402336 	bltu	r4,r17,b9c0 <__udivdi3+0x550>
    b934:	2400222e 	bgeu	r4,r16,b9c0 <__udivdi3+0x550>
    b938:	10bfff84 	addi	r2,r2,-2
    b93c:	2449883a 	add	r4,r4,r17
    b940:	e038943a 	slli	fp,fp,16
    b944:	2421c83a 	sub	r16,r4,r16
    b948:	e086b03a 	or	r3,fp,r2
    b94c:	003f4306 	br	b65c <__alt_data_end+0xff00b65c>
    b950:	2005883a 	mov	r2,r4
    b954:	003f6906 	br	b6fc <__alt_data_end+0xff00b6fc>
    b958:	1805883a 	mov	r2,r3
    b95c:	003f0f06 	br	b59c <__alt_data_end+0xff00b59c>
    b960:	1806943a 	slli	r3,r3,16
    b964:	9d66983a 	sll	r19,r19,r21
    b968:	39ffffcc 	andi	r7,r7,65535
    b96c:	19c7883a 	add	r3,r3,r7
    b970:	98ffc32e 	bgeu	r19,r3,b880 <__alt_data_end+0xff00b880>
    b974:	10bfffc4 	addi	r2,r2,-1
    b978:	003fc106 	br	b880 <__alt_data_end+0xff00b880>
    b97c:	00800604 	movi	r2,24
    b980:	003f1106 	br	b5c8 <__alt_data_end+0xff00b5c8>
    b984:	00800604 	movi	r2,24
    b988:	003f2706 	br	b628 <__alt_data_end+0xff00b628>
    b98c:	00800604 	movi	r2,24
    b990:	003ece06 	br	b4cc <__alt_data_end+0xff00b4cc>
    b994:	0007883a 	mov	r3,zero
    b998:	00800044 	movi	r2,1
    b99c:	003f5c06 	br	b710 <__alt_data_end+0xff00b710>
    b9a0:	813fa12e 	bgeu	r16,r4,b828 <__alt_data_end+0xff00b828>
    b9a4:	10bfff84 	addi	r2,r2,-2
    b9a8:	85e1883a 	add	r16,r16,r23
    b9ac:	003f9f06 	br	b82c <__alt_data_end+0xff00b82c>
    b9b0:	1c7f8a2e 	bgeu	r3,r17,b7dc <__alt_data_end+0xff00b7dc>
    b9b4:	31bfff84 	addi	r6,r6,-2
    b9b8:	1dc7883a 	add	r3,r3,r23
    b9bc:	003f8806 	br	b7e0 <__alt_data_end+0xff00b7e0>
    b9c0:	1805883a 	mov	r2,r3
    b9c4:	003fde06 	br	b940 <__alt_data_end+0xff00b940>
    b9c8:	1839883a 	mov	fp,r3
    b9cc:	003fc906 	br	b8f4 <__alt_data_end+0xff00b8f4>
    b9d0:	b5bfff84 	addi	r22,r22,-2
    b9d4:	2449883a 	add	r4,r4,r17
    b9d8:	003f3406 	br	b6ac <__alt_data_end+0xff00b6ac>
    b9dc:	b5bfff84 	addi	r22,r22,-2
    b9e0:	1445883a 	add	r2,r2,r17
    b9e4:	003edb06 	br	b554 <__alt_data_end+0xff00b554>

0000b9e8 <__umoddi3>:
    b9e8:	defff404 	addi	sp,sp,-48
    b9ec:	df000a15 	stw	fp,40(sp)
    b9f0:	dc400315 	stw	r17,12(sp)
    b9f4:	dc000215 	stw	r16,8(sp)
    b9f8:	dfc00b15 	stw	ra,44(sp)
    b9fc:	ddc00915 	stw	r23,36(sp)
    ba00:	dd800815 	stw	r22,32(sp)
    ba04:	dd400715 	stw	r21,28(sp)
    ba08:	dd000615 	stw	r20,24(sp)
    ba0c:	dcc00515 	stw	r19,20(sp)
    ba10:	dc800415 	stw	r18,16(sp)
    ba14:	2021883a 	mov	r16,r4
    ba18:	2823883a 	mov	r17,r5
    ba1c:	2839883a 	mov	fp,r5
    ba20:	38003c1e 	bne	r7,zero,bb14 <__umoddi3+0x12c>
    ba24:	3027883a 	mov	r19,r6
    ba28:	2029883a 	mov	r20,r4
    ba2c:	2980512e 	bgeu	r5,r6,bb74 <__umoddi3+0x18c>
    ba30:	00bfffd4 	movui	r2,65535
    ba34:	11809a36 	bltu	r2,r6,bca0 <__umoddi3+0x2b8>
    ba38:	01003fc4 	movi	r4,255
    ba3c:	2189803a 	cmpltu	r4,r4,r6
    ba40:	200890fa 	slli	r4,r4,3
    ba44:	3104d83a 	srl	r2,r6,r4
    ba48:	00c00074 	movhi	r3,1
    ba4c:	18c59d04 	addi	r3,r3,5748
    ba50:	1885883a 	add	r2,r3,r2
    ba54:	10c00003 	ldbu	r3,0(r2)
    ba58:	00800804 	movi	r2,32
    ba5c:	1909883a 	add	r4,r3,r4
    ba60:	1125c83a 	sub	r18,r2,r4
    ba64:	90000526 	beq	r18,zero,ba7c <__umoddi3+0x94>
    ba68:	8ca2983a 	sll	r17,r17,r18
    ba6c:	8108d83a 	srl	r4,r16,r4
    ba70:	34a6983a 	sll	r19,r6,r18
    ba74:	84a8983a 	sll	r20,r16,r18
    ba78:	2478b03a 	or	fp,r4,r17
    ba7c:	982ed43a 	srli	r23,r19,16
    ba80:	e009883a 	mov	r4,fp
    ba84:	9dbfffcc 	andi	r22,r19,65535
    ba88:	b80b883a 	mov	r5,r23
    ba8c:	0001d9c0 	call	1d9c <__umodsi3>
    ba90:	e009883a 	mov	r4,fp
    ba94:	b80b883a 	mov	r5,r23
    ba98:	102b883a 	mov	r21,r2
    ba9c:	0001d380 	call	1d38 <__udivsi3>
    baa0:	a806943a 	slli	r3,r21,16
    baa4:	a008d43a 	srli	r4,r20,16
    baa8:	b085383a 	mul	r2,r22,r2
    baac:	20c8b03a 	or	r4,r4,r3
    bab0:	2080032e 	bgeu	r4,r2,bac0 <__umoddi3+0xd8>
    bab4:	24c9883a 	add	r4,r4,r19
    bab8:	24c00136 	bltu	r4,r19,bac0 <__umoddi3+0xd8>
    babc:	20811036 	bltu	r4,r2,bf00 <__umoddi3+0x518>
    bac0:	20abc83a 	sub	r21,r4,r2
    bac4:	b80b883a 	mov	r5,r23
    bac8:	a809883a 	mov	r4,r21
    bacc:	0001d9c0 	call	1d9c <__umodsi3>
    bad0:	1023883a 	mov	r17,r2
    bad4:	b80b883a 	mov	r5,r23
    bad8:	a809883a 	mov	r4,r21
    badc:	0001d380 	call	1d38 <__udivsi3>
    bae0:	8822943a 	slli	r17,r17,16
    bae4:	b085383a 	mul	r2,r22,r2
    bae8:	a0ffffcc 	andi	r3,r20,65535
    baec:	1c46b03a 	or	r3,r3,r17
    baf0:	1880042e 	bgeu	r3,r2,bb04 <__umoddi3+0x11c>
    baf4:	1cc7883a 	add	r3,r3,r19
    baf8:	1cc00236 	bltu	r3,r19,bb04 <__umoddi3+0x11c>
    bafc:	1880012e 	bgeu	r3,r2,bb04 <__umoddi3+0x11c>
    bb00:	1cc7883a 	add	r3,r3,r19
    bb04:	1885c83a 	sub	r2,r3,r2
    bb08:	1484d83a 	srl	r2,r2,r18
    bb0c:	0007883a 	mov	r3,zero
    bb10:	00004f06 	br	bc50 <__umoddi3+0x268>
    bb14:	29c04c36 	bltu	r5,r7,bc48 <__umoddi3+0x260>
    bb18:	00bfffd4 	movui	r2,65535
    bb1c:	11c0582e 	bgeu	r2,r7,bc80 <__umoddi3+0x298>
    bb20:	00804034 	movhi	r2,256
    bb24:	10bfffc4 	addi	r2,r2,-1
    bb28:	11c0e736 	bltu	r2,r7,bec8 <__umoddi3+0x4e0>
    bb2c:	01000404 	movi	r4,16
    bb30:	3904d83a 	srl	r2,r7,r4
    bb34:	00c00074 	movhi	r3,1
    bb38:	18c59d04 	addi	r3,r3,5748
    bb3c:	1885883a 	add	r2,r3,r2
    bb40:	14c00003 	ldbu	r19,0(r2)
    bb44:	00c00804 	movi	r3,32
    bb48:	9927883a 	add	r19,r19,r4
    bb4c:	1ce9c83a 	sub	r20,r3,r19
    bb50:	a000581e 	bne	r20,zero,bcb4 <__umoddi3+0x2cc>
    bb54:	3c400136 	bltu	r7,r17,bb5c <__umoddi3+0x174>
    bb58:	8180eb36 	bltu	r16,r6,bf08 <__umoddi3+0x520>
    bb5c:	8185c83a 	sub	r2,r16,r6
    bb60:	89e3c83a 	sub	r17,r17,r7
    bb64:	8089803a 	cmpltu	r4,r16,r2
    bb68:	8939c83a 	sub	fp,r17,r4
    bb6c:	e007883a 	mov	r3,fp
    bb70:	00003706 	br	bc50 <__umoddi3+0x268>
    bb74:	3000041e 	bne	r6,zero,bb88 <__umoddi3+0x1a0>
    bb78:	000b883a 	mov	r5,zero
    bb7c:	01000044 	movi	r4,1
    bb80:	0001d380 	call	1d38 <__udivsi3>
    bb84:	1027883a 	mov	r19,r2
    bb88:	00bfffd4 	movui	r2,65535
    bb8c:	14c0402e 	bgeu	r2,r19,bc90 <__umoddi3+0x2a8>
    bb90:	00804034 	movhi	r2,256
    bb94:	10bfffc4 	addi	r2,r2,-1
    bb98:	14c0cd36 	bltu	r2,r19,bed0 <__umoddi3+0x4e8>
    bb9c:	00800404 	movi	r2,16
    bba0:	9886d83a 	srl	r3,r19,r2
    bba4:	01000074 	movhi	r4,1
    bba8:	21059d04 	addi	r4,r4,5748
    bbac:	20c7883a 	add	r3,r4,r3
    bbb0:	18c00003 	ldbu	r3,0(r3)
    bbb4:	1887883a 	add	r3,r3,r2
    bbb8:	00800804 	movi	r2,32
    bbbc:	10e5c83a 	sub	r18,r2,r3
    bbc0:	9000901e 	bne	r18,zero,be04 <__umoddi3+0x41c>
    bbc4:	982cd43a 	srli	r22,r19,16
    bbc8:	8ce3c83a 	sub	r17,r17,r19
    bbcc:	9d7fffcc 	andi	r21,r19,65535
    bbd0:	b00b883a 	mov	r5,r22
    bbd4:	8809883a 	mov	r4,r17
    bbd8:	0001d9c0 	call	1d9c <__umodsi3>
    bbdc:	8809883a 	mov	r4,r17
    bbe0:	b00b883a 	mov	r5,r22
    bbe4:	1021883a 	mov	r16,r2
    bbe8:	0001d380 	call	1d38 <__udivsi3>
    bbec:	8006943a 	slli	r3,r16,16
    bbf0:	a008d43a 	srli	r4,r20,16
    bbf4:	1545383a 	mul	r2,r2,r21
    bbf8:	20c8b03a 	or	r4,r4,r3
    bbfc:	2080042e 	bgeu	r4,r2,bc10 <__umoddi3+0x228>
    bc00:	24c9883a 	add	r4,r4,r19
    bc04:	24c00236 	bltu	r4,r19,bc10 <__umoddi3+0x228>
    bc08:	2080012e 	bgeu	r4,r2,bc10 <__umoddi3+0x228>
    bc0c:	24c9883a 	add	r4,r4,r19
    bc10:	20a1c83a 	sub	r16,r4,r2
    bc14:	b00b883a 	mov	r5,r22
    bc18:	8009883a 	mov	r4,r16
    bc1c:	0001d9c0 	call	1d9c <__umodsi3>
    bc20:	1023883a 	mov	r17,r2
    bc24:	b00b883a 	mov	r5,r22
    bc28:	8009883a 	mov	r4,r16
    bc2c:	0001d380 	call	1d38 <__udivsi3>
    bc30:	8822943a 	slli	r17,r17,16
    bc34:	1545383a 	mul	r2,r2,r21
    bc38:	a53fffcc 	andi	r20,r20,65535
    bc3c:	a446b03a 	or	r3,r20,r17
    bc40:	18bfb02e 	bgeu	r3,r2,bb04 <__alt_data_end+0xff00bb04>
    bc44:	003fab06 	br	baf4 <__alt_data_end+0xff00baf4>
    bc48:	2005883a 	mov	r2,r4
    bc4c:	2807883a 	mov	r3,r5
    bc50:	dfc00b17 	ldw	ra,44(sp)
    bc54:	df000a17 	ldw	fp,40(sp)
    bc58:	ddc00917 	ldw	r23,36(sp)
    bc5c:	dd800817 	ldw	r22,32(sp)
    bc60:	dd400717 	ldw	r21,28(sp)
    bc64:	dd000617 	ldw	r20,24(sp)
    bc68:	dcc00517 	ldw	r19,20(sp)
    bc6c:	dc800417 	ldw	r18,16(sp)
    bc70:	dc400317 	ldw	r17,12(sp)
    bc74:	dc000217 	ldw	r16,8(sp)
    bc78:	dec00c04 	addi	sp,sp,48
    bc7c:	f800283a 	ret
    bc80:	04c03fc4 	movi	r19,255
    bc84:	99c9803a 	cmpltu	r4,r19,r7
    bc88:	200890fa 	slli	r4,r4,3
    bc8c:	003fa806 	br	bb30 <__alt_data_end+0xff00bb30>
    bc90:	00803fc4 	movi	r2,255
    bc94:	14c5803a 	cmpltu	r2,r2,r19
    bc98:	100490fa 	slli	r2,r2,3
    bc9c:	003fc006 	br	bba0 <__alt_data_end+0xff00bba0>
    bca0:	00804034 	movhi	r2,256
    bca4:	10bfffc4 	addi	r2,r2,-1
    bca8:	11808b36 	bltu	r2,r6,bed8 <__umoddi3+0x4f0>
    bcac:	01000404 	movi	r4,16
    bcb0:	003f6406 	br	ba44 <__alt_data_end+0xff00ba44>
    bcb4:	34c4d83a 	srl	r2,r6,r19
    bcb8:	3d0e983a 	sll	r7,r7,r20
    bcbc:	8cf8d83a 	srl	fp,r17,r19
    bcc0:	8d10983a 	sll	r8,r17,r20
    bcc4:	38aab03a 	or	r21,r7,r2
    bcc8:	a82cd43a 	srli	r22,r21,16
    bccc:	84e2d83a 	srl	r17,r16,r19
    bcd0:	e009883a 	mov	r4,fp
    bcd4:	b00b883a 	mov	r5,r22
    bcd8:	8a22b03a 	or	r17,r17,r8
    bcdc:	3524983a 	sll	r18,r6,r20
    bce0:	0001d9c0 	call	1d9c <__umodsi3>
    bce4:	e009883a 	mov	r4,fp
    bce8:	b00b883a 	mov	r5,r22
    bcec:	102f883a 	mov	r23,r2
    bcf0:	0001d380 	call	1d38 <__udivsi3>
    bcf4:	100d883a 	mov	r6,r2
    bcf8:	b808943a 	slli	r4,r23,16
    bcfc:	aa3fffcc 	andi	r8,r21,65535
    bd00:	8804d43a 	srli	r2,r17,16
    bd04:	41af383a 	mul	r23,r8,r6
    bd08:	8520983a 	sll	r16,r16,r20
    bd0c:	1104b03a 	or	r2,r2,r4
    bd10:	15c0042e 	bgeu	r2,r23,bd24 <__umoddi3+0x33c>
    bd14:	1545883a 	add	r2,r2,r21
    bd18:	30ffffc4 	addi	r3,r6,-1
    bd1c:	1540742e 	bgeu	r2,r21,bef0 <__umoddi3+0x508>
    bd20:	180d883a 	mov	r6,r3
    bd24:	15efc83a 	sub	r23,r2,r23
    bd28:	b00b883a 	mov	r5,r22
    bd2c:	b809883a 	mov	r4,r23
    bd30:	d9800115 	stw	r6,4(sp)
    bd34:	da000015 	stw	r8,0(sp)
    bd38:	0001d9c0 	call	1d9c <__umodsi3>
    bd3c:	b00b883a 	mov	r5,r22
    bd40:	b809883a 	mov	r4,r23
    bd44:	1039883a 	mov	fp,r2
    bd48:	0001d380 	call	1d38 <__udivsi3>
    bd4c:	da000017 	ldw	r8,0(sp)
    bd50:	e038943a 	slli	fp,fp,16
    bd54:	100b883a 	mov	r5,r2
    bd58:	4089383a 	mul	r4,r8,r2
    bd5c:	8a3fffcc 	andi	r8,r17,65535
    bd60:	4710b03a 	or	r8,r8,fp
    bd64:	d9800117 	ldw	r6,4(sp)
    bd68:	4100042e 	bgeu	r8,r4,bd7c <__umoddi3+0x394>
    bd6c:	4551883a 	add	r8,r8,r21
    bd70:	10bfffc4 	addi	r2,r2,-1
    bd74:	45405a2e 	bgeu	r8,r21,bee0 <__umoddi3+0x4f8>
    bd78:	100b883a 	mov	r5,r2
    bd7c:	300c943a 	slli	r6,r6,16
    bd80:	91ffffcc 	andi	r7,r18,65535
    bd84:	9004d43a 	srli	r2,r18,16
    bd88:	314cb03a 	or	r6,r6,r5
    bd8c:	317fffcc 	andi	r5,r6,65535
    bd90:	300cd43a 	srli	r6,r6,16
    bd94:	29d3383a 	mul	r9,r5,r7
    bd98:	288b383a 	mul	r5,r5,r2
    bd9c:	31cf383a 	mul	r7,r6,r7
    bda0:	4806d43a 	srli	r3,r9,16
    bda4:	4111c83a 	sub	r8,r8,r4
    bda8:	29cb883a 	add	r5,r5,r7
    bdac:	194b883a 	add	r5,r3,r5
    bdb0:	3085383a 	mul	r2,r6,r2
    bdb4:	29c0022e 	bgeu	r5,r7,bdc0 <__umoddi3+0x3d8>
    bdb8:	00c00074 	movhi	r3,1
    bdbc:	10c5883a 	add	r2,r2,r3
    bdc0:	2808d43a 	srli	r4,r5,16
    bdc4:	280a943a 	slli	r5,r5,16
    bdc8:	4a7fffcc 	andi	r9,r9,65535
    bdcc:	2085883a 	add	r2,r4,r2
    bdd0:	2a4b883a 	add	r5,r5,r9
    bdd4:	40803636 	bltu	r8,r2,beb0 <__umoddi3+0x4c8>
    bdd8:	40804d26 	beq	r8,r2,bf10 <__umoddi3+0x528>
    bddc:	4089c83a 	sub	r4,r8,r2
    bde0:	280f883a 	mov	r7,r5
    bde4:	81cfc83a 	sub	r7,r16,r7
    bde8:	81c7803a 	cmpltu	r3,r16,r7
    bdec:	20c7c83a 	sub	r3,r4,r3
    bdf0:	1cc4983a 	sll	r2,r3,r19
    bdf4:	3d0ed83a 	srl	r7,r7,r20
    bdf8:	1d06d83a 	srl	r3,r3,r20
    bdfc:	11c4b03a 	or	r2,r2,r7
    be00:	003f9306 	br	bc50 <__alt_data_end+0xff00bc50>
    be04:	9ca6983a 	sll	r19,r19,r18
    be08:	88e8d83a 	srl	r20,r17,r3
    be0c:	80c4d83a 	srl	r2,r16,r3
    be10:	982cd43a 	srli	r22,r19,16
    be14:	8ca2983a 	sll	r17,r17,r18
    be18:	a009883a 	mov	r4,r20
    be1c:	b00b883a 	mov	r5,r22
    be20:	1478b03a 	or	fp,r2,r17
    be24:	0001d9c0 	call	1d9c <__umodsi3>
    be28:	a009883a 	mov	r4,r20
    be2c:	b00b883a 	mov	r5,r22
    be30:	1023883a 	mov	r17,r2
    be34:	0001d380 	call	1d38 <__udivsi3>
    be38:	9d7fffcc 	andi	r21,r19,65535
    be3c:	880a943a 	slli	r5,r17,16
    be40:	e008d43a 	srli	r4,fp,16
    be44:	a885383a 	mul	r2,r21,r2
    be48:	84a8983a 	sll	r20,r16,r18
    be4c:	2148b03a 	or	r4,r4,r5
    be50:	2080042e 	bgeu	r4,r2,be64 <__umoddi3+0x47c>
    be54:	24c9883a 	add	r4,r4,r19
    be58:	24c00236 	bltu	r4,r19,be64 <__umoddi3+0x47c>
    be5c:	2080012e 	bgeu	r4,r2,be64 <__umoddi3+0x47c>
    be60:	24c9883a 	add	r4,r4,r19
    be64:	20a3c83a 	sub	r17,r4,r2
    be68:	b00b883a 	mov	r5,r22
    be6c:	8809883a 	mov	r4,r17
    be70:	0001d9c0 	call	1d9c <__umodsi3>
    be74:	102f883a 	mov	r23,r2
    be78:	8809883a 	mov	r4,r17
    be7c:	b00b883a 	mov	r5,r22
    be80:	0001d380 	call	1d38 <__udivsi3>
    be84:	b82e943a 	slli	r23,r23,16
    be88:	a885383a 	mul	r2,r21,r2
    be8c:	e13fffcc 	andi	r4,fp,65535
    be90:	25c8b03a 	or	r4,r4,r23
    be94:	2080042e 	bgeu	r4,r2,bea8 <__umoddi3+0x4c0>
    be98:	24c9883a 	add	r4,r4,r19
    be9c:	24c00236 	bltu	r4,r19,bea8 <__umoddi3+0x4c0>
    bea0:	2080012e 	bgeu	r4,r2,bea8 <__umoddi3+0x4c0>
    bea4:	24c9883a 	add	r4,r4,r19
    bea8:	20a3c83a 	sub	r17,r4,r2
    beac:	003f4806 	br	bbd0 <__alt_data_end+0xff00bbd0>
    beb0:	2c8fc83a 	sub	r7,r5,r18
    beb4:	1545c83a 	sub	r2,r2,r21
    beb8:	29cb803a 	cmpltu	r5,r5,r7
    bebc:	1145c83a 	sub	r2,r2,r5
    bec0:	4089c83a 	sub	r4,r8,r2
    bec4:	003fc706 	br	bde4 <__alt_data_end+0xff00bde4>
    bec8:	01000604 	movi	r4,24
    becc:	003f1806 	br	bb30 <__alt_data_end+0xff00bb30>
    bed0:	00800604 	movi	r2,24
    bed4:	003f3206 	br	bba0 <__alt_data_end+0xff00bba0>
    bed8:	01000604 	movi	r4,24
    bedc:	003ed906 	br	ba44 <__alt_data_end+0xff00ba44>
    bee0:	413fa52e 	bgeu	r8,r4,bd78 <__alt_data_end+0xff00bd78>
    bee4:	297fff84 	addi	r5,r5,-2
    bee8:	4551883a 	add	r8,r8,r21
    beec:	003fa306 	br	bd7c <__alt_data_end+0xff00bd7c>
    bef0:	15ff8b2e 	bgeu	r2,r23,bd20 <__alt_data_end+0xff00bd20>
    bef4:	31bfff84 	addi	r6,r6,-2
    bef8:	1545883a 	add	r2,r2,r21
    befc:	003f8906 	br	bd24 <__alt_data_end+0xff00bd24>
    bf00:	24c9883a 	add	r4,r4,r19
    bf04:	003eee06 	br	bac0 <__alt_data_end+0xff00bac0>
    bf08:	8005883a 	mov	r2,r16
    bf0c:	003f1706 	br	bb6c <__alt_data_end+0xff00bb6c>
    bf10:	817fe736 	bltu	r16,r5,beb0 <__alt_data_end+0xff00beb0>
    bf14:	280f883a 	mov	r7,r5
    bf18:	0009883a 	mov	r4,zero
    bf1c:	003fb106 	br	bde4 <__alt_data_end+0xff00bde4>

0000bf20 <__adddf3>:
    bf20:	02c00434 	movhi	r11,16
    bf24:	5affffc4 	addi	r11,r11,-1
    bf28:	2806d7fa 	srli	r3,r5,31
    bf2c:	2ad4703a 	and	r10,r5,r11
    bf30:	3ad2703a 	and	r9,r7,r11
    bf34:	3804d53a 	srli	r2,r7,20
    bf38:	3018d77a 	srli	r12,r6,29
    bf3c:	280ad53a 	srli	r5,r5,20
    bf40:	501490fa 	slli	r10,r10,3
    bf44:	2010d77a 	srli	r8,r4,29
    bf48:	481290fa 	slli	r9,r9,3
    bf4c:	380ed7fa 	srli	r7,r7,31
    bf50:	defffb04 	addi	sp,sp,-20
    bf54:	dc800215 	stw	r18,8(sp)
    bf58:	dc400115 	stw	r17,4(sp)
    bf5c:	dc000015 	stw	r16,0(sp)
    bf60:	dfc00415 	stw	ra,16(sp)
    bf64:	dcc00315 	stw	r19,12(sp)
    bf68:	1c803fcc 	andi	r18,r3,255
    bf6c:	2c01ffcc 	andi	r16,r5,2047
    bf70:	5210b03a 	or	r8,r10,r8
    bf74:	202290fa 	slli	r17,r4,3
    bf78:	1081ffcc 	andi	r2,r2,2047
    bf7c:	4b12b03a 	or	r9,r9,r12
    bf80:	300c90fa 	slli	r6,r6,3
    bf84:	91c07526 	beq	r18,r7,c15c <__adddf3+0x23c>
    bf88:	8087c83a 	sub	r3,r16,r2
    bf8c:	00c0ab0e 	bge	zero,r3,c23c <__adddf3+0x31c>
    bf90:	10002a1e 	bne	r2,zero,c03c <__adddf3+0x11c>
    bf94:	4984b03a 	or	r2,r9,r6
    bf98:	1000961e 	bne	r2,zero,c1f4 <__adddf3+0x2d4>
    bf9c:	888001cc 	andi	r2,r17,7
    bfa0:	10000726 	beq	r2,zero,bfc0 <__adddf3+0xa0>
    bfa4:	888003cc 	andi	r2,r17,15
    bfa8:	00c00104 	movi	r3,4
    bfac:	10c00426 	beq	r2,r3,bfc0 <__adddf3+0xa0>
    bfb0:	88c7883a 	add	r3,r17,r3
    bfb4:	1c63803a 	cmpltu	r17,r3,r17
    bfb8:	4451883a 	add	r8,r8,r17
    bfbc:	1823883a 	mov	r17,r3
    bfc0:	4080202c 	andhi	r2,r8,128
    bfc4:	10005926 	beq	r2,zero,c12c <__adddf3+0x20c>
    bfc8:	84000044 	addi	r16,r16,1
    bfcc:	0081ffc4 	movi	r2,2047
    bfd0:	8080ba26 	beq	r16,r2,c2bc <__adddf3+0x39c>
    bfd4:	00bfe034 	movhi	r2,65408
    bfd8:	10bfffc4 	addi	r2,r2,-1
    bfdc:	4090703a 	and	r8,r8,r2
    bfe0:	4004977a 	slli	r2,r8,29
    bfe4:	4010927a 	slli	r8,r8,9
    bfe8:	8822d0fa 	srli	r17,r17,3
    bfec:	8401ffcc 	andi	r16,r16,2047
    bff0:	4010d33a 	srli	r8,r8,12
    bff4:	9007883a 	mov	r3,r18
    bff8:	1444b03a 	or	r2,r2,r17
    bffc:	8401ffcc 	andi	r16,r16,2047
    c000:	8020953a 	slli	r16,r16,20
    c004:	18c03fcc 	andi	r3,r3,255
    c008:	01000434 	movhi	r4,16
    c00c:	213fffc4 	addi	r4,r4,-1
    c010:	180697fa 	slli	r3,r3,31
    c014:	4110703a 	and	r8,r8,r4
    c018:	4410b03a 	or	r8,r8,r16
    c01c:	40c6b03a 	or	r3,r8,r3
    c020:	dfc00417 	ldw	ra,16(sp)
    c024:	dcc00317 	ldw	r19,12(sp)
    c028:	dc800217 	ldw	r18,8(sp)
    c02c:	dc400117 	ldw	r17,4(sp)
    c030:	dc000017 	ldw	r16,0(sp)
    c034:	dec00504 	addi	sp,sp,20
    c038:	f800283a 	ret
    c03c:	0081ffc4 	movi	r2,2047
    c040:	80bfd626 	beq	r16,r2,bf9c <__alt_data_end+0xff00bf9c>
    c044:	4a402034 	orhi	r9,r9,128
    c048:	00800e04 	movi	r2,56
    c04c:	10c09f16 	blt	r2,r3,c2cc <__adddf3+0x3ac>
    c050:	008007c4 	movi	r2,31
    c054:	10c0c216 	blt	r2,r3,c360 <__adddf3+0x440>
    c058:	00800804 	movi	r2,32
    c05c:	10c5c83a 	sub	r2,r2,r3
    c060:	488a983a 	sll	r5,r9,r2
    c064:	30c8d83a 	srl	r4,r6,r3
    c068:	3084983a 	sll	r2,r6,r2
    c06c:	48c6d83a 	srl	r3,r9,r3
    c070:	290cb03a 	or	r6,r5,r4
    c074:	1004c03a 	cmpne	r2,r2,zero
    c078:	308cb03a 	or	r6,r6,r2
    c07c:	898dc83a 	sub	r6,r17,r6
    c080:	89a3803a 	cmpltu	r17,r17,r6
    c084:	40d1c83a 	sub	r8,r8,r3
    c088:	4451c83a 	sub	r8,r8,r17
    c08c:	3023883a 	mov	r17,r6
    c090:	4080202c 	andhi	r2,r8,128
    c094:	10002326 	beq	r2,zero,c124 <__adddf3+0x204>
    c098:	04c02034 	movhi	r19,128
    c09c:	9cffffc4 	addi	r19,r19,-1
    c0a0:	44e6703a 	and	r19,r8,r19
    c0a4:	98007626 	beq	r19,zero,c280 <__adddf3+0x360>
    c0a8:	9809883a 	mov	r4,r19
    c0ac:	000e5240 	call	e524 <__clzsi2>
    c0b0:	10fffe04 	addi	r3,r2,-8
    c0b4:	010007c4 	movi	r4,31
    c0b8:	20c07716 	blt	r4,r3,c298 <__adddf3+0x378>
    c0bc:	00800804 	movi	r2,32
    c0c0:	10c5c83a 	sub	r2,r2,r3
    c0c4:	8884d83a 	srl	r2,r17,r2
    c0c8:	98d0983a 	sll	r8,r19,r3
    c0cc:	88e2983a 	sll	r17,r17,r3
    c0d0:	1204b03a 	or	r2,r2,r8
    c0d4:	1c007416 	blt	r3,r16,c2a8 <__adddf3+0x388>
    c0d8:	1c21c83a 	sub	r16,r3,r16
    c0dc:	82000044 	addi	r8,r16,1
    c0e0:	00c007c4 	movi	r3,31
    c0e4:	1a009116 	blt	r3,r8,c32c <__adddf3+0x40c>
    c0e8:	00c00804 	movi	r3,32
    c0ec:	1a07c83a 	sub	r3,r3,r8
    c0f0:	8a08d83a 	srl	r4,r17,r8
    c0f4:	88e2983a 	sll	r17,r17,r3
    c0f8:	10c6983a 	sll	r3,r2,r3
    c0fc:	1210d83a 	srl	r8,r2,r8
    c100:	8804c03a 	cmpne	r2,r17,zero
    c104:	1906b03a 	or	r3,r3,r4
    c108:	18a2b03a 	or	r17,r3,r2
    c10c:	0021883a 	mov	r16,zero
    c110:	003fa206 	br	bf9c <__alt_data_end+0xff00bf9c>
    c114:	1890b03a 	or	r8,r3,r2
    c118:	40017d26 	beq	r8,zero,c710 <__adddf3+0x7f0>
    c11c:	1011883a 	mov	r8,r2
    c120:	1823883a 	mov	r17,r3
    c124:	888001cc 	andi	r2,r17,7
    c128:	103f9e1e 	bne	r2,zero,bfa4 <__alt_data_end+0xff00bfa4>
    c12c:	4004977a 	slli	r2,r8,29
    c130:	8822d0fa 	srli	r17,r17,3
    c134:	4010d0fa 	srli	r8,r8,3
    c138:	9007883a 	mov	r3,r18
    c13c:	1444b03a 	or	r2,r2,r17
    c140:	0101ffc4 	movi	r4,2047
    c144:	81002426 	beq	r16,r4,c1d8 <__adddf3+0x2b8>
    c148:	8120703a 	and	r16,r16,r4
    c14c:	01000434 	movhi	r4,16
    c150:	213fffc4 	addi	r4,r4,-1
    c154:	4110703a 	and	r8,r8,r4
    c158:	003fa806 	br	bffc <__alt_data_end+0xff00bffc>
    c15c:	8089c83a 	sub	r4,r16,r2
    c160:	01005e0e 	bge	zero,r4,c2dc <__adddf3+0x3bc>
    c164:	10002b26 	beq	r2,zero,c214 <__adddf3+0x2f4>
    c168:	0081ffc4 	movi	r2,2047
    c16c:	80bf8b26 	beq	r16,r2,bf9c <__alt_data_end+0xff00bf9c>
    c170:	4a402034 	orhi	r9,r9,128
    c174:	00800e04 	movi	r2,56
    c178:	1100a40e 	bge	r2,r4,c40c <__adddf3+0x4ec>
    c17c:	498cb03a 	or	r6,r9,r6
    c180:	300ac03a 	cmpne	r5,r6,zero
    c184:	0013883a 	mov	r9,zero
    c188:	2c4b883a 	add	r5,r5,r17
    c18c:	2c63803a 	cmpltu	r17,r5,r17
    c190:	4a11883a 	add	r8,r9,r8
    c194:	8a11883a 	add	r8,r17,r8
    c198:	2823883a 	mov	r17,r5
    c19c:	4080202c 	andhi	r2,r8,128
    c1a0:	103fe026 	beq	r2,zero,c124 <__alt_data_end+0xff00c124>
    c1a4:	84000044 	addi	r16,r16,1
    c1a8:	0081ffc4 	movi	r2,2047
    c1ac:	8080d226 	beq	r16,r2,c4f8 <__adddf3+0x5d8>
    c1b0:	00bfe034 	movhi	r2,65408
    c1b4:	10bfffc4 	addi	r2,r2,-1
    c1b8:	4090703a 	and	r8,r8,r2
    c1bc:	880ad07a 	srli	r5,r17,1
    c1c0:	400897fa 	slli	r4,r8,31
    c1c4:	88c0004c 	andi	r3,r17,1
    c1c8:	28e2b03a 	or	r17,r5,r3
    c1cc:	4010d07a 	srli	r8,r8,1
    c1d0:	2462b03a 	or	r17,r4,r17
    c1d4:	003f7106 	br	bf9c <__alt_data_end+0xff00bf9c>
    c1d8:	4088b03a 	or	r4,r8,r2
    c1dc:	20014526 	beq	r4,zero,c6f4 <__adddf3+0x7d4>
    c1e0:	01000434 	movhi	r4,16
    c1e4:	42000234 	orhi	r8,r8,8
    c1e8:	213fffc4 	addi	r4,r4,-1
    c1ec:	4110703a 	and	r8,r8,r4
    c1f0:	003f8206 	br	bffc <__alt_data_end+0xff00bffc>
    c1f4:	18ffffc4 	addi	r3,r3,-1
    c1f8:	1800491e 	bne	r3,zero,c320 <__adddf3+0x400>
    c1fc:	898bc83a 	sub	r5,r17,r6
    c200:	8963803a 	cmpltu	r17,r17,r5
    c204:	4251c83a 	sub	r8,r8,r9
    c208:	4451c83a 	sub	r8,r8,r17
    c20c:	2823883a 	mov	r17,r5
    c210:	003f9f06 	br	c090 <__alt_data_end+0xff00c090>
    c214:	4984b03a 	or	r2,r9,r6
    c218:	103f6026 	beq	r2,zero,bf9c <__alt_data_end+0xff00bf9c>
    c21c:	213fffc4 	addi	r4,r4,-1
    c220:	2000931e 	bne	r4,zero,c470 <__adddf3+0x550>
    c224:	898d883a 	add	r6,r17,r6
    c228:	3463803a 	cmpltu	r17,r6,r17
    c22c:	4251883a 	add	r8,r8,r9
    c230:	8a11883a 	add	r8,r17,r8
    c234:	3023883a 	mov	r17,r6
    c238:	003fd806 	br	c19c <__alt_data_end+0xff00c19c>
    c23c:	1800541e 	bne	r3,zero,c390 <__adddf3+0x470>
    c240:	80800044 	addi	r2,r16,1
    c244:	1081ffcc 	andi	r2,r2,2047
    c248:	00c00044 	movi	r3,1
    c24c:	1880a00e 	bge	r3,r2,c4d0 <__adddf3+0x5b0>
    c250:	8989c83a 	sub	r4,r17,r6
    c254:	8905803a 	cmpltu	r2,r17,r4
    c258:	4267c83a 	sub	r19,r8,r9
    c25c:	98a7c83a 	sub	r19,r19,r2
    c260:	9880202c 	andhi	r2,r19,128
    c264:	10006326 	beq	r2,zero,c3f4 <__adddf3+0x4d4>
    c268:	3463c83a 	sub	r17,r6,r17
    c26c:	4a07c83a 	sub	r3,r9,r8
    c270:	344d803a 	cmpltu	r6,r6,r17
    c274:	19a7c83a 	sub	r19,r3,r6
    c278:	3825883a 	mov	r18,r7
    c27c:	983f8a1e 	bne	r19,zero,c0a8 <__alt_data_end+0xff00c0a8>
    c280:	8809883a 	mov	r4,r17
    c284:	000e5240 	call	e524 <__clzsi2>
    c288:	10800804 	addi	r2,r2,32
    c28c:	10fffe04 	addi	r3,r2,-8
    c290:	010007c4 	movi	r4,31
    c294:	20ff890e 	bge	r4,r3,c0bc <__alt_data_end+0xff00c0bc>
    c298:	10bff604 	addi	r2,r2,-40
    c29c:	8884983a 	sll	r2,r17,r2
    c2a0:	0023883a 	mov	r17,zero
    c2a4:	1c3f8c0e 	bge	r3,r16,c0d8 <__alt_data_end+0xff00c0d8>
    c2a8:	023fe034 	movhi	r8,65408
    c2ac:	423fffc4 	addi	r8,r8,-1
    c2b0:	80e1c83a 	sub	r16,r16,r3
    c2b4:	1210703a 	and	r8,r2,r8
    c2b8:	003f3806 	br	bf9c <__alt_data_end+0xff00bf9c>
    c2bc:	9007883a 	mov	r3,r18
    c2c0:	0011883a 	mov	r8,zero
    c2c4:	0005883a 	mov	r2,zero
    c2c8:	003f4c06 	br	bffc <__alt_data_end+0xff00bffc>
    c2cc:	498cb03a 	or	r6,r9,r6
    c2d0:	300cc03a 	cmpne	r6,r6,zero
    c2d4:	0007883a 	mov	r3,zero
    c2d8:	003f6806 	br	c07c <__alt_data_end+0xff00c07c>
    c2dc:	20009c1e 	bne	r4,zero,c550 <__adddf3+0x630>
    c2e0:	80800044 	addi	r2,r16,1
    c2e4:	1141ffcc 	andi	r5,r2,2047
    c2e8:	01000044 	movi	r4,1
    c2ec:	2140670e 	bge	r4,r5,c48c <__adddf3+0x56c>
    c2f0:	0101ffc4 	movi	r4,2047
    c2f4:	11007f26 	beq	r2,r4,c4f4 <__adddf3+0x5d4>
    c2f8:	898d883a 	add	r6,r17,r6
    c2fc:	4247883a 	add	r3,r8,r9
    c300:	3451803a 	cmpltu	r8,r6,r17
    c304:	40d1883a 	add	r8,r8,r3
    c308:	402297fa 	slli	r17,r8,31
    c30c:	300cd07a 	srli	r6,r6,1
    c310:	4010d07a 	srli	r8,r8,1
    c314:	1021883a 	mov	r16,r2
    c318:	89a2b03a 	or	r17,r17,r6
    c31c:	003f1f06 	br	bf9c <__alt_data_end+0xff00bf9c>
    c320:	0081ffc4 	movi	r2,2047
    c324:	80bf481e 	bne	r16,r2,c048 <__alt_data_end+0xff00c048>
    c328:	003f1c06 	br	bf9c <__alt_data_end+0xff00bf9c>
    c32c:	843ff844 	addi	r16,r16,-31
    c330:	01000804 	movi	r4,32
    c334:	1406d83a 	srl	r3,r2,r16
    c338:	41005026 	beq	r8,r4,c47c <__adddf3+0x55c>
    c33c:	01001004 	movi	r4,64
    c340:	2211c83a 	sub	r8,r4,r8
    c344:	1204983a 	sll	r2,r2,r8
    c348:	88a2b03a 	or	r17,r17,r2
    c34c:	8822c03a 	cmpne	r17,r17,zero
    c350:	1c62b03a 	or	r17,r3,r17
    c354:	0011883a 	mov	r8,zero
    c358:	0021883a 	mov	r16,zero
    c35c:	003f7106 	br	c124 <__alt_data_end+0xff00c124>
    c360:	193ff804 	addi	r4,r3,-32
    c364:	00800804 	movi	r2,32
    c368:	4908d83a 	srl	r4,r9,r4
    c36c:	18804526 	beq	r3,r2,c484 <__adddf3+0x564>
    c370:	00801004 	movi	r2,64
    c374:	10c5c83a 	sub	r2,r2,r3
    c378:	4886983a 	sll	r3,r9,r2
    c37c:	198cb03a 	or	r6,r3,r6
    c380:	300cc03a 	cmpne	r6,r6,zero
    c384:	218cb03a 	or	r6,r4,r6
    c388:	0007883a 	mov	r3,zero
    c38c:	003f3b06 	br	c07c <__alt_data_end+0xff00c07c>
    c390:	80002a26 	beq	r16,zero,c43c <__adddf3+0x51c>
    c394:	0101ffc4 	movi	r4,2047
    c398:	11006826 	beq	r2,r4,c53c <__adddf3+0x61c>
    c39c:	00c7c83a 	sub	r3,zero,r3
    c3a0:	42002034 	orhi	r8,r8,128
    c3a4:	01000e04 	movi	r4,56
    c3a8:	20c07c16 	blt	r4,r3,c59c <__adddf3+0x67c>
    c3ac:	010007c4 	movi	r4,31
    c3b0:	20c0da16 	blt	r4,r3,c71c <__adddf3+0x7fc>
    c3b4:	01000804 	movi	r4,32
    c3b8:	20c9c83a 	sub	r4,r4,r3
    c3bc:	4114983a 	sll	r10,r8,r4
    c3c0:	88cad83a 	srl	r5,r17,r3
    c3c4:	8908983a 	sll	r4,r17,r4
    c3c8:	40c6d83a 	srl	r3,r8,r3
    c3cc:	5162b03a 	or	r17,r10,r5
    c3d0:	2008c03a 	cmpne	r4,r4,zero
    c3d4:	8922b03a 	or	r17,r17,r4
    c3d8:	3463c83a 	sub	r17,r6,r17
    c3dc:	48c7c83a 	sub	r3,r9,r3
    c3e0:	344d803a 	cmpltu	r6,r6,r17
    c3e4:	1991c83a 	sub	r8,r3,r6
    c3e8:	1021883a 	mov	r16,r2
    c3ec:	3825883a 	mov	r18,r7
    c3f0:	003f2706 	br	c090 <__alt_data_end+0xff00c090>
    c3f4:	24d0b03a 	or	r8,r4,r19
    c3f8:	40001b1e 	bne	r8,zero,c468 <__adddf3+0x548>
    c3fc:	0005883a 	mov	r2,zero
    c400:	0007883a 	mov	r3,zero
    c404:	0021883a 	mov	r16,zero
    c408:	003f4d06 	br	c140 <__alt_data_end+0xff00c140>
    c40c:	008007c4 	movi	r2,31
    c410:	11003c16 	blt	r2,r4,c504 <__adddf3+0x5e4>
    c414:	00800804 	movi	r2,32
    c418:	1105c83a 	sub	r2,r2,r4
    c41c:	488e983a 	sll	r7,r9,r2
    c420:	310ad83a 	srl	r5,r6,r4
    c424:	3084983a 	sll	r2,r6,r2
    c428:	4912d83a 	srl	r9,r9,r4
    c42c:	394ab03a 	or	r5,r7,r5
    c430:	1004c03a 	cmpne	r2,r2,zero
    c434:	288ab03a 	or	r5,r5,r2
    c438:	003f5306 	br	c188 <__alt_data_end+0xff00c188>
    c43c:	4448b03a 	or	r4,r8,r17
    c440:	20003e26 	beq	r4,zero,c53c <__adddf3+0x61c>
    c444:	00c6303a 	nor	r3,zero,r3
    c448:	18003a1e 	bne	r3,zero,c534 <__adddf3+0x614>
    c44c:	3463c83a 	sub	r17,r6,r17
    c450:	4a07c83a 	sub	r3,r9,r8
    c454:	344d803a 	cmpltu	r6,r6,r17
    c458:	1991c83a 	sub	r8,r3,r6
    c45c:	1021883a 	mov	r16,r2
    c460:	3825883a 	mov	r18,r7
    c464:	003f0a06 	br	c090 <__alt_data_end+0xff00c090>
    c468:	2023883a 	mov	r17,r4
    c46c:	003f0d06 	br	c0a4 <__alt_data_end+0xff00c0a4>
    c470:	0081ffc4 	movi	r2,2047
    c474:	80bf3f1e 	bne	r16,r2,c174 <__alt_data_end+0xff00c174>
    c478:	003ec806 	br	bf9c <__alt_data_end+0xff00bf9c>
    c47c:	0005883a 	mov	r2,zero
    c480:	003fb106 	br	c348 <__alt_data_end+0xff00c348>
    c484:	0007883a 	mov	r3,zero
    c488:	003fbc06 	br	c37c <__alt_data_end+0xff00c37c>
    c48c:	4444b03a 	or	r2,r8,r17
    c490:	8000871e 	bne	r16,zero,c6b0 <__adddf3+0x790>
    c494:	1000ba26 	beq	r2,zero,c780 <__adddf3+0x860>
    c498:	4984b03a 	or	r2,r9,r6
    c49c:	103ebf26 	beq	r2,zero,bf9c <__alt_data_end+0xff00bf9c>
    c4a0:	8985883a 	add	r2,r17,r6
    c4a4:	4247883a 	add	r3,r8,r9
    c4a8:	1451803a 	cmpltu	r8,r2,r17
    c4ac:	40d1883a 	add	r8,r8,r3
    c4b0:	40c0202c 	andhi	r3,r8,128
    c4b4:	1023883a 	mov	r17,r2
    c4b8:	183f1a26 	beq	r3,zero,c124 <__alt_data_end+0xff00c124>
    c4bc:	00bfe034 	movhi	r2,65408
    c4c0:	10bfffc4 	addi	r2,r2,-1
    c4c4:	2021883a 	mov	r16,r4
    c4c8:	4090703a 	and	r8,r8,r2
    c4cc:	003eb306 	br	bf9c <__alt_data_end+0xff00bf9c>
    c4d0:	4444b03a 	or	r2,r8,r17
    c4d4:	8000291e 	bne	r16,zero,c57c <__adddf3+0x65c>
    c4d8:	10004b1e 	bne	r2,zero,c608 <__adddf3+0x6e8>
    c4dc:	4990b03a 	or	r8,r9,r6
    c4e0:	40008b26 	beq	r8,zero,c710 <__adddf3+0x7f0>
    c4e4:	4811883a 	mov	r8,r9
    c4e8:	3023883a 	mov	r17,r6
    c4ec:	3825883a 	mov	r18,r7
    c4f0:	003eaa06 	br	bf9c <__alt_data_end+0xff00bf9c>
    c4f4:	1021883a 	mov	r16,r2
    c4f8:	0011883a 	mov	r8,zero
    c4fc:	0005883a 	mov	r2,zero
    c500:	003f0f06 	br	c140 <__alt_data_end+0xff00c140>
    c504:	217ff804 	addi	r5,r4,-32
    c508:	00800804 	movi	r2,32
    c50c:	494ad83a 	srl	r5,r9,r5
    c510:	20807d26 	beq	r4,r2,c708 <__adddf3+0x7e8>
    c514:	00801004 	movi	r2,64
    c518:	1109c83a 	sub	r4,r2,r4
    c51c:	4912983a 	sll	r9,r9,r4
    c520:	498cb03a 	or	r6,r9,r6
    c524:	300cc03a 	cmpne	r6,r6,zero
    c528:	298ab03a 	or	r5,r5,r6
    c52c:	0013883a 	mov	r9,zero
    c530:	003f1506 	br	c188 <__alt_data_end+0xff00c188>
    c534:	0101ffc4 	movi	r4,2047
    c538:	113f9a1e 	bne	r2,r4,c3a4 <__alt_data_end+0xff00c3a4>
    c53c:	4811883a 	mov	r8,r9
    c540:	3023883a 	mov	r17,r6
    c544:	1021883a 	mov	r16,r2
    c548:	3825883a 	mov	r18,r7
    c54c:	003e9306 	br	bf9c <__alt_data_end+0xff00bf9c>
    c550:	8000161e 	bne	r16,zero,c5ac <__adddf3+0x68c>
    c554:	444ab03a 	or	r5,r8,r17
    c558:	28005126 	beq	r5,zero,c6a0 <__adddf3+0x780>
    c55c:	0108303a 	nor	r4,zero,r4
    c560:	20004d1e 	bne	r4,zero,c698 <__adddf3+0x778>
    c564:	89a3883a 	add	r17,r17,r6
    c568:	4253883a 	add	r9,r8,r9
    c56c:	898d803a 	cmpltu	r6,r17,r6
    c570:	3251883a 	add	r8,r6,r9
    c574:	1021883a 	mov	r16,r2
    c578:	003f0806 	br	c19c <__alt_data_end+0xff00c19c>
    c57c:	1000301e 	bne	r2,zero,c640 <__adddf3+0x720>
    c580:	4984b03a 	or	r2,r9,r6
    c584:	10007126 	beq	r2,zero,c74c <__adddf3+0x82c>
    c588:	4811883a 	mov	r8,r9
    c58c:	3023883a 	mov	r17,r6
    c590:	3825883a 	mov	r18,r7
    c594:	0401ffc4 	movi	r16,2047
    c598:	003e8006 	br	bf9c <__alt_data_end+0xff00bf9c>
    c59c:	4462b03a 	or	r17,r8,r17
    c5a0:	8822c03a 	cmpne	r17,r17,zero
    c5a4:	0007883a 	mov	r3,zero
    c5a8:	003f8b06 	br	c3d8 <__alt_data_end+0xff00c3d8>
    c5ac:	0141ffc4 	movi	r5,2047
    c5b0:	11403b26 	beq	r2,r5,c6a0 <__adddf3+0x780>
    c5b4:	0109c83a 	sub	r4,zero,r4
    c5b8:	42002034 	orhi	r8,r8,128
    c5bc:	01400e04 	movi	r5,56
    c5c0:	29006716 	blt	r5,r4,c760 <__adddf3+0x840>
    c5c4:	014007c4 	movi	r5,31
    c5c8:	29007016 	blt	r5,r4,c78c <__adddf3+0x86c>
    c5cc:	01400804 	movi	r5,32
    c5d0:	290bc83a 	sub	r5,r5,r4
    c5d4:	4154983a 	sll	r10,r8,r5
    c5d8:	890ed83a 	srl	r7,r17,r4
    c5dc:	894a983a 	sll	r5,r17,r5
    c5e0:	4108d83a 	srl	r4,r8,r4
    c5e4:	51e2b03a 	or	r17,r10,r7
    c5e8:	280ac03a 	cmpne	r5,r5,zero
    c5ec:	8962b03a 	or	r17,r17,r5
    c5f0:	89a3883a 	add	r17,r17,r6
    c5f4:	2253883a 	add	r9,r4,r9
    c5f8:	898d803a 	cmpltu	r6,r17,r6
    c5fc:	3251883a 	add	r8,r6,r9
    c600:	1021883a 	mov	r16,r2
    c604:	003ee506 	br	c19c <__alt_data_end+0xff00c19c>
    c608:	4984b03a 	or	r2,r9,r6
    c60c:	103e6326 	beq	r2,zero,bf9c <__alt_data_end+0xff00bf9c>
    c610:	8987c83a 	sub	r3,r17,r6
    c614:	88c9803a 	cmpltu	r4,r17,r3
    c618:	4245c83a 	sub	r2,r8,r9
    c61c:	1105c83a 	sub	r2,r2,r4
    c620:	1100202c 	andhi	r4,r2,128
    c624:	203ebb26 	beq	r4,zero,c114 <__alt_data_end+0xff00c114>
    c628:	3463c83a 	sub	r17,r6,r17
    c62c:	4a07c83a 	sub	r3,r9,r8
    c630:	344d803a 	cmpltu	r6,r6,r17
    c634:	1991c83a 	sub	r8,r3,r6
    c638:	3825883a 	mov	r18,r7
    c63c:	003e5706 	br	bf9c <__alt_data_end+0xff00bf9c>
    c640:	4984b03a 	or	r2,r9,r6
    c644:	10002e26 	beq	r2,zero,c700 <__adddf3+0x7e0>
    c648:	4004d0fa 	srli	r2,r8,3
    c64c:	8822d0fa 	srli	r17,r17,3
    c650:	4010977a 	slli	r8,r8,29
    c654:	10c0022c 	andhi	r3,r2,8
    c658:	4462b03a 	or	r17,r8,r17
    c65c:	18000826 	beq	r3,zero,c680 <__adddf3+0x760>
    c660:	4808d0fa 	srli	r4,r9,3
    c664:	20c0022c 	andhi	r3,r4,8
    c668:	1800051e 	bne	r3,zero,c680 <__adddf3+0x760>
    c66c:	300cd0fa 	srli	r6,r6,3
    c670:	4806977a 	slli	r3,r9,29
    c674:	2005883a 	mov	r2,r4
    c678:	3825883a 	mov	r18,r7
    c67c:	19a2b03a 	or	r17,r3,r6
    c680:	8810d77a 	srli	r8,r17,29
    c684:	100490fa 	slli	r2,r2,3
    c688:	882290fa 	slli	r17,r17,3
    c68c:	0401ffc4 	movi	r16,2047
    c690:	4090b03a 	or	r8,r8,r2
    c694:	003e4106 	br	bf9c <__alt_data_end+0xff00bf9c>
    c698:	0141ffc4 	movi	r5,2047
    c69c:	117fc71e 	bne	r2,r5,c5bc <__alt_data_end+0xff00c5bc>
    c6a0:	4811883a 	mov	r8,r9
    c6a4:	3023883a 	mov	r17,r6
    c6a8:	1021883a 	mov	r16,r2
    c6ac:	003e3b06 	br	bf9c <__alt_data_end+0xff00bf9c>
    c6b0:	10002f26 	beq	r2,zero,c770 <__adddf3+0x850>
    c6b4:	4984b03a 	or	r2,r9,r6
    c6b8:	10001126 	beq	r2,zero,c700 <__adddf3+0x7e0>
    c6bc:	4004d0fa 	srli	r2,r8,3
    c6c0:	8822d0fa 	srli	r17,r17,3
    c6c4:	4010977a 	slli	r8,r8,29
    c6c8:	10c0022c 	andhi	r3,r2,8
    c6cc:	4462b03a 	or	r17,r8,r17
    c6d0:	183feb26 	beq	r3,zero,c680 <__alt_data_end+0xff00c680>
    c6d4:	4808d0fa 	srli	r4,r9,3
    c6d8:	20c0022c 	andhi	r3,r4,8
    c6dc:	183fe81e 	bne	r3,zero,c680 <__alt_data_end+0xff00c680>
    c6e0:	300cd0fa 	srli	r6,r6,3
    c6e4:	4806977a 	slli	r3,r9,29
    c6e8:	2005883a 	mov	r2,r4
    c6ec:	19a2b03a 	or	r17,r3,r6
    c6f0:	003fe306 	br	c680 <__alt_data_end+0xff00c680>
    c6f4:	0011883a 	mov	r8,zero
    c6f8:	0005883a 	mov	r2,zero
    c6fc:	003e3f06 	br	bffc <__alt_data_end+0xff00bffc>
    c700:	0401ffc4 	movi	r16,2047
    c704:	003e2506 	br	bf9c <__alt_data_end+0xff00bf9c>
    c708:	0013883a 	mov	r9,zero
    c70c:	003f8406 	br	c520 <__alt_data_end+0xff00c520>
    c710:	0005883a 	mov	r2,zero
    c714:	0007883a 	mov	r3,zero
    c718:	003e8906 	br	c140 <__alt_data_end+0xff00c140>
    c71c:	197ff804 	addi	r5,r3,-32
    c720:	01000804 	movi	r4,32
    c724:	414ad83a 	srl	r5,r8,r5
    c728:	19002426 	beq	r3,r4,c7bc <__adddf3+0x89c>
    c72c:	01001004 	movi	r4,64
    c730:	20c7c83a 	sub	r3,r4,r3
    c734:	40c6983a 	sll	r3,r8,r3
    c738:	1c46b03a 	or	r3,r3,r17
    c73c:	1806c03a 	cmpne	r3,r3,zero
    c740:	28e2b03a 	or	r17,r5,r3
    c744:	0007883a 	mov	r3,zero
    c748:	003f2306 	br	c3d8 <__alt_data_end+0xff00c3d8>
    c74c:	0007883a 	mov	r3,zero
    c750:	5811883a 	mov	r8,r11
    c754:	00bfffc4 	movi	r2,-1
    c758:	0401ffc4 	movi	r16,2047
    c75c:	003e7806 	br	c140 <__alt_data_end+0xff00c140>
    c760:	4462b03a 	or	r17,r8,r17
    c764:	8822c03a 	cmpne	r17,r17,zero
    c768:	0009883a 	mov	r4,zero
    c76c:	003fa006 	br	c5f0 <__alt_data_end+0xff00c5f0>
    c770:	4811883a 	mov	r8,r9
    c774:	3023883a 	mov	r17,r6
    c778:	0401ffc4 	movi	r16,2047
    c77c:	003e0706 	br	bf9c <__alt_data_end+0xff00bf9c>
    c780:	4811883a 	mov	r8,r9
    c784:	3023883a 	mov	r17,r6
    c788:	003e0406 	br	bf9c <__alt_data_end+0xff00bf9c>
    c78c:	21fff804 	addi	r7,r4,-32
    c790:	01400804 	movi	r5,32
    c794:	41ced83a 	srl	r7,r8,r7
    c798:	21400a26 	beq	r4,r5,c7c4 <__adddf3+0x8a4>
    c79c:	01401004 	movi	r5,64
    c7a0:	2909c83a 	sub	r4,r5,r4
    c7a4:	4108983a 	sll	r4,r8,r4
    c7a8:	2448b03a 	or	r4,r4,r17
    c7ac:	2008c03a 	cmpne	r4,r4,zero
    c7b0:	3922b03a 	or	r17,r7,r4
    c7b4:	0009883a 	mov	r4,zero
    c7b8:	003f8d06 	br	c5f0 <__alt_data_end+0xff00c5f0>
    c7bc:	0007883a 	mov	r3,zero
    c7c0:	003fdd06 	br	c738 <__alt_data_end+0xff00c738>
    c7c4:	0009883a 	mov	r4,zero
    c7c8:	003ff706 	br	c7a8 <__alt_data_end+0xff00c7a8>

0000c7cc <__divdf3>:
    c7cc:	defff204 	addi	sp,sp,-56
    c7d0:	dd400915 	stw	r21,36(sp)
    c7d4:	282ad53a 	srli	r21,r5,20
    c7d8:	dd000815 	stw	r20,32(sp)
    c7dc:	2828d7fa 	srli	r20,r5,31
    c7e0:	dc000415 	stw	r16,16(sp)
    c7e4:	04000434 	movhi	r16,16
    c7e8:	df000c15 	stw	fp,48(sp)
    c7ec:	843fffc4 	addi	r16,r16,-1
    c7f0:	dfc00d15 	stw	ra,52(sp)
    c7f4:	ddc00b15 	stw	r23,44(sp)
    c7f8:	dd800a15 	stw	r22,40(sp)
    c7fc:	dcc00715 	stw	r19,28(sp)
    c800:	dc800615 	stw	r18,24(sp)
    c804:	dc400515 	stw	r17,20(sp)
    c808:	ad41ffcc 	andi	r21,r21,2047
    c80c:	2c20703a 	and	r16,r5,r16
    c810:	a7003fcc 	andi	fp,r20,255
    c814:	a8006126 	beq	r21,zero,c99c <__divdf3+0x1d0>
    c818:	0081ffc4 	movi	r2,2047
    c81c:	2025883a 	mov	r18,r4
    c820:	a8803726 	beq	r21,r2,c900 <__divdf3+0x134>
    c824:	80800434 	orhi	r2,r16,16
    c828:	100490fa 	slli	r2,r2,3
    c82c:	2020d77a 	srli	r16,r4,29
    c830:	202490fa 	slli	r18,r4,3
    c834:	ad7f0044 	addi	r21,r21,-1023
    c838:	80a0b03a 	or	r16,r16,r2
    c83c:	0027883a 	mov	r19,zero
    c840:	0013883a 	mov	r9,zero
    c844:	3804d53a 	srli	r2,r7,20
    c848:	382cd7fa 	srli	r22,r7,31
    c84c:	04400434 	movhi	r17,16
    c850:	8c7fffc4 	addi	r17,r17,-1
    c854:	1081ffcc 	andi	r2,r2,2047
    c858:	3011883a 	mov	r8,r6
    c85c:	3c62703a 	and	r17,r7,r17
    c860:	b5c03fcc 	andi	r23,r22,255
    c864:	10006c26 	beq	r2,zero,ca18 <__divdf3+0x24c>
    c868:	00c1ffc4 	movi	r3,2047
    c86c:	10c06426 	beq	r2,r3,ca00 <__divdf3+0x234>
    c870:	88c00434 	orhi	r3,r17,16
    c874:	180690fa 	slli	r3,r3,3
    c878:	3022d77a 	srli	r17,r6,29
    c87c:	301090fa 	slli	r8,r6,3
    c880:	10bf0044 	addi	r2,r2,-1023
    c884:	88e2b03a 	or	r17,r17,r3
    c888:	000f883a 	mov	r7,zero
    c88c:	a58cf03a 	xor	r6,r20,r22
    c890:	3cc8b03a 	or	r4,r7,r19
    c894:	a8abc83a 	sub	r21,r21,r2
    c898:	008003c4 	movi	r2,15
    c89c:	3007883a 	mov	r3,r6
    c8a0:	34c03fcc 	andi	r19,r6,255
    c8a4:	11009036 	bltu	r2,r4,cae8 <__divdf3+0x31c>
    c8a8:	200890ba 	slli	r4,r4,2
    c8ac:	00800074 	movhi	r2,1
    c8b0:	10b23004 	addi	r2,r2,-14144
    c8b4:	2089883a 	add	r4,r4,r2
    c8b8:	20800017 	ldw	r2,0(r4)
    c8bc:	1000683a 	jmp	r2
    c8c0:	0000cae8 	cmpgeui	zero,zero,811
    c8c4:	0000c938 	rdprs	zero,zero,804
    c8c8:	0000cad8 	cmpnei	zero,zero,811
    c8cc:	0000c92c 	andhi	zero,zero,804
    c8d0:	0000cad8 	cmpnei	zero,zero,811
    c8d4:	0000caac 	andhi	zero,zero,810
    c8d8:	0000cad8 	cmpnei	zero,zero,811
    c8dc:	0000c92c 	andhi	zero,zero,804
    c8e0:	0000c938 	rdprs	zero,zero,804
    c8e4:	0000c938 	rdprs	zero,zero,804
    c8e8:	0000caac 	andhi	zero,zero,810
    c8ec:	0000c92c 	andhi	zero,zero,804
    c8f0:	0000c91c 	xori	zero,zero,804
    c8f4:	0000c91c 	xori	zero,zero,804
    c8f8:	0000c91c 	xori	zero,zero,804
    c8fc:	0000cdcc 	andi	zero,zero,823
    c900:	2404b03a 	or	r2,r4,r16
    c904:	1000661e 	bne	r2,zero,caa0 <__divdf3+0x2d4>
    c908:	04c00204 	movi	r19,8
    c90c:	0021883a 	mov	r16,zero
    c910:	0025883a 	mov	r18,zero
    c914:	02400084 	movi	r9,2
    c918:	003fca06 	br	c844 <__alt_data_end+0xff00c844>
    c91c:	8023883a 	mov	r17,r16
    c920:	9011883a 	mov	r8,r18
    c924:	e02f883a 	mov	r23,fp
    c928:	480f883a 	mov	r7,r9
    c92c:	00800084 	movi	r2,2
    c930:	3881311e 	bne	r7,r2,cdf8 <__divdf3+0x62c>
    c934:	b827883a 	mov	r19,r23
    c938:	98c0004c 	andi	r3,r19,1
    c93c:	0081ffc4 	movi	r2,2047
    c940:	000b883a 	mov	r5,zero
    c944:	0025883a 	mov	r18,zero
    c948:	1004953a 	slli	r2,r2,20
    c94c:	18c03fcc 	andi	r3,r3,255
    c950:	04400434 	movhi	r17,16
    c954:	8c7fffc4 	addi	r17,r17,-1
    c958:	180697fa 	slli	r3,r3,31
    c95c:	2c4a703a 	and	r5,r5,r17
    c960:	288ab03a 	or	r5,r5,r2
    c964:	28c6b03a 	or	r3,r5,r3
    c968:	9005883a 	mov	r2,r18
    c96c:	dfc00d17 	ldw	ra,52(sp)
    c970:	df000c17 	ldw	fp,48(sp)
    c974:	ddc00b17 	ldw	r23,44(sp)
    c978:	dd800a17 	ldw	r22,40(sp)
    c97c:	dd400917 	ldw	r21,36(sp)
    c980:	dd000817 	ldw	r20,32(sp)
    c984:	dcc00717 	ldw	r19,28(sp)
    c988:	dc800617 	ldw	r18,24(sp)
    c98c:	dc400517 	ldw	r17,20(sp)
    c990:	dc000417 	ldw	r16,16(sp)
    c994:	dec00e04 	addi	sp,sp,56
    c998:	f800283a 	ret
    c99c:	2404b03a 	or	r2,r4,r16
    c9a0:	2027883a 	mov	r19,r4
    c9a4:	10003926 	beq	r2,zero,ca8c <__divdf3+0x2c0>
    c9a8:	80012e26 	beq	r16,zero,ce64 <__divdf3+0x698>
    c9ac:	8009883a 	mov	r4,r16
    c9b0:	d9800315 	stw	r6,12(sp)
    c9b4:	d9c00215 	stw	r7,8(sp)
    c9b8:	000e5240 	call	e524 <__clzsi2>
    c9bc:	d9800317 	ldw	r6,12(sp)
    c9c0:	d9c00217 	ldw	r7,8(sp)
    c9c4:	113ffd44 	addi	r4,r2,-11
    c9c8:	00c00704 	movi	r3,28
    c9cc:	19012116 	blt	r3,r4,ce54 <__divdf3+0x688>
    c9d0:	00c00744 	movi	r3,29
    c9d4:	147ffe04 	addi	r17,r2,-8
    c9d8:	1907c83a 	sub	r3,r3,r4
    c9dc:	8460983a 	sll	r16,r16,r17
    c9e0:	98c6d83a 	srl	r3,r19,r3
    c9e4:	9c64983a 	sll	r18,r19,r17
    c9e8:	1c20b03a 	or	r16,r3,r16
    c9ec:	1080fcc4 	addi	r2,r2,1011
    c9f0:	00abc83a 	sub	r21,zero,r2
    c9f4:	0027883a 	mov	r19,zero
    c9f8:	0013883a 	mov	r9,zero
    c9fc:	003f9106 	br	c844 <__alt_data_end+0xff00c844>
    ca00:	3446b03a 	or	r3,r6,r17
    ca04:	18001f1e 	bne	r3,zero,ca84 <__divdf3+0x2b8>
    ca08:	0023883a 	mov	r17,zero
    ca0c:	0011883a 	mov	r8,zero
    ca10:	01c00084 	movi	r7,2
    ca14:	003f9d06 	br	c88c <__alt_data_end+0xff00c88c>
    ca18:	3446b03a 	or	r3,r6,r17
    ca1c:	18001526 	beq	r3,zero,ca74 <__divdf3+0x2a8>
    ca20:	88011b26 	beq	r17,zero,ce90 <__divdf3+0x6c4>
    ca24:	8809883a 	mov	r4,r17
    ca28:	d9800315 	stw	r6,12(sp)
    ca2c:	da400115 	stw	r9,4(sp)
    ca30:	000e5240 	call	e524 <__clzsi2>
    ca34:	d9800317 	ldw	r6,12(sp)
    ca38:	da400117 	ldw	r9,4(sp)
    ca3c:	113ffd44 	addi	r4,r2,-11
    ca40:	00c00704 	movi	r3,28
    ca44:	19010e16 	blt	r3,r4,ce80 <__divdf3+0x6b4>
    ca48:	00c00744 	movi	r3,29
    ca4c:	123ffe04 	addi	r8,r2,-8
    ca50:	1907c83a 	sub	r3,r3,r4
    ca54:	8a22983a 	sll	r17,r17,r8
    ca58:	30c6d83a 	srl	r3,r6,r3
    ca5c:	3210983a 	sll	r8,r6,r8
    ca60:	1c62b03a 	or	r17,r3,r17
    ca64:	1080fcc4 	addi	r2,r2,1011
    ca68:	0085c83a 	sub	r2,zero,r2
    ca6c:	000f883a 	mov	r7,zero
    ca70:	003f8606 	br	c88c <__alt_data_end+0xff00c88c>
    ca74:	0023883a 	mov	r17,zero
    ca78:	0011883a 	mov	r8,zero
    ca7c:	01c00044 	movi	r7,1
    ca80:	003f8206 	br	c88c <__alt_data_end+0xff00c88c>
    ca84:	01c000c4 	movi	r7,3
    ca88:	003f8006 	br	c88c <__alt_data_end+0xff00c88c>
    ca8c:	04c00104 	movi	r19,4
    ca90:	0021883a 	mov	r16,zero
    ca94:	0025883a 	mov	r18,zero
    ca98:	02400044 	movi	r9,1
    ca9c:	003f6906 	br	c844 <__alt_data_end+0xff00c844>
    caa0:	04c00304 	movi	r19,12
    caa4:	024000c4 	movi	r9,3
    caa8:	003f6606 	br	c844 <__alt_data_end+0xff00c844>
    caac:	01400434 	movhi	r5,16
    cab0:	0007883a 	mov	r3,zero
    cab4:	297fffc4 	addi	r5,r5,-1
    cab8:	04bfffc4 	movi	r18,-1
    cabc:	0081ffc4 	movi	r2,2047
    cac0:	003fa106 	br	c948 <__alt_data_end+0xff00c948>
    cac4:	00c00044 	movi	r3,1
    cac8:	1887c83a 	sub	r3,r3,r2
    cacc:	01000e04 	movi	r4,56
    cad0:	20c1210e 	bge	r4,r3,cf58 <__divdf3+0x78c>
    cad4:	98c0004c 	andi	r3,r19,1
    cad8:	0005883a 	mov	r2,zero
    cadc:	000b883a 	mov	r5,zero
    cae0:	0025883a 	mov	r18,zero
    cae4:	003f9806 	br	c948 <__alt_data_end+0xff00c948>
    cae8:	8c00fd36 	bltu	r17,r16,cee0 <__divdf3+0x714>
    caec:	8440fb26 	beq	r16,r17,cedc <__divdf3+0x710>
    caf0:	8007883a 	mov	r3,r16
    caf4:	ad7fffc4 	addi	r21,r21,-1
    caf8:	0021883a 	mov	r16,zero
    cafc:	4004d63a 	srli	r2,r8,24
    cb00:	8822923a 	slli	r17,r17,8
    cb04:	1809883a 	mov	r4,r3
    cb08:	402c923a 	slli	r22,r8,8
    cb0c:	88b8b03a 	or	fp,r17,r2
    cb10:	e028d43a 	srli	r20,fp,16
    cb14:	d8c00015 	stw	r3,0(sp)
    cb18:	e5ffffcc 	andi	r23,fp,65535
    cb1c:	a00b883a 	mov	r5,r20
    cb20:	0001d380 	call	1d38 <__udivsi3>
    cb24:	d8c00017 	ldw	r3,0(sp)
    cb28:	a00b883a 	mov	r5,r20
    cb2c:	d8800315 	stw	r2,12(sp)
    cb30:	1809883a 	mov	r4,r3
    cb34:	0001d9c0 	call	1d9c <__umodsi3>
    cb38:	d9800317 	ldw	r6,12(sp)
    cb3c:	1006943a 	slli	r3,r2,16
    cb40:	9004d43a 	srli	r2,r18,16
    cb44:	b9a3383a 	mul	r17,r23,r6
    cb48:	10c4b03a 	or	r2,r2,r3
    cb4c:	1440062e 	bgeu	r2,r17,cb68 <__divdf3+0x39c>
    cb50:	1705883a 	add	r2,r2,fp
    cb54:	30ffffc4 	addi	r3,r6,-1
    cb58:	1700ee36 	bltu	r2,fp,cf14 <__divdf3+0x748>
    cb5c:	1440ed2e 	bgeu	r2,r17,cf14 <__divdf3+0x748>
    cb60:	31bfff84 	addi	r6,r6,-2
    cb64:	1705883a 	add	r2,r2,fp
    cb68:	1463c83a 	sub	r17,r2,r17
    cb6c:	a00b883a 	mov	r5,r20
    cb70:	8809883a 	mov	r4,r17
    cb74:	d9800315 	stw	r6,12(sp)
    cb78:	0001d380 	call	1d38 <__udivsi3>
    cb7c:	a00b883a 	mov	r5,r20
    cb80:	8809883a 	mov	r4,r17
    cb84:	d8800215 	stw	r2,8(sp)
    cb88:	0001d9c0 	call	1d9c <__umodsi3>
    cb8c:	d9c00217 	ldw	r7,8(sp)
    cb90:	1004943a 	slli	r2,r2,16
    cb94:	94bfffcc 	andi	r18,r18,65535
    cb98:	b9d1383a 	mul	r8,r23,r7
    cb9c:	90a4b03a 	or	r18,r18,r2
    cba0:	d9800317 	ldw	r6,12(sp)
    cba4:	9200062e 	bgeu	r18,r8,cbc0 <__divdf3+0x3f4>
    cba8:	9725883a 	add	r18,r18,fp
    cbac:	38bfffc4 	addi	r2,r7,-1
    cbb0:	9700d636 	bltu	r18,fp,cf0c <__divdf3+0x740>
    cbb4:	9200d52e 	bgeu	r18,r8,cf0c <__divdf3+0x740>
    cbb8:	39ffff84 	addi	r7,r7,-2
    cbbc:	9725883a 	add	r18,r18,fp
    cbc0:	3004943a 	slli	r2,r6,16
    cbc4:	b012d43a 	srli	r9,r22,16
    cbc8:	b1bfffcc 	andi	r6,r22,65535
    cbcc:	11e2b03a 	or	r17,r2,r7
    cbd0:	8806d43a 	srli	r3,r17,16
    cbd4:	893fffcc 	andi	r4,r17,65535
    cbd8:	218b383a 	mul	r5,r4,r6
    cbdc:	30c5383a 	mul	r2,r6,r3
    cbe0:	2249383a 	mul	r4,r4,r9
    cbe4:	280ed43a 	srli	r7,r5,16
    cbe8:	9225c83a 	sub	r18,r18,r8
    cbec:	2089883a 	add	r4,r4,r2
    cbf0:	3909883a 	add	r4,r7,r4
    cbf4:	1a47383a 	mul	r3,r3,r9
    cbf8:	2080022e 	bgeu	r4,r2,cc04 <__divdf3+0x438>
    cbfc:	00800074 	movhi	r2,1
    cc00:	1887883a 	add	r3,r3,r2
    cc04:	2004d43a 	srli	r2,r4,16
    cc08:	2008943a 	slli	r4,r4,16
    cc0c:	297fffcc 	andi	r5,r5,65535
    cc10:	10c7883a 	add	r3,r2,r3
    cc14:	2149883a 	add	r4,r4,r5
    cc18:	90c0a536 	bltu	r18,r3,ceb0 <__divdf3+0x6e4>
    cc1c:	90c0bf26 	beq	r18,r3,cf1c <__divdf3+0x750>
    cc20:	90c7c83a 	sub	r3,r18,r3
    cc24:	810fc83a 	sub	r7,r16,r4
    cc28:	81e5803a 	cmpltu	r18,r16,r7
    cc2c:	1ca5c83a 	sub	r18,r3,r18
    cc30:	e480c126 	beq	fp,r18,cf38 <__divdf3+0x76c>
    cc34:	a00b883a 	mov	r5,r20
    cc38:	9009883a 	mov	r4,r18
    cc3c:	d9800315 	stw	r6,12(sp)
    cc40:	d9c00215 	stw	r7,8(sp)
    cc44:	da400115 	stw	r9,4(sp)
    cc48:	0001d380 	call	1d38 <__udivsi3>
    cc4c:	a00b883a 	mov	r5,r20
    cc50:	9009883a 	mov	r4,r18
    cc54:	d8800015 	stw	r2,0(sp)
    cc58:	0001d9c0 	call	1d9c <__umodsi3>
    cc5c:	d9c00217 	ldw	r7,8(sp)
    cc60:	da000017 	ldw	r8,0(sp)
    cc64:	1006943a 	slli	r3,r2,16
    cc68:	3804d43a 	srli	r2,r7,16
    cc6c:	ba21383a 	mul	r16,r23,r8
    cc70:	d9800317 	ldw	r6,12(sp)
    cc74:	10c4b03a 	or	r2,r2,r3
    cc78:	da400117 	ldw	r9,4(sp)
    cc7c:	1400062e 	bgeu	r2,r16,cc98 <__divdf3+0x4cc>
    cc80:	1705883a 	add	r2,r2,fp
    cc84:	40ffffc4 	addi	r3,r8,-1
    cc88:	1700ad36 	bltu	r2,fp,cf40 <__divdf3+0x774>
    cc8c:	1400ac2e 	bgeu	r2,r16,cf40 <__divdf3+0x774>
    cc90:	423fff84 	addi	r8,r8,-2
    cc94:	1705883a 	add	r2,r2,fp
    cc98:	1421c83a 	sub	r16,r2,r16
    cc9c:	a00b883a 	mov	r5,r20
    cca0:	8009883a 	mov	r4,r16
    cca4:	d9800315 	stw	r6,12(sp)
    cca8:	d9c00215 	stw	r7,8(sp)
    ccac:	da000015 	stw	r8,0(sp)
    ccb0:	da400115 	stw	r9,4(sp)
    ccb4:	0001d380 	call	1d38 <__udivsi3>
    ccb8:	8009883a 	mov	r4,r16
    ccbc:	a00b883a 	mov	r5,r20
    ccc0:	1025883a 	mov	r18,r2
    ccc4:	0001d9c0 	call	1d9c <__umodsi3>
    ccc8:	d9c00217 	ldw	r7,8(sp)
    cccc:	1004943a 	slli	r2,r2,16
    ccd0:	bcaf383a 	mul	r23,r23,r18
    ccd4:	393fffcc 	andi	r4,r7,65535
    ccd8:	2088b03a 	or	r4,r4,r2
    ccdc:	d9800317 	ldw	r6,12(sp)
    cce0:	da000017 	ldw	r8,0(sp)
    cce4:	da400117 	ldw	r9,4(sp)
    cce8:	25c0062e 	bgeu	r4,r23,cd04 <__divdf3+0x538>
    ccec:	2709883a 	add	r4,r4,fp
    ccf0:	90bfffc4 	addi	r2,r18,-1
    ccf4:	27009436 	bltu	r4,fp,cf48 <__divdf3+0x77c>
    ccf8:	25c0932e 	bgeu	r4,r23,cf48 <__divdf3+0x77c>
    ccfc:	94bfff84 	addi	r18,r18,-2
    cd00:	2709883a 	add	r4,r4,fp
    cd04:	4004943a 	slli	r2,r8,16
    cd08:	25efc83a 	sub	r23,r4,r23
    cd0c:	1490b03a 	or	r8,r2,r18
    cd10:	4008d43a 	srli	r4,r8,16
    cd14:	40ffffcc 	andi	r3,r8,65535
    cd18:	30c5383a 	mul	r2,r6,r3
    cd1c:	1a47383a 	mul	r3,r3,r9
    cd20:	310d383a 	mul	r6,r6,r4
    cd24:	100ad43a 	srli	r5,r2,16
    cd28:	4913383a 	mul	r9,r9,r4
    cd2c:	1987883a 	add	r3,r3,r6
    cd30:	28c7883a 	add	r3,r5,r3
    cd34:	1980022e 	bgeu	r3,r6,cd40 <__divdf3+0x574>
    cd38:	01000074 	movhi	r4,1
    cd3c:	4913883a 	add	r9,r9,r4
    cd40:	1808d43a 	srli	r4,r3,16
    cd44:	1806943a 	slli	r3,r3,16
    cd48:	10bfffcc 	andi	r2,r2,65535
    cd4c:	2253883a 	add	r9,r4,r9
    cd50:	1887883a 	add	r3,r3,r2
    cd54:	ba403836 	bltu	r23,r9,ce38 <__divdf3+0x66c>
    cd58:	ba403626 	beq	r23,r9,ce34 <__divdf3+0x668>
    cd5c:	42000054 	ori	r8,r8,1
    cd60:	a880ffc4 	addi	r2,r21,1023
    cd64:	00bf570e 	bge	zero,r2,cac4 <__alt_data_end+0xff00cac4>
    cd68:	40c001cc 	andi	r3,r8,7
    cd6c:	18000726 	beq	r3,zero,cd8c <__divdf3+0x5c0>
    cd70:	40c003cc 	andi	r3,r8,15
    cd74:	01000104 	movi	r4,4
    cd78:	19000426 	beq	r3,r4,cd8c <__divdf3+0x5c0>
    cd7c:	4107883a 	add	r3,r8,r4
    cd80:	1a11803a 	cmpltu	r8,r3,r8
    cd84:	8a23883a 	add	r17,r17,r8
    cd88:	1811883a 	mov	r8,r3
    cd8c:	88c0402c 	andhi	r3,r17,256
    cd90:	18000426 	beq	r3,zero,cda4 <__divdf3+0x5d8>
    cd94:	00ffc034 	movhi	r3,65280
    cd98:	18ffffc4 	addi	r3,r3,-1
    cd9c:	a8810004 	addi	r2,r21,1024
    cda0:	88e2703a 	and	r17,r17,r3
    cda4:	00c1ff84 	movi	r3,2046
    cda8:	18bee316 	blt	r3,r2,c938 <__alt_data_end+0xff00c938>
    cdac:	8824977a 	slli	r18,r17,29
    cdb0:	4010d0fa 	srli	r8,r8,3
    cdb4:	8822927a 	slli	r17,r17,9
    cdb8:	1081ffcc 	andi	r2,r2,2047
    cdbc:	9224b03a 	or	r18,r18,r8
    cdc0:	880ad33a 	srli	r5,r17,12
    cdc4:	98c0004c 	andi	r3,r19,1
    cdc8:	003edf06 	br	c948 <__alt_data_end+0xff00c948>
    cdcc:	8080022c 	andhi	r2,r16,8
    cdd0:	10001226 	beq	r2,zero,ce1c <__divdf3+0x650>
    cdd4:	8880022c 	andhi	r2,r17,8
    cdd8:	1000101e 	bne	r2,zero,ce1c <__divdf3+0x650>
    cddc:	00800434 	movhi	r2,16
    cde0:	89400234 	orhi	r5,r17,8
    cde4:	10bfffc4 	addi	r2,r2,-1
    cde8:	b007883a 	mov	r3,r22
    cdec:	288a703a 	and	r5,r5,r2
    cdf0:	4025883a 	mov	r18,r8
    cdf4:	003f3106 	br	cabc <__alt_data_end+0xff00cabc>
    cdf8:	008000c4 	movi	r2,3
    cdfc:	3880a626 	beq	r7,r2,d098 <__divdf3+0x8cc>
    ce00:	00800044 	movi	r2,1
    ce04:	3880521e 	bne	r7,r2,cf50 <__divdf3+0x784>
    ce08:	b807883a 	mov	r3,r23
    ce0c:	0005883a 	mov	r2,zero
    ce10:	000b883a 	mov	r5,zero
    ce14:	0025883a 	mov	r18,zero
    ce18:	003ecb06 	br	c948 <__alt_data_end+0xff00c948>
    ce1c:	00800434 	movhi	r2,16
    ce20:	81400234 	orhi	r5,r16,8
    ce24:	10bfffc4 	addi	r2,r2,-1
    ce28:	a007883a 	mov	r3,r20
    ce2c:	288a703a 	and	r5,r5,r2
    ce30:	003f2206 	br	cabc <__alt_data_end+0xff00cabc>
    ce34:	183fca26 	beq	r3,zero,cd60 <__alt_data_end+0xff00cd60>
    ce38:	e5ef883a 	add	r23,fp,r23
    ce3c:	40bfffc4 	addi	r2,r8,-1
    ce40:	bf00392e 	bgeu	r23,fp,cf28 <__divdf3+0x75c>
    ce44:	1011883a 	mov	r8,r2
    ce48:	ba7fc41e 	bne	r23,r9,cd5c <__alt_data_end+0xff00cd5c>
    ce4c:	b0ffc31e 	bne	r22,r3,cd5c <__alt_data_end+0xff00cd5c>
    ce50:	003fc306 	br	cd60 <__alt_data_end+0xff00cd60>
    ce54:	143ff604 	addi	r16,r2,-40
    ce58:	9c20983a 	sll	r16,r19,r16
    ce5c:	0025883a 	mov	r18,zero
    ce60:	003ee206 	br	c9ec <__alt_data_end+0xff00c9ec>
    ce64:	d9800315 	stw	r6,12(sp)
    ce68:	d9c00215 	stw	r7,8(sp)
    ce6c:	000e5240 	call	e524 <__clzsi2>
    ce70:	10800804 	addi	r2,r2,32
    ce74:	d9c00217 	ldw	r7,8(sp)
    ce78:	d9800317 	ldw	r6,12(sp)
    ce7c:	003ed106 	br	c9c4 <__alt_data_end+0xff00c9c4>
    ce80:	147ff604 	addi	r17,r2,-40
    ce84:	3462983a 	sll	r17,r6,r17
    ce88:	0011883a 	mov	r8,zero
    ce8c:	003ef506 	br	ca64 <__alt_data_end+0xff00ca64>
    ce90:	3009883a 	mov	r4,r6
    ce94:	d9800315 	stw	r6,12(sp)
    ce98:	da400115 	stw	r9,4(sp)
    ce9c:	000e5240 	call	e524 <__clzsi2>
    cea0:	10800804 	addi	r2,r2,32
    cea4:	da400117 	ldw	r9,4(sp)
    cea8:	d9800317 	ldw	r6,12(sp)
    ceac:	003ee306 	br	ca3c <__alt_data_end+0xff00ca3c>
    ceb0:	85a1883a 	add	r16,r16,r22
    ceb4:	8585803a 	cmpltu	r2,r16,r22
    ceb8:	1705883a 	add	r2,r2,fp
    cebc:	14a5883a 	add	r18,r2,r18
    cec0:	88bfffc4 	addi	r2,r17,-1
    cec4:	e4800c2e 	bgeu	fp,r18,cef8 <__divdf3+0x72c>
    cec8:	90c03e36 	bltu	r18,r3,cfc4 <__divdf3+0x7f8>
    cecc:	1c806926 	beq	r3,r18,d074 <__divdf3+0x8a8>
    ced0:	90c7c83a 	sub	r3,r18,r3
    ced4:	1023883a 	mov	r17,r2
    ced8:	003f5206 	br	cc24 <__alt_data_end+0xff00cc24>
    cedc:	923f0436 	bltu	r18,r8,caf0 <__alt_data_end+0xff00caf0>
    cee0:	800897fa 	slli	r4,r16,31
    cee4:	9004d07a 	srli	r2,r18,1
    cee8:	8006d07a 	srli	r3,r16,1
    ceec:	902097fa 	slli	r16,r18,31
    cef0:	20a4b03a 	or	r18,r4,r2
    cef4:	003f0106 	br	cafc <__alt_data_end+0xff00cafc>
    cef8:	e4bff51e 	bne	fp,r18,ced0 <__alt_data_end+0xff00ced0>
    cefc:	85bff22e 	bgeu	r16,r22,cec8 <__alt_data_end+0xff00cec8>
    cf00:	e0c7c83a 	sub	r3,fp,r3
    cf04:	1023883a 	mov	r17,r2
    cf08:	003f4606 	br	cc24 <__alt_data_end+0xff00cc24>
    cf0c:	100f883a 	mov	r7,r2
    cf10:	003f2b06 	br	cbc0 <__alt_data_end+0xff00cbc0>
    cf14:	180d883a 	mov	r6,r3
    cf18:	003f1306 	br	cb68 <__alt_data_end+0xff00cb68>
    cf1c:	813fe436 	bltu	r16,r4,ceb0 <__alt_data_end+0xff00ceb0>
    cf20:	0007883a 	mov	r3,zero
    cf24:	003f3f06 	br	cc24 <__alt_data_end+0xff00cc24>
    cf28:	ba402c36 	bltu	r23,r9,cfdc <__divdf3+0x810>
    cf2c:	4dc05426 	beq	r9,r23,d080 <__divdf3+0x8b4>
    cf30:	1011883a 	mov	r8,r2
    cf34:	003f8906 	br	cd5c <__alt_data_end+0xff00cd5c>
    cf38:	023fffc4 	movi	r8,-1
    cf3c:	003f8806 	br	cd60 <__alt_data_end+0xff00cd60>
    cf40:	1811883a 	mov	r8,r3
    cf44:	003f5406 	br	cc98 <__alt_data_end+0xff00cc98>
    cf48:	1025883a 	mov	r18,r2
    cf4c:	003f6d06 	br	cd04 <__alt_data_end+0xff00cd04>
    cf50:	b827883a 	mov	r19,r23
    cf54:	003f8206 	br	cd60 <__alt_data_end+0xff00cd60>
    cf58:	010007c4 	movi	r4,31
    cf5c:	20c02616 	blt	r4,r3,cff8 <__divdf3+0x82c>
    cf60:	00800804 	movi	r2,32
    cf64:	10c5c83a 	sub	r2,r2,r3
    cf68:	888a983a 	sll	r5,r17,r2
    cf6c:	40c8d83a 	srl	r4,r8,r3
    cf70:	4084983a 	sll	r2,r8,r2
    cf74:	88e2d83a 	srl	r17,r17,r3
    cf78:	2906b03a 	or	r3,r5,r4
    cf7c:	1004c03a 	cmpne	r2,r2,zero
    cf80:	1886b03a 	or	r3,r3,r2
    cf84:	188001cc 	andi	r2,r3,7
    cf88:	10000726 	beq	r2,zero,cfa8 <__divdf3+0x7dc>
    cf8c:	188003cc 	andi	r2,r3,15
    cf90:	01000104 	movi	r4,4
    cf94:	11000426 	beq	r2,r4,cfa8 <__divdf3+0x7dc>
    cf98:	1805883a 	mov	r2,r3
    cf9c:	10c00104 	addi	r3,r2,4
    cfa0:	1885803a 	cmpltu	r2,r3,r2
    cfa4:	88a3883a 	add	r17,r17,r2
    cfa8:	8880202c 	andhi	r2,r17,128
    cfac:	10002726 	beq	r2,zero,d04c <__divdf3+0x880>
    cfb0:	98c0004c 	andi	r3,r19,1
    cfb4:	00800044 	movi	r2,1
    cfb8:	000b883a 	mov	r5,zero
    cfbc:	0025883a 	mov	r18,zero
    cfc0:	003e6106 	br	c948 <__alt_data_end+0xff00c948>
    cfc4:	85a1883a 	add	r16,r16,r22
    cfc8:	8585803a 	cmpltu	r2,r16,r22
    cfcc:	1705883a 	add	r2,r2,fp
    cfd0:	14a5883a 	add	r18,r2,r18
    cfd4:	8c7fff84 	addi	r17,r17,-2
    cfd8:	003f1106 	br	cc20 <__alt_data_end+0xff00cc20>
    cfdc:	b589883a 	add	r4,r22,r22
    cfe0:	25ad803a 	cmpltu	r22,r4,r22
    cfe4:	b739883a 	add	fp,r22,fp
    cfe8:	40bfff84 	addi	r2,r8,-2
    cfec:	bf2f883a 	add	r23,r23,fp
    cff0:	202d883a 	mov	r22,r4
    cff4:	003f9306 	br	ce44 <__alt_data_end+0xff00ce44>
    cff8:	013ff844 	movi	r4,-31
    cffc:	2085c83a 	sub	r2,r4,r2
    d000:	8888d83a 	srl	r4,r17,r2
    d004:	00800804 	movi	r2,32
    d008:	18802126 	beq	r3,r2,d090 <__divdf3+0x8c4>
    d00c:	00801004 	movi	r2,64
    d010:	10c5c83a 	sub	r2,r2,r3
    d014:	8884983a 	sll	r2,r17,r2
    d018:	1204b03a 	or	r2,r2,r8
    d01c:	1004c03a 	cmpne	r2,r2,zero
    d020:	2084b03a 	or	r2,r4,r2
    d024:	144001cc 	andi	r17,r2,7
    d028:	88000d1e 	bne	r17,zero,d060 <__divdf3+0x894>
    d02c:	000b883a 	mov	r5,zero
    d030:	1024d0fa 	srli	r18,r2,3
    d034:	98c0004c 	andi	r3,r19,1
    d038:	0005883a 	mov	r2,zero
    d03c:	9464b03a 	or	r18,r18,r17
    d040:	003e4106 	br	c948 <__alt_data_end+0xff00c948>
    d044:	1007883a 	mov	r3,r2
    d048:	0023883a 	mov	r17,zero
    d04c:	880a927a 	slli	r5,r17,9
    d050:	1805883a 	mov	r2,r3
    d054:	8822977a 	slli	r17,r17,29
    d058:	280ad33a 	srli	r5,r5,12
    d05c:	003ff406 	br	d030 <__alt_data_end+0xff00d030>
    d060:	10c003cc 	andi	r3,r2,15
    d064:	01000104 	movi	r4,4
    d068:	193ff626 	beq	r3,r4,d044 <__alt_data_end+0xff00d044>
    d06c:	0023883a 	mov	r17,zero
    d070:	003fca06 	br	cf9c <__alt_data_end+0xff00cf9c>
    d074:	813fd336 	bltu	r16,r4,cfc4 <__alt_data_end+0xff00cfc4>
    d078:	1023883a 	mov	r17,r2
    d07c:	003fa806 	br	cf20 <__alt_data_end+0xff00cf20>
    d080:	b0ffd636 	bltu	r22,r3,cfdc <__alt_data_end+0xff00cfdc>
    d084:	1011883a 	mov	r8,r2
    d088:	b0ff341e 	bne	r22,r3,cd5c <__alt_data_end+0xff00cd5c>
    d08c:	003f3406 	br	cd60 <__alt_data_end+0xff00cd60>
    d090:	0005883a 	mov	r2,zero
    d094:	003fe006 	br	d018 <__alt_data_end+0xff00d018>
    d098:	00800434 	movhi	r2,16
    d09c:	89400234 	orhi	r5,r17,8
    d0a0:	10bfffc4 	addi	r2,r2,-1
    d0a4:	b807883a 	mov	r3,r23
    d0a8:	288a703a 	and	r5,r5,r2
    d0ac:	4025883a 	mov	r18,r8
    d0b0:	003e8206 	br	cabc <__alt_data_end+0xff00cabc>

0000d0b4 <__eqdf2>:
    d0b4:	2804d53a 	srli	r2,r5,20
    d0b8:	3806d53a 	srli	r3,r7,20
    d0bc:	02000434 	movhi	r8,16
    d0c0:	423fffc4 	addi	r8,r8,-1
    d0c4:	1081ffcc 	andi	r2,r2,2047
    d0c8:	0281ffc4 	movi	r10,2047
    d0cc:	2a12703a 	and	r9,r5,r8
    d0d0:	18c1ffcc 	andi	r3,r3,2047
    d0d4:	3a10703a 	and	r8,r7,r8
    d0d8:	280ad7fa 	srli	r5,r5,31
    d0dc:	380ed7fa 	srli	r7,r7,31
    d0e0:	12801026 	beq	r2,r10,d124 <__eqdf2+0x70>
    d0e4:	0281ffc4 	movi	r10,2047
    d0e8:	1a800a26 	beq	r3,r10,d114 <__eqdf2+0x60>
    d0ec:	10c00226 	beq	r2,r3,d0f8 <__eqdf2+0x44>
    d0f0:	00800044 	movi	r2,1
    d0f4:	f800283a 	ret
    d0f8:	4a3ffd1e 	bne	r9,r8,d0f0 <__alt_data_end+0xff00d0f0>
    d0fc:	21bffc1e 	bne	r4,r6,d0f0 <__alt_data_end+0xff00d0f0>
    d100:	29c00c26 	beq	r5,r7,d134 <__eqdf2+0x80>
    d104:	103ffa1e 	bne	r2,zero,d0f0 <__alt_data_end+0xff00d0f0>
    d108:	2244b03a 	or	r2,r4,r9
    d10c:	1004c03a 	cmpne	r2,r2,zero
    d110:	f800283a 	ret
    d114:	3214b03a 	or	r10,r6,r8
    d118:	503ff426 	beq	r10,zero,d0ec <__alt_data_end+0xff00d0ec>
    d11c:	00800044 	movi	r2,1
    d120:	f800283a 	ret
    d124:	2254b03a 	or	r10,r4,r9
    d128:	503fee26 	beq	r10,zero,d0e4 <__alt_data_end+0xff00d0e4>
    d12c:	00800044 	movi	r2,1
    d130:	f800283a 	ret
    d134:	0005883a 	mov	r2,zero
    d138:	f800283a 	ret

0000d13c <__gedf2>:
    d13c:	2804d53a 	srli	r2,r5,20
    d140:	3806d53a 	srli	r3,r7,20
    d144:	02000434 	movhi	r8,16
    d148:	423fffc4 	addi	r8,r8,-1
    d14c:	1081ffcc 	andi	r2,r2,2047
    d150:	0241ffc4 	movi	r9,2047
    d154:	2a14703a 	and	r10,r5,r8
    d158:	18c1ffcc 	andi	r3,r3,2047
    d15c:	3a10703a 	and	r8,r7,r8
    d160:	280ad7fa 	srli	r5,r5,31
    d164:	380ed7fa 	srli	r7,r7,31
    d168:	12401d26 	beq	r2,r9,d1e0 <__gedf2+0xa4>
    d16c:	0241ffc4 	movi	r9,2047
    d170:	1a401226 	beq	r3,r9,d1bc <__gedf2+0x80>
    d174:	1000081e 	bne	r2,zero,d198 <__gedf2+0x5c>
    d178:	2296b03a 	or	r11,r4,r10
    d17c:	5813003a 	cmpeq	r9,r11,zero
    d180:	1800091e 	bne	r3,zero,d1a8 <__gedf2+0x6c>
    d184:	3218b03a 	or	r12,r6,r8
    d188:	6000071e 	bne	r12,zero,d1a8 <__gedf2+0x6c>
    d18c:	0005883a 	mov	r2,zero
    d190:	5800101e 	bne	r11,zero,d1d4 <__gedf2+0x98>
    d194:	f800283a 	ret
    d198:	18000c1e 	bne	r3,zero,d1cc <__gedf2+0x90>
    d19c:	3212b03a 	or	r9,r6,r8
    d1a0:	48000c26 	beq	r9,zero,d1d4 <__gedf2+0x98>
    d1a4:	0013883a 	mov	r9,zero
    d1a8:	39c03fcc 	andi	r7,r7,255
    d1ac:	48000826 	beq	r9,zero,d1d0 <__gedf2+0x94>
    d1b0:	38000926 	beq	r7,zero,d1d8 <__gedf2+0x9c>
    d1b4:	00800044 	movi	r2,1
    d1b8:	f800283a 	ret
    d1bc:	3212b03a 	or	r9,r6,r8
    d1c0:	483fec26 	beq	r9,zero,d174 <__alt_data_end+0xff00d174>
    d1c4:	00bfff84 	movi	r2,-2
    d1c8:	f800283a 	ret
    d1cc:	39c03fcc 	andi	r7,r7,255
    d1d0:	29c00626 	beq	r5,r7,d1ec <__gedf2+0xb0>
    d1d4:	283ff726 	beq	r5,zero,d1b4 <__alt_data_end+0xff00d1b4>
    d1d8:	00bfffc4 	movi	r2,-1
    d1dc:	f800283a 	ret
    d1e0:	2292b03a 	or	r9,r4,r10
    d1e4:	483fe126 	beq	r9,zero,d16c <__alt_data_end+0xff00d16c>
    d1e8:	003ff606 	br	d1c4 <__alt_data_end+0xff00d1c4>
    d1ec:	18bff916 	blt	r3,r2,d1d4 <__alt_data_end+0xff00d1d4>
    d1f0:	10c00316 	blt	r2,r3,d200 <__gedf2+0xc4>
    d1f4:	42bff736 	bltu	r8,r10,d1d4 <__alt_data_end+0xff00d1d4>
    d1f8:	52000326 	beq	r10,r8,d208 <__gedf2+0xcc>
    d1fc:	5200042e 	bgeu	r10,r8,d210 <__gedf2+0xd4>
    d200:	283fec1e 	bne	r5,zero,d1b4 <__alt_data_end+0xff00d1b4>
    d204:	003ff406 	br	d1d8 <__alt_data_end+0xff00d1d8>
    d208:	313ff236 	bltu	r6,r4,d1d4 <__alt_data_end+0xff00d1d4>
    d20c:	21bffc36 	bltu	r4,r6,d200 <__alt_data_end+0xff00d200>
    d210:	0005883a 	mov	r2,zero
    d214:	f800283a 	ret

0000d218 <__ledf2>:
    d218:	2804d53a 	srli	r2,r5,20
    d21c:	3810d53a 	srli	r8,r7,20
    d220:	00c00434 	movhi	r3,16
    d224:	18ffffc4 	addi	r3,r3,-1
    d228:	1081ffcc 	andi	r2,r2,2047
    d22c:	0241ffc4 	movi	r9,2047
    d230:	28d4703a 	and	r10,r5,r3
    d234:	4201ffcc 	andi	r8,r8,2047
    d238:	38c6703a 	and	r3,r7,r3
    d23c:	280ad7fa 	srli	r5,r5,31
    d240:	380ed7fa 	srli	r7,r7,31
    d244:	12401f26 	beq	r2,r9,d2c4 <__ledf2+0xac>
    d248:	0241ffc4 	movi	r9,2047
    d24c:	42401426 	beq	r8,r9,d2a0 <__ledf2+0x88>
    d250:	1000091e 	bne	r2,zero,d278 <__ledf2+0x60>
    d254:	2296b03a 	or	r11,r4,r10
    d258:	5813003a 	cmpeq	r9,r11,zero
    d25c:	29403fcc 	andi	r5,r5,255
    d260:	40000a1e 	bne	r8,zero,d28c <__ledf2+0x74>
    d264:	30d8b03a 	or	r12,r6,r3
    d268:	6000081e 	bne	r12,zero,d28c <__ledf2+0x74>
    d26c:	0005883a 	mov	r2,zero
    d270:	5800111e 	bne	r11,zero,d2b8 <__ledf2+0xa0>
    d274:	f800283a 	ret
    d278:	29403fcc 	andi	r5,r5,255
    d27c:	40000c1e 	bne	r8,zero,d2b0 <__ledf2+0x98>
    d280:	30d2b03a 	or	r9,r6,r3
    d284:	48000c26 	beq	r9,zero,d2b8 <__ledf2+0xa0>
    d288:	0013883a 	mov	r9,zero
    d28c:	39c03fcc 	andi	r7,r7,255
    d290:	48000826 	beq	r9,zero,d2b4 <__ledf2+0x9c>
    d294:	38001126 	beq	r7,zero,d2dc <__ledf2+0xc4>
    d298:	00800044 	movi	r2,1
    d29c:	f800283a 	ret
    d2a0:	30d2b03a 	or	r9,r6,r3
    d2a4:	483fea26 	beq	r9,zero,d250 <__alt_data_end+0xff00d250>
    d2a8:	00800084 	movi	r2,2
    d2ac:	f800283a 	ret
    d2b0:	39c03fcc 	andi	r7,r7,255
    d2b4:	39400726 	beq	r7,r5,d2d4 <__ledf2+0xbc>
    d2b8:	2800081e 	bne	r5,zero,d2dc <__ledf2+0xc4>
    d2bc:	00800044 	movi	r2,1
    d2c0:	f800283a 	ret
    d2c4:	2292b03a 	or	r9,r4,r10
    d2c8:	483fdf26 	beq	r9,zero,d248 <__alt_data_end+0xff00d248>
    d2cc:	00800084 	movi	r2,2
    d2d0:	f800283a 	ret
    d2d4:	4080030e 	bge	r8,r2,d2e4 <__ledf2+0xcc>
    d2d8:	383fef26 	beq	r7,zero,d298 <__alt_data_end+0xff00d298>
    d2dc:	00bfffc4 	movi	r2,-1
    d2e0:	f800283a 	ret
    d2e4:	123feb16 	blt	r2,r8,d294 <__alt_data_end+0xff00d294>
    d2e8:	1abff336 	bltu	r3,r10,d2b8 <__alt_data_end+0xff00d2b8>
    d2ec:	50c00326 	beq	r10,r3,d2fc <__ledf2+0xe4>
    d2f0:	50c0042e 	bgeu	r10,r3,d304 <__ledf2+0xec>
    d2f4:	283fe81e 	bne	r5,zero,d298 <__alt_data_end+0xff00d298>
    d2f8:	003ff806 	br	d2dc <__alt_data_end+0xff00d2dc>
    d2fc:	313fee36 	bltu	r6,r4,d2b8 <__alt_data_end+0xff00d2b8>
    d300:	21bffc36 	bltu	r4,r6,d2f4 <__alt_data_end+0xff00d2f4>
    d304:	0005883a 	mov	r2,zero
    d308:	f800283a 	ret

0000d30c <__muldf3>:
    d30c:	defff304 	addi	sp,sp,-52
    d310:	2804d53a 	srli	r2,r5,20
    d314:	dd800915 	stw	r22,36(sp)
    d318:	282cd7fa 	srli	r22,r5,31
    d31c:	dc000315 	stw	r16,12(sp)
    d320:	04000434 	movhi	r16,16
    d324:	dd400815 	stw	r21,32(sp)
    d328:	dc800515 	stw	r18,20(sp)
    d32c:	843fffc4 	addi	r16,r16,-1
    d330:	dfc00c15 	stw	ra,48(sp)
    d334:	df000b15 	stw	fp,44(sp)
    d338:	ddc00a15 	stw	r23,40(sp)
    d33c:	dd000715 	stw	r20,28(sp)
    d340:	dcc00615 	stw	r19,24(sp)
    d344:	dc400415 	stw	r17,16(sp)
    d348:	1481ffcc 	andi	r18,r2,2047
    d34c:	2c20703a 	and	r16,r5,r16
    d350:	b02b883a 	mov	r21,r22
    d354:	b2403fcc 	andi	r9,r22,255
    d358:	90006026 	beq	r18,zero,d4dc <__muldf3+0x1d0>
    d35c:	0081ffc4 	movi	r2,2047
    d360:	2029883a 	mov	r20,r4
    d364:	90803626 	beq	r18,r2,d440 <__muldf3+0x134>
    d368:	80800434 	orhi	r2,r16,16
    d36c:	100490fa 	slli	r2,r2,3
    d370:	2020d77a 	srli	r16,r4,29
    d374:	202890fa 	slli	r20,r4,3
    d378:	94bf0044 	addi	r18,r18,-1023
    d37c:	80a0b03a 	or	r16,r16,r2
    d380:	0027883a 	mov	r19,zero
    d384:	0039883a 	mov	fp,zero
    d388:	3804d53a 	srli	r2,r7,20
    d38c:	382ed7fa 	srli	r23,r7,31
    d390:	04400434 	movhi	r17,16
    d394:	8c7fffc4 	addi	r17,r17,-1
    d398:	1081ffcc 	andi	r2,r2,2047
    d39c:	3011883a 	mov	r8,r6
    d3a0:	3c62703a 	and	r17,r7,r17
    d3a4:	ba803fcc 	andi	r10,r23,255
    d3a8:	10006d26 	beq	r2,zero,d560 <__muldf3+0x254>
    d3ac:	00c1ffc4 	movi	r3,2047
    d3b0:	10c06526 	beq	r2,r3,d548 <__muldf3+0x23c>
    d3b4:	88c00434 	orhi	r3,r17,16
    d3b8:	180690fa 	slli	r3,r3,3
    d3bc:	3022d77a 	srli	r17,r6,29
    d3c0:	301090fa 	slli	r8,r6,3
    d3c4:	10bf0044 	addi	r2,r2,-1023
    d3c8:	88e2b03a 	or	r17,r17,r3
    d3cc:	000b883a 	mov	r5,zero
    d3d0:	9085883a 	add	r2,r18,r2
    d3d4:	2cc8b03a 	or	r4,r5,r19
    d3d8:	00c003c4 	movi	r3,15
    d3dc:	bdacf03a 	xor	r22,r23,r22
    d3e0:	12c00044 	addi	r11,r2,1
    d3e4:	19009936 	bltu	r3,r4,d64c <__muldf3+0x340>
    d3e8:	200890ba 	slli	r4,r4,2
    d3ec:	00c00074 	movhi	r3,1
    d3f0:	18f50004 	addi	r3,r3,-11264
    d3f4:	20c9883a 	add	r4,r4,r3
    d3f8:	20c00017 	ldw	r3,0(r4)
    d3fc:	1800683a 	jmp	r3
    d400:	0000d64c 	andi	zero,zero,857
    d404:	0000d460 	cmpeqi	zero,zero,849
    d408:	0000d460 	cmpeqi	zero,zero,849
    d40c:	0000d45c 	xori	zero,zero,849
    d410:	0000d628 	cmpgeui	zero,zero,856
    d414:	0000d628 	cmpgeui	zero,zero,856
    d418:	0000d610 	cmplti	zero,zero,856
    d41c:	0000d45c 	xori	zero,zero,849
    d420:	0000d628 	cmpgeui	zero,zero,856
    d424:	0000d610 	cmplti	zero,zero,856
    d428:	0000d628 	cmpgeui	zero,zero,856
    d42c:	0000d45c 	xori	zero,zero,849
    d430:	0000d638 	rdprs	zero,zero,856
    d434:	0000d638 	rdprs	zero,zero,856
    d438:	0000d638 	rdprs	zero,zero,856
    d43c:	0000d854 	movui	zero,865
    d440:	2404b03a 	or	r2,r4,r16
    d444:	10006f1e 	bne	r2,zero,d604 <__muldf3+0x2f8>
    d448:	04c00204 	movi	r19,8
    d44c:	0021883a 	mov	r16,zero
    d450:	0029883a 	mov	r20,zero
    d454:	07000084 	movi	fp,2
    d458:	003fcb06 	br	d388 <__alt_data_end+0xff00d388>
    d45c:	502d883a 	mov	r22,r10
    d460:	00800084 	movi	r2,2
    d464:	28805726 	beq	r5,r2,d5c4 <__muldf3+0x2b8>
    d468:	008000c4 	movi	r2,3
    d46c:	28816626 	beq	r5,r2,da08 <__muldf3+0x6fc>
    d470:	00800044 	movi	r2,1
    d474:	2881411e 	bne	r5,r2,d97c <__muldf3+0x670>
    d478:	b02b883a 	mov	r21,r22
    d47c:	0005883a 	mov	r2,zero
    d480:	000b883a 	mov	r5,zero
    d484:	0029883a 	mov	r20,zero
    d488:	1004953a 	slli	r2,r2,20
    d48c:	a8c03fcc 	andi	r3,r21,255
    d490:	04400434 	movhi	r17,16
    d494:	8c7fffc4 	addi	r17,r17,-1
    d498:	180697fa 	slli	r3,r3,31
    d49c:	2c4a703a 	and	r5,r5,r17
    d4a0:	288ab03a 	or	r5,r5,r2
    d4a4:	28c6b03a 	or	r3,r5,r3
    d4a8:	a005883a 	mov	r2,r20
    d4ac:	dfc00c17 	ldw	ra,48(sp)
    d4b0:	df000b17 	ldw	fp,44(sp)
    d4b4:	ddc00a17 	ldw	r23,40(sp)
    d4b8:	dd800917 	ldw	r22,36(sp)
    d4bc:	dd400817 	ldw	r21,32(sp)
    d4c0:	dd000717 	ldw	r20,28(sp)
    d4c4:	dcc00617 	ldw	r19,24(sp)
    d4c8:	dc800517 	ldw	r18,20(sp)
    d4cc:	dc400417 	ldw	r17,16(sp)
    d4d0:	dc000317 	ldw	r16,12(sp)
    d4d4:	dec00d04 	addi	sp,sp,52
    d4d8:	f800283a 	ret
    d4dc:	2404b03a 	or	r2,r4,r16
    d4e0:	2027883a 	mov	r19,r4
    d4e4:	10004226 	beq	r2,zero,d5f0 <__muldf3+0x2e4>
    d4e8:	8000fc26 	beq	r16,zero,d8dc <__muldf3+0x5d0>
    d4ec:	8009883a 	mov	r4,r16
    d4f0:	d9800215 	stw	r6,8(sp)
    d4f4:	d9c00015 	stw	r7,0(sp)
    d4f8:	da400115 	stw	r9,4(sp)
    d4fc:	000e5240 	call	e524 <__clzsi2>
    d500:	d9800217 	ldw	r6,8(sp)
    d504:	d9c00017 	ldw	r7,0(sp)
    d508:	da400117 	ldw	r9,4(sp)
    d50c:	113ffd44 	addi	r4,r2,-11
    d510:	00c00704 	movi	r3,28
    d514:	1900ed16 	blt	r3,r4,d8cc <__muldf3+0x5c0>
    d518:	00c00744 	movi	r3,29
    d51c:	147ffe04 	addi	r17,r2,-8
    d520:	1907c83a 	sub	r3,r3,r4
    d524:	8460983a 	sll	r16,r16,r17
    d528:	98c6d83a 	srl	r3,r19,r3
    d52c:	9c68983a 	sll	r20,r19,r17
    d530:	1c20b03a 	or	r16,r3,r16
    d534:	1080fcc4 	addi	r2,r2,1011
    d538:	00a5c83a 	sub	r18,zero,r2
    d53c:	0027883a 	mov	r19,zero
    d540:	0039883a 	mov	fp,zero
    d544:	003f9006 	br	d388 <__alt_data_end+0xff00d388>
    d548:	3446b03a 	or	r3,r6,r17
    d54c:	1800261e 	bne	r3,zero,d5e8 <__muldf3+0x2dc>
    d550:	0023883a 	mov	r17,zero
    d554:	0011883a 	mov	r8,zero
    d558:	01400084 	movi	r5,2
    d55c:	003f9c06 	br	d3d0 <__alt_data_end+0xff00d3d0>
    d560:	3446b03a 	or	r3,r6,r17
    d564:	18001c26 	beq	r3,zero,d5d8 <__muldf3+0x2cc>
    d568:	8800ce26 	beq	r17,zero,d8a4 <__muldf3+0x598>
    d56c:	8809883a 	mov	r4,r17
    d570:	d9800215 	stw	r6,8(sp)
    d574:	da400115 	stw	r9,4(sp)
    d578:	da800015 	stw	r10,0(sp)
    d57c:	000e5240 	call	e524 <__clzsi2>
    d580:	d9800217 	ldw	r6,8(sp)
    d584:	da400117 	ldw	r9,4(sp)
    d588:	da800017 	ldw	r10,0(sp)
    d58c:	113ffd44 	addi	r4,r2,-11
    d590:	00c00704 	movi	r3,28
    d594:	1900bf16 	blt	r3,r4,d894 <__muldf3+0x588>
    d598:	00c00744 	movi	r3,29
    d59c:	123ffe04 	addi	r8,r2,-8
    d5a0:	1907c83a 	sub	r3,r3,r4
    d5a4:	8a22983a 	sll	r17,r17,r8
    d5a8:	30c6d83a 	srl	r3,r6,r3
    d5ac:	3210983a 	sll	r8,r6,r8
    d5b0:	1c62b03a 	or	r17,r3,r17
    d5b4:	1080fcc4 	addi	r2,r2,1011
    d5b8:	0085c83a 	sub	r2,zero,r2
    d5bc:	000b883a 	mov	r5,zero
    d5c0:	003f8306 	br	d3d0 <__alt_data_end+0xff00d3d0>
    d5c4:	b02b883a 	mov	r21,r22
    d5c8:	0081ffc4 	movi	r2,2047
    d5cc:	000b883a 	mov	r5,zero
    d5d0:	0029883a 	mov	r20,zero
    d5d4:	003fac06 	br	d488 <__alt_data_end+0xff00d488>
    d5d8:	0023883a 	mov	r17,zero
    d5dc:	0011883a 	mov	r8,zero
    d5e0:	01400044 	movi	r5,1
    d5e4:	003f7a06 	br	d3d0 <__alt_data_end+0xff00d3d0>
    d5e8:	014000c4 	movi	r5,3
    d5ec:	003f7806 	br	d3d0 <__alt_data_end+0xff00d3d0>
    d5f0:	04c00104 	movi	r19,4
    d5f4:	0021883a 	mov	r16,zero
    d5f8:	0029883a 	mov	r20,zero
    d5fc:	07000044 	movi	fp,1
    d600:	003f6106 	br	d388 <__alt_data_end+0xff00d388>
    d604:	04c00304 	movi	r19,12
    d608:	070000c4 	movi	fp,3
    d60c:	003f5e06 	br	d388 <__alt_data_end+0xff00d388>
    d610:	01400434 	movhi	r5,16
    d614:	002b883a 	mov	r21,zero
    d618:	297fffc4 	addi	r5,r5,-1
    d61c:	053fffc4 	movi	r20,-1
    d620:	0081ffc4 	movi	r2,2047
    d624:	003f9806 	br	d488 <__alt_data_end+0xff00d488>
    d628:	8023883a 	mov	r17,r16
    d62c:	a011883a 	mov	r8,r20
    d630:	e00b883a 	mov	r5,fp
    d634:	003f8a06 	br	d460 <__alt_data_end+0xff00d460>
    d638:	8023883a 	mov	r17,r16
    d63c:	a011883a 	mov	r8,r20
    d640:	482d883a 	mov	r22,r9
    d644:	e00b883a 	mov	r5,fp
    d648:	003f8506 	br	d460 <__alt_data_end+0xff00d460>
    d64c:	a00ad43a 	srli	r5,r20,16
    d650:	401ad43a 	srli	r13,r8,16
    d654:	a53fffcc 	andi	r20,r20,65535
    d658:	423fffcc 	andi	r8,r8,65535
    d65c:	4519383a 	mul	r12,r8,r20
    d660:	4147383a 	mul	r3,r8,r5
    d664:	6d09383a 	mul	r4,r13,r20
    d668:	600cd43a 	srli	r6,r12,16
    d66c:	2b5d383a 	mul	r14,r5,r13
    d670:	20c9883a 	add	r4,r4,r3
    d674:	310d883a 	add	r6,r6,r4
    d678:	30c0022e 	bgeu	r6,r3,d684 <__muldf3+0x378>
    d67c:	00c00074 	movhi	r3,1
    d680:	70dd883a 	add	r14,r14,r3
    d684:	8826d43a 	srli	r19,r17,16
    d688:	8bffffcc 	andi	r15,r17,65535
    d68c:	7d23383a 	mul	r17,r15,r20
    d690:	7949383a 	mul	r4,r15,r5
    d694:	9d29383a 	mul	r20,r19,r20
    d698:	8814d43a 	srli	r10,r17,16
    d69c:	3012943a 	slli	r9,r6,16
    d6a0:	a129883a 	add	r20,r20,r4
    d6a4:	633fffcc 	andi	r12,r12,65535
    d6a8:	5515883a 	add	r10,r10,r20
    d6ac:	3006d43a 	srli	r3,r6,16
    d6b0:	4b13883a 	add	r9,r9,r12
    d6b4:	2ccb383a 	mul	r5,r5,r19
    d6b8:	5100022e 	bgeu	r10,r4,d6c4 <__muldf3+0x3b8>
    d6bc:	01000074 	movhi	r4,1
    d6c0:	290b883a 	add	r5,r5,r4
    d6c4:	802ad43a 	srli	r21,r16,16
    d6c8:	843fffcc 	andi	r16,r16,65535
    d6cc:	440d383a 	mul	r6,r8,r16
    d6d0:	4565383a 	mul	r18,r8,r21
    d6d4:	8349383a 	mul	r4,r16,r13
    d6d8:	500e943a 	slli	r7,r10,16
    d6dc:	3010d43a 	srli	r8,r6,16
    d6e0:	5028d43a 	srli	r20,r10,16
    d6e4:	2489883a 	add	r4,r4,r18
    d6e8:	8abfffcc 	andi	r10,r17,65535
    d6ec:	3a95883a 	add	r10,r7,r10
    d6f0:	4119883a 	add	r12,r8,r4
    d6f4:	a169883a 	add	r20,r20,r5
    d6f8:	1a87883a 	add	r3,r3,r10
    d6fc:	6d5b383a 	mul	r13,r13,r21
    d700:	6480022e 	bgeu	r12,r18,d70c <__muldf3+0x400>
    d704:	01000074 	movhi	r4,1
    d708:	691b883a 	add	r13,r13,r4
    d70c:	7c25383a 	mul	r18,r15,r16
    d710:	7d4b383a 	mul	r5,r15,r21
    d714:	84cf383a 	mul	r7,r16,r19
    d718:	901ed43a 	srli	r15,r18,16
    d71c:	6008d43a 	srli	r4,r12,16
    d720:	6010943a 	slli	r8,r12,16
    d724:	394f883a 	add	r7,r7,r5
    d728:	333fffcc 	andi	r12,r6,65535
    d72c:	79df883a 	add	r15,r15,r7
    d730:	235b883a 	add	r13,r4,r13
    d734:	9d63383a 	mul	r17,r19,r21
    d738:	4309883a 	add	r4,r8,r12
    d73c:	7940022e 	bgeu	r15,r5,d748 <__muldf3+0x43c>
    d740:	01400074 	movhi	r5,1
    d744:	8963883a 	add	r17,r17,r5
    d748:	780a943a 	slli	r5,r15,16
    d74c:	91bfffcc 	andi	r6,r18,65535
    d750:	70c7883a 	add	r3,r14,r3
    d754:	298d883a 	add	r6,r5,r6
    d758:	1a8f803a 	cmpltu	r7,r3,r10
    d75c:	350b883a 	add	r5,r6,r20
    d760:	20c7883a 	add	r3,r4,r3
    d764:	3955883a 	add	r10,r7,r5
    d768:	1909803a 	cmpltu	r4,r3,r4
    d76c:	6a91883a 	add	r8,r13,r10
    d770:	780cd43a 	srli	r6,r15,16
    d774:	2219883a 	add	r12,r4,r8
    d778:	2d0b803a 	cmpltu	r5,r5,r20
    d77c:	51cf803a 	cmpltu	r7,r10,r7
    d780:	29ceb03a 	or	r7,r5,r7
    d784:	4351803a 	cmpltu	r8,r8,r13
    d788:	610b803a 	cmpltu	r5,r12,r4
    d78c:	4148b03a 	or	r4,r8,r5
    d790:	398f883a 	add	r7,r7,r6
    d794:	3909883a 	add	r4,r7,r4
    d798:	1810927a 	slli	r8,r3,9
    d79c:	2449883a 	add	r4,r4,r17
    d7a0:	2008927a 	slli	r4,r4,9
    d7a4:	6022d5fa 	srli	r17,r12,23
    d7a8:	1806d5fa 	srli	r3,r3,23
    d7ac:	4252b03a 	or	r9,r8,r9
    d7b0:	600a927a 	slli	r5,r12,9
    d7b4:	4810c03a 	cmpne	r8,r9,zero
    d7b8:	2462b03a 	or	r17,r4,r17
    d7bc:	40c6b03a 	or	r3,r8,r3
    d7c0:	8900402c 	andhi	r4,r17,256
    d7c4:	1950b03a 	or	r8,r3,r5
    d7c8:	20000726 	beq	r4,zero,d7e8 <__muldf3+0x4dc>
    d7cc:	4006d07a 	srli	r3,r8,1
    d7d0:	880497fa 	slli	r2,r17,31
    d7d4:	4200004c 	andi	r8,r8,1
    d7d8:	8822d07a 	srli	r17,r17,1
    d7dc:	1a10b03a 	or	r8,r3,r8
    d7e0:	1210b03a 	or	r8,r2,r8
    d7e4:	5805883a 	mov	r2,r11
    d7e8:	1140ffc4 	addi	r5,r2,1023
    d7ec:	0140440e 	bge	zero,r5,d900 <__muldf3+0x5f4>
    d7f0:	40c001cc 	andi	r3,r8,7
    d7f4:	18000726 	beq	r3,zero,d814 <__muldf3+0x508>
    d7f8:	40c003cc 	andi	r3,r8,15
    d7fc:	01000104 	movi	r4,4
    d800:	19000426 	beq	r3,r4,d814 <__muldf3+0x508>
    d804:	4107883a 	add	r3,r8,r4
    d808:	1a11803a 	cmpltu	r8,r3,r8
    d80c:	8a23883a 	add	r17,r17,r8
    d810:	1811883a 	mov	r8,r3
    d814:	88c0402c 	andhi	r3,r17,256
    d818:	18000426 	beq	r3,zero,d82c <__muldf3+0x520>
    d81c:	11410004 	addi	r5,r2,1024
    d820:	00bfc034 	movhi	r2,65280
    d824:	10bfffc4 	addi	r2,r2,-1
    d828:	88a2703a 	and	r17,r17,r2
    d82c:	0081ff84 	movi	r2,2046
    d830:	117f6416 	blt	r2,r5,d5c4 <__alt_data_end+0xff00d5c4>
    d834:	8828977a 	slli	r20,r17,29
    d838:	4010d0fa 	srli	r8,r8,3
    d83c:	8822927a 	slli	r17,r17,9
    d840:	2881ffcc 	andi	r2,r5,2047
    d844:	a228b03a 	or	r20,r20,r8
    d848:	880ad33a 	srli	r5,r17,12
    d84c:	b02b883a 	mov	r21,r22
    d850:	003f0d06 	br	d488 <__alt_data_end+0xff00d488>
    d854:	8080022c 	andhi	r2,r16,8
    d858:	10000926 	beq	r2,zero,d880 <__muldf3+0x574>
    d85c:	8880022c 	andhi	r2,r17,8
    d860:	1000071e 	bne	r2,zero,d880 <__muldf3+0x574>
    d864:	00800434 	movhi	r2,16
    d868:	89400234 	orhi	r5,r17,8
    d86c:	10bfffc4 	addi	r2,r2,-1
    d870:	b82b883a 	mov	r21,r23
    d874:	288a703a 	and	r5,r5,r2
    d878:	4029883a 	mov	r20,r8
    d87c:	003f6806 	br	d620 <__alt_data_end+0xff00d620>
    d880:	00800434 	movhi	r2,16
    d884:	81400234 	orhi	r5,r16,8
    d888:	10bfffc4 	addi	r2,r2,-1
    d88c:	288a703a 	and	r5,r5,r2
    d890:	003f6306 	br	d620 <__alt_data_end+0xff00d620>
    d894:	147ff604 	addi	r17,r2,-40
    d898:	3462983a 	sll	r17,r6,r17
    d89c:	0011883a 	mov	r8,zero
    d8a0:	003f4406 	br	d5b4 <__alt_data_end+0xff00d5b4>
    d8a4:	3009883a 	mov	r4,r6
    d8a8:	d9800215 	stw	r6,8(sp)
    d8ac:	da400115 	stw	r9,4(sp)
    d8b0:	da800015 	stw	r10,0(sp)
    d8b4:	000e5240 	call	e524 <__clzsi2>
    d8b8:	10800804 	addi	r2,r2,32
    d8bc:	da800017 	ldw	r10,0(sp)
    d8c0:	da400117 	ldw	r9,4(sp)
    d8c4:	d9800217 	ldw	r6,8(sp)
    d8c8:	003f3006 	br	d58c <__alt_data_end+0xff00d58c>
    d8cc:	143ff604 	addi	r16,r2,-40
    d8d0:	9c20983a 	sll	r16,r19,r16
    d8d4:	0029883a 	mov	r20,zero
    d8d8:	003f1606 	br	d534 <__alt_data_end+0xff00d534>
    d8dc:	d9800215 	stw	r6,8(sp)
    d8e0:	d9c00015 	stw	r7,0(sp)
    d8e4:	da400115 	stw	r9,4(sp)
    d8e8:	000e5240 	call	e524 <__clzsi2>
    d8ec:	10800804 	addi	r2,r2,32
    d8f0:	da400117 	ldw	r9,4(sp)
    d8f4:	d9c00017 	ldw	r7,0(sp)
    d8f8:	d9800217 	ldw	r6,8(sp)
    d8fc:	003f0306 	br	d50c <__alt_data_end+0xff00d50c>
    d900:	00c00044 	movi	r3,1
    d904:	1947c83a 	sub	r3,r3,r5
    d908:	00800e04 	movi	r2,56
    d90c:	10feda16 	blt	r2,r3,d478 <__alt_data_end+0xff00d478>
    d910:	008007c4 	movi	r2,31
    d914:	10c01b16 	blt	r2,r3,d984 <__muldf3+0x678>
    d918:	00800804 	movi	r2,32
    d91c:	10c5c83a 	sub	r2,r2,r3
    d920:	888a983a 	sll	r5,r17,r2
    d924:	40c8d83a 	srl	r4,r8,r3
    d928:	4084983a 	sll	r2,r8,r2
    d92c:	88e2d83a 	srl	r17,r17,r3
    d930:	2906b03a 	or	r3,r5,r4
    d934:	1004c03a 	cmpne	r2,r2,zero
    d938:	1886b03a 	or	r3,r3,r2
    d93c:	188001cc 	andi	r2,r3,7
    d940:	10000726 	beq	r2,zero,d960 <__muldf3+0x654>
    d944:	188003cc 	andi	r2,r3,15
    d948:	01000104 	movi	r4,4
    d94c:	11000426 	beq	r2,r4,d960 <__muldf3+0x654>
    d950:	1805883a 	mov	r2,r3
    d954:	10c00104 	addi	r3,r2,4
    d958:	1885803a 	cmpltu	r2,r3,r2
    d95c:	88a3883a 	add	r17,r17,r2
    d960:	8880202c 	andhi	r2,r17,128
    d964:	10001c26 	beq	r2,zero,d9d8 <__muldf3+0x6cc>
    d968:	b02b883a 	mov	r21,r22
    d96c:	00800044 	movi	r2,1
    d970:	000b883a 	mov	r5,zero
    d974:	0029883a 	mov	r20,zero
    d978:	003ec306 	br	d488 <__alt_data_end+0xff00d488>
    d97c:	5805883a 	mov	r2,r11
    d980:	003f9906 	br	d7e8 <__alt_data_end+0xff00d7e8>
    d984:	00bff844 	movi	r2,-31
    d988:	1145c83a 	sub	r2,r2,r5
    d98c:	8888d83a 	srl	r4,r17,r2
    d990:	00800804 	movi	r2,32
    d994:	18801a26 	beq	r3,r2,da00 <__muldf3+0x6f4>
    d998:	00801004 	movi	r2,64
    d99c:	10c5c83a 	sub	r2,r2,r3
    d9a0:	8884983a 	sll	r2,r17,r2
    d9a4:	1204b03a 	or	r2,r2,r8
    d9a8:	1004c03a 	cmpne	r2,r2,zero
    d9ac:	2084b03a 	or	r2,r4,r2
    d9b0:	144001cc 	andi	r17,r2,7
    d9b4:	88000d1e 	bne	r17,zero,d9ec <__muldf3+0x6e0>
    d9b8:	000b883a 	mov	r5,zero
    d9bc:	1028d0fa 	srli	r20,r2,3
    d9c0:	b02b883a 	mov	r21,r22
    d9c4:	0005883a 	mov	r2,zero
    d9c8:	a468b03a 	or	r20,r20,r17
    d9cc:	003eae06 	br	d488 <__alt_data_end+0xff00d488>
    d9d0:	1007883a 	mov	r3,r2
    d9d4:	0023883a 	mov	r17,zero
    d9d8:	880a927a 	slli	r5,r17,9
    d9dc:	1805883a 	mov	r2,r3
    d9e0:	8822977a 	slli	r17,r17,29
    d9e4:	280ad33a 	srli	r5,r5,12
    d9e8:	003ff406 	br	d9bc <__alt_data_end+0xff00d9bc>
    d9ec:	10c003cc 	andi	r3,r2,15
    d9f0:	01000104 	movi	r4,4
    d9f4:	193ff626 	beq	r3,r4,d9d0 <__alt_data_end+0xff00d9d0>
    d9f8:	0023883a 	mov	r17,zero
    d9fc:	003fd506 	br	d954 <__alt_data_end+0xff00d954>
    da00:	0005883a 	mov	r2,zero
    da04:	003fe706 	br	d9a4 <__alt_data_end+0xff00d9a4>
    da08:	00800434 	movhi	r2,16
    da0c:	89400234 	orhi	r5,r17,8
    da10:	10bfffc4 	addi	r2,r2,-1
    da14:	b02b883a 	mov	r21,r22
    da18:	288a703a 	and	r5,r5,r2
    da1c:	4029883a 	mov	r20,r8
    da20:	003eff06 	br	d620 <__alt_data_end+0xff00d620>

0000da24 <__subdf3>:
    da24:	02000434 	movhi	r8,16
    da28:	423fffc4 	addi	r8,r8,-1
    da2c:	defffb04 	addi	sp,sp,-20
    da30:	2a14703a 	and	r10,r5,r8
    da34:	3812d53a 	srli	r9,r7,20
    da38:	3a10703a 	and	r8,r7,r8
    da3c:	2006d77a 	srli	r3,r4,29
    da40:	3004d77a 	srli	r2,r6,29
    da44:	dc000015 	stw	r16,0(sp)
    da48:	501490fa 	slli	r10,r10,3
    da4c:	2820d53a 	srli	r16,r5,20
    da50:	401090fa 	slli	r8,r8,3
    da54:	dc800215 	stw	r18,8(sp)
    da58:	dc400115 	stw	r17,4(sp)
    da5c:	dfc00415 	stw	ra,16(sp)
    da60:	202290fa 	slli	r17,r4,3
    da64:	dcc00315 	stw	r19,12(sp)
    da68:	4a41ffcc 	andi	r9,r9,2047
    da6c:	0101ffc4 	movi	r4,2047
    da70:	2824d7fa 	srli	r18,r5,31
    da74:	8401ffcc 	andi	r16,r16,2047
    da78:	50c6b03a 	or	r3,r10,r3
    da7c:	380ed7fa 	srli	r7,r7,31
    da80:	408ab03a 	or	r5,r8,r2
    da84:	300c90fa 	slli	r6,r6,3
    da88:	49009626 	beq	r9,r4,dce4 <__subdf3+0x2c0>
    da8c:	39c0005c 	xori	r7,r7,1
    da90:	8245c83a 	sub	r2,r16,r9
    da94:	3c807426 	beq	r7,r18,dc68 <__subdf3+0x244>
    da98:	0080af0e 	bge	zero,r2,dd58 <__subdf3+0x334>
    da9c:	48002a1e 	bne	r9,zero,db48 <__subdf3+0x124>
    daa0:	2988b03a 	or	r4,r5,r6
    daa4:	20009a1e 	bne	r4,zero,dd10 <__subdf3+0x2ec>
    daa8:	888001cc 	andi	r2,r17,7
    daac:	10000726 	beq	r2,zero,dacc <__subdf3+0xa8>
    dab0:	888003cc 	andi	r2,r17,15
    dab4:	01000104 	movi	r4,4
    dab8:	11000426 	beq	r2,r4,dacc <__subdf3+0xa8>
    dabc:	890b883a 	add	r5,r17,r4
    dac0:	2c63803a 	cmpltu	r17,r5,r17
    dac4:	1c47883a 	add	r3,r3,r17
    dac8:	2823883a 	mov	r17,r5
    dacc:	1880202c 	andhi	r2,r3,128
    dad0:	10005926 	beq	r2,zero,dc38 <__subdf3+0x214>
    dad4:	84000044 	addi	r16,r16,1
    dad8:	0081ffc4 	movi	r2,2047
    dadc:	8080be26 	beq	r16,r2,ddd8 <__subdf3+0x3b4>
    dae0:	017fe034 	movhi	r5,65408
    dae4:	297fffc4 	addi	r5,r5,-1
    dae8:	1946703a 	and	r3,r3,r5
    daec:	1804977a 	slli	r2,r3,29
    daf0:	1806927a 	slli	r3,r3,9
    daf4:	8822d0fa 	srli	r17,r17,3
    daf8:	8401ffcc 	andi	r16,r16,2047
    dafc:	180ad33a 	srli	r5,r3,12
    db00:	9100004c 	andi	r4,r18,1
    db04:	1444b03a 	or	r2,r2,r17
    db08:	80c1ffcc 	andi	r3,r16,2047
    db0c:	1820953a 	slli	r16,r3,20
    db10:	20c03fcc 	andi	r3,r4,255
    db14:	180897fa 	slli	r4,r3,31
    db18:	00c00434 	movhi	r3,16
    db1c:	18ffffc4 	addi	r3,r3,-1
    db20:	28c6703a 	and	r3,r5,r3
    db24:	1c06b03a 	or	r3,r3,r16
    db28:	1906b03a 	or	r3,r3,r4
    db2c:	dfc00417 	ldw	ra,16(sp)
    db30:	dcc00317 	ldw	r19,12(sp)
    db34:	dc800217 	ldw	r18,8(sp)
    db38:	dc400117 	ldw	r17,4(sp)
    db3c:	dc000017 	ldw	r16,0(sp)
    db40:	dec00504 	addi	sp,sp,20
    db44:	f800283a 	ret
    db48:	0101ffc4 	movi	r4,2047
    db4c:	813fd626 	beq	r16,r4,daa8 <__alt_data_end+0xff00daa8>
    db50:	29402034 	orhi	r5,r5,128
    db54:	01000e04 	movi	r4,56
    db58:	2080a316 	blt	r4,r2,dde8 <__subdf3+0x3c4>
    db5c:	010007c4 	movi	r4,31
    db60:	2080c616 	blt	r4,r2,de7c <__subdf3+0x458>
    db64:	01000804 	movi	r4,32
    db68:	2089c83a 	sub	r4,r4,r2
    db6c:	2910983a 	sll	r8,r5,r4
    db70:	308ed83a 	srl	r7,r6,r2
    db74:	3108983a 	sll	r4,r6,r4
    db78:	2884d83a 	srl	r2,r5,r2
    db7c:	41ccb03a 	or	r6,r8,r7
    db80:	2008c03a 	cmpne	r4,r4,zero
    db84:	310cb03a 	or	r6,r6,r4
    db88:	898dc83a 	sub	r6,r17,r6
    db8c:	89a3803a 	cmpltu	r17,r17,r6
    db90:	1887c83a 	sub	r3,r3,r2
    db94:	1c47c83a 	sub	r3,r3,r17
    db98:	3023883a 	mov	r17,r6
    db9c:	1880202c 	andhi	r2,r3,128
    dba0:	10002326 	beq	r2,zero,dc30 <__subdf3+0x20c>
    dba4:	04c02034 	movhi	r19,128
    dba8:	9cffffc4 	addi	r19,r19,-1
    dbac:	1ce6703a 	and	r19,r3,r19
    dbb0:	98007a26 	beq	r19,zero,dd9c <__subdf3+0x378>
    dbb4:	9809883a 	mov	r4,r19
    dbb8:	000e5240 	call	e524 <__clzsi2>
    dbbc:	113ffe04 	addi	r4,r2,-8
    dbc0:	00c007c4 	movi	r3,31
    dbc4:	19007b16 	blt	r3,r4,ddb4 <__subdf3+0x390>
    dbc8:	00800804 	movi	r2,32
    dbcc:	1105c83a 	sub	r2,r2,r4
    dbd0:	8884d83a 	srl	r2,r17,r2
    dbd4:	9906983a 	sll	r3,r19,r4
    dbd8:	8922983a 	sll	r17,r17,r4
    dbdc:	10c4b03a 	or	r2,r2,r3
    dbe0:	24007816 	blt	r4,r16,ddc4 <__subdf3+0x3a0>
    dbe4:	2421c83a 	sub	r16,r4,r16
    dbe8:	80c00044 	addi	r3,r16,1
    dbec:	010007c4 	movi	r4,31
    dbf0:	20c09516 	blt	r4,r3,de48 <__subdf3+0x424>
    dbf4:	01400804 	movi	r5,32
    dbf8:	28cbc83a 	sub	r5,r5,r3
    dbfc:	88c8d83a 	srl	r4,r17,r3
    dc00:	8962983a 	sll	r17,r17,r5
    dc04:	114a983a 	sll	r5,r2,r5
    dc08:	10c6d83a 	srl	r3,r2,r3
    dc0c:	8804c03a 	cmpne	r2,r17,zero
    dc10:	290ab03a 	or	r5,r5,r4
    dc14:	28a2b03a 	or	r17,r5,r2
    dc18:	0021883a 	mov	r16,zero
    dc1c:	003fa206 	br	daa8 <__alt_data_end+0xff00daa8>
    dc20:	2090b03a 	or	r8,r4,r2
    dc24:	40018e26 	beq	r8,zero,e260 <__subdf3+0x83c>
    dc28:	1007883a 	mov	r3,r2
    dc2c:	2023883a 	mov	r17,r4
    dc30:	888001cc 	andi	r2,r17,7
    dc34:	103f9e1e 	bne	r2,zero,dab0 <__alt_data_end+0xff00dab0>
    dc38:	1804977a 	slli	r2,r3,29
    dc3c:	8822d0fa 	srli	r17,r17,3
    dc40:	1810d0fa 	srli	r8,r3,3
    dc44:	9100004c 	andi	r4,r18,1
    dc48:	1444b03a 	or	r2,r2,r17
    dc4c:	00c1ffc4 	movi	r3,2047
    dc50:	80c02826 	beq	r16,r3,dcf4 <__subdf3+0x2d0>
    dc54:	01400434 	movhi	r5,16
    dc58:	297fffc4 	addi	r5,r5,-1
    dc5c:	80e0703a 	and	r16,r16,r3
    dc60:	414a703a 	and	r5,r8,r5
    dc64:	003fa806 	br	db08 <__alt_data_end+0xff00db08>
    dc68:	0080630e 	bge	zero,r2,ddf8 <__subdf3+0x3d4>
    dc6c:	48003026 	beq	r9,zero,dd30 <__subdf3+0x30c>
    dc70:	0101ffc4 	movi	r4,2047
    dc74:	813f8c26 	beq	r16,r4,daa8 <__alt_data_end+0xff00daa8>
    dc78:	29402034 	orhi	r5,r5,128
    dc7c:	01000e04 	movi	r4,56
    dc80:	2080a90e 	bge	r4,r2,df28 <__subdf3+0x504>
    dc84:	298cb03a 	or	r6,r5,r6
    dc88:	3012c03a 	cmpne	r9,r6,zero
    dc8c:	0005883a 	mov	r2,zero
    dc90:	4c53883a 	add	r9,r9,r17
    dc94:	4c63803a 	cmpltu	r17,r9,r17
    dc98:	10c7883a 	add	r3,r2,r3
    dc9c:	88c7883a 	add	r3,r17,r3
    dca0:	4823883a 	mov	r17,r9
    dca4:	1880202c 	andhi	r2,r3,128
    dca8:	1000d026 	beq	r2,zero,dfec <__subdf3+0x5c8>
    dcac:	84000044 	addi	r16,r16,1
    dcb0:	0081ffc4 	movi	r2,2047
    dcb4:	8080fe26 	beq	r16,r2,e0b0 <__subdf3+0x68c>
    dcb8:	00bfe034 	movhi	r2,65408
    dcbc:	10bfffc4 	addi	r2,r2,-1
    dcc0:	1886703a 	and	r3,r3,r2
    dcc4:	880ad07a 	srli	r5,r17,1
    dcc8:	180497fa 	slli	r2,r3,31
    dccc:	8900004c 	andi	r4,r17,1
    dcd0:	2922b03a 	or	r17,r5,r4
    dcd4:	1806d07a 	srli	r3,r3,1
    dcd8:	1462b03a 	or	r17,r2,r17
    dcdc:	3825883a 	mov	r18,r7
    dce0:	003f7106 	br	daa8 <__alt_data_end+0xff00daa8>
    dce4:	2984b03a 	or	r2,r5,r6
    dce8:	103f6826 	beq	r2,zero,da8c <__alt_data_end+0xff00da8c>
    dcec:	39c03fcc 	andi	r7,r7,255
    dcf0:	003f6706 	br	da90 <__alt_data_end+0xff00da90>
    dcf4:	4086b03a 	or	r3,r8,r2
    dcf8:	18015226 	beq	r3,zero,e244 <__subdf3+0x820>
    dcfc:	00c00434 	movhi	r3,16
    dd00:	41400234 	orhi	r5,r8,8
    dd04:	18ffffc4 	addi	r3,r3,-1
    dd08:	28ca703a 	and	r5,r5,r3
    dd0c:	003f7e06 	br	db08 <__alt_data_end+0xff00db08>
    dd10:	10bfffc4 	addi	r2,r2,-1
    dd14:	1000491e 	bne	r2,zero,de3c <__subdf3+0x418>
    dd18:	898fc83a 	sub	r7,r17,r6
    dd1c:	89e3803a 	cmpltu	r17,r17,r7
    dd20:	1947c83a 	sub	r3,r3,r5
    dd24:	1c47c83a 	sub	r3,r3,r17
    dd28:	3823883a 	mov	r17,r7
    dd2c:	003f9b06 	br	db9c <__alt_data_end+0xff00db9c>
    dd30:	2988b03a 	or	r4,r5,r6
    dd34:	203f5c26 	beq	r4,zero,daa8 <__alt_data_end+0xff00daa8>
    dd38:	10bfffc4 	addi	r2,r2,-1
    dd3c:	1000931e 	bne	r2,zero,df8c <__subdf3+0x568>
    dd40:	898d883a 	add	r6,r17,r6
    dd44:	3463803a 	cmpltu	r17,r6,r17
    dd48:	1947883a 	add	r3,r3,r5
    dd4c:	88c7883a 	add	r3,r17,r3
    dd50:	3023883a 	mov	r17,r6
    dd54:	003fd306 	br	dca4 <__alt_data_end+0xff00dca4>
    dd58:	1000541e 	bne	r2,zero,deac <__subdf3+0x488>
    dd5c:	80800044 	addi	r2,r16,1
    dd60:	1081ffcc 	andi	r2,r2,2047
    dd64:	01000044 	movi	r4,1
    dd68:	2080a20e 	bge	r4,r2,dff4 <__subdf3+0x5d0>
    dd6c:	8989c83a 	sub	r4,r17,r6
    dd70:	8905803a 	cmpltu	r2,r17,r4
    dd74:	1967c83a 	sub	r19,r3,r5
    dd78:	98a7c83a 	sub	r19,r19,r2
    dd7c:	9880202c 	andhi	r2,r19,128
    dd80:	10006326 	beq	r2,zero,df10 <__subdf3+0x4ec>
    dd84:	3463c83a 	sub	r17,r6,r17
    dd88:	28c7c83a 	sub	r3,r5,r3
    dd8c:	344d803a 	cmpltu	r6,r6,r17
    dd90:	19a7c83a 	sub	r19,r3,r6
    dd94:	3825883a 	mov	r18,r7
    dd98:	983f861e 	bne	r19,zero,dbb4 <__alt_data_end+0xff00dbb4>
    dd9c:	8809883a 	mov	r4,r17
    dda0:	000e5240 	call	e524 <__clzsi2>
    dda4:	10800804 	addi	r2,r2,32
    dda8:	113ffe04 	addi	r4,r2,-8
    ddac:	00c007c4 	movi	r3,31
    ddb0:	193f850e 	bge	r3,r4,dbc8 <__alt_data_end+0xff00dbc8>
    ddb4:	10bff604 	addi	r2,r2,-40
    ddb8:	8884983a 	sll	r2,r17,r2
    ddbc:	0023883a 	mov	r17,zero
    ddc0:	243f880e 	bge	r4,r16,dbe4 <__alt_data_end+0xff00dbe4>
    ddc4:	00ffe034 	movhi	r3,65408
    ddc8:	18ffffc4 	addi	r3,r3,-1
    ddcc:	8121c83a 	sub	r16,r16,r4
    ddd0:	10c6703a 	and	r3,r2,r3
    ddd4:	003f3406 	br	daa8 <__alt_data_end+0xff00daa8>
    ddd8:	9100004c 	andi	r4,r18,1
    dddc:	000b883a 	mov	r5,zero
    dde0:	0005883a 	mov	r2,zero
    dde4:	003f4806 	br	db08 <__alt_data_end+0xff00db08>
    dde8:	298cb03a 	or	r6,r5,r6
    ddec:	300cc03a 	cmpne	r6,r6,zero
    ddf0:	0005883a 	mov	r2,zero
    ddf4:	003f6406 	br	db88 <__alt_data_end+0xff00db88>
    ddf8:	10009a1e 	bne	r2,zero,e064 <__subdf3+0x640>
    ddfc:	82400044 	addi	r9,r16,1
    de00:	4881ffcc 	andi	r2,r9,2047
    de04:	02800044 	movi	r10,1
    de08:	5080670e 	bge	r10,r2,dfa8 <__subdf3+0x584>
    de0c:	0081ffc4 	movi	r2,2047
    de10:	4880af26 	beq	r9,r2,e0d0 <__subdf3+0x6ac>
    de14:	898d883a 	add	r6,r17,r6
    de18:	1945883a 	add	r2,r3,r5
    de1c:	3447803a 	cmpltu	r3,r6,r17
    de20:	1887883a 	add	r3,r3,r2
    de24:	182297fa 	slli	r17,r3,31
    de28:	300cd07a 	srli	r6,r6,1
    de2c:	1806d07a 	srli	r3,r3,1
    de30:	4821883a 	mov	r16,r9
    de34:	89a2b03a 	or	r17,r17,r6
    de38:	003f1b06 	br	daa8 <__alt_data_end+0xff00daa8>
    de3c:	0101ffc4 	movi	r4,2047
    de40:	813f441e 	bne	r16,r4,db54 <__alt_data_end+0xff00db54>
    de44:	003f1806 	br	daa8 <__alt_data_end+0xff00daa8>
    de48:	843ff844 	addi	r16,r16,-31
    de4c:	01400804 	movi	r5,32
    de50:	1408d83a 	srl	r4,r2,r16
    de54:	19405026 	beq	r3,r5,df98 <__subdf3+0x574>
    de58:	01401004 	movi	r5,64
    de5c:	28c7c83a 	sub	r3,r5,r3
    de60:	10c4983a 	sll	r2,r2,r3
    de64:	88a2b03a 	or	r17,r17,r2
    de68:	8822c03a 	cmpne	r17,r17,zero
    de6c:	2462b03a 	or	r17,r4,r17
    de70:	0007883a 	mov	r3,zero
    de74:	0021883a 	mov	r16,zero
    de78:	003f6d06 	br	dc30 <__alt_data_end+0xff00dc30>
    de7c:	11fff804 	addi	r7,r2,-32
    de80:	01000804 	movi	r4,32
    de84:	29ced83a 	srl	r7,r5,r7
    de88:	11004526 	beq	r2,r4,dfa0 <__subdf3+0x57c>
    de8c:	01001004 	movi	r4,64
    de90:	2089c83a 	sub	r4,r4,r2
    de94:	2904983a 	sll	r2,r5,r4
    de98:	118cb03a 	or	r6,r2,r6
    de9c:	300cc03a 	cmpne	r6,r6,zero
    dea0:	398cb03a 	or	r6,r7,r6
    dea4:	0005883a 	mov	r2,zero
    dea8:	003f3706 	br	db88 <__alt_data_end+0xff00db88>
    deac:	80002a26 	beq	r16,zero,df58 <__subdf3+0x534>
    deb0:	0101ffc4 	movi	r4,2047
    deb4:	49006626 	beq	r9,r4,e050 <__subdf3+0x62c>
    deb8:	0085c83a 	sub	r2,zero,r2
    debc:	18c02034 	orhi	r3,r3,128
    dec0:	01000e04 	movi	r4,56
    dec4:	20807e16 	blt	r4,r2,e0c0 <__subdf3+0x69c>
    dec8:	010007c4 	movi	r4,31
    decc:	2080e716 	blt	r4,r2,e26c <__subdf3+0x848>
    ded0:	01000804 	movi	r4,32
    ded4:	2089c83a 	sub	r4,r4,r2
    ded8:	1914983a 	sll	r10,r3,r4
    dedc:	8890d83a 	srl	r8,r17,r2
    dee0:	8908983a 	sll	r4,r17,r4
    dee4:	1884d83a 	srl	r2,r3,r2
    dee8:	5222b03a 	or	r17,r10,r8
    deec:	2006c03a 	cmpne	r3,r4,zero
    def0:	88e2b03a 	or	r17,r17,r3
    def4:	3463c83a 	sub	r17,r6,r17
    def8:	2885c83a 	sub	r2,r5,r2
    defc:	344d803a 	cmpltu	r6,r6,r17
    df00:	1187c83a 	sub	r3,r2,r6
    df04:	4821883a 	mov	r16,r9
    df08:	3825883a 	mov	r18,r7
    df0c:	003f2306 	br	db9c <__alt_data_end+0xff00db9c>
    df10:	24d0b03a 	or	r8,r4,r19
    df14:	40001b1e 	bne	r8,zero,df84 <__subdf3+0x560>
    df18:	0005883a 	mov	r2,zero
    df1c:	0009883a 	mov	r4,zero
    df20:	0021883a 	mov	r16,zero
    df24:	003f4906 	br	dc4c <__alt_data_end+0xff00dc4c>
    df28:	010007c4 	movi	r4,31
    df2c:	20803a16 	blt	r4,r2,e018 <__subdf3+0x5f4>
    df30:	01000804 	movi	r4,32
    df34:	2089c83a 	sub	r4,r4,r2
    df38:	2912983a 	sll	r9,r5,r4
    df3c:	3090d83a 	srl	r8,r6,r2
    df40:	3108983a 	sll	r4,r6,r4
    df44:	2884d83a 	srl	r2,r5,r2
    df48:	4a12b03a 	or	r9,r9,r8
    df4c:	2008c03a 	cmpne	r4,r4,zero
    df50:	4912b03a 	or	r9,r9,r4
    df54:	003f4e06 	br	dc90 <__alt_data_end+0xff00dc90>
    df58:	1c48b03a 	or	r4,r3,r17
    df5c:	20003c26 	beq	r4,zero,e050 <__subdf3+0x62c>
    df60:	0084303a 	nor	r2,zero,r2
    df64:	1000381e 	bne	r2,zero,e048 <__subdf3+0x624>
    df68:	3463c83a 	sub	r17,r6,r17
    df6c:	28c5c83a 	sub	r2,r5,r3
    df70:	344d803a 	cmpltu	r6,r6,r17
    df74:	1187c83a 	sub	r3,r2,r6
    df78:	4821883a 	mov	r16,r9
    df7c:	3825883a 	mov	r18,r7
    df80:	003f0606 	br	db9c <__alt_data_end+0xff00db9c>
    df84:	2023883a 	mov	r17,r4
    df88:	003f0906 	br	dbb0 <__alt_data_end+0xff00dbb0>
    df8c:	0101ffc4 	movi	r4,2047
    df90:	813f3a1e 	bne	r16,r4,dc7c <__alt_data_end+0xff00dc7c>
    df94:	003ec406 	br	daa8 <__alt_data_end+0xff00daa8>
    df98:	0005883a 	mov	r2,zero
    df9c:	003fb106 	br	de64 <__alt_data_end+0xff00de64>
    dfa0:	0005883a 	mov	r2,zero
    dfa4:	003fbc06 	br	de98 <__alt_data_end+0xff00de98>
    dfa8:	1c44b03a 	or	r2,r3,r17
    dfac:	80008e1e 	bne	r16,zero,e1e8 <__subdf3+0x7c4>
    dfb0:	1000c826 	beq	r2,zero,e2d4 <__subdf3+0x8b0>
    dfb4:	2984b03a 	or	r2,r5,r6
    dfb8:	103ebb26 	beq	r2,zero,daa8 <__alt_data_end+0xff00daa8>
    dfbc:	8989883a 	add	r4,r17,r6
    dfc0:	1945883a 	add	r2,r3,r5
    dfc4:	2447803a 	cmpltu	r3,r4,r17
    dfc8:	1887883a 	add	r3,r3,r2
    dfcc:	1880202c 	andhi	r2,r3,128
    dfd0:	2023883a 	mov	r17,r4
    dfd4:	103f1626 	beq	r2,zero,dc30 <__alt_data_end+0xff00dc30>
    dfd8:	00bfe034 	movhi	r2,65408
    dfdc:	10bfffc4 	addi	r2,r2,-1
    dfe0:	5021883a 	mov	r16,r10
    dfe4:	1886703a 	and	r3,r3,r2
    dfe8:	003eaf06 	br	daa8 <__alt_data_end+0xff00daa8>
    dfec:	3825883a 	mov	r18,r7
    dff0:	003f0f06 	br	dc30 <__alt_data_end+0xff00dc30>
    dff4:	1c44b03a 	or	r2,r3,r17
    dff8:	8000251e 	bne	r16,zero,e090 <__subdf3+0x66c>
    dffc:	1000661e 	bne	r2,zero,e198 <__subdf3+0x774>
    e000:	2990b03a 	or	r8,r5,r6
    e004:	40009626 	beq	r8,zero,e260 <__subdf3+0x83c>
    e008:	2807883a 	mov	r3,r5
    e00c:	3023883a 	mov	r17,r6
    e010:	3825883a 	mov	r18,r7
    e014:	003ea406 	br	daa8 <__alt_data_end+0xff00daa8>
    e018:	127ff804 	addi	r9,r2,-32
    e01c:	01000804 	movi	r4,32
    e020:	2a52d83a 	srl	r9,r5,r9
    e024:	11008c26 	beq	r2,r4,e258 <__subdf3+0x834>
    e028:	01001004 	movi	r4,64
    e02c:	2085c83a 	sub	r2,r4,r2
    e030:	2884983a 	sll	r2,r5,r2
    e034:	118cb03a 	or	r6,r2,r6
    e038:	300cc03a 	cmpne	r6,r6,zero
    e03c:	4992b03a 	or	r9,r9,r6
    e040:	0005883a 	mov	r2,zero
    e044:	003f1206 	br	dc90 <__alt_data_end+0xff00dc90>
    e048:	0101ffc4 	movi	r4,2047
    e04c:	493f9c1e 	bne	r9,r4,dec0 <__alt_data_end+0xff00dec0>
    e050:	2807883a 	mov	r3,r5
    e054:	3023883a 	mov	r17,r6
    e058:	4821883a 	mov	r16,r9
    e05c:	3825883a 	mov	r18,r7
    e060:	003e9106 	br	daa8 <__alt_data_end+0xff00daa8>
    e064:	80001f1e 	bne	r16,zero,e0e4 <__subdf3+0x6c0>
    e068:	1c48b03a 	or	r4,r3,r17
    e06c:	20005a26 	beq	r4,zero,e1d8 <__subdf3+0x7b4>
    e070:	0084303a 	nor	r2,zero,r2
    e074:	1000561e 	bne	r2,zero,e1d0 <__subdf3+0x7ac>
    e078:	89a3883a 	add	r17,r17,r6
    e07c:	1945883a 	add	r2,r3,r5
    e080:	898d803a 	cmpltu	r6,r17,r6
    e084:	3087883a 	add	r3,r6,r2
    e088:	4821883a 	mov	r16,r9
    e08c:	003f0506 	br	dca4 <__alt_data_end+0xff00dca4>
    e090:	10002b1e 	bne	r2,zero,e140 <__subdf3+0x71c>
    e094:	2984b03a 	or	r2,r5,r6
    e098:	10008026 	beq	r2,zero,e29c <__subdf3+0x878>
    e09c:	2807883a 	mov	r3,r5
    e0a0:	3023883a 	mov	r17,r6
    e0a4:	3825883a 	mov	r18,r7
    e0a8:	0401ffc4 	movi	r16,2047
    e0ac:	003e7e06 	br	daa8 <__alt_data_end+0xff00daa8>
    e0b0:	3809883a 	mov	r4,r7
    e0b4:	0011883a 	mov	r8,zero
    e0b8:	0005883a 	mov	r2,zero
    e0bc:	003ee306 	br	dc4c <__alt_data_end+0xff00dc4c>
    e0c0:	1c62b03a 	or	r17,r3,r17
    e0c4:	8822c03a 	cmpne	r17,r17,zero
    e0c8:	0005883a 	mov	r2,zero
    e0cc:	003f8906 	br	def4 <__alt_data_end+0xff00def4>
    e0d0:	3809883a 	mov	r4,r7
    e0d4:	4821883a 	mov	r16,r9
    e0d8:	0011883a 	mov	r8,zero
    e0dc:	0005883a 	mov	r2,zero
    e0e0:	003eda06 	br	dc4c <__alt_data_end+0xff00dc4c>
    e0e4:	0101ffc4 	movi	r4,2047
    e0e8:	49003b26 	beq	r9,r4,e1d8 <__subdf3+0x7b4>
    e0ec:	0085c83a 	sub	r2,zero,r2
    e0f0:	18c02034 	orhi	r3,r3,128
    e0f4:	01000e04 	movi	r4,56
    e0f8:	20806e16 	blt	r4,r2,e2b4 <__subdf3+0x890>
    e0fc:	010007c4 	movi	r4,31
    e100:	20807716 	blt	r4,r2,e2e0 <__subdf3+0x8bc>
    e104:	01000804 	movi	r4,32
    e108:	2089c83a 	sub	r4,r4,r2
    e10c:	1914983a 	sll	r10,r3,r4
    e110:	8890d83a 	srl	r8,r17,r2
    e114:	8908983a 	sll	r4,r17,r4
    e118:	1884d83a 	srl	r2,r3,r2
    e11c:	5222b03a 	or	r17,r10,r8
    e120:	2006c03a 	cmpne	r3,r4,zero
    e124:	88e2b03a 	or	r17,r17,r3
    e128:	89a3883a 	add	r17,r17,r6
    e12c:	1145883a 	add	r2,r2,r5
    e130:	898d803a 	cmpltu	r6,r17,r6
    e134:	3087883a 	add	r3,r6,r2
    e138:	4821883a 	mov	r16,r9
    e13c:	003ed906 	br	dca4 <__alt_data_end+0xff00dca4>
    e140:	2984b03a 	or	r2,r5,r6
    e144:	10004226 	beq	r2,zero,e250 <__subdf3+0x82c>
    e148:	1808d0fa 	srli	r4,r3,3
    e14c:	8822d0fa 	srli	r17,r17,3
    e150:	1806977a 	slli	r3,r3,29
    e154:	2080022c 	andhi	r2,r4,8
    e158:	1c62b03a 	or	r17,r3,r17
    e15c:	10000826 	beq	r2,zero,e180 <__subdf3+0x75c>
    e160:	2812d0fa 	srli	r9,r5,3
    e164:	4880022c 	andhi	r2,r9,8
    e168:	1000051e 	bne	r2,zero,e180 <__subdf3+0x75c>
    e16c:	300cd0fa 	srli	r6,r6,3
    e170:	2804977a 	slli	r2,r5,29
    e174:	4809883a 	mov	r4,r9
    e178:	3825883a 	mov	r18,r7
    e17c:	11a2b03a 	or	r17,r2,r6
    e180:	8806d77a 	srli	r3,r17,29
    e184:	200890fa 	slli	r4,r4,3
    e188:	882290fa 	slli	r17,r17,3
    e18c:	0401ffc4 	movi	r16,2047
    e190:	1906b03a 	or	r3,r3,r4
    e194:	003e4406 	br	daa8 <__alt_data_end+0xff00daa8>
    e198:	2984b03a 	or	r2,r5,r6
    e19c:	103e4226 	beq	r2,zero,daa8 <__alt_data_end+0xff00daa8>
    e1a0:	8989c83a 	sub	r4,r17,r6
    e1a4:	8911803a 	cmpltu	r8,r17,r4
    e1a8:	1945c83a 	sub	r2,r3,r5
    e1ac:	1205c83a 	sub	r2,r2,r8
    e1b0:	1200202c 	andhi	r8,r2,128
    e1b4:	403e9a26 	beq	r8,zero,dc20 <__alt_data_end+0xff00dc20>
    e1b8:	3463c83a 	sub	r17,r6,r17
    e1bc:	28c5c83a 	sub	r2,r5,r3
    e1c0:	344d803a 	cmpltu	r6,r6,r17
    e1c4:	1187c83a 	sub	r3,r2,r6
    e1c8:	3825883a 	mov	r18,r7
    e1cc:	003e3606 	br	daa8 <__alt_data_end+0xff00daa8>
    e1d0:	0101ffc4 	movi	r4,2047
    e1d4:	493fc71e 	bne	r9,r4,e0f4 <__alt_data_end+0xff00e0f4>
    e1d8:	2807883a 	mov	r3,r5
    e1dc:	3023883a 	mov	r17,r6
    e1e0:	4821883a 	mov	r16,r9
    e1e4:	003e3006 	br	daa8 <__alt_data_end+0xff00daa8>
    e1e8:	10003626 	beq	r2,zero,e2c4 <__subdf3+0x8a0>
    e1ec:	2984b03a 	or	r2,r5,r6
    e1f0:	10001726 	beq	r2,zero,e250 <__subdf3+0x82c>
    e1f4:	1808d0fa 	srli	r4,r3,3
    e1f8:	8822d0fa 	srli	r17,r17,3
    e1fc:	1806977a 	slli	r3,r3,29
    e200:	2080022c 	andhi	r2,r4,8
    e204:	1c62b03a 	or	r17,r3,r17
    e208:	10000726 	beq	r2,zero,e228 <__subdf3+0x804>
    e20c:	2812d0fa 	srli	r9,r5,3
    e210:	4880022c 	andhi	r2,r9,8
    e214:	1000041e 	bne	r2,zero,e228 <__subdf3+0x804>
    e218:	300cd0fa 	srli	r6,r6,3
    e21c:	2804977a 	slli	r2,r5,29
    e220:	4809883a 	mov	r4,r9
    e224:	11a2b03a 	or	r17,r2,r6
    e228:	8806d77a 	srli	r3,r17,29
    e22c:	200890fa 	slli	r4,r4,3
    e230:	882290fa 	slli	r17,r17,3
    e234:	3825883a 	mov	r18,r7
    e238:	1906b03a 	or	r3,r3,r4
    e23c:	0401ffc4 	movi	r16,2047
    e240:	003e1906 	br	daa8 <__alt_data_end+0xff00daa8>
    e244:	000b883a 	mov	r5,zero
    e248:	0005883a 	mov	r2,zero
    e24c:	003e2e06 	br	db08 <__alt_data_end+0xff00db08>
    e250:	0401ffc4 	movi	r16,2047
    e254:	003e1406 	br	daa8 <__alt_data_end+0xff00daa8>
    e258:	0005883a 	mov	r2,zero
    e25c:	003f7506 	br	e034 <__alt_data_end+0xff00e034>
    e260:	0005883a 	mov	r2,zero
    e264:	0009883a 	mov	r4,zero
    e268:	003e7806 	br	dc4c <__alt_data_end+0xff00dc4c>
    e26c:	123ff804 	addi	r8,r2,-32
    e270:	01000804 	movi	r4,32
    e274:	1a10d83a 	srl	r8,r3,r8
    e278:	11002526 	beq	r2,r4,e310 <__subdf3+0x8ec>
    e27c:	01001004 	movi	r4,64
    e280:	2085c83a 	sub	r2,r4,r2
    e284:	1884983a 	sll	r2,r3,r2
    e288:	1444b03a 	or	r2,r2,r17
    e28c:	1004c03a 	cmpne	r2,r2,zero
    e290:	40a2b03a 	or	r17,r8,r2
    e294:	0005883a 	mov	r2,zero
    e298:	003f1606 	br	def4 <__alt_data_end+0xff00def4>
    e29c:	02000434 	movhi	r8,16
    e2a0:	0009883a 	mov	r4,zero
    e2a4:	423fffc4 	addi	r8,r8,-1
    e2a8:	00bfffc4 	movi	r2,-1
    e2ac:	0401ffc4 	movi	r16,2047
    e2b0:	003e6606 	br	dc4c <__alt_data_end+0xff00dc4c>
    e2b4:	1c62b03a 	or	r17,r3,r17
    e2b8:	8822c03a 	cmpne	r17,r17,zero
    e2bc:	0005883a 	mov	r2,zero
    e2c0:	003f9906 	br	e128 <__alt_data_end+0xff00e128>
    e2c4:	2807883a 	mov	r3,r5
    e2c8:	3023883a 	mov	r17,r6
    e2cc:	0401ffc4 	movi	r16,2047
    e2d0:	003df506 	br	daa8 <__alt_data_end+0xff00daa8>
    e2d4:	2807883a 	mov	r3,r5
    e2d8:	3023883a 	mov	r17,r6
    e2dc:	003df206 	br	daa8 <__alt_data_end+0xff00daa8>
    e2e0:	123ff804 	addi	r8,r2,-32
    e2e4:	01000804 	movi	r4,32
    e2e8:	1a10d83a 	srl	r8,r3,r8
    e2ec:	11000a26 	beq	r2,r4,e318 <__subdf3+0x8f4>
    e2f0:	01001004 	movi	r4,64
    e2f4:	2085c83a 	sub	r2,r4,r2
    e2f8:	1884983a 	sll	r2,r3,r2
    e2fc:	1444b03a 	or	r2,r2,r17
    e300:	1004c03a 	cmpne	r2,r2,zero
    e304:	40a2b03a 	or	r17,r8,r2
    e308:	0005883a 	mov	r2,zero
    e30c:	003f8606 	br	e128 <__alt_data_end+0xff00e128>
    e310:	0005883a 	mov	r2,zero
    e314:	003fdc06 	br	e288 <__alt_data_end+0xff00e288>
    e318:	0005883a 	mov	r2,zero
    e31c:	003ff706 	br	e2fc <__alt_data_end+0xff00e2fc>

0000e320 <__fixdfsi>:
    e320:	280cd53a 	srli	r6,r5,20
    e324:	00c00434 	movhi	r3,16
    e328:	18ffffc4 	addi	r3,r3,-1
    e32c:	3181ffcc 	andi	r6,r6,2047
    e330:	01c0ff84 	movi	r7,1022
    e334:	28c6703a 	and	r3,r5,r3
    e338:	280ad7fa 	srli	r5,r5,31
    e33c:	3980120e 	bge	r7,r6,e388 <__fixdfsi+0x68>
    e340:	00810744 	movi	r2,1053
    e344:	11800c16 	blt	r2,r6,e378 <__fixdfsi+0x58>
    e348:	00810cc4 	movi	r2,1075
    e34c:	1185c83a 	sub	r2,r2,r6
    e350:	01c007c4 	movi	r7,31
    e354:	18c00434 	orhi	r3,r3,16
    e358:	38800d16 	blt	r7,r2,e390 <__fixdfsi+0x70>
    e35c:	31befb44 	addi	r6,r6,-1043
    e360:	2084d83a 	srl	r2,r4,r2
    e364:	1986983a 	sll	r3,r3,r6
    e368:	1884b03a 	or	r2,r3,r2
    e36c:	28000726 	beq	r5,zero,e38c <__fixdfsi+0x6c>
    e370:	0085c83a 	sub	r2,zero,r2
    e374:	f800283a 	ret
    e378:	00a00034 	movhi	r2,32768
    e37c:	10bfffc4 	addi	r2,r2,-1
    e380:	2885883a 	add	r2,r5,r2
    e384:	f800283a 	ret
    e388:	0005883a 	mov	r2,zero
    e38c:	f800283a 	ret
    e390:	008104c4 	movi	r2,1043
    e394:	1185c83a 	sub	r2,r2,r6
    e398:	1884d83a 	srl	r2,r3,r2
    e39c:	003ff306 	br	e36c <__alt_data_end+0xff00e36c>

0000e3a0 <__floatsidf>:
    e3a0:	defffd04 	addi	sp,sp,-12
    e3a4:	dfc00215 	stw	ra,8(sp)
    e3a8:	dc400115 	stw	r17,4(sp)
    e3ac:	dc000015 	stw	r16,0(sp)
    e3b0:	20002b26 	beq	r4,zero,e460 <__floatsidf+0xc0>
    e3b4:	2023883a 	mov	r17,r4
    e3b8:	2020d7fa 	srli	r16,r4,31
    e3bc:	20002d16 	blt	r4,zero,e474 <__floatsidf+0xd4>
    e3c0:	8809883a 	mov	r4,r17
    e3c4:	000e5240 	call	e524 <__clzsi2>
    e3c8:	01410784 	movi	r5,1054
    e3cc:	288bc83a 	sub	r5,r5,r2
    e3d0:	01010cc4 	movi	r4,1075
    e3d4:	2149c83a 	sub	r4,r4,r5
    e3d8:	00c007c4 	movi	r3,31
    e3dc:	1900160e 	bge	r3,r4,e438 <__floatsidf+0x98>
    e3e0:	00c104c4 	movi	r3,1043
    e3e4:	1947c83a 	sub	r3,r3,r5
    e3e8:	88c6983a 	sll	r3,r17,r3
    e3ec:	00800434 	movhi	r2,16
    e3f0:	10bfffc4 	addi	r2,r2,-1
    e3f4:	1886703a 	and	r3,r3,r2
    e3f8:	2941ffcc 	andi	r5,r5,2047
    e3fc:	800d883a 	mov	r6,r16
    e400:	0005883a 	mov	r2,zero
    e404:	280a953a 	slli	r5,r5,20
    e408:	31803fcc 	andi	r6,r6,255
    e40c:	01000434 	movhi	r4,16
    e410:	300c97fa 	slli	r6,r6,31
    e414:	213fffc4 	addi	r4,r4,-1
    e418:	1906703a 	and	r3,r3,r4
    e41c:	1946b03a 	or	r3,r3,r5
    e420:	1986b03a 	or	r3,r3,r6
    e424:	dfc00217 	ldw	ra,8(sp)
    e428:	dc400117 	ldw	r17,4(sp)
    e42c:	dc000017 	ldw	r16,0(sp)
    e430:	dec00304 	addi	sp,sp,12
    e434:	f800283a 	ret
    e438:	00c002c4 	movi	r3,11
    e43c:	1887c83a 	sub	r3,r3,r2
    e440:	88c6d83a 	srl	r3,r17,r3
    e444:	8904983a 	sll	r2,r17,r4
    e448:	01000434 	movhi	r4,16
    e44c:	213fffc4 	addi	r4,r4,-1
    e450:	2941ffcc 	andi	r5,r5,2047
    e454:	1906703a 	and	r3,r3,r4
    e458:	800d883a 	mov	r6,r16
    e45c:	003fe906 	br	e404 <__alt_data_end+0xff00e404>
    e460:	000d883a 	mov	r6,zero
    e464:	000b883a 	mov	r5,zero
    e468:	0007883a 	mov	r3,zero
    e46c:	0005883a 	mov	r2,zero
    e470:	003fe406 	br	e404 <__alt_data_end+0xff00e404>
    e474:	0123c83a 	sub	r17,zero,r4
    e478:	003fd106 	br	e3c0 <__alt_data_end+0xff00e3c0>

0000e47c <__floatunsidf>:
    e47c:	defffe04 	addi	sp,sp,-8
    e480:	dc000015 	stw	r16,0(sp)
    e484:	dfc00115 	stw	ra,4(sp)
    e488:	2021883a 	mov	r16,r4
    e48c:	20002226 	beq	r4,zero,e518 <__floatunsidf+0x9c>
    e490:	000e5240 	call	e524 <__clzsi2>
    e494:	01010784 	movi	r4,1054
    e498:	2089c83a 	sub	r4,r4,r2
    e49c:	01810cc4 	movi	r6,1075
    e4a0:	310dc83a 	sub	r6,r6,r4
    e4a4:	00c007c4 	movi	r3,31
    e4a8:	1980120e 	bge	r3,r6,e4f4 <__floatunsidf+0x78>
    e4ac:	00c104c4 	movi	r3,1043
    e4b0:	1907c83a 	sub	r3,r3,r4
    e4b4:	80ca983a 	sll	r5,r16,r3
    e4b8:	00800434 	movhi	r2,16
    e4bc:	10bfffc4 	addi	r2,r2,-1
    e4c0:	2101ffcc 	andi	r4,r4,2047
    e4c4:	0021883a 	mov	r16,zero
    e4c8:	288a703a 	and	r5,r5,r2
    e4cc:	2008953a 	slli	r4,r4,20
    e4d0:	00c00434 	movhi	r3,16
    e4d4:	18ffffc4 	addi	r3,r3,-1
    e4d8:	28c6703a 	and	r3,r5,r3
    e4dc:	8005883a 	mov	r2,r16
    e4e0:	1906b03a 	or	r3,r3,r4
    e4e4:	dfc00117 	ldw	ra,4(sp)
    e4e8:	dc000017 	ldw	r16,0(sp)
    e4ec:	dec00204 	addi	sp,sp,8
    e4f0:	f800283a 	ret
    e4f4:	00c002c4 	movi	r3,11
    e4f8:	188bc83a 	sub	r5,r3,r2
    e4fc:	814ad83a 	srl	r5,r16,r5
    e500:	00c00434 	movhi	r3,16
    e504:	18ffffc4 	addi	r3,r3,-1
    e508:	81a0983a 	sll	r16,r16,r6
    e50c:	2101ffcc 	andi	r4,r4,2047
    e510:	28ca703a 	and	r5,r5,r3
    e514:	003fed06 	br	e4cc <__alt_data_end+0xff00e4cc>
    e518:	0009883a 	mov	r4,zero
    e51c:	000b883a 	mov	r5,zero
    e520:	003fea06 	br	e4cc <__alt_data_end+0xff00e4cc>

0000e524 <__clzsi2>:
    e524:	00bfffd4 	movui	r2,65535
    e528:	11000536 	bltu	r2,r4,e540 <__clzsi2+0x1c>
    e52c:	00803fc4 	movi	r2,255
    e530:	11000f36 	bltu	r2,r4,e570 <__clzsi2+0x4c>
    e534:	00800804 	movi	r2,32
    e538:	0007883a 	mov	r3,zero
    e53c:	00000506 	br	e554 <__clzsi2+0x30>
    e540:	00804034 	movhi	r2,256
    e544:	10bfffc4 	addi	r2,r2,-1
    e548:	11000c2e 	bgeu	r2,r4,e57c <__clzsi2+0x58>
    e54c:	00800204 	movi	r2,8
    e550:	00c00604 	movi	r3,24
    e554:	20c8d83a 	srl	r4,r4,r3
    e558:	00c00074 	movhi	r3,1
    e55c:	18c59d04 	addi	r3,r3,5748
    e560:	1909883a 	add	r4,r3,r4
    e564:	20c00003 	ldbu	r3,0(r4)
    e568:	10c5c83a 	sub	r2,r2,r3
    e56c:	f800283a 	ret
    e570:	00800604 	movi	r2,24
    e574:	00c00204 	movi	r3,8
    e578:	003ff606 	br	e554 <__alt_data_end+0xff00e554>
    e57c:	00800404 	movi	r2,16
    e580:	1007883a 	mov	r3,r2
    e584:	003ff306 	br	e554 <__alt_data_end+0xff00e554>

0000e588 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e588:	defffe04 	addi	sp,sp,-8
    e58c:	dfc00115 	stw	ra,4(sp)
    e590:	df000015 	stw	fp,0(sp)
    e594:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e598:	d0a00b17 	ldw	r2,-32724(gp)
    e59c:	10000326 	beq	r2,zero,e5ac <alt_get_errno+0x24>
    e5a0:	d0a00b17 	ldw	r2,-32724(gp)
    e5a4:	103ee83a 	callr	r2
    e5a8:	00000106 	br	e5b0 <alt_get_errno+0x28>
    e5ac:	d0a71804 	addi	r2,gp,-25504
}
    e5b0:	e037883a 	mov	sp,fp
    e5b4:	dfc00117 	ldw	ra,4(sp)
    e5b8:	df000017 	ldw	fp,0(sp)
    e5bc:	dec00204 	addi	sp,sp,8
    e5c0:	f800283a 	ret

0000e5c4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e5c4:	defffb04 	addi	sp,sp,-20
    e5c8:	dfc00415 	stw	ra,16(sp)
    e5cc:	df000315 	stw	fp,12(sp)
    e5d0:	df000304 	addi	fp,sp,12
    e5d4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e5d8:	e0bfff17 	ldw	r2,-4(fp)
    e5dc:	10000616 	blt	r2,zero,e5f8 <close+0x34>
    e5e0:	e0bfff17 	ldw	r2,-4(fp)
    e5e4:	10c00324 	muli	r3,r2,12
    e5e8:	00800074 	movhi	r2,1
    e5ec:	10885b04 	addi	r2,r2,8556
    e5f0:	1885883a 	add	r2,r3,r2
    e5f4:	00000106 	br	e5fc <close+0x38>
    e5f8:	0005883a 	mov	r2,zero
    e5fc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e600:	e0bffd17 	ldw	r2,-12(fp)
    e604:	10001926 	beq	r2,zero,e66c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e608:	e0bffd17 	ldw	r2,-12(fp)
    e60c:	10800017 	ldw	r2,0(r2)
    e610:	10800417 	ldw	r2,16(r2)
    e614:	10000626 	beq	r2,zero,e630 <close+0x6c>
    e618:	e0bffd17 	ldw	r2,-12(fp)
    e61c:	10800017 	ldw	r2,0(r2)
    e620:	10800417 	ldw	r2,16(r2)
    e624:	e13ffd17 	ldw	r4,-12(fp)
    e628:	103ee83a 	callr	r2
    e62c:	00000106 	br	e634 <close+0x70>
    e630:	0005883a 	mov	r2,zero
    e634:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e638:	e13fff17 	ldw	r4,-4(fp)
    e63c:	000ec840 	call	ec84 <alt_release_fd>
    if (rval < 0)
    e640:	e0bffe17 	ldw	r2,-8(fp)
    e644:	1000070e 	bge	r2,zero,e664 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e648:	000e5880 	call	e588 <alt_get_errno>
    e64c:	1007883a 	mov	r3,r2
    e650:	e0bffe17 	ldw	r2,-8(fp)
    e654:	0085c83a 	sub	r2,zero,r2
    e658:	18800015 	stw	r2,0(r3)
      return -1;
    e65c:	00bfffc4 	movi	r2,-1
    e660:	00000706 	br	e680 <close+0xbc>
    }
    return 0;
    e664:	0005883a 	mov	r2,zero
    e668:	00000506 	br	e680 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e66c:	000e5880 	call	e588 <alt_get_errno>
    e670:	1007883a 	mov	r3,r2
    e674:	00801444 	movi	r2,81
    e678:	18800015 	stw	r2,0(r3)
    return -1;
    e67c:	00bfffc4 	movi	r2,-1
  }
}
    e680:	e037883a 	mov	sp,fp
    e684:	dfc00117 	ldw	ra,4(sp)
    e688:	df000017 	ldw	fp,0(sp)
    e68c:	dec00204 	addi	sp,sp,8
    e690:	f800283a 	ret

0000e694 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e694:	defffc04 	addi	sp,sp,-16
    e698:	df000315 	stw	fp,12(sp)
    e69c:	df000304 	addi	fp,sp,12
    e6a0:	e13ffd15 	stw	r4,-12(fp)
    e6a4:	e17ffe15 	stw	r5,-8(fp)
    e6a8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e6ac:	e0bfff17 	ldw	r2,-4(fp)
}
    e6b0:	e037883a 	mov	sp,fp
    e6b4:	df000017 	ldw	fp,0(sp)
    e6b8:	dec00104 	addi	sp,sp,4
    e6bc:	f800283a 	ret

0000e6c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e6c0:	defffe04 	addi	sp,sp,-8
    e6c4:	dfc00115 	stw	ra,4(sp)
    e6c8:	df000015 	stw	fp,0(sp)
    e6cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e6d0:	d0a00b17 	ldw	r2,-32724(gp)
    e6d4:	10000326 	beq	r2,zero,e6e4 <alt_get_errno+0x24>
    e6d8:	d0a00b17 	ldw	r2,-32724(gp)
    e6dc:	103ee83a 	callr	r2
    e6e0:	00000106 	br	e6e8 <alt_get_errno+0x28>
    e6e4:	d0a71804 	addi	r2,gp,-25504
}
    e6e8:	e037883a 	mov	sp,fp
    e6ec:	dfc00117 	ldw	ra,4(sp)
    e6f0:	df000017 	ldw	fp,0(sp)
    e6f4:	dec00204 	addi	sp,sp,8
    e6f8:	f800283a 	ret

0000e6fc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e6fc:	defffb04 	addi	sp,sp,-20
    e700:	dfc00415 	stw	ra,16(sp)
    e704:	df000315 	stw	fp,12(sp)
    e708:	df000304 	addi	fp,sp,12
    e70c:	e13ffe15 	stw	r4,-8(fp)
    e710:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e714:	e0bffe17 	ldw	r2,-8(fp)
    e718:	10000616 	blt	r2,zero,e734 <fstat+0x38>
    e71c:	e0bffe17 	ldw	r2,-8(fp)
    e720:	10c00324 	muli	r3,r2,12
    e724:	00800074 	movhi	r2,1
    e728:	10885b04 	addi	r2,r2,8556
    e72c:	1885883a 	add	r2,r3,r2
    e730:	00000106 	br	e738 <fstat+0x3c>
    e734:	0005883a 	mov	r2,zero
    e738:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e73c:	e0bffd17 	ldw	r2,-12(fp)
    e740:	10001026 	beq	r2,zero,e784 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e744:	e0bffd17 	ldw	r2,-12(fp)
    e748:	10800017 	ldw	r2,0(r2)
    e74c:	10800817 	ldw	r2,32(r2)
    e750:	10000726 	beq	r2,zero,e770 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e754:	e0bffd17 	ldw	r2,-12(fp)
    e758:	10800017 	ldw	r2,0(r2)
    e75c:	10800817 	ldw	r2,32(r2)
    e760:	e17fff17 	ldw	r5,-4(fp)
    e764:	e13ffd17 	ldw	r4,-12(fp)
    e768:	103ee83a 	callr	r2
    e76c:	00000a06 	br	e798 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e770:	e0bfff17 	ldw	r2,-4(fp)
    e774:	00c80004 	movi	r3,8192
    e778:	10c00115 	stw	r3,4(r2)
      return 0;
    e77c:	0005883a 	mov	r2,zero
    e780:	00000506 	br	e798 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e784:	000e6c00 	call	e6c0 <alt_get_errno>
    e788:	1007883a 	mov	r3,r2
    e78c:	00801444 	movi	r2,81
    e790:	18800015 	stw	r2,0(r3)
    return -1;
    e794:	00bfffc4 	movi	r2,-1
  }
}
    e798:	e037883a 	mov	sp,fp
    e79c:	dfc00117 	ldw	ra,4(sp)
    e7a0:	df000017 	ldw	fp,0(sp)
    e7a4:	dec00204 	addi	sp,sp,8
    e7a8:	f800283a 	ret

0000e7ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e7ac:	defffe04 	addi	sp,sp,-8
    e7b0:	dfc00115 	stw	ra,4(sp)
    e7b4:	df000015 	stw	fp,0(sp)
    e7b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e7bc:	d0a00b17 	ldw	r2,-32724(gp)
    e7c0:	10000326 	beq	r2,zero,e7d0 <alt_get_errno+0x24>
    e7c4:	d0a00b17 	ldw	r2,-32724(gp)
    e7c8:	103ee83a 	callr	r2
    e7cc:	00000106 	br	e7d4 <alt_get_errno+0x28>
    e7d0:	d0a71804 	addi	r2,gp,-25504
}
    e7d4:	e037883a 	mov	sp,fp
    e7d8:	dfc00117 	ldw	ra,4(sp)
    e7dc:	df000017 	ldw	fp,0(sp)
    e7e0:	dec00204 	addi	sp,sp,8
    e7e4:	f800283a 	ret

0000e7e8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e7e8:	deffed04 	addi	sp,sp,-76
    e7ec:	dfc01215 	stw	ra,72(sp)
    e7f0:	df001115 	stw	fp,68(sp)
    e7f4:	df001104 	addi	fp,sp,68
    e7f8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e7fc:	e0bfff17 	ldw	r2,-4(fp)
    e800:	10000616 	blt	r2,zero,e81c <isatty+0x34>
    e804:	e0bfff17 	ldw	r2,-4(fp)
    e808:	10c00324 	muli	r3,r2,12
    e80c:	00800074 	movhi	r2,1
    e810:	10885b04 	addi	r2,r2,8556
    e814:	1885883a 	add	r2,r3,r2
    e818:	00000106 	br	e820 <isatty+0x38>
    e81c:	0005883a 	mov	r2,zero
    e820:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e824:	e0bfef17 	ldw	r2,-68(fp)
    e828:	10000e26 	beq	r2,zero,e864 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e82c:	e0bfef17 	ldw	r2,-68(fp)
    e830:	10800017 	ldw	r2,0(r2)
    e834:	10800817 	ldw	r2,32(r2)
    e838:	1000021e 	bne	r2,zero,e844 <isatty+0x5c>
    {
      return 1;
    e83c:	00800044 	movi	r2,1
    e840:	00000d06 	br	e878 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e844:	e0bff004 	addi	r2,fp,-64
    e848:	100b883a 	mov	r5,r2
    e84c:	e13fff17 	ldw	r4,-4(fp)
    e850:	000e6fc0 	call	e6fc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e854:	e0bff117 	ldw	r2,-60(fp)
    e858:	10880020 	cmpeqi	r2,r2,8192
    e85c:	10803fcc 	andi	r2,r2,255
    e860:	00000506 	br	e878 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e864:	000e7ac0 	call	e7ac <alt_get_errno>
    e868:	1007883a 	mov	r3,r2
    e86c:	00801444 	movi	r2,81
    e870:	18800015 	stw	r2,0(r3)
    return 0;
    e874:	0005883a 	mov	r2,zero
  }
}
    e878:	e037883a 	mov	sp,fp
    e87c:	dfc00117 	ldw	ra,4(sp)
    e880:	df000017 	ldw	fp,0(sp)
    e884:	dec00204 	addi	sp,sp,8
    e888:	f800283a 	ret

0000e88c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    e88c:	defffc04 	addi	sp,sp,-16
    e890:	df000315 	stw	fp,12(sp)
    e894:	df000304 	addi	fp,sp,12
    e898:	e13ffd15 	stw	r4,-12(fp)
    e89c:	e17ffe15 	stw	r5,-8(fp)
    e8a0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    e8a4:	e0fffe17 	ldw	r3,-8(fp)
    e8a8:	e0bffd17 	ldw	r2,-12(fp)
    e8ac:	18800c26 	beq	r3,r2,e8e0 <alt_load_section+0x54>
  {
    while( to != end )
    e8b0:	00000806 	br	e8d4 <alt_load_section+0x48>
    {
      *to++ = *from++;
    e8b4:	e0bffe17 	ldw	r2,-8(fp)
    e8b8:	10c00104 	addi	r3,r2,4
    e8bc:	e0fffe15 	stw	r3,-8(fp)
    e8c0:	e0fffd17 	ldw	r3,-12(fp)
    e8c4:	19000104 	addi	r4,r3,4
    e8c8:	e13ffd15 	stw	r4,-12(fp)
    e8cc:	18c00017 	ldw	r3,0(r3)
    e8d0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    e8d4:	e0fffe17 	ldw	r3,-8(fp)
    e8d8:	e0bfff17 	ldw	r2,-4(fp)
    e8dc:	18bff51e 	bne	r3,r2,e8b4 <__alt_data_end+0xff00e8b4>
    {
      *to++ = *from++;
    }
  }
}
    e8e0:	0001883a 	nop
    e8e4:	e037883a 	mov	sp,fp
    e8e8:	df000017 	ldw	fp,0(sp)
    e8ec:	dec00104 	addi	sp,sp,4
    e8f0:	f800283a 	ret

0000e8f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e8f4:	defffe04 	addi	sp,sp,-8
    e8f8:	dfc00115 	stw	ra,4(sp)
    e8fc:	df000015 	stw	fp,0(sp)
    e900:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    e904:	01800074 	movhi	r6,1
    e908:	318ce304 	addi	r6,r6,13196
    e90c:	01400074 	movhi	r5,1
    e910:	2945e804 	addi	r5,r5,6048
    e914:	01000074 	movhi	r4,1
    e918:	210ce304 	addi	r4,r4,13196
    e91c:	000e88c0 	call	e88c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    e920:	01800034 	movhi	r6,0
    e924:	31809104 	addi	r6,r6,580
    e928:	01400034 	movhi	r5,0
    e92c:	29400804 	addi	r5,r5,32
    e930:	01000034 	movhi	r4,0
    e934:	21000804 	addi	r4,r4,32
    e938:	000e88c0 	call	e88c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    e93c:	01800074 	movhi	r6,1
    e940:	3185e804 	addi	r6,r6,6048
    e944:	01400074 	movhi	r5,1
    e948:	2943f204 	addi	r5,r5,4040
    e94c:	01000074 	movhi	r4,1
    e950:	2103f204 	addi	r4,r4,4040
    e954:	000e88c0 	call	e88c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e958:	000fedc0 	call	fedc <alt_dcache_flush_all>
  alt_icache_flush_all();
    e95c:	001009c0 	call	1009c <alt_icache_flush_all>
}
    e960:	0001883a 	nop
    e964:	e037883a 	mov	sp,fp
    e968:	dfc00117 	ldw	ra,4(sp)
    e96c:	df000017 	ldw	fp,0(sp)
    e970:	dec00204 	addi	sp,sp,8
    e974:	f800283a 	ret

0000e978 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e978:	defffe04 	addi	sp,sp,-8
    e97c:	dfc00115 	stw	ra,4(sp)
    e980:	df000015 	stw	fp,0(sp)
    e984:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e988:	d0a00b17 	ldw	r2,-32724(gp)
    e98c:	10000326 	beq	r2,zero,e99c <alt_get_errno+0x24>
    e990:	d0a00b17 	ldw	r2,-32724(gp)
    e994:	103ee83a 	callr	r2
    e998:	00000106 	br	e9a0 <alt_get_errno+0x28>
    e99c:	d0a71804 	addi	r2,gp,-25504
}
    e9a0:	e037883a 	mov	sp,fp
    e9a4:	dfc00117 	ldw	ra,4(sp)
    e9a8:	df000017 	ldw	fp,0(sp)
    e9ac:	dec00204 	addi	sp,sp,8
    e9b0:	f800283a 	ret

0000e9b4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e9b4:	defff904 	addi	sp,sp,-28
    e9b8:	dfc00615 	stw	ra,24(sp)
    e9bc:	df000515 	stw	fp,20(sp)
    e9c0:	df000504 	addi	fp,sp,20
    e9c4:	e13ffd15 	stw	r4,-12(fp)
    e9c8:	e17ffe15 	stw	r5,-8(fp)
    e9cc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e9d0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e9d4:	e0bffd17 	ldw	r2,-12(fp)
    e9d8:	10000616 	blt	r2,zero,e9f4 <lseek+0x40>
    e9dc:	e0bffd17 	ldw	r2,-12(fp)
    e9e0:	10c00324 	muli	r3,r2,12
    e9e4:	00800074 	movhi	r2,1
    e9e8:	10885b04 	addi	r2,r2,8556
    e9ec:	1885883a 	add	r2,r3,r2
    e9f0:	00000106 	br	e9f8 <lseek+0x44>
    e9f4:	0005883a 	mov	r2,zero
    e9f8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    e9fc:	e0bffc17 	ldw	r2,-16(fp)
    ea00:	10001026 	beq	r2,zero,ea44 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    ea04:	e0bffc17 	ldw	r2,-16(fp)
    ea08:	10800017 	ldw	r2,0(r2)
    ea0c:	10800717 	ldw	r2,28(r2)
    ea10:	10000926 	beq	r2,zero,ea38 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    ea14:	e0bffc17 	ldw	r2,-16(fp)
    ea18:	10800017 	ldw	r2,0(r2)
    ea1c:	10800717 	ldw	r2,28(r2)
    ea20:	e1bfff17 	ldw	r6,-4(fp)
    ea24:	e17ffe17 	ldw	r5,-8(fp)
    ea28:	e13ffc17 	ldw	r4,-16(fp)
    ea2c:	103ee83a 	callr	r2
    ea30:	e0bffb15 	stw	r2,-20(fp)
    ea34:	00000506 	br	ea4c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    ea38:	00bfde84 	movi	r2,-134
    ea3c:	e0bffb15 	stw	r2,-20(fp)
    ea40:	00000206 	br	ea4c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    ea44:	00bfebc4 	movi	r2,-81
    ea48:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    ea4c:	e0bffb17 	ldw	r2,-20(fp)
    ea50:	1000070e 	bge	r2,zero,ea70 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    ea54:	000e9780 	call	e978 <alt_get_errno>
    ea58:	1007883a 	mov	r3,r2
    ea5c:	e0bffb17 	ldw	r2,-20(fp)
    ea60:	0085c83a 	sub	r2,zero,r2
    ea64:	18800015 	stw	r2,0(r3)
    rc = -1;
    ea68:	00bfffc4 	movi	r2,-1
    ea6c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    ea70:	e0bffb17 	ldw	r2,-20(fp)
}
    ea74:	e037883a 	mov	sp,fp
    ea78:	dfc00117 	ldw	ra,4(sp)
    ea7c:	df000017 	ldw	fp,0(sp)
    ea80:	dec00204 	addi	sp,sp,8
    ea84:	f800283a 	ret

0000ea88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ea88:	defffd04 	addi	sp,sp,-12
    ea8c:	dfc00215 	stw	ra,8(sp)
    ea90:	df000115 	stw	fp,4(sp)
    ea94:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ea98:	0009883a 	mov	r4,zero
    ea9c:	000ef300 	call	ef30 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    eaa0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    eaa4:	000ef680 	call	ef68 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    eaa8:	01800074 	movhi	r6,1
    eaac:	3185e004 	addi	r6,r6,6016
    eab0:	01400074 	movhi	r5,1
    eab4:	2945e004 	addi	r5,r5,6016
    eab8:	01000074 	movhi	r4,1
    eabc:	2105e004 	addi	r4,r4,6016
    eac0:	00104340 	call	10434 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    eac4:	000ffdc0 	call	ffdc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    eac8:	01000074 	movhi	r4,1
    eacc:	21000f04 	addi	r4,r4,60
    ead0:	0010c340 	call	10c34 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ead4:	d0a71c17 	ldw	r2,-25488(gp)
    ead8:	d0e71d17 	ldw	r3,-25484(gp)
    eadc:	d1271e17 	ldw	r4,-25480(gp)
    eae0:	200d883a 	mov	r6,r4
    eae4:	180b883a 	mov	r5,r3
    eae8:	1009883a 	mov	r4,r2
    eaec:	0000fbc0 	call	fbc <main>
    eaf0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    eaf4:	01000044 	movi	r4,1
    eaf8:	000e5c40 	call	e5c4 <close>
  exit (result);
    eafc:	e13fff17 	ldw	r4,-4(fp)
    eb00:	0010c480 	call	10c48 <exit>

0000eb04 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    eb04:	defffe04 	addi	sp,sp,-8
    eb08:	df000115 	stw	fp,4(sp)
    eb0c:	df000104 	addi	fp,sp,4
    eb10:	e13fff15 	stw	r4,-4(fp)
}
    eb14:	0001883a 	nop
    eb18:	e037883a 	mov	sp,fp
    eb1c:	df000017 	ldw	fp,0(sp)
    eb20:	dec00104 	addi	sp,sp,4
    eb24:	f800283a 	ret

0000eb28 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    eb28:	defffe04 	addi	sp,sp,-8
    eb2c:	df000115 	stw	fp,4(sp)
    eb30:	df000104 	addi	fp,sp,4
    eb34:	e13fff15 	stw	r4,-4(fp)
}
    eb38:	0001883a 	nop
    eb3c:	e037883a 	mov	sp,fp
    eb40:	df000017 	ldw	fp,0(sp)
    eb44:	dec00104 	addi	sp,sp,4
    eb48:	f800283a 	ret

0000eb4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eb4c:	defffe04 	addi	sp,sp,-8
    eb50:	dfc00115 	stw	ra,4(sp)
    eb54:	df000015 	stw	fp,0(sp)
    eb58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eb5c:	d0a00b17 	ldw	r2,-32724(gp)
    eb60:	10000326 	beq	r2,zero,eb70 <alt_get_errno+0x24>
    eb64:	d0a00b17 	ldw	r2,-32724(gp)
    eb68:	103ee83a 	callr	r2
    eb6c:	00000106 	br	eb74 <alt_get_errno+0x28>
    eb70:	d0a71804 	addi	r2,gp,-25504
}
    eb74:	e037883a 	mov	sp,fp
    eb78:	dfc00117 	ldw	ra,4(sp)
    eb7c:	df000017 	ldw	fp,0(sp)
    eb80:	dec00204 	addi	sp,sp,8
    eb84:	f800283a 	ret

0000eb88 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    eb88:	defff904 	addi	sp,sp,-28
    eb8c:	dfc00615 	stw	ra,24(sp)
    eb90:	df000515 	stw	fp,20(sp)
    eb94:	df000504 	addi	fp,sp,20
    eb98:	e13ffd15 	stw	r4,-12(fp)
    eb9c:	e17ffe15 	stw	r5,-8(fp)
    eba0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    eba4:	e0bffd17 	ldw	r2,-12(fp)
    eba8:	10000616 	blt	r2,zero,ebc4 <read+0x3c>
    ebac:	e0bffd17 	ldw	r2,-12(fp)
    ebb0:	10c00324 	muli	r3,r2,12
    ebb4:	00800074 	movhi	r2,1
    ebb8:	10885b04 	addi	r2,r2,8556
    ebbc:	1885883a 	add	r2,r3,r2
    ebc0:	00000106 	br	ebc8 <read+0x40>
    ebc4:	0005883a 	mov	r2,zero
    ebc8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ebcc:	e0bffb17 	ldw	r2,-20(fp)
    ebd0:	10002226 	beq	r2,zero,ec5c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ebd4:	e0bffb17 	ldw	r2,-20(fp)
    ebd8:	10800217 	ldw	r2,8(r2)
    ebdc:	108000cc 	andi	r2,r2,3
    ebe0:	10800060 	cmpeqi	r2,r2,1
    ebe4:	1000181e 	bne	r2,zero,ec48 <read+0xc0>
        (fd->dev->read))
    ebe8:	e0bffb17 	ldw	r2,-20(fp)
    ebec:	10800017 	ldw	r2,0(r2)
    ebf0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ebf4:	10001426 	beq	r2,zero,ec48 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ebf8:	e0bffb17 	ldw	r2,-20(fp)
    ebfc:	10800017 	ldw	r2,0(r2)
    ec00:	10800517 	ldw	r2,20(r2)
    ec04:	e0ffff17 	ldw	r3,-4(fp)
    ec08:	180d883a 	mov	r6,r3
    ec0c:	e17ffe17 	ldw	r5,-8(fp)
    ec10:	e13ffb17 	ldw	r4,-20(fp)
    ec14:	103ee83a 	callr	r2
    ec18:	e0bffc15 	stw	r2,-16(fp)
    ec1c:	e0bffc17 	ldw	r2,-16(fp)
    ec20:	1000070e 	bge	r2,zero,ec40 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    ec24:	000eb4c0 	call	eb4c <alt_get_errno>
    ec28:	1007883a 	mov	r3,r2
    ec2c:	e0bffc17 	ldw	r2,-16(fp)
    ec30:	0085c83a 	sub	r2,zero,r2
    ec34:	18800015 	stw	r2,0(r3)
          return -1;
    ec38:	00bfffc4 	movi	r2,-1
    ec3c:	00000c06 	br	ec70 <read+0xe8>
        }
        return rval;
    ec40:	e0bffc17 	ldw	r2,-16(fp)
    ec44:	00000a06 	br	ec70 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ec48:	000eb4c0 	call	eb4c <alt_get_errno>
    ec4c:	1007883a 	mov	r3,r2
    ec50:	00800344 	movi	r2,13
    ec54:	18800015 	stw	r2,0(r3)
    ec58:	00000406 	br	ec6c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ec5c:	000eb4c0 	call	eb4c <alt_get_errno>
    ec60:	1007883a 	mov	r3,r2
    ec64:	00801444 	movi	r2,81
    ec68:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ec6c:	00bfffc4 	movi	r2,-1
}
    ec70:	e037883a 	mov	sp,fp
    ec74:	dfc00117 	ldw	ra,4(sp)
    ec78:	df000017 	ldw	fp,0(sp)
    ec7c:	dec00204 	addi	sp,sp,8
    ec80:	f800283a 	ret

0000ec84 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ec84:	defffe04 	addi	sp,sp,-8
    ec88:	df000115 	stw	fp,4(sp)
    ec8c:	df000104 	addi	fp,sp,4
    ec90:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ec94:	e0bfff17 	ldw	r2,-4(fp)
    ec98:	108000d0 	cmplti	r2,r2,3
    ec9c:	10000d1e 	bne	r2,zero,ecd4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    eca0:	00800074 	movhi	r2,1
    eca4:	10885b04 	addi	r2,r2,8556
    eca8:	e0ffff17 	ldw	r3,-4(fp)
    ecac:	18c00324 	muli	r3,r3,12
    ecb0:	10c5883a 	add	r2,r2,r3
    ecb4:	10800204 	addi	r2,r2,8
    ecb8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ecbc:	00800074 	movhi	r2,1
    ecc0:	10885b04 	addi	r2,r2,8556
    ecc4:	e0ffff17 	ldw	r3,-4(fp)
    ecc8:	18c00324 	muli	r3,r3,12
    eccc:	10c5883a 	add	r2,r2,r3
    ecd0:	10000015 	stw	zero,0(r2)
  }
}
    ecd4:	0001883a 	nop
    ecd8:	e037883a 	mov	sp,fp
    ecdc:	df000017 	ldw	fp,0(sp)
    ece0:	dec00104 	addi	sp,sp,4
    ece4:	f800283a 	ret

0000ece8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ece8:	defff904 	addi	sp,sp,-28
    ecec:	df000615 	stw	fp,24(sp)
    ecf0:	df000604 	addi	fp,sp,24
    ecf4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ecf8:	0005303a 	rdctl	r2,status
    ecfc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed00:	e0fffe17 	ldw	r3,-8(fp)
    ed04:	00bfff84 	movi	r2,-2
    ed08:	1884703a 	and	r2,r3,r2
    ed0c:	1001703a 	wrctl	status,r2
  
  return context;
    ed10:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    ed14:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ed18:	d0a00c17 	ldw	r2,-32720(gp)
    ed1c:	10c000c4 	addi	r3,r2,3
    ed20:	00bfff04 	movi	r2,-4
    ed24:	1884703a 	and	r2,r3,r2
    ed28:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ed2c:	d0e00c17 	ldw	r3,-32720(gp)
    ed30:	e0bfff17 	ldw	r2,-4(fp)
    ed34:	1887883a 	add	r3,r3,r2
    ed38:	00804034 	movhi	r2,256
    ed3c:	10800004 	addi	r2,r2,0
    ed40:	10c0062e 	bgeu	r2,r3,ed5c <sbrk+0x74>
    ed44:	e0bffb17 	ldw	r2,-20(fp)
    ed48:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed4c:	e0bffa17 	ldw	r2,-24(fp)
    ed50:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ed54:	00bfffc4 	movi	r2,-1
    ed58:	00000b06 	br	ed88 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    ed5c:	d0a00c17 	ldw	r2,-32720(gp)
    ed60:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    ed64:	d0e00c17 	ldw	r3,-32720(gp)
    ed68:	e0bfff17 	ldw	r2,-4(fp)
    ed6c:	1885883a 	add	r2,r3,r2
    ed70:	d0a00c15 	stw	r2,-32720(gp)
    ed74:	e0bffb17 	ldw	r2,-20(fp)
    ed78:	e0bffc15 	stw	r2,-16(fp)
    ed7c:	e0bffc17 	ldw	r2,-16(fp)
    ed80:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    ed84:	e0bffd17 	ldw	r2,-12(fp)
} 
    ed88:	e037883a 	mov	sp,fp
    ed8c:	df000017 	ldw	fp,0(sp)
    ed90:	dec00104 	addi	sp,sp,4
    ed94:	f800283a 	ret

0000ed98 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    ed98:	defffd04 	addi	sp,sp,-12
    ed9c:	dfc00215 	stw	ra,8(sp)
    eda0:	df000115 	stw	fp,4(sp)
    eda4:	df000104 	addi	fp,sp,4
    eda8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    edac:	e13fff17 	ldw	r4,-4(fp)
    edb0:	000fd840 	call	fd84 <alt_busy_sleep>
}
    edb4:	e037883a 	mov	sp,fp
    edb8:	dfc00117 	ldw	ra,4(sp)
    edbc:	df000017 	ldw	fp,0(sp)
    edc0:	dec00204 	addi	sp,sp,8
    edc4:	f800283a 	ret

0000edc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    edc8:	defffe04 	addi	sp,sp,-8
    edcc:	dfc00115 	stw	ra,4(sp)
    edd0:	df000015 	stw	fp,0(sp)
    edd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    edd8:	d0a00b17 	ldw	r2,-32724(gp)
    eddc:	10000326 	beq	r2,zero,edec <alt_get_errno+0x24>
    ede0:	d0a00b17 	ldw	r2,-32724(gp)
    ede4:	103ee83a 	callr	r2
    ede8:	00000106 	br	edf0 <alt_get_errno+0x28>
    edec:	d0a71804 	addi	r2,gp,-25504
}
    edf0:	e037883a 	mov	sp,fp
    edf4:	dfc00117 	ldw	ra,4(sp)
    edf8:	df000017 	ldw	fp,0(sp)
    edfc:	dec00204 	addi	sp,sp,8
    ee00:	f800283a 	ret

0000ee04 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    ee04:	defff904 	addi	sp,sp,-28
    ee08:	dfc00615 	stw	ra,24(sp)
    ee0c:	df000515 	stw	fp,20(sp)
    ee10:	df000504 	addi	fp,sp,20
    ee14:	e13ffd15 	stw	r4,-12(fp)
    ee18:	e17ffe15 	stw	r5,-8(fp)
    ee1c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ee20:	e0bffd17 	ldw	r2,-12(fp)
    ee24:	10000616 	blt	r2,zero,ee40 <write+0x3c>
    ee28:	e0bffd17 	ldw	r2,-12(fp)
    ee2c:	10c00324 	muli	r3,r2,12
    ee30:	00800074 	movhi	r2,1
    ee34:	10885b04 	addi	r2,r2,8556
    ee38:	1885883a 	add	r2,r3,r2
    ee3c:	00000106 	br	ee44 <write+0x40>
    ee40:	0005883a 	mov	r2,zero
    ee44:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ee48:	e0bffb17 	ldw	r2,-20(fp)
    ee4c:	10002126 	beq	r2,zero,eed4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ee50:	e0bffb17 	ldw	r2,-20(fp)
    ee54:	10800217 	ldw	r2,8(r2)
    ee58:	108000cc 	andi	r2,r2,3
    ee5c:	10001826 	beq	r2,zero,eec0 <write+0xbc>
    ee60:	e0bffb17 	ldw	r2,-20(fp)
    ee64:	10800017 	ldw	r2,0(r2)
    ee68:	10800617 	ldw	r2,24(r2)
    ee6c:	10001426 	beq	r2,zero,eec0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ee70:	e0bffb17 	ldw	r2,-20(fp)
    ee74:	10800017 	ldw	r2,0(r2)
    ee78:	10800617 	ldw	r2,24(r2)
    ee7c:	e0ffff17 	ldw	r3,-4(fp)
    ee80:	180d883a 	mov	r6,r3
    ee84:	e17ffe17 	ldw	r5,-8(fp)
    ee88:	e13ffb17 	ldw	r4,-20(fp)
    ee8c:	103ee83a 	callr	r2
    ee90:	e0bffc15 	stw	r2,-16(fp)
    ee94:	e0bffc17 	ldw	r2,-16(fp)
    ee98:	1000070e 	bge	r2,zero,eeb8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    ee9c:	000edc80 	call	edc8 <alt_get_errno>
    eea0:	1007883a 	mov	r3,r2
    eea4:	e0bffc17 	ldw	r2,-16(fp)
    eea8:	0085c83a 	sub	r2,zero,r2
    eeac:	18800015 	stw	r2,0(r3)
        return -1;
    eeb0:	00bfffc4 	movi	r2,-1
    eeb4:	00000c06 	br	eee8 <write+0xe4>
      }
      return rval;
    eeb8:	e0bffc17 	ldw	r2,-16(fp)
    eebc:	00000a06 	br	eee8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    eec0:	000edc80 	call	edc8 <alt_get_errno>
    eec4:	1007883a 	mov	r3,r2
    eec8:	00800344 	movi	r2,13
    eecc:	18800015 	stw	r2,0(r3)
    eed0:	00000406 	br	eee4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    eed4:	000edc80 	call	edc8 <alt_get_errno>
    eed8:	1007883a 	mov	r3,r2
    eedc:	00801444 	movi	r2,81
    eee0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    eee4:	00bfffc4 	movi	r2,-1
}
    eee8:	e037883a 	mov	sp,fp
    eeec:	dfc00117 	ldw	ra,4(sp)
    eef0:	df000017 	ldw	fp,0(sp)
    eef4:	dec00204 	addi	sp,sp,8
    eef8:	f800283a 	ret

0000eefc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    eefc:	defffd04 	addi	sp,sp,-12
    ef00:	dfc00215 	stw	ra,8(sp)
    ef04:	df000115 	stw	fp,4(sp)
    ef08:	df000104 	addi	fp,sp,4
    ef0c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    ef10:	d1600804 	addi	r5,gp,-32736
    ef14:	e13fff17 	ldw	r4,-4(fp)
    ef18:	000ff380 	call	ff38 <alt_dev_llist_insert>
}
    ef1c:	e037883a 	mov	sp,fp
    ef20:	dfc00117 	ldw	ra,4(sp)
    ef24:	df000017 	ldw	fp,0(sp)
    ef28:	dec00204 	addi	sp,sp,8
    ef2c:	f800283a 	ret

0000ef30 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ef30:	defffd04 	addi	sp,sp,-12
    ef34:	dfc00215 	stw	ra,8(sp)
    ef38:	df000115 	stw	fp,4(sp)
    ef3c:	df000104 	addi	fp,sp,4
    ef40:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    ef44:	00108a80 	call	108a8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ef48:	00800044 	movi	r2,1
    ef4c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ef50:	0001883a 	nop
    ef54:	e037883a 	mov	sp,fp
    ef58:	dfc00117 	ldw	ra,4(sp)
    ef5c:	df000017 	ldw	fp,0(sp)
    ef60:	dec00204 	addi	sp,sp,8
    ef64:	f800283a 	ret

0000ef68 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ef68:	defffe04 	addi	sp,sp,-8
    ef6c:	dfc00115 	stw	ra,4(sp)
    ef70:	df000015 	stw	fp,0(sp)
    ef74:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ef78:	00804034 	movhi	r2,256
    ef7c:	10840004 	addi	r2,r2,4096
    ef80:	d0a71f15 	stw	r2,-25476(gp)
    ef84:	0080bef4 	movhi	r2,763
    ef88:	10bc2004 	addi	r2,r2,-3968
    ef8c:	d0a72015 	stw	r2,-25472(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ef90:	01c0fa04 	movi	r7,1000
    ef94:	01800104 	movi	r6,4
    ef98:	000b883a 	mov	r5,zero
    ef9c:	01004034 	movhi	r4,256
    efa0:	21040804 	addi	r4,r4,4128
    efa4:	000fac40 	call	fac4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    efa8:	000d883a 	mov	r6,zero
    efac:	000b883a 	mov	r5,zero
    efb0:	01000074 	movhi	r4,1
    efb4:	2108c504 	addi	r4,r4,8980
    efb8:	000f1480 	call	f148 <altera_avalon_jtag_uart_init>
    efbc:	01000074 	movhi	r4,1
    efc0:	2108bb04 	addi	r4,r4,8940
    efc4:	000eefc0 	call	eefc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    efc8:	0001883a 	nop
}
    efcc:	0001883a 	nop
    efd0:	e037883a 	mov	sp,fp
    efd4:	dfc00117 	ldw	ra,4(sp)
    efd8:	df000017 	ldw	fp,0(sp)
    efdc:	dec00204 	addi	sp,sp,8
    efe0:	f800283a 	ret

0000efe4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    efe4:	defffa04 	addi	sp,sp,-24
    efe8:	dfc00515 	stw	ra,20(sp)
    efec:	df000415 	stw	fp,16(sp)
    eff0:	df000404 	addi	fp,sp,16
    eff4:	e13ffd15 	stw	r4,-12(fp)
    eff8:	e17ffe15 	stw	r5,-8(fp)
    effc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f000:	e0bffd17 	ldw	r2,-12(fp)
    f004:	10800017 	ldw	r2,0(r2)
    f008:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f00c:	e0bffc17 	ldw	r2,-16(fp)
    f010:	10c00a04 	addi	r3,r2,40
    f014:	e0bffd17 	ldw	r2,-12(fp)
    f018:	10800217 	ldw	r2,8(r2)
    f01c:	100f883a 	mov	r7,r2
    f020:	e1bfff17 	ldw	r6,-4(fp)
    f024:	e17ffe17 	ldw	r5,-8(fp)
    f028:	1809883a 	mov	r4,r3
    f02c:	000f60c0 	call	f60c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f030:	e037883a 	mov	sp,fp
    f034:	dfc00117 	ldw	ra,4(sp)
    f038:	df000017 	ldw	fp,0(sp)
    f03c:	dec00204 	addi	sp,sp,8
    f040:	f800283a 	ret

0000f044 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f044:	defffa04 	addi	sp,sp,-24
    f048:	dfc00515 	stw	ra,20(sp)
    f04c:	df000415 	stw	fp,16(sp)
    f050:	df000404 	addi	fp,sp,16
    f054:	e13ffd15 	stw	r4,-12(fp)
    f058:	e17ffe15 	stw	r5,-8(fp)
    f05c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f060:	e0bffd17 	ldw	r2,-12(fp)
    f064:	10800017 	ldw	r2,0(r2)
    f068:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f06c:	e0bffc17 	ldw	r2,-16(fp)
    f070:	10c00a04 	addi	r3,r2,40
    f074:	e0bffd17 	ldw	r2,-12(fp)
    f078:	10800217 	ldw	r2,8(r2)
    f07c:	100f883a 	mov	r7,r2
    f080:	e1bfff17 	ldw	r6,-4(fp)
    f084:	e17ffe17 	ldw	r5,-8(fp)
    f088:	1809883a 	mov	r4,r3
    f08c:	000f8280 	call	f828 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f090:	e037883a 	mov	sp,fp
    f094:	dfc00117 	ldw	ra,4(sp)
    f098:	df000017 	ldw	fp,0(sp)
    f09c:	dec00204 	addi	sp,sp,8
    f0a0:	f800283a 	ret

0000f0a4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f0a4:	defffc04 	addi	sp,sp,-16
    f0a8:	dfc00315 	stw	ra,12(sp)
    f0ac:	df000215 	stw	fp,8(sp)
    f0b0:	df000204 	addi	fp,sp,8
    f0b4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f0b8:	e0bfff17 	ldw	r2,-4(fp)
    f0bc:	10800017 	ldw	r2,0(r2)
    f0c0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f0c4:	e0bffe17 	ldw	r2,-8(fp)
    f0c8:	10c00a04 	addi	r3,r2,40
    f0cc:	e0bfff17 	ldw	r2,-4(fp)
    f0d0:	10800217 	ldw	r2,8(r2)
    f0d4:	100b883a 	mov	r5,r2
    f0d8:	1809883a 	mov	r4,r3
    f0dc:	000f4b40 	call	f4b4 <altera_avalon_jtag_uart_close>
}
    f0e0:	e037883a 	mov	sp,fp
    f0e4:	dfc00117 	ldw	ra,4(sp)
    f0e8:	df000017 	ldw	fp,0(sp)
    f0ec:	dec00204 	addi	sp,sp,8
    f0f0:	f800283a 	ret

0000f0f4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f0f4:	defffa04 	addi	sp,sp,-24
    f0f8:	dfc00515 	stw	ra,20(sp)
    f0fc:	df000415 	stw	fp,16(sp)
    f100:	df000404 	addi	fp,sp,16
    f104:	e13ffd15 	stw	r4,-12(fp)
    f108:	e17ffe15 	stw	r5,-8(fp)
    f10c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f110:	e0bffd17 	ldw	r2,-12(fp)
    f114:	10800017 	ldw	r2,0(r2)
    f118:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f11c:	e0bffc17 	ldw	r2,-16(fp)
    f120:	10800a04 	addi	r2,r2,40
    f124:	e1bfff17 	ldw	r6,-4(fp)
    f128:	e17ffe17 	ldw	r5,-8(fp)
    f12c:	1009883a 	mov	r4,r2
    f130:	000f51c0 	call	f51c <altera_avalon_jtag_uart_ioctl>
}
    f134:	e037883a 	mov	sp,fp
    f138:	dfc00117 	ldw	ra,4(sp)
    f13c:	df000017 	ldw	fp,0(sp)
    f140:	dec00204 	addi	sp,sp,8
    f144:	f800283a 	ret

0000f148 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f148:	defffa04 	addi	sp,sp,-24
    f14c:	dfc00515 	stw	ra,20(sp)
    f150:	df000415 	stw	fp,16(sp)
    f154:	df000404 	addi	fp,sp,16
    f158:	e13ffd15 	stw	r4,-12(fp)
    f15c:	e17ffe15 	stw	r5,-8(fp)
    f160:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f164:	e0bffd17 	ldw	r2,-12(fp)
    f168:	00c00044 	movi	r3,1
    f16c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f170:	e0bffd17 	ldw	r2,-12(fp)
    f174:	10800017 	ldw	r2,0(r2)
    f178:	10800104 	addi	r2,r2,4
    f17c:	1007883a 	mov	r3,r2
    f180:	e0bffd17 	ldw	r2,-12(fp)
    f184:	10800817 	ldw	r2,32(r2)
    f188:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f18c:	e0bffe17 	ldw	r2,-8(fp)
    f190:	e0ffff17 	ldw	r3,-4(fp)
    f194:	d8000015 	stw	zero,0(sp)
    f198:	e1fffd17 	ldw	r7,-12(fp)
    f19c:	01800074 	movhi	r6,1
    f1a0:	31bc8204 	addi	r6,r6,-3576
    f1a4:	180b883a 	mov	r5,r3
    f1a8:	1009883a 	mov	r4,r2
    f1ac:	00100d00 	call	100d0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f1b0:	e0bffd17 	ldw	r2,-12(fp)
    f1b4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f1b8:	e0bffd17 	ldw	r2,-12(fp)
    f1bc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f1c0:	d0e72217 	ldw	r3,-25464(gp)
    f1c4:	e1fffd17 	ldw	r7,-12(fp)
    f1c8:	01800074 	movhi	r6,1
    f1cc:	31bd0504 	addi	r6,r6,-3052
    f1d0:	180b883a 	mov	r5,r3
    f1d4:	1009883a 	mov	r4,r2
    f1d8:	000fc580 	call	fc58 <alt_alarm_start>
    f1dc:	1000040e 	bge	r2,zero,f1f0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f1e0:	e0fffd17 	ldw	r3,-12(fp)
    f1e4:	00a00034 	movhi	r2,32768
    f1e8:	10bfffc4 	addi	r2,r2,-1
    f1ec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f1f0:	0001883a 	nop
    f1f4:	e037883a 	mov	sp,fp
    f1f8:	dfc00117 	ldw	ra,4(sp)
    f1fc:	df000017 	ldw	fp,0(sp)
    f200:	dec00204 	addi	sp,sp,8
    f204:	f800283a 	ret

0000f208 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f208:	defff804 	addi	sp,sp,-32
    f20c:	df000715 	stw	fp,28(sp)
    f210:	df000704 	addi	fp,sp,28
    f214:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f218:	e0bfff17 	ldw	r2,-4(fp)
    f21c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f220:	e0bffb17 	ldw	r2,-20(fp)
    f224:	10800017 	ldw	r2,0(r2)
    f228:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f22c:	e0bffc17 	ldw	r2,-16(fp)
    f230:	10800104 	addi	r2,r2,4
    f234:	10800037 	ldwio	r2,0(r2)
    f238:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f23c:	e0bffd17 	ldw	r2,-12(fp)
    f240:	1080c00c 	andi	r2,r2,768
    f244:	10006d26 	beq	r2,zero,f3fc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f248:	e0bffd17 	ldw	r2,-12(fp)
    f24c:	1080400c 	andi	r2,r2,256
    f250:	10003526 	beq	r2,zero,f328 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f254:	00800074 	movhi	r2,1
    f258:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f25c:	e0bffb17 	ldw	r2,-20(fp)
    f260:	10800a17 	ldw	r2,40(r2)
    f264:	10800044 	addi	r2,r2,1
    f268:	1081ffcc 	andi	r2,r2,2047
    f26c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f270:	e0bffb17 	ldw	r2,-20(fp)
    f274:	10c00b17 	ldw	r3,44(r2)
    f278:	e0bffe17 	ldw	r2,-8(fp)
    f27c:	18801526 	beq	r3,r2,f2d4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f280:	e0bffc17 	ldw	r2,-16(fp)
    f284:	10800037 	ldwio	r2,0(r2)
    f288:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f28c:	e0bff917 	ldw	r2,-28(fp)
    f290:	10a0000c 	andi	r2,r2,32768
    f294:	10001126 	beq	r2,zero,f2dc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f298:	e0bffb17 	ldw	r2,-20(fp)
    f29c:	10800a17 	ldw	r2,40(r2)
    f2a0:	e0fff917 	ldw	r3,-28(fp)
    f2a4:	1809883a 	mov	r4,r3
    f2a8:	e0fffb17 	ldw	r3,-20(fp)
    f2ac:	1885883a 	add	r2,r3,r2
    f2b0:	10800e04 	addi	r2,r2,56
    f2b4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f2b8:	e0bffb17 	ldw	r2,-20(fp)
    f2bc:	10800a17 	ldw	r2,40(r2)
    f2c0:	10800044 	addi	r2,r2,1
    f2c4:	10c1ffcc 	andi	r3,r2,2047
    f2c8:	e0bffb17 	ldw	r2,-20(fp)
    f2cc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f2d0:	003fe206 	br	f25c <__alt_data_end+0xff00f25c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f2d4:	0001883a 	nop
    f2d8:	00000106 	br	f2e0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f2dc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f2e0:	e0bff917 	ldw	r2,-28(fp)
    f2e4:	10bfffec 	andhi	r2,r2,65535
    f2e8:	10000f26 	beq	r2,zero,f328 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f2ec:	e0bffb17 	ldw	r2,-20(fp)
    f2f0:	10c00817 	ldw	r3,32(r2)
    f2f4:	00bfff84 	movi	r2,-2
    f2f8:	1886703a 	and	r3,r3,r2
    f2fc:	e0bffb17 	ldw	r2,-20(fp)
    f300:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f304:	e0bffc17 	ldw	r2,-16(fp)
    f308:	10800104 	addi	r2,r2,4
    f30c:	1007883a 	mov	r3,r2
    f310:	e0bffb17 	ldw	r2,-20(fp)
    f314:	10800817 	ldw	r2,32(r2)
    f318:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f31c:	e0bffc17 	ldw	r2,-16(fp)
    f320:	10800104 	addi	r2,r2,4
    f324:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f328:	e0bffd17 	ldw	r2,-12(fp)
    f32c:	1080800c 	andi	r2,r2,512
    f330:	103fbe26 	beq	r2,zero,f22c <__alt_data_end+0xff00f22c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f334:	e0bffd17 	ldw	r2,-12(fp)
    f338:	1004d43a 	srli	r2,r2,16
    f33c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f340:	00001406 	br	f394 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f344:	e0bffc17 	ldw	r2,-16(fp)
    f348:	e0fffb17 	ldw	r3,-20(fp)
    f34c:	18c00d17 	ldw	r3,52(r3)
    f350:	e13ffb17 	ldw	r4,-20(fp)
    f354:	20c7883a 	add	r3,r4,r3
    f358:	18c20e04 	addi	r3,r3,2104
    f35c:	18c00003 	ldbu	r3,0(r3)
    f360:	18c03fcc 	andi	r3,r3,255
    f364:	18c0201c 	xori	r3,r3,128
    f368:	18ffe004 	addi	r3,r3,-128
    f36c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f370:	e0bffb17 	ldw	r2,-20(fp)
    f374:	10800d17 	ldw	r2,52(r2)
    f378:	10800044 	addi	r2,r2,1
    f37c:	10c1ffcc 	andi	r3,r2,2047
    f380:	e0bffb17 	ldw	r2,-20(fp)
    f384:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f388:	e0bffa17 	ldw	r2,-24(fp)
    f38c:	10bfffc4 	addi	r2,r2,-1
    f390:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f394:	e0bffa17 	ldw	r2,-24(fp)
    f398:	10000526 	beq	r2,zero,f3b0 <altera_avalon_jtag_uart_irq+0x1a8>
    f39c:	e0bffb17 	ldw	r2,-20(fp)
    f3a0:	10c00d17 	ldw	r3,52(r2)
    f3a4:	e0bffb17 	ldw	r2,-20(fp)
    f3a8:	10800c17 	ldw	r2,48(r2)
    f3ac:	18bfe51e 	bne	r3,r2,f344 <__alt_data_end+0xff00f344>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f3b0:	e0bffa17 	ldw	r2,-24(fp)
    f3b4:	103f9d26 	beq	r2,zero,f22c <__alt_data_end+0xff00f22c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f3b8:	e0bffb17 	ldw	r2,-20(fp)
    f3bc:	10c00817 	ldw	r3,32(r2)
    f3c0:	00bfff44 	movi	r2,-3
    f3c4:	1886703a 	and	r3,r3,r2
    f3c8:	e0bffb17 	ldw	r2,-20(fp)
    f3cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f3d0:	e0bffb17 	ldw	r2,-20(fp)
    f3d4:	10800017 	ldw	r2,0(r2)
    f3d8:	10800104 	addi	r2,r2,4
    f3dc:	1007883a 	mov	r3,r2
    f3e0:	e0bffb17 	ldw	r2,-20(fp)
    f3e4:	10800817 	ldw	r2,32(r2)
    f3e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f3ec:	e0bffc17 	ldw	r2,-16(fp)
    f3f0:	10800104 	addi	r2,r2,4
    f3f4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f3f8:	003f8c06 	br	f22c <__alt_data_end+0xff00f22c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    f3fc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    f400:	0001883a 	nop
    f404:	e037883a 	mov	sp,fp
    f408:	df000017 	ldw	fp,0(sp)
    f40c:	dec00104 	addi	sp,sp,4
    f410:	f800283a 	ret

0000f414 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f414:	defff804 	addi	sp,sp,-32
    f418:	df000715 	stw	fp,28(sp)
    f41c:	df000704 	addi	fp,sp,28
    f420:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f424:	e0bffb17 	ldw	r2,-20(fp)
    f428:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f42c:	e0bff917 	ldw	r2,-28(fp)
    f430:	10800017 	ldw	r2,0(r2)
    f434:	10800104 	addi	r2,r2,4
    f438:	10800037 	ldwio	r2,0(r2)
    f43c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f440:	e0bffa17 	ldw	r2,-24(fp)
    f444:	1081000c 	andi	r2,r2,1024
    f448:	10000b26 	beq	r2,zero,f478 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f44c:	e0bff917 	ldw	r2,-28(fp)
    f450:	10800017 	ldw	r2,0(r2)
    f454:	10800104 	addi	r2,r2,4
    f458:	1007883a 	mov	r3,r2
    f45c:	e0bff917 	ldw	r2,-28(fp)
    f460:	10800817 	ldw	r2,32(r2)
    f464:	10810014 	ori	r2,r2,1024
    f468:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f46c:	e0bff917 	ldw	r2,-28(fp)
    f470:	10000915 	stw	zero,36(r2)
    f474:	00000a06 	br	f4a0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f478:	e0bff917 	ldw	r2,-28(fp)
    f47c:	10c00917 	ldw	r3,36(r2)
    f480:	00a00034 	movhi	r2,32768
    f484:	10bfff04 	addi	r2,r2,-4
    f488:	10c00536 	bltu	r2,r3,f4a0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f48c:	e0bff917 	ldw	r2,-28(fp)
    f490:	10800917 	ldw	r2,36(r2)
    f494:	10c00044 	addi	r3,r2,1
    f498:	e0bff917 	ldw	r2,-28(fp)
    f49c:	10c00915 	stw	r3,36(r2)
    f4a0:	d0a72217 	ldw	r2,-25464(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f4a4:	e037883a 	mov	sp,fp
    f4a8:	df000017 	ldw	fp,0(sp)
    f4ac:	dec00104 	addi	sp,sp,4
    f4b0:	f800283a 	ret

0000f4b4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f4b4:	defffd04 	addi	sp,sp,-12
    f4b8:	df000215 	stw	fp,8(sp)
    f4bc:	df000204 	addi	fp,sp,8
    f4c0:	e13ffe15 	stw	r4,-8(fp)
    f4c4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f4c8:	00000506 	br	f4e0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f4cc:	e0bfff17 	ldw	r2,-4(fp)
    f4d0:	1090000c 	andi	r2,r2,16384
    f4d4:	10000226 	beq	r2,zero,f4e0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f4d8:	00bffd44 	movi	r2,-11
    f4dc:	00000b06 	br	f50c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f4e0:	e0bffe17 	ldw	r2,-8(fp)
    f4e4:	10c00d17 	ldw	r3,52(r2)
    f4e8:	e0bffe17 	ldw	r2,-8(fp)
    f4ec:	10800c17 	ldw	r2,48(r2)
    f4f0:	18800526 	beq	r3,r2,f508 <altera_avalon_jtag_uart_close+0x54>
    f4f4:	e0bffe17 	ldw	r2,-8(fp)
    f4f8:	10c00917 	ldw	r3,36(r2)
    f4fc:	e0bffe17 	ldw	r2,-8(fp)
    f500:	10800117 	ldw	r2,4(r2)
    f504:	18bff136 	bltu	r3,r2,f4cc <__alt_data_end+0xff00f4cc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f508:	0005883a 	mov	r2,zero
}
    f50c:	e037883a 	mov	sp,fp
    f510:	df000017 	ldw	fp,0(sp)
    f514:	dec00104 	addi	sp,sp,4
    f518:	f800283a 	ret

0000f51c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f51c:	defffa04 	addi	sp,sp,-24
    f520:	df000515 	stw	fp,20(sp)
    f524:	df000504 	addi	fp,sp,20
    f528:	e13ffd15 	stw	r4,-12(fp)
    f52c:	e17ffe15 	stw	r5,-8(fp)
    f530:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f534:	00bff9c4 	movi	r2,-25
    f538:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f53c:	e0bffe17 	ldw	r2,-8(fp)
    f540:	10da8060 	cmpeqi	r3,r2,27137
    f544:	1800031e 	bne	r3,zero,f554 <altera_avalon_jtag_uart_ioctl+0x38>
    f548:	109a80a0 	cmpeqi	r2,r2,27138
    f54c:	1000181e 	bne	r2,zero,f5b0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    f550:	00002906 	br	f5f8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f554:	e0bffd17 	ldw	r2,-12(fp)
    f558:	10c00117 	ldw	r3,4(r2)
    f55c:	00a00034 	movhi	r2,32768
    f560:	10bfffc4 	addi	r2,r2,-1
    f564:	18802126 	beq	r3,r2,f5ec <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    f568:	e0bfff17 	ldw	r2,-4(fp)
    f56c:	10800017 	ldw	r2,0(r2)
    f570:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f574:	e0bffc17 	ldw	r2,-16(fp)
    f578:	10800090 	cmplti	r2,r2,2
    f57c:	1000061e 	bne	r2,zero,f598 <altera_avalon_jtag_uart_ioctl+0x7c>
    f580:	e0fffc17 	ldw	r3,-16(fp)
    f584:	00a00034 	movhi	r2,32768
    f588:	10bfffc4 	addi	r2,r2,-1
    f58c:	18800226 	beq	r3,r2,f598 <altera_avalon_jtag_uart_ioctl+0x7c>
    f590:	e0bffc17 	ldw	r2,-16(fp)
    f594:	00000206 	br	f5a0 <altera_avalon_jtag_uart_ioctl+0x84>
    f598:	00a00034 	movhi	r2,32768
    f59c:	10bfff84 	addi	r2,r2,-2
    f5a0:	e0fffd17 	ldw	r3,-12(fp)
    f5a4:	18800115 	stw	r2,4(r3)
      rc = 0;
    f5a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f5ac:	00000f06 	br	f5ec <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f5b0:	e0bffd17 	ldw	r2,-12(fp)
    f5b4:	10c00117 	ldw	r3,4(r2)
    f5b8:	00a00034 	movhi	r2,32768
    f5bc:	10bfffc4 	addi	r2,r2,-1
    f5c0:	18800c26 	beq	r3,r2,f5f4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f5c4:	e0bffd17 	ldw	r2,-12(fp)
    f5c8:	10c00917 	ldw	r3,36(r2)
    f5cc:	e0bffd17 	ldw	r2,-12(fp)
    f5d0:	10800117 	ldw	r2,4(r2)
    f5d4:	1885803a 	cmpltu	r2,r3,r2
    f5d8:	10c03fcc 	andi	r3,r2,255
    f5dc:	e0bfff17 	ldw	r2,-4(fp)
    f5e0:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f5e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f5e8:	00000206 	br	f5f4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    f5ec:	0001883a 	nop
    f5f0:	00000106 	br	f5f8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    f5f4:	0001883a 	nop

  default:
    break;
  }

  return rc;
    f5f8:	e0bffb17 	ldw	r2,-20(fp)
}
    f5fc:	e037883a 	mov	sp,fp
    f600:	df000017 	ldw	fp,0(sp)
    f604:	dec00104 	addi	sp,sp,4
    f608:	f800283a 	ret

0000f60c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f60c:	defff304 	addi	sp,sp,-52
    f610:	dfc00c15 	stw	ra,48(sp)
    f614:	df000b15 	stw	fp,44(sp)
    f618:	df000b04 	addi	fp,sp,44
    f61c:	e13ffc15 	stw	r4,-16(fp)
    f620:	e17ffd15 	stw	r5,-12(fp)
    f624:	e1bffe15 	stw	r6,-8(fp)
    f628:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    f62c:	e0bffd17 	ldw	r2,-12(fp)
    f630:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f634:	00004706 	br	f754 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f638:	e0bffc17 	ldw	r2,-16(fp)
    f63c:	10800a17 	ldw	r2,40(r2)
    f640:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    f644:	e0bffc17 	ldw	r2,-16(fp)
    f648:	10800b17 	ldw	r2,44(r2)
    f64c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    f650:	e0fff717 	ldw	r3,-36(fp)
    f654:	e0bff817 	ldw	r2,-32(fp)
    f658:	18800536 	bltu	r3,r2,f670 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    f65c:	e0fff717 	ldw	r3,-36(fp)
    f660:	e0bff817 	ldw	r2,-32(fp)
    f664:	1885c83a 	sub	r2,r3,r2
    f668:	e0bff615 	stw	r2,-40(fp)
    f66c:	00000406 	br	f680 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f670:	00c20004 	movi	r3,2048
    f674:	e0bff817 	ldw	r2,-32(fp)
    f678:	1885c83a 	sub	r2,r3,r2
    f67c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f680:	e0bff617 	ldw	r2,-40(fp)
    f684:	10001e26 	beq	r2,zero,f700 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    f688:	e0fffe17 	ldw	r3,-8(fp)
    f68c:	e0bff617 	ldw	r2,-40(fp)
    f690:	1880022e 	bgeu	r3,r2,f69c <altera_avalon_jtag_uart_read+0x90>
        n = space;
    f694:	e0bffe17 	ldw	r2,-8(fp)
    f698:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    f69c:	e0bffc17 	ldw	r2,-16(fp)
    f6a0:	10c00e04 	addi	r3,r2,56
    f6a4:	e0bff817 	ldw	r2,-32(fp)
    f6a8:	1885883a 	add	r2,r3,r2
    f6ac:	e1bff617 	ldw	r6,-40(fp)
    f6b0:	100b883a 	mov	r5,r2
    f6b4:	e13ff517 	ldw	r4,-44(fp)
    f6b8:	000793c0 	call	793c <memcpy>
      ptr   += n;
    f6bc:	e0fff517 	ldw	r3,-44(fp)
    f6c0:	e0bff617 	ldw	r2,-40(fp)
    f6c4:	1885883a 	add	r2,r3,r2
    f6c8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    f6cc:	e0fffe17 	ldw	r3,-8(fp)
    f6d0:	e0bff617 	ldw	r2,-40(fp)
    f6d4:	1885c83a 	sub	r2,r3,r2
    f6d8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f6dc:	e0fff817 	ldw	r3,-32(fp)
    f6e0:	e0bff617 	ldw	r2,-40(fp)
    f6e4:	1885883a 	add	r2,r3,r2
    f6e8:	10c1ffcc 	andi	r3,r2,2047
    f6ec:	e0bffc17 	ldw	r2,-16(fp)
    f6f0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    f6f4:	e0bffe17 	ldw	r2,-8(fp)
    f6f8:	00bfcf16 	blt	zero,r2,f638 <__alt_data_end+0xff00f638>
    f6fc:	00000106 	br	f704 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    f700:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    f704:	e0fff517 	ldw	r3,-44(fp)
    f708:	e0bffd17 	ldw	r2,-12(fp)
    f70c:	1880141e 	bne	r3,r2,f760 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f710:	e0bfff17 	ldw	r2,-4(fp)
    f714:	1090000c 	andi	r2,r2,16384
    f718:	1000131e 	bne	r2,zero,f768 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f71c:	0001883a 	nop
    f720:	e0bffc17 	ldw	r2,-16(fp)
    f724:	10c00a17 	ldw	r3,40(r2)
    f728:	e0bff717 	ldw	r2,-36(fp)
    f72c:	1880051e 	bne	r3,r2,f744 <altera_avalon_jtag_uart_read+0x138>
    f730:	e0bffc17 	ldw	r2,-16(fp)
    f734:	10c00917 	ldw	r3,36(r2)
    f738:	e0bffc17 	ldw	r2,-16(fp)
    f73c:	10800117 	ldw	r2,4(r2)
    f740:	18bff736 	bltu	r3,r2,f720 <__alt_data_end+0xff00f720>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f744:	e0bffc17 	ldw	r2,-16(fp)
    f748:	10c00a17 	ldw	r3,40(r2)
    f74c:	e0bff717 	ldw	r2,-36(fp)
    f750:	18800726 	beq	r3,r2,f770 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f754:	e0bffe17 	ldw	r2,-8(fp)
    f758:	00bfb716 	blt	zero,r2,f638 <__alt_data_end+0xff00f638>
    f75c:	00000506 	br	f774 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    f760:	0001883a 	nop
    f764:	00000306 	br	f774 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    f768:	0001883a 	nop
    f76c:	00000106 	br	f774 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    f770:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    f774:	e0fff517 	ldw	r3,-44(fp)
    f778:	e0bffd17 	ldw	r2,-12(fp)
    f77c:	18801826 	beq	r3,r2,f7e0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f780:	0005303a 	rdctl	r2,status
    f784:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f788:	e0fffb17 	ldw	r3,-20(fp)
    f78c:	00bfff84 	movi	r2,-2
    f790:	1884703a 	and	r2,r3,r2
    f794:	1001703a 	wrctl	status,r2
  
  return context;
    f798:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    f79c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f7a0:	e0bffc17 	ldw	r2,-16(fp)
    f7a4:	10800817 	ldw	r2,32(r2)
    f7a8:	10c00054 	ori	r3,r2,1
    f7ac:	e0bffc17 	ldw	r2,-16(fp)
    f7b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f7b4:	e0bffc17 	ldw	r2,-16(fp)
    f7b8:	10800017 	ldw	r2,0(r2)
    f7bc:	10800104 	addi	r2,r2,4
    f7c0:	1007883a 	mov	r3,r2
    f7c4:	e0bffc17 	ldw	r2,-16(fp)
    f7c8:	10800817 	ldw	r2,32(r2)
    f7cc:	18800035 	stwio	r2,0(r3)
    f7d0:	e0bffa17 	ldw	r2,-24(fp)
    f7d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f7d8:	e0bff917 	ldw	r2,-28(fp)
    f7dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    f7e0:	e0fff517 	ldw	r3,-44(fp)
    f7e4:	e0bffd17 	ldw	r2,-12(fp)
    f7e8:	18800426 	beq	r3,r2,f7fc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    f7ec:	e0fff517 	ldw	r3,-44(fp)
    f7f0:	e0bffd17 	ldw	r2,-12(fp)
    f7f4:	1885c83a 	sub	r2,r3,r2
    f7f8:	00000606 	br	f814 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    f7fc:	e0bfff17 	ldw	r2,-4(fp)
    f800:	1090000c 	andi	r2,r2,16384
    f804:	10000226 	beq	r2,zero,f810 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    f808:	00bffd44 	movi	r2,-11
    f80c:	00000106 	br	f814 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    f810:	00bffec4 	movi	r2,-5
}
    f814:	e037883a 	mov	sp,fp
    f818:	dfc00117 	ldw	ra,4(sp)
    f81c:	df000017 	ldw	fp,0(sp)
    f820:	dec00204 	addi	sp,sp,8
    f824:	f800283a 	ret

0000f828 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f828:	defff304 	addi	sp,sp,-52
    f82c:	dfc00c15 	stw	ra,48(sp)
    f830:	df000b15 	stw	fp,44(sp)
    f834:	df000b04 	addi	fp,sp,44
    f838:	e13ffc15 	stw	r4,-16(fp)
    f83c:	e17ffd15 	stw	r5,-12(fp)
    f840:	e1bffe15 	stw	r6,-8(fp)
    f844:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    f848:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    f84c:	e0bffd17 	ldw	r2,-12(fp)
    f850:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f854:	00003706 	br	f934 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f858:	e0bffc17 	ldw	r2,-16(fp)
    f85c:	10800c17 	ldw	r2,48(r2)
    f860:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    f864:	e0bffc17 	ldw	r2,-16(fp)
    f868:	10800d17 	ldw	r2,52(r2)
    f86c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    f870:	e0fff917 	ldw	r3,-28(fp)
    f874:	e0bff517 	ldw	r2,-44(fp)
    f878:	1880062e 	bgeu	r3,r2,f894 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    f87c:	e0fff517 	ldw	r3,-44(fp)
    f880:	e0bff917 	ldw	r2,-28(fp)
    f884:	1885c83a 	sub	r2,r3,r2
    f888:	10bfffc4 	addi	r2,r2,-1
    f88c:	e0bff615 	stw	r2,-40(fp)
    f890:	00000b06 	br	f8c0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    f894:	e0bff517 	ldw	r2,-44(fp)
    f898:	10000526 	beq	r2,zero,f8b0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f89c:	00c20004 	movi	r3,2048
    f8a0:	e0bff917 	ldw	r2,-28(fp)
    f8a4:	1885c83a 	sub	r2,r3,r2
    f8a8:	e0bff615 	stw	r2,-40(fp)
    f8ac:	00000406 	br	f8c0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f8b0:	00c1ffc4 	movi	r3,2047
    f8b4:	e0bff917 	ldw	r2,-28(fp)
    f8b8:	1885c83a 	sub	r2,r3,r2
    f8bc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f8c0:	e0bff617 	ldw	r2,-40(fp)
    f8c4:	10001e26 	beq	r2,zero,f940 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    f8c8:	e0fffe17 	ldw	r3,-8(fp)
    f8cc:	e0bff617 	ldw	r2,-40(fp)
    f8d0:	1880022e 	bgeu	r3,r2,f8dc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    f8d4:	e0bffe17 	ldw	r2,-8(fp)
    f8d8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    f8dc:	e0bffc17 	ldw	r2,-16(fp)
    f8e0:	10c20e04 	addi	r3,r2,2104
    f8e4:	e0bff917 	ldw	r2,-28(fp)
    f8e8:	1885883a 	add	r2,r3,r2
    f8ec:	e1bff617 	ldw	r6,-40(fp)
    f8f0:	e17ffd17 	ldw	r5,-12(fp)
    f8f4:	1009883a 	mov	r4,r2
    f8f8:	000793c0 	call	793c <memcpy>
      ptr   += n;
    f8fc:	e0fffd17 	ldw	r3,-12(fp)
    f900:	e0bff617 	ldw	r2,-40(fp)
    f904:	1885883a 	add	r2,r3,r2
    f908:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    f90c:	e0fffe17 	ldw	r3,-8(fp)
    f910:	e0bff617 	ldw	r2,-40(fp)
    f914:	1885c83a 	sub	r2,r3,r2
    f918:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f91c:	e0fff917 	ldw	r3,-28(fp)
    f920:	e0bff617 	ldw	r2,-40(fp)
    f924:	1885883a 	add	r2,r3,r2
    f928:	10c1ffcc 	andi	r3,r2,2047
    f92c:	e0bffc17 	ldw	r2,-16(fp)
    f930:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f934:	e0bffe17 	ldw	r2,-8(fp)
    f938:	00bfc716 	blt	zero,r2,f858 <__alt_data_end+0xff00f858>
    f93c:	00000106 	br	f944 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    f940:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f944:	0005303a 	rdctl	r2,status
    f948:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f94c:	e0fffb17 	ldw	r3,-20(fp)
    f950:	00bfff84 	movi	r2,-2
    f954:	1884703a 	and	r2,r3,r2
    f958:	1001703a 	wrctl	status,r2
  
  return context;
    f95c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    f960:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f964:	e0bffc17 	ldw	r2,-16(fp)
    f968:	10800817 	ldw	r2,32(r2)
    f96c:	10c00094 	ori	r3,r2,2
    f970:	e0bffc17 	ldw	r2,-16(fp)
    f974:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f978:	e0bffc17 	ldw	r2,-16(fp)
    f97c:	10800017 	ldw	r2,0(r2)
    f980:	10800104 	addi	r2,r2,4
    f984:	1007883a 	mov	r3,r2
    f988:	e0bffc17 	ldw	r2,-16(fp)
    f98c:	10800817 	ldw	r2,32(r2)
    f990:	18800035 	stwio	r2,0(r3)
    f994:	e0bffa17 	ldw	r2,-24(fp)
    f998:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f99c:	e0bff817 	ldw	r2,-32(fp)
    f9a0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f9a4:	e0bffe17 	ldw	r2,-8(fp)
    f9a8:	0080100e 	bge	zero,r2,f9ec <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    f9ac:	e0bfff17 	ldw	r2,-4(fp)
    f9b0:	1090000c 	andi	r2,r2,16384
    f9b4:	1000101e 	bne	r2,zero,f9f8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f9b8:	0001883a 	nop
    f9bc:	e0bffc17 	ldw	r2,-16(fp)
    f9c0:	10c00d17 	ldw	r3,52(r2)
    f9c4:	e0bff517 	ldw	r2,-44(fp)
    f9c8:	1880051e 	bne	r3,r2,f9e0 <altera_avalon_jtag_uart_write+0x1b8>
    f9cc:	e0bffc17 	ldw	r2,-16(fp)
    f9d0:	10c00917 	ldw	r3,36(r2)
    f9d4:	e0bffc17 	ldw	r2,-16(fp)
    f9d8:	10800117 	ldw	r2,4(r2)
    f9dc:	18bff736 	bltu	r3,r2,f9bc <__alt_data_end+0xff00f9bc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f9e0:	e0bffc17 	ldw	r2,-16(fp)
    f9e4:	10800917 	ldw	r2,36(r2)
    f9e8:	1000051e 	bne	r2,zero,fa00 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    f9ec:	e0bffe17 	ldw	r2,-8(fp)
    f9f0:	00bfd016 	blt	zero,r2,f934 <__alt_data_end+0xff00f934>
    f9f4:	00000306 	br	fa04 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    f9f8:	0001883a 	nop
    f9fc:	00000106 	br	fa04 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    fa00:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    fa04:	e0fffd17 	ldw	r3,-12(fp)
    fa08:	e0bff717 	ldw	r2,-36(fp)
    fa0c:	18800426 	beq	r3,r2,fa20 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    fa10:	e0fffd17 	ldw	r3,-12(fp)
    fa14:	e0bff717 	ldw	r2,-36(fp)
    fa18:	1885c83a 	sub	r2,r3,r2
    fa1c:	00000606 	br	fa38 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    fa20:	e0bfff17 	ldw	r2,-4(fp)
    fa24:	1090000c 	andi	r2,r2,16384
    fa28:	10000226 	beq	r2,zero,fa34 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    fa2c:	00bffd44 	movi	r2,-11
    fa30:	00000106 	br	fa38 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    fa34:	00bffec4 	movi	r2,-5
}
    fa38:	e037883a 	mov	sp,fp
    fa3c:	dfc00117 	ldw	ra,4(sp)
    fa40:	df000017 	ldw	fp,0(sp)
    fa44:	dec00204 	addi	sp,sp,8
    fa48:	f800283a 	ret

0000fa4c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    fa4c:	defffa04 	addi	sp,sp,-24
    fa50:	dfc00515 	stw	ra,20(sp)
    fa54:	df000415 	stw	fp,16(sp)
    fa58:	df000404 	addi	fp,sp,16
    fa5c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    fa60:	0007883a 	mov	r3,zero
    fa64:	e0bfff17 	ldw	r2,-4(fp)
    fa68:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    fa6c:	e0bfff17 	ldw	r2,-4(fp)
    fa70:	10800104 	addi	r2,r2,4
    fa74:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fa78:	0005303a 	rdctl	r2,status
    fa7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa80:	e0fffd17 	ldw	r3,-12(fp)
    fa84:	00bfff84 	movi	r2,-2
    fa88:	1884703a 	and	r2,r3,r2
    fa8c:	1001703a 	wrctl	status,r2
  
  return context;
    fa90:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    fa94:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    fa98:	00107a00 	call	107a0 <alt_tick>
    fa9c:	e0bffc17 	ldw	r2,-16(fp)
    faa0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    faa4:	e0bffe17 	ldw	r2,-8(fp)
    faa8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    faac:	0001883a 	nop
    fab0:	e037883a 	mov	sp,fp
    fab4:	dfc00117 	ldw	ra,4(sp)
    fab8:	df000017 	ldw	fp,0(sp)
    fabc:	dec00204 	addi	sp,sp,8
    fac0:	f800283a 	ret

0000fac4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    fac4:	defff804 	addi	sp,sp,-32
    fac8:	dfc00715 	stw	ra,28(sp)
    facc:	df000615 	stw	fp,24(sp)
    fad0:	df000604 	addi	fp,sp,24
    fad4:	e13ffc15 	stw	r4,-16(fp)
    fad8:	e17ffd15 	stw	r5,-12(fp)
    fadc:	e1bffe15 	stw	r6,-8(fp)
    fae0:	e1ffff15 	stw	r7,-4(fp)
    fae4:	e0bfff17 	ldw	r2,-4(fp)
    fae8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    faec:	d0a72217 	ldw	r2,-25464(gp)
    faf0:	1000021e 	bne	r2,zero,fafc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    faf4:	e0bffb17 	ldw	r2,-20(fp)
    faf8:	d0a72215 	stw	r2,-25464(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    fafc:	e0bffc17 	ldw	r2,-16(fp)
    fb00:	10800104 	addi	r2,r2,4
    fb04:	00c001c4 	movi	r3,7
    fb08:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    fb0c:	d8000015 	stw	zero,0(sp)
    fb10:	e1fffc17 	ldw	r7,-16(fp)
    fb14:	01800074 	movhi	r6,1
    fb18:	31be9304 	addi	r6,r6,-1460
    fb1c:	e17ffe17 	ldw	r5,-8(fp)
    fb20:	e13ffd17 	ldw	r4,-12(fp)
    fb24:	00100d00 	call	100d0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    fb28:	0001883a 	nop
    fb2c:	e037883a 	mov	sp,fp
    fb30:	dfc00117 	ldw	ra,4(sp)
    fb34:	df000017 	ldw	fp,0(sp)
    fb38:	dec00204 	addi	sp,sp,8
    fb3c:	f800283a 	ret

0000fb40 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    fb40:	defffe04 	addi	sp,sp,-8
    fb44:	df000115 	stw	fp,4(sp)
    fb48:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
    fb4c:	d0a71f17 	ldw	r2,-25476(gp)
    fb50:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
    fb54:	d0a72017 	ldw	r2,-25472(gp)
    fb58:	1000021e 	bne	r2,zero,fb64 <alt_timestamp_start+0x24>
  {
    return -1;
    fb5c:	00bfffc4 	movi	r2,-1
    fb60:	00001106 	br	fba8 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    fb64:	e0bfff17 	ldw	r2,-4(fp)
    fb68:	10800104 	addi	r2,r2,4
    fb6c:	00c00204 	movi	r3,8
    fb70:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    fb74:	e0bfff17 	ldw	r2,-4(fp)
    fb78:	10800204 	addi	r2,r2,8
    fb7c:	00ffffd4 	movui	r3,65535
    fb80:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    fb84:	e0bfff17 	ldw	r2,-4(fp)
    fb88:	10800304 	addi	r2,r2,12
    fb8c:	00ffffd4 	movui	r3,65535
    fb90:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    fb94:	e0bfff17 	ldw	r2,-4(fp)
    fb98:	10800104 	addi	r2,r2,4
    fb9c:	00c00104 	movi	r3,4
    fba0:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
    fba4:	0005883a 	mov	r2,zero
}
    fba8:	e037883a 	mov	sp,fp
    fbac:	df000017 	ldw	fp,0(sp)
    fbb0:	dec00104 	addi	sp,sp,4
    fbb4:	f800283a 	ret

0000fbb8 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    fbb8:	defffc04 	addi	sp,sp,-16
    fbbc:	df000315 	stw	fp,12(sp)
    fbc0:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
    fbc4:	d0a71f17 	ldw	r2,-25476(gp)
    fbc8:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
    fbcc:	d0a72017 	ldw	r2,-25472(gp)
    fbd0:	1000021e 	bne	r2,zero,fbdc <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    fbd4:	00bfffc4 	movi	r2,-1
    fbd8:	00001306 	br	fc28 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    fbdc:	e0bffd17 	ldw	r2,-12(fp)
    fbe0:	10800404 	addi	r2,r2,16
    fbe4:	0007883a 	mov	r3,zero
    fbe8:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    fbec:	e0bffd17 	ldw	r2,-12(fp)
    fbf0:	10800404 	addi	r2,r2,16
    fbf4:	10800037 	ldwio	r2,0(r2)
    fbf8:	10bfffcc 	andi	r2,r2,65535
    fbfc:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    fc00:	e0bffd17 	ldw	r2,-12(fp)
    fc04:	10800504 	addi	r2,r2,20
    fc08:	10800037 	ldwio	r2,0(r2)
    fc0c:	10bfffcc 	andi	r2,r2,65535
    fc10:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    fc14:	e0bfff17 	ldw	r2,-4(fp)
    fc18:	1006943a 	slli	r3,r2,16
    fc1c:	e0bffe17 	ldw	r2,-8(fp)
    fc20:	1884b03a 	or	r2,r3,r2
    fc24:	0084303a 	nor	r2,zero,r2
#endif
  }
}
    fc28:	e037883a 	mov	sp,fp
    fc2c:	df000017 	ldw	fp,0(sp)
    fc30:	dec00104 	addi	sp,sp,4
    fc34:	f800283a 	ret

0000fc38 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    fc38:	deffff04 	addi	sp,sp,-4
    fc3c:	df000015 	stw	fp,0(sp)
    fc40:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    fc44:	d0a72017 	ldw	r2,-25472(gp)
}
    fc48:	e037883a 	mov	sp,fp
    fc4c:	df000017 	ldw	fp,0(sp)
    fc50:	dec00104 	addi	sp,sp,4
    fc54:	f800283a 	ret

0000fc58 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    fc58:	defff504 	addi	sp,sp,-44
    fc5c:	df000a15 	stw	fp,40(sp)
    fc60:	df000a04 	addi	fp,sp,40
    fc64:	e13ffc15 	stw	r4,-16(fp)
    fc68:	e17ffd15 	stw	r5,-12(fp)
    fc6c:	e1bffe15 	stw	r6,-8(fp)
    fc70:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    fc74:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    fc78:	d0a72217 	ldw	r2,-25464(gp)
  
  if (alt_ticks_per_second ())
    fc7c:	10003c26 	beq	r2,zero,fd70 <alt_alarm_start+0x118>
  {
    if (alarm)
    fc80:	e0bffc17 	ldw	r2,-16(fp)
    fc84:	10003826 	beq	r2,zero,fd68 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    fc88:	e0bffc17 	ldw	r2,-16(fp)
    fc8c:	e0fffe17 	ldw	r3,-8(fp)
    fc90:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    fc94:	e0bffc17 	ldw	r2,-16(fp)
    fc98:	e0ffff17 	ldw	r3,-4(fp)
    fc9c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fca0:	0005303a 	rdctl	r2,status
    fca4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fca8:	e0fff917 	ldw	r3,-28(fp)
    fcac:	00bfff84 	movi	r2,-2
    fcb0:	1884703a 	and	r2,r3,r2
    fcb4:	1001703a 	wrctl	status,r2
  
  return context;
    fcb8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    fcbc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    fcc0:	d0a72317 	ldw	r2,-25460(gp)
      
      current_nticks = alt_nticks();
    fcc4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    fcc8:	e0fffd17 	ldw	r3,-12(fp)
    fccc:	e0bff617 	ldw	r2,-40(fp)
    fcd0:	1885883a 	add	r2,r3,r2
    fcd4:	10c00044 	addi	r3,r2,1
    fcd8:	e0bffc17 	ldw	r2,-16(fp)
    fcdc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    fce0:	e0bffc17 	ldw	r2,-16(fp)
    fce4:	10c00217 	ldw	r3,8(r2)
    fce8:	e0bff617 	ldw	r2,-40(fp)
    fcec:	1880042e 	bgeu	r3,r2,fd00 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    fcf0:	e0bffc17 	ldw	r2,-16(fp)
    fcf4:	00c00044 	movi	r3,1
    fcf8:	10c00405 	stb	r3,16(r2)
    fcfc:	00000206 	br	fd08 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    fd00:	e0bffc17 	ldw	r2,-16(fp)
    fd04:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    fd08:	e0bffc17 	ldw	r2,-16(fp)
    fd0c:	d0e00e04 	addi	r3,gp,-32712
    fd10:	e0fffa15 	stw	r3,-24(fp)
    fd14:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fd18:	e0bffb17 	ldw	r2,-20(fp)
    fd1c:	e0fffa17 	ldw	r3,-24(fp)
    fd20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fd24:	e0bffa17 	ldw	r2,-24(fp)
    fd28:	10c00017 	ldw	r3,0(r2)
    fd2c:	e0bffb17 	ldw	r2,-20(fp)
    fd30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fd34:	e0bffa17 	ldw	r2,-24(fp)
    fd38:	10800017 	ldw	r2,0(r2)
    fd3c:	e0fffb17 	ldw	r3,-20(fp)
    fd40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fd44:	e0bffa17 	ldw	r2,-24(fp)
    fd48:	e0fffb17 	ldw	r3,-20(fp)
    fd4c:	10c00015 	stw	r3,0(r2)
    fd50:	e0bff817 	ldw	r2,-32(fp)
    fd54:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd58:	e0bff717 	ldw	r2,-36(fp)
    fd5c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    fd60:	0005883a 	mov	r2,zero
    fd64:	00000306 	br	fd74 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    fd68:	00bffa84 	movi	r2,-22
    fd6c:	00000106 	br	fd74 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    fd70:	00bfde84 	movi	r2,-134
  }
}
    fd74:	e037883a 	mov	sp,fp
    fd78:	df000017 	ldw	fp,0(sp)
    fd7c:	dec00104 	addi	sp,sp,4
    fd80:	f800283a 	ret

0000fd84 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    fd84:	defffa04 	addi	sp,sp,-24
    fd88:	dfc00515 	stw	ra,20(sp)
    fd8c:	df000415 	stw	fp,16(sp)
    fd90:	df000404 	addi	fp,sp,16
    fd94:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    fd98:	008000c4 	movi	r2,3
    fd9c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    fda0:	e0fffd17 	ldw	r3,-12(fp)
    fda4:	008003f4 	movhi	r2,15
    fda8:	10909004 	addi	r2,r2,16960
    fdac:	1885383a 	mul	r2,r3,r2
    fdb0:	100b883a 	mov	r5,r2
    fdb4:	0100bef4 	movhi	r4,763
    fdb8:	213c2004 	addi	r4,r4,-3968
    fdbc:	0001d380 	call	1d38 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    fdc0:	100b883a 	mov	r5,r2
    fdc4:	01200034 	movhi	r4,32768
    fdc8:	213fffc4 	addi	r4,r4,-1
    fdcc:	0001d380 	call	1d38 <__udivsi3>
    fdd0:	100b883a 	mov	r5,r2
    fdd4:	e13fff17 	ldw	r4,-4(fp)
    fdd8:	0001d380 	call	1d38 <__udivsi3>
    fddc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    fde0:	e0bffe17 	ldw	r2,-8(fp)
    fde4:	10002a26 	beq	r2,zero,fe90 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    fde8:	e03ffc15 	stw	zero,-16(fp)
    fdec:	00001706 	br	fe4c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    fdf0:	00a00034 	movhi	r2,32768
    fdf4:	10bfffc4 	addi	r2,r2,-1
    fdf8:	10bfffc4 	addi	r2,r2,-1
    fdfc:	103ffe1e 	bne	r2,zero,fdf8 <__alt_data_end+0xff00fdf8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    fe00:	e0fffd17 	ldw	r3,-12(fp)
    fe04:	008003f4 	movhi	r2,15
    fe08:	10909004 	addi	r2,r2,16960
    fe0c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    fe10:	100b883a 	mov	r5,r2
    fe14:	0100bef4 	movhi	r4,763
    fe18:	213c2004 	addi	r4,r4,-3968
    fe1c:	0001d380 	call	1d38 <__udivsi3>
    fe20:	100b883a 	mov	r5,r2
    fe24:	01200034 	movhi	r4,32768
    fe28:	213fffc4 	addi	r4,r4,-1
    fe2c:	0001d380 	call	1d38 <__udivsi3>
    fe30:	1007883a 	mov	r3,r2
    fe34:	e0bfff17 	ldw	r2,-4(fp)
    fe38:	10c5c83a 	sub	r2,r2,r3
    fe3c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    fe40:	e0bffc17 	ldw	r2,-16(fp)
    fe44:	10800044 	addi	r2,r2,1
    fe48:	e0bffc15 	stw	r2,-16(fp)
    fe4c:	e0fffc17 	ldw	r3,-16(fp)
    fe50:	e0bffe17 	ldw	r2,-8(fp)
    fe54:	18bfe616 	blt	r3,r2,fdf0 <__alt_data_end+0xff00fdf0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fe58:	e0fffd17 	ldw	r3,-12(fp)
    fe5c:	008003f4 	movhi	r2,15
    fe60:	10909004 	addi	r2,r2,16960
    fe64:	1885383a 	mul	r2,r3,r2
    fe68:	100b883a 	mov	r5,r2
    fe6c:	0100bef4 	movhi	r4,763
    fe70:	213c2004 	addi	r4,r4,-3968
    fe74:	0001d380 	call	1d38 <__udivsi3>
    fe78:	1007883a 	mov	r3,r2
    fe7c:	e0bfff17 	ldw	r2,-4(fp)
    fe80:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    fe84:	10bfffc4 	addi	r2,r2,-1
    fe88:	103ffe1e 	bne	r2,zero,fe84 <__alt_data_end+0xff00fe84>
    fe8c:	00000d06 	br	fec4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fe90:	e0fffd17 	ldw	r3,-12(fp)
    fe94:	008003f4 	movhi	r2,15
    fe98:	10909004 	addi	r2,r2,16960
    fe9c:	1885383a 	mul	r2,r3,r2
    fea0:	100b883a 	mov	r5,r2
    fea4:	0100bef4 	movhi	r4,763
    fea8:	213c2004 	addi	r4,r4,-3968
    feac:	0001d380 	call	1d38 <__udivsi3>
    feb0:	1007883a 	mov	r3,r2
    feb4:	e0bfff17 	ldw	r2,-4(fp)
    feb8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    febc:	10bfffc4 	addi	r2,r2,-1
    fec0:	00bffe16 	blt	zero,r2,febc <__alt_data_end+0xff00febc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    fec4:	0005883a 	mov	r2,zero
}
    fec8:	e037883a 	mov	sp,fp
    fecc:	dfc00117 	ldw	ra,4(sp)
    fed0:	df000017 	ldw	fp,0(sp)
    fed4:	dec00204 	addi	sp,sp,8
    fed8:	f800283a 	ret

0000fedc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    fedc:	deffff04 	addi	sp,sp,-4
    fee0:	df000015 	stw	fp,0(sp)
    fee4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    fee8:	0001883a 	nop
    feec:	e037883a 	mov	sp,fp
    fef0:	df000017 	ldw	fp,0(sp)
    fef4:	dec00104 	addi	sp,sp,4
    fef8:	f800283a 	ret

0000fefc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fefc:	defffe04 	addi	sp,sp,-8
    ff00:	dfc00115 	stw	ra,4(sp)
    ff04:	df000015 	stw	fp,0(sp)
    ff08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ff0c:	d0a00b17 	ldw	r2,-32724(gp)
    ff10:	10000326 	beq	r2,zero,ff20 <alt_get_errno+0x24>
    ff14:	d0a00b17 	ldw	r2,-32724(gp)
    ff18:	103ee83a 	callr	r2
    ff1c:	00000106 	br	ff24 <alt_get_errno+0x28>
    ff20:	d0a71804 	addi	r2,gp,-25504
}
    ff24:	e037883a 	mov	sp,fp
    ff28:	dfc00117 	ldw	ra,4(sp)
    ff2c:	df000017 	ldw	fp,0(sp)
    ff30:	dec00204 	addi	sp,sp,8
    ff34:	f800283a 	ret

0000ff38 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    ff38:	defffa04 	addi	sp,sp,-24
    ff3c:	dfc00515 	stw	ra,20(sp)
    ff40:	df000415 	stw	fp,16(sp)
    ff44:	df000404 	addi	fp,sp,16
    ff48:	e13ffe15 	stw	r4,-8(fp)
    ff4c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    ff50:	e0bffe17 	ldw	r2,-8(fp)
    ff54:	10000326 	beq	r2,zero,ff64 <alt_dev_llist_insert+0x2c>
    ff58:	e0bffe17 	ldw	r2,-8(fp)
    ff5c:	10800217 	ldw	r2,8(r2)
    ff60:	1000061e 	bne	r2,zero,ff7c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    ff64:	000fefc0 	call	fefc <alt_get_errno>
    ff68:	1007883a 	mov	r3,r2
    ff6c:	00800584 	movi	r2,22
    ff70:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    ff74:	00bffa84 	movi	r2,-22
    ff78:	00001306 	br	ffc8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    ff7c:	e0bffe17 	ldw	r2,-8(fp)
    ff80:	e0ffff17 	ldw	r3,-4(fp)
    ff84:	e0fffc15 	stw	r3,-16(fp)
    ff88:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ff8c:	e0bffd17 	ldw	r2,-12(fp)
    ff90:	e0fffc17 	ldw	r3,-16(fp)
    ff94:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ff98:	e0bffc17 	ldw	r2,-16(fp)
    ff9c:	10c00017 	ldw	r3,0(r2)
    ffa0:	e0bffd17 	ldw	r2,-12(fp)
    ffa4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    ffa8:	e0bffc17 	ldw	r2,-16(fp)
    ffac:	10800017 	ldw	r2,0(r2)
    ffb0:	e0fffd17 	ldw	r3,-12(fp)
    ffb4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    ffb8:	e0bffc17 	ldw	r2,-16(fp)
    ffbc:	e0fffd17 	ldw	r3,-12(fp)
    ffc0:	10c00015 	stw	r3,0(r2)

  return 0;  
    ffc4:	0005883a 	mov	r2,zero
}
    ffc8:	e037883a 	mov	sp,fp
    ffcc:	dfc00117 	ldw	ra,4(sp)
    ffd0:	df000017 	ldw	fp,0(sp)
    ffd4:	dec00204 	addi	sp,sp,8
    ffd8:	f800283a 	ret

0000ffdc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    ffdc:	defffd04 	addi	sp,sp,-12
    ffe0:	dfc00215 	stw	ra,8(sp)
    ffe4:	df000115 	stw	fp,4(sp)
    ffe8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ffec:	00800074 	movhi	r2,1
    fff0:	1083f104 	addi	r2,r2,4036
    fff4:	e0bfff15 	stw	r2,-4(fp)
    fff8:	00000606 	br	10014 <_do_ctors+0x38>
        (*ctor) (); 
    fffc:	e0bfff17 	ldw	r2,-4(fp)
   10000:	10800017 	ldw	r2,0(r2)
   10004:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10008:	e0bfff17 	ldw	r2,-4(fp)
   1000c:	10bfff04 	addi	r2,r2,-4
   10010:	e0bfff15 	stw	r2,-4(fp)
   10014:	e0ffff17 	ldw	r3,-4(fp)
   10018:	00800074 	movhi	r2,1
   1001c:	1083f204 	addi	r2,r2,4040
   10020:	18bff62e 	bgeu	r3,r2,fffc <__alt_data_end+0xff00fffc>
        (*ctor) (); 
}
   10024:	0001883a 	nop
   10028:	e037883a 	mov	sp,fp
   1002c:	dfc00117 	ldw	ra,4(sp)
   10030:	df000017 	ldw	fp,0(sp)
   10034:	dec00204 	addi	sp,sp,8
   10038:	f800283a 	ret

0001003c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1003c:	defffd04 	addi	sp,sp,-12
   10040:	dfc00215 	stw	ra,8(sp)
   10044:	df000115 	stw	fp,4(sp)
   10048:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1004c:	00800074 	movhi	r2,1
   10050:	1083f104 	addi	r2,r2,4036
   10054:	e0bfff15 	stw	r2,-4(fp)
   10058:	00000606 	br	10074 <_do_dtors+0x38>
        (*dtor) (); 
   1005c:	e0bfff17 	ldw	r2,-4(fp)
   10060:	10800017 	ldw	r2,0(r2)
   10064:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10068:	e0bfff17 	ldw	r2,-4(fp)
   1006c:	10bfff04 	addi	r2,r2,-4
   10070:	e0bfff15 	stw	r2,-4(fp)
   10074:	e0ffff17 	ldw	r3,-4(fp)
   10078:	00800074 	movhi	r2,1
   1007c:	1083f204 	addi	r2,r2,4040
   10080:	18bff62e 	bgeu	r3,r2,1005c <__alt_data_end+0xff01005c>
        (*dtor) (); 
}
   10084:	0001883a 	nop
   10088:	e037883a 	mov	sp,fp
   1008c:	dfc00117 	ldw	ra,4(sp)
   10090:	df000017 	ldw	fp,0(sp)
   10094:	dec00204 	addi	sp,sp,8
   10098:	f800283a 	ret

0001009c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1009c:	defffe04 	addi	sp,sp,-8
   100a0:	dfc00115 	stw	ra,4(sp)
   100a4:	df000015 	stw	fp,0(sp)
   100a8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   100ac:	01440004 	movi	r5,4096
   100b0:	0009883a 	mov	r4,zero
   100b4:	0010b080 	call	10b08 <alt_icache_flush>
#endif
}
   100b8:	0001883a 	nop
   100bc:	e037883a 	mov	sp,fp
   100c0:	dfc00117 	ldw	ra,4(sp)
   100c4:	df000017 	ldw	fp,0(sp)
   100c8:	dec00204 	addi	sp,sp,8
   100cc:	f800283a 	ret

000100d0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   100d0:	defff904 	addi	sp,sp,-28
   100d4:	dfc00615 	stw	ra,24(sp)
   100d8:	df000515 	stw	fp,20(sp)
   100dc:	df000504 	addi	fp,sp,20
   100e0:	e13ffc15 	stw	r4,-16(fp)
   100e4:	e17ffd15 	stw	r5,-12(fp)
   100e8:	e1bffe15 	stw	r6,-8(fp)
   100ec:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   100f0:	e0800217 	ldw	r2,8(fp)
   100f4:	d8800015 	stw	r2,0(sp)
   100f8:	e1ffff17 	ldw	r7,-4(fp)
   100fc:	e1bffe17 	ldw	r6,-8(fp)
   10100:	e17ffd17 	ldw	r5,-12(fp)
   10104:	e13ffc17 	ldw	r4,-16(fp)
   10108:	00102800 	call	10280 <alt_iic_isr_register>
}  
   1010c:	e037883a 	mov	sp,fp
   10110:	dfc00117 	ldw	ra,4(sp)
   10114:	df000017 	ldw	fp,0(sp)
   10118:	dec00204 	addi	sp,sp,8
   1011c:	f800283a 	ret

00010120 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10120:	defff904 	addi	sp,sp,-28
   10124:	df000615 	stw	fp,24(sp)
   10128:	df000604 	addi	fp,sp,24
   1012c:	e13ffe15 	stw	r4,-8(fp)
   10130:	e17fff15 	stw	r5,-4(fp)
   10134:	e0bfff17 	ldw	r2,-4(fp)
   10138:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1013c:	0005303a 	rdctl	r2,status
   10140:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10144:	e0fffb17 	ldw	r3,-20(fp)
   10148:	00bfff84 	movi	r2,-2
   1014c:	1884703a 	and	r2,r3,r2
   10150:	1001703a 	wrctl	status,r2
  
  return context;
   10154:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10158:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1015c:	00c00044 	movi	r3,1
   10160:	e0bffa17 	ldw	r2,-24(fp)
   10164:	1884983a 	sll	r2,r3,r2
   10168:	1007883a 	mov	r3,r2
   1016c:	d0a72117 	ldw	r2,-25468(gp)
   10170:	1884b03a 	or	r2,r3,r2
   10174:	d0a72115 	stw	r2,-25468(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10178:	d0a72117 	ldw	r2,-25468(gp)
   1017c:	100170fa 	wrctl	ienable,r2
   10180:	e0bffc17 	ldw	r2,-16(fp)
   10184:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10188:	e0bffd17 	ldw	r2,-12(fp)
   1018c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10190:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10194:	0001883a 	nop
}
   10198:	e037883a 	mov	sp,fp
   1019c:	df000017 	ldw	fp,0(sp)
   101a0:	dec00104 	addi	sp,sp,4
   101a4:	f800283a 	ret

000101a8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   101a8:	defff904 	addi	sp,sp,-28
   101ac:	df000615 	stw	fp,24(sp)
   101b0:	df000604 	addi	fp,sp,24
   101b4:	e13ffe15 	stw	r4,-8(fp)
   101b8:	e17fff15 	stw	r5,-4(fp)
   101bc:	e0bfff17 	ldw	r2,-4(fp)
   101c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   101c4:	0005303a 	rdctl	r2,status
   101c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   101cc:	e0fffb17 	ldw	r3,-20(fp)
   101d0:	00bfff84 	movi	r2,-2
   101d4:	1884703a 	and	r2,r3,r2
   101d8:	1001703a 	wrctl	status,r2
  
  return context;
   101dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   101e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   101e4:	00c00044 	movi	r3,1
   101e8:	e0bffa17 	ldw	r2,-24(fp)
   101ec:	1884983a 	sll	r2,r3,r2
   101f0:	0084303a 	nor	r2,zero,r2
   101f4:	1007883a 	mov	r3,r2
   101f8:	d0a72117 	ldw	r2,-25468(gp)
   101fc:	1884703a 	and	r2,r3,r2
   10200:	d0a72115 	stw	r2,-25468(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10204:	d0a72117 	ldw	r2,-25468(gp)
   10208:	100170fa 	wrctl	ienable,r2
   1020c:	e0bffc17 	ldw	r2,-16(fp)
   10210:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10214:	e0bffd17 	ldw	r2,-12(fp)
   10218:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1021c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10220:	0001883a 	nop
}
   10224:	e037883a 	mov	sp,fp
   10228:	df000017 	ldw	fp,0(sp)
   1022c:	dec00104 	addi	sp,sp,4
   10230:	f800283a 	ret

00010234 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10234:	defffc04 	addi	sp,sp,-16
   10238:	df000315 	stw	fp,12(sp)
   1023c:	df000304 	addi	fp,sp,12
   10240:	e13ffe15 	stw	r4,-8(fp)
   10244:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10248:	000530fa 	rdctl	r2,ienable
   1024c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10250:	00c00044 	movi	r3,1
   10254:	e0bfff17 	ldw	r2,-4(fp)
   10258:	1884983a 	sll	r2,r3,r2
   1025c:	1007883a 	mov	r3,r2
   10260:	e0bffd17 	ldw	r2,-12(fp)
   10264:	1884703a 	and	r2,r3,r2
   10268:	1004c03a 	cmpne	r2,r2,zero
   1026c:	10803fcc 	andi	r2,r2,255
}
   10270:	e037883a 	mov	sp,fp
   10274:	df000017 	ldw	fp,0(sp)
   10278:	dec00104 	addi	sp,sp,4
   1027c:	f800283a 	ret

00010280 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10280:	defff504 	addi	sp,sp,-44
   10284:	dfc00a15 	stw	ra,40(sp)
   10288:	df000915 	stw	fp,36(sp)
   1028c:	df000904 	addi	fp,sp,36
   10290:	e13ffc15 	stw	r4,-16(fp)
   10294:	e17ffd15 	stw	r5,-12(fp)
   10298:	e1bffe15 	stw	r6,-8(fp)
   1029c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   102a0:	00bffa84 	movi	r2,-22
   102a4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   102a8:	e0bffd17 	ldw	r2,-12(fp)
   102ac:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   102b0:	e0bff817 	ldw	r2,-32(fp)
   102b4:	10800808 	cmpgei	r2,r2,32
   102b8:	1000271e 	bne	r2,zero,10358 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   102bc:	0005303a 	rdctl	r2,status
   102c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   102c4:	e0fffb17 	ldw	r3,-20(fp)
   102c8:	00bfff84 	movi	r2,-2
   102cc:	1884703a 	and	r2,r3,r2
   102d0:	1001703a 	wrctl	status,r2
  
  return context;
   102d4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   102d8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   102dc:	00800074 	movhi	r2,1
   102e0:	10940204 	addi	r2,r2,20488
   102e4:	e0fff817 	ldw	r3,-32(fp)
   102e8:	180690fa 	slli	r3,r3,3
   102ec:	10c5883a 	add	r2,r2,r3
   102f0:	e0fffe17 	ldw	r3,-8(fp)
   102f4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   102f8:	00800074 	movhi	r2,1
   102fc:	10940204 	addi	r2,r2,20488
   10300:	e0fff817 	ldw	r3,-32(fp)
   10304:	180690fa 	slli	r3,r3,3
   10308:	10c5883a 	add	r2,r2,r3
   1030c:	10800104 	addi	r2,r2,4
   10310:	e0ffff17 	ldw	r3,-4(fp)
   10314:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10318:	e0bffe17 	ldw	r2,-8(fp)
   1031c:	10000526 	beq	r2,zero,10334 <alt_iic_isr_register+0xb4>
   10320:	e0bff817 	ldw	r2,-32(fp)
   10324:	100b883a 	mov	r5,r2
   10328:	e13ffc17 	ldw	r4,-16(fp)
   1032c:	00101200 	call	10120 <alt_ic_irq_enable>
   10330:	00000406 	br	10344 <alt_iic_isr_register+0xc4>
   10334:	e0bff817 	ldw	r2,-32(fp)
   10338:	100b883a 	mov	r5,r2
   1033c:	e13ffc17 	ldw	r4,-16(fp)
   10340:	00101a80 	call	101a8 <alt_ic_irq_disable>
   10344:	e0bff715 	stw	r2,-36(fp)
   10348:	e0bffa17 	ldw	r2,-24(fp)
   1034c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10350:	e0bff917 	ldw	r2,-28(fp)
   10354:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10358:	e0bff717 	ldw	r2,-36(fp)
}
   1035c:	e037883a 	mov	sp,fp
   10360:	dfc00117 	ldw	ra,4(sp)
   10364:	df000017 	ldw	fp,0(sp)
   10368:	dec00204 	addi	sp,sp,8
   1036c:	f800283a 	ret

00010370 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10370:	defff904 	addi	sp,sp,-28
   10374:	dfc00615 	stw	ra,24(sp)
   10378:	df000515 	stw	fp,20(sp)
   1037c:	df000504 	addi	fp,sp,20
   10380:	e13ffc15 	stw	r4,-16(fp)
   10384:	e17ffd15 	stw	r5,-12(fp)
   10388:	e1bffe15 	stw	r6,-8(fp)
   1038c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   10390:	e1bfff17 	ldw	r6,-4(fp)
   10394:	e17ffe17 	ldw	r5,-8(fp)
   10398:	e13ffd17 	ldw	r4,-12(fp)
   1039c:	00105b00 	call	105b0 <open>
   103a0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   103a4:	e0bffb17 	ldw	r2,-20(fp)
   103a8:	10001c16 	blt	r2,zero,1041c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   103ac:	00800074 	movhi	r2,1
   103b0:	10885b04 	addi	r2,r2,8556
   103b4:	e0fffb17 	ldw	r3,-20(fp)
   103b8:	18c00324 	muli	r3,r3,12
   103bc:	10c5883a 	add	r2,r2,r3
   103c0:	10c00017 	ldw	r3,0(r2)
   103c4:	e0bffc17 	ldw	r2,-16(fp)
   103c8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   103cc:	00800074 	movhi	r2,1
   103d0:	10885b04 	addi	r2,r2,8556
   103d4:	e0fffb17 	ldw	r3,-20(fp)
   103d8:	18c00324 	muli	r3,r3,12
   103dc:	10c5883a 	add	r2,r2,r3
   103e0:	10800104 	addi	r2,r2,4
   103e4:	10c00017 	ldw	r3,0(r2)
   103e8:	e0bffc17 	ldw	r2,-16(fp)
   103ec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   103f0:	00800074 	movhi	r2,1
   103f4:	10885b04 	addi	r2,r2,8556
   103f8:	e0fffb17 	ldw	r3,-20(fp)
   103fc:	18c00324 	muli	r3,r3,12
   10400:	10c5883a 	add	r2,r2,r3
   10404:	10800204 	addi	r2,r2,8
   10408:	10c00017 	ldw	r3,0(r2)
   1040c:	e0bffc17 	ldw	r2,-16(fp)
   10410:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10414:	e13ffb17 	ldw	r4,-20(fp)
   10418:	000ec840 	call	ec84 <alt_release_fd>
  }
} 
   1041c:	0001883a 	nop
   10420:	e037883a 	mov	sp,fp
   10424:	dfc00117 	ldw	ra,4(sp)
   10428:	df000017 	ldw	fp,0(sp)
   1042c:	dec00204 	addi	sp,sp,8
   10430:	f800283a 	ret

00010434 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10434:	defffb04 	addi	sp,sp,-20
   10438:	dfc00415 	stw	ra,16(sp)
   1043c:	df000315 	stw	fp,12(sp)
   10440:	df000304 	addi	fp,sp,12
   10444:	e13ffd15 	stw	r4,-12(fp)
   10448:	e17ffe15 	stw	r5,-8(fp)
   1044c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10450:	01c07fc4 	movi	r7,511
   10454:	01800044 	movi	r6,1
   10458:	e17ffd17 	ldw	r5,-12(fp)
   1045c:	01000074 	movhi	r4,1
   10460:	21085e04 	addi	r4,r4,8568
   10464:	00103700 	call	10370 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10468:	01c07fc4 	movi	r7,511
   1046c:	000d883a 	mov	r6,zero
   10470:	e17ffe17 	ldw	r5,-8(fp)
   10474:	01000074 	movhi	r4,1
   10478:	21085b04 	addi	r4,r4,8556
   1047c:	00103700 	call	10370 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10480:	01c07fc4 	movi	r7,511
   10484:	01800044 	movi	r6,1
   10488:	e17fff17 	ldw	r5,-4(fp)
   1048c:	01000074 	movhi	r4,1
   10490:	21086104 	addi	r4,r4,8580
   10494:	00103700 	call	10370 <alt_open_fd>
}  
   10498:	0001883a 	nop
   1049c:	e037883a 	mov	sp,fp
   104a0:	dfc00117 	ldw	ra,4(sp)
   104a4:	df000017 	ldw	fp,0(sp)
   104a8:	dec00204 	addi	sp,sp,8
   104ac:	f800283a 	ret

000104b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   104b0:	defffe04 	addi	sp,sp,-8
   104b4:	dfc00115 	stw	ra,4(sp)
   104b8:	df000015 	stw	fp,0(sp)
   104bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   104c0:	d0a00b17 	ldw	r2,-32724(gp)
   104c4:	10000326 	beq	r2,zero,104d4 <alt_get_errno+0x24>
   104c8:	d0a00b17 	ldw	r2,-32724(gp)
   104cc:	103ee83a 	callr	r2
   104d0:	00000106 	br	104d8 <alt_get_errno+0x28>
   104d4:	d0a71804 	addi	r2,gp,-25504
}
   104d8:	e037883a 	mov	sp,fp
   104dc:	dfc00117 	ldw	ra,4(sp)
   104e0:	df000017 	ldw	fp,0(sp)
   104e4:	dec00204 	addi	sp,sp,8
   104e8:	f800283a 	ret

000104ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   104ec:	defffd04 	addi	sp,sp,-12
   104f0:	df000215 	stw	fp,8(sp)
   104f4:	df000204 	addi	fp,sp,8
   104f8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   104fc:	e0bfff17 	ldw	r2,-4(fp)
   10500:	10800217 	ldw	r2,8(r2)
   10504:	10d00034 	orhi	r3,r2,16384
   10508:	e0bfff17 	ldw	r2,-4(fp)
   1050c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10510:	e03ffe15 	stw	zero,-8(fp)
   10514:	00001d06 	br	1058c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10518:	00800074 	movhi	r2,1
   1051c:	10885b04 	addi	r2,r2,8556
   10520:	e0fffe17 	ldw	r3,-8(fp)
   10524:	18c00324 	muli	r3,r3,12
   10528:	10c5883a 	add	r2,r2,r3
   1052c:	10c00017 	ldw	r3,0(r2)
   10530:	e0bfff17 	ldw	r2,-4(fp)
   10534:	10800017 	ldw	r2,0(r2)
   10538:	1880111e 	bne	r3,r2,10580 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1053c:	00800074 	movhi	r2,1
   10540:	10885b04 	addi	r2,r2,8556
   10544:	e0fffe17 	ldw	r3,-8(fp)
   10548:	18c00324 	muli	r3,r3,12
   1054c:	10c5883a 	add	r2,r2,r3
   10550:	10800204 	addi	r2,r2,8
   10554:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10558:	1000090e 	bge	r2,zero,10580 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1055c:	e0bffe17 	ldw	r2,-8(fp)
   10560:	10c00324 	muli	r3,r2,12
   10564:	00800074 	movhi	r2,1
   10568:	10885b04 	addi	r2,r2,8556
   1056c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10570:	e0bfff17 	ldw	r2,-4(fp)
   10574:	18800226 	beq	r3,r2,10580 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10578:	00bffcc4 	movi	r2,-13
   1057c:	00000806 	br	105a0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10580:	e0bffe17 	ldw	r2,-8(fp)
   10584:	10800044 	addi	r2,r2,1
   10588:	e0bffe15 	stw	r2,-8(fp)
   1058c:	d0a00a17 	ldw	r2,-32728(gp)
   10590:	1007883a 	mov	r3,r2
   10594:	e0bffe17 	ldw	r2,-8(fp)
   10598:	18bfdf2e 	bgeu	r3,r2,10518 <__alt_data_end+0xff010518>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1059c:	0005883a 	mov	r2,zero
}
   105a0:	e037883a 	mov	sp,fp
   105a4:	df000017 	ldw	fp,0(sp)
   105a8:	dec00104 	addi	sp,sp,4
   105ac:	f800283a 	ret

000105b0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   105b0:	defff604 	addi	sp,sp,-40
   105b4:	dfc00915 	stw	ra,36(sp)
   105b8:	df000815 	stw	fp,32(sp)
   105bc:	df000804 	addi	fp,sp,32
   105c0:	e13ffd15 	stw	r4,-12(fp)
   105c4:	e17ffe15 	stw	r5,-8(fp)
   105c8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   105cc:	00bfffc4 	movi	r2,-1
   105d0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   105d4:	00bffb44 	movi	r2,-19
   105d8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   105dc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   105e0:	d1600804 	addi	r5,gp,-32736
   105e4:	e13ffd17 	ldw	r4,-12(fp)
   105e8:	00108cc0 	call	108cc <alt_find_dev>
   105ec:	e0bff815 	stw	r2,-32(fp)
   105f0:	e0bff817 	ldw	r2,-32(fp)
   105f4:	1000051e 	bne	r2,zero,1060c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   105f8:	e13ffd17 	ldw	r4,-12(fp)
   105fc:	001095c0 	call	1095c <alt_find_file>
   10600:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10604:	00800044 	movi	r2,1
   10608:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1060c:	e0bff817 	ldw	r2,-32(fp)
   10610:	10002926 	beq	r2,zero,106b8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10614:	e13ff817 	ldw	r4,-32(fp)
   10618:	0010a640 	call	10a64 <alt_get_fd>
   1061c:	e0bff915 	stw	r2,-28(fp)
   10620:	e0bff917 	ldw	r2,-28(fp)
   10624:	1000030e 	bge	r2,zero,10634 <open+0x84>
    {
      status = index;
   10628:	e0bff917 	ldw	r2,-28(fp)
   1062c:	e0bffa15 	stw	r2,-24(fp)
   10630:	00002306 	br	106c0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   10634:	e0bff917 	ldw	r2,-28(fp)
   10638:	10c00324 	muli	r3,r2,12
   1063c:	00800074 	movhi	r2,1
   10640:	10885b04 	addi	r2,r2,8556
   10644:	1885883a 	add	r2,r3,r2
   10648:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1064c:	e0fffe17 	ldw	r3,-8(fp)
   10650:	00900034 	movhi	r2,16384
   10654:	10bfffc4 	addi	r2,r2,-1
   10658:	1886703a 	and	r3,r3,r2
   1065c:	e0bffc17 	ldw	r2,-16(fp)
   10660:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10664:	e0bffb17 	ldw	r2,-20(fp)
   10668:	1000051e 	bne	r2,zero,10680 <open+0xd0>
   1066c:	e13ffc17 	ldw	r4,-16(fp)
   10670:	00104ec0 	call	104ec <alt_file_locked>
   10674:	e0bffa15 	stw	r2,-24(fp)
   10678:	e0bffa17 	ldw	r2,-24(fp)
   1067c:	10001016 	blt	r2,zero,106c0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10680:	e0bff817 	ldw	r2,-32(fp)
   10684:	10800317 	ldw	r2,12(r2)
   10688:	10000826 	beq	r2,zero,106ac <open+0xfc>
   1068c:	e0bff817 	ldw	r2,-32(fp)
   10690:	10800317 	ldw	r2,12(r2)
   10694:	e1ffff17 	ldw	r7,-4(fp)
   10698:	e1bffe17 	ldw	r6,-8(fp)
   1069c:	e17ffd17 	ldw	r5,-12(fp)
   106a0:	e13ffc17 	ldw	r4,-16(fp)
   106a4:	103ee83a 	callr	r2
   106a8:	00000106 	br	106b0 <open+0x100>
   106ac:	0005883a 	mov	r2,zero
   106b0:	e0bffa15 	stw	r2,-24(fp)
   106b4:	00000206 	br	106c0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   106b8:	00bffb44 	movi	r2,-19
   106bc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   106c0:	e0bffa17 	ldw	r2,-24(fp)
   106c4:	1000090e 	bge	r2,zero,106ec <open+0x13c>
  {
    alt_release_fd (index);  
   106c8:	e13ff917 	ldw	r4,-28(fp)
   106cc:	000ec840 	call	ec84 <alt_release_fd>
    ALT_ERRNO = -status;
   106d0:	00104b00 	call	104b0 <alt_get_errno>
   106d4:	1007883a 	mov	r3,r2
   106d8:	e0bffa17 	ldw	r2,-24(fp)
   106dc:	0085c83a 	sub	r2,zero,r2
   106e0:	18800015 	stw	r2,0(r3)
    return -1;
   106e4:	00bfffc4 	movi	r2,-1
   106e8:	00000106 	br	106f0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   106ec:	e0bff917 	ldw	r2,-28(fp)
}
   106f0:	e037883a 	mov	sp,fp
   106f4:	dfc00117 	ldw	ra,4(sp)
   106f8:	df000017 	ldw	fp,0(sp)
   106fc:	dec00204 	addi	sp,sp,8
   10700:	f800283a 	ret

00010704 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10704:	defffa04 	addi	sp,sp,-24
   10708:	df000515 	stw	fp,20(sp)
   1070c:	df000504 	addi	fp,sp,20
   10710:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10714:	0005303a 	rdctl	r2,status
   10718:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1071c:	e0fffc17 	ldw	r3,-16(fp)
   10720:	00bfff84 	movi	r2,-2
   10724:	1884703a 	and	r2,r3,r2
   10728:	1001703a 	wrctl	status,r2
  
  return context;
   1072c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10730:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10734:	e0bfff17 	ldw	r2,-4(fp)
   10738:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1073c:	e0bffd17 	ldw	r2,-12(fp)
   10740:	10800017 	ldw	r2,0(r2)
   10744:	e0fffd17 	ldw	r3,-12(fp)
   10748:	18c00117 	ldw	r3,4(r3)
   1074c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10750:	e0bffd17 	ldw	r2,-12(fp)
   10754:	10800117 	ldw	r2,4(r2)
   10758:	e0fffd17 	ldw	r3,-12(fp)
   1075c:	18c00017 	ldw	r3,0(r3)
   10760:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10764:	e0bffd17 	ldw	r2,-12(fp)
   10768:	e0fffd17 	ldw	r3,-12(fp)
   1076c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   10770:	e0bffd17 	ldw	r2,-12(fp)
   10774:	e0fffd17 	ldw	r3,-12(fp)
   10778:	10c00015 	stw	r3,0(r2)
   1077c:	e0bffb17 	ldw	r2,-20(fp)
   10780:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10784:	e0bffe17 	ldw	r2,-8(fp)
   10788:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1078c:	0001883a 	nop
   10790:	e037883a 	mov	sp,fp
   10794:	df000017 	ldw	fp,0(sp)
   10798:	dec00104 	addi	sp,sp,4
   1079c:	f800283a 	ret

000107a0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   107a0:	defffb04 	addi	sp,sp,-20
   107a4:	dfc00415 	stw	ra,16(sp)
   107a8:	df000315 	stw	fp,12(sp)
   107ac:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   107b0:	d0a00e17 	ldw	r2,-32712(gp)
   107b4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   107b8:	d0a72317 	ldw	r2,-25460(gp)
   107bc:	10800044 	addi	r2,r2,1
   107c0:	d0a72315 	stw	r2,-25460(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   107c4:	00002e06 	br	10880 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   107c8:	e0bffd17 	ldw	r2,-12(fp)
   107cc:	10800017 	ldw	r2,0(r2)
   107d0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   107d4:	e0bffd17 	ldw	r2,-12(fp)
   107d8:	10800403 	ldbu	r2,16(r2)
   107dc:	10803fcc 	andi	r2,r2,255
   107e0:	10000426 	beq	r2,zero,107f4 <alt_tick+0x54>
   107e4:	d0a72317 	ldw	r2,-25460(gp)
   107e8:	1000021e 	bne	r2,zero,107f4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   107ec:	e0bffd17 	ldw	r2,-12(fp)
   107f0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   107f4:	e0bffd17 	ldw	r2,-12(fp)
   107f8:	10800217 	ldw	r2,8(r2)
   107fc:	d0e72317 	ldw	r3,-25460(gp)
   10800:	18801d36 	bltu	r3,r2,10878 <alt_tick+0xd8>
   10804:	e0bffd17 	ldw	r2,-12(fp)
   10808:	10800403 	ldbu	r2,16(r2)
   1080c:	10803fcc 	andi	r2,r2,255
   10810:	1000191e 	bne	r2,zero,10878 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10814:	e0bffd17 	ldw	r2,-12(fp)
   10818:	10800317 	ldw	r2,12(r2)
   1081c:	e0fffd17 	ldw	r3,-12(fp)
   10820:	18c00517 	ldw	r3,20(r3)
   10824:	1809883a 	mov	r4,r3
   10828:	103ee83a 	callr	r2
   1082c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10830:	e0bfff17 	ldw	r2,-4(fp)
   10834:	1000031e 	bne	r2,zero,10844 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   10838:	e13ffd17 	ldw	r4,-12(fp)
   1083c:	00107040 	call	10704 <alt_alarm_stop>
   10840:	00000d06 	br	10878 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   10844:	e0bffd17 	ldw	r2,-12(fp)
   10848:	10c00217 	ldw	r3,8(r2)
   1084c:	e0bfff17 	ldw	r2,-4(fp)
   10850:	1887883a 	add	r3,r3,r2
   10854:	e0bffd17 	ldw	r2,-12(fp)
   10858:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1085c:	e0bffd17 	ldw	r2,-12(fp)
   10860:	10c00217 	ldw	r3,8(r2)
   10864:	d0a72317 	ldw	r2,-25460(gp)
   10868:	1880032e 	bgeu	r3,r2,10878 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1086c:	e0bffd17 	ldw	r2,-12(fp)
   10870:	00c00044 	movi	r3,1
   10874:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   10878:	e0bffe17 	ldw	r2,-8(fp)
   1087c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10880:	e0fffd17 	ldw	r3,-12(fp)
   10884:	d0a00e04 	addi	r2,gp,-32712
   10888:	18bfcf1e 	bne	r3,r2,107c8 <__alt_data_end+0xff0107c8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1088c:	0001883a 	nop
}
   10890:	0001883a 	nop
   10894:	e037883a 	mov	sp,fp
   10898:	dfc00117 	ldw	ra,4(sp)
   1089c:	df000017 	ldw	fp,0(sp)
   108a0:	dec00204 	addi	sp,sp,8
   108a4:	f800283a 	ret

000108a8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   108a8:	deffff04 	addi	sp,sp,-4
   108ac:	df000015 	stw	fp,0(sp)
   108b0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   108b4:	000170fa 	wrctl	ienable,zero
}
   108b8:	0001883a 	nop
   108bc:	e037883a 	mov	sp,fp
   108c0:	df000017 	ldw	fp,0(sp)
   108c4:	dec00104 	addi	sp,sp,4
   108c8:	f800283a 	ret

000108cc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   108cc:	defffa04 	addi	sp,sp,-24
   108d0:	dfc00515 	stw	ra,20(sp)
   108d4:	df000415 	stw	fp,16(sp)
   108d8:	df000404 	addi	fp,sp,16
   108dc:	e13ffe15 	stw	r4,-8(fp)
   108e0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   108e4:	e0bfff17 	ldw	r2,-4(fp)
   108e8:	10800017 	ldw	r2,0(r2)
   108ec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   108f0:	e13ffe17 	ldw	r4,-8(fp)
   108f4:	00027bc0 	call	27bc <strlen>
   108f8:	10800044 	addi	r2,r2,1
   108fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10900:	00000d06 	br	10938 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10904:	e0bffc17 	ldw	r2,-16(fp)
   10908:	10800217 	ldw	r2,8(r2)
   1090c:	e0fffd17 	ldw	r3,-12(fp)
   10910:	180d883a 	mov	r6,r3
   10914:	e17ffe17 	ldw	r5,-8(fp)
   10918:	1009883a 	mov	r4,r2
   1091c:	0010c800 	call	10c80 <memcmp>
   10920:	1000021e 	bne	r2,zero,1092c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10924:	e0bffc17 	ldw	r2,-16(fp)
   10928:	00000706 	br	10948 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1092c:	e0bffc17 	ldw	r2,-16(fp)
   10930:	10800017 	ldw	r2,0(r2)
   10934:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10938:	e0fffc17 	ldw	r3,-16(fp)
   1093c:	e0bfff17 	ldw	r2,-4(fp)
   10940:	18bff01e 	bne	r3,r2,10904 <__alt_data_end+0xff010904>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10944:	0005883a 	mov	r2,zero
}
   10948:	e037883a 	mov	sp,fp
   1094c:	dfc00117 	ldw	ra,4(sp)
   10950:	df000017 	ldw	fp,0(sp)
   10954:	dec00204 	addi	sp,sp,8
   10958:	f800283a 	ret

0001095c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1095c:	defffb04 	addi	sp,sp,-20
   10960:	dfc00415 	stw	ra,16(sp)
   10964:	df000315 	stw	fp,12(sp)
   10968:	df000304 	addi	fp,sp,12
   1096c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10970:	d0a00617 	ldw	r2,-32744(gp)
   10974:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10978:	00003106 	br	10a40 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1097c:	e0bffd17 	ldw	r2,-12(fp)
   10980:	10800217 	ldw	r2,8(r2)
   10984:	1009883a 	mov	r4,r2
   10988:	00027bc0 	call	27bc <strlen>
   1098c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10990:	e0bffd17 	ldw	r2,-12(fp)
   10994:	10c00217 	ldw	r3,8(r2)
   10998:	e0bffe17 	ldw	r2,-8(fp)
   1099c:	10bfffc4 	addi	r2,r2,-1
   109a0:	1885883a 	add	r2,r3,r2
   109a4:	10800003 	ldbu	r2,0(r2)
   109a8:	10803fcc 	andi	r2,r2,255
   109ac:	1080201c 	xori	r2,r2,128
   109b0:	10bfe004 	addi	r2,r2,-128
   109b4:	10800bd8 	cmpnei	r2,r2,47
   109b8:	1000031e 	bne	r2,zero,109c8 <alt_find_file+0x6c>
    {
      len -= 1;
   109bc:	e0bffe17 	ldw	r2,-8(fp)
   109c0:	10bfffc4 	addi	r2,r2,-1
   109c4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   109c8:	e0bffe17 	ldw	r2,-8(fp)
   109cc:	e0ffff17 	ldw	r3,-4(fp)
   109d0:	1885883a 	add	r2,r3,r2
   109d4:	10800003 	ldbu	r2,0(r2)
   109d8:	10803fcc 	andi	r2,r2,255
   109dc:	1080201c 	xori	r2,r2,128
   109e0:	10bfe004 	addi	r2,r2,-128
   109e4:	10800be0 	cmpeqi	r2,r2,47
   109e8:	1000081e 	bne	r2,zero,10a0c <alt_find_file+0xb0>
   109ec:	e0bffe17 	ldw	r2,-8(fp)
   109f0:	e0ffff17 	ldw	r3,-4(fp)
   109f4:	1885883a 	add	r2,r3,r2
   109f8:	10800003 	ldbu	r2,0(r2)
   109fc:	10803fcc 	andi	r2,r2,255
   10a00:	1080201c 	xori	r2,r2,128
   10a04:	10bfe004 	addi	r2,r2,-128
   10a08:	10000a1e 	bne	r2,zero,10a34 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   10a0c:	e0bffd17 	ldw	r2,-12(fp)
   10a10:	10800217 	ldw	r2,8(r2)
   10a14:	e0fffe17 	ldw	r3,-8(fp)
   10a18:	180d883a 	mov	r6,r3
   10a1c:	e17fff17 	ldw	r5,-4(fp)
   10a20:	1009883a 	mov	r4,r2
   10a24:	0010c800 	call	10c80 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10a28:	1000021e 	bne	r2,zero,10a34 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10a2c:	e0bffd17 	ldw	r2,-12(fp)
   10a30:	00000706 	br	10a50 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   10a34:	e0bffd17 	ldw	r2,-12(fp)
   10a38:	10800017 	ldw	r2,0(r2)
   10a3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10a40:	e0fffd17 	ldw	r3,-12(fp)
   10a44:	d0a00604 	addi	r2,gp,-32744
   10a48:	18bfcc1e 	bne	r3,r2,1097c <__alt_data_end+0xff01097c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10a4c:	0005883a 	mov	r2,zero
}
   10a50:	e037883a 	mov	sp,fp
   10a54:	dfc00117 	ldw	ra,4(sp)
   10a58:	df000017 	ldw	fp,0(sp)
   10a5c:	dec00204 	addi	sp,sp,8
   10a60:	f800283a 	ret

00010a64 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10a64:	defffc04 	addi	sp,sp,-16
   10a68:	df000315 	stw	fp,12(sp)
   10a6c:	df000304 	addi	fp,sp,12
   10a70:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10a74:	00bffa04 	movi	r2,-24
   10a78:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10a7c:	e03ffd15 	stw	zero,-12(fp)
   10a80:	00001906 	br	10ae8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   10a84:	00800074 	movhi	r2,1
   10a88:	10885b04 	addi	r2,r2,8556
   10a8c:	e0fffd17 	ldw	r3,-12(fp)
   10a90:	18c00324 	muli	r3,r3,12
   10a94:	10c5883a 	add	r2,r2,r3
   10a98:	10800017 	ldw	r2,0(r2)
   10a9c:	10000f1e 	bne	r2,zero,10adc <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   10aa0:	00800074 	movhi	r2,1
   10aa4:	10885b04 	addi	r2,r2,8556
   10aa8:	e0fffd17 	ldw	r3,-12(fp)
   10aac:	18c00324 	muli	r3,r3,12
   10ab0:	10c5883a 	add	r2,r2,r3
   10ab4:	e0ffff17 	ldw	r3,-4(fp)
   10ab8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10abc:	d0e00a17 	ldw	r3,-32728(gp)
   10ac0:	e0bffd17 	ldw	r2,-12(fp)
   10ac4:	1880020e 	bge	r3,r2,10ad0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   10ac8:	e0bffd17 	ldw	r2,-12(fp)
   10acc:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   10ad0:	e0bffd17 	ldw	r2,-12(fp)
   10ad4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   10ad8:	00000606 	br	10af4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10adc:	e0bffd17 	ldw	r2,-12(fp)
   10ae0:	10800044 	addi	r2,r2,1
   10ae4:	e0bffd15 	stw	r2,-12(fp)
   10ae8:	e0bffd17 	ldw	r2,-12(fp)
   10aec:	10800810 	cmplti	r2,r2,32
   10af0:	103fe41e 	bne	r2,zero,10a84 <__alt_data_end+0xff010a84>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10af4:	e0bffe17 	ldw	r2,-8(fp)
}
   10af8:	e037883a 	mov	sp,fp
   10afc:	df000017 	ldw	fp,0(sp)
   10b00:	dec00104 	addi	sp,sp,4
   10b04:	f800283a 	ret

00010b08 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   10b08:	defffb04 	addi	sp,sp,-20
   10b0c:	df000415 	stw	fp,16(sp)
   10b10:	df000404 	addi	fp,sp,16
   10b14:	e13ffe15 	stw	r4,-8(fp)
   10b18:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   10b1c:	e0bfff17 	ldw	r2,-4(fp)
   10b20:	10840070 	cmpltui	r2,r2,4097
   10b24:	1000021e 	bne	r2,zero,10b30 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   10b28:	00840004 	movi	r2,4096
   10b2c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   10b30:	e0fffe17 	ldw	r3,-8(fp)
   10b34:	e0bfff17 	ldw	r2,-4(fp)
   10b38:	1885883a 	add	r2,r3,r2
   10b3c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10b40:	e0bffe17 	ldw	r2,-8(fp)
   10b44:	e0bffc15 	stw	r2,-16(fp)
   10b48:	00000506 	br	10b60 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10b4c:	e0bffc17 	ldw	r2,-16(fp)
   10b50:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10b54:	e0bffc17 	ldw	r2,-16(fp)
   10b58:	10800804 	addi	r2,r2,32
   10b5c:	e0bffc15 	stw	r2,-16(fp)
   10b60:	e0fffc17 	ldw	r3,-16(fp)
   10b64:	e0bffd17 	ldw	r2,-12(fp)
   10b68:	18bff836 	bltu	r3,r2,10b4c <__alt_data_end+0xff010b4c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10b6c:	e0bffe17 	ldw	r2,-8(fp)
   10b70:	108007cc 	andi	r2,r2,31
   10b74:	10000226 	beq	r2,zero,10b80 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10b78:	e0bffc17 	ldw	r2,-16(fp)
   10b7c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10b80:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10b84:	0001883a 	nop
   10b88:	e037883a 	mov	sp,fp
   10b8c:	df000017 	ldw	fp,0(sp)
   10b90:	dec00104 	addi	sp,sp,4
   10b94:	f800283a 	ret

00010b98 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10b98:	defffe04 	addi	sp,sp,-8
   10b9c:	df000115 	stw	fp,4(sp)
   10ba0:	df000104 	addi	fp,sp,4
   10ba4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10ba8:	e0bfff17 	ldw	r2,-4(fp)
   10bac:	10bffe84 	addi	r2,r2,-6
   10bb0:	10c00428 	cmpgeui	r3,r2,16
   10bb4:	18001a1e 	bne	r3,zero,10c20 <alt_exception_cause_generated_bad_addr+0x88>
   10bb8:	100690ba 	slli	r3,r2,2
   10bbc:	00800074 	movhi	r2,1
   10bc0:	1082f404 	addi	r2,r2,3024
   10bc4:	1885883a 	add	r2,r3,r2
   10bc8:	10800017 	ldw	r2,0(r2)
   10bcc:	1000683a 	jmp	r2
   10bd0:	00010c10 	cmplti	zero,zero,1072
   10bd4:	00010c10 	cmplti	zero,zero,1072
   10bd8:	00010c20 	cmpeqi	zero,zero,1072
   10bdc:	00010c20 	cmpeqi	zero,zero,1072
   10be0:	00010c20 	cmpeqi	zero,zero,1072
   10be4:	00010c10 	cmplti	zero,zero,1072
   10be8:	00010c18 	cmpnei	zero,zero,1072
   10bec:	00010c20 	cmpeqi	zero,zero,1072
   10bf0:	00010c10 	cmplti	zero,zero,1072
   10bf4:	00010c10 	cmplti	zero,zero,1072
   10bf8:	00010c20 	cmpeqi	zero,zero,1072
   10bfc:	00010c10 	cmplti	zero,zero,1072
   10c00:	00010c18 	cmpnei	zero,zero,1072
   10c04:	00010c20 	cmpeqi	zero,zero,1072
   10c08:	00010c20 	cmpeqi	zero,zero,1072
   10c0c:	00010c10 	cmplti	zero,zero,1072
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10c10:	00800044 	movi	r2,1
   10c14:	00000306 	br	10c24 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10c18:	0005883a 	mov	r2,zero
   10c1c:	00000106 	br	10c24 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10c20:	0005883a 	mov	r2,zero
  }
}
   10c24:	e037883a 	mov	sp,fp
   10c28:	df000017 	ldw	fp,0(sp)
   10c2c:	dec00104 	addi	sp,sp,4
   10c30:	f800283a 	ret

00010c34 <atexit>:
   10c34:	200b883a 	mov	r5,r4
   10c38:	000f883a 	mov	r7,zero
   10c3c:	000d883a 	mov	r6,zero
   10c40:	0009883a 	mov	r4,zero
   10c44:	0010cfc1 	jmpi	10cfc <__register_exitproc>

00010c48 <exit>:
   10c48:	defffe04 	addi	sp,sp,-8
   10c4c:	000b883a 	mov	r5,zero
   10c50:	dc000015 	stw	r16,0(sp)
   10c54:	dfc00115 	stw	ra,4(sp)
   10c58:	2021883a 	mov	r16,r4
   10c5c:	0010e140 	call	10e14 <__call_exitprocs>
   10c60:	00800074 	movhi	r2,1
   10c64:	108cd504 	addi	r2,r2,13140
   10c68:	11000017 	ldw	r4,0(r2)
   10c6c:	20800f17 	ldw	r2,60(r4)
   10c70:	10000126 	beq	r2,zero,10c78 <exit+0x30>
   10c74:	103ee83a 	callr	r2
   10c78:	8009883a 	mov	r4,r16
   10c7c:	0010f940 	call	10f94 <_exit>

00010c80 <memcmp>:
   10c80:	01c000c4 	movi	r7,3
   10c84:	3980192e 	bgeu	r7,r6,10cec <memcmp+0x6c>
   10c88:	2144b03a 	or	r2,r4,r5
   10c8c:	11c4703a 	and	r2,r2,r7
   10c90:	10000f26 	beq	r2,zero,10cd0 <memcmp+0x50>
   10c94:	20800003 	ldbu	r2,0(r4)
   10c98:	28c00003 	ldbu	r3,0(r5)
   10c9c:	10c0151e 	bne	r2,r3,10cf4 <memcmp+0x74>
   10ca0:	31bfff84 	addi	r6,r6,-2
   10ca4:	01ffffc4 	movi	r7,-1
   10ca8:	00000406 	br	10cbc <memcmp+0x3c>
   10cac:	20800003 	ldbu	r2,0(r4)
   10cb0:	28c00003 	ldbu	r3,0(r5)
   10cb4:	31bfffc4 	addi	r6,r6,-1
   10cb8:	10c00e1e 	bne	r2,r3,10cf4 <memcmp+0x74>
   10cbc:	21000044 	addi	r4,r4,1
   10cc0:	29400044 	addi	r5,r5,1
   10cc4:	31fff91e 	bne	r6,r7,10cac <__alt_data_end+0xff010cac>
   10cc8:	0005883a 	mov	r2,zero
   10ccc:	f800283a 	ret
   10cd0:	20c00017 	ldw	r3,0(r4)
   10cd4:	28800017 	ldw	r2,0(r5)
   10cd8:	18bfee1e 	bne	r3,r2,10c94 <__alt_data_end+0xff010c94>
   10cdc:	31bfff04 	addi	r6,r6,-4
   10ce0:	21000104 	addi	r4,r4,4
   10ce4:	29400104 	addi	r5,r5,4
   10ce8:	39bff936 	bltu	r7,r6,10cd0 <__alt_data_end+0xff010cd0>
   10cec:	303fe91e 	bne	r6,zero,10c94 <__alt_data_end+0xff010c94>
   10cf0:	003ff506 	br	10cc8 <__alt_data_end+0xff010cc8>
   10cf4:	10c5c83a 	sub	r2,r2,r3
   10cf8:	f800283a 	ret

00010cfc <__register_exitproc>:
   10cfc:	defffa04 	addi	sp,sp,-24
   10d00:	dc000315 	stw	r16,12(sp)
   10d04:	04000074 	movhi	r16,1
   10d08:	840cd504 	addi	r16,r16,13140
   10d0c:	80c00017 	ldw	r3,0(r16)
   10d10:	dc400415 	stw	r17,16(sp)
   10d14:	dfc00515 	stw	ra,20(sp)
   10d18:	18805217 	ldw	r2,328(r3)
   10d1c:	2023883a 	mov	r17,r4
   10d20:	10003726 	beq	r2,zero,10e00 <__register_exitproc+0x104>
   10d24:	10c00117 	ldw	r3,4(r2)
   10d28:	010007c4 	movi	r4,31
   10d2c:	20c00e16 	blt	r4,r3,10d68 <__register_exitproc+0x6c>
   10d30:	1a000044 	addi	r8,r3,1
   10d34:	8800221e 	bne	r17,zero,10dc0 <__register_exitproc+0xc4>
   10d38:	18c00084 	addi	r3,r3,2
   10d3c:	18c7883a 	add	r3,r3,r3
   10d40:	18c7883a 	add	r3,r3,r3
   10d44:	12000115 	stw	r8,4(r2)
   10d48:	10c7883a 	add	r3,r2,r3
   10d4c:	19400015 	stw	r5,0(r3)
   10d50:	0005883a 	mov	r2,zero
   10d54:	dfc00517 	ldw	ra,20(sp)
   10d58:	dc400417 	ldw	r17,16(sp)
   10d5c:	dc000317 	ldw	r16,12(sp)
   10d60:	dec00604 	addi	sp,sp,24
   10d64:	f800283a 	ret
   10d68:	00800034 	movhi	r2,0
   10d6c:	10877d04 	addi	r2,r2,7668
   10d70:	10002626 	beq	r2,zero,10e0c <__register_exitproc+0x110>
   10d74:	01006404 	movi	r4,400
   10d78:	d9400015 	stw	r5,0(sp)
   10d7c:	d9800115 	stw	r6,4(sp)
   10d80:	d9c00215 	stw	r7,8(sp)
   10d84:	0001df40 	call	1df4 <malloc>
   10d88:	d9400017 	ldw	r5,0(sp)
   10d8c:	d9800117 	ldw	r6,4(sp)
   10d90:	d9c00217 	ldw	r7,8(sp)
   10d94:	10001d26 	beq	r2,zero,10e0c <__register_exitproc+0x110>
   10d98:	81000017 	ldw	r4,0(r16)
   10d9c:	10000115 	stw	zero,4(r2)
   10da0:	02000044 	movi	r8,1
   10da4:	22405217 	ldw	r9,328(r4)
   10da8:	0007883a 	mov	r3,zero
   10dac:	12400015 	stw	r9,0(r2)
   10db0:	20805215 	stw	r2,328(r4)
   10db4:	10006215 	stw	zero,392(r2)
   10db8:	10006315 	stw	zero,396(r2)
   10dbc:	883fde26 	beq	r17,zero,10d38 <__alt_data_end+0xff010d38>
   10dc0:	18c9883a 	add	r4,r3,r3
   10dc4:	2109883a 	add	r4,r4,r4
   10dc8:	1109883a 	add	r4,r2,r4
   10dcc:	21802215 	stw	r6,136(r4)
   10dd0:	01800044 	movi	r6,1
   10dd4:	12406217 	ldw	r9,392(r2)
   10dd8:	30cc983a 	sll	r6,r6,r3
   10ddc:	4992b03a 	or	r9,r9,r6
   10de0:	12406215 	stw	r9,392(r2)
   10de4:	21c04215 	stw	r7,264(r4)
   10de8:	01000084 	movi	r4,2
   10dec:	893fd21e 	bne	r17,r4,10d38 <__alt_data_end+0xff010d38>
   10df0:	11006317 	ldw	r4,396(r2)
   10df4:	218cb03a 	or	r6,r4,r6
   10df8:	11806315 	stw	r6,396(r2)
   10dfc:	003fce06 	br	10d38 <__alt_data_end+0xff010d38>
   10e00:	18805304 	addi	r2,r3,332
   10e04:	18805215 	stw	r2,328(r3)
   10e08:	003fc606 	br	10d24 <__alt_data_end+0xff010d24>
   10e0c:	00bfffc4 	movi	r2,-1
   10e10:	003fd006 	br	10d54 <__alt_data_end+0xff010d54>

00010e14 <__call_exitprocs>:
   10e14:	defff504 	addi	sp,sp,-44
   10e18:	df000915 	stw	fp,36(sp)
   10e1c:	dd400615 	stw	r21,24(sp)
   10e20:	dc800315 	stw	r18,12(sp)
   10e24:	dfc00a15 	stw	ra,40(sp)
   10e28:	ddc00815 	stw	r23,32(sp)
   10e2c:	dd800715 	stw	r22,28(sp)
   10e30:	dd000515 	stw	r20,20(sp)
   10e34:	dcc00415 	stw	r19,16(sp)
   10e38:	dc400215 	stw	r17,8(sp)
   10e3c:	dc000115 	stw	r16,4(sp)
   10e40:	d9000015 	stw	r4,0(sp)
   10e44:	2839883a 	mov	fp,r5
   10e48:	04800044 	movi	r18,1
   10e4c:	057fffc4 	movi	r21,-1
   10e50:	00800074 	movhi	r2,1
   10e54:	108cd504 	addi	r2,r2,13140
   10e58:	12000017 	ldw	r8,0(r2)
   10e5c:	45005217 	ldw	r20,328(r8)
   10e60:	44c05204 	addi	r19,r8,328
   10e64:	a0001c26 	beq	r20,zero,10ed8 <__call_exitprocs+0xc4>
   10e68:	a0800117 	ldw	r2,4(r20)
   10e6c:	15ffffc4 	addi	r23,r2,-1
   10e70:	b8000d16 	blt	r23,zero,10ea8 <__call_exitprocs+0x94>
   10e74:	14000044 	addi	r16,r2,1
   10e78:	8421883a 	add	r16,r16,r16
   10e7c:	8421883a 	add	r16,r16,r16
   10e80:	84402004 	addi	r17,r16,128
   10e84:	a463883a 	add	r17,r20,r17
   10e88:	a421883a 	add	r16,r20,r16
   10e8c:	e0001e26 	beq	fp,zero,10f08 <__call_exitprocs+0xf4>
   10e90:	80804017 	ldw	r2,256(r16)
   10e94:	e0801c26 	beq	fp,r2,10f08 <__call_exitprocs+0xf4>
   10e98:	bdffffc4 	addi	r23,r23,-1
   10e9c:	843fff04 	addi	r16,r16,-4
   10ea0:	8c7fff04 	addi	r17,r17,-4
   10ea4:	bd7ff91e 	bne	r23,r21,10e8c <__alt_data_end+0xff010e8c>
   10ea8:	00800034 	movhi	r2,0
   10eac:	10878204 	addi	r2,r2,7688
   10eb0:	10000926 	beq	r2,zero,10ed8 <__call_exitprocs+0xc4>
   10eb4:	a0800117 	ldw	r2,4(r20)
   10eb8:	1000301e 	bne	r2,zero,10f7c <__call_exitprocs+0x168>
   10ebc:	a0800017 	ldw	r2,0(r20)
   10ec0:	10003226 	beq	r2,zero,10f8c <__call_exitprocs+0x178>
   10ec4:	a009883a 	mov	r4,r20
   10ec8:	98800015 	stw	r2,0(r19)
   10ecc:	0001e080 	call	1e08 <free>
   10ed0:	9d000017 	ldw	r20,0(r19)
   10ed4:	a03fe41e 	bne	r20,zero,10e68 <__alt_data_end+0xff010e68>
   10ed8:	dfc00a17 	ldw	ra,40(sp)
   10edc:	df000917 	ldw	fp,36(sp)
   10ee0:	ddc00817 	ldw	r23,32(sp)
   10ee4:	dd800717 	ldw	r22,28(sp)
   10ee8:	dd400617 	ldw	r21,24(sp)
   10eec:	dd000517 	ldw	r20,20(sp)
   10ef0:	dcc00417 	ldw	r19,16(sp)
   10ef4:	dc800317 	ldw	r18,12(sp)
   10ef8:	dc400217 	ldw	r17,8(sp)
   10efc:	dc000117 	ldw	r16,4(sp)
   10f00:	dec00b04 	addi	sp,sp,44
   10f04:	f800283a 	ret
   10f08:	a0800117 	ldw	r2,4(r20)
   10f0c:	80c00017 	ldw	r3,0(r16)
   10f10:	10bfffc4 	addi	r2,r2,-1
   10f14:	15c01426 	beq	r2,r23,10f68 <__call_exitprocs+0x154>
   10f18:	80000015 	stw	zero,0(r16)
   10f1c:	183fde26 	beq	r3,zero,10e98 <__alt_data_end+0xff010e98>
   10f20:	95c8983a 	sll	r4,r18,r23
   10f24:	a0806217 	ldw	r2,392(r20)
   10f28:	a5800117 	ldw	r22,4(r20)
   10f2c:	2084703a 	and	r2,r4,r2
   10f30:	10000b26 	beq	r2,zero,10f60 <__call_exitprocs+0x14c>
   10f34:	a0806317 	ldw	r2,396(r20)
   10f38:	2088703a 	and	r4,r4,r2
   10f3c:	20000c1e 	bne	r4,zero,10f70 <__call_exitprocs+0x15c>
   10f40:	89400017 	ldw	r5,0(r17)
   10f44:	d9000017 	ldw	r4,0(sp)
   10f48:	183ee83a 	callr	r3
   10f4c:	a0800117 	ldw	r2,4(r20)
   10f50:	15bfbf1e 	bne	r2,r22,10e50 <__alt_data_end+0xff010e50>
   10f54:	98800017 	ldw	r2,0(r19)
   10f58:	153fcf26 	beq	r2,r20,10e98 <__alt_data_end+0xff010e98>
   10f5c:	003fbc06 	br	10e50 <__alt_data_end+0xff010e50>
   10f60:	183ee83a 	callr	r3
   10f64:	003ff906 	br	10f4c <__alt_data_end+0xff010f4c>
   10f68:	a5c00115 	stw	r23,4(r20)
   10f6c:	003feb06 	br	10f1c <__alt_data_end+0xff010f1c>
   10f70:	89000017 	ldw	r4,0(r17)
   10f74:	183ee83a 	callr	r3
   10f78:	003ff406 	br	10f4c <__alt_data_end+0xff010f4c>
   10f7c:	a0800017 	ldw	r2,0(r20)
   10f80:	a027883a 	mov	r19,r20
   10f84:	1029883a 	mov	r20,r2
   10f88:	003fb606 	br	10e64 <__alt_data_end+0xff010e64>
   10f8c:	0005883a 	mov	r2,zero
   10f90:	003ffb06 	br	10f80 <__alt_data_end+0xff010f80>

00010f94 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   10f94:	defffd04 	addi	sp,sp,-12
   10f98:	df000215 	stw	fp,8(sp)
   10f9c:	df000204 	addi	fp,sp,8
   10fa0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   10fa4:	0001883a 	nop
   10fa8:	e0bfff17 	ldw	r2,-4(fp)
   10fac:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   10fb0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10fb4:	10000226 	beq	r2,zero,10fc0 <_exit+0x2c>
    ALT_SIM_FAIL();
   10fb8:	002af070 	cmpltui	zero,zero,43969
   10fbc:	00000106 	br	10fc4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   10fc0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   10fc4:	003fff06 	br	10fc4 <__alt_data_end+0xff010fc4>
